
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ce8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  08014ec8  08014ec8  00024ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080159f4  080159f4  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  080159f4  080159f4  000259f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159fc  080159fc  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159fc  080159fc  000259fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a00  08015a00  00025a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08015a04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cb0  20000350  08015d54  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006000  08015d54  00036000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003428e  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000070d5  00000000  00000000  00064651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027f8  00000000  00000000  0006b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ebd  00000000  00000000  0006df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003115d  00000000  00000000  0006fddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033e7c  00000000  00000000  000a0f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011934e  00000000  00000000  000d4db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bb1c  00000000  00000000  001ee104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001f9c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014eb0 	.word	0x08014eb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08014eb0 	.word	0x08014eb0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <BMI088_Init>:
 *
 */

uint8_t BMI088_Init(BMI088* imu, SPI_HandleTypeDef* spi_handle, osMutexId_t* spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port,
		uint16_t acc_cs_pin, uint16_t gyro_cs_pin, uint16_t acc_irq_pin, uint16_t gyro_irq_pin)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
	imu->spi_handle = spi_handle;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	601a      	str	r2, [r3, #0]
	imu->spi_mutex = spi_mutex;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
	imu->acc_cs_port = acc_cs_port;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	609a      	str	r2, [r3, #8]
	imu->gyro_cs_port = gyro_cs_port;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a3a      	ldr	r2, [r7, #32]
 8000f18:	60da      	str	r2, [r3, #12]
	imu->acc_cs_pin = acc_cs_pin;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f1e:	821a      	strh	r2, [r3, #16]
	imu->gyro_cs_pin = gyro_cs_pin;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f24:	825a      	strh	r2, [r3, #18]
	imu->acc_irq_pin = acc_irq_pin;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f2a:	829a      	strh	r2, [r3, #20]
	imu->gyro_irq_pin = gyro_irq_pin;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f30:	82da      	strh	r2, [r3, #22]
	imu->acc_conversion = 9.80665 / 32768.0f * 2.0f * 1.5f; /* Based on +-3g range */
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4a89      	ldr	r2, [pc, #548]	; (800115c <BMI088_Init+0x268>)
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
	imu->gyro_conversion = M_PI / 180.0f * 500.0f / 32768.0f; /* Based on +-500 deg/s range */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4a89      	ldr	r2, [pc, #548]	; (8001160 <BMI088_Init+0x26c>)
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Perform soft-reset of accelerometer (switch to SPI mode first)
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6898      	ldr	r0, [r3, #8]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	8a1b      	ldrh	r3, [r3, #16]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f002 fff1 	bl	8003f30 <HAL_GPIO_WritePin>
	osDelay(10);
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f00c fc33 	bl	800d7ba <osDelay>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6898      	ldr	r0, [r3, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	8a1b      	ldrh	r3, [r3, #16]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f002 ffe6 	bl	8003f30 <HAL_GPIO_WritePin>
	osDelay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f00c fc28 	bl	800d7ba <osDelay>
	tx_data[0] = 0xB6;
 8000f6a:	23b6      	movs	r3, #182	; 0xb6
 8000f6c:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_SOFTRESET, tx_data, 1);
 8000f6e:	f107 0214 	add.w	r2, r7, #20
 8000f72:	2301      	movs	r3, #1
 8000f74:	217e      	movs	r1, #126	; 0x7e
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 fad2 	bl	8001520 <BMI088_WriteAccRegister>
	osDelay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f00c fc1c 	bl	800d7ba <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 8000f82:	23b6      	movs	r3, #182	; 0xb6
 8000f84:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_SOFTRESET, tx_data, 1);
 8000f86:	f107 0214 	add.w	r2, r7, #20
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2114      	movs	r1, #20
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 fc20 	bl	80017d4 <BMI088_WriteGyroRegister>
	osDelay(10);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f00c fc10 	bl	800d7ba <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6898      	ldr	r0, [r3, #8]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8a1b      	ldrh	r3, [r3, #16]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f002 ffc3 	bl	8003f30 <HAL_GPIO_WritePin>
	osDelay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f00c fc05 	bl	800d7ba <osDelay>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6898      	ldr	r0, [r3, #8]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8a1b      	ldrh	r3, [r3, #16]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f002 ffb8 	bl	8003f30 <HAL_GPIO_WritePin>
	osDelay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f00c fbfa 	bl	800d7ba <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	743b      	strb	r3, [r7, #16]
	BMI088_ReadAccRegister(imu, ACC_CHIP_ID, rx_data, 1);
 8000fca:	f107 0210 	add.w	r2, r7, #16
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f9d6 	bl	8001384 <BMI088_ReadAccRegister>
	if (rx_data[0] == 0x1E)
 8000fd8:	7c3b      	ldrb	r3, [r7, #16]
 8000fda:	2b1e      	cmp	r3, #30
 8000fdc:	d162      	bne.n	80010a4 <BMI088_Init+0x1b0>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", CRITICAL);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4860      	ldr	r0, [pc, #384]	; (8001164 <BMI088_Init+0x270>)
 8000fe2:	f001 fa7f 	bl	80024e4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f00c fbe7 	bl	800d7ba <osDelay>

	// Set 100Hz ODR, no over-sampling (40Hz BW)
	tx_data[0] = 0xA8;
 8000fec:	23a8      	movs	r3, #168	; 0xa8
 8000fee:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_CONF, tx_data, 1);
 8000ff0:	f107 0214 	add.w	r2, r7, #20
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 fa91 	bl	8001520 <BMI088_WriteAccRegister>
	osDelay(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f00c fbdb 	bl	800d7ba <osDelay>

	// Set +-3g range (10920 LSB/g)
	tx_data[0] = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_RANGE, tx_data, 1);
 8001008:	f107 0214 	add.w	r2, r7, #20
 800100c:	2301      	movs	r3, #1
 800100e:	2141      	movs	r1, #65	; 0x41
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 fa85 	bl	8001520 <BMI088_WriteAccRegister>
	osDelay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f00c fbcf 	bl	800d7ba <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 800101c:	230a      	movs	r3, #10
 800101e:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT1_IO_CTRL, tx_data, 1);
 8001020:	f107 0214 	add.w	r2, r7, #20
 8001024:	2301      	movs	r3, #1
 8001026:	2153      	movs	r1, #83	; 0x53
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 fa79 	bl	8001520 <BMI088_WriteAccRegister>
	osDelay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f00c fbc3 	bl	800d7ba <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 8001034:	2304      	movs	r3, #4
 8001036:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT_MAP_DATA, tx_data, 1);
 8001038:	f107 0214 	add.w	r2, r7, #20
 800103c:	2301      	movs	r3, #1
 800103e:	2158      	movs	r1, #88	; 0x58
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 fa6d 	bl	8001520 <BMI088_WriteAccRegister>
	osDelay(10);
 8001046:	200a      	movs	r0, #10
 8001048:	f00c fbb7 	bl	800d7ba <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 800104c:	2300      	movs	r3, #0
 800104e:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CONF, tx_data, 1);
 8001050:	f107 0214 	add.w	r2, r7, #20
 8001054:	2301      	movs	r3, #1
 8001056:	217c      	movs	r1, #124	; 0x7c
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 fa61 	bl	8001520 <BMI088_WriteAccRegister>
	osDelay(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f00c fbab 	bl	800d7ba <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 8001064:	2304      	movs	r3, #4
 8001066:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CTRL, tx_data, 1);
 8001068:	f107 0214 	add.w	r2, r7, #20
 800106c:	2301      	movs	r3, #1
 800106e:	217d      	movs	r1, #125	; 0x7d
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 fa55 	bl	8001520 <BMI088_WriteAccRegister>
	osDelay(10);
 8001076:	200a      	movs	r0, #10
 8001078:	f00c fb9f 	bl	800d7ba <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", CRITICAL);
 800107c:	2101      	movs	r1, #1
 800107e:	483a      	ldr	r0, [pc, #232]	; (8001168 <BMI088_Init+0x274>)
 8001080:	f001 fa30 	bl	80024e4 <USB_Log>
	osDelay(100);
 8001084:	2064      	movs	r0, #100	; 0x64
 8001086:	f00c fb98 	bl	800d7ba <osDelay>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	743b      	strb	r3, [r7, #16]
	BMI088_ReadGyroRegister(imu, GYRO_CHIP_ID, rx_data, 1);
 800108e:	f107 0210 	add.w	r2, r7, #16
 8001092:	2301      	movs	r3, #1
 8001094:	2100      	movs	r1, #0
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 face 	bl	8001638 <BMI088_ReadGyroRegister>
	if (rx_data[0] == 0x0F)
 800109c:	7c3b      	ldrb	r3, [r7, #16]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	d152      	bne.n	8001148 <BMI088_Init+0x254>
 80010a2:	e005      	b.n	80010b0 <BMI088_Init+0x1bc>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 80010a4:	2102      	movs	r1, #2
 80010a6:	4831      	ldr	r0, [pc, #196]	; (800116c <BMI088_Init+0x278>)
 80010a8:	f001 fa1c 	bl	80024e4 <USB_Log>
		return 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e050      	b.n	8001152 <BMI088_Init+0x25e>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", CRITICAL);
 80010b0:	2101      	movs	r1, #1
 80010b2:	482f      	ldr	r0, [pc, #188]	; (8001170 <BMI088_Init+0x27c>)
 80010b4:	f001 fa16 	bl	80024e4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f00c fb7e 	bl	800d7ba <osDelay>

	// Set 100Hz ODR (32Hz BW)
	tx_data[0] = 0x07;
 80010be:	2307      	movs	r3, #7
 80010c0:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_BANDWIDTH, tx_data, 1);
 80010c2:	f107 0214 	add.w	r2, r7, #20
 80010c6:	2301      	movs	r3, #1
 80010c8:	2110      	movs	r1, #16
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 fb82 	bl	80017d4 <BMI088_WriteGyroRegister>
	osDelay(10);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f00c fb72 	bl	800d7ba <osDelay>

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 80010d6:	2302      	movs	r3, #2
 80010d8:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_RANGE, tx_data, 1);
 80010da:	f107 0214 	add.w	r2, r7, #20
 80010de:	2301      	movs	r3, #1
 80010e0:	210f      	movs	r1, #15
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 fb76 	bl	80017d4 <BMI088_WriteGyroRegister>
	osDelay(10);
 80010e8:	200a      	movs	r0, #10
 80010ea:	f00c fb66 	bl	800d7ba <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 80010ee:	2301      	movs	r3, #1
 80010f0:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_CONF, tx_data, 1);
 80010f2:	f107 0214 	add.w	r2, r7, #20
 80010f6:	2301      	movs	r3, #1
 80010f8:	2116      	movs	r1, #22
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 fb6a 	bl	80017d4 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f00c fb5a 	bl	800d7ba <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 8001106:	2301      	movs	r3, #1
 8001108:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_MAP, tx_data, 1);
 800110a:	f107 0214 	add.w	r2, r7, #20
 800110e:	2301      	movs	r3, #1
 8001110:	2118      	movs	r1, #24
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 fb5e 	bl	80017d4 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f00c fb4e 	bl	800d7ba <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_INT_CTRL, tx_data, 1);
 8001122:	f107 0214 	add.w	r2, r7, #20
 8001126:	2301      	movs	r3, #1
 8001128:	2115      	movs	r1, #21
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 fb52 	bl	80017d4 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f00c fb42 	bl	800d7ba <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", CRITICAL);
 8001136:	2101      	movs	r1, #1
 8001138:	480e      	ldr	r0, [pc, #56]	; (8001174 <BMI088_Init+0x280>)
 800113a:	f001 f9d3 	bl	80024e4 <USB_Log>
	osDelay(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f00c fb3b 	bl	800d7ba <osDelay>

	return 1;
 8001144:	2301      	movs	r3, #1
 8001146:	e004      	b.n	8001152 <BMI088_Init+0x25e>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 8001148:	2102      	movs	r1, #2
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <BMI088_Init+0x284>)
 800114c:	f001 f9ca 	bl	80024e4 <USB_Log>
		return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	3a6b5c0f 	.word	0x3a6b5c0f
 8001160:	398ba058 	.word	0x398ba058
 8001164:	08014ec8 	.word	0x08014ec8
 8001168:	08014f3c 	.word	0x08014f3c
 800116c:	08014f00 	.word	0x08014f00
 8001170:	08014f64 	.word	0x08014f64
 8001174:	08014fd0 	.word	0x08014fd0
 8001178:	08014f98 	.word	0x08014f98

0800117c <BMI088_ReadAccData>:

uint8_t BMI088_ReadAccData(BMI088* imu)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadAccRegister(imu, ACC_X_LSB, rx_data, sizeof(rx_data));
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2306      	movs	r3, #6
 800118a:	2112      	movs	r1, #18
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f8f9 	bl	8001384 <BMI088_ReadAccRegister>
 8001192:	4603      	mov	r3, r0
 8001194:	75fb      	strb	r3, [r7, #23]

	if (status)
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d046      	beq.n	800122a <BMI088_ReadAccData+0xae>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7a3b      	ldrb	r3, [r7, #8]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	82bb      	strh	r3, [r7, #20]
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	7abb      	ldrb	r3, [r7, #10]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	827b      	strh	r3, [r7, #18]
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	7b3b      	ldrb	r3, [r7, #12]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	823b      	strh	r3, [r7, #16]

		imu->accel_x = accel_x_int16 * imu->acc_conversion;
 80011c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a06 	vstr	s15, [r3, #24]
		imu->accel_y = accel_y_int16 * imu->acc_conversion;
 80011e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edc3 7a07 	vstr	s15, [r3, #28]
		imu->accel_z = accel_z_int16 * imu->acc_conversion;
 80011fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edc3 7a08 	vstr	s15, [r3, #32]

		// Clear data ready interrupt
		BMI088_ReadAccRegister(imu, ACC_INT_STAT_1, rx_data, 1);
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	2301      	movs	r3, #1
 8001220:	211d      	movs	r1, #29
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f8ae 	bl	8001384 <BMI088_ReadAccRegister>
 8001228:	e003      	b.n	8001232 <BMI088_ReadAccData+0xb6>
	}
	else
	{
		USB_Log("ERR reading BMI088 accelerometer data.", ERR);
 800122a:	2102      	movs	r1, #2
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <BMI088_ReadAccData+0xc0>)
 800122e:	f001 f959 	bl	80024e4 <USB_Log>
	}

	return status;
 8001232:	7dfb      	ldrb	r3, [r7, #23]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	08014ff4 	.word	0x08014ff4

08001240 <BMI088_ReadGyroData>:

uint8_t BMI088_ReadGyroData(BMI088* imu)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadGyroRegister(imu, RATE_X_LSB, rx_data, sizeof(rx_data));
 8001248:	f107 0208 	add.w	r2, r7, #8
 800124c:	2306      	movs	r3, #6
 800124e:	2102      	movs	r1, #2
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f9f1 	bl	8001638 <BMI088_ReadGyroRegister>
 8001256:	4603      	mov	r3, r0
 8001258:	75fb      	strb	r3, [r7, #23]

	if (status)
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d03f      	beq.n	80012e0 <BMI088_ReadGyroData+0xa0>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 8001260:	7a7b      	ldrb	r3, [r7, #9]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	7a3b      	ldrb	r3, [r7, #8]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	82bb      	strh	r3, [r7, #20]
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	827b      	strh	r3, [r7, #18]
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
 8001282:	7b3b      	ldrb	r3, [r7, #12]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	823b      	strh	r3, [r7, #16]

		imu->rate_x = rate_x_int16 * imu->gyro_conversion;
 800128a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800129c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		imu->rate_y = rate_y_int16 * imu->gyro_conversion;
 80012a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		imu->rate_z = rate_z_int16 * imu->gyro_conversion;
 80012c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80012de:	e003      	b.n	80012e8 <BMI088_ReadGyroData+0xa8>

		// Interrupt cleared automatically after 280-400us
	}
	else
	{
		USB_Log("ERR reading BMI088 gyroscope data.", ERR);
 80012e0:	2102      	movs	r1, #2
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <BMI088_ReadGyroData+0xb4>)
 80012e4:	f001 f8fe 	bl	80024e4 <USB_Log>
	}

	return status;
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	0801501c 	.word	0x0801501c

080012f8 <BMI088_ReadTempData>:

uint8_t BMI088_ReadTempData(BMI088* imu)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	uint8_t status = BMI088_ReadAccRegister(imu, TEMP_MSB, rx_data, sizeof(rx_data));
 8001300:	f107 0208 	add.w	r2, r7, #8
 8001304:	2302      	movs	r3, #2
 8001306:	2122      	movs	r1, #34	; 0x22
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f83b 	bl	8001384 <BMI088_ReadAccRegister>
 800130e:	4603      	mov	r3, r0
 8001310:	737b      	strb	r3, [r7, #13]

	if (status)
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d029      	beq.n	800136c <BMI088_ReadTempData+0x74>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 8001318:	7a3b      	ldrb	r3, [r7, #8]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	b21a      	sxth	r2, r3
 800131e:	7a7b      	ldrb	r3, [r7, #9]
 8001320:	095b      	lsrs	r3, r3, #5
 8001322:	b2db      	uxtb	r3, r3
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21b      	sxth	r3, r3
 800132a:	817b      	strh	r3, [r7, #10]
		int16_t temp_int11 = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	81fb      	strh	r3, [r7, #14]
		if (temp_uint11 > 1023)
 8001330:	897b      	ldrh	r3, [r7, #10]
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001336:	d305      	bcc.n	8001344 <BMI088_ReadTempData+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800133e:	b29b      	uxth	r3, r3
 8001340:	81fb      	strh	r3, [r7, #14]
 8001342:	e001      	b.n	8001348 <BMI088_ReadTempData+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 8001344:	897b      	ldrh	r3, [r7, #10]
 8001346:	81fb      	strh	r3, [r7, #14]
		}
		imu->temperature = temp_int11 * 0.125f + 23.0f;
 8001348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 800136a:	e003      	b.n	8001374 <BMI088_ReadTempData+0x7c>
	}
	else
	{
		USB_Log("ERR reading BMI088 temperature data.", ERR);
 800136c:	2102      	movs	r1, #2
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <BMI088_ReadTempData+0x88>)
 8001370:	f001 f8b8 	bl	80024e4 <USB_Log>
	}

	return status;
 8001374:	7b7b      	ldrb	r3, [r7, #13]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08015040 	.word	0x08015040

08001384 <BMI088_ReadAccRegister>:
 * BMI088 LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t BMI088_ReadAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001388:	b091      	sub	sp, #68	; 0x44
 800138a:	af02      	add	r7, sp, #8
 800138c:	6178      	str	r0, [r7, #20]
 800138e:	60fa      	str	r2, [r7, #12]
 8001390:	461a      	mov	r2, r3
 8001392:	460b      	mov	r3, r1
 8001394:	74fb      	strb	r3, [r7, #19]
 8001396:	4613      	mov	r3, r2
 8001398:	823b      	strh	r3, [r7, #16]
 800139a:	466b      	mov	r3, sp
 800139c:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 2;
 800139e:	8a3b      	ldrh	r3, [r7, #16]
 80013a0:	3302      	adds	r3, #2
 80013a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t tx_buffer[num_bytes];
 80013a4:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80013a6:	460b      	mov	r3, r1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ac:	b28b      	uxth	r3, r1
 80013ae:	2200      	movs	r2, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	00c3      	lsls	r3, r0, #3
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	00c2      	lsls	r2, r0, #3
 80013ca:	b28b      	uxth	r3, r1
 80013cc:	2200      	movs	r2, #0
 80013ce:	469a      	mov	sl, r3
 80013d0:	4693      	mov	fp, r2
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013e6:	460b      	mov	r3, r1
 80013e8:	3307      	adds	r3, #7
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	ebad 0d03 	sub.w	sp, sp, r3
 80013f2:	ab02      	add	r3, sp, #8
 80013f4:	3300      	adds	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t rx_buffer[num_bytes];
 80013f8:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80013fa:	460b      	mov	r3, r1
 80013fc:	3b01      	subs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	b28b      	uxth	r3, r1
 8001402:	2200      	movs	r2, #0
 8001404:	4698      	mov	r8, r3
 8001406:	4691      	mov	r9, r2
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001414:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001418:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800141c:	b28b      	uxth	r3, r1
 800141e:	2200      	movs	r2, #0
 8001420:	461c      	mov	r4, r3
 8001422:	4615      	mov	r5, r2
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	00eb      	lsls	r3, r5, #3
 800142e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001432:	00e2      	lsls	r2, r4, #3
 8001434:	460b      	mov	r3, r1
 8001436:	3307      	adds	r3, #7
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	ebad 0d03 	sub.w	sp, sp, r3
 8001440:	ab02      	add	r3, sp, #8
 8001442:	3300      	adds	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
 800144a:	e00c      	b.n	8001466 <BMI088_ReadAccRegister+0xe2>
	{
		tx_buffer[i] = 0;
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001450:	4413      	add	r3, r2
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145a:	4413      	add	r3, r2
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001462:	3301      	adds	r3, #1
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
 8001466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800146a:	429a      	cmp	r2, r3
 800146c:	dbee      	blt.n	800144c <BMI088_ReadAccRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001474:	b2da      	uxtb	r2, r3
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001484:	4618      	mov	r0, r3
 8001486:	f00c fa39 	bl	800d8fc <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6898      	ldr	r0, [r3, #8]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	8a1b      	ldrh	r3, [r3, #16]
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f002 fd4b 	bl	8003f30 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	9200      	str	r2, [sp, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014aa:	f006 fb47 	bl	8007b3c <HAL_SPI_TransmitReceive>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	8a1b      	ldrh	r3, [r3, #16]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	f002 fd32 	bl	8003f30 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00c fa5d 	bl	800d992 <osMutexRelease>

	if (status)
 80014d8:	7efb      	ldrb	r3, [r7, #27]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d013      	beq.n	8001506 <BMI088_ReadAccRegister+0x182>
	{
		// The first received byte is a dummy byte (ignore index i=1)
		for (int i = 2; i < num_bytes; i++)
 80014de:	2302      	movs	r3, #2
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
 80014e2:	e00b      	b.n	80014fc <BMI088_ReadAccRegister+0x178>
		{
			rx_data[i - 2] = rx_buffer[i];
 80014e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e6:	3b02      	subs	r3, #2
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	69f9      	ldr	r1, [r7, #28]
 80014ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014f0:	440a      	add	r2, r1
 80014f2:	7812      	ldrb	r2, [r2, #0]
 80014f4:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 80014f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f8:	3301      	adds	r3, #1
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
 80014fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001500:	429a      	cmp	r2, r3
 8001502:	dbef      	blt.n	80014e4 <BMI088_ReadAccRegister+0x160>
 8001504:	e003      	b.n	800150e <BMI088_ReadAccRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 8001506:	2102      	movs	r1, #2
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <BMI088_ReadAccRegister+0x198>)
 800150a:	f000 ffeb 	bl	80024e4 <USB_Log>
	}

	return status;
 800150e:	7efb      	ldrb	r3, [r7, #27]
 8001510:	46b5      	mov	sp, r6
}
 8001512:	4618      	mov	r0, r3
 8001514:	373c      	adds	r7, #60	; 0x3c
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800151c:	08015094 	.word	0x08015094

08001520 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001524:	b08b      	sub	sp, #44	; 0x2c
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	461a      	mov	r2, r3
 800152e:	460b      	mov	r3, r1
 8001530:	72fb      	strb	r3, [r7, #11]
 8001532:	4613      	mov	r3, r2
 8001534:	813b      	strh	r3, [r7, #8]
 8001536:	466b      	mov	r3, sp
 8001538:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 800153a:	893b      	ldrh	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t tx_buffer[num_bytes];
 8001540:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001542:	460b      	mov	r3, r1
 8001544:	3b01      	subs	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	b28b      	uxth	r3, r1
 800154a:	2200      	movs	r2, #0
 800154c:	4698      	mov	r8, r3
 800154e:	4691      	mov	r9, r2
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800155c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001564:	b28b      	uxth	r3, r1
 8001566:	2200      	movs	r2, #0
 8001568:	461c      	mov	r4, r3
 800156a:	4615      	mov	r5, r2
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	00eb      	lsls	r3, r5, #3
 8001576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157a:	00e2      	lsls	r2, r4, #3
 800157c:	460b      	mov	r3, r1
 800157e:	3307      	adds	r3, #7
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	ebad 0d03 	sub.w	sp, sp, r3
 8001588:	466b      	mov	r3, sp
 800158a:	3300      	adds	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	7afa      	ldrb	r2, [r7, #11]
 8001592:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
 8001598:	e00c      	b.n	80015b4 <BMI088_WriteAccRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3b01      	subs	r3, #1
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	3301      	adds	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
 80015b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80015b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbee      	blt.n	800159a <BMI088_WriteAccRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00c f998 	bl	800d8fc <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6898      	ldr	r0, [r3, #8]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8a1b      	ldrh	r3, [r3, #16]
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	f002 fcaa 	bl	8003f30 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	f006 f933 	bl	8007852 <HAL_SPI_Transmit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf0c      	ite	eq
 80015f2:	2301      	moveq	r3, #1
 80015f4:	2300      	movne	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6898      	ldr	r0, [r3, #8]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8a1b      	ldrh	r3, [r3, #16]
 8001602:	2201      	movs	r2, #1
 8001604:	4619      	mov	r1, r3
 8001606:	f002 fc93 	bl	8003f30 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f00c f9be 	bl	800d992 <osMutexRelease>

	if (!status)
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d103      	bne.n	8001624 <BMI088_WriteAccRegister+0x104>
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 800161c:	2102      	movs	r1, #2
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <BMI088_WriteAccRegister+0x114>)
 8001620:	f000 ff60 	bl	80024e4 <USB_Log>
	}

	return status;
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	46b5      	mov	sp, r6
}
 8001628:	4618      	mov	r0, r3
 800162a:	372c      	adds	r7, #44	; 0x2c
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001632:	bf00      	nop
 8001634:	080150c0 	.word	0x080150c0

08001638 <BMI088_ReadGyroRegister>:

uint8_t BMI088_ReadGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800163c:	b091      	sub	sp, #68	; 0x44
 800163e:	af02      	add	r7, sp, #8
 8001640:	6178      	str	r0, [r7, #20]
 8001642:	60fa      	str	r2, [r7, #12]
 8001644:	461a      	mov	r2, r3
 8001646:	460b      	mov	r3, r1
 8001648:	74fb      	strb	r3, [r7, #19]
 800164a:	4613      	mov	r3, r2
 800164c:	823b      	strh	r3, [r7, #16]
 800164e:	466b      	mov	r3, sp
 8001650:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 8001652:	8a3b      	ldrh	r3, [r7, #16]
 8001654:	3301      	adds	r3, #1
 8001656:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t tx_buffer[num_bytes];
 8001658:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800165a:	460b      	mov	r3, r1
 800165c:	3b01      	subs	r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	b28b      	uxth	r3, r1
 8001662:	2200      	movs	r2, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	00c3      	lsls	r3, r0, #3
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	00c2      	lsls	r2, r0, #3
 800167e:	b28b      	uxth	r3, r1
 8001680:	2200      	movs	r2, #0
 8001682:	469a      	mov	sl, r3
 8001684:	4693      	mov	fp, r2
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001692:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800169a:	460b      	mov	r3, r1
 800169c:	3307      	adds	r3, #7
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	ebad 0d03 	sub.w	sp, sp, r3
 80016a6:	ab02      	add	r3, sp, #8
 80016a8:	3300      	adds	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t rx_buffer[num_bytes];
 80016ac:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80016ae:	460b      	mov	r3, r1
 80016b0:	3b01      	subs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	b28b      	uxth	r3, r1
 80016b6:	2200      	movs	r2, #0
 80016b8:	4698      	mov	r8, r3
 80016ba:	4691      	mov	r9, r2
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d0:	b28b      	uxth	r3, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	461c      	mov	r4, r3
 80016d6:	4615      	mov	r5, r2
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	00eb      	lsls	r3, r5, #3
 80016e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016e6:	00e2      	lsls	r2, r4, #3
 80016e8:	460b      	mov	r3, r1
 80016ea:	3307      	adds	r3, #7
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	ebad 0d03 	sub.w	sp, sp, r3
 80016f4:	ab02      	add	r3, sp, #8
 80016f6:	3300      	adds	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
 80016fe:	e00c      	b.n	800171a <BMI088_ReadGyroRegister+0xe2>
	{
		tx_buffer[i] = 0;
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001704:	4413      	add	r3, r2
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	4413      	add	r3, r2
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001716:	3301      	adds	r3, #1
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
 800171a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800171c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800171e:	429a      	cmp	r2, r3
 8001720:	dbee      	blt.n	8001700 <BMI088_ReadGyroRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001728:	b2da      	uxtb	r2, r3
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001738:	4618      	mov	r0, r3
 800173a:	f00c f8df 	bl	800d8fc <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	68d8      	ldr	r0, [r3, #12]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	8a5b      	ldrh	r3, [r3, #18]
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	f002 fbf1 	bl	8003f30 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001758:	9200      	str	r2, [sp, #0]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800175e:	f006 f9ed 	bl	8007b3c <HAL_SPI_TransmitReceive>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	68d8      	ldr	r0, [r3, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	8a5b      	ldrh	r3, [r3, #18]
 8001778:	2201      	movs	r2, #1
 800177a:	4619      	mov	r1, r3
 800177c:	f002 fbd8 	bl	8003f30 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f00c f903 	bl	800d992 <osMutexRelease>

	if (status)
 800178c:	7efb      	ldrb	r3, [r7, #27]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d013      	beq.n	80017ba <BMI088_ReadGyroRegister+0x182>
	{
		for (int i = 1; i < num_bytes; i++)
 8001792:	2301      	movs	r3, #1
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
 8001796:	e00b      	b.n	80017b0 <BMI088_ReadGyroRegister+0x178>
		{
			rx_data[i - 1] = rx_buffer[i];
 8001798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179a:	3b01      	subs	r3, #1
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	69f9      	ldr	r1, [r7, #28]
 80017a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017a4:	440a      	add	r2, r1
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	3301      	adds	r3, #1
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
 80017b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbef      	blt.n	8001798 <BMI088_ReadGyroRegister+0x160>
 80017b8:	e003      	b.n	80017c2 <BMI088_ReadGyroRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 80017ba:	2102      	movs	r1, #2
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <BMI088_ReadGyroRegister+0x198>)
 80017be:	f000 fe91 	bl	80024e4 <USB_Log>
	}

	return status;
 80017c2:	7efb      	ldrb	r3, [r7, #27]
 80017c4:	46b5      	mov	sp, r6
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	373c      	adds	r7, #60	; 0x3c
 80017ca:	46bd      	mov	sp, r7
 80017cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d0:	080150f0 	.word	0x080150f0

080017d4 <BMI088_WriteGyroRegister>:

uint8_t BMI088_WriteGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 80017d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d8:	b08b      	sub	sp, #44	; 0x2c
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	461a      	mov	r2, r3
 80017e2:	460b      	mov	r3, r1
 80017e4:	72fb      	strb	r3, [r7, #11]
 80017e6:	4613      	mov	r3, r2
 80017e8:	813b      	strh	r3, [r7, #8]
 80017ea:	466b      	mov	r3, sp
 80017ec:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 80017ee:	893b      	ldrh	r3, [r7, #8]
 80017f0:	3301      	adds	r3, #1
 80017f2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t tx_buffer[num_bytes];
 80017f4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80017f6:	460b      	mov	r3, r1
 80017f8:	3b01      	subs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	b28b      	uxth	r3, r1
 80017fe:	2200      	movs	r2, #0
 8001800:	4698      	mov	r8, r3
 8001802:	4691      	mov	r9, r2
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001818:	b28b      	uxth	r3, r1
 800181a:	2200      	movs	r2, #0
 800181c:	461c      	mov	r4, r3
 800181e:	4615      	mov	r5, r2
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	00eb      	lsls	r3, r5, #3
 800182a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800182e:	00e2      	lsls	r2, r4, #3
 8001830:	460b      	mov	r3, r1
 8001832:	3307      	adds	r3, #7
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	ebad 0d03 	sub.w	sp, sp, r3
 800183c:	466b      	mov	r3, sp
 800183e:	3300      	adds	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	7afa      	ldrb	r2, [r7, #11]
 8001846:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 8001848:	2301      	movs	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	e00c      	b.n	8001868 <BMI088_WriteGyroRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3b01      	subs	r3, #1
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	7819      	ldrb	r1, [r3, #0]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	4413      	add	r3, r2
 800185e:	460a      	mov	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3301      	adds	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800186a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186c:	429a      	cmp	r2, r3
 800186e:	dbee      	blt.n	800184e <BMI088_WriteGyroRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800187a:	4618      	mov	r0, r3
 800187c:	f00c f83e 	bl	800d8fc <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68d8      	ldr	r0, [r3, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8a5b      	ldrh	r3, [r3, #18]
 8001888:	2200      	movs	r2, #0
 800188a:	4619      	mov	r1, r3
 800188c:	f002 fb50 	bl	8003f30 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	f005 ffd9 	bl	8007852 <HAL_SPI_Transmit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68d8      	ldr	r0, [r3, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8a5b      	ldrh	r3, [r3, #18]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	f002 fb39 	bl	8003f30 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00c f864 	bl	800d992 <osMutexRelease>

	if (!status)
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <BMI088_WriteGyroRegister+0x104>
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 80018d0:	2102      	movs	r1, #2
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <BMI088_WriteGyroRegister+0x114>)
 80018d4:	f000 fe06 	bl	80024e4 <USB_Log>
	}

	return status;
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	46b5      	mov	sp, r6
}
 80018dc:	4618      	mov	r0, r3
 80018de:	372c      	adds	r7, #44	; 0x2c
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018e6:	bf00      	nop
 80018e8:	08015118 	.word	0x08015118

080018ec <BMP388_Init>:
 *
 * BMP388 INTERFACE
 *
 */
uint8_t BMP388_Init(BMP388* sensor, BMP388_CalibrationData* calib_data, I2C_HandleTypeDef* i2c_handle, osMutexId_t* i2c_mutex, uint16_t irq_pin)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
	sensor->calib_data = calib_data;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	601a      	str	r2, [r3, #0]
	sensor->i2c_handle = i2c_handle;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]
	sensor->i2c_mutex = i2c_mutex;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	609a      	str	r2, [r3, #8]
	sensor->irq_pin = irq_pin;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8c3a      	ldrh	r2, [r7, #32]
 8001910:	819a      	strh	r2, [r3, #12]
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	743b      	strb	r3, [r7, #16]
	BMP388_ReadRegister(sensor, REG_CHIP_ID, rx_data, 1);
 8001916:	f107 0210 	add.w	r2, r7, #16
 800191a:	2301      	movs	r3, #1
 800191c:	2100      	movs	r1, #0
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f9f4 	bl	8001d0c <BMP388_ReadRegister>
	if (rx_data[0] == 0x50)
 8001924:	7c3b      	ldrb	r3, [r7, #16]
 8001926:	2b50      	cmp	r3, #80	; 0x50
 8001928:	d15d      	bne.n	80019e6 <BMP388_Init+0xfa>
	{
		USB_Log("Found BMP388, starting initialization.", CRITICAL);
 800192a:	2101      	movs	r1, #1
 800192c:	4832      	ldr	r0, [pc, #200]	; (80019f8 <BMP388_Init+0x10c>)
 800192e:	f000 fdd9 	bl	80024e4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 8001932:	200a      	movs	r0, #10
 8001934:	f00b ff41 	bl	800d7ba <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0xB6;
 8001938:	23b6      	movs	r3, #182	; 0xb6
 800193a:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_CMD, tx_data, 1);
 800193c:	f107 0214 	add.w	r2, r7, #20
 8001940:	2301      	movs	r3, #1
 8001942:	217e      	movs	r1, #126	; 0x7e
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fa1d 	bl	8001d84 <BMP388_WriteRegister>
	osDelay(10);
 800194a:	200a      	movs	r0, #10
 800194c:	f00b ff35 	bl	800d7ba <osDelay>

	// Read, calculate, and store calibration coefficients
	BMP388_ReadCalibrationData(sensor);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 fa53 	bl	8001dfc <BMP388_ReadCalibrationData>

	// Set pressure measurement to ultra-high resolution (x16 over-sampling, 20 bit / 0.17 Pa),
	// set temperature measurement to low power (x2 over-sampling, 17 bit / 0.0025 degC)
	tx_data[0] = 0x0C;
 8001956:	230c      	movs	r3, #12
 8001958:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_OSR, tx_data, 1);
 800195a:	f107 0214 	add.w	r2, r7, #20
 800195e:	2301      	movs	r3, #1
 8001960:	211c      	movs	r1, #28
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fa0e 	bl	8001d84 <BMP388_WriteRegister>
	osDelay(10);
 8001968:	200a      	movs	r0, #10
 800196a:	f00b ff26 	bl	800d7ba <osDelay>

	// Set 25Hz ODR
	tx_data[0] = 0x03;
 800196e:	2303      	movs	r3, #3
 8001970:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_ODR, tx_data, 1);
 8001972:	f107 0214 	add.w	r2, r7, #20
 8001976:	2301      	movs	r3, #1
 8001978:	211d      	movs	r1, #29
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fa02 	bl	8001d84 <BMP388_WriteRegister>
	osDelay(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f00b ff1a 	bl	800d7ba <osDelay>

	// Set IIR filter coefficient to 15
	tx_data[0] = 0x04;
 8001986:	2304      	movs	r3, #4
 8001988:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_CONFIG, tx_data, 1);
 800198a:	f107 0214 	add.w	r2, r7, #20
 800198e:	2301      	movs	r3, #1
 8001990:	211f      	movs	r1, #31
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f9f6 	bl	8001d84 <BMP388_WriteRegister>
	osDelay(10);
 8001998:	200a      	movs	r0, #10
 800199a:	f00b ff0e 	bl	800d7ba <osDelay>

	// Compute startup pressure for initial altitude reference
	BMP388_ComputeStartupPressure(sensor);
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fbba 	bl	8002118 <BMP388_ComputeStartupPressure>

	// Switch device into normal mode and enable pressure, temperature sensor
	tx_data[0] = 0x33;
 80019a4:	2333      	movs	r3, #51	; 0x33
 80019a6:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_PWR_CTRL, tx_data, 1);
 80019a8:	f107 0214 	add.w	r2, r7, #20
 80019ac:	2301      	movs	r3, #1
 80019ae:	211b      	movs	r1, #27
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f9e7 	bl	8001d84 <BMP388_WriteRegister>
	osDelay(10);
 80019b6:	200a      	movs	r0, #10
 80019b8:	f00b feff 	bl	800d7ba <osDelay>

	// Enable data ready interrupt (temperature and pressure) and configure INT pin (active high, push-pull)
	tx_data[0] = 0x42;
 80019bc:	2342      	movs	r3, #66	; 0x42
 80019be:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_INT_CTRL, tx_data, 1);
 80019c0:	f107 0214 	add.w	r2, r7, #20
 80019c4:	2301      	movs	r3, #1
 80019c6:	2119      	movs	r1, #25
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f9db 	bl	8001d84 <BMP388_WriteRegister>
	osDelay(10);
 80019ce:	200a      	movs	r0, #10
 80019d0:	f00b fef3 	bl	800d7ba <osDelay>

	USB_Log("BMP388 initialized OK.", CRITICAL);
 80019d4:	2101      	movs	r1, #1
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <BMP388_Init+0x110>)
 80019d8:	f000 fd84 	bl	80024e4 <USB_Log>
	osDelay(100);
 80019dc:	2064      	movs	r0, #100	; 0x64
 80019de:	f00b feec 	bl	800d7ba <osDelay>

	return 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e004      	b.n	80019f0 <BMP388_Init+0x104>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 80019e6:	2102      	movs	r1, #2
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <BMP388_Init+0x114>)
 80019ea:	f000 fd7b 	bl	80024e4 <USB_Log>
		return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	08015144 	.word	0x08015144
 80019fc:	0801519c 	.word	0x0801519c
 8001a00:	0801516c 	.word	0x0801516c

08001a04 <BMP388_ReadData>:

uint8_t BMP388_ReadData(BMP388* sensor)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b090      	sub	sp, #64	; 0x40
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	// Compute compensated temperature

	uint8_t rx_temp_data[3];
	uint8_t status_temp = BMP388_ReadRegister(sensor, REG_DATA_3, rx_temp_data, 3);
 8001a0c:	f107 020c 	add.w	r2, r7, #12
 8001a10:	2303      	movs	r3, #3
 8001a12:	2107      	movs	r1, #7
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f979 	bl	8001d0c <BMP388_ReadRegister>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (status_temp)
 8001a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d02f      	beq.n	8001a88 <BMP388_ReadData+0x84>
	{
		uint32_t temp_raw = (rx_temp_data[2] << 16) | (rx_temp_data[1] << 8) | rx_temp_data[0];
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	4313      	orrs	r3, r2
 8001a32:	7b3a      	ldrb	r2, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38

		float temp_partial_data1 = (float)temp_raw - sensor->calib_data->par_t1;
 8001a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float temp_partial_data2 = temp_partial_data1 * sensor->calib_data->par_t2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		sensor->temperature = temp_partial_data2 + (temp_partial_data1 * temp_partial_data1) * sensor->calib_data->par_t3;
 8001a66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Compute compensated pressure

	uint8_t rx_press_data[3];
	uint8_t status_pressure = BMP388_ReadRegister(sensor, REG_DATA_0, rx_press_data, 3);
 8001a88:	f107 0208 	add.w	r2, r7, #8
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	2104      	movs	r1, #4
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f93b 	bl	8001d0c <BMP388_ReadRegister>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status_temp && status_pressure)
 8001a9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8117 	beq.w	8001cd4 <BMP388_ReadData+0x2d0>
 8001aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8112 	beq.w	8001cd4 <BMP388_ReadData+0x2d0>
	{
		uint32_t press_raw = (rx_press_data[2] << 16) | (rx_press_data[1] << 8) | rx_press_data[0];
 8001ab0:	7abb      	ldrb	r3, [r7, #10]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	7a7b      	ldrb	r3, [r7, #9]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	7a3a      	ldrb	r2, [r7, #8]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28

		float press_partial_data1 = sensor->calib_data->par_p6 * sensor->temperature;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float press_partial_data2 = sensor->calib_data->par_p7 * (sensor->temperature * sensor->temperature);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af2:	edc7 7a08 	vstr	s15, [r7, #32]
		float press_partial_data3 = sensor->calib_data->par_p8 * (sensor->temperature * sensor->temperature * sensor->temperature);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1c:	edc7 7a07 	vstr	s15, [r7, #28]
		float press_partial_out1 = sensor->calib_data->par_p5 + press_partial_data1 + press_partial_data2 + press_partial_data3;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b30:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b40:	edc7 7a06 	vstr	s15, [r7, #24]

		press_partial_data1 = sensor->calib_data->par_p2 * sensor->temperature;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		press_partial_data2 = sensor->calib_data->par_p3 * (sensor->temperature * sensor->temperature);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	edc7 7a08 	vstr	s15, [r7, #32]
		press_partial_data3 = sensor->calib_data->par_p4 * (sensor->temperature * sensor->temperature * sensor->temperature);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	edc7 7a07 	vstr	s15, [r7, #28]
		float press_partial_out2 = (float)press_raw * (sensor->calib_data->par_p1 + press_partial_data1 + press_partial_data2 + press_partial_data3);
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd2:	edc7 7a05 	vstr	s15, [r7, #20]

		press_partial_data1 = (float)press_raw * (float)press_raw;
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		press_partial_data2 = sensor->calib_data->par_p9 + sensor->calib_data->par_p10 * sensor->temperature;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c10:	edc7 7a08 	vstr	s15, [r7, #32]
		press_partial_data3 = press_partial_data1 *	press_partial_data2;
 8001c14:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c18:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	edc7 7a07 	vstr	s15, [r7, #28]
		float press_partial_out3 = press_partial_data3 + ((float)press_raw * (float)press_raw * (float)press_raw) * sensor->calib_data->par_p11;
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5e:	edc7 7a04 	vstr	s15, [r7, #16]

		sensor->pressure = press_partial_out1 + press_partial_out2 + press_partial_out3;
 8001c62:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edc3 7a05 	vstr	s15, [r3, #20]

		// Compute altitude

		if (sensor->pressure && sensor->startup_pressure)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d028      	beq.n	8001cde <BMP388_ReadData+0x2da>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d020      	beq.n	8001cde <BMP388_ReadData+0x2da>
		{
			sensor->altitude = 44330 * (1 - powf(sensor->pressure / sensor->startup_pressure, 1.0 / 5.25579));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ca8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cac:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001d00 <BMP388_ReadData+0x2fc>
 8001cb0:	eeb0 0a66 	vmov.f32	s0, s13
 8001cb4:	f012 fd3a 	bl	801472c <powf>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d04 <BMP388_ReadData+0x300>
 8001cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	edc3 7a07 	vstr	s15, [r3, #28]
	{
 8001cd2:	e004      	b.n	8001cde <BMP388_ReadData+0x2da>

		// Data ready INT cleared automatically 2.5 ms after the interrupt assertion
	}
	else
	{
		USB_Log("ERR reading BMP388 data.", ERR);
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <BMP388_ReadData+0x304>)
 8001cd8:	f000 fc04 	bl	80024e4 <USB_Log>
 8001cdc:	e000      	b.n	8001ce0 <BMP388_ReadData+0x2dc>
	{
 8001cde:	bf00      	nop
	}

	return status_temp && status_pressure;
 8001ce0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <BMP388_ReadData+0x2f0>
 8001ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <BMP388_ReadData+0x2f0>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <BMP388_ReadData+0x2f2>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3740      	adds	r7, #64	; 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	3e42d52f 	.word	0x3e42d52f
 8001d04:	472d2a00 	.word	0x472d2a00
 8001d08:	080151b4 	.word	0x080151b4

08001d0c <BMP388_ReadRegister>:
 *
 * BMP388 LOW LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t BMP388_ReadRegister(BMP388* sensor, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af04      	add	r7, sp, #16
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	461a      	mov	r2, r3
 8001d18:	460b      	mov	r3, r1
 8001d1a:	72fb      	strb	r3, [r7, #11]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00b fde6 	bl	800d8fc <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Read(sensor->i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6858      	ldr	r0, [r3, #4]
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	893b      	ldrh	r3, [r7, #8]
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	21ec      	movs	r1, #236	; 0xec
 8001d4a:	f002 fad1 	bl	80042f0 <HAL_I2C_Mem_Read>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f00b fe15 	bl	800d992 <osMutexRelease>

	if (!status)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <BMP388_ReadRegister+0x6a>
	{
		USB_Log("BMP388 register read failed.\n", ERR);
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <BMP388_ReadRegister+0x74>)
 8001d72:	f000 fbb7 	bl	80024e4 <USB_Log>
	}

	return status;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	080151e4 	.word	0x080151e4

08001d84 <BMP388_WriteRegister>:

uint8_t BMP388_WriteRegister(BMP388* sensor, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af04      	add	r7, sp, #16
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	460b      	mov	r3, r1
 8001d92:	72fb      	strb	r3, [r7, #11]
 8001d94:	4613      	mov	r3, r2
 8001d96:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00b fdaa 	bl	800d8fc <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Write(sensor->i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6858      	ldr	r0, [r3, #4]
 8001dac:	7afb      	ldrb	r3, [r7, #11]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	21ec      	movs	r1, #236	; 0xec
 8001dc2:	f002 f981 	bl	80040c8 <HAL_I2C_Mem_Write>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00b fdd9 	bl	800d992 <osMutexRelease>

	if (!status)
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <BMP388_WriteRegister+0x6a>
	{
		USB_Log("BMP388 register write failed.\n", ERR);
 8001de6:	2102      	movs	r1, #2
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <BMP388_WriteRegister+0x74>)
 8001dea:	f000 fb7b 	bl	80024e4 <USB_Log>
	}

	return status;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	08015204 	.word	0x08015204

08001dfc <BMP388_ReadCalibrationData>:

uint8_t BMP388_ReadCalibrationData(BMP388* sensor)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	uint8_t rx_data[2];

	// PAR T1
	BMP388_ReadRegister(sensor, NVM_PAR_T1_LSB, rx_data, 2);
 8001e04:	f107 0208 	add.w	r2, r7, #8
 8001e08:	2302      	movs	r3, #2
 8001e0a:	2131      	movs	r1, #49	; 0x31
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff7d 	bl	8001d0c <BMP388_ReadRegister>
	uint16_t par_t1_raw = (rx_data[1] << 8) | rx_data[0];
 8001e12:	7a7b      	ldrb	r3, [r7, #9]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	7a3b      	ldrb	r3, [r7, #8]
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	83fb      	strh	r3, [r7, #30]
	sensor->calib_data->par_t1 = (float)par_t1_raw / powf(2, -8);
 8001e22:	8bfb      	ldrh	r3, [r7, #30]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	eddf 6aad 	vldr	s13, [pc, #692]	; 80020e8 <BMP388_ReadCalibrationData+0x2ec>
 8001e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e38:	edc3 7a00 	vstr	s15, [r3]

	// PAR T2
	BMP388_ReadRegister(sensor, NVM_PAR_T2_LSB, rx_data, 2);
 8001e3c:	f107 0208 	add.w	r2, r7, #8
 8001e40:	2302      	movs	r3, #2
 8001e42:	2133      	movs	r1, #51	; 0x33
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff61 	bl	8001d0c <BMP388_ReadRegister>
	uint16_t par_t2_raw = (rx_data[1] << 8) | rx_data[0];
 8001e4a:	7a7b      	ldrb	r3, [r7, #9]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	7a3b      	ldrb	r3, [r7, #8]
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	83bb      	strh	r3, [r7, #28]
	sensor->calib_data->par_t2 = (float)par_t2_raw / powf(2, 30);
 8001e5a:	8bbb      	ldrh	r3, [r7, #28]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80020ec <BMP388_ReadCalibrationData+0x2f0>
 8001e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e70:	edc3 7a01 	vstr	s15, [r3, #4]

	// PAR T3
	BMP388_ReadRegister(sensor, NVM_PAR_T3, rx_data, 1);
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	2301      	movs	r3, #1
 8001e7a:	2135      	movs	r1, #53	; 0x35
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff45 	bl	8001d0c <BMP388_ReadRegister>
	int8_t par_t3_raw = rx_data[0];
 8001e82:	7a3b      	ldrb	r3, [r7, #8]
 8001e84:	76fb      	strb	r3, [r7, #27]
	sensor->calib_data->par_t3 = (float)par_t3_raw / powf(2, 48);
 8001e86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	eddf 6a96 	vldr	s13, [pc, #600]	; 80020f0 <BMP388_ReadCalibrationData+0x2f4>
 8001e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9e:	edc3 7a02 	vstr	s15, [r3, #8]

	// PAR P1
	BMP388_ReadRegister(sensor, NVM_PAR_P1_LSB, rx_data, 2);
 8001ea2:	f107 0208 	add.w	r2, r7, #8
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	2136      	movs	r1, #54	; 0x36
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff2e 	bl	8001d0c <BMP388_ReadRegister>
	int16_t par_p1_raw = (rx_data[1] << 8) | rx_data[0];
 8001eb0:	7a7b      	ldrb	r3, [r7, #9]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	7a3b      	ldrb	r3, [r7, #8]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	833b      	strh	r3, [r7, #24]
	sensor->calib_data->par_p1 = ((float)par_p1_raw - powf(2, 14)) / powf(2, 20);
 8001ebe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80020f4 <BMP388_ReadCalibrationData+0x2f8>
 8001ece:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	eddf 6a88 	vldr	s13, [pc, #544]	; 80020f8 <BMP388_ReadCalibrationData+0x2fc>
 8001eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ede:	edc3 7a03 	vstr	s15, [r3, #12]

	// PAR P2
	BMP388_ReadRegister(sensor, NVM_PAR_P2_LSB, rx_data, 2);
 8001ee2:	f107 0208 	add.w	r2, r7, #8
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	2138      	movs	r1, #56	; 0x38
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff0e 	bl	8001d0c <BMP388_ReadRegister>
	int16_t par_p2_raw = (rx_data[1] << 8) | rx_data[0];
 8001ef0:	7a7b      	ldrb	r3, [r7, #9]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	7a3b      	ldrb	r3, [r7, #8]
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	82fb      	strh	r3, [r7, #22]
	sensor->calib_data->par_p2 = ((float)par_p2_raw - powf(2, 14)) / powf(2, 29);
 8001efe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80020f4 <BMP388_ReadCalibrationData+0x2f8>
 8001f0e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	eddf 6a79 	vldr	s13, [pc, #484]	; 80020fc <BMP388_ReadCalibrationData+0x300>
 8001f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1e:	edc3 7a04 	vstr	s15, [r3, #16]

	// PAR P3
	BMP388_ReadRegister(sensor, NVM_PAR_P3, rx_data, 1);
 8001f22:	f107 0208 	add.w	r2, r7, #8
 8001f26:	2301      	movs	r3, #1
 8001f28:	213a      	movs	r1, #58	; 0x3a
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff feee 	bl	8001d0c <BMP388_ReadRegister>
	int8_t par_p3_raw = rx_data[0];
 8001f30:	7a3b      	ldrb	r3, [r7, #8]
 8001f32:	757b      	strb	r3, [r7, #21]
	sensor->calib_data->par_p3 = (float)par_p3_raw / powf(2, 32);
 8001f34:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002100 <BMP388_ReadCalibrationData+0x304>
 8001f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4c:	edc3 7a05 	vstr	s15, [r3, #20]

	// PAR P4
	BMP388_ReadRegister(sensor, NVM_PAR_P4, rx_data, 1);
 8001f50:	f107 0208 	add.w	r2, r7, #8
 8001f54:	2301      	movs	r3, #1
 8001f56:	213b      	movs	r1, #59	; 0x3b
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fed7 	bl	8001d0c <BMP388_ReadRegister>
	int8_t par_p4_raw = rx_data[0];
 8001f5e:	7a3b      	ldrb	r3, [r7, #8]
 8001f60:	753b      	strb	r3, [r7, #20]
	sensor->calib_data->par_p4 = (float)par_p4_raw / powf(2, 37);
 8001f62:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	eddf 6a64 	vldr	s13, [pc, #400]	; 8002104 <BMP388_ReadCalibrationData+0x308>
 8001f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7a:	edc3 7a06 	vstr	s15, [r3, #24]

	// PAR P5
	BMP388_ReadRegister(sensor, NVM_PAR_P5_LSB, rx_data, 2);
 8001f7e:	f107 0208 	add.w	r2, r7, #8
 8001f82:	2302      	movs	r3, #2
 8001f84:	213c      	movs	r1, #60	; 0x3c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fec0 	bl	8001d0c <BMP388_ReadRegister>
	uint16_t par_p5_raw = (rx_data[1] << 8) | rx_data[0];
 8001f8c:	7a7b      	ldrb	r3, [r7, #9]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	7a3b      	ldrb	r3, [r7, #8]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	827b      	strh	r3, [r7, #18]
	sensor->calib_data->par_p5 = (float)par_p5_raw / powf(2, -3);
 8001f9c:	8a7b      	ldrh	r3, [r7, #18]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
 8001fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb2:	edc3 7a07 	vstr	s15, [r3, #28]

	// PAR P6
	BMP388_ReadRegister(sensor, NVM_PAR_P6_LSB, rx_data, 2);
 8001fb6:	f107 0208 	add.w	r2, r7, #8
 8001fba:	2302      	movs	r3, #2
 8001fbc:	213e      	movs	r1, #62	; 0x3e
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fea4 	bl	8001d0c <BMP388_ReadRegister>
	uint16_t par_p6_raw = (rx_data[1] << 8) | rx_data[0];
 8001fc4:	7a7b      	ldrb	r3, [r7, #9]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	7a3b      	ldrb	r3, [r7, #8]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	823b      	strh	r3, [r7, #16]
	sensor->calib_data->par_p6 = (float)par_p6_raw / powf(2, 6);
 8001fd4:	8a3b      	ldrh	r3, [r7, #16]
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002108 <BMP388_ReadCalibrationData+0x30c>
 8001fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fea:	edc3 7a08 	vstr	s15, [r3, #32]

	// PAR P7
	BMP388_ReadRegister(sensor, NVM_PAR_P7, rx_data, 1);
 8001fee:	f107 0208 	add.w	r2, r7, #8
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	2140      	movs	r1, #64	; 0x40
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fe88 	bl	8001d0c <BMP388_ReadRegister>
	int8_t par_p7_raw = rx_data[0];
 8001ffc:	7a3b      	ldrb	r3, [r7, #8]
 8001ffe:	73fb      	strb	r3, [r7, #15]
	sensor->calib_data->par_p7 = (float)par_p7_raw / powf(2, 8);
 8002000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800210c <BMP388_ReadCalibrationData+0x310>
 8002014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002018:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// PAR P8
	BMP388_ReadRegister(sensor, NVM_PAR_P8, rx_data, 1);
 800201c:	f107 0208 	add.w	r2, r7, #8
 8002020:	2301      	movs	r3, #1
 8002022:	2141      	movs	r1, #65	; 0x41
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fe71 	bl	8001d0c <BMP388_ReadRegister>
	int8_t par_p8_raw = rx_data[0];
 800202a:	7a3b      	ldrb	r3, [r7, #8]
 800202c:	73bb      	strb	r3, [r7, #14]
	sensor->calib_data->par_p8 = (float)par_p8_raw / powf(2, 15);
 800202e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002110 <BMP388_ReadCalibrationData+0x314>
 8002042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002046:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// PAR P9
	BMP388_ReadRegister(sensor, NVM_PAR_P9_LSB, rx_data, 2);
 800204a:	f107 0208 	add.w	r2, r7, #8
 800204e:	2302      	movs	r3, #2
 8002050:	2142      	movs	r1, #66	; 0x42
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fe5a 	bl	8001d0c <BMP388_ReadRegister>
	int16_t par_p9_raw = (rx_data[1] << 8) | rx_data[0];
 8002058:	7a7b      	ldrb	r3, [r7, #9]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21a      	sxth	r2, r3
 800205e:	7a3b      	ldrb	r3, [r7, #8]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	81bb      	strh	r3, [r7, #12]
	sensor->calib_data->par_p9 = (float)par_p9_raw / powf(2, 48);
 8002066:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80020f0 <BMP388_ReadCalibrationData+0x2f4>
 800207a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// PAR P10
	BMP388_ReadRegister(sensor, NVM_PAR_P10, rx_data, 1);
 8002082:	f107 0208 	add.w	r2, r7, #8
 8002086:	2301      	movs	r3, #1
 8002088:	2144      	movs	r1, #68	; 0x44
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fe3e 	bl	8001d0c <BMP388_ReadRegister>
	int8_t par_p10_raw = rx_data[0];
 8002090:	7a3b      	ldrb	r3, [r7, #8]
 8002092:	72fb      	strb	r3, [r7, #11]
	sensor->calib_data->par_p10 = (float)par_p10_raw / powf(2, 48);
 8002094:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	eddf 6a12 	vldr	s13, [pc, #72]	; 80020f0 <BMP388_ReadCalibrationData+0x2f4>
 80020a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	// PAR P11
	BMP388_ReadRegister(sensor, NVM_PAR_P11, rx_data, 1);
 80020b0:	f107 0208 	add.w	r2, r7, #8
 80020b4:	2301      	movs	r3, #1
 80020b6:	2145      	movs	r1, #69	; 0x45
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fe27 	bl	8001d0c <BMP388_ReadRegister>
	int8_t par_p11_raw = rx_data[0];
 80020be:	7a3b      	ldrb	r3, [r7, #8]
 80020c0:	72bb      	strb	r3, [r7, #10]
	sensor->calib_data->par_p11 = (float)par_p11_raw / powf(2, 65);
 80020c2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002114 <BMP388_ReadCalibrationData+0x318>
 80020d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020da:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	3b800000 	.word	0x3b800000
 80020ec:	4e800000 	.word	0x4e800000
 80020f0:	57800000 	.word	0x57800000
 80020f4:	46800000 	.word	0x46800000
 80020f8:	49800000 	.word	0x49800000
 80020fc:	4e000000 	.word	0x4e000000
 8002100:	4f800000 	.word	0x4f800000
 8002104:	52000000 	.word	0x52000000
 8002108:	42800000 	.word	0x42800000
 800210c:	43800000 	.word	0x43800000
 8002110:	47000000 	.word	0x47000000
 8002114:	60000000 	.word	0x60000000

08002118 <BMP388_ComputeStartupPressure>:

uint8_t BMP388_ComputeStartupPressure(BMP388* sensor)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	/*
	 * Compute the average current pressure (for initial altitude reference)
	 */

	uint8_t tx_data[2];
	uint8_t sample_num = 50;
 8002120:	2332      	movs	r3, #50	; 0x32
 8002122:	73fb      	strb	r3, [r7, #15]
	float running_pressure = 0;
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < sample_num; i++)
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e01a      	b.n	8002166 <BMP388_ComputeStartupPressure+0x4e>
	{
		// Switch sensor into forced mode (take one reading, return to sleep)
		tx_data[0] = 0x13;
 8002130:	2313      	movs	r3, #19
 8002132:	733b      	strb	r3, [r7, #12]
		BMP388_WriteRegister(sensor, REG_PWR_CTRL, tx_data, 1);
 8002134:	f107 020c 	add.w	r2, r7, #12
 8002138:	2301      	movs	r3, #1
 800213a:	211b      	movs	r1, #27
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fe21 	bl	8001d84 <BMP388_WriteRegister>
		osDelay(40);
 8002142:	2028      	movs	r0, #40	; 0x28
 8002144:	f00b fb39 	bl	800d7ba <osDelay>
		BMP388_ReadData(sensor);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fc5b 	bl	8001a04 <BMP388_ReadData>
		running_pressure += sensor->pressure;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	edd3 7a05 	vldr	s15, [r3, #20]
 8002154:	ed97 7a05 	vldr	s14, [r7, #20]
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < sample_num; i++)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	3301      	adds	r3, #1
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbe0      	blt.n	8002130 <BMP388_ComputeStartupPressure+0x18>
	}

	sensor->startup_pressure = running_pressure / sample_num;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002178:	edd7 6a05 	vldr	s13, [r7, #20]
 800217c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <LIS3MDL_Init>:
 *
 * LIS3MDL INTERFACE
 *
 */
uint8_t LIS3MDL_Init(LIS3MDL* sensor, I2C_HandleTypeDef* i2c_handle, osMutexId_t* i2c_mutex, uint16_t irq_pin)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	807b      	strh	r3, [r7, #2]
	sensor->i2c_handle = i2c_handle;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	601a      	str	r2, [r3, #0]
	sensor->i2c_mutex = i2c_mutex;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	605a      	str	r2, [r3, #4]
	sensor->irq_pin = irq_pin;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	811a      	strh	r2, [r3, #8]
	sensor->intensity_conversion = 6842.0; /* Based on +-4G range */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a33      	ldr	r2, [pc, #204]	; (8002280 <LIS3MDL_Init+0xf0>)
 80021b4:	619a      	str	r2, [r3, #24]
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 80021b6:	2300      	movs	r3, #0
 80021b8:	743b      	strb	r3, [r7, #16]
	LIS3MDL_ReadRegister(sensor, WHO_AM_I, rx_data, 1);
 80021ba:	f107 0210 	add.w	r2, r7, #16
 80021be:	2301      	movs	r3, #1
 80021c0:	210f      	movs	r1, #15
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f90e 	bl	80023e4 <LIS3MDL_ReadRegister>
	if (rx_data[0] == 0x3D)
 80021c8:	7c3b      	ldrb	r3, [r7, #16]
 80021ca:	2b3d      	cmp	r3, #61	; 0x3d
 80021cc:	d14e      	bne.n	800226c <LIS3MDL_Init+0xdc>
	{
		USB_Log("Found LIS3MDL, starting initialization.", CRITICAL);
 80021ce:	2101      	movs	r1, #1
 80021d0:	482c      	ldr	r0, [pc, #176]	; (8002284 <LIS3MDL_Init+0xf4>)
 80021d2:	f000 f987 	bl	80024e4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 80021d6:	200a      	movs	r0, #10
 80021d8:	f00b faef 	bl	800d7ba <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0x04;
 80021dc:	2304      	movs	r3, #4
 80021de:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG2, tx_data, 1);
 80021e0:	f107 0214 	add.w	r2, r7, #20
 80021e4:	2301      	movs	r3, #1
 80021e6:	2121      	movs	r1, #33	; 0x21
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f93f 	bl	800246c <LIS3MDL_WriteRegister>
	osDelay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f00b fae3 	bl	800d7ba <osDelay>

	// Set +-4G range
	tx_data[0] = 0x00;
 80021f4:	2300      	movs	r3, #0
 80021f6:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG2, tx_data, 1);
 80021f8:	f107 0214 	add.w	r2, r7, #20
 80021fc:	2301      	movs	r3, #1
 80021fe:	2121      	movs	r1, #33	; 0x21
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f933 	bl	800246c <LIS3MDL_WriteRegister>
	osDelay(10);
 8002206:	200a      	movs	r0, #10
 8002208:	f00b fad7 	bl	800d7ba <osDelay>

	// Set X,Y axes ultra-high performance mode, 40Hz ODR, enable temperature sensor
	tx_data[0] = 0xF8;
 800220c:	23f8      	movs	r3, #248	; 0xf8
 800220e:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG1, tx_data, 1);
 8002210:	f107 0214 	add.w	r2, r7, #20
 8002214:	2301      	movs	r3, #1
 8002216:	2120      	movs	r1, #32
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f927 	bl	800246c <LIS3MDL_WriteRegister>
	osDelay(10);
 800221e:	200a      	movs	r0, #10
 8002220:	f00b facb 	bl	800d7ba <osDelay>

	// Set Z axis ultra-high performance mode
	tx_data[0] = 0x0C;
 8002224:	230c      	movs	r3, #12
 8002226:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG4, tx_data, 1);
 8002228:	f107 0214 	add.w	r2, r7, #20
 800222c:	2301      	movs	r3, #1
 800222e:	2123      	movs	r1, #35	; 0x23
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f91b 	bl	800246c <LIS3MDL_WriteRegister>
	osDelay(10);
 8002236:	200a      	movs	r0, #10
 8002238:	f00b fabf 	bl	800d7ba <osDelay>

	// Switch to continuous-conversion mode
	tx_data[0] = 0x00;
 800223c:	2300      	movs	r3, #0
 800223e:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG3, tx_data, 1);
 8002240:	f107 0214 	add.w	r2, r7, #20
 8002244:	2301      	movs	r3, #1
 8002246:	2122      	movs	r1, #34	; 0x22
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f90f 	bl	800246c <LIS3MDL_WriteRegister>
	osDelay(10);
 800224e:	200a      	movs	r0, #10
 8002250:	f00b fab3 	bl	800d7ba <osDelay>

	// Read data to clear DRDY interrupt
	LIS3MDL_ReadData(sensor);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f81b 	bl	8002290 <LIS3MDL_ReadData>

	USB_Log("LIS3MDL initialized OK.", CRITICAL);
 800225a:	2101      	movs	r1, #1
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <LIS3MDL_Init+0xf8>)
 800225e:	f000 f941 	bl	80024e4 <USB_Log>
	osDelay(100);
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	f00b faa9 	bl	800d7ba <osDelay>

	return 1;
 8002268:	2301      	movs	r3, #1
 800226a:	e004      	b.n	8002276 <LIS3MDL_Init+0xe6>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 800226c:	2102      	movs	r1, #2
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <LIS3MDL_Init+0xfc>)
 8002270:	f000 f938 	bl	80024e4 <USB_Log>
		return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	45d5d000 	.word	0x45d5d000
 8002284:	08015224 	.word	0x08015224
 8002288:	0801527c 	.word	0x0801527c
 800228c:	0801524c 	.word	0x0801524c

08002290 <LIS3MDL_ReadData>:

uint8_t LIS3MDL_ReadData(LIS3MDL* sensor)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[6];
	uint8_t status = LIS3MDL_ReadRegister(sensor, OUT_X_L, raw_data, sizeof(raw_data));
 8002298:	f107 0208 	add.w	r2, r7, #8
 800229c:	2306      	movs	r3, #6
 800229e:	2128      	movs	r1, #40	; 0x28
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f89f 	bl	80023e4 <LIS3MDL_ReadRegister>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]

	if (status)
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d03f      	beq.n	8002330 <LIS3MDL_ReadData+0xa0>
	{
		int16_t raw_x_int16 = (raw_data[1] << 8) | raw_data[0];
 80022b0:	7a7b      	ldrb	r3, [r7, #9]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	7a3b      	ldrb	r3, [r7, #8]
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	82bb      	strh	r3, [r7, #20]
		int16_t raw_y_int16 = (raw_data[3] << 8) | raw_data[2];
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	7abb      	ldrb	r3, [r7, #10]
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	827b      	strh	r3, [r7, #18]
		int16_t raw_z_int16 = (raw_data[5] << 8) | raw_data[4];
 80022cc:	7b7b      	ldrb	r3, [r7, #13]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	7b3b      	ldrb	r3, [r7, #12]
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	823b      	strh	r3, [r7, #16]

		sensor->intensity_x_gauss = (float)raw_x_int16 / sensor->intensity_conversion;
 80022da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80022ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	edc3 7a03 	vstr	s15, [r3, #12]
		sensor->intensity_y_gauss = (float)raw_y_int16 / sensor->intensity_conversion;
 80022f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	ed93 7a06 	vldr	s14, [r3, #24]
 8002308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edc3 7a04 	vstr	s15, [r3, #16]
		sensor->intensity_z_gauss = (float)raw_z_int16 / sensor->intensity_conversion;
 8002312:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	ed93 7a06 	vldr	s14, [r3, #24]
 8002324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	edc3 7a05 	vstr	s15, [r3, #20]
 800232e:	e003      	b.n	8002338 <LIS3MDL_ReadData+0xa8>

		// DRDY interrupt cleared automatically after read
	}
	else
	{
		USB_Log("ERR reading LIS3MDL data.", ERR);
 8002330:	2102      	movs	r1, #2
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <LIS3MDL_ReadData+0xb4>)
 8002334:	f000 f8d6 	bl	80024e4 <USB_Log>
	}

	return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	08015294 	.word	0x08015294

08002348 <LIS3MDL_LogData>:

uint8_t LIS3MDL_LogData(LIS3MDL* sensor)
{
 8002348:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800234c:	b0ac      	sub	sp, #176	; 0xb0
 800234e:	af06      	add	r7, sp, #24
 8002350:	6078      	str	r0, [r7, #4]
	float x_utesla = sensor->intensity_x_gauss * 100;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	edd3 7a03 	vldr	s15, [r3, #12]
 8002358:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80023dc <LIS3MDL_LogData+0x94>
 800235c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002360:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float y_utesla = sensor->intensity_y_gauss * 100;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	edd3 7a04 	vldr	s15, [r3, #16]
 800236a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80023dc <LIS3MDL_LogData+0x94>
 800236e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002372:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float z_utesla = sensor->intensity_z_gauss * 100;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	edd3 7a05 	vldr	s15, [r3, #20]
 800237c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80023dc <LIS3MDL_LogData+0x94>
 8002380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002384:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

	char string[128];
	snprintf(string, 128, "%.2f %.2f %.2f", x_utesla, y_utesla, z_utesla);
 8002388:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800238c:	f7fe f904 	bl	8000598 <__aeabi_f2d>
 8002390:	4604      	mov	r4, r0
 8002392:	460d      	mov	r5, r1
 8002394:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002398:	f7fe f8fe 	bl	8000598 <__aeabi_f2d>
 800239c:	4680      	mov	r8, r0
 800239e:	4689      	mov	r9, r1
 80023a0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80023a4:	f7fe f8f8 	bl	8000598 <__aeabi_f2d>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	f107 000c 	add.w	r0, r7, #12
 80023b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023b8:	e9cd 4500 	strd	r4, r5, [sp]
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <LIS3MDL_LogData+0x98>)
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	f00f ffee 	bl	80123a0 <sniprintf>
	return USB_Log(string, SENSOR);
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	2103      	movs	r1, #3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f88a 	bl	80024e4 <USB_Log>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3798      	adds	r7, #152	; 0x98
 80023d6:	46bd      	mov	sp, r7
 80023d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023dc:	42c80000 	.word	0x42c80000
 80023e0:	080152b0 	.word	0x080152b0

080023e4 <LIS3MDL_ReadRegister>:
 *
 * LIS3MDL LOW-LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t LIS3MDL_ReadRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af04      	add	r7, sp, #16
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	461a      	mov	r2, r3
 80023f0:	460b      	mov	r3, r1
 80023f2:	72fb      	strb	r3, [r7, #11]
 80023f4:	4613      	mov	r3, r2
 80023f6:	813b      	strh	r3, [r7, #8]
	if (data_len > 1)
 80023f8:	893b      	ldrh	r3, [r7, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d903      	bls.n	8002406 <LIS3MDL_ReadRegister+0x22>
	{
		// In order to read multiple bytes, it is necessary to assert the most significant bit of the address field
		reg_addr |= 0x80;
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002404:	72fb      	strb	r3, [r7, #11]
	}

	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002410:	4618      	mov	r0, r3
 8002412:	f00b fa73 	bl	800d8fc <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Read(sensor->i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	b29a      	uxth	r2, r3
 800241e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	893b      	ldrh	r3, [r7, #8]
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2301      	movs	r3, #1
 800242e:	2138      	movs	r1, #56	; 0x38
 8002430:	f001 ff5e 	bl	80042f0 <HAL_I2C_Mem_Read>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f00b faa2 	bl	800d992 <osMutexRelease>

	if (!status)
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <LIS3MDL_ReadRegister+0x78>
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
 8002454:	2102      	movs	r1, #2
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <LIS3MDL_ReadRegister+0x84>)
 8002458:	f000 f844 	bl	80024e4 <USB_Log>
	}

	return status;
 800245c:	7dfb      	ldrb	r3, [r7, #23]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	080152c0 	.word	0x080152c0

0800246c <LIS3MDL_WriteRegister>:

uint8_t LIS3MDL_WriteRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af04      	add	r7, sp, #16
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	461a      	mov	r2, r3
 8002478:	460b      	mov	r3, r1
 800247a:	72fb      	strb	r3, [r7, #11]
 800247c:	4613      	mov	r3, r2
 800247e:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800248a:	4618      	mov	r0, r3
 800248c:	f00b fa36 	bl	800d8fc <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Write(sensor->i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	7afb      	ldrb	r3, [r7, #11]
 8002496:	b29a      	uxth	r2, r3
 8002498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2301      	movs	r3, #1
 80024a8:	2138      	movs	r1, #56	; 0x38
 80024aa:	f001 fe0d 	bl	80040c8 <HAL_I2C_Mem_Write>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00b fa65 	bl	800d992 <osMutexRelease>

	if (!status)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <LIS3MDL_WriteRegister+0x6a>
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
 80024ce:	2102      	movs	r1, #2
 80024d0:	4803      	ldr	r0, [pc, #12]	; (80024e0 <LIS3MDL_WriteRegister+0x74>)
 80024d2:	f000 f807 	bl	80024e4 <USB_Log>
	}

	return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	080152e0 	.word	0x080152e0

080024e4 <USB_Log>:
#include "cmsis_os.h"
#include "usbd_cdc_if.h"
#include "usbd_def.h"

uint8_t USB_Log(const char* string, Log_Level level)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	ed2d 8b02 	vpush	{d8}
 80024ea:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80024ee:	af04      	add	r7, sp, #16
 80024f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80024f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80024f8:	6018      	str	r0, [r3, #0]
 80024fa:	460a      	mov	r2, r1
 80024fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002500:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8002504:	701a      	strb	r2, [r3, #0]
	char str[512];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 8002506:	f00b f8a7 	bl	800d658 <osKernelGetTickCount>
 800250a:	ee07 0a90 	vmov	s15, r0
 800250e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002512:	f00b f8b6 	bl	800d682 <osKernelGetTickFreq>
 8002516:	ee07 0a90 	vmov	s15, r0
 800251a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800251e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002522:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

	switch (level) {
 8002526:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800252a:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d863      	bhi.n	80025fc <USB_Log+0x118>
 8002534:	a201      	add	r2, pc, #4	; (adr r2, 800253c <USB_Log+0x58>)
 8002536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253a:	bf00      	nop
 800253c:	0800254d 	.word	0x0800254d
 8002540:	08002579 	.word	0x08002579
 8002544:	080025a5 	.word	0x080025a5
 8002548:	080025d1 	.word	0x080025d1
		case INFO:
			snprintf(str, 256, "LOG %.2f INFO %s\n", seconds, string);
 800254c:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8002550:	f7fe f822 	bl	8000598 <__aeabi_f2d>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	f107 0008 	add.w	r0, r7, #8
 800255c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8002560:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8002564:	6809      	ldr	r1, [r1, #0]
 8002566:	9102      	str	r1, [sp, #8]
 8002568:	e9cd 2300 	strd	r2, r3, [sp]
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <USB_Log+0x1c0>)
 800256e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002572:	f00f ff15 	bl	80123a0 <sniprintf>
			break;
 8002576:	e057      	b.n	8002628 <USB_Log+0x144>
		case CRITICAL:
			snprintf(str, 256, "LOG %.2f CRIT %s\n", seconds, string);
 8002578:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800257c:	f7fe f80c 	bl	8000598 <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	f107 0008 	add.w	r0, r7, #8
 8002588:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800258c:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8002590:	6809      	ldr	r1, [r1, #0]
 8002592:	9102      	str	r1, [sp, #8]
 8002594:	e9cd 2300 	strd	r2, r3, [sp]
 8002598:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <USB_Log+0x1c4>)
 800259a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800259e:	f00f feff 	bl	80123a0 <sniprintf>
			break;
 80025a2:	e041      	b.n	8002628 <USB_Log+0x144>
		case ERR:
			snprintf(str, 256, "LOG %.2f ERR %s\n", seconds, string);
 80025a4:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80025a8:	f7fd fff6 	bl	8000598 <__aeabi_f2d>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	f107 0008 	add.w	r0, r7, #8
 80025b4:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80025b8:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 80025bc:	6809      	ldr	r1, [r1, #0]
 80025be:	9102      	str	r1, [sp, #8]
 80025c0:	e9cd 2300 	strd	r2, r3, [sp]
 80025c4:	4a39      	ldr	r2, [pc, #228]	; (80026ac <USB_Log+0x1c8>)
 80025c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ca:	f00f fee9 	bl	80123a0 <sniprintf>
			break;
 80025ce:	e02b      	b.n	8002628 <USB_Log+0x144>
		case SENSOR:
			snprintf(str, 256, "SENSOR %.2f %s\n", seconds, string);
 80025d0:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80025d4:	f7fd ffe0 	bl	8000598 <__aeabi_f2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	f107 0008 	add.w	r0, r7, #8
 80025e0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80025e4:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 80025e8:	6809      	ldr	r1, [r1, #0]
 80025ea:	9102      	str	r1, [sp, #8]
 80025ec:	e9cd 2300 	strd	r2, r3, [sp]
 80025f0:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <USB_Log+0x1cc>)
 80025f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f6:	f00f fed3 	bl	80123a0 <sniprintf>
			break;
 80025fa:	e015      	b.n	8002628 <USB_Log+0x144>
		default:
			snprintf(str, 256, "LOG %.2f ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 80025fc:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8002600:	f7fd ffca 	bl	8000598 <__aeabi_f2d>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	f107 0008 	add.w	r0, r7, #8
 800260c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8002610:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8002614:	6809      	ldr	r1, [r1, #0]
 8002616:	9102      	str	r1, [sp, #8]
 8002618:	e9cd 2300 	strd	r2, r3, [sp]
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <USB_Log+0x1d0>)
 800261e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002622:	f00f febd 	bl	80123a0 <sniprintf>
			break;
 8002626:	bf00      	nop
	}

	// Get USB mutex (shared resource)
	osMutexAcquire(usbMutexHandle, osWaitForever);
 8002628:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <USB_Log+0x1d4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002630:	4618      	mov	r0, r3
 8002632:	f00b f963 	bl	800d8fc <osMutexAcquire>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8002636:	f107 0308 	add.w	r3, r7, #8
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fe40 	bl	80002c0 <strlen>
 8002640:	4603      	mov	r3, r0
 8002642:	b29a      	uxth	r2, r3
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f00e fd34 	bl	80110b8 <CDC_Transmit_FS>
 8002650:	4603      	mov	r3, r0
 8002652:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (status == USBD_BUSY)
 8002656:	e012      	b.n	800267e <USB_Log+0x19a>
	{
		osDelay(1);
 8002658:	2001      	movs	r0, #1
 800265a:	f00b f8ae 	bl	800d7ba <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fe2c 	bl	80002c0 <strlen>
 8002668:	4603      	mov	r3, r0
 800266a:	b29a      	uxth	r2, r3
 800266c:	f107 0308 	add.w	r3, r7, #8
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f00e fd20 	bl	80110b8 <CDC_Transmit_FS>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	while (status == USBD_BUSY)
 800267e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002682:	2b01      	cmp	r3, #1
 8002684:	d0e8      	beq.n	8002658 <USB_Log+0x174>
	}
	osMutexRelease(usbMutexHandle);
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <USB_Log+0x1d4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f00b f981 	bl	800d992 <osMutexRelease>

	return status;
 8002690:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8002694:	4618      	mov	r0, r3
 8002696:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800269a:	46bd      	mov	sp, r7
 800269c:	ecbd 8b02 	vpop	{d8}
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	08015300 	.word	0x08015300
 80026a8:	08015314 	.word	0x08015314
 80026ac:	08015328 	.word	0x08015328
 80026b0:	0801533c 	.word	0x0801533c
 80026b4:	0801534c 	.word	0x0801534c
 80026b8:	20002890 	.word	0x20002890

080026bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 80026c0:	4831      	ldr	r0, [pc, #196]	; (8002788 <MX_FREERTOS_Init+0xcc>)
 80026c2:	f00b f895 	bl	800d7f0 <osMutexNew>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4a30      	ldr	r2, [pc, #192]	; (800278c <MX_FREERTOS_Init+0xd0>)
 80026ca:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 80026cc:	4830      	ldr	r0, [pc, #192]	; (8002790 <MX_FREERTOS_Init+0xd4>)
 80026ce:	f00b f88f 	bl	800d7f0 <osMutexNew>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <MX_FREERTOS_Init+0xd8>)
 80026d6:	6013      	str	r3, [r2, #0]

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);
 80026d8:	482f      	ldr	r0, [pc, #188]	; (8002798 <MX_FREERTOS_Init+0xdc>)
 80026da:	f00b f889 	bl	800d7f0 <osMutexNew>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a2e      	ldr	r2, [pc, #184]	; (800279c <MX_FREERTOS_Init+0xe0>)
 80026e2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of accIRQSemaphore */
  accIRQSemaphoreHandle = osSemaphoreNew(64, 0, &accIRQSemaphore_attributes);
 80026e4:	4a2e      	ldr	r2, [pc, #184]	; (80027a0 <MX_FREERTOS_Init+0xe4>)
 80026e6:	2100      	movs	r1, #0
 80026e8:	2040      	movs	r0, #64	; 0x40
 80026ea:	f00b f98f 	bl	800da0c <osSemaphoreNew>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <MX_FREERTOS_Init+0xe8>)
 80026f2:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQSemaphore */
  gyroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &gyroIRQSemaphore_attributes);
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <MX_FREERTOS_Init+0xec>)
 80026f6:	2100      	movs	r1, #0
 80026f8:	2040      	movs	r0, #64	; 0x40
 80026fa:	f00b f987 	bl	800da0c <osSemaphoreNew>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <MX_FREERTOS_Init+0xf0>)
 8002702:	6013      	str	r3, [r2, #0]

  /* creation of pressureIRQSemaphore */
  pressureIRQSemaphoreHandle = osSemaphoreNew(64, 0, &pressureIRQSemaphore_attributes);
 8002704:	4a2a      	ldr	r2, [pc, #168]	; (80027b0 <MX_FREERTOS_Init+0xf4>)
 8002706:	2100      	movs	r1, #0
 8002708:	2040      	movs	r0, #64	; 0x40
 800270a:	f00b f97f 	bl	800da0c <osSemaphoreNew>
 800270e:	4603      	mov	r3, r0
 8002710:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <MX_FREERTOS_Init+0xf8>)
 8002712:	6013      	str	r3, [r2, #0]

  /* creation of magIRQSemaphore */
  magIRQSemaphoreHandle = osSemaphoreNew(64, 0, &magIRQSemaphore_attributes);
 8002714:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <MX_FREERTOS_Init+0xfc>)
 8002716:	2100      	movs	r1, #0
 8002718:	2040      	movs	r0, #64	; 0x40
 800271a:	f00b f977 	bl	800da0c <osSemaphoreNew>
 800271e:	4603      	mov	r3, r0
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <MX_FREERTOS_Init+0x100>)
 8002722:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of applicationTask */
  applicationTaskHandle = osThreadNew(start_application_task, NULL, &applicationTask_attributes);
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <MX_FREERTOS_Init+0x104>)
 8002726:	2100      	movs	r1, #0
 8002728:	4826      	ldr	r0, [pc, #152]	; (80027c4 <MX_FREERTOS_Init+0x108>)
 800272a:	f00a ffb3 	bl	800d694 <osThreadNew>
 800272e:	4603      	mov	r3, r0
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <MX_FREERTOS_Init+0x10c>)
 8002732:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <MX_FREERTOS_Init+0x110>)
 8002736:	2100      	movs	r1, #0
 8002738:	4825      	ldr	r0, [pc, #148]	; (80027d0 <MX_FREERTOS_Init+0x114>)
 800273a:	f00a ffab 	bl	800d694 <osThreadNew>
 800273e:	4603      	mov	r3, r0
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <MX_FREERTOS_Init+0x118>)
 8002742:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <MX_FREERTOS_Init+0x11c>)
 8002746:	2100      	movs	r1, #0
 8002748:	4824      	ldr	r0, [pc, #144]	; (80027dc <MX_FREERTOS_Init+0x120>)
 800274a:	f00a ffa3 	bl	800d694 <osThreadNew>
 800274e:	4603      	mov	r3, r0
 8002750:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <MX_FREERTOS_Init+0x124>)
 8002752:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(start_logging_task, NULL, &loggingTask_attributes);
 8002754:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <MX_FREERTOS_Init+0x128>)
 8002756:	2100      	movs	r1, #0
 8002758:	4823      	ldr	r0, [pc, #140]	; (80027e8 <MX_FREERTOS_Init+0x12c>)
 800275a:	f00a ff9b 	bl	800d694 <osThreadNew>
 800275e:	4603      	mov	r3, r0
 8002760:	4a22      	ldr	r2, [pc, #136]	; (80027ec <MX_FREERTOS_Init+0x130>)
 8002762:	6013      	str	r3, [r2, #0]

  /* creation of pressureIRQTask */
  pressureIRQTaskHandle = osThreadNew(start_pressure_irq_task, NULL, &pressureIRQTask_attributes);
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <MX_FREERTOS_Init+0x134>)
 8002766:	2100      	movs	r1, #0
 8002768:	4822      	ldr	r0, [pc, #136]	; (80027f4 <MX_FREERTOS_Init+0x138>)
 800276a:	f00a ff93 	bl	800d694 <osThreadNew>
 800276e:	4603      	mov	r3, r0
 8002770:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <MX_FREERTOS_Init+0x13c>)
 8002772:	6013      	str	r3, [r2, #0]

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);
 8002774:	4a21      	ldr	r2, [pc, #132]	; (80027fc <MX_FREERTOS_Init+0x140>)
 8002776:	2100      	movs	r1, #0
 8002778:	4821      	ldr	r0, [pc, #132]	; (8002800 <MX_FREERTOS_Init+0x144>)
 800277a:	f00a ff8b 	bl	800d694 <osThreadNew>
 800277e:	4603      	mov	r3, r0
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <MX_FREERTOS_Init+0x148>)
 8002782:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	080155bc 	.word	0x080155bc
 800278c:	2000283c 	.word	0x2000283c
 8002790:	080155cc 	.word	0x080155cc
 8002794:	20002890 	.word	0x20002890
 8002798:	080155dc 	.word	0x080155dc
 800279c:	200028e4 	.word	0x200028e4
 80027a0:	080155ec 	.word	0x080155ec
 80027a4:	20002938 	.word	0x20002938
 80027a8:	080155fc 	.word	0x080155fc
 80027ac:	2000298c 	.word	0x2000298c
 80027b0:	0801560c 	.word	0x0801560c
 80027b4:	200029e0 	.word	0x200029e0
 80027b8:	0801561c 	.word	0x0801561c
 80027bc:	20002a34 	.word	0x20002a34
 80027c0:	080154e4 	.word	0x080154e4
 80027c4:	08002809 	.word	0x08002809
 80027c8:	2000041c 	.word	0x2000041c
 80027cc:	08015508 	.word	0x08015508
 80027d0:	080028a5 	.word	0x080028a5
 80027d4:	20000ccc 	.word	0x20000ccc
 80027d8:	0801552c 	.word	0x0801552c
 80027dc:	080028d1 	.word	0x080028d1
 80027e0:	2000117c 	.word	0x2000117c
 80027e4:	08015550 	.word	0x08015550
 80027e8:	080028f9 	.word	0x080028f9
 80027ec:	2000162c 	.word	0x2000162c
 80027f0:	08015574 	.word	0x08015574
 80027f4:	08002915 	.word	0x08002915
 80027f8:	20001edc 	.word	0x20001edc
 80027fc:	08015598 	.word	0x08015598
 8002800:	0800293d 	.word	0x0800293d
 8002804:	2000238c 	.word	0x2000238c

08002808 <start_application_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_application_task */
void start_application_task(void *argument)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af06      	add	r7, sp, #24
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_application_task */
	osDelay(400);
 8002810:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002814:	f00a ffd1 	bl	800d7ba <osDelay>
	USB_Log("------------ APPLICATION STARTING ------------", CRITICAL);
 8002818:	2101      	movs	r1, #1
 800281a:	4818      	ldr	r0, [pc, #96]	; (800287c <start_application_task+0x74>)
 800281c:	f7ff fe62 	bl	80024e4 <USB_Log>
	osDelay(100);
 8002820:	2064      	movs	r0, #100	; 0x64
 8002822:	f00a ffca 	bl	800d7ba <osDelay>

	/* Initialize sensor drivers */
	BMI088_Init(&imu, &hspi1, &spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin, GYRO_CS_Pin, ACCEL_INT_Pin, GYRO_INT_Pin);
 8002826:	2302      	movs	r3, #2
 8002828:	9304      	str	r3, [sp, #16]
 800282a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282e:	9303      	str	r3, [sp, #12]
 8002830:	2301      	movs	r3, #1
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2310      	movs	r3, #16
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002842:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <start_application_task+0x78>)
 8002844:	490f      	ldr	r1, [pc, #60]	; (8002884 <start_application_task+0x7c>)
 8002846:	4810      	ldr	r0, [pc, #64]	; (8002888 <start_application_task+0x80>)
 8002848:	f7fe fb54 	bl	8000ef4 <BMI088_Init>
	BMP388_Init(&barometer, &calib_data, &hi2c2, &i2c2MutexHandle, BMP_INT_Pin);
 800284c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <start_application_task+0x84>)
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <start_application_task+0x88>)
 8002856:	490f      	ldr	r1, [pc, #60]	; (8002894 <start_application_task+0x8c>)
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <start_application_task+0x90>)
 800285a:	f7ff f847 	bl	80018ec <BMP388_Init>
	LIS3MDL_Init(&magnetometer, &hi2c2, &i2c2MutexHandle, MAG_DRDY_Pin);
 800285e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <start_application_task+0x84>)
 8002864:	490a      	ldr	r1, [pc, #40]	; (8002890 <start_application_task+0x88>)
 8002866:	480d      	ldr	r0, [pc, #52]	; (800289c <start_application_task+0x94>)
 8002868:	f7ff fc92 	bl	8002190 <LIS3MDL_Init>
	USB_Log("ALL SENSORS INITIALIZED", CRITICAL);
 800286c:	2101      	movs	r1, #1
 800286e:	480c      	ldr	r0, [pc, #48]	; (80028a0 <start_application_task+0x98>)
 8002870:	f7ff fe38 	bl	80024e4 <USB_Log>

	/* Infinite loop */
	for(;;)
	{
		osDelay(100);
 8002874:	2064      	movs	r0, #100	; 0x64
 8002876:	f00a ffa0 	bl	800d7ba <osDelay>
 800287a:	e7fb      	b.n	8002874 <start_application_task+0x6c>
 800287c:	08015438 	.word	0x08015438
 8002880:	2000283c 	.word	0x2000283c
 8002884:	20002ba8 	.word	0x20002ba8
 8002888:	2000036c 	.word	0x2000036c
 800288c:	200028e4 	.word	0x200028e4
 8002890:	20002b54 	.word	0x20002b54
 8002894:	200003c8 	.word	0x200003c8
 8002898:	200003a8 	.word	0x200003a8
 800289c:	20000400 	.word	0x20000400
 80028a0:	08015468 	.word	0x08015468

080028a4 <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <start_acc_irq_task+0x24>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00b f933 	bl	800db20 <osSemaphoreAcquire>
		BMI088_ReadAccData(&imu);
 80028ba:	4804      	ldr	r0, [pc, #16]	; (80028cc <start_acc_irq_task+0x28>)
 80028bc:	f7fe fc5e 	bl	800117c <BMI088_ReadAccData>
		BMI088_ReadTempData(&imu); // TODO put this somewhere else?
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <start_acc_irq_task+0x28>)
 80028c2:	f7fe fd19 	bl	80012f8 <BMI088_ReadTempData>
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 80028c6:	e7f1      	b.n	80028ac <start_acc_irq_task+0x8>
 80028c8:	20002938 	.word	0x20002938
 80028cc:	2000036c 	.word	0x2000036c

080028d0 <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <start_gyro_irq_task+0x20>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e0:	4618      	mov	r0, r3
 80028e2:	f00b f91d 	bl	800db20 <osSemaphoreAcquire>
		BMI088_ReadGyroData(&imu);
 80028e6:	4803      	ldr	r0, [pc, #12]	; (80028f4 <start_gyro_irq_task+0x24>)
 80028e8:	f7fe fcaa 	bl	8001240 <BMI088_ReadGyroData>
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 80028ec:	e7f4      	b.n	80028d8 <start_gyro_irq_task+0x8>
 80028ee:	bf00      	nop
 80028f0:	2000298c 	.word	0x2000298c
 80028f4:	2000036c 	.word	0x2000036c

080028f8 <start_logging_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_logging_task */
void start_logging_task(void *argument)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
//		osDelay(2);
//		BMI088_LogGyroData(&imu);
//		osDelay(2);
//		BMP388_LogData(&barometer);
//		osDelay(2);
		LIS3MDL_LogData(&magnetometer);
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <start_logging_task+0x18>)
 8002902:	f7ff fd21 	bl	8002348 <LIS3MDL_LogData>
		osDelay(250);
 8002906:	20fa      	movs	r0, #250	; 0xfa
 8002908:	f00a ff57 	bl	800d7ba <osDelay>
		LIS3MDL_LogData(&magnetometer);
 800290c:	e7f8      	b.n	8002900 <start_logging_task+0x8>
 800290e:	bf00      	nop
 8002910:	20000400 	.word	0x20000400

08002914 <start_pressure_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_pressure_irq_task */
void start_pressure_irq_task(void *argument)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_pressure_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(pressureIRQSemaphoreHandle, osWaitForever);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <start_pressure_irq_task+0x20>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002924:	4618      	mov	r0, r3
 8002926:	f00b f8fb 	bl	800db20 <osSemaphoreAcquire>
		BMP388_ReadData(&barometer);
 800292a:	4803      	ldr	r0, [pc, #12]	; (8002938 <start_pressure_irq_task+0x24>)
 800292c:	f7ff f86a 	bl	8001a04 <BMP388_ReadData>
		osSemaphoreAcquire(pressureIRQSemaphoreHandle, osWaitForever);
 8002930:	e7f4      	b.n	800291c <start_pressure_irq_task+0x8>
 8002932:	bf00      	nop
 8002934:	200029e0 	.word	0x200029e0
 8002938:	200003a8 	.word	0x200003a8

0800293c <start_mag_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <start_mag_irq_task+0x20>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800294c:	4618      	mov	r0, r3
 800294e:	f00b f8e7 	bl	800db20 <osSemaphoreAcquire>
		LIS3MDL_ReadData(&magnetometer);
 8002952:	4803      	ldr	r0, [pc, #12]	; (8002960 <start_mag_irq_task+0x24>)
 8002954:	f7ff fc9c 	bl	8002290 <LIS3MDL_ReadData>
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8002958:	e7f4      	b.n	8002944 <start_mag_irq_task+0x8>
 800295a:	bf00      	nop
 800295c:	20002a34 	.word	0x20002a34
 8002960:	20000400 	.word	0x20000400

08002964 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == imu.acc_irq_pin)
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_GPIO_EXTI_Callback+0x68>)
 8002970:	8a9b      	ldrh	r3, [r3, #20]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	429a      	cmp	r2, r3
 8002976:	d105      	bne.n	8002984 <HAL_GPIO_EXTI_Callback+0x20>
	{
		osSemaphoreRelease(accIRQSemaphoreHandle);
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f00b f921 	bl	800dbc4 <osSemaphoreRelease>
	}
	else if (GPIO_Pin == magnetometer.irq_pin)
	{
		osSemaphoreRelease(magIRQSemaphoreHandle);
	}
}
 8002982:	e01f      	b.n	80029c4 <HAL_GPIO_EXTI_Callback+0x60>
	else if (GPIO_Pin == imu.gyro_irq_pin)
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_GPIO_EXTI_Callback+0x68>)
 8002986:	8adb      	ldrh	r3, [r3, #22]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	429a      	cmp	r2, r3
 800298c:	d105      	bne.n	800299a <HAL_GPIO_EXTI_Callback+0x36>
		osSemaphoreRelease(gyroIRQSemaphoreHandle);
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f00b f916 	bl	800dbc4 <osSemaphoreRelease>
}
 8002998:	e014      	b.n	80029c4 <HAL_GPIO_EXTI_Callback+0x60>
	else if (GPIO_Pin == barometer.irq_pin)
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x74>)
 800299c:	899b      	ldrh	r3, [r3, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d105      	bne.n	80029b0 <HAL_GPIO_EXTI_Callback+0x4c>
		osSemaphoreRelease(pressureIRQSemaphoreHandle);
 80029a4:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_GPIO_EXTI_Callback+0x78>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f00b f90b 	bl	800dbc4 <osSemaphoreRelease>
}
 80029ae:	e009      	b.n	80029c4 <HAL_GPIO_EXTI_Callback+0x60>
	else if (GPIO_Pin == magnetometer.irq_pin)
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80029b2:	891b      	ldrh	r3, [r3, #8]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d104      	bne.n	80029c4 <HAL_GPIO_EXTI_Callback+0x60>
		osSemaphoreRelease(magIRQSemaphoreHandle);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x80>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f00b f900 	bl	800dbc4 <osSemaphoreRelease>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	2000036c 	.word	0x2000036c
 80029d0:	20002938 	.word	0x20002938
 80029d4:	2000298c 	.word	0x2000298c
 80029d8:	200003a8 	.word	0x200003a8
 80029dc:	200029e0 	.word	0x200029e0
 80029e0:	20000400 	.word	0x20000400
 80029e4:	20002a34 	.word	0x20002a34

080029e8 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 80029ee:	4a20      	ldr	r2, [pc, #128]	; (8002a70 <MX_FDCAN1_Init+0x88>)
 80029f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a18:	2210      	movs	r2, #16
 8002a1a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002a58:	4804      	ldr	r0, [pc, #16]	; (8002a6c <MX_FDCAN1_Init+0x84>)
 8002a5a:	f000 ff21 	bl	80038a0 <HAL_FDCAN_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002a64:	f000 fb02 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20002a88 	.word	0x20002a88
 8002a70:	40006400 	.word	0x40006400

08002a74 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002a7a:	4a20      	ldr	r2, [pc, #128]	; (8002afc <MX_FDCAN2_Init+0x88>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <MX_FDCAN2_Init+0x84>)
 8002ae6:	f000 fedb 	bl	80038a0 <HAL_FDCAN_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002af0:	f000 fabc 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20002aec 	.word	0x20002aec
 8002afc:	40006800 	.word	0x40006800

08002b00 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0a0      	sub	sp, #128	; 0x80
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b18:	f107 0318 	add.w	r3, r7, #24
 8002b1c:	2254      	movs	r2, #84	; 0x54
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f00f fcb4 	bl	801248e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a48      	ldr	r2, [pc, #288]	; (8002c4c <HAL_FDCAN_MspInit+0x14c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d142      	bne.n	8002bb6 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b3c:	f107 0318 	add.w	r3, r7, #24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fb8d 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002b4c:	f000 fa8e 	bl	800306c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002b50:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_FDCAN_MspInit+0x150>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	4a3e      	ldr	r2, [pc, #248]	; (8002c50 <HAL_FDCAN_MspInit+0x150>)
 8002b58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <HAL_FDCAN_MspInit+0x150>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10b      	bne.n	8002b7a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b62:	4b3c      	ldr	r3, [pc, #240]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	4a3b      	ldr	r2, [pc, #236]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b6e:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b86:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002ba4:	2309      	movs	r3, #9
 8002ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bac:	4619      	mov	r1, r3
 8002bae:	482a      	ldr	r0, [pc, #168]	; (8002c58 <HAL_FDCAN_MspInit+0x158>)
 8002bb0:	f001 f83c 	bl	8003c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8002bb4:	e045      	b.n	8002c42 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <HAL_FDCAN_MspInit+0x15c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d140      	bne.n	8002c42 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bcc:	f107 0318 	add.w	r3, r7, #24
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 fb45 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8002bdc:	f000 fa46 	bl	800306c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_FDCAN_MspInit+0x150>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_FDCAN_MspInit+0x150>)
 8002be8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_FDCAN_MspInit+0x150>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10b      	bne.n	8002c0a <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_FDCAN_MspInit+0x154>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c22:	2360      	movs	r3, #96	; 0x60
 8002c24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002c32:	2309      	movs	r3, #9
 8002c34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4806      	ldr	r0, [pc, #24]	; (8002c58 <HAL_FDCAN_MspInit+0x158>)
 8002c3e:	f000 fff5 	bl	8003c2c <HAL_GPIO_Init>
}
 8002c42:	bf00      	nop
 8002c44:	3780      	adds	r7, #128	; 0x80
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40006400 	.word	0x40006400
 8002c50:	20002b50 	.word	0x20002b50
 8002c54:	40021000 	.word	0x40021000
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	40006800 	.word	0x40006800

08002c60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	4a71      	ldr	r2, [pc, #452]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c82:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4a6b      	ldr	r2, [pc, #428]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002c94:	f043 0320 	orr.w	r3, r3, #32
 8002c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9a:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb2:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	4a5f      	ldr	r2, [pc, #380]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <MX_GPIO_Init+0x1e0>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002cdc:	4859      	ldr	r0, [pc, #356]	; (8002e44 <MX_GPIO_Init+0x1e4>)
 8002cde:	f001 f927 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2111      	movs	r1, #17
 8002ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cea:	f001 f921 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 8002cee:	2201      	movs	r2, #1
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4855      	ldr	r0, [pc, #340]	; (8002e48 <MX_GPIO_Init+0x1e8>)
 8002cf4:	f001 f91c 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f648 4190 	movw	r1, #35984	; 0x8c90
 8002cfe:	4852      	ldr	r0, [pc, #328]	; (8002e48 <MX_GPIO_Init+0x1e8>)
 8002d00:	f001 f916 	bl	8003f30 <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0e:	f001 f90f 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 8002d12:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4846      	ldr	r0, [pc, #280]	; (8002e44 <MX_GPIO_Init+0x1e4>)
 8002d2c:	f000 ff7e 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8002d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	483f      	ldr	r0, [pc, #252]	; (8002e44 <MX_GPIO_Init+0x1e4>)
 8002d48:	f000 ff70 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8002d4c:	2311      	movs	r3, #17
 8002d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d50:	2301      	movs	r3, #1
 8002d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d54:	2301      	movs	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d66:	f000 ff61 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d74:	2302      	movs	r3, #2
 8002d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d82:	f000 ff53 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_INT_Pin;
 8002d86:	f242 0305 	movw	r3, #8197	; 0x2005
 8002d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	482b      	ldr	r0, [pc, #172]	; (8002e48 <MX_GPIO_Init+0x1e8>)
 8002d9c:	f000 ff46 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 8002da0:	2302      	movs	r3, #2
 8002da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da4:	2301      	movs	r3, #1
 8002da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4824      	ldr	r0, [pc, #144]	; (8002e48 <MX_GPIO_Init+0x1e8>)
 8002db8:	f000 ff38 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8002dbc:	f648 4390 	movw	r3, #35984	; 0x8c90
 8002dc0:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	481c      	ldr	r0, [pc, #112]	; (8002e48 <MX_GPIO_Init+0x1e8>)
 8002dd6:	f000 ff29 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|BMP_INT_Pin;
 8002dda:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002de0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002de6:	2302      	movs	r3, #2
 8002de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4619      	mov	r1, r3
 8002df0:	4815      	ldr	r0, [pc, #84]	; (8002e48 <MX_GPIO_Init+0x1e8>)
 8002df2:	f000 ff1b 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 8002df6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	2300      	movs	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e12:	f000 ff0b 	bl	8003c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2105      	movs	r1, #5
 8002e1a:	2007      	movs	r0, #7
 8002e1c:	f000 fd18 	bl	8003850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002e20:	2007      	movs	r0, #7
 8002e22:	f000 fd2f 	bl	8003884 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2105      	movs	r1, #5
 8002e2a:	2028      	movs	r0, #40	; 0x28
 8002e2c:	f000 fd10 	bl	8003850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e30:	2028      	movs	r0, #40	; 0x28
 8002e32:	f000 fd27 	bl	8003884 <HAL_NVIC_EnableIRQ>

}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	; 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	48000800 	.word	0x48000800
 8002e48:	48000400 	.word	0x48000400

08002e4c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <MX_I2C2_Init+0x78>)
 8002e54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10802D9B;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <MX_I2C2_Init+0x7c>)
 8002e5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e86:	480e      	ldr	r0, [pc, #56]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e88:	f001 f882 	bl	8003f90 <HAL_I2C_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002e92:	f000 f8eb 	bl	800306c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e96:	2100      	movs	r1, #0
 8002e98:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002e9a:	f001 fe05 	bl	8004aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002ea4:	f000 f8e2 	bl	800306c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <MX_I2C2_Init+0x74>)
 8002eac:	f001 fe47 	bl	8004b3e <HAL_I2CEx_ConfigDigitalFilter>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002eb6:	f000 f8d9 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20002b54 	.word	0x20002b54
 8002ec4:	40005800 	.word	0x40005800
 8002ec8:	10802d9b 	.word	0x10802d9b

08002ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b09e      	sub	sp, #120	; 0x78
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	2254      	movs	r2, #84	; 0x54
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f00f face 	bl	801248e <memset>
  if(i2cHandle->Instance==I2C2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_I2C_MspInit+0xa8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d137      	bne.n	8002f6c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f00:	2300      	movs	r3, #0
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f004 f9a9 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002f14:	f000 f8aa 	bl	800306c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f36:	2312      	movs	r3, #18
 8002f38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f42:	2304      	movs	r3, #4
 8002f44:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f50:	f000 fe6c 	bl	8003c2c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3778      	adds	r7, #120	; 0x78
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40005800 	.word	0x40005800
 8002f78:	40021000 	.word	0x40021000

08002f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f80:	f000 fb77 	bl	8003672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f84:	f000 f815 	bl	8002fb2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f88:	f7ff fe6a 	bl	8002c60 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8002f8c:	f7ff fd2c 	bl	80029e8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002f90:	f7ff fd70 	bl	8002a74 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8002f94:	f7ff ff5a 	bl	8002e4c <MX_I2C2_Init>
  MX_SPI1_Init();
 8002f98:	f000 f86e 	bl	8003078 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002f9c:	f000 fa9c 	bl	80034d8 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8002fa0:	f00d ffcc 	bl	8010f3c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002fa4:	f00a fb0e 	bl	800d5c4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002fa8:	f7ff fb88 	bl	80026bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002fac:	f00a fb2e 	bl	800d60c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <main+0x34>

08002fb2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b094      	sub	sp, #80	; 0x50
 8002fb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb8:	f107 0318 	add.w	r3, r7, #24
 8002fbc:	2238      	movs	r2, #56	; 0x38
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f00f fa64 	bl	801248e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f003 fb33 	bl	8006640 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002fda:	2321      	movs	r3, #33	; 0x21
 8002fdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fec:	2303      	movs	r3, #3
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002ff4:	2355      	movs	r3, #85	; 0x55
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003000:	2302      	movs	r3, #2
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003004:	f107 0318 	add.w	r3, r7, #24
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fbcd 	bl	80067a8 <HAL_RCC_OscConfig>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003014:	f000 f82a 	bl	800306c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003018:	230f      	movs	r3, #15
 800301a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800301c:	2303      	movs	r3, #3
 800301e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2104      	movs	r1, #4
 8003030:	4618      	mov	r0, r3
 8003032:	f003 fecb 	bl	8006dcc <HAL_RCC_ClockConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800303c:	f000 f816 	bl	800306c <Error_Handler>
  }
}
 8003040:	bf00      	nop
 8003042:	3750      	adds	r7, #80	; 0x50
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800305a:	f000 fb23 	bl	80036a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40001000 	.word	0x40001000

0800306c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003070:	b672      	cpsid	i
}
 8003072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003074:	e7fe      	b.n	8003074 <Error_Handler+0x8>
	...

08003078 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <MX_SPI1_Init+0x74>)
 800307e:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <MX_SPI1_Init+0x78>)
 8003080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <MX_SPI1_Init+0x74>)
 8003084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <MX_SPI1_Init+0x74>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <MX_SPI1_Init+0x74>)
 8003092:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003096:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <MX_SPI1_Init+0x74>)
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <MX_SPI1_Init+0x74>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <MX_SPI1_Init+0x74>)
 80030a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <MX_SPI1_Init+0x74>)
 80030ae:	2218      	movs	r2, #24
 80030b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <MX_SPI1_Init+0x74>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <MX_SPI1_Init+0x74>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <MX_SPI1_Init+0x74>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <MX_SPI1_Init+0x74>)
 80030c6:	2207      	movs	r2, #7
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <MX_SPI1_Init+0x74>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <MX_SPI1_Init+0x74>)
 80030d2:	2208      	movs	r2, #8
 80030d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <MX_SPI1_Init+0x74>)
 80030d8:	f004 fb10 	bl	80076fc <HAL_SPI_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030e2:	f7ff ffc3 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20002ba8 	.word	0x20002ba8
 80030f0:	40013000 	.word	0x40013000

080030f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a17      	ldr	r2, [pc, #92]	; (8003170 <HAL_SPI_MspInit+0x7c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d128      	bne.n	8003168 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_SPI_MspInit+0x80>)
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	4a16      	ldr	r2, [pc, #88]	; (8003174 <HAL_SPI_MspInit+0x80>)
 800311c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003120:	6613      	str	r3, [r2, #96]	; 0x60
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_SPI_MspInit+0x80>)
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_SPI_MspInit+0x80>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_SPI_MspInit+0x80>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_SPI_MspInit+0x80>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003146:	23e0      	movs	r3, #224	; 0xe0
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003156:	2305      	movs	r3, #5
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003164:	f000 fd62 	bl	8003c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003168:	bf00      	nop
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40013000 	.word	0x40013000
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_MspInit+0x50>)
 8003180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003182:	4a11      	ldr	r2, [pc, #68]	; (80031c8 <HAL_MspInit+0x50>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6613      	str	r3, [r2, #96]	; 0x60
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_MspInit+0x50>)
 800318c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_MspInit+0x50>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <HAL_MspInit+0x50>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6593      	str	r3, [r2, #88]	; 0x58
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_MspInit+0x50>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	210f      	movs	r1, #15
 80031b2:	f06f 0001 	mvn.w	r0, #1
 80031b6:	f000 fb4b 	bl	8003850 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80031ba:	f003 fae5 	bl	8006788 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000

080031cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08c      	sub	sp, #48	; 0x30
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80031dc:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <HAL_InitTick+0xc4>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <HAL_InitTick+0xc4>)
 80031e2:	f043 0310 	orr.w	r3, r3, #16
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_InitTick+0xc4>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031f4:	f107 020c 	add.w	r2, r7, #12
 80031f8:	f107 0310 	add.w	r3, r7, #16
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 ffb8 	bl	8007174 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003204:	f003 ff8a 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 8003208:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	4a21      	ldr	r2, [pc, #132]	; (8003294 <HAL_InitTick+0xc8>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0c9b      	lsrs	r3, r3, #18
 8003214:	3b01      	subs	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003218:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_InitTick+0xcc>)
 800321a:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_InitTick+0xd0>)
 800321c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800321e:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_InitTick+0xcc>)
 8003220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003224:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_InitTick+0xcc>)
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800322c:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_InitTick+0xcc>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_InitTick+0xcc>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003238:	4817      	ldr	r0, [pc, #92]	; (8003298 <HAL_InitTick+0xcc>)
 800323a:	f005 f805 	bl	8008248 <HAL_TIM_Base_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11b      	bne.n	8003284 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800324c:	4812      	ldr	r0, [pc, #72]	; (8003298 <HAL_InitTick+0xcc>)
 800324e:	f005 f85d 	bl	800830c <HAL_TIM_Base_Start_IT>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003260:	2036      	movs	r0, #54	; 0x36
 8003262:	f000 fb0f 	bl	8003884 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d808      	bhi.n	800327e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800326c:	2200      	movs	r2, #0
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	2036      	movs	r0, #54	; 0x36
 8003272:	f000 faed 	bl	8003850 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_InitTick+0xd4>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e002      	b.n	8003284 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003288:	4618      	mov	r0, r3
 800328a:	3730      	adds	r7, #48	; 0x30
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	431bde83 	.word	0x431bde83
 8003298:	20002c0c 	.word	0x20002c0c
 800329c:	40001000 	.word	0x40001000
 80032a0:	20000004 	.word	0x20000004

080032a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032a8:	e7fe      	b.n	80032a8 <NMI_Handler+0x4>

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <HardFault_Handler+0x4>

080032b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <MemManage_Handler+0x4>

080032b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 80032d4:	2002      	movs	r0, #2
 80032d6:	f000 fe43 	bl	8003f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <USB_LP_IRQHandler+0x10>)
 80032e6:	f001 fd66 	bl	8004db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200059b8 	.word	0x200059b8

080032f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 80032f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032fc:	f000 fe30 	bl	8003f60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BMP_INT_Pin);
 8003300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003304:	f000 fe2c 	bl	8003f60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 8003308:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800330c:	f000 fe28 	bl	8003f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}

08003314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <TIM6_DAC_IRQHandler+0x10>)
 800331a:	f005 f86f 	bl	80083fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20002c0c 	.word	0x20002c0c

08003328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return 1;
 800332c:	2301      	movs	r3, #1
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <_kill>:

int _kill(int pid, int sig)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003342:	f00f f94d 	bl	80125e0 <__errno>
 8003346:	4603      	mov	r3, r0
 8003348:	2216      	movs	r2, #22
 800334a:	601a      	str	r2, [r3, #0]
  return -1;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_exit>:

void _exit (int status)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ffe7 	bl	8003338 <_kill>
  while (1) {}    /* Make sure we hang here */
 800336a:	e7fe      	b.n	800336a <_exit+0x12>

0800336c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	e00a      	b.n	8003394 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800337e:	f3af 8000 	nop.w
 8003382:	4601      	mov	r1, r0
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	60ba      	str	r2, [r7, #8]
 800338a:	b2ca      	uxtb	r2, r1
 800338c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3301      	adds	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	429a      	cmp	r2, r3
 800339a:	dbf0      	blt.n	800337e <_read+0x12>
  }

  return len;
 800339c:	687b      	ldr	r3, [r7, #4]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e009      	b.n	80033cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	60ba      	str	r2, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3301      	adds	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	dbf1      	blt.n	80033b8 <_write+0x12>
  }
  return len;
 80033d4:	687b      	ldr	r3, [r7, #4]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <_close>:

int _close(int file)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003406:	605a      	str	r2, [r3, #4]
  return 0;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <_isatty>:

int _isatty(int file)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <_sbrk+0x5c>)
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <_sbrk+0x60>)
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <_sbrk+0x64>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <_sbrk+0x64>)
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <_sbrk+0x68>)
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <_sbrk+0x64>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	429a      	cmp	r2, r3
 8003476:	d207      	bcs.n	8003488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003478:	f00f f8b2 	bl	80125e0 <__errno>
 800347c:	4603      	mov	r3, r0
 800347e:	220c      	movs	r2, #12
 8003480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003486:	e009      	b.n	800349c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <_sbrk+0x64>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <_sbrk+0x64>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	4a05      	ldr	r2, [pc, #20]	; (80034ac <_sbrk+0x64>)
 8003498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20020000 	.word	0x20020000
 80034a8:	00000400 	.word	0x00000400
 80034ac:	20002c58 	.word	0x20002c58
 80034b0:	20006000 	.word	0x20006000

080034b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <SystemInit+0x20>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <SystemInit+0x20>)
 80034c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <MX_USART2_UART_Init+0x90>)
 80034de:	4a23      	ldr	r2, [pc, #140]	; (800356c <MX_USART2_UART_Init+0x94>)
 80034e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034e2:	4b21      	ldr	r3, [pc, #132]	; (8003568 <MX_USART2_UART_Init+0x90>)
 80034e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ea:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <MX_USART2_UART_Init+0x90>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <MX_USART2_UART_Init+0x90>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <MX_USART2_UART_Init+0x90>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <MX_USART2_UART_Init+0x90>)
 80034fe:	220c      	movs	r2, #12
 8003500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003502:	4b19      	ldr	r3, [pc, #100]	; (8003568 <MX_USART2_UART_Init+0x90>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003508:	4b17      	ldr	r3, [pc, #92]	; (8003568 <MX_USART2_UART_Init+0x90>)
 800350a:	2200      	movs	r2, #0
 800350c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <MX_USART2_UART_Init+0x90>)
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <MX_USART2_UART_Init+0x90>)
 8003516:	2200      	movs	r2, #0
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <MX_USART2_UART_Init+0x90>)
 800351c:	2200      	movs	r2, #0
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003520:	4811      	ldr	r0, [pc, #68]	; (8003568 <MX_USART2_UART_Init+0x90>)
 8003522:	f005 f9dd 	bl	80088e0 <HAL_UART_Init>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800352c:	f7ff fd9e 	bl	800306c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003530:	2100      	movs	r1, #0
 8003532:	480d      	ldr	r0, [pc, #52]	; (8003568 <MX_USART2_UART_Init+0x90>)
 8003534:	f005 ff78 	bl	8009428 <HAL_UARTEx_SetTxFifoThreshold>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800353e:	f7ff fd95 	bl	800306c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003542:	2100      	movs	r1, #0
 8003544:	4808      	ldr	r0, [pc, #32]	; (8003568 <MX_USART2_UART_Init+0x90>)
 8003546:	f005 ffad 	bl	80094a4 <HAL_UARTEx_SetRxFifoThreshold>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003550:	f7ff fd8c 	bl	800306c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003554:	4804      	ldr	r0, [pc, #16]	; (8003568 <MX_USART2_UART_Init+0x90>)
 8003556:	f005 ff2e 	bl	80093b6 <HAL_UARTEx_DisableFifoMode>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003560:	f7ff fd84 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20002c5c 	.word	0x20002c5c
 800356c:	40004400 	.word	0x40004400

08003570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b09e      	sub	sp, #120	; 0x78
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	2254      	movs	r2, #84	; 0x54
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f00e ff7c 	bl	801248e <memset>
  if(uartHandle->Instance==USART2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <HAL_UART_MspInit+0xa8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d136      	bne.n	800360e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035a0:	2302      	movs	r3, #2
 80035a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fe57 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035b8:	f7ff fd58 	bl	800306c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_UART_MspInit+0xac>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_UART_MspInit+0xac>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c6:	6593      	str	r3, [r2, #88]	; 0x58
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_UART_MspInit+0xac>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_UART_MspInit+0xac>)
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_UART_MspInit+0xac>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_UART_MspInit+0xac>)
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035ec:	230c      	movs	r3, #12
 80035ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035fc:	2307      	movs	r3, #7
 80035fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003600:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003604:	4619      	mov	r1, r3
 8003606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360a:	f000 fb0f 	bl	8003c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800360e:	bf00      	nop
 8003610:	3778      	adds	r7, #120	; 0x78
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40004400 	.word	0x40004400
 800361c:	40021000 	.word	0x40021000

08003620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003620:	480d      	ldr	r0, [pc, #52]	; (8003658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003624:	f7ff ff46 	bl	80034b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003628:	480c      	ldr	r0, [pc, #48]	; (800365c <LoopForever+0x6>)
  ldr r1, =_edata
 800362a:	490d      	ldr	r1, [pc, #52]	; (8003660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800362c:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <LoopForever+0xe>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003640:	4c0a      	ldr	r4, [pc, #40]	; (800366c <LoopForever+0x16>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800364e:	f00e ffcd 	bl	80125ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003652:	f7ff fc93 	bl	8002f7c <main>

08003656 <LoopForever>:

LoopForever:
    b LoopForever
 8003656:	e7fe      	b.n	8003656 <LoopForever>
  ldr   r0, =_estack
 8003658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003664:	08015a04 	.word	0x08015a04
  ldr r2, =_sbss
 8003668:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800366c:	20006000 	.word	0x20006000

08003670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC1_2_IRQHandler>

08003672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367c:	2003      	movs	r0, #3
 800367e:	f000 f8dc 	bl	800383a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003682:	200f      	movs	r0, #15
 8003684:	f7ff fda2 	bl	80031cc <HAL_InitTick>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	71fb      	strb	r3, [r7, #7]
 8003692:	e001      	b.n	8003698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003694:	f7ff fd70 	bl	8003178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003698:	79fb      	ldrb	r3, [r7, #7]

}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_IncTick+0x1c>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_IncTick+0x20>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	4a03      	ldr	r2, [pc, #12]	; (80036c0 <HAL_IncTick+0x1c>)
 80036b4:	6013      	str	r3, [r2, #0]
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20002cf0 	.word	0x20002cf0
 80036c4:	20000008 	.word	0x20000008

080036c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return uwTick;
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <HAL_GetTick+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20002cf0 	.word	0x20002cf0

080036e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036fc:	4013      	ands	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800370c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003712:	4a04      	ldr	r2, [pc, #16]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <__NVIC_GetPriorityGrouping+0x18>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 0307 	and.w	r3, r3, #7
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db0b      	blt.n	800376e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4907      	ldr	r1, [pc, #28]	; (800377c <__NVIC_EnableIRQ+0x38>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e100 	.word	0xe000e100

08003780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db0a      	blt.n	80037aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <__NVIC_SetPriority+0x4c>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	440b      	add	r3, r1
 80037a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a8:	e00a      	b.n	80037c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4908      	ldr	r1, [pc, #32]	; (80037d0 <__NVIC_SetPriority+0x50>)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3b04      	subs	r3, #4
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	440b      	add	r3, r1
 80037be:	761a      	strb	r2, [r3, #24]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf28      	it	cs
 80037f2:	2304      	movcs	r3, #4
 80037f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d902      	bls.n	8003804 <NVIC_EncodePriority+0x30>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3b03      	subs	r3, #3
 8003802:	e000      	b.n	8003806 <NVIC_EncodePriority+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800381c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43d9      	mvns	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	4313      	orrs	r3, r2
         );
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	; 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff4c 	bl	80036e0 <__NVIC_SetPriorityGrouping>
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800385e:	f7ff ff63 	bl	8003728 <__NVIC_GetPriorityGrouping>
 8003862:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	6978      	ldr	r0, [r7, #20]
 800386a:	f7ff ffb3 	bl	80037d4 <NVIC_EncodePriority>
 800386e:	4602      	mov	r2, r0
 8003870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ff82 	bl	8003780 <__NVIC_SetPriority>
}
 800387c:	bf00      	nop
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff ff56 	bl	8003744 <__NVIC_EnableIRQ>
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e147      	b.n	8003b42 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff f91a 	bl	8002b00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0210 	bic.w	r2, r2, #16
 80038da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038dc:	f7ff fef4 	bl	80036c8 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038e2:	e012      	b.n	800390a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80038e4:	f7ff fef0 	bl	80036c8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b0a      	cmp	r3, #10
 80038f0:	d90b      	bls.n	800390a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2203      	movs	r2, #3
 8003902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e11b      	b.n	8003b42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d0e5      	beq.n	80038e4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003928:	f7ff fece 	bl	80036c8 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800392e:	e012      	b.n	8003956 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003930:	f7ff feca 	bl	80036c8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b0a      	cmp	r3, #10
 800393c:	d90b      	bls.n	8003956 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0f5      	b.n	8003b42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0e5      	beq.n	8003930 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0202 	orr.w	r2, r2, #2
 8003972:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <HAL_FDCAN_Init+0x2ac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d103      	bne.n	8003986 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800397e:	4a74      	ldr	r2, [pc, #464]	; (8003b50 <HAL_FDCAN_Init+0x2b0>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7c1b      	ldrb	r3, [r3, #16]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d108      	bne.n	80039a0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399c:	619a      	str	r2, [r3, #24]
 800399e:	e007      	b.n	80039b0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7c5b      	ldrb	r3, [r3, #17]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d108      	bne.n	80039ca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c6:	619a      	str	r2, [r3, #24]
 80039c8:	e007      	b.n	80039da <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7c9b      	ldrb	r3, [r3, #18]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d108      	bne.n	80039f4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039f0:	619a      	str	r2, [r3, #24]
 80039f2:	e007      	b.n	8003a04 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a02:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003a28:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0210 	bic.w	r2, r2, #16
 8003a38:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d108      	bne.n	8003a54 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0204 	orr.w	r2, r2, #4
 8003a50:	619a      	str	r2, [r3, #24]
 8003a52:	e02c      	b.n	8003aae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d028      	beq.n	8003aae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d01c      	beq.n	8003a9e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a72:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0210 	orr.w	r2, r2, #16
 8003a82:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d110      	bne.n	8003aae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0220 	orr.w	r2, r2, #32
 8003a9a:	619a      	str	r2, [r3, #24]
 8003a9c:	e007      	b.n	8003aae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0220 	orr.w	r2, r2, #32
 8003aac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003abe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ac6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ad6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ad8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae2:	d115      	bne.n	8003b10 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	3b01      	subs	r3, #1
 8003af0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003af2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	3b01      	subs	r3, #1
 8003afa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003afc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	3b01      	subs	r3, #1
 8003b06:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b0c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b0e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f814 	bl	8003b54 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40006400 	.word	0x40006400
 8003b50:	40006500 	.word	0x40006500

08003b54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003b5c:	4b30      	ldr	r3, [pc, #192]	; (8003c20 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003b5e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d103      	bne.n	8003b72 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003b70:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003b82:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b92:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	041a      	lsls	r2, r3, #16
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	061a      	lsls	r2, r3, #24
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e005      	b.n	8003c06 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3304      	adds	r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3f3      	bcc.n	8003bfa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	4000a400 	.word	0x4000a400
 8003c24:	40006800 	.word	0x40006800
 8003c28:	40006c00 	.word	0x40006c00

08003c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c3a:	e15a      	b.n	8003ef2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2101      	movs	r1, #1
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 814c 	beq.w	8003eec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d005      	beq.n	8003c6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d130      	bne.n	8003cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0201 	and.w	r2, r3, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d017      	beq.n	8003d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d123      	bne.n	8003d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	08da      	lsrs	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3208      	adds	r2, #8
 8003d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	08da      	lsrs	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3208      	adds	r2, #8
 8003d58:	6939      	ldr	r1, [r7, #16]
 8003d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	2203      	movs	r2, #3
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0203 	and.w	r2, r3, #3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80a6 	beq.w	8003eec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da0:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <HAL_GPIO_Init+0x2e4>)
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	4a5a      	ldr	r2, [pc, #360]	; (8003f10 <HAL_GPIO_Init+0x2e4>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6613      	str	r3, [r2, #96]	; 0x60
 8003dac:	4b58      	ldr	r3, [pc, #352]	; (8003f10 <HAL_GPIO_Init+0x2e4>)
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003db8:	4a56      	ldr	r2, [pc, #344]	; (8003f14 <HAL_GPIO_Init+0x2e8>)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	220f      	movs	r2, #15
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003de2:	d01f      	beq.n	8003e24 <HAL_GPIO_Init+0x1f8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a4c      	ldr	r2, [pc, #304]	; (8003f18 <HAL_GPIO_Init+0x2ec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d019      	beq.n	8003e20 <HAL_GPIO_Init+0x1f4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a4b      	ldr	r2, [pc, #300]	; (8003f1c <HAL_GPIO_Init+0x2f0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_GPIO_Init+0x1f0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a4a      	ldr	r2, [pc, #296]	; (8003f20 <HAL_GPIO_Init+0x2f4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00d      	beq.n	8003e18 <HAL_GPIO_Init+0x1ec>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a49      	ldr	r2, [pc, #292]	; (8003f24 <HAL_GPIO_Init+0x2f8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <HAL_GPIO_Init+0x1e8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <HAL_GPIO_Init+0x2fc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_GPIO_Init+0x1e4>
 8003e0c:	2305      	movs	r3, #5
 8003e0e:	e00a      	b.n	8003e26 <HAL_GPIO_Init+0x1fa>
 8003e10:	2306      	movs	r3, #6
 8003e12:	e008      	b.n	8003e26 <HAL_GPIO_Init+0x1fa>
 8003e14:	2304      	movs	r3, #4
 8003e16:	e006      	b.n	8003e26 <HAL_GPIO_Init+0x1fa>
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e004      	b.n	8003e26 <HAL_GPIO_Init+0x1fa>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e002      	b.n	8003e26 <HAL_GPIO_Init+0x1fa>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_GPIO_Init+0x1fa>
 8003e24:	2300      	movs	r3, #0
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	f002 0203 	and.w	r2, r2, #3
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	4093      	lsls	r3, r2
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e36:	4937      	ldr	r1, [pc, #220]	; (8003f14 <HAL_GPIO_Init+0x2e8>)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	089b      	lsrs	r3, r3, #2
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e68:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e92:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e98:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ebc:	4a1b      	ldr	r2, [pc, #108]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_GPIO_Init+0x300>)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f47f ae9d 	bne.w	8003c3c <HAL_GPIO_Init+0x10>
  }
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40010000 	.word	0x40010000
 8003f18:	48000400 	.word	0x48000400
 8003f1c:	48000800 	.word	0x48000800
 8003f20:	48000c00 	.word	0x48000c00
 8003f24:	48001000 	.word	0x48001000
 8003f28:	48001400 	.word	0x48001400
 8003f2c:	40010400 	.word	0x40010400

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fcf0 	bl	8002964 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40010400 	.word	0x40010400

08003f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e08d      	b.n	80040be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe ff88 	bl	8002ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fe0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	e006      	b.n	8004018 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004016:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d108      	bne.n	8004032 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	e007      	b.n	8004042 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69d9      	ldr	r1, [r3, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1a      	ldr	r2, [r3, #32]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	4608      	mov	r0, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	817b      	strh	r3, [r7, #10]
 80040da:	460b      	mov	r3, r1
 80040dc:	813b      	strh	r3, [r7, #8]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	f040 80f9 	bne.w	80042e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_I2C_Mem_Write+0x34>
 80040f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004102:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0ed      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_I2C_Mem_Write+0x4e>
 8004112:	2302      	movs	r3, #2
 8004114:	e0e6      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800411e:	f7ff fad3 	bl	80036c8 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2319      	movs	r3, #25
 800412a:	2201      	movs	r2, #1
 800412c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fac3 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0d1      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2221      	movs	r2, #33	; 0x21
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2240      	movs	r2, #64	; 0x40
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004168:	88f8      	ldrh	r0, [r7, #6]
 800416a:	893a      	ldrh	r2, [r7, #8]
 800416c:	8979      	ldrh	r1, [r7, #10]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	4603      	mov	r3, r0
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9d3 	bl	8004524 <I2C_RequestMemoryWrite>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0a9      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2bff      	cmp	r3, #255	; 0xff
 8004198:	d90e      	bls.n	80041b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	22ff      	movs	r2, #255	; 0xff
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	8979      	ldrh	r1, [r7, #10]
 80041a8:	2300      	movs	r3, #0
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fc47 	bl	8004a44 <I2C_TransferConfig>
 80041b6:	e00f      	b.n	80041d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	8979      	ldrh	r1, [r7, #10]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fc36 	bl	8004a44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fac6 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e07b      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d034      	beq.n	8004290 <HAL_I2C_Mem_Write+0x1c8>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d130      	bne.n	8004290 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	2200      	movs	r2, #0
 8004236:	2180      	movs	r1, #128	; 0x80
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fa3f 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e04d      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2bff      	cmp	r3, #255	; 0xff
 8004250:	d90e      	bls.n	8004270 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	b2da      	uxtb	r2, r3
 800425e:	8979      	ldrh	r1, [r7, #10]
 8004260:	2300      	movs	r3, #0
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fbeb 	bl	8004a44 <I2C_TransferConfig>
 800426e:	e00f      	b.n	8004290 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	b2da      	uxtb	r2, r3
 8004280:	8979      	ldrh	r1, [r7, #10]
 8004282:	2300      	movs	r3, #0
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fbda 	bl	8004a44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d19e      	bne.n	80041d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 faac 	bl	80047fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e01a      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2220      	movs	r2, #32
 80042b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_I2C_Mem_Write+0x224>)
 80042c2:	400b      	ands	r3, r1
 80042c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e000      	b.n	80042e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	fe00e800 	.word	0xfe00e800

080042f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b20      	cmp	r3, #32
 8004314:	f040 80fd 	bne.w	8004512 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_I2C_Mem_Read+0x34>
 800431e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0f1      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_I2C_Mem_Read+0x4e>
 800433a:	2302      	movs	r3, #2
 800433c:	e0ea      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004346:	f7ff f9bf 	bl	80036c8 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	2319      	movs	r3, #25
 8004352:	2201      	movs	r2, #1
 8004354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f9af 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0d5      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2222      	movs	r2, #34	; 0x22
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2240      	movs	r2, #64	; 0x40
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004388:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004390:	88f8      	ldrh	r0, [r7, #6]
 8004392:	893a      	ldrh	r2, [r7, #8]
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	4603      	mov	r3, r0
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f913 	bl	80045cc <I2C_RequestMemoryRead>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0ad      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2bff      	cmp	r3, #255	; 0xff
 80043c0:	d90e      	bls.n	80043e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	22ff      	movs	r2, #255	; 0xff
 80043c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	8979      	ldrh	r1, [r7, #10]
 80043d0:	4b52      	ldr	r3, [pc, #328]	; (800451c <HAL_I2C_Mem_Read+0x22c>)
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fb33 	bl	8004a44 <I2C_TransferConfig>
 80043de:	e00f      	b.n	8004400 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	8979      	ldrh	r1, [r7, #10]
 80043f2:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_I2C_Mem_Read+0x22c>)
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fb22 	bl	8004a44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	2200      	movs	r2, #0
 8004408:	2104      	movs	r1, #4
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f956 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07c      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d034      	beq.n	80044c0 <HAL_I2C_Mem_Read+0x1d0>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d130      	bne.n	80044c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	2200      	movs	r2, #0
 8004466:	2180      	movs	r1, #128	; 0x80
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f927 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e04d      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2bff      	cmp	r3, #255	; 0xff
 8004480:	d90e      	bls.n	80044a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	b2da      	uxtb	r2, r3
 800448e:	8979      	ldrh	r1, [r7, #10]
 8004490:	2300      	movs	r3, #0
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fad3 	bl	8004a44 <I2C_TransferConfig>
 800449e:	e00f      	b.n	80044c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	8979      	ldrh	r1, [r7, #10]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fac2 	bl	8004a44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d19a      	bne.n	8004400 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f994 	bl	80047fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e01a      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2220      	movs	r2, #32
 80044e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_I2C_Mem_Read+0x230>)
 80044f2:	400b      	ands	r3, r1
 80044f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	80002400 	.word	0x80002400
 8004520:	fe00e800 	.word	0xfe00e800

08004524 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	4603      	mov	r3, r0
 8004534:	817b      	strh	r3, [r7, #10]
 8004536:	460b      	mov	r3, r1
 8004538:	813b      	strh	r3, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	8979      	ldrh	r1, [r7, #10]
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <I2C_RequestMemoryWrite+0xa4>)
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fa79 	bl	8004a44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	69b9      	ldr	r1, [r7, #24]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f909 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e02c      	b.n	80045c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
 8004576:	e015      	b.n	80045a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004578:	893b      	ldrh	r3, [r7, #8]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	b29b      	uxth	r3, r3
 800457e:	b2da      	uxtb	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f8ef 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e012      	b.n	80045c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800459a:	893b      	ldrh	r3, [r7, #8]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f884 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	80002000 	.word	0x80002000

080045cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	817b      	strh	r3, [r7, #10]
 80045de:	460b      	mov	r3, r1
 80045e0:	813b      	strh	r3, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	8979      	ldrh	r1, [r7, #10]
 80045ec:	4b20      	ldr	r3, [pc, #128]	; (8004670 <I2C_RequestMemoryRead+0xa4>)
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fa26 	bl	8004a44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	69b9      	ldr	r1, [r7, #24]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f8b6 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e02c      	b.n	8004666 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004612:	893b      	ldrh	r3, [r7, #8]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
 800461c:	e015      	b.n	800464a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800461e:	893b      	ldrh	r3, [r7, #8]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	b29b      	uxth	r3, r3
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f89c 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e012      	b.n	8004666 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004640:	893b      	ldrh	r3, [r7, #8]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2200      	movs	r2, #0
 8004652:	2140      	movs	r1, #64	; 0x40
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f831 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	80002000 	.word	0x80002000

08004674 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d103      	bne.n	8004692 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d007      	beq.n	80046b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	619a      	str	r2, [r3, #24]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046cc:	e03b      	b.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f8d6 	bl	8004884 <I2C_IsErrorOccurred>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e041      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e8:	d02d      	beq.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fe ffed 	bl	80036c8 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d122      	bne.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	429a      	cmp	r2, r3
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	429a      	cmp	r2, r3
 800471c:	d113      	bne.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	f043 0220 	orr.w	r2, r3, #32
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e00f      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d0b4      	beq.n	80046ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800477a:	e033      	b.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f87f 	bl	8004884 <I2C_IsErrorOccurred>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e031      	b.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004796:	d025      	beq.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004798:	f7fe ff96 	bl	80036c8 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11a      	bne.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d013      	beq.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e007      	b.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d1c4      	bne.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004808:	e02f      	b.n	800486a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f838 	bl	8004884 <I2C_IsErrorOccurred>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e02d      	b.n	800487a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fe ff53 	bl	80036c8 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11a      	bne.n	800486a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b20      	cmp	r3, #32
 8004840:	d013      	beq.n	800486a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b20      	cmp	r3, #32
 8004876:	d1c8      	bne.n	800480a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d068      	beq.n	8004982 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2210      	movs	r2, #16
 80048b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048b8:	e049      	b.n	800494e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c0:	d045      	beq.n	800494e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe ff01 	bl	80036c8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_IsErrorOccurred+0x54>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d13a      	bne.n	800494e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fa:	d121      	bne.n	8004940 <I2C_IsErrorOccurred+0xbc>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004902:	d01d      	beq.n	8004940 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	2b20      	cmp	r3, #32
 8004908:	d01a      	beq.n	8004940 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004918:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800491a:	f7fe fed5 	bl	80036c8 <HAL_GetTick>
 800491e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004920:	e00e      	b.n	8004940 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004922:	f7fe fed1 	bl	80036c8 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b19      	cmp	r3, #25
 800492e:	d907      	bls.n	8004940 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0320 	orr.w	r3, r3, #32
 8004936:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800493e:	e006      	b.n	800494e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b20      	cmp	r3, #32
 800494c:	d1e9      	bne.n	8004922 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b20      	cmp	r3, #32
 800495a:	d003      	beq.n	8004964 <I2C_IsErrorOccurred+0xe0>
 800495c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0aa      	beq.n	80048ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004968:	2b00      	cmp	r3, #0
 800496a:	d103      	bne.n	8004974 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2220      	movs	r2, #32
 8004972:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01c      	beq.n	8004a32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fe3b 	bl	8004674 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <I2C_IsErrorOccurred+0x1bc>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3728      	adds	r7, #40	; 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	fe00e800 	.word	0xfe00e800

08004a44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	817b      	strh	r3, [r7, #10]
 8004a52:	4613      	mov	r3, r2
 8004a54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a5c:	7a7b      	ldrb	r3, [r7, #9]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	0d5b      	lsrs	r3, r3, #21
 8004a7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <I2C_TransferConfig+0x60>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	43db      	mvns	r3, r3
 8004a88:	ea02 0103 	and.w	r1, r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	03ff63ff 	.word	0x03ff63ff

08004aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d138      	bne.n	8004b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e032      	b.n	8004b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2224      	movs	r2, #36	; 0x24
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d139      	bne.n	8004bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e033      	b.n	8004bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2224      	movs	r2, #36	; 0x24
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0c0      	b.n	8004d6a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f00c fba3 	bl	8011348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2203      	movs	r2, #3
 8004c06:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f004 fceb 	bl	80095ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]
 8004c18:	e03e      	b.n	8004c98 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c1a:	7bfa      	ldrb	r2, [r7, #15]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	440b      	add	r3, r1
 8004c28:	3311      	adds	r3, #17
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	440b      	add	r3, r1
 8004c50:	3313      	adds	r3, #19
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	3320      	adds	r3, #32
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	440b      	add	r3, r1
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	3301      	adds	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	791b      	ldrb	r3, [r3, #4]
 8004c9c:	7bfa      	ldrb	r2, [r7, #15]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d3bb      	bcc.n	8004c1a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
 8004ca6:	e044      	b.n	8004d32 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	440b      	add	r3, r1
 8004cb6:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	440b      	add	r3, r1
 8004ccc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	440b      	add	r3, r1
 8004ce2:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	440b      	add	r3, r1
 8004d24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	791b      	ldrb	r3, [r3, #4]
 8004d36:	7bfa      	ldrb	r2, [r7, #15]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d3b5      	bcc.n	8004ca8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d48:	f004 fc6a 	bl	8009620 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7a9b      	ldrb	r3, [r3, #10]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d102      	bne.n	8004d68 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fc41 	bl	80065ea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_PCD_Start+0x16>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e012      	b.n	8004dae <HAL_PCD_Start+0x3c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f004 fc11 	bl	80095bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f006 fed1 	bl	800bb46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f006 fed6 	bl	800bb74 <USB_ReadInterrupts>
 8004dc8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb04 	bl	80053e2 <PCD_EP_ISR_Handler>

    return;
 8004dda:	e110      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d013      	beq.n	8004e0e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f00c fb33 	bl	801146a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004e04:	2100      	movs	r1, #0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8fc 	bl	8005004 <HAL_PCD_SetAddress>

    return;
 8004e0c:	e0f7      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004e30:	e0e5      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004e54:	e0d3      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d034      	beq.n	8004eca <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0204 	bic.w	r2, r2, #4
 8004e72:	b292      	uxth	r2, r2
 8004e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0208 	bic.w	r2, r2, #8
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f00c fcd3 	bl	8011850 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f00c fb16 	bl	80114dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ec8:	e099      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d027      	beq.n	8004f24 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004efe:	b292      	uxth	r2, r2
 8004f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0204 	orr.w	r2, r2, #4
 8004f16:	b292      	uxth	r2, r2
 8004f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f00c fac3 	bl	80114a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004f22:	e06c      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d040      	beq.n	8004fb0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f40:	b292      	uxth	r2, r2
 8004f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d12b      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0204 	orr.w	r2, r2, #4
 8004f62:	b292      	uxth	r2, r2
 8004f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	089b      	lsrs	r3, r3, #2
 8004f94:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f00c fc55 	bl	8011850 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004fa6:	e02a      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f00c fa7d 	bl	80114a8 <HAL_PCD_SuspendCallback>
    return;
 8004fae:	e026      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00f      	beq.n	8004fda <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f00c fa3b 	bl	801144e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004fd8:	e011      	b.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00c      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ffc:	bf00      	nop
  }
}
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_PCD_SetAddress+0x1a>
 800501a:	2302      	movs	r3, #2
 800501c:	e012      	b.n	8005044 <HAL_PCD_SetAddress+0x40>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f006 fd72 	bl	800bb1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	4608      	mov	r0, r1
 8005056:	4611      	mov	r1, r2
 8005058:	461a      	mov	r2, r3
 800505a:	4603      	mov	r3, r0
 800505c:	70fb      	strb	r3, [r7, #3]
 800505e:	460b      	mov	r3, r1
 8005060:	803b      	strh	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800506a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506e:	2b00      	cmp	r3, #0
 8005070:	da0e      	bge.n	8005090 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	f003 0207 	and.w	r2, r3, #7
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3310      	adds	r3, #16
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	705a      	strb	r2, [r3, #1]
 800508e:	e00e      	b.n	80050ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050ba:	883a      	ldrh	r2, [r7, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	78ba      	ldrb	r2, [r7, #2]
 80050c4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050c6:	78bb      	ldrb	r3, [r7, #2]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d102      	bne.n	80050d2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_PCD_EP_Open+0x94>
 80050dc:	2302      	movs	r3, #2
 80050de:	e00e      	b.n	80050fe <HAL_PCD_EP_Open+0xb2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f004 fab4 	bl	800965c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80050fc:	7afb      	ldrb	r3, [r7, #11]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	da0e      	bge.n	8005138 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	f003 0207 	and.w	r2, r3, #7
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	3310      	adds	r3, #16
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	705a      	strb	r2, [r3, #1]
 8005136:	e00e      	b.n	8005156 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	f003 0207 	and.w	r2, r3, #7
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_PCD_EP_Close+0x6a>
 800516c:	2302      	movs	r3, #2
 800516e:	e00e      	b.n	800518e <HAL_PCD_EP_Close+0x88>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	4618      	mov	r0, r3
 8005180:	f004 fe30 	bl	8009de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	460b      	mov	r3, r1
 80051a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a6:	7afb      	ldrb	r3, [r7, #11]
 80051a8:	f003 0207 	and.w	r2, r3, #7
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d6:	7afb      	ldrb	r3, [r7, #11]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6979      	ldr	r1, [r7, #20]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f004 ffe8 	bl	800a1be <USB_EPStartXfer>

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	f003 0207 	and.w	r2, r3, #7
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	440b      	add	r3, r1
 8005216:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	460b      	mov	r3, r1
 8005236:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	f003 0207 	and.w	r2, r3, #7
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	3310      	adds	r3, #16
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2201      	movs	r2, #1
 8005272:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005274:	7afb      	ldrb	r3, [r7, #11]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	b2da      	uxtb	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6979      	ldr	r1, [r7, #20]
 8005286:	4618      	mov	r0, r3
 8005288:	f004 ff99 	bl	800a1be <USB_EPStartXfer>

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	7912      	ldrb	r2, [r2, #4]
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e03e      	b.n	8005332 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	da0e      	bge.n	80052da <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	f003 0207 	and.w	r2, r3, #7
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	3310      	adds	r3, #16
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4413      	add	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	705a      	strb	r2, [r3, #1]
 80052d8:	e00c      	b.n	80052f4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4413      	add	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_PCD_EP_SetStall+0x7e>
 8005310:	2302      	movs	r3, #2
 8005312:	e00e      	b.n	8005332 <HAL_PCD_EP_SetStall+0x9c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	4618      	mov	r0, r3
 8005324:	f006 fafc 	bl	800b920 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	7912      	ldrb	r2, [r2, #4]
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e040      	b.n	80053da <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800535c:	2b00      	cmp	r3, #0
 800535e:	da0e      	bge.n	800537e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	f003 0207 	and.w	r2, r3, #7
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	3310      	adds	r3, #16
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4413      	add	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	705a      	strb	r2, [r3, #1]
 800537c:	e00e      	b.n	800539c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	f003 0207 	and.w	r2, r3, #7
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4413      	add	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_PCD_EP_ClrStall+0x82>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e00e      	b.n	80053da <HAL_PCD_EP_ClrStall+0xa0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f006 faf9 	bl	800b9c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b096      	sub	sp, #88	; 0x58
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053ea:	e3ae      	b.n	8005b4a <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80053f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005406:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 8170 	bne.w	80056f0 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d14d      	bne.n	80054b8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542c:	81fb      	strh	r3, [r7, #14]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	89fb      	ldrh	r3, [r7, #14]
 8005434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3310      	adds	r3, #16
 8005444:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544e:	b29b      	uxth	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	4413      	add	r3, r2
 8005460:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800546a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800546e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	441a      	add	r2, r3
 8005478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800547c:	2100      	movs	r1, #0
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f00b ffcb 	bl	801141a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	7b1b      	ldrb	r3, [r3, #12]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 835d 	beq.w	8005b4a <PCD_EP_ISR_Handler+0x768>
 8005490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 8358 	bne.w	8005b4a <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7b1b      	ldrb	r3, [r3, #12]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	b292      	uxth	r2, r2
 80054ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	731a      	strb	r2, [r3, #12]
 80054b6:	e348      	b.n	8005b4a <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054be:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d032      	beq.n	800553c <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4413      	add	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	4413      	add	r3, r2
 80054f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800550a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800550c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800550e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005510:	b29b      	uxth	r3, r3
 8005512:	f006 fb81 	bl	800bc18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29a      	uxth	r2, r3
 800551e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005522:	4013      	ands	r3, r2
 8005524:	823b      	strh	r3, [r7, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	8a3a      	ldrh	r2, [r7, #16]
 800552c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005530:	b292      	uxth	r2, r2
 8005532:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f00b ff43 	bl	80113c0 <HAL_PCD_SetupStageCallback>
 800553a:	e306      	b.n	8005b4a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800553c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005540:	2b00      	cmp	r3, #0
 8005542:	f280 8302 	bge.w	8005b4a <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29a      	uxth	r2, r3
 800554e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005552:	4013      	ands	r3, r2
 8005554:	83fb      	strh	r3, [r7, #30]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	8bfa      	ldrh	r2, [r7, #30]
 800555c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005560:	b292      	uxth	r2, r2
 8005562:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	4413      	add	r3, r2
 800557e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800558c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <PCD_EP_ISR_Handler+0x1e6>
 8005594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a2:	6959      	ldr	r1, [r3, #20]
 80055a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80055a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f006 fb33 	bl	800bc18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80055b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	441a      	add	r2, r3
 80055bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055c0:	2100      	movs	r1, #0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f00b ff0e 	bl	80113e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80055d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 82b5 	bne.w	8005b4a <PCD_EP_ISR_Handler+0x768>
 80055e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ec:	f000 82ad 	beq.w	8005b4a <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	4413      	add	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561a:	b29a      	uxth	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b3e      	cmp	r3, #62	; 0x3e
 8005626:	d91d      	bls.n	8005664 <PCD_EP_ISR_Handler+0x282>
 8005628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
 8005630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <PCD_EP_ISR_Handler+0x260>
 800563c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563e:	3b01      	subs	r3, #1
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29a      	uxth	r2, r3
 8005648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564a:	b29b      	uxth	r3, r3
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	b29b      	uxth	r3, r3
 8005650:	4313      	orrs	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565c:	b29a      	uxth	r2, r3
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	e026      	b.n	80056b2 <PCD_EP_ISR_Handler+0x2d0>
 8005664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <PCD_EP_ISR_Handler+0x2a0>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567a:	b29a      	uxth	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e017      	b.n	80056b2 <PCD_EP_ISR_Handler+0x2d0>
 8005682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	647b      	str	r3, [r7, #68]	; 0x44
 800568a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <PCD_EP_ISR_Handler+0x2ba>
 8005696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005698:	3301      	adds	r3, #1
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	827b      	strh	r3, [r7, #18]
 80056c4:	8a7b      	ldrh	r3, [r7, #18]
 80056c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056ca:	827b      	strh	r3, [r7, #18]
 80056cc:	8a7b      	ldrh	r3, [r7, #18]
 80056ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056d2:	827b      	strh	r3, [r7, #18]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	8a7b      	ldrh	r3, [r7, #18]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]
 80056ee:	e22c      	b.n	8005b4a <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005704:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005708:	2b00      	cmp	r3, #0
 800570a:	f280 80f6 	bge.w	80058fa <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29a      	uxth	r2, r3
 8005720:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005724:	4013      	ands	r3, r2
 8005726:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800573c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005740:	b292      	uxth	r2, r2
 8005742:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005744:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4413      	add	r3, r2
 8005758:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800575a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800575c:	7b1b      	ldrb	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d123      	bne.n	80057aa <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4413      	add	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	4413      	add	r3, r2
 800577c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005786:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800578a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 808e 	beq.w	80058b0 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579a:	6959      	ldr	r1, [r3, #20]
 800579c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579e:	88da      	ldrh	r2, [r3, #6]
 80057a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80057a4:	f006 fa38 	bl	800bc18 <USB_ReadPMA>
 80057a8:	e082      	b.n	80058b0 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80057aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ac:	78db      	ldrb	r3, [r3, #3]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d10a      	bne.n	80057c8 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80057b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80057b6:	461a      	mov	r2, r3
 80057b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9d3 	bl	8005b66 <HAL_PCD_EP_DB_Receive>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80057c6:	e073      	b.n	80058b0 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80057f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005808:	b29b      	uxth	r3, r3
 800580a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d022      	beq.n	800586c <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582e:	b29b      	uxth	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	4413      	add	r3, r2
 8005840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800584e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02c      	beq.n	80058b0 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800585c:	6959      	ldr	r1, [r3, #20]
 800585e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005860:	891a      	ldrh	r2, [r3, #8]
 8005862:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005866:	f006 f9d7 	bl	800bc18 <USB_ReadPMA>
 800586a:	e021      	b.n	80058b0 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	4413      	add	r3, r2
 8005886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005890:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005894:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a2:	6959      	ldr	r1, [r3, #20]
 80058a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a6:	895a      	ldrh	r2, [r3, #10]
 80058a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058ac:	f006 f9b4 	bl	800bc18 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80058b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058b8:	441a      	add	r2, r3
 80058ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80058be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058c6:	441a      	add	r2, r3
 80058c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80058cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <PCD_EP_ISR_Handler+0x4fe>
 80058d4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80058d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d206      	bcs.n	80058ee <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80058e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f00b fd7c 	bl	80113e4 <HAL_PCD_DataOutStageCallback>
 80058ec:	e005      	b.n	80058fa <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f4:	4618      	mov	r0, r3
 80058f6:	f004 fc62 	bl	800a1be <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80058fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8121 	beq.w	8005b4a <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8005908:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	3310      	adds	r3, #16
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800594c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005954:	b29b      	uxth	r3, r3
 8005956:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800595a:	78db      	ldrb	r3, [r3, #3]
 800595c:	2b01      	cmp	r3, #1
 800595e:	f040 80a2 	bne.w	8005aa6 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8005962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005964:	2200      	movs	r2, #0
 8005966:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596a:	7b1b      	ldrb	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8093 	beq.w	8005a98 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005972:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d046      	beq.n	8005a0c <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800597e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d126      	bne.n	80059d4 <PCD_EP_ISR_Handler+0x5f2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	4413      	add	r3, r2
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	00da      	lsls	r2, r3, #3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e061      	b.n	8005a98 <PCD_EP_ISR_Handler+0x6b6>
 80059d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d15d      	bne.n	8005a98 <PCD_EP_ISR_Handler+0x6b6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	4413      	add	r3, r2
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	00da      	lsls	r2, r3, #3
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2200      	movs	r2, #0
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	e045      	b.n	8005a98 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d126      	bne.n	8005a68 <PCD_EP_ISR_Handler+0x686>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	4413      	add	r3, r2
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	00da      	lsls	r2, r3, #3
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	e017      	b.n	8005a98 <PCD_EP_ISR_Handler+0x6b6>
 8005a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d113      	bne.n	8005a98 <PCD_EP_ISR_Handler+0x6b6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7e:	4413      	add	r3, r2
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	00da      	lsls	r2, r3, #3
 8005a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	2200      	movs	r2, #0
 8005a96:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f00b fcbb 	bl	801141a <HAL_PCD_DataInStageCallback>
 8005aa4:	e051      	b.n	8005b4a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005aa6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d144      	bne.n	8005b3c <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	4413      	add	r3, r2
 8005acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d907      	bls.n	8005af6 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8005ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af2:	619a      	str	r2, [r3, #24]
 8005af4:	e002      	b.n	8005afc <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af8:	2200      	movs	r2, #0
 8005afa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f00b fc85 	bl	801141a <HAL_PCD_DataInStageCallback>
 8005b10:	e01b      	b.n	8005b4a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b1a:	441a      	add	r2, r3
 8005b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b28:	441a      	add	r2, r3
 8005b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b2c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b34:	4618      	mov	r0, r3
 8005b36:	f004 fb42 	bl	800a1be <USB_EPStartXfer>
 8005b3a:	e006      	b.n	8005b4a <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005b3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b40:	461a      	mov	r2, r3
 8005b42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f917 	bl	8005d78 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	b21b      	sxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f6ff ac48 	blt.w	80053ec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3758      	adds	r7, #88	; 0x58
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b088      	sub	sp, #32
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d07c      	beq.n	8005c78 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4413      	add	r3, r2
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	8b7b      	ldrh	r3, [r7, #26]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d306      	bcc.n	8005bbc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	8b7b      	ldrh	r3, [r7, #26]
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	619a      	str	r2, [r3, #24]
 8005bba:	e002      	b.n	8005bc2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d123      	bne.n	8005c12 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	833b      	strh	r3, [r7, #24]
 8005be6:	8b3b      	ldrh	r3, [r7, #24]
 8005be8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bec:	833b      	strh	r3, [r7, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	8b3b      	ldrh	r3, [r7, #24]
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01f      	beq.n	8005c5c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	82fb      	strh	r3, [r7, #22]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	8afb      	ldrh	r3, [r7, #22]
 8005c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c5c:	8b7b      	ldrh	r3, [r7, #26]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8085 	beq.w	8005d6e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6959      	ldr	r1, [r3, #20]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	891a      	ldrh	r2, [r3, #8]
 8005c70:	8b7b      	ldrh	r3, [r7, #26]
 8005c72:	f005 ffd1 	bl	800bc18 <USB_ReadPMA>
 8005c76:	e07a      	b.n	8005d6e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	8b7b      	ldrh	r3, [r7, #26]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d306      	bcc.n	8005cb6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	8b7b      	ldrh	r3, [r7, #26]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	619a      	str	r2, [r3, #24]
 8005cb4:	e002      	b.n	8005cbc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d123      	bne.n	8005d0c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	83fb      	strh	r3, [r7, #30]
 8005ce0:	8bfb      	ldrh	r3, [r7, #30]
 8005ce2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ce6:	83fb      	strh	r3, [r7, #30]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	8bfb      	ldrh	r3, [r7, #30]
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11f      	bne.n	8005d56 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d30:	83bb      	strh	r3, [r7, #28]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8bbb      	ldrh	r3, [r7, #28]
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d56:	8b7b      	ldrh	r3, [r7, #26]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6959      	ldr	r1, [r3, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	895a      	ldrh	r2, [r3, #10]
 8005d68:	8b7b      	ldrh	r3, [r7, #26]
 8005d6a:	f005 ff55 	bl	800bc18 <USB_ReadPMA>
    }
  }

  return count;
 8005d6e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b0a4      	sub	sp, #144	; 0x90
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 81db 	beq.w	8006148 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	4413      	add	r3, r2
 8005dac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005db6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d907      	bls.n	8005dd6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	619a      	str	r2, [r3, #24]
 8005dd4:	e002      	b.n	8005ddc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 80b9 	bne.w	8005f58 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d126      	bne.n	8005e3c <HAL_PCD_EP_DB_Transmit+0xc4>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	4413      	add	r3, r2
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	00da      	lsls	r2, r3, #3
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	4413      	add	r3, r2
 8005e10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	e01a      	b.n	8005e72 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d116      	bne.n	8005e72 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e58:	4413      	add	r3, r2
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	00da      	lsls	r2, r3, #3
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	4413      	add	r3, r2
 8005e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d126      	bne.n	8005ece <HAL_PCD_EP_DB_Transmit+0x156>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	61fb      	str	r3, [r7, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00da      	lsls	r2, r3, #3
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e017      	b.n	8005efe <HAL_PCD_EP_DB_Transmit+0x186>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d113      	bne.n	8005efe <HAL_PCD_EP_DB_Transmit+0x186>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	4413      	add	r3, r2
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	00da      	lsls	r2, r3, #3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2200      	movs	r2, #0
 8005efc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f00b fa88 	bl	801141a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 82fa 	beq.w	800650a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	82fb      	strh	r3, [r7, #22]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	8afb      	ldrh	r3, [r7, #22]
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
 8005f56:	e2d8      	b.n	800650a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d021      	beq.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	f040 82ac 	bne.w	800650a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005fba:	441a      	add	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005fc8:	441a      	add	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6a1a      	ldr	r2, [r3, #32]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d30b      	bcc.n	8005ff2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
 8005fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fea:	1ad2      	subs	r2, r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	621a      	str	r2, [r3, #32]
 8005ff0:	e017      	b.n	8006022 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005ffa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800600a:	e00a      	b.n	8006022 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d165      	bne.n	80060f6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006038:	b29b      	uxth	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603e:	4413      	add	r3, r2
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	00da      	lsls	r2, r3, #3
 8006048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604a:	4413      	add	r3, r2
 800604c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006050:	63bb      	str	r3, [r7, #56]	; 0x38
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605c:	b29a      	uxth	r2, r3
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006066:	2b3e      	cmp	r3, #62	; 0x3e
 8006068:	d91d      	bls.n	80060a6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800606a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	64bb      	str	r3, [r7, #72]	; 0x48
 8006072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <HAL_PCD_EP_DB_Transmit+0x30c>
 800607e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006080:	3b01      	subs	r3, #1
 8006082:	64bb      	str	r3, [r7, #72]	; 0x48
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29a      	uxth	r2, r3
 800608a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	b29b      	uxth	r3, r3
 8006096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609e:	b29a      	uxth	r2, r3
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	e044      	b.n	8006130 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80060a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e035      	b.n	8006130 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80060c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80060cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_PCD_EP_DB_Transmit+0x366>
 80060d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060da:	3301      	adds	r3, #1
 80060dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	029b      	lsls	r3, r3, #10
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	e01c      	b.n	8006130 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d118      	bne.n	8006130 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	647b      	str	r3, [r7, #68]	; 0x44
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006112:	4413      	add	r3, r2
 8006114:	647b      	str	r3, [r7, #68]	; 0x44
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	00da      	lsls	r2, r3, #3
 800611c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611e:	4413      	add	r3, r2
 8006120:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006124:	643b      	str	r3, [r7, #64]	; 0x40
 8006126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800612a:	b29a      	uxth	r2, r3
 800612c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6959      	ldr	r1, [r3, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	891a      	ldrh	r2, [r3, #8]
 800613c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006140:	b29b      	uxth	r3, r3
 8006142:	f005 fd27 	bl	800bb94 <USB_WritePMA>
 8006146:	e1e0      	b.n	800650a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006150:	b29b      	uxth	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4413      	add	r3, r2
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	4413      	add	r3, r2
 8006162:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800616c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006178:	429a      	cmp	r2, r3
 800617a:	d307      	bcc.n	800618c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006184:	1ad2      	subs	r2, r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	619a      	str	r2, [r3, #24]
 800618a:	e002      	b.n	8006192 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 80c0 	bne.w	800631c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d126      	bne.n	80061f2 <HAL_PCD_EP_DB_Transmit+0x47a>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061b8:	4413      	add	r3, r2
 80061ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00da      	lsls	r2, r3, #3
 80061c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061c4:	4413      	add	r3, r2
 80061c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80061cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e01a      	b.n	8006228 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d116      	bne.n	8006228 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	667b      	str	r3, [r7, #100]	; 0x64
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006208:	b29b      	uxth	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800620e:	4413      	add	r3, r2
 8006210:	667b      	str	r3, [r7, #100]	; 0x64
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	00da      	lsls	r2, r3, #3
 8006218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800621a:	4413      	add	r3, r2
 800621c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006220:	663b      	str	r3, [r7, #96]	; 0x60
 8006222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006224:	2200      	movs	r2, #0
 8006226:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	677b      	str	r3, [r7, #116]	; 0x74
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d12b      	bne.n	800628e <HAL_PCD_EP_DB_Transmit+0x516>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006244:	b29b      	uxth	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624a:	4413      	add	r3, r2
 800624c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	00da      	lsls	r2, r3, #3
 8006254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006256:	4413      	add	r3, r2
 8006258:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800625c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e017      	b.n	80062be <HAL_PCD_EP_DB_Transmit+0x546>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d113      	bne.n	80062be <HAL_PCD_EP_DB_Transmit+0x546>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a4:	4413      	add	r3, r2
 80062a6:	677b      	str	r3, [r7, #116]	; 0x74
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	00da      	lsls	r2, r3, #3
 80062ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062b6:	673b      	str	r3, [r7, #112]	; 0x70
 80062b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ba:	2200      	movs	r2, #0
 80062bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	4619      	mov	r1, r3
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f00b f8a8 	bl	801141a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 811a 	bne.w	800650a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]
 800631a:	e0f6      	b.n	800650a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d121      	bne.n	800636a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800635a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006366:	b29b      	uxth	r3, r3
 8006368:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006370:	2b01      	cmp	r3, #1
 8006372:	f040 80ca 	bne.w	800650a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800637e:	441a      	add	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800638c:	441a      	add	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	429a      	cmp	r2, r3
 800639c:	d30b      	bcc.n	80063b6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6a1a      	ldr	r2, [r3, #32]
 80063aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ae:	1ad2      	subs	r2, r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	621a      	str	r2, [r3, #32]
 80063b4:	e017      	b.n	80063e6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80063be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80063ce:	e00a      	b.n	80063e6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	657b      	str	r3, [r7, #84]	; 0x54
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d165      	bne.n	80064c0 <HAL_PCD_EP_DB_Transmit+0x748>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006402:	b29b      	uxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006408:	4413      	add	r3, r2
 800640a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	00da      	lsls	r2, r3, #3
 8006412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006414:	4413      	add	r3, r2
 8006416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800641a:	65bb      	str	r3, [r7, #88]	; 0x58
 800641c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006426:	b29a      	uxth	r2, r3
 8006428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006430:	2b3e      	cmp	r3, #62	; 0x3e
 8006432:	d91d      	bls.n	8006470 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	66bb      	str	r3, [r7, #104]	; 0x68
 800643c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800644a:	3b01      	subs	r3, #1
 800644c:	66bb      	str	r3, [r7, #104]	; 0x68
 800644e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29a      	uxth	r2, r3
 8006454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006456:	b29b      	uxth	r3, r3
 8006458:	029b      	lsls	r3, r3, #10
 800645a:	b29b      	uxth	r3, r3
 800645c:	4313      	orrs	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29a      	uxth	r2, r3
 800646a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	e041      	b.n	80064f4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <HAL_PCD_EP_DB_Transmit+0x716>
 8006478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006486:	b29a      	uxth	r2, r3
 8006488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e032      	b.n	80064f4 <HAL_PCD_EP_DB_Transmit+0x77c>
 800648e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	66bb      	str	r3, [r7, #104]	; 0x68
 8006496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_PCD_EP_DB_Transmit+0x730>
 80064a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064a4:	3301      	adds	r3, #1
 80064a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	4313      	orrs	r3, r2
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e019      	b.n	80064f4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d115      	bne.n	80064f4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d6:	4413      	add	r3, r2
 80064d8:	657b      	str	r3, [r7, #84]	; 0x54
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	00da      	lsls	r2, r3, #3
 80064e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e2:	4413      	add	r3, r2
 80064e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
 80064ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6959      	ldr	r1, [r3, #20]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	895a      	ldrh	r2, [r3, #10]
 8006500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006504:	b29b      	uxth	r3, r3
 8006506:	f005 fb45 	bl	800bb94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006524:	82bb      	strh	r3, [r7, #20]
 8006526:	8abb      	ldrh	r3, [r7, #20]
 8006528:	f083 0310 	eor.w	r3, r3, #16
 800652c:	82bb      	strh	r3, [r7, #20]
 800652e:	8abb      	ldrh	r3, [r7, #20]
 8006530:	f083 0320 	eor.w	r3, r3, #32
 8006534:	82bb      	strh	r3, [r7, #20]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	441a      	add	r2, r3
 8006544:	8abb      	ldrh	r3, [r7, #20]
 8006546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006556:	b29b      	uxth	r3, r3
 8006558:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3790      	adds	r7, #144	; 0x90
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	817b      	strh	r3, [r7, #10]
 8006572:	4613      	mov	r3, r2
 8006574:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	f003 0207 	and.w	r2, r3, #7
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	3310      	adds	r3, #16
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e009      	b.n	80065ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800659a:	897a      	ldrh	r2, [r7, #10]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80065ae:	893b      	ldrh	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d107      	bne.n	80065c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2200      	movs	r2, #0
 80065b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	b29a      	uxth	r2, r3
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	80da      	strh	r2, [r3, #6]
 80065c2:	e00b      	b.n	80065dc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2201      	movs	r2, #1
 80065c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800660e:	b29b      	uxth	r3, r3
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006622:	b29b      	uxth	r3, r3
 8006624:	f043 0302 	orr.w	r3, r3, #2
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d141      	bne.n	80066d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800664e:	4b4b      	ldr	r3, [pc, #300]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665a:	d131      	bne.n	80066c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800665c:	4b47      	ldr	r3, [pc, #284]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006662:	4a46      	ldr	r2, [pc, #280]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800666c:	4b43      	ldr	r3, [pc, #268]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006674:	4a41      	ldr	r2, [pc, #260]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800667a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800667c:	4b40      	ldr	r3, [pc, #256]	; (8006780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2232      	movs	r2, #50	; 0x32
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	4a3f      	ldr	r2, [pc, #252]	; (8006784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	0c9b      	lsrs	r3, r3, #18
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006692:	e002      	b.n	800669a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3b01      	subs	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800669a:	4b38      	ldr	r3, [pc, #224]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a6:	d102      	bne.n	80066ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f2      	bne.n	8006694 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ae:	4b33      	ldr	r3, [pc, #204]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ba:	d158      	bne.n	800676e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e057      	b.n	8006770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066c0:	4b2e      	ldr	r3, [pc, #184]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c6:	4a2d      	ldr	r2, [pc, #180]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066d0:	e04d      	b.n	800676e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d8:	d141      	bne.n	800675e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066da:	4b28      	ldr	r3, [pc, #160]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e6:	d131      	bne.n	800674c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066e8:	4b24      	ldr	r3, [pc, #144]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ee:	4a23      	ldr	r2, [pc, #140]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066f8:	4b20      	ldr	r3, [pc, #128]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006700:	4a1e      	ldr	r2, [pc, #120]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006708:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2232      	movs	r2, #50	; 0x32
 800670e:	fb02 f303 	mul.w	r3, r2, r3
 8006712:	4a1c      	ldr	r2, [pc, #112]	; (8006784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006714:	fba2 2303 	umull	r2, r3, r2, r3
 8006718:	0c9b      	lsrs	r3, r3, #18
 800671a:	3301      	adds	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800671e:	e002      	b.n	8006726 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3b01      	subs	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006732:	d102      	bne.n	800673a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f2      	bne.n	8006720 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d112      	bne.n	800676e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e011      	b.n	8006770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800674e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006752:	4a0a      	ldr	r2, [pc, #40]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800675c:	e007      	b.n	800676e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006766:	4a05      	ldr	r2, [pc, #20]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800676c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40007000 	.word	0x40007000
 8006780:	20000000 	.word	0x20000000
 8006784:	431bde83 	.word	0x431bde83

08006788 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006796:	6093      	str	r3, [r2, #8]
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40007000 	.word	0x40007000

080067a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e2fe      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d075      	beq.n	80068b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067c6:	4b97      	ldr	r3, [pc, #604]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 030c 	and.w	r3, r3, #12
 80067ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067d0:	4b94      	ldr	r3, [pc, #592]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b0c      	cmp	r3, #12
 80067de:	d102      	bne.n	80067e6 <HAL_RCC_OscConfig+0x3e>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d002      	beq.n	80067ec <HAL_RCC_OscConfig+0x44>
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d10b      	bne.n	8006804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ec:	4b8d      	ldr	r3, [pc, #564]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05b      	beq.n	80068b0 <HAL_RCC_OscConfig+0x108>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d157      	bne.n	80068b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e2d9      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680c:	d106      	bne.n	800681c <HAL_RCC_OscConfig+0x74>
 800680e:	4b85      	ldr	r3, [pc, #532]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a84      	ldr	r2, [pc, #528]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e01d      	b.n	8006858 <HAL_RCC_OscConfig+0xb0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006824:	d10c      	bne.n	8006840 <HAL_RCC_OscConfig+0x98>
 8006826:	4b7f      	ldr	r3, [pc, #508]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7e      	ldr	r2, [pc, #504]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800682c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	4b7c      	ldr	r3, [pc, #496]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a7b      	ldr	r2, [pc, #492]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e00b      	b.n	8006858 <HAL_RCC_OscConfig+0xb0>
 8006840:	4b78      	ldr	r3, [pc, #480]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a77      	ldr	r2, [pc, #476]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	4b75      	ldr	r3, [pc, #468]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a74      	ldr	r2, [pc, #464]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d013      	beq.n	8006888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fc ff32 	bl	80036c8 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006868:	f7fc ff2e 	bl	80036c8 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b64      	cmp	r3, #100	; 0x64
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e29e      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800687a:	4b6a      	ldr	r3, [pc, #424]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0xc0>
 8006886:	e014      	b.n	80068b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fc ff1e 	bl	80036c8 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006890:	f7fc ff1a 	bl	80036c8 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	; 0x64
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e28a      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068a2:	4b60      	ldr	r3, [pc, #384]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0xe8>
 80068ae:	e000      	b.n	80068b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d075      	beq.n	80069aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068be:	4b59      	ldr	r3, [pc, #356]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 030c 	and.w	r3, r3, #12
 80068c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068c8:	4b56      	ldr	r3, [pc, #344]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b0c      	cmp	r3, #12
 80068d6:	d102      	bne.n	80068de <HAL_RCC_OscConfig+0x136>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d002      	beq.n	80068e4 <HAL_RCC_OscConfig+0x13c>
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d11f      	bne.n	8006924 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068e4:	4b4f      	ldr	r3, [pc, #316]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_OscConfig+0x154>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e25d      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fc:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	061b      	lsls	r3, r3, #24
 800690a:	4946      	ldr	r1, [pc, #280]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800690c:	4313      	orrs	r3, r2
 800690e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006910:	4b45      	ldr	r3, [pc, #276]	; (8006a28 <HAL_RCC_OscConfig+0x280>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f7fc fc59 	bl	80031cc <HAL_InitTick>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d043      	beq.n	80069a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e249      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d023      	beq.n	8006974 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800692c:	4b3d      	ldr	r3, [pc, #244]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a3c      	ldr	r2, [pc, #240]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fc fec6 	bl	80036c8 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006940:	f7fc fec2 	bl	80036c8 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e232      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006952:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695e:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	061b      	lsls	r3, r3, #24
 800696c:	492d      	ldr	r1, [pc, #180]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800696e:	4313      	orrs	r3, r2
 8006970:	604b      	str	r3, [r1, #4]
 8006972:	e01a      	b.n	80069aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006974:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800697a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800697e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006980:	f7fc fea2 	bl	80036c8 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006988:	f7fc fe9e 	bl	80036c8 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e20e      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800699a:	4b22      	ldr	r3, [pc, #136]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x1e0>
 80069a6:	e000      	b.n	80069aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d041      	beq.n	8006a3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01c      	beq.n	80069f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069be:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80069c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c4:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80069c6:	f043 0301 	orr.w	r3, r3, #1
 80069ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ce:	f7fc fe7b 	bl	80036c8 <HAL_GetTick>
 80069d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d6:	f7fc fe77 	bl	80036c8 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e1e7      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80069ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ef      	beq.n	80069d6 <HAL_RCC_OscConfig+0x22e>
 80069f6:	e020      	b.n	8006a3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f8:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 80069fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fe:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <HAL_RCC_OscConfig+0x27c>)
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a08:	f7fc fe5e 	bl	80036c8 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a0e:	e00d      	b.n	8006a2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a10:	f7fc fe5a 	bl	80036c8 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d906      	bls.n	8006a2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e1ca      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
 8006a22:	bf00      	nop
 8006a24:	40021000 	.word	0x40021000
 8006a28:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a2c:	4b8c      	ldr	r3, [pc, #560]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1ea      	bne.n	8006a10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80a6 	beq.w	8006b94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a4c:	4b84      	ldr	r3, [pc, #528]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_OscConfig+0x2b4>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_RCC_OscConfig+0x2b6>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a62:	4b7f      	ldr	r3, [pc, #508]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a66:	4a7e      	ldr	r2, [pc, #504]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a6e:	4b7c      	ldr	r3, [pc, #496]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a7e:	4b79      	ldr	r3, [pc, #484]	; (8006c64 <HAL_RCC_OscConfig+0x4bc>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d118      	bne.n	8006abc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a8a:	4b76      	ldr	r3, [pc, #472]	; (8006c64 <HAL_RCC_OscConfig+0x4bc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a75      	ldr	r2, [pc, #468]	; (8006c64 <HAL_RCC_OscConfig+0x4bc>)
 8006a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a96:	f7fc fe17 	bl	80036c8 <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9e:	f7fc fe13 	bl	80036c8 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e183      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ab0:	4b6c      	ldr	r3, [pc, #432]	; (8006c64 <HAL_RCC_OscConfig+0x4bc>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d108      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x32e>
 8006ac4:	4b66      	ldr	r3, [pc, #408]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	4a65      	ldr	r2, [pc, #404]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ad4:	e024      	b.n	8006b20 <HAL_RCC_OscConfig+0x378>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d110      	bne.n	8006b00 <HAL_RCC_OscConfig+0x358>
 8006ade:	4b60      	ldr	r3, [pc, #384]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae4:	4a5e      	ldr	r2, [pc, #376]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006ae6:	f043 0304 	orr.w	r3, r3, #4
 8006aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006aee:	4b5c      	ldr	r3, [pc, #368]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af4:	4a5a      	ldr	r2, [pc, #360]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006afe:	e00f      	b.n	8006b20 <HAL_RCC_OscConfig+0x378>
 8006b00:	4b57      	ldr	r3, [pc, #348]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	4a56      	ldr	r2, [pc, #344]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b10:	4b53      	ldr	r3, [pc, #332]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b16:	4a52      	ldr	r2, [pc, #328]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b18:	f023 0304 	bic.w	r3, r3, #4
 8006b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d016      	beq.n	8006b56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b28:	f7fc fdce 	bl	80036c8 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b30:	f7fc fdca 	bl	80036c8 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e138      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b46:	4b46      	ldr	r3, [pc, #280]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0ed      	beq.n	8006b30 <HAL_RCC_OscConfig+0x388>
 8006b54:	e015      	b.n	8006b82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b56:	f7fc fdb7 	bl	80036c8 <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b5c:	e00a      	b.n	8006b74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5e:	f7fc fdb3 	bl	80036c8 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e121      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b74:	4b3a      	ldr	r3, [pc, #232]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1ed      	bne.n	8006b5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b82:	7ffb      	ldrb	r3, [r7, #31]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d105      	bne.n	8006b94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b88:	4b35      	ldr	r3, [pc, #212]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8c:	4a34      	ldr	r2, [pc, #208]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d03c      	beq.n	8006c1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01c      	beq.n	8006be2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ba8:	4b2d      	ldr	r3, [pc, #180]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bae:	4a2c      	ldr	r2, [pc, #176]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006bb0:	f043 0301 	orr.w	r3, r3, #1
 8006bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb8:	f7fc fd86 	bl	80036c8 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bc0:	f7fc fd82 	bl	80036c8 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e0f2      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bd2:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0ef      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x418>
 8006be0:	e01b      	b.n	8006c1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006be2:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006be8:	4a1d      	ldr	r2, [pc, #116]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf2:	f7fc fd69 	bl	80036c8 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bfa:	f7fc fd65 	bl	80036c8 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0d5      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c0c:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1ef      	bne.n	8006bfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80c9 	beq.w	8006db6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 030c 	and.w	r3, r3, #12
 8006c2c:	2b0c      	cmp	r3, #12
 8006c2e:	f000 8083 	beq.w	8006d38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d15e      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <HAL_RCC_OscConfig+0x4b8>)
 8006c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fc fd3f 	bl	80036c8 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c4c:	e00c      	b.n	8006c68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c4e:	f7fc fd3b 	bl	80036c8 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d905      	bls.n	8006c68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e0ab      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c68:	4b55      	ldr	r3, [pc, #340]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1ec      	bne.n	8006c4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c74:	4b52      	ldr	r3, [pc, #328]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	4b52      	ldr	r3, [pc, #328]	; (8006dc4 <HAL_RCC_OscConfig+0x61c>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6a11      	ldr	r1, [r2, #32]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c84:	3a01      	subs	r2, #1
 8006c86:	0112      	lsls	r2, r2, #4
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006c8e:	0212      	lsls	r2, r2, #8
 8006c90:	4311      	orrs	r1, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c96:	0852      	lsrs	r2, r2, #1
 8006c98:	3a01      	subs	r2, #1
 8006c9a:	0552      	lsls	r2, r2, #21
 8006c9c:	4311      	orrs	r1, r2
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ca2:	0852      	lsrs	r2, r2, #1
 8006ca4:	3a01      	subs	r2, #1
 8006ca6:	0652      	lsls	r2, r2, #25
 8006ca8:	4311      	orrs	r1, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006cae:	06d2      	lsls	r2, r2, #27
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	4943      	ldr	r1, [pc, #268]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cb8:	4b41      	ldr	r3, [pc, #260]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a40      	ldr	r2, [pc, #256]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cc4:	4b3e      	ldr	r3, [pc, #248]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a3d      	ldr	r2, [pc, #244]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fc fcfa 	bl	80036c8 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd8:	f7fc fcf6 	bl	80036c8 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e066      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cea:	4b35      	ldr	r3, [pc, #212]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f0      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x530>
 8006cf6:	e05e      	b.n	8006db6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf8:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a30      	ldr	r2, [pc, #192]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fc fce0 	bl	80036c8 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d0c:	f7fc fcdc 	bl	80036c8 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e04c      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d1e:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d2a:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	4924      	ldr	r1, [pc, #144]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <HAL_RCC_OscConfig+0x620>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	60cb      	str	r3, [r1, #12]
 8006d36:	e03e      	b.n	8006db6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e039      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d44:	4b1e      	ldr	r3, [pc, #120]	; (8006dc0 <HAL_RCC_OscConfig+0x618>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f003 0203 	and.w	r2, r3, #3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d12c      	bne.n	8006db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	3b01      	subs	r3, #1
 8006d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d123      	bne.n	8006db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d11b      	bne.n	8006db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d113      	bne.n	8006db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	3b01      	subs	r3, #1
 8006d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d109      	bne.n	8006db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	3b01      	subs	r3, #1
 8006dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d001      	beq.n	8006db6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	019f800c 	.word	0x019f800c
 8006dc8:	feeefffc 	.word	0xfeeefffc

08006dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e11e      	b.n	8007022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006de4:	4b91      	ldr	r3, [pc, #580]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d910      	bls.n	8006e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b8e      	ldr	r3, [pc, #568]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f023 020f 	bic.w	r2, r3, #15
 8006dfa:	498c      	ldr	r1, [pc, #560]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e02:	4b8a      	ldr	r3, [pc, #552]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e106      	b.n	8007022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d073      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d129      	bne.n	8006e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e28:	4b81      	ldr	r3, [pc, #516]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0f4      	b.n	8007022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e38:	f000 f9ce 	bl	80071d8 <RCC_GetSysClockFreqFromPLLSource>
 8006e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4a7c      	ldr	r2, [pc, #496]	; (8007034 <HAL_RCC_ClockConfig+0x268>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d93f      	bls.n	8006ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e46:	4b7a      	ldr	r3, [pc, #488]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d033      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d12f      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e66:	4b72      	ldr	r3, [pc, #456]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6e:	4a70      	ldr	r2, [pc, #448]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e024      	b.n	8006ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d107      	bne.n	8006e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e84:	4b6a      	ldr	r3, [pc, #424]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0c6      	b.n	8007022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e94:	4b66      	ldr	r3, [pc, #408]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0be      	b.n	8007022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ea4:	f000 f8ce 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4a61      	ldr	r2, [pc, #388]	; (8007034 <HAL_RCC_ClockConfig+0x268>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d909      	bls.n	8006ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006eb2:	4b5f      	ldr	r3, [pc, #380]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eba:	4a5d      	ldr	r2, [pc, #372]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ec6:	4b5a      	ldr	r3, [pc, #360]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f023 0203 	bic.w	r2, r3, #3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4957      	ldr	r1, [pc, #348]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed8:	f7fc fbf6 	bl	80036c8 <HAL_GetTick>
 8006edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	e00a      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee0:	f7fc fbf2 	bl	80036c8 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e095      	b.n	8007022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 020c 	and.w	r2, r3, #12
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d1eb      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d023      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f20:	4b43      	ldr	r3, [pc, #268]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4a42      	ldr	r2, [pc, #264]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f38:	4b3d      	ldr	r3, [pc, #244]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f40:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f48:	4b39      	ldr	r3, [pc, #228]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	4936      	ldr	r1, [pc, #216]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	608b      	str	r3, [r1, #8]
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b80      	cmp	r3, #128	; 0x80
 8006f60:	d105      	bne.n	8006f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f62:	4b33      	ldr	r3, [pc, #204]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	4a32      	ldr	r2, [pc, #200]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f6e:	4b2f      	ldr	r3, [pc, #188]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d21d      	bcs.n	8006fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7c:	4b2b      	ldr	r3, [pc, #172]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f023 020f 	bic.w	r2, r3, #15
 8006f84:	4929      	ldr	r1, [pc, #164]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f8c:	f7fc fb9c 	bl	80036c8 <HAL_GetTick>
 8006f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f94:	f7fc fb98 	bl	80036c8 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e03b      	b.n	8007022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006faa:	4b20      	ldr	r3, [pc, #128]	; (800702c <HAL_RCC_ClockConfig+0x260>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d1ed      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fc4:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	4917      	ldr	r1, [pc, #92]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fe2:	4b13      	ldr	r3, [pc, #76]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	490f      	ldr	r1, [pc, #60]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ff6:	f000 f825 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <HAL_RCC_ClockConfig+0x264>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	091b      	lsrs	r3, r3, #4
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	490c      	ldr	r1, [pc, #48]	; (8007038 <HAL_RCC_ClockConfig+0x26c>)
 8007008:	5ccb      	ldrb	r3, [r1, r3]
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	fa22 f303 	lsr.w	r3, r2, r3
 8007012:	4a0a      	ldr	r2, [pc, #40]	; (800703c <HAL_RCC_ClockConfig+0x270>)
 8007014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <HAL_RCC_ClockConfig+0x274>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f7fc f8d6 	bl	80031cc <HAL_InitTick>
 8007020:	4603      	mov	r3, r0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40022000 	.word	0x40022000
 8007030:	40021000 	.word	0x40021000
 8007034:	04c4b400 	.word	0x04c4b400
 8007038:	0801562c 	.word	0x0801562c
 800703c:	20000000 	.word	0x20000000
 8007040:	20000004 	.word	0x20000004

08007044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800704a:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 030c 	and.w	r3, r3, #12
 8007052:	2b04      	cmp	r3, #4
 8007054:	d102      	bne.n	800705c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007056:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	e047      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800705c:	4b27      	ldr	r3, [pc, #156]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 030c 	and.w	r3, r3, #12
 8007064:	2b08      	cmp	r3, #8
 8007066:	d102      	bne.n	800706e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007068:	4b25      	ldr	r3, [pc, #148]	; (8007100 <HAL_RCC_GetSysClockFreq+0xbc>)
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	e03e      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800706e:	4b23      	ldr	r3, [pc, #140]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 030c 	and.w	r3, r3, #12
 8007076:	2b0c      	cmp	r3, #12
 8007078:	d136      	bne.n	80070e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800707a:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007084:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	3301      	adds	r3, #1
 8007090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b03      	cmp	r3, #3
 8007096:	d10c      	bne.n	80070b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007098:	4a19      	ldr	r2, [pc, #100]	; (8007100 <HAL_RCC_GetSysClockFreq+0xbc>)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a0:	4a16      	ldr	r2, [pc, #88]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80070a2:	68d2      	ldr	r2, [r2, #12]
 80070a4:	0a12      	lsrs	r2, r2, #8
 80070a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	617b      	str	r3, [r7, #20]
      break;
 80070b0:	e00c      	b.n	80070cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070b2:	4a13      	ldr	r2, [pc, #76]	; (8007100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ba:	4a10      	ldr	r2, [pc, #64]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80070bc:	68d2      	ldr	r2, [r2, #12]
 80070be:	0a12      	lsrs	r2, r2, #8
 80070c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	617b      	str	r3, [r7, #20]
      break;
 80070ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	0e5b      	lsrs	r3, r3, #25
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	3301      	adds	r3, #1
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	e001      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80070ec:	693b      	ldr	r3, [r7, #16]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40021000 	.word	0x40021000
 8007100:	00f42400 	.word	0x00f42400

08007104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007108:	4b03      	ldr	r3, [pc, #12]	; (8007118 <HAL_RCC_GetHCLKFreq+0x14>)
 800710a:	681b      	ldr	r3, [r3, #0]
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000000 	.word	0x20000000

0800711c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007120:	f7ff fff0 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 8007124:	4602      	mov	r2, r0
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	0a1b      	lsrs	r3, r3, #8
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	4904      	ldr	r1, [pc, #16]	; (8007144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007132:	5ccb      	ldrb	r3, [r1, r3]
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800713c:	4618      	mov	r0, r3
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40021000 	.word	0x40021000
 8007144:	0801563c 	.word	0x0801563c

08007148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800714c:	f7ff ffda 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 8007150:	4602      	mov	r2, r0
 8007152:	4b06      	ldr	r3, [pc, #24]	; (800716c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	0adb      	lsrs	r3, r3, #11
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	4904      	ldr	r1, [pc, #16]	; (8007170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800715e:	5ccb      	ldrb	r3, [r1, r3]
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007168:	4618      	mov	r0, r3
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40021000 	.word	0x40021000
 8007170:	0801563c 	.word	0x0801563c

08007174 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	220f      	movs	r2, #15
 8007182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007184:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0203 	and.w	r2, r3, #3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800719c:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	08db      	lsrs	r3, r3, #3
 80071ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <HAL_RCC_GetClockConfig+0x60>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 020f 	and.w	r2, r3, #15
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40022000 	.word	0x40022000

080071d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071de:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071e8:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d10c      	bne.n	8007216 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	fbb2 f3f3 	udiv	r3, r2, r3
 8007204:	4a14      	ldr	r2, [pc, #80]	; (8007258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007206:	68d2      	ldr	r2, [r2, #12]
 8007208:	0a12      	lsrs	r2, r2, #8
 800720a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	617b      	str	r3, [r7, #20]
    break;
 8007214:	e00c      	b.n	8007230 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007216:	4a11      	ldr	r2, [pc, #68]	; (800725c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	4a0e      	ldr	r2, [pc, #56]	; (8007258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007220:	68d2      	ldr	r2, [r2, #12]
 8007222:	0a12      	lsrs	r2, r2, #8
 8007224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007228:	fb02 f303 	mul.w	r3, r2, r3
 800722c:	617b      	str	r3, [r7, #20]
    break;
 800722e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	0e5b      	lsrs	r3, r3, #25
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	3301      	adds	r3, #1
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	fbb2 f3f3 	udiv	r3, r2, r3
 8007248:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800724a:	687b      	ldr	r3, [r7, #4]
}
 800724c:	4618      	mov	r0, r3
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40021000 	.word	0x40021000
 800725c:	00f42400 	.word	0x00f42400

08007260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007268:	2300      	movs	r3, #0
 800726a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800726c:	2300      	movs	r3, #0
 800726e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8098 	beq.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800727e:	2300      	movs	r3, #0
 8007280:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007282:	4b43      	ldr	r3, [pc, #268]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728e:	4b40      	ldr	r3, [pc, #256]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007292:	4a3f      	ldr	r2, [pc, #252]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007298:	6593      	str	r3, [r2, #88]	; 0x58
 800729a:	4b3d      	ldr	r3, [pc, #244]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a2:	60bb      	str	r3, [r7, #8]
 80072a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a6:	2301      	movs	r3, #1
 80072a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072aa:	4b3a      	ldr	r3, [pc, #232]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a39      	ldr	r2, [pc, #228]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072b6:	f7fc fa07 	bl	80036c8 <HAL_GetTick>
 80072ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072bc:	e009      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072be:	f7fc fa03 	bl	80036c8 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d902      	bls.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	74fb      	strb	r3, [r7, #19]
        break;
 80072d0:	e005      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d2:	4b30      	ldr	r3, [pc, #192]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0ef      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80072de:	7cfb      	ldrb	r3, [r7, #19]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d159      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072e4:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01e      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d019      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007300:	4b23      	ldr	r3, [pc, #140]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800730c:	4b20      	ldr	r3, [pc, #128]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	4a1f      	ldr	r2, [pc, #124]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800731c:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800732c:	4a18      	ldr	r2, [pc, #96]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733e:	f7fc f9c3 	bl	80036c8 <HAL_GetTick>
 8007342:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007344:	e00b      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fc f9bf 	bl	80036c8 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	; 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d902      	bls.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	74fb      	strb	r3, [r7, #19]
            break;
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735e:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ec      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800736c:	7cfb      	ldrb	r3, [r7, #19]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10b      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	4903      	ldr	r1, [pc, #12]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007388:	e008      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800738a:	7cfb      	ldrb	r3, [r7, #19]
 800738c:	74bb      	strb	r3, [r7, #18]
 800738e:	e005      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007390:	40021000 	.word	0x40021000
 8007394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	7cfb      	ldrb	r3, [r7, #19]
 800739a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800739c:	7c7b      	ldrb	r3, [r7, #17]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d105      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a2:	4ba7      	ldr	r3, [pc, #668]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a6:	4aa6      	ldr	r2, [pc, #664]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073ba:	4ba1      	ldr	r3, [pc, #644]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f023 0203 	bic.w	r2, r3, #3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	499d      	ldr	r1, [pc, #628]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073dc:	4b98      	ldr	r3, [pc, #608]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	f023 020c 	bic.w	r2, r3, #12
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	4995      	ldr	r1, [pc, #596]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073fe:	4b90      	ldr	r3, [pc, #576]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	498c      	ldr	r1, [pc, #560]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007420:	4b87      	ldr	r3, [pc, #540]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	4984      	ldr	r1, [pc, #528]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007430:	4313      	orrs	r3, r2
 8007432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007442:	4b7f      	ldr	r3, [pc, #508]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	497b      	ldr	r1, [pc, #492]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007464:	4b76      	ldr	r3, [pc, #472]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	4973      	ldr	r1, [pc, #460]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007486:	4b6e      	ldr	r3, [pc, #440]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	496a      	ldr	r1, [pc, #424]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074a8:	4b65      	ldr	r3, [pc, #404]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	4962      	ldr	r1, [pc, #392]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074ca:	4b5d      	ldr	r3, [pc, #372]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	4959      	ldr	r1, [pc, #356]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074ec:	4b54      	ldr	r3, [pc, #336]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074f2:	f023 0203 	bic.w	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	4951      	ldr	r1, [pc, #324]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800750e:	4b4c      	ldr	r3, [pc, #304]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4948      	ldr	r1, [pc, #288]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800752c:	2b00      	cmp	r3, #0
 800752e:	d015      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007530:	4b43      	ldr	r3, [pc, #268]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	4940      	ldr	r1, [pc, #256]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754e:	d105      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007550:	4b3b      	ldr	r3, [pc, #236]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a3a      	ldr	r2, [pc, #232]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800755a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007568:	4b35      	ldr	r3, [pc, #212]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007576:	4932      	ldr	r1, [pc, #200]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007586:	d105      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007588:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4a2c      	ldr	r2, [pc, #176]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007592:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d015      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075a0:	4b27      	ldr	r3, [pc, #156]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	4924      	ldr	r1, [pc, #144]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075be:	d105      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c0:	4b1f      	ldr	r3, [pc, #124]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075d8:	4b19      	ldr	r3, [pc, #100]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	4916      	ldr	r1, [pc, #88]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075f6:	d105      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	4a10      	ldr	r2, [pc, #64]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007602:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d019      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	4908      	ldr	r1, [pc, #32]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800762e:	d109      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007630:	4b03      	ldr	r3, [pc, #12]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a02      	ldr	r2, [pc, #8]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800763a:	60d3      	str	r3, [r2, #12]
 800763c:	e002      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d015      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007650:	4b29      	ldr	r3, [pc, #164]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007656:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765e:	4926      	ldr	r1, [pc, #152]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800766e:	d105      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007670:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	4a20      	ldr	r2, [pc, #128]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d015      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007688:	4b1b      	ldr	r3, [pc, #108]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007696:	4918      	ldr	r1, [pc, #96]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d105      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076a8:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4a12      	ldr	r2, [pc, #72]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d015      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076c0:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ce:	490a      	ldr	r1, [pc, #40]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076de:	d105      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4a04      	ldr	r2, [pc, #16]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80076ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000

080076fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e09d      	b.n	800784a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d108      	bne.n	8007728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800771e:	d009      	beq.n	8007734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	61da      	str	r2, [r3, #28]
 8007726:	e005      	b.n	8007734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fb fcd0 	bl	80030f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007774:	d902      	bls.n	800777c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e002      	b.n	8007782 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800777c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007780:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800778a:	d007      	beq.n	800779c <HAL_SPI_Init+0xa0>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007794:	d002      	beq.n	800779c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077ac:	431a      	orrs	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077de:	ea42 0103 	orr.w	r1, r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	0c1b      	lsrs	r3, r3, #16
 80077f8:	f003 0204 	and.w	r2, r3, #4
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007818:	ea42 0103 	orr.w	r1, r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b088      	sub	sp, #32
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	603b      	str	r3, [r7, #0]
 800785e:	4613      	mov	r3, r2
 8007860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_SPI_Transmit+0x22>
 8007870:	2302      	movs	r3, #2
 8007872:	e15f      	b.n	8007b34 <HAL_SPI_Transmit+0x2e2>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800787c:	f7fb ff24 	bl	80036c8 <HAL_GetTick>
 8007880:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d002      	beq.n	8007898 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007892:	2302      	movs	r3, #2
 8007894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007896:	e148      	b.n	8007b2a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <HAL_SPI_Transmit+0x52>
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078a8:	e13f      	b.n	8007b2a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2203      	movs	r2, #3
 80078ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	88fa      	ldrh	r2, [r7, #6]
 80078c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	88fa      	ldrh	r2, [r7, #6]
 80078c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f4:	d10f      	bne.n	8007916 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007904:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007914:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d007      	beq.n	8007934 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800793c:	d94f      	bls.n	80079de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_SPI_Transmit+0xfa>
 8007946:	8afb      	ldrh	r3, [r7, #22]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d142      	bne.n	80079d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	881a      	ldrh	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	1c9a      	adds	r2, r3, #2
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007970:	e02f      	b.n	80079d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d112      	bne.n	80079a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	881a      	ldrh	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	1c9a      	adds	r2, r3, #2
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079a4:	e015      	b.n	80079d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079a6:	f7fb fe8f 	bl	80036c8 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d803      	bhi.n	80079be <HAL_SPI_Transmit+0x16c>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079bc:	d102      	bne.n	80079c4 <HAL_SPI_Transmit+0x172>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d106      	bne.n	80079d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80079d0:	e0ab      	b.n	8007b2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1ca      	bne.n	8007972 <HAL_SPI_Transmit+0x120>
 80079dc:	e080      	b.n	8007ae0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_SPI_Transmit+0x19a>
 80079e6:	8afb      	ldrh	r3, [r7, #22]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d174      	bne.n	8007ad6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d912      	bls.n	8007a1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	881a      	ldrh	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	1c9a      	adds	r2, r3, #2
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	3b02      	subs	r3, #2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a1a:	e05c      	b.n	8007ad6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	330c      	adds	r3, #12
 8007a26:	7812      	ldrb	r2, [r2, #0]
 8007a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007a42:	e048      	b.n	8007ad6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d12b      	bne.n	8007aaa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d912      	bls.n	8007a82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b02      	subs	r3, #2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a80:	e029      	b.n	8007ad6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	330c      	adds	r3, #12
 8007a8c:	7812      	ldrb	r2, [r2, #0]
 8007a8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aa8:	e015      	b.n	8007ad6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aaa:	f7fb fe0d 	bl	80036c8 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d803      	bhi.n	8007ac2 <HAL_SPI_Transmit+0x270>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac0:	d102      	bne.n	8007ac8 <HAL_SPI_Transmit+0x276>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007ad4:	e029      	b.n	8007b2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1b1      	bne.n	8007a44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fb69 	bl	80081bc <SPI_EndRxTxTransaction>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007afe:	2300      	movs	r3, #0
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e003      	b.n	8007b2a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3720      	adds	r7, #32
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	; 0x28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_SPI_TransmitReceive+0x26>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e20a      	b.n	8007f78 <HAL_SPI_TransmitReceive+0x43c>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b6a:	f7fb fdad 	bl	80036c8 <HAL_GetTick>
 8007b6e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b76:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b7e:	887b      	ldrh	r3, [r7, #2]
 8007b80:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b86:	7efb      	ldrb	r3, [r7, #27]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d00e      	beq.n	8007baa <HAL_SPI_TransmitReceive+0x6e>
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b92:	d106      	bne.n	8007ba2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_TransmitReceive+0x66>
 8007b9c:	7efb      	ldrb	r3, [r7, #27]
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d003      	beq.n	8007baa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007ba8:	e1e0      	b.n	8007f6c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_SPI_TransmitReceive+0x80>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_SPI_TransmitReceive+0x80>
 8007bb6:	887b      	ldrh	r3, [r7, #2]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007bc2:	e1d3      	b.n	8007f6c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d003      	beq.n	8007bd8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	887a      	ldrh	r2, [r7, #2]
 8007be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	887a      	ldrh	r2, [r7, #2]
 8007bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	887a      	ldrh	r2, [r7, #2]
 8007bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	887a      	ldrh	r2, [r7, #2]
 8007c04:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c1a:	d802      	bhi.n	8007c22 <HAL_SPI_TransmitReceive+0xe6>
 8007c1c:	8a3b      	ldrh	r3, [r7, #16]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d908      	bls.n	8007c34 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	e007      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d007      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c6a:	f240 8081 	bls.w	8007d70 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <HAL_SPI_TransmitReceive+0x140>
 8007c76:	8a7b      	ldrh	r3, [r7, #18]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d16d      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	881a      	ldrh	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	1c9a      	adds	r2, r3, #2
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ca0:	e05a      	b.n	8007d58 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d11b      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x1ac>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d016      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x1ac>
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d113      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	881a      	ldrh	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	1c9a      	adds	r2, r3, #2
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d11c      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x1f4>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d016      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	b292      	uxth	r2, r2
 8007d0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	1c9a      	adds	r2, r3, #2
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d30:	f7fb fcca 	bl	80036c8 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d80b      	bhi.n	8007d58 <HAL_SPI_TransmitReceive+0x21c>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d46:	d007      	beq.n	8007d58 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007d56:	e109      	b.n	8007f6c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d19f      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x166>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d199      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x166>
 8007d6e:	e0e3      	b.n	8007f38 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <HAL_SPI_TransmitReceive+0x244>
 8007d78:	8a7b      	ldrh	r3, [r7, #18]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	f040 80cf 	bne.w	8007f1e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d912      	bls.n	8007db0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	881a      	ldrh	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	1c9a      	adds	r2, r3, #2
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b02      	subs	r3, #2
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dae:	e0b6      	b.n	8007f1e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	330c      	adds	r3, #12
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dd6:	e0a2      	b.n	8007f1e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d134      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x314>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02f      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x314>
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d12c      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d912      	bls.n	8007e26 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	881a      	ldrh	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	1c9a      	adds	r2, r3, #2
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b02      	subs	r3, #2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e24:	e012      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d148      	bne.n	8007ef0 <HAL_SPI_TransmitReceive+0x3b4>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d042      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d923      	bls.n	8007ebe <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	b292      	uxth	r2, r2
 8007e82:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e88:	1c9a      	adds	r2, r3, #2
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b02      	subs	r3, #2
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d81f      	bhi.n	8007eec <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007eba:	605a      	str	r2, [r3, #4]
 8007ebc:	e016      	b.n	8007eec <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f103 020c 	add.w	r2, r3, #12
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eec:	2301      	movs	r3, #1
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ef0:	f7fb fbea 	bl	80036c8 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d803      	bhi.n	8007f08 <HAL_SPI_TransmitReceive+0x3cc>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f06:	d102      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x3d2>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007f1c:	e026      	b.n	8007f6c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f47f af57 	bne.w	8007dd8 <HAL_SPI_TransmitReceive+0x29c>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f47f af50 	bne.w	8007dd8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f38:	69fa      	ldr	r2, [r7, #28]
 8007f3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f93d 	bl	80081bc <SPI_EndRxTxTransaction>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f62:	e003      	b.n	8007f6c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3728      	adds	r7, #40	; 0x28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f90:	f7fb fb9a 	bl	80036c8 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fa0:	f7fb fb92 	bl	80036c8 <HAL_GetTick>
 8007fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fa6:	4b39      	ldr	r3, [pc, #228]	; (800808c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	015b      	lsls	r3, r3, #5
 8007fac:	0d1b      	lsrs	r3, r3, #20
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fb6:	e054      	b.n	8008062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fbe:	d050      	beq.n	8008062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fc0:	f7fb fb82 	bl	80036c8 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d902      	bls.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d13d      	bne.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fee:	d111      	bne.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff8:	d004      	beq.n	8008004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008002:	d107      	bne.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801c:	d10f      	bne.n	800803e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800803c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e017      	b.n	8008082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	3b01      	subs	r3, #1
 8008060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4013      	ands	r3, r2
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	429a      	cmp	r2, r3
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	429a      	cmp	r2, r3
 800807e:	d19b      	bne.n	8007fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3720      	adds	r7, #32
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000000 	.word	0x20000000

08008090 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	; 0x28
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80080a2:	f7fb fb11 	bl	80036c8 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	4413      	add	r3, r2
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80080b2:	f7fb fb09 	bl	80036c8 <HAL_GetTick>
 80080b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80080c0:	4b3d      	ldr	r3, [pc, #244]	; (80081b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	00da      	lsls	r2, r3, #3
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	0d1b      	lsrs	r3, r3, #20
 80080d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80080d8:	e060      	b.n	800819c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80080e0:	d107      	bne.n	80080f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f8:	d050      	beq.n	800819c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080fa:	f7fb fae5 	bl	80036c8 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008106:	429a      	cmp	r2, r3
 8008108:	d902      	bls.n	8008110 <SPI_WaitFifoStateUntilTimeout+0x80>
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	d13d      	bne.n	800818c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800811e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008128:	d111      	bne.n	800814e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008132:	d004      	beq.n	800813e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813c:	d107      	bne.n	800814e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008156:	d10f      	bne.n	8008178 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008176:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e010      	b.n	80081ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	3b01      	subs	r3, #1
 800819a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4013      	ands	r3, r2
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d196      	bne.n	80080da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000000 	.word	0x20000000

080081bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7ff ff5b 	bl	8008090 <SPI_WaitFifoStateUntilTimeout>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d007      	beq.n	80081f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e4:	f043 0220 	orr.w	r2, r3, #32
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e027      	b.n	8008240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2200      	movs	r2, #0
 80081f8:	2180      	movs	r1, #128	; 0x80
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fec0 	bl	8007f80 <SPI_WaitFlagStateUntilTimeout>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820a:	f043 0220 	orr.w	r2, r3, #32
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e014      	b.n	8008240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff ff34 	bl	8008090 <SPI_WaitFifoStateUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008232:	f043 0220 	orr.w	r2, r3, #32
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e000      	b.n	8008240 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e049      	b.n	80082ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f841 	bl	80082f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f000 fa30 	bl	80086ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d001      	beq.n	8008324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e054      	b.n	80083ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a26      	ldr	r2, [pc, #152]	; (80083dc <HAL_TIM_Base_Start_IT+0xd0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d022      	beq.n	800838c <HAL_TIM_Base_Start_IT+0x80>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834e:	d01d      	beq.n	800838c <HAL_TIM_Base_Start_IT+0x80>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a22      	ldr	r2, [pc, #136]	; (80083e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d018      	beq.n	800838c <HAL_TIM_Base_Start_IT+0x80>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a21      	ldr	r2, [pc, #132]	; (80083e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d013      	beq.n	800838c <HAL_TIM_Base_Start_IT+0x80>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a1f      	ldr	r2, [pc, #124]	; (80083e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00e      	beq.n	800838c <HAL_TIM_Base_Start_IT+0x80>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a1e      	ldr	r2, [pc, #120]	; (80083ec <HAL_TIM_Base_Start_IT+0xe0>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d009      	beq.n	800838c <HAL_TIM_Base_Start_IT+0x80>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a1c      	ldr	r2, [pc, #112]	; (80083f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d004      	beq.n	800838c <HAL_TIM_Base_Start_IT+0x80>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a1b      	ldr	r2, [pc, #108]	; (80083f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d115      	bne.n	80083b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689a      	ldr	r2, [r3, #8]
 8008392:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <HAL_TIM_Base_Start_IT+0xec>)
 8008394:	4013      	ands	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b06      	cmp	r3, #6
 800839c:	d015      	beq.n	80083ca <HAL_TIM_Base_Start_IT+0xbe>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a4:	d011      	beq.n	80083ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0201 	orr.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b6:	e008      	b.n	80083ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0201 	orr.w	r2, r2, #1
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	e000      	b.n	80083cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40012c00 	.word	0x40012c00
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	40013400 	.word	0x40013400
 80083f0:	40014000 	.word	0x40014000
 80083f4:	40015000 	.word	0x40015000
 80083f8:	00010007 	.word	0x00010007

080083fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d020      	beq.n	8008460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01b      	beq.n	8008460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f06f 0202 	mvn.w	r2, #2
 8008430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f931 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 800844c:	e005      	b.n	800845a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f923 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f934 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	d020      	beq.n	80084ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01b      	beq.n	80084ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f06f 0204 	mvn.w	r2, #4
 800847c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f90b 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 8008498:	e005      	b.n	80084a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f8fd 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f90e 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d020      	beq.n	80084f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f003 0308 	and.w	r3, r3, #8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01b      	beq.n	80084f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f06f 0208 	mvn.w	r2, #8
 80084c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2204      	movs	r2, #4
 80084ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8e5 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 80084e4:	e005      	b.n	80084f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f8d7 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f8e8 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f003 0310 	and.w	r3, r3, #16
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d020      	beq.n	8008544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01b      	beq.n	8008544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f06f 0210 	mvn.w	r2, #16
 8008514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2208      	movs	r2, #8
 800851a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f8bf 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 8008530:	e005      	b.n	800853e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f8b1 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8c2 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f06f 0201 	mvn.w	r2, #1
 8008560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7fa fd70 	bl	8003048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00c      	beq.n	8008596 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008582:	2b00      	cmp	r3, #0
 8008584:	d007      	beq.n	8008596 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800858e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f969 	bl	8008868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00c      	beq.n	80085ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d007      	beq.n	80085ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f961 	bl	800887c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00c      	beq.n	80085de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f87c 	bl	80086d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00c      	beq.n	8008602 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f06f 0220 	mvn.w	r2, #32
 80085fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f929 	bl	8008854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00c      	beq.n	8008626 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800861e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f935 	bl	8008890 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00c      	beq.n	800864a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f92d 	bl	80088a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00c      	beq.n	800866e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f925 	bl	80088b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00c      	beq.n	8008692 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800868a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f91d 	bl	80088cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a4c      	ldr	r2, [pc, #304]	; (8008830 <TIM_Base_SetConfig+0x144>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d017      	beq.n	8008734 <TIM_Base_SetConfig+0x48>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870a:	d013      	beq.n	8008734 <TIM_Base_SetConfig+0x48>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a49      	ldr	r2, [pc, #292]	; (8008834 <TIM_Base_SetConfig+0x148>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00f      	beq.n	8008734 <TIM_Base_SetConfig+0x48>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a48      	ldr	r2, [pc, #288]	; (8008838 <TIM_Base_SetConfig+0x14c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d00b      	beq.n	8008734 <TIM_Base_SetConfig+0x48>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a47      	ldr	r2, [pc, #284]	; (800883c <TIM_Base_SetConfig+0x150>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d007      	beq.n	8008734 <TIM_Base_SetConfig+0x48>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a46      	ldr	r2, [pc, #280]	; (8008840 <TIM_Base_SetConfig+0x154>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_Base_SetConfig+0x48>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a45      	ldr	r2, [pc, #276]	; (8008844 <TIM_Base_SetConfig+0x158>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d108      	bne.n	8008746 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	4313      	orrs	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a39      	ldr	r2, [pc, #228]	; (8008830 <TIM_Base_SetConfig+0x144>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d023      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008754:	d01f      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a36      	ldr	r2, [pc, #216]	; (8008834 <TIM_Base_SetConfig+0x148>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d01b      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a35      	ldr	r2, [pc, #212]	; (8008838 <TIM_Base_SetConfig+0x14c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d017      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a34      	ldr	r2, [pc, #208]	; (800883c <TIM_Base_SetConfig+0x150>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d013      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a33      	ldr	r2, [pc, #204]	; (8008840 <TIM_Base_SetConfig+0x154>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00f      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a33      	ldr	r2, [pc, #204]	; (8008848 <TIM_Base_SetConfig+0x15c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00b      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a32      	ldr	r2, [pc, #200]	; (800884c <TIM_Base_SetConfig+0x160>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d007      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a31      	ldr	r2, [pc, #196]	; (8008850 <TIM_Base_SetConfig+0x164>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d003      	beq.n	8008796 <TIM_Base_SetConfig+0xaa>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2c      	ldr	r2, [pc, #176]	; (8008844 <TIM_Base_SetConfig+0x158>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d108      	bne.n	80087a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a18      	ldr	r2, [pc, #96]	; (8008830 <TIM_Base_SetConfig+0x144>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d013      	beq.n	80087fc <TIM_Base_SetConfig+0x110>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a1a      	ldr	r2, [pc, #104]	; (8008840 <TIM_Base_SetConfig+0x154>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00f      	beq.n	80087fc <TIM_Base_SetConfig+0x110>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a1a      	ldr	r2, [pc, #104]	; (8008848 <TIM_Base_SetConfig+0x15c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00b      	beq.n	80087fc <TIM_Base_SetConfig+0x110>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a19      	ldr	r2, [pc, #100]	; (800884c <TIM_Base_SetConfig+0x160>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d007      	beq.n	80087fc <TIM_Base_SetConfig+0x110>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a18      	ldr	r2, [pc, #96]	; (8008850 <TIM_Base_SetConfig+0x164>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_Base_SetConfig+0x110>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a13      	ldr	r2, [pc, #76]	; (8008844 <TIM_Base_SetConfig+0x158>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d103      	bne.n	8008804 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b01      	cmp	r3, #1
 8008814:	d105      	bne.n	8008822 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f023 0201 	bic.w	r2, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	611a      	str	r2, [r3, #16]
  }
}
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40000400 	.word	0x40000400
 8008838:	40000800 	.word	0x40000800
 800883c:	40000c00 	.word	0x40000c00
 8008840:	40013400 	.word	0x40013400
 8008844:	40015000 	.word	0x40015000
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800

08008854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e042      	b.n	8008978 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7fa fe33 	bl	8003570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2224      	movs	r2, #36	; 0x24
 800890e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0201 	bic.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fb24 	bl	8008f78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f825 	bl	8008980 <UART_SetConfig>
 8008936:	4603      	mov	r3, r0
 8008938:	2b01      	cmp	r3, #1
 800893a:	d101      	bne.n	8008940 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e01b      	b.n	8008978 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800894e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800895e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fba3 	bl	80090bc <UART_CheckIdleState>
 8008976:	4603      	mov	r3, r0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008984:	b08c      	sub	sp, #48	; 0x30
 8008986:	af00      	add	r7, sp, #0
 8008988:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	431a      	orrs	r2, r3
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	431a      	orrs	r2, r3
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4baa      	ldr	r3, [pc, #680]	; (8008c58 <UART_SetConfig+0x2d8>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	6812      	ldr	r2, [r2, #0]
 80089b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089b8:	430b      	orrs	r3, r1
 80089ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a9f      	ldr	r2, [pc, #636]	; (8008c5c <UART_SetConfig+0x2dc>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d004      	beq.n	80089ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e8:	4313      	orrs	r3, r2
 80089ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80089f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a00:	430b      	orrs	r3, r1
 8008a02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f023 010f 	bic.w	r1, r3, #15
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a90      	ldr	r2, [pc, #576]	; (8008c60 <UART_SetConfig+0x2e0>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d125      	bne.n	8008a70 <UART_SetConfig+0xf0>
 8008a24:	4b8f      	ldr	r3, [pc, #572]	; (8008c64 <UART_SetConfig+0x2e4>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2a:	f003 0303 	and.w	r3, r3, #3
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d81a      	bhi.n	8008a68 <UART_SetConfig+0xe8>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0xb8>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a49 	.word	0x08008a49
 8008a3c:	08008a59 	.word	0x08008a59
 8008a40:	08008a51 	.word	0x08008a51
 8008a44:	08008a61 	.word	0x08008a61
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a4e:	e116      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008a50:	2302      	movs	r3, #2
 8008a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a56:	e112      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a5e:	e10e      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008a60:	2308      	movs	r3, #8
 8008a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a66:	e10a      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008a68:	2310      	movs	r3, #16
 8008a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a6e:	e106      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a7c      	ldr	r2, [pc, #496]	; (8008c68 <UART_SetConfig+0x2e8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d138      	bne.n	8008aec <UART_SetConfig+0x16c>
 8008a7a:	4b7a      	ldr	r3, [pc, #488]	; (8008c64 <UART_SetConfig+0x2e4>)
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a80:	f003 030c 	and.w	r3, r3, #12
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d82d      	bhi.n	8008ae4 <UART_SetConfig+0x164>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <UART_SetConfig+0x110>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008ac5 	.word	0x08008ac5
 8008a94:	08008ae5 	.word	0x08008ae5
 8008a98:	08008ae5 	.word	0x08008ae5
 8008a9c:	08008ae5 	.word	0x08008ae5
 8008aa0:	08008ad5 	.word	0x08008ad5
 8008aa4:	08008ae5 	.word	0x08008ae5
 8008aa8:	08008ae5 	.word	0x08008ae5
 8008aac:	08008ae5 	.word	0x08008ae5
 8008ab0:	08008acd 	.word	0x08008acd
 8008ab4:	08008ae5 	.word	0x08008ae5
 8008ab8:	08008ae5 	.word	0x08008ae5
 8008abc:	08008ae5 	.word	0x08008ae5
 8008ac0:	08008add 	.word	0x08008add
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aca:	e0d8      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008acc:	2302      	movs	r3, #2
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ad2:	e0d4      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ada:	e0d0      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008adc:	2308      	movs	r3, #8
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae2:	e0cc      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aea:	e0c8      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a5e      	ldr	r2, [pc, #376]	; (8008c6c <UART_SetConfig+0x2ec>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d125      	bne.n	8008b42 <UART_SetConfig+0x1c2>
 8008af6:	4b5b      	ldr	r3, [pc, #364]	; (8008c64 <UART_SetConfig+0x2e4>)
 8008af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b00:	2b30      	cmp	r3, #48	; 0x30
 8008b02:	d016      	beq.n	8008b32 <UART_SetConfig+0x1b2>
 8008b04:	2b30      	cmp	r3, #48	; 0x30
 8008b06:	d818      	bhi.n	8008b3a <UART_SetConfig+0x1ba>
 8008b08:	2b20      	cmp	r3, #32
 8008b0a:	d00a      	beq.n	8008b22 <UART_SetConfig+0x1a2>
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d814      	bhi.n	8008b3a <UART_SetConfig+0x1ba>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <UART_SetConfig+0x19a>
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d008      	beq.n	8008b2a <UART_SetConfig+0x1aa>
 8008b18:	e00f      	b.n	8008b3a <UART_SetConfig+0x1ba>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b20:	e0ad      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b22:	2302      	movs	r3, #2
 8008b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b28:	e0a9      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b2a:	2304      	movs	r3, #4
 8008b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b30:	e0a5      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b32:	2308      	movs	r3, #8
 8008b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b38:	e0a1      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b3a:	2310      	movs	r3, #16
 8008b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b40:	e09d      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a4a      	ldr	r2, [pc, #296]	; (8008c70 <UART_SetConfig+0x2f0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d125      	bne.n	8008b98 <UART_SetConfig+0x218>
 8008b4c:	4b45      	ldr	r3, [pc, #276]	; (8008c64 <UART_SetConfig+0x2e4>)
 8008b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b56:	2bc0      	cmp	r3, #192	; 0xc0
 8008b58:	d016      	beq.n	8008b88 <UART_SetConfig+0x208>
 8008b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b5c:	d818      	bhi.n	8008b90 <UART_SetConfig+0x210>
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d00a      	beq.n	8008b78 <UART_SetConfig+0x1f8>
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	d814      	bhi.n	8008b90 <UART_SetConfig+0x210>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <UART_SetConfig+0x1f0>
 8008b6a:	2b40      	cmp	r3, #64	; 0x40
 8008b6c:	d008      	beq.n	8008b80 <UART_SetConfig+0x200>
 8008b6e:	e00f      	b.n	8008b90 <UART_SetConfig+0x210>
 8008b70:	2300      	movs	r3, #0
 8008b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b76:	e082      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b7e:	e07e      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b80:	2304      	movs	r3, #4
 8008b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b86:	e07a      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b88:	2308      	movs	r3, #8
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b8e:	e076      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b90:	2310      	movs	r3, #16
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b96:	e072      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a35      	ldr	r2, [pc, #212]	; (8008c74 <UART_SetConfig+0x2f4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d12a      	bne.n	8008bf8 <UART_SetConfig+0x278>
 8008ba2:	4b30      	ldr	r3, [pc, #192]	; (8008c64 <UART_SetConfig+0x2e4>)
 8008ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb0:	d01a      	beq.n	8008be8 <UART_SetConfig+0x268>
 8008bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb6:	d81b      	bhi.n	8008bf0 <UART_SetConfig+0x270>
 8008bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bbc:	d00c      	beq.n	8008bd8 <UART_SetConfig+0x258>
 8008bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc2:	d815      	bhi.n	8008bf0 <UART_SetConfig+0x270>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <UART_SetConfig+0x250>
 8008bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bcc:	d008      	beq.n	8008be0 <UART_SetConfig+0x260>
 8008bce:	e00f      	b.n	8008bf0 <UART_SetConfig+0x270>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bd6:	e052      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bde:	e04e      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008be6:	e04a      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bee:	e046      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bf6:	e042      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <UART_SetConfig+0x2dc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d13a      	bne.n	8008c78 <UART_SetConfig+0x2f8>
 8008c02:	4b18      	ldr	r3, [pc, #96]	; (8008c64 <UART_SetConfig+0x2e4>)
 8008c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c10:	d01a      	beq.n	8008c48 <UART_SetConfig+0x2c8>
 8008c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c16:	d81b      	bhi.n	8008c50 <UART_SetConfig+0x2d0>
 8008c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c1c:	d00c      	beq.n	8008c38 <UART_SetConfig+0x2b8>
 8008c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c22:	d815      	bhi.n	8008c50 <UART_SetConfig+0x2d0>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <UART_SetConfig+0x2b0>
 8008c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2c:	d008      	beq.n	8008c40 <UART_SetConfig+0x2c0>
 8008c2e:	e00f      	b.n	8008c50 <UART_SetConfig+0x2d0>
 8008c30:	2300      	movs	r3, #0
 8008c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c36:	e022      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c3e:	e01e      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c46:	e01a      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c4e:	e016      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c56:	e012      	b.n	8008c7e <UART_SetConfig+0x2fe>
 8008c58:	cfff69f3 	.word	0xcfff69f3
 8008c5c:	40008000 	.word	0x40008000
 8008c60:	40013800 	.word	0x40013800
 8008c64:	40021000 	.word	0x40021000
 8008c68:	40004400 	.word	0x40004400
 8008c6c:	40004800 	.word	0x40004800
 8008c70:	40004c00 	.word	0x40004c00
 8008c74:	40005000 	.word	0x40005000
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4aae      	ldr	r2, [pc, #696]	; (8008f3c <UART_SetConfig+0x5bc>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	f040 8097 	bne.w	8008db8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d823      	bhi.n	8008cda <UART_SetConfig+0x35a>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0x318>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cdb 	.word	0x08008cdb
 8008ca0:	08008cc5 	.word	0x08008cc5
 8008ca4:	08008cdb 	.word	0x08008cdb
 8008ca8:	08008ccb 	.word	0x08008ccb
 8008cac:	08008cdb 	.word	0x08008cdb
 8008cb0:	08008cdb 	.word	0x08008cdb
 8008cb4:	08008cdb 	.word	0x08008cdb
 8008cb8:	08008cd3 	.word	0x08008cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cbc:	f7fe fa2e 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 8008cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cc2:	e010      	b.n	8008ce6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cc4:	4b9e      	ldr	r3, [pc, #632]	; (8008f40 <UART_SetConfig+0x5c0>)
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cc8:	e00d      	b.n	8008ce6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cca:	f7fe f9bb 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cd0:	e009      	b.n	8008ce6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cd8:	e005      	b.n	8008ce6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ce4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 8130 	beq.w	8008f4e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	4a94      	ldr	r2, [pc, #592]	; (8008f44 <UART_SetConfig+0x5c4>)
 8008cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4413      	add	r3, r2
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d305      	bcc.n	8008d1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d903      	bls.n	8008d26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d24:	e113      	b.n	8008f4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	2200      	movs	r2, #0
 8008d2a:	60bb      	str	r3, [r7, #8]
 8008d2c:	60fa      	str	r2, [r7, #12]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	4a84      	ldr	r2, [pc, #528]	; (8008f44 <UART_SetConfig+0x5c4>)
 8008d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d48:	f7f7 ff56 	bl	8000bf8 <__aeabi_uldivmod>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4610      	mov	r0, r2
 8008d52:	4619      	mov	r1, r3
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	f04f 0300 	mov.w	r3, #0
 8008d5c:	020b      	lsls	r3, r1, #8
 8008d5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d62:	0202      	lsls	r2, r0, #8
 8008d64:	6979      	ldr	r1, [r7, #20]
 8008d66:	6849      	ldr	r1, [r1, #4]
 8008d68:	0849      	lsrs	r1, r1, #1
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	4605      	mov	r5, r0
 8008d70:	eb12 0804 	adds.w	r8, r2, r4
 8008d74:	eb43 0905 	adc.w	r9, r3, r5
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	469a      	mov	sl, r3
 8008d80:	4693      	mov	fp, r2
 8008d82:	4652      	mov	r2, sl
 8008d84:	465b      	mov	r3, fp
 8008d86:	4640      	mov	r0, r8
 8008d88:	4649      	mov	r1, r9
 8008d8a:	f7f7 ff35 	bl	8000bf8 <__aeabi_uldivmod>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4613      	mov	r3, r2
 8008d94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d9c:	d308      	bcc.n	8008db0 <UART_SetConfig+0x430>
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da4:	d204      	bcs.n	8008db0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a3a      	ldr	r2, [r7, #32]
 8008dac:	60da      	str	r2, [r3, #12]
 8008dae:	e0ce      	b.n	8008f4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008db6:	e0ca      	b.n	8008f4e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc0:	d166      	bne.n	8008e90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008dc6:	2b08      	cmp	r3, #8
 8008dc8:	d827      	bhi.n	8008e1a <UART_SetConfig+0x49a>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <UART_SetConfig+0x450>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008df5 	.word	0x08008df5
 8008dd4:	08008dfd 	.word	0x08008dfd
 8008dd8:	08008e05 	.word	0x08008e05
 8008ddc:	08008e1b 	.word	0x08008e1b
 8008de0:	08008e0b 	.word	0x08008e0b
 8008de4:	08008e1b 	.word	0x08008e1b
 8008de8:	08008e1b 	.word	0x08008e1b
 8008dec:	08008e1b 	.word	0x08008e1b
 8008df0:	08008e13 	.word	0x08008e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008df4:	f7fe f992 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 8008df8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dfa:	e014      	b.n	8008e26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dfc:	f7fe f9a4 	bl	8007148 <HAL_RCC_GetPCLK2Freq>
 8008e00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e02:	e010      	b.n	8008e26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e04:	4b4e      	ldr	r3, [pc, #312]	; (8008f40 <UART_SetConfig+0x5c0>)
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e08:	e00d      	b.n	8008e26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e0a:	f7fe f91b 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e10:	e009      	b.n	8008e26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e18:	e005      	b.n	8008e26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8090 	beq.w	8008f4e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	4a44      	ldr	r2, [pc, #272]	; (8008f44 <UART_SetConfig+0x5c4>)
 8008e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e40:	005a      	lsls	r2, r3, #1
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	085b      	lsrs	r3, r3, #1
 8008e48:	441a      	add	r2, r3
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	2b0f      	cmp	r3, #15
 8008e58:	d916      	bls.n	8008e88 <UART_SetConfig+0x508>
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e60:	d212      	bcs.n	8008e88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f023 030f 	bic.w	r3, r3, #15
 8008e6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	8bfb      	ldrh	r3, [r7, #30]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	8bfa      	ldrh	r2, [r7, #30]
 8008e84:	60da      	str	r2, [r3, #12]
 8008e86:	e062      	b.n	8008f4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e8e:	e05e      	b.n	8008f4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d828      	bhi.n	8008eea <UART_SetConfig+0x56a>
 8008e98:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <UART_SetConfig+0x520>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008ec5 	.word	0x08008ec5
 8008ea4:	08008ecd 	.word	0x08008ecd
 8008ea8:	08008ed5 	.word	0x08008ed5
 8008eac:	08008eeb 	.word	0x08008eeb
 8008eb0:	08008edb 	.word	0x08008edb
 8008eb4:	08008eeb 	.word	0x08008eeb
 8008eb8:	08008eeb 	.word	0x08008eeb
 8008ebc:	08008eeb 	.word	0x08008eeb
 8008ec0:	08008ee3 	.word	0x08008ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec4:	f7fe f92a 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 8008ec8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008eca:	e014      	b.n	8008ef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ecc:	f7fe f93c 	bl	8007148 <HAL_RCC_GetPCLK2Freq>
 8008ed0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ed2:	e010      	b.n	8008ef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ed4:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <UART_SetConfig+0x5c0>)
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ed8:	e00d      	b.n	8008ef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eda:	f7fe f8b3 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8008ede:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ee0:	e009      	b.n	8008ef6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ee8:	e005      	b.n	8008ef6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ef4:	bf00      	nop
    }

    if (pclk != 0U)
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d028      	beq.n	8008f4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	4a10      	ldr	r2, [pc, #64]	; (8008f44 <UART_SetConfig+0x5c4>)
 8008f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f06:	461a      	mov	r2, r3
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	441a      	add	r2, r3
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	2b0f      	cmp	r3, #15
 8008f24:	d910      	bls.n	8008f48 <UART_SetConfig+0x5c8>
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2c:	d20c      	bcs.n	8008f48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	60da      	str	r2, [r3, #12]
 8008f38:	e009      	b.n	8008f4e <UART_SetConfig+0x5ce>
 8008f3a:	bf00      	nop
 8008f3c:	40008000 	.word	0x40008000
 8008f40:	00f42400 	.word	0x00f42400
 8008f44:	08015644 	.word	0x08015644
      }
      else
      {
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2200      	movs	r2, #0
 8008f62:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2200      	movs	r2, #0
 8008f68:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008f6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3730      	adds	r7, #48	; 0x30
 8008f72:	46bd      	mov	sp, r7
 8008f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900c:	f003 0310 	and.w	r3, r3, #16
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01a      	beq.n	800908e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009076:	d10a      	bne.n	800908e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	605a      	str	r2, [r3, #4]
  }
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b098      	sub	sp, #96	; 0x60
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090cc:	f7fa fafc 	bl	80036c8 <HAL_GetTick>
 80090d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b08      	cmp	r3, #8
 80090de:	d12f      	bne.n	8009140 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090e8:	2200      	movs	r2, #0
 80090ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f88e 	bl	8009210 <UART_WaitOnFlagUntilTimeout>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d022      	beq.n	8009140 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800910e:	653b      	str	r3, [r7, #80]	; 0x50
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009118:	647b      	str	r3, [r7, #68]	; 0x44
 800911a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800911e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e063      	b.n	8009208 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b04      	cmp	r3, #4
 800914c:	d149      	bne.n	80091e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800914e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009156:	2200      	movs	r2, #0
 8009158:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f857 	bl	8009210 <UART_WaitOnFlagUntilTimeout>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d03c      	beq.n	80091e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	623b      	str	r3, [r7, #32]
   return(result);
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800917c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009186:	633b      	str	r3, [r7, #48]	; 0x30
 8009188:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e6      	bne.n	8009168 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f023 0301 	bic.w	r3, r3, #1
 80091b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3308      	adds	r3, #8
 80091b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ba:	61fa      	str	r2, [r7, #28]
 80091bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	69b9      	ldr	r1, [r7, #24]
 80091c0:	69fa      	ldr	r2, [r7, #28]
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	617b      	str	r3, [r7, #20]
   return(result);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e5      	bne.n	800919a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e012      	b.n	8009208 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3758      	adds	r7, #88	; 0x58
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	4613      	mov	r3, r2
 800921e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009220:	e04f      	b.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009228:	d04b      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800922a:	f7fa fa4d 	bl	80036c8 <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	429a      	cmp	r2, r3
 8009238:	d302      	bcc.n	8009240 <UART_WaitOnFlagUntilTimeout+0x30>
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e04e      	b.n	80092e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b00      	cmp	r3, #0
 8009250:	d037      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b80      	cmp	r3, #128	; 0x80
 8009256:	d034      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b40      	cmp	r3, #64	; 0x40
 800925c:	d031      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b08      	cmp	r3, #8
 800926a:	d110      	bne.n	800928e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2208      	movs	r2, #8
 8009272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f838 	bl	80092ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2208      	movs	r2, #8
 800927e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e029      	b.n	80092e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800929c:	d111      	bne.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 f81e 	bl	80092ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e00f      	b.n	80092e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69da      	ldr	r2, [r3, #28]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4013      	ands	r3, r2
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	bf0c      	ite	eq
 80092d2:	2301      	moveq	r3, #1
 80092d4:	2300      	movne	r3, #0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	461a      	mov	r2, r3
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d0a0      	beq.n	8009222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b095      	sub	sp, #84	; 0x54
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009310:	643b      	str	r3, [r7, #64]	; 0x40
 8009312:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e6      	bne.n	80092f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3308      	adds	r3, #8
 800932a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	61fb      	str	r3, [r7, #28]
   return(result);
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3308      	adds	r3, #8
 8009346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800934a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800934e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e3      	bne.n	8009324 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009360:	2b01      	cmp	r3, #1
 8009362:	d118      	bne.n	8009396 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	60bb      	str	r3, [r7, #8]
   return(result);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f023 0310 	bic.w	r3, r3, #16
 8009378:	647b      	str	r3, [r7, #68]	; 0x44
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009382:	61bb      	str	r3, [r7, #24]
 8009384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	6979      	ldr	r1, [r7, #20]
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	613b      	str	r3, [r7, #16]
   return(result);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e6      	bne.n	8009364 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80093aa:	bf00      	nop
 80093ac:	3754      	adds	r7, #84	; 0x54
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b085      	sub	sp, #20
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_UARTEx_DisableFifoMode+0x16>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e027      	b.n	800941c <HAL_UARTEx_DisableFifoMode+0x66>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2224      	movs	r2, #36	; 0x24
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800943c:	2302      	movs	r3, #2
 800943e:	e02d      	b.n	800949c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2224      	movs	r2, #36	; 0x24
 800944c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f84f 	bl	8009520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e02d      	b.n	8009518 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	; 0x24
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0201 	bic.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f811 	bl	8009520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800952c:	2b00      	cmp	r3, #0
 800952e:	d108      	bne.n	8009542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009540:	e031      	b.n	80095a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009542:	2308      	movs	r3, #8
 8009544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009546:	2308      	movs	r3, #8
 8009548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	0e5b      	lsrs	r3, r3, #25
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 0307 	and.w	r3, r3, #7
 8009558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	0f5b      	lsrs	r3, r3, #29
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	7b3a      	ldrb	r2, [r7, #12]
 800956e:	4911      	ldr	r1, [pc, #68]	; (80095b4 <UARTEx_SetNbDataToProcess+0x94>)
 8009570:	5c8a      	ldrb	r2, [r1, r2]
 8009572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009576:	7b3a      	ldrb	r2, [r7, #12]
 8009578:	490f      	ldr	r1, [pc, #60]	; (80095b8 <UARTEx_SetNbDataToProcess+0x98>)
 800957a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800957c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009580:	b29a      	uxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	7b7a      	ldrb	r2, [r7, #13]
 800958c:	4909      	ldr	r1, [pc, #36]	; (80095b4 <UARTEx_SetNbDataToProcess+0x94>)
 800958e:	5c8a      	ldrb	r2, [r1, r2]
 8009590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009594:	7b7a      	ldrb	r2, [r7, #13]
 8009596:	4908      	ldr	r1, [pc, #32]	; (80095b8 <UARTEx_SetNbDataToProcess+0x98>)
 8009598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800959a:	fb93 f3f2 	sdiv	r3, r3, r2
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	0801565c 	.word	0x0801565c
 80095b8:	08015664 	.word	0x08015664

080095bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095f2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	b29b      	uxth	r3, r3
 8009604:	43db      	mvns	r3, r3
 8009606:	b29b      	uxth	r3, r3
 8009608:	4013      	ands	r3, r2
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	1d3b      	adds	r3, r7, #4
 800962a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800965c:	b480      	push	{r7}
 800965e:	b09d      	sub	sp, #116	; 0x74
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800967e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009682:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	78db      	ldrb	r3, [r3, #3]
 800968a:	2b03      	cmp	r3, #3
 800968c:	d81f      	bhi.n	80096ce <USB_ActivateEndpoint+0x72>
 800968e:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <USB_ActivateEndpoint+0x38>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096a5 	.word	0x080096a5
 8009698:	080096c1 	.word	0x080096c1
 800969c:	080096d7 	.word	0x080096d7
 80096a0:	080096b3 	.word	0x080096b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80096a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096b0:	e012      	b.n	80096d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096be:	e00b      	b.n	80096d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096cc:	e004      	b.n	80096d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096d4:	e000      	b.n	80096d8 <USB_ActivateEndpoint+0x7c>
      break;
 80096d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	441a      	add	r2, r3
 80096e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	b29b      	uxth	r3, r3
 8009708:	b21b      	sxth	r3, r3
 800970a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009712:	b21a      	sxth	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b21b      	sxth	r3, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	b21b      	sxth	r3, r3
 800971e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	441a      	add	r2, r3
 800972c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009740:	b29b      	uxth	r3, r3
 8009742:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	7b1b      	ldrb	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f040 8178 	bne.w	8009a3e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 8084 	beq.w	8009860 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	61bb      	str	r3, [r7, #24]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009762:	b29b      	uxth	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	4413      	add	r3, r2
 800976a:	61bb      	str	r3, [r7, #24]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	00da      	lsls	r2, r3, #3
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	4413      	add	r3, r2
 8009776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800977a:	617b      	str	r3, [r7, #20]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	88db      	ldrh	r3, [r3, #6]
 8009780:	085b      	lsrs	r3, r3, #1
 8009782:	b29b      	uxth	r3, r3
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	827b      	strh	r3, [r7, #18]
 800979a:	8a7b      	ldrh	r3, [r7, #18]
 800979c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01b      	beq.n	80097dc <USB_ActivateEndpoint+0x180>
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ba:	823b      	strh	r3, [r7, #16]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	441a      	add	r2, r3
 80097c6:	8a3b      	ldrh	r3, [r7, #16]
 80097c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097d8:	b29b      	uxth	r3, r3
 80097da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	78db      	ldrb	r3, [r3, #3]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d020      	beq.n	8009826 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097fa:	81bb      	strh	r3, [r7, #12]
 80097fc:	89bb      	ldrh	r3, [r7, #12]
 80097fe:	f083 0320 	eor.w	r3, r3, #32
 8009802:	81bb      	strh	r3, [r7, #12]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	441a      	add	r2, r3
 800980e:	89bb      	ldrh	r3, [r7, #12]
 8009810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800981c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009820:	b29b      	uxth	r3, r3
 8009822:	8013      	strh	r3, [r2, #0]
 8009824:	e2d5      	b.n	8009dd2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b29b      	uxth	r3, r3
 8009834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800983c:	81fb      	strh	r3, [r7, #14]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	441a      	add	r2, r3
 8009848:	89fb      	ldrh	r3, [r7, #14]
 800984a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800984e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985a:	b29b      	uxth	r3, r3
 800985c:	8013      	strh	r3, [r2, #0]
 800985e:	e2b8      	b.n	8009dd2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800986a:	b29b      	uxth	r3, r3
 800986c:	461a      	mov	r2, r3
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	4413      	add	r3, r2
 8009872:	633b      	str	r3, [r7, #48]	; 0x30
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	00da      	lsls	r2, r3, #3
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	4413      	add	r3, r2
 800987e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	88db      	ldrh	r3, [r3, #6]
 8009888:	085b      	lsrs	r3, r3, #1
 800988a:	b29b      	uxth	r3, r3
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800989e:	b29b      	uxth	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	4413      	add	r3, r2
 80098a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	00da      	lsls	r2, r3, #3
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	4413      	add	r3, r2
 80098b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	801a      	strh	r2, [r3, #0]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b3e      	cmp	r3, #62	; 0x3e
 80098ce:	d91d      	bls.n	800990c <USB_ActivateEndpoint+0x2b0>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	095b      	lsrs	r3, r3, #5
 80098d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	f003 031f 	and.w	r3, r3, #31
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d102      	bne.n	80098ea <USB_ActivateEndpoint+0x28e>
 80098e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098e6:	3b01      	subs	r3, #1
 80098e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	029b      	lsls	r3, r3, #10
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	4313      	orrs	r3, r2
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009904:	b29a      	uxth	r2, r3
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	801a      	strh	r2, [r3, #0]
 800990a:	e026      	b.n	800995a <USB_ActivateEndpoint+0x2fe>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <USB_ActivateEndpoint+0x2ce>
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29b      	uxth	r3, r3
 800991a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800991e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009922:	b29a      	uxth	r2, r3
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	801a      	strh	r2, [r3, #0]
 8009928:	e017      	b.n	800995a <USB_ActivateEndpoint+0x2fe>
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	085b      	lsrs	r3, r3, #1
 8009930:	66bb      	str	r3, [r7, #104]	; 0x68
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <USB_ActivateEndpoint+0x2e8>
 800993e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009940:	3301      	adds	r3, #1
 8009942:	66bb      	str	r3, [r7, #104]	; 0x68
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29a      	uxth	r2, r3
 800994a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800994c:	b29b      	uxth	r3, r3
 800994e:	029b      	lsls	r3, r3, #10
 8009950:	b29b      	uxth	r3, r3
 8009952:	4313      	orrs	r3, r2
 8009954:	b29a      	uxth	r2, r3
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	847b      	strh	r3, [r7, #34]	; 0x22
 8009968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800996a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01b      	beq.n	80099aa <USB_ActivateEndpoint+0x34e>
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009988:	843b      	strh	r3, [r7, #32]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	441a      	add	r2, r3
 8009994:	8c3b      	ldrh	r3, [r7, #32]
 8009996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800999a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d124      	bne.n	80099fc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c8:	83bb      	strh	r3, [r7, #28]
 80099ca:	8bbb      	ldrh	r3, [r7, #28]
 80099cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099d0:	83bb      	strh	r3, [r7, #28]
 80099d2:	8bbb      	ldrh	r3, [r7, #28]
 80099d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099d8:	83bb      	strh	r3, [r7, #28]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	441a      	add	r2, r3
 80099e4:	8bbb      	ldrh	r3, [r7, #28]
 80099e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	8013      	strh	r3, [r2, #0]
 80099fa:	e1ea      	b.n	8009dd2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a12:	83fb      	strh	r3, [r7, #30]
 8009a14:	8bfb      	ldrh	r3, [r7, #30]
 8009a16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a1a:	83fb      	strh	r3, [r7, #30]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	441a      	add	r2, r3
 8009a26:	8bfb      	ldrh	r3, [r7, #30]
 8009a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	8013      	strh	r3, [r2, #0]
 8009a3c:	e1c9      	b.n	8009dd2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	78db      	ldrb	r3, [r3, #3]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d11e      	bne.n	8009a84 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	441a      	add	r2, r3
 8009a6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	8013      	strh	r3, [r2, #0]
 8009a82:	e01d      	b.n	8009ac0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	441a      	add	r2, r3
 8009aa8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ad0:	4413      	add	r3, r2
 8009ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	00da      	lsls	r2, r3, #3
 8009ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	891b      	ldrh	r3, [r3, #8]
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009af2:	801a      	strh	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	657b      	str	r3, [r7, #84]	; 0x54
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b04:	4413      	add	r3, r2
 8009b06:	657b      	str	r3, [r7, #84]	; 0x54
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	00da      	lsls	r2, r3, #3
 8009b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b10:	4413      	add	r3, r2
 8009b12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b16:	653b      	str	r3, [r7, #80]	; 0x50
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	895b      	ldrh	r3, [r3, #10]
 8009b1c:	085b      	lsrs	r3, r3, #1
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 8093 	bne.w	8009c58 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d01b      	beq.n	8009b86 <USB_ActivateEndpoint+0x52a>
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	441a      	add	r2, r3
 8009b70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d01b      	beq.n	8009bd6 <USB_ActivateEndpoint+0x57a>
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	441a      	add	r2, r3
 8009bc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bec:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bf4:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bf6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bfc:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	441a      	add	r2, r3
 8009c08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	441a      	add	r2, r3
 8009c40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	8013      	strh	r3, [r2, #0]
 8009c56:	e0bc      	b.n	8009dd2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01d      	beq.n	8009cb0 <USB_ActivateEndpoint+0x654>
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	441a      	add	r2, r3
 8009c98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009cc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01d      	beq.n	8009d08 <USB_ActivateEndpoint+0x6ac>
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	441a      	add	r2, r3
 8009cf0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	78db      	ldrb	r3, [r3, #3]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d024      	beq.n	8009d5a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d2e:	f083 0320 	eor.w	r3, r3, #32
 8009d32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	441a      	add	r2, r3
 8009d40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	8013      	strh	r3, [r2, #0]
 8009d58:	e01d      	b.n	8009d96 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d70:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	441a      	add	r2, r3
 8009d7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	441a      	add	r2, r3
 8009dba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009dd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3774      	adds	r7, #116	; 0x74
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop

08009de4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b08d      	sub	sp, #52	; 0x34
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	7b1b      	ldrb	r3, [r3, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 808e 	bne.w	8009f14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d044      	beq.n	8009e8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	81bb      	strh	r3, [r7, #12]
 8009e0e:	89bb      	ldrh	r3, [r7, #12]
 8009e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01b      	beq.n	8009e50 <USB_DeactivateEndpoint+0x6c>
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e2e:	817b      	strh	r3, [r7, #10]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	441a      	add	r2, r3
 8009e3a:	897b      	ldrh	r3, [r7, #10]
 8009e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e66:	813b      	strh	r3, [r7, #8]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	441a      	add	r2, r3
 8009e72:	893b      	ldrh	r3, [r7, #8]
 8009e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	8013      	strh	r3, [r2, #0]
 8009e88:	e192      	b.n	800a1b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	827b      	strh	r3, [r7, #18]
 8009e98:	8a7b      	ldrh	r3, [r7, #18]
 8009e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01b      	beq.n	8009eda <USB_DeactivateEndpoint+0xf6>
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb8:	823b      	strh	r3, [r7, #16]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	441a      	add	r2, r3
 8009ec4:	8a3b      	ldrh	r3, [r7, #16]
 8009ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef0:	81fb      	strh	r3, [r7, #14]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	441a      	add	r2, r3
 8009efc:	89fb      	ldrh	r3, [r7, #14]
 8009efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	8013      	strh	r3, [r2, #0]
 8009f12:	e14d      	b.n	800a1b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f040 80a5 	bne.w	800a068 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	843b      	strh	r3, [r7, #32]
 8009f2c:	8c3b      	ldrh	r3, [r7, #32]
 8009f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01b      	beq.n	8009f6e <USB_DeactivateEndpoint+0x18a>
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4c:	83fb      	strh	r3, [r7, #30]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	8bfb      	ldrh	r3, [r7, #30]
 8009f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	83bb      	strh	r3, [r7, #28]
 8009f7c:	8bbb      	ldrh	r3, [r7, #28]
 8009f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01b      	beq.n	8009fbe <USB_DeactivateEndpoint+0x1da>
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9c:	837b      	strh	r3, [r7, #26]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	441a      	add	r2, r3
 8009fa8:	8b7b      	ldrh	r3, [r7, #26]
 8009faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fd4:	833b      	strh	r3, [r7, #24]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	441a      	add	r2, r3
 8009fe0:	8b3b      	ldrh	r3, [r7, #24]
 8009fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	b29b      	uxth	r3, r3
 800a004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00c:	82fb      	strh	r3, [r7, #22]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	441a      	add	r2, r3
 800a018:	8afb      	ldrh	r3, [r7, #22]
 800a01a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a01e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a044:	82bb      	strh	r3, [r7, #20]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	441a      	add	r2, r3
 800a050:	8abb      	ldrh	r3, [r7, #20]
 800a052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a05a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a062:	b29b      	uxth	r3, r3
 800a064:	8013      	strh	r3, [r2, #0]
 800a066:	e0a3      	b.n	800a1b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01b      	beq.n	800a0b8 <USB_DeactivateEndpoint+0x2d4>
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a096:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	441a      	add	r2, r3
 800a0a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a0c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01b      	beq.n	800a108 <USB_DeactivateEndpoint+0x324>
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e6:	853b      	strh	r3, [r7, #40]	; 0x28
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	441a      	add	r2, r3
 800a0f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a100:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a104:	b29b      	uxth	r3, r3
 800a106:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	441a      	add	r2, r3
 800a12a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a156:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	441a      	add	r2, r3
 800a162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a16c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a174:	b29b      	uxth	r3, r3
 800a176:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a18a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	441a      	add	r2, r3
 800a19a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a19c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3734      	adds	r7, #52	; 0x34
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b0c2      	sub	sp, #264	; 0x108
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1cc:	6018      	str	r0, [r3, #0]
 800a1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	785b      	ldrb	r3, [r3, #1]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	f040 86b7 	bne.w	800af58 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	429a      	cmp	r2, r3
 800a204:	d908      	bls.n	800a218 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a216:	e007      	b.n	800a228 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	7b1b      	ldrb	r3, [r3, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d13a      	bne.n	800a2ae <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a23c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6959      	ldr	r1, [r3, #20]
 800a244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	88da      	ldrh	r2, [r3, #6]
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a254:	b29b      	uxth	r3, r3
 800a256:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a25a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a25e:	6800      	ldr	r0, [r0, #0]
 800a260:	f001 fc98 	bl	800bb94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a27e:	b29b      	uxth	r3, r3
 800a280:	461a      	mov	r2, r3
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	4413      	add	r3, r2
 800a286:	613b      	str	r3, [r7, #16]
 800a288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	00da      	lsls	r2, r3, #3
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	4413      	add	r3, r2
 800a29a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	f000 be1f 	b.w	800aeec <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	78db      	ldrb	r3, [r3, #3]
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	f040 8462 	bne.w	800ab84 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6a1a      	ldr	r2, [r3, #32]
 800a2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	f240 83df 	bls.w	800aa9c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a304:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	441a      	add	r2, r3
 800a322:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a32a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a32e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a336:	b29b      	uxth	r3, r3
 800a338:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6a1a      	ldr	r2, [r3, #32]
 800a346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34a:	1ad2      	subs	r2, r2, r3
 800a34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b29b      	uxth	r3, r3
 800a376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 81c7 	beq.w	800a70e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	633b      	str	r3, [r7, #48]	; 0x30
 800a38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	785b      	ldrb	r3, [r3, #1]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d177      	bne.n	800a48c <USB_EPStartXfer+0x2ce>
 800a39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	4413      	add	r3, r2
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	00da      	lsls	r2, r3, #3
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	801a      	strh	r2, [r3, #0]
 800a3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ec:	2b3e      	cmp	r3, #62	; 0x3e
 800a3ee:	d921      	bls.n	800a434 <USB_EPStartXfer+0x276>
 800a3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f4:	095b      	lsrs	r3, r3, #5
 800a3f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fe:	f003 031f 	and.w	r3, r3, #31
 800a402:	2b00      	cmp	r3, #0
 800a404:	d104      	bne.n	800a410 <USB_EPStartXfer+0x252>
 800a406:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a40a:	3b01      	subs	r3, #1
 800a40c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	b29a      	uxth	r2, r3
 800a416:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	029b      	lsls	r3, r3, #10
 800a41e:	b29b      	uxth	r3, r3
 800a420:	4313      	orrs	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	801a      	strh	r2, [r3, #0]
 800a432:	e050      	b.n	800a4d6 <USB_EPStartXfer+0x318>
 800a434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <USB_EPStartXfer+0x294>
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	b29b      	uxth	r3, r3
 800a442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	801a      	strh	r2, [r3, #0]
 800a450:	e041      	b.n	800a4d6 <USB_EPStartXfer+0x318>
 800a452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a456:	085b      	lsrs	r3, r3, #1
 800a458:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <USB_EPStartXfer+0x2b4>
 800a468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a46c:	3301      	adds	r3, #1
 800a46e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	b29a      	uxth	r2, r3
 800a478:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	029b      	lsls	r3, r3, #10
 800a480:	b29b      	uxth	r3, r3
 800a482:	4313      	orrs	r3, r2
 800a484:	b29a      	uxth	r2, r3
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	e024      	b.n	800a4d6 <USB_EPStartXfer+0x318>
 800a48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d11c      	bne.n	800a4d6 <USB_EPStartXfer+0x318>
 800a49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	4413      	add	r3, r2
 800a4b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	00da      	lsls	r2, r3, #3
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	895b      	ldrh	r3, [r3, #10]
 800a4e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6959      	ldr	r1, [r3, #20]
 800a4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a500:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a504:	6800      	ldr	r0, [r0, #0]
 800a506:	f001 fb45 	bl	800bb94 <USB_WritePMA>
            ep->xfer_buff += len;
 800a50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	695a      	ldr	r2, [r3, #20]
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a51a:	441a      	add	r2, r3
 800a51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6a1a      	ldr	r2, [r3, #32]
 800a534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	429a      	cmp	r2, r3
 800a542:	d90f      	bls.n	800a564 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6a1a      	ldr	r2, [r3, #32]
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a554:	1ad2      	subs	r2, r2, r3
 800a556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	621a      	str	r2, [r3, #32]
 800a562:	e00e      	b.n	800a582 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2200      	movs	r2, #0
 800a580:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d177      	bne.n	800a682 <USB_EPStartXfer+0x4c4>
 800a592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	61bb      	str	r3, [r7, #24]
 800a59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	00da      	lsls	r2, r3, #3
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5cc:	617b      	str	r3, [r7, #20]
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	801a      	strh	r2, [r3, #0]
 800a5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e2:	2b3e      	cmp	r3, #62	; 0x3e
 800a5e4:	d921      	bls.n	800a62a <USB_EPStartXfer+0x46c>
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ea:	095b      	lsrs	r3, r3, #5
 800a5ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f4:	f003 031f 	and.w	r3, r3, #31
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d104      	bne.n	800a606 <USB_EPStartXfer+0x448>
 800a5fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a600:	3b01      	subs	r3, #1
 800a602:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a610:	b29b      	uxth	r3, r3
 800a612:	029b      	lsls	r3, r3, #10
 800a614:	b29b      	uxth	r3, r3
 800a616:	4313      	orrs	r3, r2
 800a618:	b29b      	uxth	r3, r3
 800a61a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a61e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a622:	b29a      	uxth	r2, r3
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	801a      	strh	r2, [r3, #0]
 800a628:	e056      	b.n	800a6d8 <USB_EPStartXfer+0x51a>
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10a      	bne.n	800a648 <USB_EPStartXfer+0x48a>
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29b      	uxth	r3, r3
 800a638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a63c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a640:	b29a      	uxth	r2, r3
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	801a      	strh	r2, [r3, #0]
 800a646:	e047      	b.n	800a6d8 <USB_EPStartXfer+0x51a>
 800a648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64c:	085b      	lsrs	r3, r3, #1
 800a64e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d004      	beq.n	800a668 <USB_EPStartXfer+0x4aa>
 800a65e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a662:	3301      	adds	r3, #1
 800a664:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	881b      	ldrh	r3, [r3, #0]
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a672:	b29b      	uxth	r3, r3
 800a674:	029b      	lsls	r3, r3, #10
 800a676:	b29b      	uxth	r3, r3
 800a678:	4313      	orrs	r3, r2
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	801a      	strh	r2, [r3, #0]
 800a680:	e02a      	b.n	800a6d8 <USB_EPStartXfer+0x51a>
 800a682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d122      	bne.n	800a6d8 <USB_EPStartXfer+0x51a>
 800a692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	623b      	str	r3, [r7, #32]
 800a69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	623b      	str	r3, [r7, #32]
 800a6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	00da      	lsls	r2, r3, #3
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6cc:	61fb      	str	r3, [r7, #28]
 800a6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	891b      	ldrh	r3, [r3, #8]
 800a6e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6959      	ldr	r1, [r3, #20]
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a702:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a706:	6800      	ldr	r0, [r0, #0]
 800a708:	f001 fa44 	bl	800bb94 <USB_WritePMA>
 800a70c:	e3ee      	b.n	800aeec <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	785b      	ldrb	r3, [r3, #1]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d177      	bne.n	800a80e <USB_EPStartXfer+0x650>
 800a71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	64bb      	str	r3, [r7, #72]	; 0x48
 800a72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a72e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a738:	b29b      	uxth	r3, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a73e:	4413      	add	r3, r2
 800a740:	64bb      	str	r3, [r7, #72]	; 0x48
 800a742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	00da      	lsls	r2, r3, #3
 800a750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a752:	4413      	add	r3, r2
 800a754:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a758:	647b      	str	r3, [r7, #68]	; 0x44
 800a75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a764:	b29a      	uxth	r2, r3
 800a766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a768:	801a      	strh	r2, [r3, #0]
 800a76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a76e:	2b3e      	cmp	r3, #62	; 0x3e
 800a770:	d921      	bls.n	800a7b6 <USB_EPStartXfer+0x5f8>
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a776:	095b      	lsrs	r3, r3, #5
 800a778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	f003 031f 	and.w	r3, r3, #31
 800a784:	2b00      	cmp	r3, #0
 800a786:	d104      	bne.n	800a792 <USB_EPStartXfer+0x5d4>
 800a788:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a78c:	3b01      	subs	r3, #1
 800a78e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29a      	uxth	r2, r3
 800a798:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	029b      	lsls	r3, r3, #10
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	e056      	b.n	800a864 <USB_EPStartXfer+0x6a6>
 800a7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <USB_EPStartXfer+0x616>
 800a7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	e047      	b.n	800a864 <USB_EPStartXfer+0x6a6>
 800a7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d8:	085b      	lsrs	r3, r3, #1
 800a7da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <USB_EPStartXfer+0x636>
 800a7ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	029b      	lsls	r3, r3, #10
 800a802:	b29b      	uxth	r3, r3
 800a804:	4313      	orrs	r3, r2
 800a806:	b29a      	uxth	r2, r3
 800a808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80a:	801a      	strh	r2, [r3, #0]
 800a80c:	e02a      	b.n	800a864 <USB_EPStartXfer+0x6a6>
 800a80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	785b      	ldrb	r3, [r3, #1]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d122      	bne.n	800a864 <USB_EPStartXfer+0x6a6>
 800a81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	653b      	str	r3, [r7, #80]	; 0x50
 800a82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a838:	b29b      	uxth	r3, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a83e:	4413      	add	r3, r2
 800a840:	653b      	str	r3, [r7, #80]	; 0x50
 800a842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	00da      	lsls	r2, r3, #3
 800a850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a852:	4413      	add	r3, r2
 800a854:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85e:	b29a      	uxth	r2, r3
 800a860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a862:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	891b      	ldrh	r3, [r3, #8]
 800a870:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6959      	ldr	r1, [r3, #20]
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a884:	b29b      	uxth	r3, r3
 800a886:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a88a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a88e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a892:	6800      	ldr	r0, [r0, #0]
 800a894:	f001 f97e 	bl	800bb94 <USB_WritePMA>
            ep->xfer_buff += len;
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	695a      	ldr	r2, [r3, #20]
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a8:	441a      	add	r2, r3
 800a8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6a1a      	ldr	r2, [r3, #32]
 800a8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d90f      	bls.n	800a8f2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6a1a      	ldr	r2, [r3, #32]
 800a8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	621a      	str	r2, [r3, #32]
 800a8f0:	e00e      	b.n	800a910 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2200      	movs	r2, #0
 800a90e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	643b      	str	r3, [r7, #64]	; 0x40
 800a91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	785b      	ldrb	r3, [r3, #1]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d177      	bne.n	800aa1c <USB_EPStartXfer+0x85e>
 800a92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	63bb      	str	r3, [r7, #56]	; 0x38
 800a938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a946:	b29b      	uxth	r3, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	4413      	add	r3, r2
 800a94e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	00da      	lsls	r2, r3, #3
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	4413      	add	r3, r2
 800a962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a966:	637b      	str	r3, [r7, #52]	; 0x34
 800a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a972:	b29a      	uxth	r2, r3
 800a974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a976:	801a      	strh	r2, [r3, #0]
 800a978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97c:	2b3e      	cmp	r3, #62	; 0x3e
 800a97e:	d921      	bls.n	800a9c4 <USB_EPStartXfer+0x806>
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	095b      	lsrs	r3, r3, #5
 800a986:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98e:	f003 031f 	and.w	r3, r3, #31
 800a992:	2b00      	cmp	r3, #0
 800a994:	d104      	bne.n	800a9a0 <USB_EPStartXfer+0x7e2>
 800a996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a99a:	3b01      	subs	r3, #1
 800a99c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	029b      	lsls	r3, r3, #10
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c0:	801a      	strh	r2, [r3, #0]
 800a9c2:	e050      	b.n	800aa66 <USB_EPStartXfer+0x8a8>
 800a9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <USB_EPStartXfer+0x824>
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	801a      	strh	r2, [r3, #0]
 800a9e0:	e041      	b.n	800aa66 <USB_EPStartXfer+0x8a8>
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e6:	085b      	lsrs	r3, r3, #1
 800a9e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <USB_EPStartXfer+0x844>
 800a9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	029b      	lsls	r3, r3, #10
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	4313      	orrs	r3, r2
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	e024      	b.n	800aa66 <USB_EPStartXfer+0x8a8>
 800aa1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	785b      	ldrb	r3, [r3, #1]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d11c      	bne.n	800aa66 <USB_EPStartXfer+0x8a8>
 800aa2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa40:	4413      	add	r3, r2
 800aa42:	643b      	str	r3, [r7, #64]	; 0x40
 800aa44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	00da      	lsls	r2, r3, #3
 800aa52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa54:	4413      	add	r3, r2
 800aa56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	895b      	ldrh	r3, [r3, #10]
 800aa72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6959      	ldr	r1, [r3, #20]
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa94:	6800      	ldr	r0, [r0, #0]
 800aa96:	f001 f87d 	bl	800bb94 <USB_WritePMA>
 800aa9a:	e227      	b.n	800aeec <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aaac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	441a      	add	r2, r3
 800aaf0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aaf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aafc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ab08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	461a      	mov	r2, r3
 800ab26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab28:	4413      	add	r3, r2
 800ab2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	00da      	lsls	r2, r3, #3
 800ab3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab42:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	891b      	ldrh	r3, [r3, #8]
 800ab5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6959      	ldr	r1, [r3, #20]
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab7c:	6800      	ldr	r0, [r0, #0]
 800ab7e:	f001 f809 	bl	800bb94 <USB_WritePMA>
 800ab82:	e1b3      	b.n	800aeec <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6a1a      	ldr	r2, [r3, #32]
 800ab90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 80c6 	beq.w	800ad56 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	673b      	str	r3, [r7, #112]	; 0x70
 800abd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	785b      	ldrb	r3, [r3, #1]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d177      	bne.n	800acd6 <USB_EPStartXfer+0xb18>
 800abe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	461a      	mov	r2, r3
 800ac04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac06:	4413      	add	r3, r2
 800ac08:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	00da      	lsls	r2, r3, #3
 800ac18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac20:	667b      	str	r3, [r7, #100]	; 0x64
 800ac22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac30:	801a      	strh	r2, [r3, #0]
 800ac32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac36:	2b3e      	cmp	r3, #62	; 0x3e
 800ac38:	d921      	bls.n	800ac7e <USB_EPStartXfer+0xac0>
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3e:	095b      	lsrs	r3, r3, #5
 800ac40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d104      	bne.n	800ac5a <USB_EPStartXfer+0xa9c>
 800ac50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac54:	3b01      	subs	r3, #1
 800ac56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	029b      	lsls	r3, r3, #10
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac7a:	801a      	strh	r2, [r3, #0]
 800ac7c:	e050      	b.n	800ad20 <USB_EPStartXfer+0xb62>
 800ac7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10a      	bne.n	800ac9c <USB_EPStartXfer+0xade>
 800ac86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	e041      	b.n	800ad20 <USB_EPStartXfer+0xb62>
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	085b      	lsrs	r3, r3, #1
 800aca2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d004      	beq.n	800acbc <USB_EPStartXfer+0xafe>
 800acb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800acb6:	3301      	adds	r3, #1
 800acb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800acbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	b29b      	uxth	r3, r3
 800accc:	4313      	orrs	r3, r2
 800acce:	b29a      	uxth	r2, r3
 800acd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd2:	801a      	strh	r2, [r3, #0]
 800acd4:	e024      	b.n	800ad20 <USB_EPStartXfer+0xb62>
 800acd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	785b      	ldrb	r3, [r3, #1]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d11c      	bne.n	800ad20 <USB_EPStartXfer+0xb62>
 800ace6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acfa:	4413      	add	r3, r2
 800acfc:	673b      	str	r3, [r7, #112]	; 0x70
 800acfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	00da      	lsls	r2, r3, #3
 800ad0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad0e:	4413      	add	r3, r2
 800ad10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad14:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ad20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	895b      	ldrh	r3, [r3, #10]
 800ad2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6959      	ldr	r1, [r3, #20]
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad4e:	6800      	ldr	r0, [r0, #0]
 800ad50:	f000 ff20 	bl	800bb94 <USB_WritePMA>
 800ad54:	e0ca      	b.n	800aeec <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d177      	bne.n	800ae56 <USB_EPStartXfer+0xc98>
 800ad66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	461a      	mov	r2, r3
 800ad84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad86:	4413      	add	r3, r2
 800ad88:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	00da      	lsls	r2, r3, #3
 800ad98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ada0:	67bb      	str	r3, [r7, #120]	; 0x78
 800ada2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adac:	b29a      	uxth	r2, r3
 800adae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb0:	801a      	strh	r2, [r3, #0]
 800adb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb6:	2b3e      	cmp	r3, #62	; 0x3e
 800adb8:	d921      	bls.n	800adfe <USB_EPStartXfer+0xc40>
 800adba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbe:	095b      	lsrs	r3, r3, #5
 800adc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc8:	f003 031f 	and.w	r3, r3, #31
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d104      	bne.n	800adda <USB_EPStartXfer+0xc1c>
 800add0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800add4:	3b01      	subs	r3, #1
 800add6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29a      	uxth	r2, r3
 800ade0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	029b      	lsls	r3, r3, #10
 800ade8:	b29b      	uxth	r3, r3
 800adea:	4313      	orrs	r3, r2
 800adec:	b29b      	uxth	r3, r3
 800adee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adfa:	801a      	strh	r2, [r3, #0]
 800adfc:	e05c      	b.n	800aeb8 <USB_EPStartXfer+0xcfa>
 800adfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10a      	bne.n	800ae1c <USB_EPStartXfer+0xc5e>
 800ae06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae18:	801a      	strh	r2, [r3, #0]
 800ae1a:	e04d      	b.n	800aeb8 <USB_EPStartXfer+0xcfa>
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae20:	085b      	lsrs	r3, r3, #1
 800ae22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2a:	f003 0301 	and.w	r3, r3, #1
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d004      	beq.n	800ae3c <USB_EPStartXfer+0xc7e>
 800ae32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae36:	3301      	adds	r3, #1
 800ae38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	029b      	lsls	r3, r3, #10
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae52:	801a      	strh	r2, [r3, #0]
 800ae54:	e030      	b.n	800aeb8 <USB_EPStartXfer+0xcfa>
 800ae56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	785b      	ldrb	r3, [r3, #1]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d128      	bne.n	800aeb8 <USB_EPStartXfer+0xcfa>
 800ae66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	461a      	mov	r2, r3
 800ae86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	00da      	lsls	r2, r3, #3
 800ae9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aea2:	4413      	add	r3, r2
 800aea4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aeb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aeb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	891b      	ldrh	r3, [r3, #8]
 800aec4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6959      	ldr	r1, [r3, #20]
 800aed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aede:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aee2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aee6:	6800      	ldr	r0, [r0, #0]
 800aee8:	f000 fe54 	bl	800bb94 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aeec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af12:	817b      	strh	r3, [r7, #10]
 800af14:	897b      	ldrh	r3, [r7, #10]
 800af16:	f083 0310 	eor.w	r3, r3, #16
 800af1a:	817b      	strh	r3, [r7, #10]
 800af1c:	897b      	ldrh	r3, [r7, #10]
 800af1e:	f083 0320 	eor.w	r3, r3, #32
 800af22:	817b      	strh	r3, [r7, #10]
 800af24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	441a      	add	r2, r3
 800af3e:	897b      	ldrh	r3, [r7, #10]
 800af40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af50:	b29b      	uxth	r3, r3
 800af52:	8013      	strh	r3, [r2, #0]
 800af54:	f000 bcde 	b.w	800b914 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800af58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	7b1b      	ldrb	r3, [r3, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 80bb 	bne.w	800b0e0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800af6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699a      	ldr	r2, [r3, #24]
 800af76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	429a      	cmp	r2, r3
 800af84:	d917      	bls.n	800afb6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800af86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800af96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	699a      	ldr	r2, [r3, #24]
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa6:	1ad2      	subs	r2, r2, r3
 800afa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	619a      	str	r2, [r3, #24]
 800afb4:	e00e      	b.n	800afd4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800afb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800afc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2200      	movs	r2, #0
 800afd2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800afd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	461a      	mov	r2, r3
 800aff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aff8:	4413      	add	r3, r2
 800affa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800affe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	00da      	lsls	r2, r3, #3
 800b00c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b010:	4413      	add	r3, r2
 800b012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b01a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	b29b      	uxth	r3, r3
 800b022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b026:	b29a      	uxth	r2, r3
 800b028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b02c:	801a      	strh	r2, [r3, #0]
 800b02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b032:	2b3e      	cmp	r3, #62	; 0x3e
 800b034:	d924      	bls.n	800b080 <USB_EPStartXfer+0xec2>
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03a:	095b      	lsrs	r3, r3, #5
 800b03c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b044:	f003 031f 	and.w	r3, r3, #31
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d104      	bne.n	800b056 <USB_EPStartXfer+0xe98>
 800b04c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b050:	3b01      	subs	r3, #1
 800b052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b062:	b29b      	uxth	r3, r3
 800b064:	029b      	lsls	r3, r3, #10
 800b066:	b29b      	uxth	r3, r3
 800b068:	4313      	orrs	r3, r2
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b074:	b29a      	uxth	r2, r3
 800b076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b07a:	801a      	strh	r2, [r3, #0]
 800b07c:	f000 bc10 	b.w	800b8a0 <USB_EPStartXfer+0x16e2>
 800b080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10c      	bne.n	800b0a2 <USB_EPStartXfer+0xee4>
 800b088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b098:	b29a      	uxth	r2, r3
 800b09a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b09e:	801a      	strh	r2, [r3, #0]
 800b0a0:	e3fe      	b.n	800b8a0 <USB_EPStartXfer+0x16e2>
 800b0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a6:	085b      	lsrs	r3, r3, #1
 800b0a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d004      	beq.n	800b0c2 <USB_EPStartXfer+0xf04>
 800b0b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0bc:	3301      	adds	r3, #1
 800b0be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	029b      	lsls	r3, r3, #10
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0dc:	801a      	strh	r2, [r3, #0]
 800b0de:	e3df      	b.n	800b8a0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	78db      	ldrb	r3, [r3, #3]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	f040 8218 	bne.w	800b522 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b0f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	785b      	ldrb	r3, [r3, #1]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f040 809d 	bne.w	800b23e <USB_EPStartXfer+0x1080>
 800b104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b120:	b29b      	uxth	r3, r3
 800b122:	461a      	mov	r2, r3
 800b124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b128:	4413      	add	r3, r2
 800b12a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	00da      	lsls	r2, r3, #3
 800b13c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b140:	4413      	add	r3, r2
 800b142:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b14a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	b29b      	uxth	r3, r3
 800b152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b156:	b29a      	uxth	r2, r3
 800b158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b15c:	801a      	strh	r2, [r3, #0]
 800b15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	2b3e      	cmp	r3, #62	; 0x3e
 800b16c:	d92b      	bls.n	800b1c6 <USB_EPStartXfer+0x1008>
 800b16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	095b      	lsrs	r3, r3, #5
 800b17c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	f003 031f 	and.w	r3, r3, #31
 800b190:	2b00      	cmp	r3, #0
 800b192:	d104      	bne.n	800b19e <USB_EPStartXfer+0xfe0>
 800b194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b198:	3b01      	subs	r3, #1
 800b19a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b19e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	029b      	lsls	r3, r3, #10
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1c2:	801a      	strh	r2, [r3, #0]
 800b1c4:	e070      	b.n	800b2a8 <USB_EPStartXfer+0x10ea>
 800b1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10c      	bne.n	800b1f0 <USB_EPStartXfer+0x1032>
 800b1d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1ec:	801a      	strh	r2, [r3, #0]
 800b1ee:	e05b      	b.n	800b2a8 <USB_EPStartXfer+0x10ea>
 800b1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	085b      	lsrs	r3, r3, #1
 800b1fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	f003 0301 	and.w	r3, r3, #1
 800b212:	2b00      	cmp	r3, #0
 800b214:	d004      	beq.n	800b220 <USB_EPStartXfer+0x1062>
 800b216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b21a:	3301      	adds	r3, #1
 800b21c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29a      	uxth	r2, r3
 800b228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	029b      	lsls	r3, r3, #10
 800b230:	b29b      	uxth	r3, r3
 800b232:	4313      	orrs	r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b23a:	801a      	strh	r2, [r3, #0]
 800b23c:	e034      	b.n	800b2a8 <USB_EPStartXfer+0x10ea>
 800b23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	785b      	ldrb	r3, [r3, #1]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d12c      	bne.n	800b2a8 <USB_EPStartXfer+0x10ea>
 800b24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	461a      	mov	r2, r3
 800b26e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b272:	4413      	add	r3, r2
 800b274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	00da      	lsls	r2, r3, #3
 800b286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b28a:	4413      	add	r3, r2
 800b28c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b2a6:	801a      	strh	r2, [r3, #0]
 800b2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	785b      	ldrb	r3, [r3, #1]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f040 809d 	bne.w	800b402 <USB_EPStartXfer+0x1244>
 800b2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	00da      	lsls	r2, r3, #3
 800b300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b304:	4413      	add	r3, r2
 800b306:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b30a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b30e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	b29b      	uxth	r3, r3
 800b316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b320:	801a      	strh	r2, [r3, #0]
 800b322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	2b3e      	cmp	r3, #62	; 0x3e
 800b330:	d92b      	bls.n	800b38a <USB_EPStartXfer+0x11cc>
 800b332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	f003 031f 	and.w	r3, r3, #31
 800b354:	2b00      	cmp	r3, #0
 800b356:	d104      	bne.n	800b362 <USB_EPStartXfer+0x11a4>
 800b358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b35c:	3b01      	subs	r3, #1
 800b35e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	b29a      	uxth	r2, r3
 800b36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b36e:	b29b      	uxth	r3, r3
 800b370:	029b      	lsls	r3, r3, #10
 800b372:	b29b      	uxth	r3, r3
 800b374:	4313      	orrs	r3, r2
 800b376:	b29b      	uxth	r3, r3
 800b378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b380:	b29a      	uxth	r2, r3
 800b382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b386:	801a      	strh	r2, [r3, #0]
 800b388:	e069      	b.n	800b45e <USB_EPStartXfer+0x12a0>
 800b38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b38e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10c      	bne.n	800b3b4 <USB_EPStartXfer+0x11f6>
 800b39a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3b0:	801a      	strh	r2, [r3, #0]
 800b3b2:	e054      	b.n	800b45e <USB_EPStartXfer+0x12a0>
 800b3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	085b      	lsrs	r3, r3, #1
 800b3c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d004      	beq.n	800b3e4 <USB_EPStartXfer+0x1226>
 800b3da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3de:	3301      	adds	r3, #1
 800b3e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	029b      	lsls	r3, r3, #10
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3fe:	801a      	strh	r2, [r3, #0]
 800b400:	e02d      	b.n	800b45e <USB_EPStartXfer+0x12a0>
 800b402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	785b      	ldrb	r3, [r3, #1]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d125      	bne.n	800b45e <USB_EPStartXfer+0x12a0>
 800b412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b420:	b29b      	uxth	r3, r3
 800b422:	461a      	mov	r2, r3
 800b424:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b428:	4413      	add	r3, r2
 800b42a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	00da      	lsls	r2, r3, #3
 800b43c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b440:	4413      	add	r3, r2
 800b442:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	b29a      	uxth	r2, r3
 800b458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b45c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 8218 	beq.w	800b8a0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b490:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d005      	beq.n	800b4a8 <USB_EPStartXfer+0x12ea>
 800b49c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10d      	bne.n	800b4c4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b4ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f040 81f5 	bne.w	800b8a0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f040 81ee 	bne.w	800b8a0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ea:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	441a      	add	r2, r3
 800b508:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b50c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b518:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	8013      	strh	r3, [r2, #0]
 800b520:	e1be      	b.n	800b8a0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	78db      	ldrb	r3, [r3, #3]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	f040 81b4 	bne.w	800b89c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	699a      	ldr	r2, [r3, #24]
 800b540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d917      	bls.n	800b580 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	699a      	ldr	r2, [r3, #24]
 800b56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b570:	1ad2      	subs	r2, r2, r3
 800b572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	619a      	str	r2, [r3, #24]
 800b57e:	e00e      	b.n	800b59e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2200      	movs	r2, #0
 800b59c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	785b      	ldrb	r3, [r3, #1]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f040 8085 	bne.w	800b6ba <USB_EPStartXfer+0x14fc>
 800b5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	00da      	lsls	r2, r3, #3
 800b5e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5ec:	4413      	add	r3, r2
 800b5ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b602:	b29a      	uxth	r2, r3
 800b604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b608:	801a      	strh	r2, [r3, #0]
 800b60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60e:	2b3e      	cmp	r3, #62	; 0x3e
 800b610:	d923      	bls.n	800b65a <USB_EPStartXfer+0x149c>
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	095b      	lsrs	r3, r3, #5
 800b618:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b620:	f003 031f 	and.w	r3, r3, #31
 800b624:	2b00      	cmp	r3, #0
 800b626:	d104      	bne.n	800b632 <USB_EPStartXfer+0x1474>
 800b628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b62c:	3b01      	subs	r3, #1
 800b62e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	b29a      	uxth	r2, r3
 800b63a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b63e:	b29b      	uxth	r3, r3
 800b640:	029b      	lsls	r3, r3, #10
 800b642:	b29b      	uxth	r3, r3
 800b644:	4313      	orrs	r3, r2
 800b646:	b29b      	uxth	r3, r3
 800b648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b64c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b650:	b29a      	uxth	r2, r3
 800b652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b656:	801a      	strh	r2, [r3, #0]
 800b658:	e060      	b.n	800b71c <USB_EPStartXfer+0x155e>
 800b65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10c      	bne.n	800b67c <USB_EPStartXfer+0x14be>
 800b662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b666:	881b      	ldrh	r3, [r3, #0]
 800b668:	b29b      	uxth	r3, r3
 800b66a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b66e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b672:	b29a      	uxth	r2, r3
 800b674:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b678:	801a      	strh	r2, [r3, #0]
 800b67a:	e04f      	b.n	800b71c <USB_EPStartXfer+0x155e>
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <USB_EPStartXfer+0x14de>
 800b692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b696:	3301      	adds	r3, #1
 800b698:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b69c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	029b      	lsls	r3, r3, #10
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6b6:	801a      	strh	r2, [r3, #0]
 800b6b8:	e030      	b.n	800b71c <USB_EPStartXfer+0x155e>
 800b6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	785b      	ldrb	r3, [r3, #1]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d128      	bne.n	800b71c <USB_EPStartXfer+0x155e>
 800b6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	00da      	lsls	r2, r3, #3
 800b702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b706:	4413      	add	r3, r2
 800b708:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b70c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b714:	b29a      	uxth	r2, r3
 800b716:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b71a:	801a      	strh	r2, [r3, #0]
 800b71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	785b      	ldrb	r3, [r3, #1]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 8085 	bne.w	800b846 <USB_EPStartXfer+0x1688>
 800b73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b758:	b29b      	uxth	r3, r3
 800b75a:	461a      	mov	r2, r3
 800b75c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b760:	4413      	add	r3, r2
 800b762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	00da      	lsls	r2, r3, #3
 800b774:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b778:	4413      	add	r3, r2
 800b77a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b77e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b786:	881b      	ldrh	r3, [r3, #0]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b78e:	b29a      	uxth	r2, r3
 800b790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b794:	801a      	strh	r2, [r3, #0]
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79a:	2b3e      	cmp	r3, #62	; 0x3e
 800b79c:	d923      	bls.n	800b7e6 <USB_EPStartXfer+0x1628>
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a2:	095b      	lsrs	r3, r3, #5
 800b7a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	f003 031f 	and.w	r3, r3, #31
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d104      	bne.n	800b7be <USB_EPStartXfer+0x1600>
 800b7b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	029b      	lsls	r3, r3, #10
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7e2:	801a      	strh	r2, [r3, #0]
 800b7e4:	e05c      	b.n	800b8a0 <USB_EPStartXfer+0x16e2>
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10c      	bne.n	800b808 <USB_EPStartXfer+0x164a>
 800b7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b804:	801a      	strh	r2, [r3, #0]
 800b806:	e04b      	b.n	800b8a0 <USB_EPStartXfer+0x16e2>
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80c:	085b      	lsrs	r3, r3, #1
 800b80e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <USB_EPStartXfer+0x166a>
 800b81e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b822:	3301      	adds	r3, #1
 800b824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	b29a      	uxth	r2, r3
 800b830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b834:	b29b      	uxth	r3, r3
 800b836:	029b      	lsls	r3, r3, #10
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4313      	orrs	r3, r2
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b842:	801a      	strh	r2, [r3, #0]
 800b844:	e02c      	b.n	800b8a0 <USB_EPStartXfer+0x16e2>
 800b846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	785b      	ldrb	r3, [r3, #1]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d124      	bne.n	800b8a0 <USB_EPStartXfer+0x16e2>
 800b856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b85a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b864:	b29b      	uxth	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b86c:	4413      	add	r3, r2
 800b86e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	00da      	lsls	r2, r3, #3
 800b880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b884:	4413      	add	r3, r2
 800b886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b88a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b892:	b29a      	uxth	r2, r3
 800b894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b898:	801a      	strh	r2, [r3, #0]
 800b89a:	e001      	b.n	800b8a0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e03a      	b.n	800b916 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b8ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b8d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b8da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b8de:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	441a      	add	r2, r3
 800b8fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b910:	b29b      	uxth	r3, r3
 800b912:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	785b      	ldrb	r3, [r3, #1]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d020      	beq.n	800b974 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b948:	81bb      	strh	r3, [r7, #12]
 800b94a:	89bb      	ldrh	r3, [r7, #12]
 800b94c:	f083 0310 	eor.w	r3, r3, #16
 800b950:	81bb      	strh	r3, [r7, #12]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	441a      	add	r2, r3
 800b95c:	89bb      	ldrh	r3, [r7, #12]
 800b95e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b96e:	b29b      	uxth	r3, r3
 800b970:	8013      	strh	r3, [r2, #0]
 800b972:	e01f      	b.n	800b9b4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	b29b      	uxth	r3, r3
 800b982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b98a:	81fb      	strh	r3, [r7, #14]
 800b98c:	89fb      	ldrh	r3, [r7, #14]
 800b98e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b992:	81fb      	strh	r3, [r7, #14]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	441a      	add	r2, r3
 800b99e:	89fb      	ldrh	r3, [r7, #14]
 800b9a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b087      	sub	sp, #28
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	7b1b      	ldrb	r3, [r3, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f040 809d 	bne.w	800bb10 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d04c      	beq.n	800ba78 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	823b      	strh	r3, [r7, #16]
 800b9ec:	8a3b      	ldrh	r3, [r7, #16]
 800b9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d01b      	beq.n	800ba2e <USB_EPClearStall+0x6c>
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba0c:	81fb      	strh	r3, [r7, #14]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	441a      	add	r2, r3
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	78db      	ldrb	r3, [r3, #3]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d06c      	beq.n	800bb10 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba4c:	81bb      	strh	r3, [r7, #12]
 800ba4e:	89bb      	ldrh	r3, [r7, #12]
 800ba50:	f083 0320 	eor.w	r3, r3, #32
 800ba54:	81bb      	strh	r3, [r7, #12]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	441a      	add	r2, r3
 800ba60:	89bb      	ldrh	r3, [r7, #12]
 800ba62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	8013      	strh	r3, [r2, #0]
 800ba76:	e04b      	b.n	800bb10 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	82fb      	strh	r3, [r7, #22]
 800ba86:	8afb      	ldrh	r3, [r7, #22]
 800ba88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d01b      	beq.n	800bac8 <USB_EPClearStall+0x106>
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baa6:	82bb      	strh	r3, [r7, #20]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	441a      	add	r2, r3
 800bab2:	8abb      	ldrh	r3, [r7, #20]
 800bab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800babc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bade:	827b      	strh	r3, [r7, #18]
 800bae0:	8a7b      	ldrh	r3, [r7, #18]
 800bae2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bae6:	827b      	strh	r3, [r7, #18]
 800bae8:	8a7b      	ldrh	r3, [r7, #18]
 800baea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800baee:	827b      	strh	r3, [r7, #18]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	441a      	add	r2, r3
 800bafa:	8a7b      	ldrh	r3, [r7, #18]
 800bafc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	460b      	mov	r3, r1
 800bb28:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d103      	bne.n	800bb38 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2280      	movs	r2, #128	; 0x80
 800bb34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bb86:	68fb      	ldr	r3, [r7, #12]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b08b      	sub	sp, #44	; 0x2c
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4611      	mov	r1, r2
 800bba0:	461a      	mov	r2, r3
 800bba2:	460b      	mov	r3, r1
 800bba4:	80fb      	strh	r3, [r7, #6]
 800bba6:	4613      	mov	r3, r2
 800bba8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bbaa:	88bb      	ldrh	r3, [r7, #4]
 800bbac:	3301      	adds	r3, #1
 800bbae:	085b      	lsrs	r3, r3, #1
 800bbb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bbba:	88fa      	ldrh	r2, [r7, #6]
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbc4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bbca:	e01b      	b.n	800bc04 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	b21a      	sxth	r2, r3
 800bbdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	8a7a      	ldrh	r2, [r7, #18]
 800bbea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	3302      	adds	r3, #2
 800bbf0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	3b01      	subs	r3, #1
 800bc02:	627b      	str	r3, [r7, #36]	; 0x24
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1e0      	bne.n	800bbcc <USB_WritePMA+0x38>
  }
}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	372c      	adds	r7, #44	; 0x2c
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b08b      	sub	sp, #44	; 0x2c
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	4611      	mov	r1, r2
 800bc24:	461a      	mov	r2, r3
 800bc26:	460b      	mov	r3, r1
 800bc28:	80fb      	strh	r3, [r7, #6]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bc2e:	88bb      	ldrh	r3, [r7, #4]
 800bc30:	085b      	lsrs	r3, r3, #1
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc3e:	88fa      	ldrh	r2, [r7, #6]
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc4e:	e018      	b.n	800bc82 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	3302      	adds	r3, #2
 800bc5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	0a1b      	lsrs	r3, r3, #8
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	627b      	str	r3, [r7, #36]	; 0x24
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e3      	bne.n	800bc50 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bc88:	88bb      	ldrh	r3, [r7, #4]
 800bc8a:	f003 0301 	and.w	r3, r3, #1
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	701a      	strb	r2, [r3, #0]
  }
}
 800bca4:	bf00      	nop
 800bca6:	372c      	adds	r7, #44	; 0x2c
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bcbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bcc0:	f005 fdfc 	bl	80118bc <USBD_static_malloc>
 800bcc4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d105      	bne.n	800bcd8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	e066      	b.n	800bda6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	7c1b      	ldrb	r3, [r3, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d119      	bne.n	800bd1c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcec:	2202      	movs	r2, #2
 800bcee:	2181      	movs	r1, #129	; 0x81
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f005 fc8a 	bl	801160a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bcfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd00:	2202      	movs	r2, #2
 800bd02:	2101      	movs	r1, #1
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f005 fc80 	bl	801160a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2210      	movs	r2, #16
 800bd16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bd1a:	e016      	b.n	800bd4a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd1c:	2340      	movs	r3, #64	; 0x40
 800bd1e:	2202      	movs	r2, #2
 800bd20:	2181      	movs	r1, #129	; 0x81
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f005 fc71 	bl	801160a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bd2e:	2340      	movs	r3, #64	; 0x40
 800bd30:	2202      	movs	r2, #2
 800bd32:	2101      	movs	r1, #1
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f005 fc68 	bl	801160a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2210      	movs	r2, #16
 800bd46:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd4a:	2308      	movs	r3, #8
 800bd4c:	2203      	movs	r2, #3
 800bd4e:	2182      	movs	r1, #130	; 0x82
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f005 fc5a 	bl	801160a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	7c1b      	ldrb	r3, [r3, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d109      	bne.n	800bd94 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f005 fd2b 	bl	80117e8 <USBD_LL_PrepareReceive>
 800bd92:	e007      	b.n	800bda4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd9a:	2340      	movs	r3, #64	; 0x40
 800bd9c:	2101      	movs	r1, #1
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f005 fd22 	bl	80117e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b082      	sub	sp, #8
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bdba:	2181      	movs	r1, #129	; 0x81
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f005 fc4a 	bl	8011656 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bdc8:	2101      	movs	r1, #1
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f005 fc43 	bl	8011656 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bdd8:	2182      	movs	r1, #130	; 0x82
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f005 fc3b 	bl	8011656 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00e      	beq.n	800be18 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be0a:	4618      	mov	r0, r3
 800be0c:	f005 fd64 	bl	80118d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
	...

0800be24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	e0af      	b.n	800bfac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be54:	2b00      	cmp	r3, #0
 800be56:	d03f      	beq.n	800bed8 <USBD_CDC_Setup+0xb4>
 800be58:	2b20      	cmp	r3, #32
 800be5a:	f040 809f 	bne.w	800bf9c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	88db      	ldrh	r3, [r3, #6]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d02e      	beq.n	800bec4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	b25b      	sxtb	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	da16      	bge.n	800be9e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800be7c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	88d2      	ldrh	r2, [r2, #6]
 800be82:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	88db      	ldrh	r3, [r3, #6]
 800be88:	2b07      	cmp	r3, #7
 800be8a:	bf28      	it	cs
 800be8c:	2307      	movcs	r3, #7
 800be8e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	89fa      	ldrh	r2, [r7, #14]
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f001 facf 	bl	800d43a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800be9c:	e085      	b.n	800bfaa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	785a      	ldrb	r2, [r3, #1]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	88db      	ldrh	r3, [r3, #6]
 800beac:	b2da      	uxtb	r2, r3
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800beb4:	6939      	ldr	r1, [r7, #16]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	88db      	ldrh	r3, [r3, #6]
 800beba:	461a      	mov	r2, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f001 fae8 	bl	800d492 <USBD_CtlPrepareRx>
      break;
 800bec2:	e072      	b.n	800bfaa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	7850      	ldrb	r0, [r2, #1]
 800bed0:	2200      	movs	r2, #0
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	4798      	blx	r3
      break;
 800bed6:	e068      	b.n	800bfaa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	785b      	ldrb	r3, [r3, #1]
 800bedc:	2b0b      	cmp	r3, #11
 800bede:	d852      	bhi.n	800bf86 <USBD_CDC_Setup+0x162>
 800bee0:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <USBD_CDC_Setup+0xc4>)
 800bee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee6:	bf00      	nop
 800bee8:	0800bf19 	.word	0x0800bf19
 800beec:	0800bf95 	.word	0x0800bf95
 800bef0:	0800bf87 	.word	0x0800bf87
 800bef4:	0800bf87 	.word	0x0800bf87
 800bef8:	0800bf87 	.word	0x0800bf87
 800befc:	0800bf87 	.word	0x0800bf87
 800bf00:	0800bf87 	.word	0x0800bf87
 800bf04:	0800bf87 	.word	0x0800bf87
 800bf08:	0800bf87 	.word	0x0800bf87
 800bf0c:	0800bf87 	.word	0x0800bf87
 800bf10:	0800bf43 	.word	0x0800bf43
 800bf14:	0800bf6d 	.word	0x0800bf6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d107      	bne.n	800bf34 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf24:	f107 030a 	add.w	r3, r7, #10
 800bf28:	2202      	movs	r2, #2
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 fa84 	bl	800d43a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf32:	e032      	b.n	800bf9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f001 fa0e 	bl	800d358 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	75fb      	strb	r3, [r7, #23]
          break;
 800bf40:	e02b      	b.n	800bf9a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d107      	bne.n	800bf5e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf4e:	f107 030d 	add.w	r3, r7, #13
 800bf52:	2201      	movs	r2, #1
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f001 fa6f 	bl	800d43a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf5c:	e01d      	b.n	800bf9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 f9f9 	bl	800d358 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf66:	2303      	movs	r3, #3
 800bf68:	75fb      	strb	r3, [r7, #23]
          break;
 800bf6a:	e016      	b.n	800bf9a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b03      	cmp	r3, #3
 800bf76:	d00f      	beq.n	800bf98 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f001 f9ec 	bl	800d358 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf80:	2303      	movs	r3, #3
 800bf82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf84:	e008      	b.n	800bf98 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f001 f9e5 	bl	800d358 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	75fb      	strb	r3, [r7, #23]
          break;
 800bf92:	e002      	b.n	800bf9a <USBD_CDC_Setup+0x176>
          break;
 800bf94:	bf00      	nop
 800bf96:	e008      	b.n	800bfaa <USBD_CDC_Setup+0x186>
          break;
 800bf98:	bf00      	nop
      }
      break;
 800bf9a:	e006      	b.n	800bfaa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f001 f9da 	bl	800d358 <USBD_CtlError>
      ret = USBD_FAIL;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	75fb      	strb	r3, [r7, #23]
      break;
 800bfa8:	bf00      	nop
  }

  return (uint8_t)ret;
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e04f      	b.n	800c076 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfdc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bfde:	78fa      	ldrb	r2, [r7, #3]
 800bfe0:	6879      	ldr	r1, [r7, #4]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	440b      	add	r3, r1
 800bfec:	3318      	adds	r3, #24
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d029      	beq.n	800c048 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bff4:	78fa      	ldrb	r2, [r7, #3]
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	4613      	mov	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	440b      	add	r3, r1
 800c002:	3318      	adds	r3, #24
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	78f9      	ldrb	r1, [r7, #3]
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	460b      	mov	r3, r1
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	440b      	add	r3, r1
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	4403      	add	r3, r0
 800c014:	3320      	adds	r3, #32
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	fbb2 f1f3 	udiv	r1, r2, r3
 800c01c:	fb01 f303 	mul.w	r3, r1, r3
 800c020:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c022:	2b00      	cmp	r3, #0
 800c024:	d110      	bne.n	800c048 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c026:	78fa      	ldrb	r2, [r7, #3]
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	4613      	mov	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	440b      	add	r3, r1
 800c034:	3318      	adds	r3, #24
 800c036:	2200      	movs	r2, #0
 800c038:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c03a:	78f9      	ldrb	r1, [r7, #3]
 800c03c:	2300      	movs	r3, #0
 800c03e:	2200      	movs	r2, #0
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f005 fbb0 	bl	80117a6 <USBD_LL_Transmit>
 800c046:	e015      	b.n	800c074 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00b      	beq.n	800c074 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c070:	78fa      	ldrb	r2, [r7, #3]
 800c072:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b084      	sub	sp, #16
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	460b      	mov	r3, r1
 800c088:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c090:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e015      	b.n	800c0cc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c0a0:	78fb      	ldrb	r3, [r7, #3]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f005 fbc0 	bl	801182a <USBD_LL_GetRxDataSize>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e01b      	b.n	800c126 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d015      	beq.n	800c124 <USBD_CDC_EP0_RxReady+0x50>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c0fe:	2bff      	cmp	r3, #255	; 0xff
 800c100:	d010      	beq.n	800c124 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c110:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c118:	b292      	uxth	r2, r2
 800c11a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	22ff      	movs	r2, #255	; 0xff
 800c120:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
	...

0800c130 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2243      	movs	r2, #67	; 0x43
 800c13c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c13e:	4b03      	ldr	r3, [pc, #12]	; (800c14c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	20000094 	.word	0x20000094

0800c150 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2243      	movs	r2, #67	; 0x43
 800c15c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c15e:	4b03      	ldr	r3, [pc, #12]	; (800c16c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	20000050 	.word	0x20000050

0800c170 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2243      	movs	r2, #67	; 0x43
 800c17c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c17e:	4b03      	ldr	r3, [pc, #12]	; (800c18c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	200000d8 	.word	0x200000d8

0800c190 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	220a      	movs	r2, #10
 800c19c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c19e:	4b03      	ldr	r3, [pc, #12]	; (800c1ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	2000000c 	.word	0x2000000c

0800c1b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e004      	b.n	800c1ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c1da:	b480      	push	{r7}
 800c1dc:	b087      	sub	sp, #28
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1ec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e008      	b.n	800c20a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c216:	b480      	push	{r7}
 800c218:	b085      	sub	sp, #20
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c226:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c22e:	2303      	movs	r3, #3
 800c230:	e004      	b.n	800c23c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c256:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c258:	2301      	movs	r3, #1
 800c25a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c266:	2303      	movs	r3, #3
 800c268:	e01a      	b.n	800c2a0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c270:	2b00      	cmp	r3, #0
 800c272:	d114      	bne.n	800c29e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2201      	movs	r2, #1
 800c278:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c292:	2181      	movs	r1, #129	; 0x81
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f005 fa86 	bl	80117a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e016      	b.n	800c2f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7c1b      	ldrb	r3, [r3, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d109      	bne.n	800c2e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2d8:	2101      	movs	r1, #1
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f005 fa84 	bl	80117e8 <USBD_LL_PrepareReceive>
 800c2e0:	e007      	b.n	800c2f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2e8:	2340      	movs	r3, #64	; 0x40
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f005 fa7b 	bl	80117e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c310:	2303      	movs	r3, #3
 800c312:	e01f      	b.n	800c354 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	79fa      	ldrb	r2, [r7, #7]
 800c346:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f005 f8e3 	bl	8011514 <USBD_LL_Init>
 800c34e:	4603      	mov	r3, r0
 800c350:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c352:	7dfb      	ldrb	r3, [r7, #23]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3718      	adds	r7, #24
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c366:	2300      	movs	r3, #0
 800c368:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c370:	2303      	movs	r3, #3
 800c372:	e016      	b.n	800c3a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c390:	f107 020e 	add.w	r2, r7, #14
 800c394:	4610      	mov	r0, r2
 800c396:	4798      	blx	r3
 800c398:	4602      	mov	r2, r0
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f005 f90e 	bl	80115d4 <USBD_LL_Start>
 800c3b8:	4603      	mov	r3, r0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c3c2:	b480      	push	{r7}
 800c3c4:	b083      	sub	sp, #12
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d009      	beq.n	800c406 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	78fa      	ldrb	r2, [r7, #3]
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	4798      	blx	r3
 800c402:	4603      	mov	r3, r0
 800c404:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c406:	7bfb      	ldrb	r3, [r7, #15]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	460b      	mov	r3, r1
 800c41a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c422:	2b00      	cmp	r3, #0
 800c424:	d007      	beq.n	800c436 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	78fa      	ldrb	r2, [r7, #3]
 800c430:	4611      	mov	r1, r2
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	4798      	blx	r3
  }

  return USBD_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c450:	6839      	ldr	r1, [r7, #0]
 800c452:	4618      	mov	r0, r3
 800c454:	f000 ff46 	bl	800d2e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c474:	f003 031f 	and.w	r3, r3, #31
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d01a      	beq.n	800c4b2 <USBD_LL_SetupStage+0x72>
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d822      	bhi.n	800c4c6 <USBD_LL_SetupStage+0x86>
 800c480:	2b00      	cmp	r3, #0
 800c482:	d002      	beq.n	800c48a <USBD_LL_SetupStage+0x4a>
 800c484:	2b01      	cmp	r3, #1
 800c486:	d00a      	beq.n	800c49e <USBD_LL_SetupStage+0x5e>
 800c488:	e01d      	b.n	800c4c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c490:	4619      	mov	r1, r3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f9ee 	bl	800c874 <USBD_StdDevReq>
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]
      break;
 800c49c:	e020      	b.n	800c4e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa52 	bl	800c950 <USBD_StdItfReq>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b0:	e016      	b.n	800c4e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fa91 	bl	800c9e2 <USBD_StdEPReq>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c4:	e00c      	b.n	800c4e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f005 f8dd 	bl	8011694 <USBD_LL_StallEP>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c4de:	bf00      	nop
  }

  return ret;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b086      	sub	sp, #24
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	607a      	str	r2, [r7, #4]
 800c4f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c4f8:	7afb      	ldrb	r3, [r7, #11]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d138      	bne.n	800c570 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c504:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	d14a      	bne.n	800c5a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d913      	bls.n	800c544 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	1ad2      	subs	r2, r2, r3
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	68da      	ldr	r2, [r3, #12]
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	4293      	cmp	r3, r2
 800c534:	bf28      	it	cs
 800c536:	4613      	movcs	r3, r2
 800c538:	461a      	mov	r2, r3
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 ffc5 	bl	800d4cc <USBD_CtlContinueRx>
 800c542:	e030      	b.n	800c5a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	2b03      	cmp	r3, #3
 800c54e:	d10b      	bne.n	800c568 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c556:	691b      	ldr	r3, [r3, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d005      	beq.n	800c568 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 ffc0 	bl	800d4ee <USBD_CtlSendStatus>
 800c56e:	e01a      	b.n	800c5a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d114      	bne.n	800c5a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00e      	beq.n	800c5a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	7afa      	ldrb	r2, [r7, #11]
 800c592:	4611      	mov	r1, r2
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	4798      	blx	r3
 800c598:	4603      	mov	r3, r0
 800c59a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	e000      	b.n	800c5a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5be:	7afb      	ldrb	r3, [r7, #11]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d16b      	bne.n	800c69c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	3314      	adds	r3, #20
 800c5c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d156      	bne.n	800c682 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	689a      	ldr	r2, [r3, #8]
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d914      	bls.n	800c60a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	1ad2      	subs	r2, r2, r3
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	6879      	ldr	r1, [r7, #4]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 ff3a 	bl	800d470 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	2200      	movs	r2, #0
 800c600:	2100      	movs	r1, #0
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f005 f8f0 	bl	80117e8 <USBD_LL_PrepareReceive>
 800c608:	e03b      	b.n	800c682 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	68da      	ldr	r2, [r3, #12]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	429a      	cmp	r2, r3
 800c614:	d11c      	bne.n	800c650 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c61e:	429a      	cmp	r2, r3
 800c620:	d316      	bcc.n	800c650 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d20f      	bcs.n	800c650 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c630:	2200      	movs	r2, #0
 800c632:	2100      	movs	r1, #0
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 ff1b 	bl	800d470 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c642:	2300      	movs	r3, #0
 800c644:	2200      	movs	r2, #0
 800c646:	2100      	movs	r1, #0
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f005 f8cd 	bl	80117e8 <USBD_LL_PrepareReceive>
 800c64e:	e018      	b.n	800c682 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d10b      	bne.n	800c674 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d005      	beq.n	800c674 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c674:	2180      	movs	r1, #128	; 0x80
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f005 f80c 	bl	8011694 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 ff49 	bl	800d514 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d122      	bne.n	800c6d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f7ff fe98 	bl	800c3c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c69a:	e01a      	b.n	800c6d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d114      	bne.n	800c6d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00e      	beq.n	800c6d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ba:	695b      	ldr	r3, [r3, #20]
 800c6bc:	7afa      	ldrb	r2, [r7, #11]
 800c6be:	4611      	mov	r1, r2
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	4798      	blx	r3
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	e000      	b.n	800c6d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e02f      	b.n	800c770 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00f      	beq.n	800c73a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d009      	beq.n	800c73a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	6852      	ldr	r2, [r2, #4]
 800c732:	b2d2      	uxtb	r2, r2
 800c734:	4611      	mov	r1, r2
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c73a:	2340      	movs	r3, #64	; 0x40
 800c73c:	2200      	movs	r2, #0
 800c73e:	2100      	movs	r1, #0
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f004 ff62 	bl	801160a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2240      	movs	r2, #64	; 0x40
 800c752:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c756:	2340      	movs	r3, #64	; 0x40
 800c758:	2200      	movs	r2, #0
 800c75a:	2180      	movs	r1, #128	; 0x80
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f004 ff54 	bl	801160a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2240      	movs	r2, #64	; 0x40
 800c76c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	78fa      	ldrb	r2, [r7, #3]
 800c788:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2204      	movs	r2, #4
 800c7b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b04      	cmp	r3, #4
 800c7d6:	d106      	bne.n	800c7e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c7de:	b2da      	uxtb	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c806:	2303      	movs	r3, #3
 800c808:	e012      	b.n	800c830 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b03      	cmp	r3, #3
 800c814:	d10b      	bne.n	800c82e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d005      	beq.n	800c82e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c838:	b480      	push	{r7}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	3301      	adds	r3, #1
 800c84e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c856:	8a3b      	ldrh	r3, [r7, #16]
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	b21a      	sxth	r2, r3
 800c85c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c860:	4313      	orrs	r3, r2
 800c862:	b21b      	sxth	r3, r3
 800c864:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c866:	89fb      	ldrh	r3, [r7, #14]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	371c      	adds	r7, #28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c88a:	2b40      	cmp	r3, #64	; 0x40
 800c88c:	d005      	beq.n	800c89a <USBD_StdDevReq+0x26>
 800c88e:	2b40      	cmp	r3, #64	; 0x40
 800c890:	d853      	bhi.n	800c93a <USBD_StdDevReq+0xc6>
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00b      	beq.n	800c8ae <USBD_StdDevReq+0x3a>
 800c896:	2b20      	cmp	r3, #32
 800c898:	d14f      	bne.n	800c93a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	4798      	blx	r3
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c8ac:	e04a      	b.n	800c944 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	785b      	ldrb	r3, [r3, #1]
 800c8b2:	2b09      	cmp	r3, #9
 800c8b4:	d83b      	bhi.n	800c92e <USBD_StdDevReq+0xba>
 800c8b6:	a201      	add	r2, pc, #4	; (adr r2, 800c8bc <USBD_StdDevReq+0x48>)
 800c8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8bc:	0800c911 	.word	0x0800c911
 800c8c0:	0800c925 	.word	0x0800c925
 800c8c4:	0800c92f 	.word	0x0800c92f
 800c8c8:	0800c91b 	.word	0x0800c91b
 800c8cc:	0800c92f 	.word	0x0800c92f
 800c8d0:	0800c8ef 	.word	0x0800c8ef
 800c8d4:	0800c8e5 	.word	0x0800c8e5
 800c8d8:	0800c92f 	.word	0x0800c92f
 800c8dc:	0800c907 	.word	0x0800c907
 800c8e0:	0800c8f9 	.word	0x0800c8f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f9de 	bl	800cca8 <USBD_GetDescriptor>
          break;
 800c8ec:	e024      	b.n	800c938 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fb6d 	bl	800cfd0 <USBD_SetAddress>
          break;
 800c8f6:	e01f      	b.n	800c938 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fbac 	bl	800d058 <USBD_SetConfig>
 800c900:	4603      	mov	r3, r0
 800c902:	73fb      	strb	r3, [r7, #15]
          break;
 800c904:	e018      	b.n	800c938 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fc4b 	bl	800d1a4 <USBD_GetConfig>
          break;
 800c90e:	e013      	b.n	800c938 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fc7c 	bl	800d210 <USBD_GetStatus>
          break;
 800c918:	e00e      	b.n	800c938 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fcab 	bl	800d278 <USBD_SetFeature>
          break;
 800c922:	e009      	b.n	800c938 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fcba 	bl	800d2a0 <USBD_ClrFeature>
          break;
 800c92c:	e004      	b.n	800c938 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fd11 	bl	800d358 <USBD_CtlError>
          break;
 800c936:	bf00      	nop
      }
      break;
 800c938:	e004      	b.n	800c944 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fd0b 	bl	800d358 <USBD_CtlError>
      break;
 800c942:	bf00      	nop
  }

  return ret;
 800c944:	7bfb      	ldrb	r3, [r7, #15]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop

0800c950 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c966:	2b40      	cmp	r3, #64	; 0x40
 800c968:	d005      	beq.n	800c976 <USBD_StdItfReq+0x26>
 800c96a:	2b40      	cmp	r3, #64	; 0x40
 800c96c:	d82f      	bhi.n	800c9ce <USBD_StdItfReq+0x7e>
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <USBD_StdItfReq+0x26>
 800c972:	2b20      	cmp	r3, #32
 800c974:	d12b      	bne.n	800c9ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	3b01      	subs	r3, #1
 800c980:	2b02      	cmp	r3, #2
 800c982:	d81d      	bhi.n	800c9c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	889b      	ldrh	r3, [r3, #4]
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d813      	bhi.n	800c9b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	4798      	blx	r3
 800c99c:	4603      	mov	r3, r0
 800c99e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	88db      	ldrh	r3, [r3, #6]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d110      	bne.n	800c9ca <USBD_StdItfReq+0x7a>
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10d      	bne.n	800c9ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fd9d 	bl	800d4ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9b4:	e009      	b.n	800c9ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fccd 	bl	800d358 <USBD_CtlError>
          break;
 800c9be:	e004      	b.n	800c9ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fcc8 	bl	800d358 <USBD_CtlError>
          break;
 800c9c8:	e000      	b.n	800c9cc <USBD_StdItfReq+0x7c>
          break;
 800c9ca:	bf00      	nop
      }
      break;
 800c9cc:	e004      	b.n	800c9d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fcc1 	bl	800d358 <USBD_CtlError>
      break;
 800c9d6:	bf00      	nop
  }

  return ret;
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	889b      	ldrh	r3, [r3, #4]
 800c9f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9fe:	2b40      	cmp	r3, #64	; 0x40
 800ca00:	d007      	beq.n	800ca12 <USBD_StdEPReq+0x30>
 800ca02:	2b40      	cmp	r3, #64	; 0x40
 800ca04:	f200 8145 	bhi.w	800cc92 <USBD_StdEPReq+0x2b0>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00c      	beq.n	800ca26 <USBD_StdEPReq+0x44>
 800ca0c:	2b20      	cmp	r3, #32
 800ca0e:	f040 8140 	bne.w	800cc92 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	4798      	blx	r3
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]
      break;
 800ca24:	e13a      	b.n	800cc9c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d007      	beq.n	800ca3e <USBD_StdEPReq+0x5c>
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	f300 8129 	bgt.w	800cc86 <USBD_StdEPReq+0x2a4>
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d07f      	beq.n	800cb38 <USBD_StdEPReq+0x156>
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d03c      	beq.n	800cab6 <USBD_StdEPReq+0xd4>
 800ca3c:	e123      	b.n	800cc86 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d002      	beq.n	800ca50 <USBD_StdEPReq+0x6e>
 800ca4a:	2b03      	cmp	r3, #3
 800ca4c:	d016      	beq.n	800ca7c <USBD_StdEPReq+0x9a>
 800ca4e:	e02c      	b.n	800caaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00d      	beq.n	800ca72 <USBD_StdEPReq+0x90>
 800ca56:	7bbb      	ldrb	r3, [r7, #14]
 800ca58:	2b80      	cmp	r3, #128	; 0x80
 800ca5a:	d00a      	beq.n	800ca72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f004 fe17 	bl	8011694 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca66:	2180      	movs	r1, #128	; 0x80
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f004 fe13 	bl	8011694 <USBD_LL_StallEP>
 800ca6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca70:	e020      	b.n	800cab4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fc6f 	bl	800d358 <USBD_CtlError>
              break;
 800ca7a:	e01b      	b.n	800cab4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	885b      	ldrh	r3, [r3, #2]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10e      	bne.n	800caa2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca84:	7bbb      	ldrb	r3, [r7, #14]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00b      	beq.n	800caa2 <USBD_StdEPReq+0xc0>
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	2b80      	cmp	r3, #128	; 0x80
 800ca8e:	d008      	beq.n	800caa2 <USBD_StdEPReq+0xc0>
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	88db      	ldrh	r3, [r3, #6]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d104      	bne.n	800caa2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca98:	7bbb      	ldrb	r3, [r7, #14]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f004 fdf9 	bl	8011694 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fd23 	bl	800d4ee <USBD_CtlSendStatus>

              break;
 800caa8:	e004      	b.n	800cab4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fc53 	bl	800d358 <USBD_CtlError>
              break;
 800cab2:	bf00      	nop
          }
          break;
 800cab4:	e0ec      	b.n	800cc90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d002      	beq.n	800cac8 <USBD_StdEPReq+0xe6>
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d016      	beq.n	800caf4 <USBD_StdEPReq+0x112>
 800cac6:	e030      	b.n	800cb2a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00d      	beq.n	800caea <USBD_StdEPReq+0x108>
 800cace:	7bbb      	ldrb	r3, [r7, #14]
 800cad0:	2b80      	cmp	r3, #128	; 0x80
 800cad2:	d00a      	beq.n	800caea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f004 fddb 	bl	8011694 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cade:	2180      	movs	r1, #128	; 0x80
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f004 fdd7 	bl	8011694 <USBD_LL_StallEP>
 800cae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cae8:	e025      	b.n	800cb36 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fc33 	bl	800d358 <USBD_CtlError>
              break;
 800caf2:	e020      	b.n	800cb36 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	885b      	ldrh	r3, [r3, #2]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d11b      	bne.n	800cb34 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cafc:	7bbb      	ldrb	r3, [r7, #14]
 800cafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d004      	beq.n	800cb10 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb06:	7bbb      	ldrb	r3, [r7, #14]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f004 fde1 	bl	80116d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 fcec 	bl	800d4ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	4798      	blx	r3
 800cb24:	4603      	mov	r3, r0
 800cb26:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cb28:	e004      	b.n	800cb34 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fc13 	bl	800d358 <USBD_CtlError>
              break;
 800cb32:	e000      	b.n	800cb36 <USBD_StdEPReq+0x154>
              break;
 800cb34:	bf00      	nop
          }
          break;
 800cb36:	e0ab      	b.n	800cc90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d002      	beq.n	800cb4a <USBD_StdEPReq+0x168>
 800cb44:	2b03      	cmp	r3, #3
 800cb46:	d032      	beq.n	800cbae <USBD_StdEPReq+0x1cc>
 800cb48:	e097      	b.n	800cc7a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb4a:	7bbb      	ldrb	r3, [r7, #14]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d007      	beq.n	800cb60 <USBD_StdEPReq+0x17e>
 800cb50:	7bbb      	ldrb	r3, [r7, #14]
 800cb52:	2b80      	cmp	r3, #128	; 0x80
 800cb54:	d004      	beq.n	800cb60 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fbfd 	bl	800d358 <USBD_CtlError>
                break;
 800cb5e:	e091      	b.n	800cc84 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	da0b      	bge.n	800cb80 <USBD_StdEPReq+0x19e>
 800cb68:	7bbb      	ldrb	r3, [r7, #14]
 800cb6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb6e:	4613      	mov	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	3310      	adds	r3, #16
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	e00b      	b.n	800cb98 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb80:	7bbb      	ldrb	r3, [r7, #14]
 800cb82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb86:	4613      	mov	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	4413      	add	r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4413      	add	r3, r2
 800cb96:	3304      	adds	r3, #4
 800cb98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	2202      	movs	r2, #2
 800cba4:	4619      	mov	r1, r3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fc47 	bl	800d43a <USBD_CtlSendData>
              break;
 800cbac:	e06a      	b.n	800cc84 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cbae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	da11      	bge.n	800cbda <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	f003 020f 	and.w	r2, r3, #15
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	440b      	add	r3, r1
 800cbc8:	3324      	adds	r3, #36	; 0x24
 800cbca:	881b      	ldrh	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d117      	bne.n	800cc00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fbc0 	bl	800d358 <USBD_CtlError>
                  break;
 800cbd8:	e054      	b.n	800cc84 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	f003 020f 	and.w	r2, r3, #15
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	440b      	add	r3, r1
 800cbec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d104      	bne.n	800cc00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fbad 	bl	800d358 <USBD_CtlError>
                  break;
 800cbfe:	e041      	b.n	800cc84 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	da0b      	bge.n	800cc20 <USBD_StdEPReq+0x23e>
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
 800cc0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc0e:	4613      	mov	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	3310      	adds	r3, #16
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	e00b      	b.n	800cc38 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc26:	4613      	mov	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4413      	add	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	4413      	add	r3, r2
 800cc36:	3304      	adds	r3, #4
 800cc38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc3a:	7bbb      	ldrb	r3, [r7, #14]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d002      	beq.n	800cc46 <USBD_StdEPReq+0x264>
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	2b80      	cmp	r3, #128	; 0x80
 800cc44:	d103      	bne.n	800cc4e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	e00e      	b.n	800cc6c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f004 fd5c 	bl	8011710 <USBD_LL_IsStallEP>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2201      	movs	r2, #1
 800cc62:	601a      	str	r2, [r3, #0]
 800cc64:	e002      	b.n	800cc6c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fbe1 	bl	800d43a <USBD_CtlSendData>
              break;
 800cc78:	e004      	b.n	800cc84 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fb6b 	bl	800d358 <USBD_CtlError>
              break;
 800cc82:	bf00      	nop
          }
          break;
 800cc84:	e004      	b.n	800cc90 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fb65 	bl	800d358 <USBD_CtlError>
          break;
 800cc8e:	bf00      	nop
      }
      break;
 800cc90:	e004      	b.n	800cc9c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 fb5f 	bl	800d358 <USBD_CtlError>
      break;
 800cc9a:	bf00      	nop
  }

  return ret;
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	885b      	ldrh	r3, [r3, #2]
 800ccc2:	0a1b      	lsrs	r3, r3, #8
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	2b0e      	cmp	r3, #14
 800ccca:	f200 8152 	bhi.w	800cf72 <USBD_GetDescriptor+0x2ca>
 800ccce:	a201      	add	r2, pc, #4	; (adr r2, 800ccd4 <USBD_GetDescriptor+0x2c>)
 800ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd4:	0800cd45 	.word	0x0800cd45
 800ccd8:	0800cd5d 	.word	0x0800cd5d
 800ccdc:	0800cd9d 	.word	0x0800cd9d
 800cce0:	0800cf73 	.word	0x0800cf73
 800cce4:	0800cf73 	.word	0x0800cf73
 800cce8:	0800cf13 	.word	0x0800cf13
 800ccec:	0800cf3f 	.word	0x0800cf3f
 800ccf0:	0800cf73 	.word	0x0800cf73
 800ccf4:	0800cf73 	.word	0x0800cf73
 800ccf8:	0800cf73 	.word	0x0800cf73
 800ccfc:	0800cf73 	.word	0x0800cf73
 800cd00:	0800cf73 	.word	0x0800cf73
 800cd04:	0800cf73 	.word	0x0800cf73
 800cd08:	0800cf73 	.word	0x0800cf73
 800cd0c:	0800cd11 	.word	0x0800cd11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd16:	69db      	ldr	r3, [r3, #28]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00b      	beq.n	800cd34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd22:	69db      	ldr	r3, [r3, #28]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	7c12      	ldrb	r2, [r2, #16]
 800cd28:	f107 0108 	add.w	r1, r7, #8
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4798      	blx	r3
 800cd30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd32:	e126      	b.n	800cf82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fb0e 	bl	800d358 <USBD_CtlError>
        err++;
 800cd3c:	7afb      	ldrb	r3, [r7, #11]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	72fb      	strb	r3, [r7, #11]
      break;
 800cd42:	e11e      	b.n	800cf82 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	7c12      	ldrb	r2, [r2, #16]
 800cd50:	f107 0108 	add.w	r1, r7, #8
 800cd54:	4610      	mov	r0, r2
 800cd56:	4798      	blx	r3
 800cd58:	60f8      	str	r0, [r7, #12]
      break;
 800cd5a:	e112      	b.n	800cf82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	7c1b      	ldrb	r3, [r3, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10d      	bne.n	800cd80 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd6c:	f107 0208 	add.w	r2, r7, #8
 800cd70:	4610      	mov	r0, r2
 800cd72:	4798      	blx	r3
 800cd74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd7e:	e100      	b.n	800cf82 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd88:	f107 0208 	add.w	r2, r7, #8
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	4798      	blx	r3
 800cd90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3301      	adds	r3, #1
 800cd96:	2202      	movs	r2, #2
 800cd98:	701a      	strb	r2, [r3, #0]
      break;
 800cd9a:	e0f2      	b.n	800cf82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	885b      	ldrh	r3, [r3, #2]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b05      	cmp	r3, #5
 800cda4:	f200 80ac 	bhi.w	800cf00 <USBD_GetDescriptor+0x258>
 800cda8:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <USBD_GetDescriptor+0x108>)
 800cdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdae:	bf00      	nop
 800cdb0:	0800cdc9 	.word	0x0800cdc9
 800cdb4:	0800cdfd 	.word	0x0800cdfd
 800cdb8:	0800ce31 	.word	0x0800ce31
 800cdbc:	0800ce65 	.word	0x0800ce65
 800cdc0:	0800ce99 	.word	0x0800ce99
 800cdc4:	0800cecd 	.word	0x0800cecd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00b      	beq.n	800cdec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	7c12      	ldrb	r2, [r2, #16]
 800cde0:	f107 0108 	add.w	r1, r7, #8
 800cde4:	4610      	mov	r0, r2
 800cde6:	4798      	blx	r3
 800cde8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdea:	e091      	b.n	800cf10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdec:	6839      	ldr	r1, [r7, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fab2 	bl	800d358 <USBD_CtlError>
            err++;
 800cdf4:	7afb      	ldrb	r3, [r7, #11]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdfa:	e089      	b.n	800cf10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00b      	beq.n	800ce20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	7c12      	ldrb	r2, [r2, #16]
 800ce14:	f107 0108 	add.w	r1, r7, #8
 800ce18:	4610      	mov	r0, r2
 800ce1a:	4798      	blx	r3
 800ce1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce1e:	e077      	b.n	800cf10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fa98 	bl	800d358 <USBD_CtlError>
            err++;
 800ce28:	7afb      	ldrb	r3, [r7, #11]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce2e:	e06f      	b.n	800cf10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00b      	beq.n	800ce54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	7c12      	ldrb	r2, [r2, #16]
 800ce48:	f107 0108 	add.w	r1, r7, #8
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	4798      	blx	r3
 800ce50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce52:	e05d      	b.n	800cf10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 fa7e 	bl	800d358 <USBD_CtlError>
            err++;
 800ce5c:	7afb      	ldrb	r3, [r7, #11]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	72fb      	strb	r3, [r7, #11]
          break;
 800ce62:	e055      	b.n	800cf10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00b      	beq.n	800ce88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	7c12      	ldrb	r2, [r2, #16]
 800ce7c:	f107 0108 	add.w	r1, r7, #8
 800ce80:	4610      	mov	r0, r2
 800ce82:	4798      	blx	r3
 800ce84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce86:	e043      	b.n	800cf10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fa64 	bl	800d358 <USBD_CtlError>
            err++;
 800ce90:	7afb      	ldrb	r3, [r7, #11]
 800ce92:	3301      	adds	r3, #1
 800ce94:	72fb      	strb	r3, [r7, #11]
          break;
 800ce96:	e03b      	b.n	800cf10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00b      	beq.n	800cebc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	7c12      	ldrb	r2, [r2, #16]
 800ceb0:	f107 0108 	add.w	r1, r7, #8
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	4798      	blx	r3
 800ceb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceba:	e029      	b.n	800cf10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fa4a 	bl	800d358 <USBD_CtlError>
            err++;
 800cec4:	7afb      	ldrb	r3, [r7, #11]
 800cec6:	3301      	adds	r3, #1
 800cec8:	72fb      	strb	r3, [r7, #11]
          break;
 800ceca:	e021      	b.n	800cf10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00b      	beq.n	800cef0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	7c12      	ldrb	r2, [r2, #16]
 800cee4:	f107 0108 	add.w	r1, r7, #8
 800cee8:	4610      	mov	r0, r2
 800ceea:	4798      	blx	r3
 800ceec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceee:	e00f      	b.n	800cf10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fa30 	bl	800d358 <USBD_CtlError>
            err++;
 800cef8:	7afb      	ldrb	r3, [r7, #11]
 800cefa:	3301      	adds	r3, #1
 800cefc:	72fb      	strb	r3, [r7, #11]
          break;
 800cefe:	e007      	b.n	800cf10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fa28 	bl	800d358 <USBD_CtlError>
          err++;
 800cf08:	7afb      	ldrb	r3, [r7, #11]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cf0e:	bf00      	nop
      }
      break;
 800cf10:	e037      	b.n	800cf82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	7c1b      	ldrb	r3, [r3, #16]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d109      	bne.n	800cf2e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf22:	f107 0208 	add.w	r2, r7, #8
 800cf26:	4610      	mov	r0, r2
 800cf28:	4798      	blx	r3
 800cf2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf2c:	e029      	b.n	800cf82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 fa11 	bl	800d358 <USBD_CtlError>
        err++;
 800cf36:	7afb      	ldrb	r3, [r7, #11]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf3c:	e021      	b.n	800cf82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	7c1b      	ldrb	r3, [r3, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10d      	bne.n	800cf62 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf4e:	f107 0208 	add.w	r2, r7, #8
 800cf52:	4610      	mov	r0, r2
 800cf54:	4798      	blx	r3
 800cf56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	2207      	movs	r2, #7
 800cf5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf60:	e00f      	b.n	800cf82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f9f7 	bl	800d358 <USBD_CtlError>
        err++;
 800cf6a:	7afb      	ldrb	r3, [r7, #11]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf70:	e007      	b.n	800cf82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f9ef 	bl	800d358 <USBD_CtlError>
      err++;
 800cf7a:	7afb      	ldrb	r3, [r7, #11]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf80:	bf00      	nop
  }

  if (err != 0U)
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d11e      	bne.n	800cfc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	88db      	ldrh	r3, [r3, #6]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d016      	beq.n	800cfbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cf90:	893b      	ldrh	r3, [r7, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00e      	beq.n	800cfb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	88da      	ldrh	r2, [r3, #6]
 800cf9a:	893b      	ldrh	r3, [r7, #8]
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	bf28      	it	cs
 800cfa0:	4613      	movcs	r3, r2
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfa6:	893b      	ldrh	r3, [r7, #8]
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	68f9      	ldr	r1, [r7, #12]
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 fa44 	bl	800d43a <USBD_CtlSendData>
 800cfb2:	e009      	b.n	800cfc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f9ce 	bl	800d358 <USBD_CtlError>
 800cfbc:	e004      	b.n	800cfc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fa95 	bl	800d4ee <USBD_CtlSendStatus>
 800cfc4:	e000      	b.n	800cfc8 <USBD_GetDescriptor+0x320>
    return;
 800cfc6:	bf00      	nop
  }
}
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop

0800cfd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	889b      	ldrh	r3, [r3, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d131      	bne.n	800d046 <USBD_SetAddress+0x76>
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	88db      	ldrh	r3, [r3, #6]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d12d      	bne.n	800d046 <USBD_SetAddress+0x76>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	885b      	ldrh	r3, [r3, #2]
 800cfee:	2b7f      	cmp	r3, #127	; 0x7f
 800cff0:	d829      	bhi.n	800d046 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	885b      	ldrh	r3, [r3, #2]
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b03      	cmp	r3, #3
 800d008:	d104      	bne.n	800d014 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f9a3 	bl	800d358 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d012:	e01d      	b.n	800d050 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	7bfa      	ldrb	r2, [r7, #15]
 800d018:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f004 fba1 	bl	8011768 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fa61 	bl	800d4ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d004      	beq.n	800d03c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2202      	movs	r2, #2
 800d036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d03a:	e009      	b.n	800d050 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d044:	e004      	b.n	800d050 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d046:	6839      	ldr	r1, [r7, #0]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f985 	bl	800d358 <USBD_CtlError>
  }
}
 800d04e:	bf00      	nop
 800d050:	bf00      	nop
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	885b      	ldrh	r3, [r3, #2]
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	4b4c      	ldr	r3, [pc, #304]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d06e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d070:	4b4b      	ldr	r3, [pc, #300]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d905      	bls.n	800d084 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d078:	6839      	ldr	r1, [r7, #0]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f96c 	bl	800d358 <USBD_CtlError>
    return USBD_FAIL;
 800d080:	2303      	movs	r3, #3
 800d082:	e088      	b.n	800d196 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d002      	beq.n	800d096 <USBD_SetConfig+0x3e>
 800d090:	2b03      	cmp	r3, #3
 800d092:	d025      	beq.n	800d0e0 <USBD_SetConfig+0x88>
 800d094:	e071      	b.n	800d17a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d096:	4b42      	ldr	r3, [pc, #264]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d01c      	beq.n	800d0d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d09e:	4b40      	ldr	r3, [pc, #256]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0a8:	4b3d      	ldr	r3, [pc, #244]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7ff f992 	bl	800c3d8 <USBD_SetClassConfig>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f949 	bl	800d358 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0c6:	e065      	b.n	800d194 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fa10 	bl	800d4ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2203      	movs	r2, #3
 800d0d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0d6:	e05d      	b.n	800d194 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fa08 	bl	800d4ee <USBD_CtlSendStatus>
      break;
 800d0de:	e059      	b.n	800d194 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0e0:	4b2f      	ldr	r3, [pc, #188]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d112      	bne.n	800d10e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d0f0:	4b2b      	ldr	r3, [pc, #172]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0fa:	4b29      	ldr	r3, [pc, #164]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	4619      	mov	r1, r3
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7ff f985 	bl	800c410 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f9f1 	bl	800d4ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d10c:	e042      	b.n	800d194 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d10e:	4b24      	ldr	r3, [pc, #144]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	461a      	mov	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d02a      	beq.n	800d172 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	b2db      	uxtb	r3, r3
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff f973 	bl	800c410 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d12a:	4b1d      	ldr	r3, [pc, #116]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d134:	4b1a      	ldr	r3, [pc, #104]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff f94c 	bl	800c3d8 <USBD_SetClassConfig>
 800d140:	4603      	mov	r3, r0
 800d142:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00f      	beq.n	800d16a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f903 	bl	800d358 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	b2db      	uxtb	r3, r3
 800d158:	4619      	mov	r1, r3
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff f958 	bl	800c410 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2202      	movs	r2, #2
 800d164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d168:	e014      	b.n	800d194 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f9bf 	bl	800d4ee <USBD_CtlSendStatus>
      break;
 800d170:	e010      	b.n	800d194 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f9bb 	bl	800d4ee <USBD_CtlSendStatus>
      break;
 800d178:	e00c      	b.n	800d194 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f8eb 	bl	800d358 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d182:	4b07      	ldr	r3, [pc, #28]	; (800d1a0 <USBD_SetConfig+0x148>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	4619      	mov	r1, r3
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7ff f941 	bl	800c410 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d18e:	2303      	movs	r3, #3
 800d190:	73fb      	strb	r3, [r7, #15]
      break;
 800d192:	bf00      	nop
  }

  return ret;
 800d194:	7bfb      	ldrb	r3, [r7, #15]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	20002cf4 	.word	0x20002cf4

0800d1a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	88db      	ldrh	r3, [r3, #6]
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d004      	beq.n	800d1c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f8cd 	bl	800d358 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1be:	e023      	b.n	800d208 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	dc02      	bgt.n	800d1d2 <USBD_GetConfig+0x2e>
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	dc03      	bgt.n	800d1d8 <USBD_GetConfig+0x34>
 800d1d0:	e015      	b.n	800d1fe <USBD_GetConfig+0x5a>
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d00b      	beq.n	800d1ee <USBD_GetConfig+0x4a>
 800d1d6:	e012      	b.n	800d1fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f927 	bl	800d43a <USBD_CtlSendData>
        break;
 800d1ec:	e00c      	b.n	800d208 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f91f 	bl	800d43a <USBD_CtlSendData>
        break;
 800d1fc:	e004      	b.n	800d208 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f8a9 	bl	800d358 <USBD_CtlError>
        break;
 800d206:	bf00      	nop
}
 800d208:	bf00      	nop
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d220:	b2db      	uxtb	r3, r3
 800d222:	3b01      	subs	r3, #1
 800d224:	2b02      	cmp	r3, #2
 800d226:	d81e      	bhi.n	800d266 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	88db      	ldrh	r3, [r3, #6]
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d004      	beq.n	800d23a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 f890 	bl	800d358 <USBD_CtlError>
        break;
 800d238:	e01a      	b.n	800d270 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d246:	2b00      	cmp	r3, #0
 800d248:	d005      	beq.n	800d256 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	f043 0202 	orr.w	r2, r3, #2
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	330c      	adds	r3, #12
 800d25a:	2202      	movs	r2, #2
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f8eb 	bl	800d43a <USBD_CtlSendData>
      break;
 800d264:	e004      	b.n	800d270 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f875 	bl	800d358 <USBD_CtlError>
      break;
 800d26e:	bf00      	nop
  }
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	885b      	ldrh	r3, [r3, #2]
 800d286:	2b01      	cmp	r3, #1
 800d288:	d106      	bne.n	800d298 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2201      	movs	r2, #1
 800d28e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f92b 	bl	800d4ee <USBD_CtlSendStatus>
  }
}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d80b      	bhi.n	800d2d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	885b      	ldrh	r3, [r3, #2]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d10c      	bne.n	800d2da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f910 	bl	800d4ee <USBD_CtlSendStatus>
      }
      break;
 800d2ce:	e004      	b.n	800d2da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f840 	bl	800d358 <USBD_CtlError>
      break;
 800d2d8:	e000      	b.n	800d2dc <USBD_ClrFeature+0x3c>
      break;
 800d2da:	bf00      	nop
  }
}
 800d2dc:	bf00      	nop
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	781a      	ldrb	r2, [r3, #0]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	781a      	ldrb	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	3301      	adds	r3, #1
 800d30c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f7ff fa92 	bl	800c838 <SWAPBYTE>
 800d314:	4603      	mov	r3, r0
 800d316:	461a      	mov	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3301      	adds	r3, #1
 800d320:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3301      	adds	r3, #1
 800d326:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f7ff fa85 	bl	800c838 <SWAPBYTE>
 800d32e:	4603      	mov	r3, r0
 800d330:	461a      	mov	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3301      	adds	r3, #1
 800d33a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	3301      	adds	r3, #1
 800d340:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f7ff fa78 	bl	800c838 <SWAPBYTE>
 800d348:	4603      	mov	r3, r0
 800d34a:	461a      	mov	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	80da      	strh	r2, [r3, #6]
}
 800d350:	bf00      	nop
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d362:	2180      	movs	r1, #128	; 0x80
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f004 f995 	bl	8011694 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d36a:	2100      	movs	r1, #0
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f004 f991 	bl	8011694 <USBD_LL_StallEP>
}
 800d372:	bf00      	nop
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b086      	sub	sp, #24
 800d37e:	af00      	add	r7, sp, #0
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d386:	2300      	movs	r3, #0
 800d388:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d036      	beq.n	800d3fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d394:	6938      	ldr	r0, [r7, #16]
 800d396:	f000 f836 	bl	800d406 <USBD_GetLen>
 800d39a:	4603      	mov	r3, r0
 800d39c:	3301      	adds	r3, #1
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3a8:	7dfb      	ldrb	r3, [r7, #23]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	7812      	ldrb	r2, [r2, #0]
 800d3b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	4413      	add	r3, r2
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d3ca:	e013      	b.n	800d3f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	7812      	ldrb	r2, [r2, #0]
 800d3d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	613b      	str	r3, [r7, #16]
    idx++;
 800d3de:	7dfb      	ldrb	r3, [r7, #23]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3ee:	7dfb      	ldrb	r3, [r7, #23]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1e7      	bne.n	800d3cc <USBD_GetString+0x52>
 800d3fc:	e000      	b.n	800d400 <USBD_GetString+0x86>
    return;
 800d3fe:	bf00      	nop
  }
}
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d406:	b480      	push	{r7}
 800d408:	b085      	sub	sp, #20
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d416:	e005      	b.n	800d424 <USBD_GetLen+0x1e>
  {
    len++;
 800d418:	7bfb      	ldrb	r3, [r7, #15]
 800d41a:	3301      	adds	r3, #1
 800d41c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	3301      	adds	r3, #1
 800d422:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1f5      	bne.n	800d418 <USBD_GetLen+0x12>
  }

  return len;
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2202      	movs	r2, #2
 800d44a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	2100      	movs	r1, #0
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f004 f9a0 	bl	80117a6 <USBD_LL_Transmit>

  return USBD_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	2100      	movs	r1, #0
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f004 f98f 	bl	80117a6 <USBD_LL_Transmit>

  return USBD_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	60f8      	str	r0, [r7, #12]
 800d49a:	60b9      	str	r1, [r7, #8]
 800d49c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	68f8      	ldr	r0, [r7, #12]
 800d4be:	f004 f993 	bl	80117e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	2100      	movs	r1, #0
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f004 f982 	bl	80117e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2204      	movs	r2, #4
 800d4fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d4fe:	2300      	movs	r3, #0
 800d500:	2200      	movs	r2, #0
 800d502:	2100      	movs	r1, #0
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f004 f94e 	bl	80117a6 <USBD_LL_Transmit>

  return USBD_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2205      	movs	r2, #5
 800d520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d524:	2300      	movs	r3, #0
 800d526:	2200      	movs	r2, #0
 800d528:	2100      	movs	r1, #0
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f004 f95c 	bl	80117e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
	...

0800d53c <__NVIC_SetPriority>:
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	4603      	mov	r3, r0
 800d544:	6039      	str	r1, [r7, #0]
 800d546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	db0a      	blt.n	800d566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	b2da      	uxtb	r2, r3
 800d554:	490c      	ldr	r1, [pc, #48]	; (800d588 <__NVIC_SetPriority+0x4c>)
 800d556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d55a:	0112      	lsls	r2, r2, #4
 800d55c:	b2d2      	uxtb	r2, r2
 800d55e:	440b      	add	r3, r1
 800d560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d564:	e00a      	b.n	800d57c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	4908      	ldr	r1, [pc, #32]	; (800d58c <__NVIC_SetPriority+0x50>)
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	f003 030f 	and.w	r3, r3, #15
 800d572:	3b04      	subs	r3, #4
 800d574:	0112      	lsls	r2, r2, #4
 800d576:	b2d2      	uxtb	r2, r2
 800d578:	440b      	add	r3, r1
 800d57a:	761a      	strb	r2, [r3, #24]
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	e000e100 	.word	0xe000e100
 800d58c:	e000ed00 	.word	0xe000ed00

0800d590 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d594:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <SysTick_Handler+0x1c>)
 800d596:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d598:	f002 fb6e 	bl	800fc78 <xTaskGetSchedulerState>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d001      	beq.n	800d5a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d5a2:	f003 fa51 	bl	8010a48 <xPortSysTickHandler>
  }
}
 800d5a6:	bf00      	nop
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	e000e010 	.word	0xe000e010

0800d5b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	f06f 0004 	mvn.w	r0, #4
 800d5ba:	f7ff ffbf 	bl	800d53c <__NVIC_SetPriority>
#endif
}
 800d5be:	bf00      	nop
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5ca:	f3ef 8305 	mrs	r3, IPSR
 800d5ce:	603b      	str	r3, [r7, #0]
  return(result);
 800d5d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d5d6:	f06f 0305 	mvn.w	r3, #5
 800d5da:	607b      	str	r3, [r7, #4]
 800d5dc:	e00c      	b.n	800d5f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d5de:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <osKernelInitialize+0x44>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d105      	bne.n	800d5f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d5e6:	4b08      	ldr	r3, [pc, #32]	; (800d608 <osKernelInitialize+0x44>)
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	607b      	str	r3, [r7, #4]
 800d5f0:	e002      	b.n	800d5f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d5f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d5f8:	687b      	ldr	r3, [r7, #4]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop
 800d608:	20002cf8 	.word	0x20002cf8

0800d60c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d612:	f3ef 8305 	mrs	r3, IPSR
 800d616:	603b      	str	r3, [r7, #0]
  return(result);
 800d618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d003      	beq.n	800d626 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d61e:	f06f 0305 	mvn.w	r3, #5
 800d622:	607b      	str	r3, [r7, #4]
 800d624:	e010      	b.n	800d648 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d626:	4b0b      	ldr	r3, [pc, #44]	; (800d654 <osKernelStart+0x48>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d109      	bne.n	800d642 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d62e:	f7ff ffbf 	bl	800d5b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d632:	4b08      	ldr	r3, [pc, #32]	; (800d654 <osKernelStart+0x48>)
 800d634:	2202      	movs	r2, #2
 800d636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d638:	f001 fea0 	bl	800f37c <vTaskStartScheduler>
      stat = osOK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	607b      	str	r3, [r7, #4]
 800d640:	e002      	b.n	800d648 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d648:	687b      	ldr	r3, [r7, #4]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	20002cf8 	.word	0x20002cf8

0800d658 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d65e:	f3ef 8305 	mrs	r3, IPSR
 800d662:	603b      	str	r3, [r7, #0]
  return(result);
 800d664:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d666:	2b00      	cmp	r3, #0
 800d668:	d003      	beq.n	800d672 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d66a:	f001 ffb3 	bl	800f5d4 <xTaskGetTickCountFromISR>
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	e002      	b.n	800d678 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d672:	f001 ff9f 	bl	800f5b4 <xTaskGetTickCount>
 800d676:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d678:	687b      	ldr	r3, [r7, #4]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800d682:	b480      	push	{r7}
 800d684:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800d686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d694:	b580      	push	{r7, lr}
 800d696:	b08e      	sub	sp, #56	; 0x38
 800d698:	af04      	add	r7, sp, #16
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6a4:	f3ef 8305 	mrs	r3, IPSR
 800d6a8:	617b      	str	r3, [r7, #20]
  return(result);
 800d6aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d17f      	bne.n	800d7b0 <osThreadNew+0x11c>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d07c      	beq.n	800d7b0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d6b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6ba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d6bc:	2318      	movs	r3, #24
 800d6be:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d6c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d045      	beq.n	800d75c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <osThreadNew+0x4a>
        name = attr->name;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	699b      	ldr	r3, [r3, #24]
 800d6ea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d008      	beq.n	800d704 <osThreadNew+0x70>
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	2b38      	cmp	r3, #56	; 0x38
 800d6f6:	d805      	bhi.n	800d704 <osThreadNew+0x70>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f003 0301 	and.w	r3, r3, #1
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <osThreadNew+0x74>
        return (NULL);
 800d704:	2300      	movs	r3, #0
 800d706:	e054      	b.n	800d7b2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	695b      	ldr	r3, [r3, #20]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d003      	beq.n	800d718 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	695b      	ldr	r3, [r3, #20]
 800d714:	089b      	lsrs	r3, r3, #2
 800d716:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00e      	beq.n	800d73e <osThreadNew+0xaa>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	2bab      	cmp	r3, #171	; 0xab
 800d726:	d90a      	bls.n	800d73e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d006      	beq.n	800d73e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <osThreadNew+0xaa>
        mem = 1;
 800d738:	2301      	movs	r3, #1
 800d73a:	61bb      	str	r3, [r7, #24]
 800d73c:	e010      	b.n	800d760 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10c      	bne.n	800d760 <osThreadNew+0xcc>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d108      	bne.n	800d760 <osThreadNew+0xcc>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d104      	bne.n	800d760 <osThreadNew+0xcc>
          mem = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	61bb      	str	r3, [r7, #24]
 800d75a:	e001      	b.n	800d760 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d110      	bne.n	800d788 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d76e:	9202      	str	r2, [sp, #8]
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	6a3a      	ldr	r2, [r7, #32]
 800d77a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f001 fc11 	bl	800efa4 <xTaskCreateStatic>
 800d782:	4603      	mov	r3, r0
 800d784:	613b      	str	r3, [r7, #16]
 800d786:	e013      	b.n	800d7b0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d110      	bne.n	800d7b0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d78e:	6a3b      	ldr	r3, [r7, #32]
 800d790:	b29a      	uxth	r2, r3
 800d792:	f107 0310 	add.w	r3, r7, #16
 800d796:	9301      	str	r3, [sp, #4]
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f001 fc5c 	bl	800f05e <xTaskCreate>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d001      	beq.n	800d7b0 <osThreadNew+0x11c>
            hTask = NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d7b0:	693b      	ldr	r3, [r7, #16]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3728      	adds	r7, #40	; 0x28
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7c2:	f3ef 8305 	mrs	r3, IPSR
 800d7c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <osDelay+0x1c>
    stat = osErrorISR;
 800d7ce:	f06f 0305 	mvn.w	r3, #5
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	e007      	b.n	800d7e6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 fd97 	bl	800f314 <vTaskDelay>
    }
  }

  return (stat);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7fc:	f3ef 8305 	mrs	r3, IPSR
 800d800:	60bb      	str	r3, [r7, #8]
  return(result);
 800d802:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d804:	2b00      	cmp	r3, #0
 800d806:	d174      	bne.n	800d8f2 <osMutexNew+0x102>
    if (attr != NULL) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d003      	beq.n	800d816 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	61bb      	str	r3, [r7, #24]
 800d814:	e001      	b.n	800d81a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d816:	2300      	movs	r3, #0
 800d818:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <osMutexNew+0x3a>
      rmtx = 1U;
 800d824:	2301      	movs	r3, #1
 800d826:	617b      	str	r3, [r7, #20]
 800d828:	e001      	b.n	800d82e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d82a:	2300      	movs	r3, #0
 800d82c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	f003 0308 	and.w	r3, r3, #8
 800d834:	2b00      	cmp	r3, #0
 800d836:	d15c      	bne.n	800d8f2 <osMutexNew+0x102>
      mem = -1;
 800d838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d83c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d015      	beq.n	800d870 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d006      	beq.n	800d85a <osMutexNew+0x6a>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	2b4f      	cmp	r3, #79	; 0x4f
 800d852:	d902      	bls.n	800d85a <osMutexNew+0x6a>
          mem = 1;
 800d854:	2301      	movs	r3, #1
 800d856:	613b      	str	r3, [r7, #16]
 800d858:	e00c      	b.n	800d874 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d108      	bne.n	800d874 <osMutexNew+0x84>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d104      	bne.n	800d874 <osMutexNew+0x84>
            mem = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	613b      	str	r3, [r7, #16]
 800d86e:	e001      	b.n	800d874 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d870:	2300      	movs	r3, #0
 800d872:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d112      	bne.n	800d8a0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d007      	beq.n	800d890 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	4619      	mov	r1, r3
 800d886:	2004      	movs	r0, #4
 800d888:	f000 fc37 	bl	800e0fa <xQueueCreateMutexStatic>
 800d88c:	61f8      	str	r0, [r7, #28]
 800d88e:	e016      	b.n	800d8be <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	4619      	mov	r1, r3
 800d896:	2001      	movs	r0, #1
 800d898:	f000 fc2f 	bl	800e0fa <xQueueCreateMutexStatic>
 800d89c:	61f8      	str	r0, [r7, #28]
 800d89e:	e00e      	b.n	800d8be <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10b      	bne.n	800d8be <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d004      	beq.n	800d8b6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d8ac:	2004      	movs	r0, #4
 800d8ae:	f000 fc0c 	bl	800e0ca <xQueueCreateMutex>
 800d8b2:	61f8      	str	r0, [r7, #28]
 800d8b4:	e003      	b.n	800d8be <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d8b6:	2001      	movs	r0, #1
 800d8b8:	f000 fc07 	bl	800e0ca <xQueueCreateMutex>
 800d8bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00c      	beq.n	800d8de <osMutexNew+0xee>
        if (attr != NULL) {
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d003      	beq.n	800d8d2 <osMutexNew+0xe2>
          name = attr->name;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	e001      	b.n	800d8d6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d8d6:	68f9      	ldr	r1, [r7, #12]
 800d8d8:	69f8      	ldr	r0, [r7, #28]
 800d8da:	f001 fadb 	bl	800ee94 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d006      	beq.n	800d8f2 <osMutexNew+0x102>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	f043 0301 	orr.w	r3, r3, #1
 800d8f0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d8f2:	69fb      	ldr	r3, [r7, #28]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3720      	adds	r7, #32
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f023 0301 	bic.w	r3, r3, #1
 800d90c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d916:	2300      	movs	r3, #0
 800d918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d91a:	f3ef 8305 	mrs	r3, IPSR
 800d91e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d920:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d926:	f06f 0305 	mvn.w	r3, #5
 800d92a:	617b      	str	r3, [r7, #20]
 800d92c:	e02c      	b.n	800d988 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d103      	bne.n	800d93c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d934:	f06f 0303 	mvn.w	r3, #3
 800d938:	617b      	str	r3, [r7, #20]
 800d93a:	e025      	b.n	800d988 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d011      	beq.n	800d966 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	6938      	ldr	r0, [r7, #16]
 800d946:	f000 fc27 	bl	800e198 <xQueueTakeMutexRecursive>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d01b      	beq.n	800d988 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d956:	f06f 0301 	mvn.w	r3, #1
 800d95a:	617b      	str	r3, [r7, #20]
 800d95c:	e014      	b.n	800d988 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d95e:	f06f 0302 	mvn.w	r3, #2
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	e010      	b.n	800d988 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6938      	ldr	r0, [r7, #16]
 800d96a:	f000 ffbb 	bl	800e8e4 <xQueueSemaphoreTake>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b01      	cmp	r3, #1
 800d972:	d009      	beq.n	800d988 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d003      	beq.n	800d982 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d97a:	f06f 0301 	mvn.w	r3, #1
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	e002      	b.n	800d988 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d982:	f06f 0302 	mvn.w	r3, #2
 800d986:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d988:	697b      	ldr	r3, [r7, #20]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d992:	b580      	push	{r7, lr}
 800d994:	b086      	sub	sp, #24
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f023 0301 	bic.w	r3, r3, #1
 800d9a0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f003 0301 	and.w	r3, r3, #1
 800d9a8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9ae:	f3ef 8305 	mrs	r3, IPSR
 800d9b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9b4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d9ba:	f06f 0305 	mvn.w	r3, #5
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	e01f      	b.n	800da02 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d103      	bne.n	800d9d0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d9c8:	f06f 0303 	mvn.w	r3, #3
 800d9cc:	617b      	str	r3, [r7, #20]
 800d9ce:	e018      	b.n	800da02 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d009      	beq.n	800d9ea <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d9d6:	6938      	ldr	r0, [r7, #16]
 800d9d8:	f000 fbaa 	bl	800e130 <xQueueGiveMutexRecursive>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d00f      	beq.n	800da02 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d9e2:	f06f 0302 	mvn.w	r3, #2
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	e00b      	b.n	800da02 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	6938      	ldr	r0, [r7, #16]
 800d9f2:	f000 fc71 	bl	800e2d8 <xQueueGenericSend>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d002      	beq.n	800da02 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d9fc:	f06f 0302 	mvn.w	r3, #2
 800da00:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800da02:	697b      	ldr	r3, [r7, #20]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3718      	adds	r7, #24
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08a      	sub	sp, #40	; 0x28
 800da10:	af02      	add	r7, sp, #8
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800da18:	2300      	movs	r3, #0
 800da1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da1c:	f3ef 8305 	mrs	r3, IPSR
 800da20:	613b      	str	r3, [r7, #16]
  return(result);
 800da22:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800da24:	2b00      	cmp	r3, #0
 800da26:	d175      	bne.n	800db14 <osSemaphoreNew+0x108>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d072      	beq.n	800db14 <osSemaphoreNew+0x108>
 800da2e:	68ba      	ldr	r2, [r7, #8]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	429a      	cmp	r2, r3
 800da34:	d86e      	bhi.n	800db14 <osSemaphoreNew+0x108>
    mem = -1;
 800da36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d015      	beq.n	800da6e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d006      	beq.n	800da58 <osSemaphoreNew+0x4c>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	2b4f      	cmp	r3, #79	; 0x4f
 800da50:	d902      	bls.n	800da58 <osSemaphoreNew+0x4c>
        mem = 1;
 800da52:	2301      	movs	r3, #1
 800da54:	61bb      	str	r3, [r7, #24]
 800da56:	e00c      	b.n	800da72 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d108      	bne.n	800da72 <osSemaphoreNew+0x66>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d104      	bne.n	800da72 <osSemaphoreNew+0x66>
          mem = 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	61bb      	str	r3, [r7, #24]
 800da6c:	e001      	b.n	800da72 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da78:	d04c      	beq.n	800db14 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d128      	bne.n	800dad2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d10a      	bne.n	800da9c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	2203      	movs	r2, #3
 800da8c:	9200      	str	r2, [sp, #0]
 800da8e:	2200      	movs	r2, #0
 800da90:	2100      	movs	r1, #0
 800da92:	2001      	movs	r0, #1
 800da94:	f000 fa2a 	bl	800deec <xQueueGenericCreateStatic>
 800da98:	61f8      	str	r0, [r7, #28]
 800da9a:	e005      	b.n	800daa8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800da9c:	2203      	movs	r2, #3
 800da9e:	2100      	movs	r1, #0
 800daa0:	2001      	movs	r0, #1
 800daa2:	f000 fa9b 	bl	800dfdc <xQueueGenericCreate>
 800daa6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d022      	beq.n	800daf4 <osSemaphoreNew+0xe8>
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01f      	beq.n	800daf4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dab4:	2300      	movs	r3, #0
 800dab6:	2200      	movs	r2, #0
 800dab8:	2100      	movs	r1, #0
 800daba:	69f8      	ldr	r0, [r7, #28]
 800dabc:	f000 fc0c 	bl	800e2d8 <xQueueGenericSend>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d016      	beq.n	800daf4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dac6:	69f8      	ldr	r0, [r7, #28]
 800dac8:	f001 f898 	bl	800ebfc <vQueueDelete>
            hSemaphore = NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	61fb      	str	r3, [r7, #28]
 800dad0:	e010      	b.n	800daf4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d108      	bne.n	800daea <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	461a      	mov	r2, r3
 800dade:	68b9      	ldr	r1, [r7, #8]
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 fb8f 	bl	800e204 <xQueueCreateCountingSemaphoreStatic>
 800dae6:	61f8      	str	r0, [r7, #28]
 800dae8:	e004      	b.n	800daf4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800daea:	68b9      	ldr	r1, [r7, #8]
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 fbc0 	bl	800e272 <xQueueCreateCountingSemaphore>
 800daf2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00c      	beq.n	800db14 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d003      	beq.n	800db08 <osSemaphoreNew+0xfc>
          name = attr->name;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	617b      	str	r3, [r7, #20]
 800db06:	e001      	b.n	800db0c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800db08:	2300      	movs	r3, #0
 800db0a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800db0c:	6979      	ldr	r1, [r7, #20]
 800db0e:	69f8      	ldr	r0, [r7, #28]
 800db10:	f001 f9c0 	bl	800ee94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800db14:	69fb      	ldr	r3, [r7, #28]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3720      	adds	r7, #32
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
	...

0800db20 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800db2e:	2300      	movs	r3, #0
 800db30:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d103      	bne.n	800db40 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800db38:	f06f 0303 	mvn.w	r3, #3
 800db3c:	617b      	str	r3, [r7, #20]
 800db3e:	e039      	b.n	800dbb4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db40:	f3ef 8305 	mrs	r3, IPSR
 800db44:	60fb      	str	r3, [r7, #12]
  return(result);
 800db46:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d022      	beq.n	800db92 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800db52:	f06f 0303 	mvn.w	r3, #3
 800db56:	617b      	str	r3, [r7, #20]
 800db58:	e02c      	b.n	800dbb4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800db5e:	f107 0308 	add.w	r3, r7, #8
 800db62:	461a      	mov	r2, r3
 800db64:	2100      	movs	r1, #0
 800db66:	6938      	ldr	r0, [r7, #16]
 800db68:	f000 ffc8 	bl	800eafc <xQueueReceiveFromISR>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d003      	beq.n	800db7a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800db72:	f06f 0302 	mvn.w	r3, #2
 800db76:	617b      	str	r3, [r7, #20]
 800db78:	e01c      	b.n	800dbb4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d019      	beq.n	800dbb4 <osSemaphoreAcquire+0x94>
 800db80:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <osSemaphoreAcquire+0xa0>)
 800db82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db86:	601a      	str	r2, [r3, #0]
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	e010      	b.n	800dbb4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6938      	ldr	r0, [r7, #16]
 800db96:	f000 fea5 	bl	800e8e4 <xQueueSemaphoreTake>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d009      	beq.n	800dbb4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800dba6:	f06f 0301 	mvn.w	r3, #1
 800dbaa:	617b      	str	r3, [r7, #20]
 800dbac:	e002      	b.n	800dbb4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800dbae:	f06f 0302 	mvn.w	r3, #2
 800dbb2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dbb4:	697b      	ldr	r3, [r7, #20]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	e000ed04 	.word	0xe000ed04

0800dbc4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d103      	bne.n	800dbe2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800dbda:	f06f 0303 	mvn.w	r3, #3
 800dbde:	617b      	str	r3, [r7, #20]
 800dbe0:	e02c      	b.n	800dc3c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe2:	f3ef 8305 	mrs	r3, IPSR
 800dbe6:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01a      	beq.n	800dc24 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dbf2:	f107 0308 	add.w	r3, r7, #8
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6938      	ldr	r0, [r7, #16]
 800dbfa:	f000 fd06 	bl	800e60a <xQueueGiveFromISR>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d003      	beq.n	800dc0c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800dc04:	f06f 0302 	mvn.w	r3, #2
 800dc08:	617b      	str	r3, [r7, #20]
 800dc0a:	e017      	b.n	800dc3c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d014      	beq.n	800dc3c <osSemaphoreRelease+0x78>
 800dc12:	4b0d      	ldr	r3, [pc, #52]	; (800dc48 <osSemaphoreRelease+0x84>)
 800dc14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	e00b      	b.n	800dc3c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dc24:	2300      	movs	r3, #0
 800dc26:	2200      	movs	r2, #0
 800dc28:	2100      	movs	r1, #0
 800dc2a:	6938      	ldr	r0, [r7, #16]
 800dc2c:	f000 fb54 	bl	800e2d8 <xQueueGenericSend>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d002      	beq.n	800dc3c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800dc36:	f06f 0302 	mvn.w	r3, #2
 800dc3a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dc3c:	697b      	ldr	r3, [r7, #20]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	e000ed04 	.word	0xe000ed04

0800dc4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc4c:	b480      	push	{r7}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4a07      	ldr	r2, [pc, #28]	; (800dc78 <vApplicationGetIdleTaskMemory+0x2c>)
 800dc5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	4a06      	ldr	r2, [pc, #24]	; (800dc7c <vApplicationGetIdleTaskMemory+0x30>)
 800dc62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc6a:	601a      	str	r2, [r3, #0]
}
 800dc6c:	bf00      	nop
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	20002cfc 	.word	0x20002cfc
 800dc7c:	20002da8 	.word	0x20002da8

0800dc80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4a07      	ldr	r2, [pc, #28]	; (800dcac <vApplicationGetTimerTaskMemory+0x2c>)
 800dc90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	4a06      	ldr	r2, [pc, #24]	; (800dcb0 <vApplicationGetTimerTaskMemory+0x30>)
 800dc96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc9e:	601a      	str	r2, [r3, #0]
}
 800dca0:	bf00      	nop
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	200031a8 	.word	0x200031a8
 800dcb0:	20003254 	.word	0x20003254

0800dcb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f103 0208 	add.w	r2, r3, #8
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f103 0208 	add.w	r2, r3, #8
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f103 0208 	add.w	r2, r3, #8
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd02:	bf00      	nop
 800dd04:	370c      	adds	r7, #12
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b085      	sub	sp, #20
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	689a      	ldr	r2, [r3, #8]
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	687a      	ldr	r2, [r7, #4]
 800dd3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	1c5a      	adds	r2, r3, #1
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	601a      	str	r2, [r3, #0]
}
 800dd4a:	bf00      	nop
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd56:	b480      	push	{r7}
 800dd58:	b085      	sub	sp, #20
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd6c:	d103      	bne.n	800dd76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	60fb      	str	r3, [r7, #12]
 800dd74:	e00c      	b.n	800dd90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3308      	adds	r3, #8
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e002      	b.n	800dd84 <vListInsert+0x2e>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	60fb      	str	r3, [r7, #12]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d2f6      	bcs.n	800dd7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	601a      	str	r2, [r3, #0]
}
 800ddbc:	bf00      	nop
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	6892      	ldr	r2, [r2, #8]
 800ddde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	6852      	ldr	r2, [r2, #4]
 800dde8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d103      	bne.n	800ddfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689a      	ldr	r2, [r3, #8]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	1e5a      	subs	r2, r3, #1
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10a      	bne.n	800de46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de42:	bf00      	nop
 800de44:	e7fe      	b.n	800de44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800de46:	f002 fd6d 	bl	8010924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de52:	68f9      	ldr	r1, [r7, #12]
 800de54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de56:	fb01 f303 	mul.w	r3, r1, r3
 800de5a:	441a      	add	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de76:	3b01      	subs	r3, #1
 800de78:	68f9      	ldr	r1, [r7, #12]
 800de7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de7c:	fb01 f303 	mul.w	r3, r1, r3
 800de80:	441a      	add	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	22ff      	movs	r2, #255	; 0xff
 800de8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	22ff      	movs	r2, #255	; 0xff
 800de92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d114      	bne.n	800dec6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d01a      	beq.n	800deda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3310      	adds	r3, #16
 800dea8:	4618      	mov	r0, r3
 800deaa:	f001 fd13 	bl	800f8d4 <xTaskRemoveFromEventList>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d012      	beq.n	800deda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800deb4:	4b0c      	ldr	r3, [pc, #48]	; (800dee8 <xQueueGenericReset+0xcc>)
 800deb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	e009      	b.n	800deda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3310      	adds	r3, #16
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff fef2 	bl	800dcb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3324      	adds	r3, #36	; 0x24
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff feed 	bl	800dcb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800deda:	f002 fd53 	bl	8010984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dede:	2301      	movs	r3, #1
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08e      	sub	sp, #56	; 0x38
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d10a      	bne.n	800df16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df12:	bf00      	nop
 800df14:	e7fe      	b.n	800df14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10a      	bne.n	800df32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800df1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df20:	f383 8811 	msr	BASEPRI, r3
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df2e:	bf00      	nop
 800df30:	e7fe      	b.n	800df30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d002      	beq.n	800df3e <xQueueGenericCreateStatic+0x52>
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <xQueueGenericCreateStatic+0x56>
 800df3e:	2301      	movs	r3, #1
 800df40:	e000      	b.n	800df44 <xQueueGenericCreateStatic+0x58>
 800df42:	2300      	movs	r3, #0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10a      	bne.n	800df5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	623b      	str	r3, [r7, #32]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d102      	bne.n	800df6a <xQueueGenericCreateStatic+0x7e>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <xQueueGenericCreateStatic+0x82>
 800df6a:	2301      	movs	r3, #1
 800df6c:	e000      	b.n	800df70 <xQueueGenericCreateStatic+0x84>
 800df6e:	2300      	movs	r3, #0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10a      	bne.n	800df8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	61fb      	str	r3, [r7, #28]
}
 800df86:	bf00      	nop
 800df88:	e7fe      	b.n	800df88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df8a:	2350      	movs	r3, #80	; 0x50
 800df8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b50      	cmp	r3, #80	; 0x50
 800df92:	d00a      	beq.n	800dfaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	61bb      	str	r3, [r7, #24]
}
 800dfa6:	bf00      	nop
 800dfa8:	e7fe      	b.n	800dfa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dfaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00d      	beq.n	800dfd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	68b9      	ldr	r1, [r7, #8]
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f000 f83f 	bl	800e050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3730      	adds	r7, #48	; 0x30
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	; 0x28
 800dfe0:	af02      	add	r7, sp, #8
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10a      	bne.n	800e006 <xQueueGenericCreate+0x2a>
	__asm volatile
 800dff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	613b      	str	r3, [r7, #16]
}
 800e002:	bf00      	nop
 800e004:	e7fe      	b.n	800e004 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	68ba      	ldr	r2, [r7, #8]
 800e00a:	fb02 f303 	mul.w	r3, r2, r3
 800e00e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	3350      	adds	r3, #80	; 0x50
 800e014:	4618      	mov	r0, r3
 800e016:	f002 fda7 	bl	8010b68 <pvPortMalloc>
 800e01a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d011      	beq.n	800e046 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	3350      	adds	r3, #80	; 0x50
 800e02a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e034:	79fa      	ldrb	r2, [r7, #7]
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	4613      	mov	r3, r2
 800e03c:	697a      	ldr	r2, [r7, #20]
 800e03e:	68b9      	ldr	r1, [r7, #8]
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f000 f805 	bl	800e050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e046:	69bb      	ldr	r3, [r7, #24]
	}
 800e048:	4618      	mov	r0, r3
 800e04a:	3720      	adds	r7, #32
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d103      	bne.n	800e06c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	e002      	b.n	800e072 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e07e:	2101      	movs	r1, #1
 800e080:	69b8      	ldr	r0, [r7, #24]
 800e082:	f7ff fecb 	bl	800de1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	78fa      	ldrb	r2, [r7, #3]
 800e08a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e08e:	bf00      	nop
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e096:	b580      	push	{r7, lr}
 800e098:	b082      	sub	sp, #8
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00e      	beq.n	800e0c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f90b 	bl	800e2d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e0c2:	bf00      	nop
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b086      	sub	sp, #24
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	617b      	str	r3, [r7, #20]
 800e0d8:	2300      	movs	r3, #0
 800e0da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	6939      	ldr	r1, [r7, #16]
 800e0e2:	6978      	ldr	r0, [r7, #20]
 800e0e4:	f7ff ff7a 	bl	800dfdc <xQueueGenericCreate>
 800e0e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f7ff ffd3 	bl	800e096 <prvInitialiseMutex>

		return xNewQueue;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
	}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b088      	sub	sp, #32
 800e0fe:	af02      	add	r7, sp, #8
 800e100:	4603      	mov	r3, r0
 800e102:	6039      	str	r1, [r7, #0]
 800e104:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e106:	2301      	movs	r3, #1
 800e108:	617b      	str	r3, [r7, #20]
 800e10a:	2300      	movs	r3, #0
 800e10c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	2200      	movs	r2, #0
 800e116:	6939      	ldr	r1, [r7, #16]
 800e118:	6978      	ldr	r0, [r7, #20]
 800e11a:	f7ff fee7 	bl	800deec <xQueueGenericCreateStatic>
 800e11e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f7ff ffb8 	bl	800e096 <prvInitialiseMutex>

		return xNewQueue;
 800e126:	68fb      	ldr	r3, [r7, #12]
	}
 800e128:	4618      	mov	r0, r3
 800e12a:	3718      	adds	r7, #24
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e130:	b590      	push	{r4, r7, lr}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10a      	bne.n	800e158 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	60fb      	str	r3, [r7, #12]
}
 800e154:	bf00      	nop
 800e156:	e7fe      	b.n	800e156 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	689c      	ldr	r4, [r3, #8]
 800e15c:	f001 fd7c 	bl	800fc58 <xTaskGetCurrentTaskHandle>
 800e160:	4603      	mov	r3, r0
 800e162:	429c      	cmp	r4, r3
 800e164:	d111      	bne.n	800e18a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	1e5a      	subs	r2, r3, #1
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d105      	bne.n	800e184 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e178:	2300      	movs	r3, #0
 800e17a:	2200      	movs	r2, #0
 800e17c:	2100      	movs	r1, #0
 800e17e:	6938      	ldr	r0, [r7, #16]
 800e180:	f000 f8aa 	bl	800e2d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e184:	2301      	movs	r3, #1
 800e186:	617b      	str	r3, [r7, #20]
 800e188:	e001      	b.n	800e18e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e18e:	697b      	ldr	r3, [r7, #20]
	}
 800e190:	4618      	mov	r0, r3
 800e192:	371c      	adds	r7, #28
 800e194:	46bd      	mov	sp, r7
 800e196:	bd90      	pop	{r4, r7, pc}

0800e198 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e198:	b590      	push	{r4, r7, lr}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10a      	bne.n	800e1c2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	60fb      	str	r3, [r7, #12]
}
 800e1be:	bf00      	nop
 800e1c0:	e7fe      	b.n	800e1c0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	689c      	ldr	r4, [r3, #8]
 800e1c6:	f001 fd47 	bl	800fc58 <xTaskGetCurrentTaskHandle>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	429c      	cmp	r4, r3
 800e1ce:	d107      	bne.n	800e1e0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	617b      	str	r3, [r7, #20]
 800e1de:	e00c      	b.n	800e1fa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6938      	ldr	r0, [r7, #16]
 800e1e4:	f000 fb7e 	bl	800e8e4 <xQueueSemaphoreTake>
 800e1e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d004      	beq.n	800e1fa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	1c5a      	adds	r2, r3, #1
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e1fa:	697b      	ldr	r3, [r7, #20]
	}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	371c      	adds	r7, #28
 800e200:	46bd      	mov	sp, r7
 800e202:	bd90      	pop	{r4, r7, pc}

0800e204 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e204:	b580      	push	{r7, lr}
 800e206:	b08a      	sub	sp, #40	; 0x28
 800e208:	af02      	add	r7, sp, #8
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10a      	bne.n	800e22c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	61bb      	str	r3, [r7, #24]
}
 800e228:	bf00      	nop
 800e22a:	e7fe      	b.n	800e22a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	429a      	cmp	r2, r3
 800e232:	d90a      	bls.n	800e24a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	617b      	str	r3, [r7, #20]
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e24a:	2302      	movs	r3, #2
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	2100      	movs	r1, #0
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7ff fe49 	bl	800deec <xQueueGenericCreateStatic>
 800e25a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e268:	69fb      	ldr	r3, [r7, #28]
	}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3720      	adds	r7, #32
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e272:	b580      	push	{r7, lr}
 800e274:	b086      	sub	sp, #24
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10a      	bne.n	800e298 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	613b      	str	r3, [r7, #16]
}
 800e294:	bf00      	nop
 800e296:	e7fe      	b.n	800e296 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d90a      	bls.n	800e2b6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	60fb      	str	r3, [r7, #12]
}
 800e2b2:	bf00      	nop
 800e2b4:	e7fe      	b.n	800e2b4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7ff fe8e 	bl	800dfdc <xQueueGenericCreate>
 800e2c0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d002      	beq.n	800e2ce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e2ce:	697b      	ldr	r3, [r7, #20]
	}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3718      	adds	r7, #24
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08e      	sub	sp, #56	; 0x38
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
 800e2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10a      	bne.n	800e30a <xQueueGenericSend+0x32>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e306:	bf00      	nop
 800e308:	e7fe      	b.n	800e308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d103      	bne.n	800e318 <xQueueGenericSend+0x40>
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <xQueueGenericSend+0x44>
 800e318:	2301      	movs	r3, #1
 800e31a:	e000      	b.n	800e31e <xQueueGenericSend+0x46>
 800e31c:	2300      	movs	r3, #0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10a      	bne.n	800e338 <xQueueGenericSend+0x60>
	__asm volatile
 800e322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e326:	f383 8811 	msr	BASEPRI, r3
 800e32a:	f3bf 8f6f 	isb	sy
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d103      	bne.n	800e346 <xQueueGenericSend+0x6e>
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e342:	2b01      	cmp	r3, #1
 800e344:	d101      	bne.n	800e34a <xQueueGenericSend+0x72>
 800e346:	2301      	movs	r3, #1
 800e348:	e000      	b.n	800e34c <xQueueGenericSend+0x74>
 800e34a:	2300      	movs	r3, #0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <xQueueGenericSend+0x8e>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	623b      	str	r3, [r7, #32]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e366:	f001 fc87 	bl	800fc78 <xTaskGetSchedulerState>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d102      	bne.n	800e376 <xQueueGenericSend+0x9e>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <xQueueGenericSend+0xa2>
 800e376:	2301      	movs	r3, #1
 800e378:	e000      	b.n	800e37c <xQueueGenericSend+0xa4>
 800e37a:	2300      	movs	r3, #0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10a      	bne.n	800e396 <xQueueGenericSend+0xbe>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	61fb      	str	r3, [r7, #28]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e396:	f002 fac5 	bl	8010924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d302      	bcc.n	800e3ac <xQueueGenericSend+0xd4>
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d129      	bne.n	800e400 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	68b9      	ldr	r1, [r7, #8]
 800e3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3b2:	f000 fc5e 	bl	800ec72 <prvCopyDataToQueue>
 800e3b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d010      	beq.n	800e3e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c2:	3324      	adds	r3, #36	; 0x24
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f001 fa85 	bl	800f8d4 <xTaskRemoveFromEventList>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d013      	beq.n	800e3f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e3d0:	4b3f      	ldr	r3, [pc, #252]	; (800e4d0 <xQueueGenericSend+0x1f8>)
 800e3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3d6:	601a      	str	r2, [r3, #0]
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	e00a      	b.n	800e3f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d007      	beq.n	800e3f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3e8:	4b39      	ldr	r3, [pc, #228]	; (800e4d0 <xQueueGenericSend+0x1f8>)
 800e3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3f8:	f002 fac4 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e063      	b.n	800e4c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d103      	bne.n	800e40e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e406:	f002 fabd 	bl	8010984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e40a:	2300      	movs	r3, #0
 800e40c:	e05c      	b.n	800e4c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e410:	2b00      	cmp	r3, #0
 800e412:	d106      	bne.n	800e422 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e414:	f107 0314 	add.w	r3, r7, #20
 800e418:	4618      	mov	r0, r3
 800e41a:	f001 fabf 	bl	800f99c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e41e:	2301      	movs	r3, #1
 800e420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e422:	f002 faaf 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e426:	f001 f819 	bl	800f45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e42a:	f002 fa7b 	bl	8010924 <vPortEnterCritical>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e434:	b25b      	sxtb	r3, r3
 800e436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e43a:	d103      	bne.n	800e444 <xQueueGenericSend+0x16c>
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e44a:	b25b      	sxtb	r3, r3
 800e44c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e450:	d103      	bne.n	800e45a <xQueueGenericSend+0x182>
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e45a:	f002 fa93 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e45e:	1d3a      	adds	r2, r7, #4
 800e460:	f107 0314 	add.w	r3, r7, #20
 800e464:	4611      	mov	r1, r2
 800e466:	4618      	mov	r0, r3
 800e468:	f001 faae 	bl	800f9c8 <xTaskCheckForTimeOut>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d124      	bne.n	800e4bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e474:	f000 fcf5 	bl	800ee62 <prvIsQueueFull>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d018      	beq.n	800e4b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e480:	3310      	adds	r3, #16
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f001 f9d4 	bl	800f834 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e48e:	f000 fc80 	bl	800ed92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e492:	f000 fff1 	bl	800f478 <xTaskResumeAll>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f47f af7c 	bne.w	800e396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e49e:	4b0c      	ldr	r3, [pc, #48]	; (800e4d0 <xQueueGenericSend+0x1f8>)
 800e4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	e772      	b.n	800e396 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4b2:	f000 fc6e 	bl	800ed92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4b6:	f000 ffdf 	bl	800f478 <xTaskResumeAll>
 800e4ba:	e76c      	b.n	800e396 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4be:	f000 fc68 	bl	800ed92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4c2:	f000 ffd9 	bl	800f478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e4c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3738      	adds	r7, #56	; 0x38
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	e000ed04 	.word	0xe000ed04

0800e4d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b090      	sub	sp, #64	; 0x40
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10a      	bne.n	800e502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4fe:	bf00      	nop
 800e500:	e7fe      	b.n	800e500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d103      	bne.n	800e510 <xQueueGenericSendFromISR+0x3c>
 800e508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <xQueueGenericSendFromISR+0x40>
 800e510:	2301      	movs	r3, #1
 800e512:	e000      	b.n	800e516 <xQueueGenericSendFromISR+0x42>
 800e514:	2300      	movs	r3, #0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10a      	bne.n	800e530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51e:	f383 8811 	msr	BASEPRI, r3
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e52c:	bf00      	nop
 800e52e:	e7fe      	b.n	800e52e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	2b02      	cmp	r3, #2
 800e534:	d103      	bne.n	800e53e <xQueueGenericSendFromISR+0x6a>
 800e536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d101      	bne.n	800e542 <xQueueGenericSendFromISR+0x6e>
 800e53e:	2301      	movs	r3, #1
 800e540:	e000      	b.n	800e544 <xQueueGenericSendFromISR+0x70>
 800e542:	2300      	movs	r3, #0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10a      	bne.n	800e55e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	623b      	str	r3, [r7, #32]
}
 800e55a:	bf00      	nop
 800e55c:	e7fe      	b.n	800e55c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e55e:	f002 fac3 	bl	8010ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e562:	f3ef 8211 	mrs	r2, BASEPRI
 800e566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	61fa      	str	r2, [r7, #28]
 800e578:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e57a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e57c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e586:	429a      	cmp	r2, r3
 800e588:	d302      	bcc.n	800e590 <xQueueGenericSendFromISR+0xbc>
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d12f      	bne.n	800e5f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5a6:	f000 fb64 	bl	800ec72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5b2:	d112      	bne.n	800e5da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d016      	beq.n	800e5ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	3324      	adds	r3, #36	; 0x24
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f001 f987 	bl	800f8d4 <xTaskRemoveFromEventList>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00e      	beq.n	800e5ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00b      	beq.n	800e5ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	e007      	b.n	800e5ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5de:	3301      	adds	r3, #1
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	b25a      	sxtb	r2, r3
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e5ee:	e001      	b.n	800e5f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e5fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e602:	4618      	mov	r0, r3
 800e604:	3740      	adds	r7, #64	; 0x40
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b08e      	sub	sp, #56	; 0x38
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10a      	bne.n	800e634 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	623b      	str	r3, [r7, #32]
}
 800e630:	bf00      	nop
 800e632:	e7fe      	b.n	800e632 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00a      	beq.n	800e652 <xQueueGiveFromISR+0x48>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	61fb      	str	r3, [r7, #28]
}
 800e64e:	bf00      	nop
 800e650:	e7fe      	b.n	800e650 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d103      	bne.n	800e662 <xQueueGiveFromISR+0x58>
 800e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d101      	bne.n	800e666 <xQueueGiveFromISR+0x5c>
 800e662:	2301      	movs	r3, #1
 800e664:	e000      	b.n	800e668 <xQueueGiveFromISR+0x5e>
 800e666:	2300      	movs	r3, #0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10a      	bne.n	800e682 <xQueueGiveFromISR+0x78>
	__asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	61bb      	str	r3, [r7, #24]
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e682:	f002 fa31 	bl	8010ae8 <vPortValidateInterruptPriority>
	__asm volatile
 800e686:	f3ef 8211 	mrs	r2, BASEPRI
 800e68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	617a      	str	r2, [r7, #20]
 800e69c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e69e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d22b      	bcs.n	800e70a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6cc:	d112      	bne.n	800e6f4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d016      	beq.n	800e704 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d8:	3324      	adds	r3, #36	; 0x24
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f001 f8fa 	bl	800f8d4 <xTaskRemoveFromEventList>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00e      	beq.n	800e704 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00b      	beq.n	800e704 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	601a      	str	r2, [r3, #0]
 800e6f2:	e007      	b.n	800e704 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	b25a      	sxtb	r2, r3
 800e6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e704:	2301      	movs	r3, #1
 800e706:	637b      	str	r3, [r7, #52]	; 0x34
 800e708:	e001      	b.n	800e70e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e70a:	2300      	movs	r3, #0
 800e70c:	637b      	str	r3, [r7, #52]	; 0x34
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f383 8811 	msr	BASEPRI, r3
}
 800e718:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3738      	adds	r7, #56	; 0x38
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b08c      	sub	sp, #48	; 0x30
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e730:	2300      	movs	r3, #0
 800e732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10a      	bne.n	800e754 <xQueueReceive+0x30>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	623b      	str	r3, [r7, #32]
}
 800e750:	bf00      	nop
 800e752:	e7fe      	b.n	800e752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d103      	bne.n	800e762 <xQueueReceive+0x3e>
 800e75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <xQueueReceive+0x42>
 800e762:	2301      	movs	r3, #1
 800e764:	e000      	b.n	800e768 <xQueueReceive+0x44>
 800e766:	2300      	movs	r3, #0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d10a      	bne.n	800e782 <xQueueReceive+0x5e>
	__asm volatile
 800e76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e770:	f383 8811 	msr	BASEPRI, r3
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	61fb      	str	r3, [r7, #28]
}
 800e77e:	bf00      	nop
 800e780:	e7fe      	b.n	800e780 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e782:	f001 fa79 	bl	800fc78 <xTaskGetSchedulerState>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d102      	bne.n	800e792 <xQueueReceive+0x6e>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <xQueueReceive+0x72>
 800e792:	2301      	movs	r3, #1
 800e794:	e000      	b.n	800e798 <xQueueReceive+0x74>
 800e796:	2300      	movs	r3, #0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10a      	bne.n	800e7b2 <xQueueReceive+0x8e>
	__asm volatile
 800e79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a0:	f383 8811 	msr	BASEPRI, r3
 800e7a4:	f3bf 8f6f 	isb	sy
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	61bb      	str	r3, [r7, #24]
}
 800e7ae:	bf00      	nop
 800e7b0:	e7fe      	b.n	800e7b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7b2:	f002 f8b7 	bl	8010924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d01f      	beq.n	800e802 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7c2:	68b9      	ldr	r1, [r7, #8]
 800e7c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7c6:	f000 fabe 	bl	800ed46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	1e5a      	subs	r2, r3, #1
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00f      	beq.n	800e7fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7dc:	3310      	adds	r3, #16
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f001 f878 	bl	800f8d4 <xTaskRemoveFromEventList>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d007      	beq.n	800e7fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7ea:	4b3d      	ldr	r3, [pc, #244]	; (800e8e0 <xQueueReceive+0x1bc>)
 800e7ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7fa:	f002 f8c3 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e069      	b.n	800e8d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d103      	bne.n	800e810 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e808:	f002 f8bc 	bl	8010984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e80c:	2300      	movs	r3, #0
 800e80e:	e062      	b.n	800e8d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d106      	bne.n	800e824 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e816:	f107 0310 	add.w	r3, r7, #16
 800e81a:	4618      	mov	r0, r3
 800e81c:	f001 f8be 	bl	800f99c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e820:	2301      	movs	r3, #1
 800e822:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e824:	f002 f8ae 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e828:	f000 fe18 	bl	800f45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e82c:	f002 f87a 	bl	8010924 <vPortEnterCritical>
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e836:	b25b      	sxtb	r3, r3
 800e838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e83c:	d103      	bne.n	800e846 <xQueueReceive+0x122>
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	2200      	movs	r2, #0
 800e842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e84c:	b25b      	sxtb	r3, r3
 800e84e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e852:	d103      	bne.n	800e85c <xQueueReceive+0x138>
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	2200      	movs	r2, #0
 800e858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e85c:	f002 f892 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e860:	1d3a      	adds	r2, r7, #4
 800e862:	f107 0310 	add.w	r3, r7, #16
 800e866:	4611      	mov	r1, r2
 800e868:	4618      	mov	r0, r3
 800e86a:	f001 f8ad 	bl	800f9c8 <xTaskCheckForTimeOut>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d123      	bne.n	800e8bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e876:	f000 fade 	bl	800ee36 <prvIsQueueEmpty>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d017      	beq.n	800e8b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	3324      	adds	r3, #36	; 0x24
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	4611      	mov	r1, r2
 800e888:	4618      	mov	r0, r3
 800e88a:	f000 ffd3 	bl	800f834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e88e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e890:	f000 fa7f 	bl	800ed92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e894:	f000 fdf0 	bl	800f478 <xTaskResumeAll>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d189      	bne.n	800e7b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e89e:	4b10      	ldr	r3, [pc, #64]	; (800e8e0 <xQueueReceive+0x1bc>)
 800e8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	e780      	b.n	800e7b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8b2:	f000 fa6e 	bl	800ed92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8b6:	f000 fddf 	bl	800f478 <xTaskResumeAll>
 800e8ba:	e77a      	b.n	800e7b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8be:	f000 fa68 	bl	800ed92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8c2:	f000 fdd9 	bl	800f478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c8:	f000 fab5 	bl	800ee36 <prvIsQueueEmpty>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f43f af6f 	beq.w	800e7b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e8d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3730      	adds	r7, #48	; 0x30
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	e000ed04 	.word	0xe000ed04

0800e8e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b08e      	sub	sp, #56	; 0x38
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10a      	bne.n	800e916 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	623b      	str	r3, [r7, #32]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00a      	beq.n	800e934 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e922:	f383 8811 	msr	BASEPRI, r3
 800e926:	f3bf 8f6f 	isb	sy
 800e92a:	f3bf 8f4f 	dsb	sy
 800e92e:	61fb      	str	r3, [r7, #28]
}
 800e930:	bf00      	nop
 800e932:	e7fe      	b.n	800e932 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e934:	f001 f9a0 	bl	800fc78 <xTaskGetSchedulerState>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d102      	bne.n	800e944 <xQueueSemaphoreTake+0x60>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d101      	bne.n	800e948 <xQueueSemaphoreTake+0x64>
 800e944:	2301      	movs	r3, #1
 800e946:	e000      	b.n	800e94a <xQueueSemaphoreTake+0x66>
 800e948:	2300      	movs	r3, #0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10a      	bne.n	800e964 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	61bb      	str	r3, [r7, #24]
}
 800e960:	bf00      	nop
 800e962:	e7fe      	b.n	800e962 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e964:	f001 ffde 	bl	8010924 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e970:	2b00      	cmp	r3, #0
 800e972:	d024      	beq.n	800e9be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	1e5a      	subs	r2, r3, #1
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d104      	bne.n	800e98e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e984:	f001 faee 	bl	800ff64 <pvTaskIncrementMutexHeldCount>
 800e988:	4602      	mov	r2, r0
 800e98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e990:	691b      	ldr	r3, [r3, #16]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00f      	beq.n	800e9b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e998:	3310      	adds	r3, #16
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 ff9a 	bl	800f8d4 <xTaskRemoveFromEventList>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d007      	beq.n	800e9b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9a6:	4b54      	ldr	r3, [pc, #336]	; (800eaf8 <xQueueSemaphoreTake+0x214>)
 800e9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	f3bf 8f4f 	dsb	sy
 800e9b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e9b6:	f001 ffe5 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e097      	b.n	800eaee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d111      	bne.n	800e9e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ce:	f383 8811 	msr	BASEPRI, r3
 800e9d2:	f3bf 8f6f 	isb	sy
 800e9d6:	f3bf 8f4f 	dsb	sy
 800e9da:	617b      	str	r3, [r7, #20]
}
 800e9dc:	bf00      	nop
 800e9de:	e7fe      	b.n	800e9de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e9e0:	f001 ffd0 	bl	8010984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e082      	b.n	800eaee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d106      	bne.n	800e9fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9ee:	f107 030c 	add.w	r3, r7, #12
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 ffd2 	bl	800f99c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9fc:	f001 ffc2 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea00:	f000 fd2c 	bl	800f45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea04:	f001 ff8e 	bl	8010924 <vPortEnterCritical>
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea0e:	b25b      	sxtb	r3, r3
 800ea10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea14:	d103      	bne.n	800ea1e <xQueueSemaphoreTake+0x13a>
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea24:	b25b      	sxtb	r3, r3
 800ea26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea2a:	d103      	bne.n	800ea34 <xQueueSemaphoreTake+0x150>
 800ea2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea34:	f001 ffa6 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea38:	463a      	mov	r2, r7
 800ea3a:	f107 030c 	add.w	r3, r7, #12
 800ea3e:	4611      	mov	r1, r2
 800ea40:	4618      	mov	r0, r3
 800ea42:	f000 ffc1 	bl	800f9c8 <xTaskCheckForTimeOut>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d132      	bne.n	800eab2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea4e:	f000 f9f2 	bl	800ee36 <prvIsQueueEmpty>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d026      	beq.n	800eaa6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d109      	bne.n	800ea74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ea60:	f001 ff60 	bl	8010924 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f001 f923 	bl	800fcb4 <xTaskPriorityInherit>
 800ea6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ea70:	f001 ff88 	bl	8010984 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	3324      	adds	r3, #36	; 0x24
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f000 fed9 	bl	800f834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea84:	f000 f985 	bl	800ed92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea88:	f000 fcf6 	bl	800f478 <xTaskResumeAll>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f47f af68 	bne.w	800e964 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ea94:	4b18      	ldr	r3, [pc, #96]	; (800eaf8 <xQueueSemaphoreTake+0x214>)
 800ea96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	f3bf 8f6f 	isb	sy
 800eaa4:	e75e      	b.n	800e964 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eaa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eaa8:	f000 f973 	bl	800ed92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eaac:	f000 fce4 	bl	800f478 <xTaskResumeAll>
 800eab0:	e758      	b.n	800e964 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eab4:	f000 f96d 	bl	800ed92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eab8:	f000 fcde 	bl	800f478 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eabc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eabe:	f000 f9ba 	bl	800ee36 <prvIsQueueEmpty>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f43f af4d 	beq.w	800e964 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00d      	beq.n	800eaec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ead0:	f001 ff28 	bl	8010924 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ead4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ead6:	f000 f8b4 	bl	800ec42 <prvGetDisinheritPriorityAfterTimeout>
 800eada:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eae2:	4618      	mov	r0, r3
 800eae4:	f001 f9bc 	bl	800fe60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eae8:	f001 ff4c 	bl	8010984 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eaec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3738      	adds	r7, #56	; 0x38
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	e000ed04 	.word	0xe000ed04

0800eafc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b08e      	sub	sp, #56	; 0x38
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10a      	bne.n	800eb28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800eb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	623b      	str	r3, [r7, #32]
}
 800eb24:	bf00      	nop
 800eb26:	e7fe      	b.n	800eb26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d103      	bne.n	800eb36 <xQueueReceiveFromISR+0x3a>
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <xQueueReceiveFromISR+0x3e>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e000      	b.n	800eb3c <xQueueReceiveFromISR+0x40>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10a      	bne.n	800eb56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb44:	f383 8811 	msr	BASEPRI, r3
 800eb48:	f3bf 8f6f 	isb	sy
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	61fb      	str	r3, [r7, #28]
}
 800eb52:	bf00      	nop
 800eb54:	e7fe      	b.n	800eb54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb56:	f001 ffc7 	bl	8010ae8 <vPortValidateInterruptPriority>
	__asm volatile
 800eb5a:	f3ef 8211 	mrs	r2, BASEPRI
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	61ba      	str	r2, [r7, #24]
 800eb70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eb72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d02f      	beq.n	800ebe2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb8c:	68b9      	ldr	r1, [r7, #8]
 800eb8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb90:	f000 f8d9 	bl	800ed46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb96:	1e5a      	subs	r2, r3, #1
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eb9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eba4:	d112      	bne.n	800ebcc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d016      	beq.n	800ebdc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	3310      	adds	r3, #16
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 fe8e 	bl	800f8d4 <xTaskRemoveFromEventList>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00e      	beq.n	800ebdc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00b      	beq.n	800ebdc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	e007      	b.n	800ebdc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ebcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	b25a      	sxtb	r2, r3
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	637b      	str	r3, [r7, #52]	; 0x34
 800ebe0:	e001      	b.n	800ebe6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	637b      	str	r3, [r7, #52]	; 0x34
 800ebe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	f383 8811 	msr	BASEPRI, r3
}
 800ebf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3738      	adds	r7, #56	; 0x38
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10a      	bne.n	800ec24 <vQueueDelete+0x28>
	__asm volatile
 800ec0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	60bb      	str	r3, [r7, #8]
}
 800ec20:	bf00      	nop
 800ec22:	e7fe      	b.n	800ec22 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 f95f 	bl	800eee8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d102      	bne.n	800ec3a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f002 f863 	bl	8010d00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ec3a:	bf00      	nop
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ec42:	b480      	push	{r7}
 800ec44:	b085      	sub	sp, #20
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d006      	beq.n	800ec60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ec5c:	60fb      	str	r3, [r7, #12]
 800ec5e:	e001      	b.n	800ec64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ec60:	2300      	movs	r3, #0
 800ec62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ec64:	68fb      	ldr	r3, [r7, #12]
	}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b086      	sub	sp, #24
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	60f8      	str	r0, [r7, #12]
 800ec7a:	60b9      	str	r1, [r7, #8]
 800ec7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10d      	bne.n	800ecac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d14d      	bne.n	800ed34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f001 f871 	bl	800fd84 <xTaskPriorityDisinherit>
 800eca2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	609a      	str	r2, [r3, #8]
 800ecaa:	e043      	b.n	800ed34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d119      	bne.n	800ece6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6858      	ldr	r0, [r3, #4]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecba:	461a      	mov	r2, r3
 800ecbc:	68b9      	ldr	r1, [r7, #8]
 800ecbe:	f003 fcbc 	bl	801263a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	685a      	ldr	r2, [r3, #4]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecca:	441a      	add	r2, r3
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d32b      	bcc.n	800ed34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	605a      	str	r2, [r3, #4]
 800ece4:	e026      	b.n	800ed34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	68d8      	ldr	r0, [r3, #12]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecee:	461a      	mov	r2, r3
 800ecf0:	68b9      	ldr	r1, [r7, #8]
 800ecf2:	f003 fca2 	bl	801263a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	68da      	ldr	r2, [r3, #12]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecfe:	425b      	negs	r3, r3
 800ed00:	441a      	add	r2, r3
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	68da      	ldr	r2, [r3, #12]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d207      	bcs.n	800ed22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	689a      	ldr	r2, [r3, #8]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed1a:	425b      	negs	r3, r3
 800ed1c:	441a      	add	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d105      	bne.n	800ed34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	3b01      	subs	r3, #1
 800ed32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	1c5a      	adds	r2, r3, #1
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ed3c:	697b      	ldr	r3, [r7, #20]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b082      	sub	sp, #8
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d018      	beq.n	800ed8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	68da      	ldr	r2, [r3, #12]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed60:	441a      	add	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68da      	ldr	r2, [r3, #12]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d303      	bcc.n	800ed7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68d9      	ldr	r1, [r3, #12]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed82:	461a      	mov	r2, r3
 800ed84:	6838      	ldr	r0, [r7, #0]
 800ed86:	f003 fc58 	bl	801263a <memcpy>
	}
}
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b084      	sub	sp, #16
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed9a:	f001 fdc3 	bl	8010924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eda4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eda6:	e011      	b.n	800edcc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edac:	2b00      	cmp	r3, #0
 800edae:	d012      	beq.n	800edd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3324      	adds	r3, #36	; 0x24
 800edb4:	4618      	mov	r0, r3
 800edb6:	f000 fd8d 	bl	800f8d4 <xTaskRemoveFromEventList>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800edc0:	f000 fe64 	bl	800fa8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800edc4:	7bfb      	ldrb	r3, [r7, #15]
 800edc6:	3b01      	subs	r3, #1
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800edcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	dce9      	bgt.n	800eda8 <prvUnlockQueue+0x16>
 800edd4:	e000      	b.n	800edd8 <prvUnlockQueue+0x46>
					break;
 800edd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	22ff      	movs	r2, #255	; 0xff
 800eddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ede0:	f001 fdd0 	bl	8010984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ede4:	f001 fd9e 	bl	8010924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edf0:	e011      	b.n	800ee16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d012      	beq.n	800ee20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	3310      	adds	r3, #16
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 fd68 	bl	800f8d4 <xTaskRemoveFromEventList>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d001      	beq.n	800ee0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee0a:	f000 fe3f 	bl	800fa8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee0e:	7bbb      	ldrb	r3, [r7, #14]
 800ee10:	3b01      	subs	r3, #1
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	dce9      	bgt.n	800edf2 <prvUnlockQueue+0x60>
 800ee1e:	e000      	b.n	800ee22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	22ff      	movs	r2, #255	; 0xff
 800ee26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ee2a:	f001 fdab 	bl	8010984 <vPortExitCritical>
}
 800ee2e:	bf00      	nop
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b084      	sub	sp, #16
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee3e:	f001 fd71 	bl	8010924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d102      	bne.n	800ee50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	60fb      	str	r3, [r7, #12]
 800ee4e:	e001      	b.n	800ee54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee50:	2300      	movs	r3, #0
 800ee52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee54:	f001 fd96 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800ee58:	68fb      	ldr	r3, [r7, #12]
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b084      	sub	sp, #16
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee6a:	f001 fd5b 	bl	8010924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d102      	bne.n	800ee80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	60fb      	str	r3, [r7, #12]
 800ee7e:	e001      	b.n	800ee84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee80:	2300      	movs	r3, #0
 800ee82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee84:	f001 fd7e 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800ee88:	68fb      	ldr	r3, [r7, #12]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
	...

0800ee94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee9e:	2300      	movs	r3, #0
 800eea0:	60fb      	str	r3, [r7, #12]
 800eea2:	e014      	b.n	800eece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eea4:	4a0f      	ldr	r2, [pc, #60]	; (800eee4 <vQueueAddToRegistry+0x50>)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10b      	bne.n	800eec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eeb0:	490c      	ldr	r1, [pc, #48]	; (800eee4 <vQueueAddToRegistry+0x50>)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	683a      	ldr	r2, [r7, #0]
 800eeb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eeba:	4a0a      	ldr	r2, [pc, #40]	; (800eee4 <vQueueAddToRegistry+0x50>)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	00db      	lsls	r3, r3, #3
 800eec0:	4413      	add	r3, r2
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eec6:	e006      	b.n	800eed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3301      	adds	r3, #1
 800eecc:	60fb      	str	r3, [r7, #12]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2b07      	cmp	r3, #7
 800eed2:	d9e7      	bls.n	800eea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eed4:	bf00      	nop
 800eed6:	bf00      	nop
 800eed8:	3714      	adds	r7, #20
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	20003a54 	.word	0x20003a54

0800eee8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eef0:	2300      	movs	r3, #0
 800eef2:	60fb      	str	r3, [r7, #12]
 800eef4:	e016      	b.n	800ef24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800eef6:	4a10      	ldr	r2, [pc, #64]	; (800ef38 <vQueueUnregisterQueue+0x50>)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	00db      	lsls	r3, r3, #3
 800eefc:	4413      	add	r3, r2
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d10b      	bne.n	800ef1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ef06:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <vQueueUnregisterQueue+0x50>)
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ef10:	4a09      	ldr	r2, [pc, #36]	; (800ef38 <vQueueUnregisterQueue+0x50>)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	00db      	lsls	r3, r3, #3
 800ef16:	4413      	add	r3, r2
 800ef18:	2200      	movs	r2, #0
 800ef1a:	605a      	str	r2, [r3, #4]
				break;
 800ef1c:	e006      	b.n	800ef2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	3301      	adds	r3, #1
 800ef22:	60fb      	str	r3, [r7, #12]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b07      	cmp	r3, #7
 800ef28:	d9e5      	bls.n	800eef6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ef2a:	bf00      	nop
 800ef2c:	bf00      	nop
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr
 800ef38:	20003a54 	.word	0x20003a54

0800ef3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef4c:	f001 fcea 	bl	8010924 <vPortEnterCritical>
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef56:	b25b      	sxtb	r3, r3
 800ef58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef5c:	d103      	bne.n	800ef66 <vQueueWaitForMessageRestricted+0x2a>
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef6c:	b25b      	sxtb	r3, r3
 800ef6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef72:	d103      	bne.n	800ef7c <vQueueWaitForMessageRestricted+0x40>
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef7c:	f001 fd02 	bl	8010984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d106      	bne.n	800ef96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	3324      	adds	r3, #36	; 0x24
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	68b9      	ldr	r1, [r7, #8]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f000 fc73 	bl	800f87c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ef96:	6978      	ldr	r0, [r7, #20]
 800ef98:	f7ff fefb 	bl	800ed92 <prvUnlockQueue>
	}
 800ef9c:	bf00      	nop
 800ef9e:	3718      	adds	r7, #24
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b08e      	sub	sp, #56	; 0x38
 800efa8:	af04      	add	r7, sp, #16
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
 800efb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800efb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10a      	bne.n	800efce <xTaskCreateStatic+0x2a>
	__asm volatile
 800efb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	623b      	str	r3, [r7, #32]
}
 800efca:	bf00      	nop
 800efcc:	e7fe      	b.n	800efcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800efce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10a      	bne.n	800efea <xTaskCreateStatic+0x46>
	__asm volatile
 800efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd8:	f383 8811 	msr	BASEPRI, r3
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	61fb      	str	r3, [r7, #28]
}
 800efe6:	bf00      	nop
 800efe8:	e7fe      	b.n	800efe8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800efea:	23ac      	movs	r3, #172	; 0xac
 800efec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	2bac      	cmp	r3, #172	; 0xac
 800eff2:	d00a      	beq.n	800f00a <xTaskCreateStatic+0x66>
	__asm volatile
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	61bb      	str	r3, [r7, #24]
}
 800f006:	bf00      	nop
 800f008:	e7fe      	b.n	800f008 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f00a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d01e      	beq.n	800f050 <xTaskCreateStatic+0xac>
 800f012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f014:	2b00      	cmp	r3, #0
 800f016:	d01b      	beq.n	800f050 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f020:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f024:	2202      	movs	r2, #2
 800f026:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f02a:	2300      	movs	r3, #0
 800f02c:	9303      	str	r3, [sp, #12]
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	9302      	str	r3, [sp, #8]
 800f032:	f107 0314 	add.w	r3, r7, #20
 800f036:	9301      	str	r3, [sp, #4]
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	68b9      	ldr	r1, [r7, #8]
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	f000 f850 	bl	800f0e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f04a:	f000 f8f3 	bl	800f234 <prvAddNewTaskToReadyList>
 800f04e:	e001      	b.n	800f054 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f050:	2300      	movs	r3, #0
 800f052:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f054:	697b      	ldr	r3, [r7, #20]
	}
 800f056:	4618      	mov	r0, r3
 800f058:	3728      	adds	r7, #40	; 0x28
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b08c      	sub	sp, #48	; 0x30
 800f062:	af04      	add	r7, sp, #16
 800f064:	60f8      	str	r0, [r7, #12]
 800f066:	60b9      	str	r1, [r7, #8]
 800f068:	603b      	str	r3, [r7, #0]
 800f06a:	4613      	mov	r3, r2
 800f06c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f06e:	88fb      	ldrh	r3, [r7, #6]
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4618      	mov	r0, r3
 800f074:	f001 fd78 	bl	8010b68 <pvPortMalloc>
 800f078:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00e      	beq.n	800f09e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f080:	20ac      	movs	r0, #172	; 0xac
 800f082:	f001 fd71 	bl	8010b68 <pvPortMalloc>
 800f086:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d003      	beq.n	800f096 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	697a      	ldr	r2, [r7, #20]
 800f092:	631a      	str	r2, [r3, #48]	; 0x30
 800f094:	e005      	b.n	800f0a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f096:	6978      	ldr	r0, [r7, #20]
 800f098:	f001 fe32 	bl	8010d00 <vPortFree>
 800f09c:	e001      	b.n	800f0a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d017      	beq.n	800f0d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f0b0:	88fa      	ldrh	r2, [r7, #6]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	9303      	str	r3, [sp, #12]
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	9302      	str	r3, [sp, #8]
 800f0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0bc:	9301      	str	r3, [sp, #4]
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	9300      	str	r3, [sp, #0]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	68b9      	ldr	r1, [r7, #8]
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f000 f80e 	bl	800f0e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0cc:	69f8      	ldr	r0, [r7, #28]
 800f0ce:	f000 f8b1 	bl	800f234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	61bb      	str	r3, [r7, #24]
 800f0d6:	e002      	b.n	800f0de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f0de:	69bb      	ldr	r3, [r7, #24]
	}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3720      	adds	r7, #32
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b088      	sub	sp, #32
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	461a      	mov	r2, r3
 800f100:	21a5      	movs	r1, #165	; 0xa5
 800f102:	f003 f9c4 	bl	801248e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f110:	3b01      	subs	r3, #1
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4413      	add	r3, r2
 800f116:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	f023 0307 	bic.w	r3, r3, #7
 800f11e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	f003 0307 	and.w	r3, r3, #7
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00a      	beq.n	800f140 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	617b      	str	r3, [r7, #20]
}
 800f13c:	bf00      	nop
 800f13e:	e7fe      	b.n	800f13e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d01f      	beq.n	800f186 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f146:	2300      	movs	r3, #0
 800f148:	61fb      	str	r3, [r7, #28]
 800f14a:	e012      	b.n	800f172 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	4413      	add	r3, r2
 800f152:	7819      	ldrb	r1, [r3, #0]
 800f154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	4413      	add	r3, r2
 800f15a:	3334      	adds	r3, #52	; 0x34
 800f15c:	460a      	mov	r2, r1
 800f15e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f160:	68ba      	ldr	r2, [r7, #8]
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	4413      	add	r3, r2
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d006      	beq.n	800f17a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	3301      	adds	r3, #1
 800f170:	61fb      	str	r3, [r7, #28]
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	2b13      	cmp	r3, #19
 800f176:	d9e9      	bls.n	800f14c <prvInitialiseNewTask+0x64>
 800f178:	e000      	b.n	800f17c <prvInitialiseNewTask+0x94>
			{
				break;
 800f17a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800f184:	e003      	b.n	800f18e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f190:	2b37      	cmp	r3, #55	; 0x37
 800f192:	d901      	bls.n	800f198 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f194:	2337      	movs	r3, #55	; 0x37
 800f196:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f19c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f1a2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7fe fda0 	bl	800dcf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b6:	3318      	adds	r3, #24
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fe fd9b 	bl	800dcf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e6:	3358      	adds	r3, #88	; 0x58
 800f1e8:	224c      	movs	r2, #76	; 0x4c
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f003 f94e 	bl	801248e <memset>
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f4:	4a0c      	ldr	r2, [pc, #48]	; (800f228 <prvInitialiseNewTask+0x140>)
 800f1f6:	65da      	str	r2, [r3, #92]	; 0x5c
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fa:	4a0c      	ldr	r2, [pc, #48]	; (800f22c <prvInitialiseNewTask+0x144>)
 800f1fc:	661a      	str	r2, [r3, #96]	; 0x60
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	4a0b      	ldr	r2, [pc, #44]	; (800f230 <prvInitialiseNewTask+0x148>)
 800f202:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	68f9      	ldr	r1, [r7, #12]
 800f208:	69b8      	ldr	r0, [r7, #24]
 800f20a:	f001 fa61 	bl	80106d0 <pxPortInitialiseStack>
 800f20e:	4602      	mov	r2, r0
 800f210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f212:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	2b00      	cmp	r3, #0
 800f218:	d002      	beq.n	800f220 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f21e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f220:	bf00      	nop
 800f222:	3720      	adds	r7, #32
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	20005eb4 	.word	0x20005eb4
 800f22c:	20005f1c 	.word	0x20005f1c
 800f230:	20005f84 	.word	0x20005f84

0800f234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f23c:	f001 fb72 	bl	8010924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f240:	4b2d      	ldr	r3, [pc, #180]	; (800f2f8 <prvAddNewTaskToReadyList+0xc4>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	3301      	adds	r3, #1
 800f246:	4a2c      	ldr	r2, [pc, #176]	; (800f2f8 <prvAddNewTaskToReadyList+0xc4>)
 800f248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f24a:	4b2c      	ldr	r3, [pc, #176]	; (800f2fc <prvAddNewTaskToReadyList+0xc8>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d109      	bne.n	800f266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f252:	4a2a      	ldr	r2, [pc, #168]	; (800f2fc <prvAddNewTaskToReadyList+0xc8>)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f258:	4b27      	ldr	r3, [pc, #156]	; (800f2f8 <prvAddNewTaskToReadyList+0xc4>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d110      	bne.n	800f282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f260:	f000 fc38 	bl	800fad4 <prvInitialiseTaskLists>
 800f264:	e00d      	b.n	800f282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f266:	4b26      	ldr	r3, [pc, #152]	; (800f300 <prvAddNewTaskToReadyList+0xcc>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d109      	bne.n	800f282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f26e:	4b23      	ldr	r3, [pc, #140]	; (800f2fc <prvAddNewTaskToReadyList+0xc8>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f278:	429a      	cmp	r2, r3
 800f27a:	d802      	bhi.n	800f282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f27c:	4a1f      	ldr	r2, [pc, #124]	; (800f2fc <prvAddNewTaskToReadyList+0xc8>)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f282:	4b20      	ldr	r3, [pc, #128]	; (800f304 <prvAddNewTaskToReadyList+0xd0>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3301      	adds	r3, #1
 800f288:	4a1e      	ldr	r2, [pc, #120]	; (800f304 <prvAddNewTaskToReadyList+0xd0>)
 800f28a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f28c:	4b1d      	ldr	r3, [pc, #116]	; (800f304 <prvAddNewTaskToReadyList+0xd0>)
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f298:	4b1b      	ldr	r3, [pc, #108]	; (800f308 <prvAddNewTaskToReadyList+0xd4>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d903      	bls.n	800f2a8 <prvAddNewTaskToReadyList+0x74>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a4:	4a18      	ldr	r2, [pc, #96]	; (800f308 <prvAddNewTaskToReadyList+0xd4>)
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	4413      	add	r3, r2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	4a15      	ldr	r2, [pc, #84]	; (800f30c <prvAddNewTaskToReadyList+0xd8>)
 800f2b6:	441a      	add	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	4619      	mov	r1, r3
 800f2be:	4610      	mov	r0, r2
 800f2c0:	f7fe fd25 	bl	800dd0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f2c4:	f001 fb5e 	bl	8010984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f2c8:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <prvAddNewTaskToReadyList+0xcc>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00e      	beq.n	800f2ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f2d0:	4b0a      	ldr	r3, [pc, #40]	; (800f2fc <prvAddNewTaskToReadyList+0xc8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d207      	bcs.n	800f2ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f2de:	4b0c      	ldr	r3, [pc, #48]	; (800f310 <prvAddNewTaskToReadyList+0xdc>)
 800f2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2e4:	601a      	str	r2, [r3, #0]
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2ee:	bf00      	nop
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20003f68 	.word	0x20003f68
 800f2fc:	20003a94 	.word	0x20003a94
 800f300:	20003f74 	.word	0x20003f74
 800f304:	20003f84 	.word	0x20003f84
 800f308:	20003f70 	.word	0x20003f70
 800f30c:	20003a98 	.word	0x20003a98
 800f310:	e000ed04 	.word	0xe000ed04

0800f314 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f31c:	2300      	movs	r3, #0
 800f31e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d017      	beq.n	800f356 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f326:	4b13      	ldr	r3, [pc, #76]	; (800f374 <vTaskDelay+0x60>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00a      	beq.n	800f344 <vTaskDelay+0x30>
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f332:	f383 8811 	msr	BASEPRI, r3
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	f3bf 8f4f 	dsb	sy
 800f33e:	60bb      	str	r3, [r7, #8]
}
 800f340:	bf00      	nop
 800f342:	e7fe      	b.n	800f342 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f344:	f000 f88a 	bl	800f45c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f348:	2100      	movs	r1, #0
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fe1e 	bl	800ff8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f350:	f000 f892 	bl	800f478 <xTaskResumeAll>
 800f354:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d107      	bne.n	800f36c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f35c:	4b06      	ldr	r3, [pc, #24]	; (800f378 <vTaskDelay+0x64>)
 800f35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f362:	601a      	str	r2, [r3, #0]
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f36c:	bf00      	nop
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	20003f90 	.word	0x20003f90
 800f378:	e000ed04 	.word	0xe000ed04

0800f37c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b08a      	sub	sp, #40	; 0x28
 800f380:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f382:	2300      	movs	r3, #0
 800f384:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f386:	2300      	movs	r3, #0
 800f388:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f38a:	463a      	mov	r2, r7
 800f38c:	1d39      	adds	r1, r7, #4
 800f38e:	f107 0308 	add.w	r3, r7, #8
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe fc5a 	bl	800dc4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f398:	6839      	ldr	r1, [r7, #0]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	9202      	str	r2, [sp, #8]
 800f3a0:	9301      	str	r3, [sp, #4]
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	460a      	mov	r2, r1
 800f3aa:	4924      	ldr	r1, [pc, #144]	; (800f43c <vTaskStartScheduler+0xc0>)
 800f3ac:	4824      	ldr	r0, [pc, #144]	; (800f440 <vTaskStartScheduler+0xc4>)
 800f3ae:	f7ff fdf9 	bl	800efa4 <xTaskCreateStatic>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	4a23      	ldr	r2, [pc, #140]	; (800f444 <vTaskStartScheduler+0xc8>)
 800f3b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f3b8:	4b22      	ldr	r3, [pc, #136]	; (800f444 <vTaskStartScheduler+0xc8>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	e001      	b.n	800f3ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d102      	bne.n	800f3d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f3d0:	f000 fe30 	bl	8010034 <xTimerCreateTimerTask>
 800f3d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d11b      	bne.n	800f414 <vTaskStartScheduler+0x98>
	__asm volatile
 800f3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e0:	f383 8811 	msr	BASEPRI, r3
 800f3e4:	f3bf 8f6f 	isb	sy
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	613b      	str	r3, [r7, #16]
}
 800f3ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f3f0:	4b15      	ldr	r3, [pc, #84]	; (800f448 <vTaskStartScheduler+0xcc>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	3358      	adds	r3, #88	; 0x58
 800f3f6:	4a15      	ldr	r2, [pc, #84]	; (800f44c <vTaskStartScheduler+0xd0>)
 800f3f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f3fa:	4b15      	ldr	r3, [pc, #84]	; (800f450 <vTaskStartScheduler+0xd4>)
 800f3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f400:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f402:	4b14      	ldr	r3, [pc, #80]	; (800f454 <vTaskStartScheduler+0xd8>)
 800f404:	2201      	movs	r2, #1
 800f406:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f408:	4b13      	ldr	r3, [pc, #76]	; (800f458 <vTaskStartScheduler+0xdc>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f40e:	f001 f9e7 	bl	80107e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f412:	e00e      	b.n	800f432 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f41a:	d10a      	bne.n	800f432 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	60fb      	str	r3, [r7, #12]
}
 800f42e:	bf00      	nop
 800f430:	e7fe      	b.n	800f430 <vTaskStartScheduler+0xb4>
}
 800f432:	bf00      	nop
 800f434:	3718      	adds	r7, #24
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	08015480 	.word	0x08015480
 800f440:	0800faa5 	.word	0x0800faa5
 800f444:	20003f8c 	.word	0x20003f8c
 800f448:	20003a94 	.word	0x20003a94
 800f44c:	200001e0 	.word	0x200001e0
 800f450:	20003f88 	.word	0x20003f88
 800f454:	20003f74 	.word	0x20003f74
 800f458:	20003f6c 	.word	0x20003f6c

0800f45c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f45c:	b480      	push	{r7}
 800f45e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f460:	4b04      	ldr	r3, [pc, #16]	; (800f474 <vTaskSuspendAll+0x18>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	3301      	adds	r3, #1
 800f466:	4a03      	ldr	r2, [pc, #12]	; (800f474 <vTaskSuspendAll+0x18>)
 800f468:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f46a:	bf00      	nop
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr
 800f474:	20003f90 	.word	0x20003f90

0800f478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f47e:	2300      	movs	r3, #0
 800f480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f482:	2300      	movs	r3, #0
 800f484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f486:	4b42      	ldr	r3, [pc, #264]	; (800f590 <xTaskResumeAll+0x118>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d10a      	bne.n	800f4a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	603b      	str	r3, [r7, #0]
}
 800f4a0:	bf00      	nop
 800f4a2:	e7fe      	b.n	800f4a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4a4:	f001 fa3e 	bl	8010924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4a8:	4b39      	ldr	r3, [pc, #228]	; (800f590 <xTaskResumeAll+0x118>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	4a38      	ldr	r2, [pc, #224]	; (800f590 <xTaskResumeAll+0x118>)
 800f4b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4b2:	4b37      	ldr	r3, [pc, #220]	; (800f590 <xTaskResumeAll+0x118>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d162      	bne.n	800f580 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f4ba:	4b36      	ldr	r3, [pc, #216]	; (800f594 <xTaskResumeAll+0x11c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d05e      	beq.n	800f580 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4c2:	e02f      	b.n	800f524 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4c4:	4b34      	ldr	r3, [pc, #208]	; (800f598 <xTaskResumeAll+0x120>)
 800f4c6:	68db      	ldr	r3, [r3, #12]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3318      	adds	r3, #24
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fe fc79 	bl	800ddc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	3304      	adds	r3, #4
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fc74 	bl	800ddc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e4:	4b2d      	ldr	r3, [pc, #180]	; (800f59c <xTaskResumeAll+0x124>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d903      	bls.n	800f4f4 <xTaskResumeAll+0x7c>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f0:	4a2a      	ldr	r2, [pc, #168]	; (800f59c <xTaskResumeAll+0x124>)
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	4a27      	ldr	r2, [pc, #156]	; (800f5a0 <xTaskResumeAll+0x128>)
 800f502:	441a      	add	r2, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	3304      	adds	r3, #4
 800f508:	4619      	mov	r1, r3
 800f50a:	4610      	mov	r0, r2
 800f50c:	f7fe fbff 	bl	800dd0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f514:	4b23      	ldr	r3, [pc, #140]	; (800f5a4 <xTaskResumeAll+0x12c>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d302      	bcc.n	800f524 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f51e:	4b22      	ldr	r3, [pc, #136]	; (800f5a8 <xTaskResumeAll+0x130>)
 800f520:	2201      	movs	r2, #1
 800f522:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f524:	4b1c      	ldr	r3, [pc, #112]	; (800f598 <xTaskResumeAll+0x120>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d1cb      	bne.n	800f4c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f532:	f000 fb71 	bl	800fc18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f536:	4b1d      	ldr	r3, [pc, #116]	; (800f5ac <xTaskResumeAll+0x134>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d010      	beq.n	800f564 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f542:	f000 f859 	bl	800f5f8 <xTaskIncrementTick>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f54c:	4b16      	ldr	r3, [pc, #88]	; (800f5a8 <xTaskResumeAll+0x130>)
 800f54e:	2201      	movs	r2, #1
 800f550:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	3b01      	subs	r3, #1
 800f556:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1f1      	bne.n	800f542 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f55e:	4b13      	ldr	r3, [pc, #76]	; (800f5ac <xTaskResumeAll+0x134>)
 800f560:	2200      	movs	r2, #0
 800f562:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f564:	4b10      	ldr	r3, [pc, #64]	; (800f5a8 <xTaskResumeAll+0x130>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d009      	beq.n	800f580 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f56c:	2301      	movs	r3, #1
 800f56e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f570:	4b0f      	ldr	r3, [pc, #60]	; (800f5b0 <xTaskResumeAll+0x138>)
 800f572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f576:	601a      	str	r2, [r3, #0]
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f580:	f001 fa00 	bl	8010984 <vPortExitCritical>

	return xAlreadyYielded;
 800f584:	68bb      	ldr	r3, [r7, #8]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20003f90 	.word	0x20003f90
 800f594:	20003f68 	.word	0x20003f68
 800f598:	20003f28 	.word	0x20003f28
 800f59c:	20003f70 	.word	0x20003f70
 800f5a0:	20003a98 	.word	0x20003a98
 800f5a4:	20003a94 	.word	0x20003a94
 800f5a8:	20003f7c 	.word	0x20003f7c
 800f5ac:	20003f78 	.word	0x20003f78
 800f5b0:	e000ed04 	.word	0xe000ed04

0800f5b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <xTaskGetTickCount+0x1c>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f5c0:	687b      	ldr	r3, [r7, #4]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	370c      	adds	r7, #12
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop
 800f5d0:	20003f6c 	.word	0x20003f6c

0800f5d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5da:	f001 fa85 	bl	8010ae8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f5de:	2300      	movs	r3, #0
 800f5e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f5e2:	4b04      	ldr	r3, [pc, #16]	; (800f5f4 <xTaskGetTickCountFromISR+0x20>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f5e8:	683b      	ldr	r3, [r7, #0]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	20003f6c 	.word	0x20003f6c

0800f5f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b086      	sub	sp, #24
 800f5fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f5fe:	2300      	movs	r3, #0
 800f600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f602:	4b4f      	ldr	r3, [pc, #316]	; (800f740 <xTaskIncrementTick+0x148>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	f040 808f 	bne.w	800f72a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f60c:	4b4d      	ldr	r3, [pc, #308]	; (800f744 <xTaskIncrementTick+0x14c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3301      	adds	r3, #1
 800f612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f614:	4a4b      	ldr	r2, [pc, #300]	; (800f744 <xTaskIncrementTick+0x14c>)
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d120      	bne.n	800f662 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f620:	4b49      	ldr	r3, [pc, #292]	; (800f748 <xTaskIncrementTick+0x150>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00a      	beq.n	800f640 <xTaskIncrementTick+0x48>
	__asm volatile
 800f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62e:	f383 8811 	msr	BASEPRI, r3
 800f632:	f3bf 8f6f 	isb	sy
 800f636:	f3bf 8f4f 	dsb	sy
 800f63a:	603b      	str	r3, [r7, #0]
}
 800f63c:	bf00      	nop
 800f63e:	e7fe      	b.n	800f63e <xTaskIncrementTick+0x46>
 800f640:	4b41      	ldr	r3, [pc, #260]	; (800f748 <xTaskIncrementTick+0x150>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	4b41      	ldr	r3, [pc, #260]	; (800f74c <xTaskIncrementTick+0x154>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a3f      	ldr	r2, [pc, #252]	; (800f748 <xTaskIncrementTick+0x150>)
 800f64c:	6013      	str	r3, [r2, #0]
 800f64e:	4a3f      	ldr	r2, [pc, #252]	; (800f74c <xTaskIncrementTick+0x154>)
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6013      	str	r3, [r2, #0]
 800f654:	4b3e      	ldr	r3, [pc, #248]	; (800f750 <xTaskIncrementTick+0x158>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3301      	adds	r3, #1
 800f65a:	4a3d      	ldr	r2, [pc, #244]	; (800f750 <xTaskIncrementTick+0x158>)
 800f65c:	6013      	str	r3, [r2, #0]
 800f65e:	f000 fadb 	bl	800fc18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f662:	4b3c      	ldr	r3, [pc, #240]	; (800f754 <xTaskIncrementTick+0x15c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d349      	bcc.n	800f700 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f66c:	4b36      	ldr	r3, [pc, #216]	; (800f748 <xTaskIncrementTick+0x150>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d104      	bne.n	800f680 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f676:	4b37      	ldr	r3, [pc, #220]	; (800f754 <xTaskIncrementTick+0x15c>)
 800f678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f67c:	601a      	str	r2, [r3, #0]
					break;
 800f67e:	e03f      	b.n	800f700 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f680:	4b31      	ldr	r3, [pc, #196]	; (800f748 <xTaskIncrementTick+0x150>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	429a      	cmp	r2, r3
 800f696:	d203      	bcs.n	800f6a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f698:	4a2e      	ldr	r2, [pc, #184]	; (800f754 <xTaskIncrementTick+0x15c>)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f69e:	e02f      	b.n	800f700 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	3304      	adds	r3, #4
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fe fb8f 	bl	800ddc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d004      	beq.n	800f6bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	3318      	adds	r3, #24
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fe fb86 	bl	800ddc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6c0:	4b25      	ldr	r3, [pc, #148]	; (800f758 <xTaskIncrementTick+0x160>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d903      	bls.n	800f6d0 <xTaskIncrementTick+0xd8>
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6cc:	4a22      	ldr	r2, [pc, #136]	; (800f758 <xTaskIncrementTick+0x160>)
 800f6ce:	6013      	str	r3, [r2, #0]
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d4:	4613      	mov	r3, r2
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4413      	add	r3, r2
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	4a1f      	ldr	r2, [pc, #124]	; (800f75c <xTaskIncrementTick+0x164>)
 800f6de:	441a      	add	r2, r3
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	4610      	mov	r0, r2
 800f6e8:	f7fe fb11 	bl	800dd0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f0:	4b1b      	ldr	r3, [pc, #108]	; (800f760 <xTaskIncrementTick+0x168>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d3b8      	bcc.n	800f66c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6fe:	e7b5      	b.n	800f66c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f700:	4b17      	ldr	r3, [pc, #92]	; (800f760 <xTaskIncrementTick+0x168>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f706:	4915      	ldr	r1, [pc, #84]	; (800f75c <xTaskIncrementTick+0x164>)
 800f708:	4613      	mov	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	440b      	add	r3, r1
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d901      	bls.n	800f71c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f718:	2301      	movs	r3, #1
 800f71a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f71c:	4b11      	ldr	r3, [pc, #68]	; (800f764 <xTaskIncrementTick+0x16c>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d007      	beq.n	800f734 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f724:	2301      	movs	r3, #1
 800f726:	617b      	str	r3, [r7, #20]
 800f728:	e004      	b.n	800f734 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f72a:	4b0f      	ldr	r3, [pc, #60]	; (800f768 <xTaskIncrementTick+0x170>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	3301      	adds	r3, #1
 800f730:	4a0d      	ldr	r2, [pc, #52]	; (800f768 <xTaskIncrementTick+0x170>)
 800f732:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f734:	697b      	ldr	r3, [r7, #20]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3718      	adds	r7, #24
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20003f90 	.word	0x20003f90
 800f744:	20003f6c 	.word	0x20003f6c
 800f748:	20003f20 	.word	0x20003f20
 800f74c:	20003f24 	.word	0x20003f24
 800f750:	20003f80 	.word	0x20003f80
 800f754:	20003f88 	.word	0x20003f88
 800f758:	20003f70 	.word	0x20003f70
 800f75c:	20003a98 	.word	0x20003a98
 800f760:	20003a94 	.word	0x20003a94
 800f764:	20003f7c 	.word	0x20003f7c
 800f768:	20003f78 	.word	0x20003f78

0800f76c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f772:	4b2a      	ldr	r3, [pc, #168]	; (800f81c <vTaskSwitchContext+0xb0>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d003      	beq.n	800f782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f77a:	4b29      	ldr	r3, [pc, #164]	; (800f820 <vTaskSwitchContext+0xb4>)
 800f77c:	2201      	movs	r2, #1
 800f77e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f780:	e046      	b.n	800f810 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f782:	4b27      	ldr	r3, [pc, #156]	; (800f820 <vTaskSwitchContext+0xb4>)
 800f784:	2200      	movs	r2, #0
 800f786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f788:	4b26      	ldr	r3, [pc, #152]	; (800f824 <vTaskSwitchContext+0xb8>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	e010      	b.n	800f7b2 <vTaskSwitchContext+0x46>
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10a      	bne.n	800f7ac <vTaskSwitchContext+0x40>
	__asm volatile
 800f796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f79a:	f383 8811 	msr	BASEPRI, r3
 800f79e:	f3bf 8f6f 	isb	sy
 800f7a2:	f3bf 8f4f 	dsb	sy
 800f7a6:	607b      	str	r3, [r7, #4]
}
 800f7a8:	bf00      	nop
 800f7aa:	e7fe      	b.n	800f7aa <vTaskSwitchContext+0x3e>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	60fb      	str	r3, [r7, #12]
 800f7b2:	491d      	ldr	r1, [pc, #116]	; (800f828 <vTaskSwitchContext+0xbc>)
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	440b      	add	r3, r1
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d0e4      	beq.n	800f790 <vTaskSwitchContext+0x24>
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	4413      	add	r3, r2
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	4a15      	ldr	r2, [pc, #84]	; (800f828 <vTaskSwitchContext+0xbc>)
 800f7d2:	4413      	add	r3, r2
 800f7d4:	60bb      	str	r3, [r7, #8]
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	685a      	ldr	r2, [r3, #4]
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	605a      	str	r2, [r3, #4]
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	685a      	ldr	r2, [r3, #4]
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	3308      	adds	r3, #8
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d104      	bne.n	800f7f6 <vTaskSwitchContext+0x8a>
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	685a      	ldr	r2, [r3, #4]
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	605a      	str	r2, [r3, #4]
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	4a0b      	ldr	r2, [pc, #44]	; (800f82c <vTaskSwitchContext+0xc0>)
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	4a08      	ldr	r2, [pc, #32]	; (800f824 <vTaskSwitchContext+0xb8>)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f806:	4b09      	ldr	r3, [pc, #36]	; (800f82c <vTaskSwitchContext+0xc0>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	3358      	adds	r3, #88	; 0x58
 800f80c:	4a08      	ldr	r2, [pc, #32]	; (800f830 <vTaskSwitchContext+0xc4>)
 800f80e:	6013      	str	r3, [r2, #0]
}
 800f810:	bf00      	nop
 800f812:	3714      	adds	r7, #20
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr
 800f81c:	20003f90 	.word	0x20003f90
 800f820:	20003f7c 	.word	0x20003f7c
 800f824:	20003f70 	.word	0x20003f70
 800f828:	20003a98 	.word	0x20003a98
 800f82c:	20003a94 	.word	0x20003a94
 800f830:	200001e0 	.word	0x200001e0

0800f834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10a      	bne.n	800f85a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f848:	f383 8811 	msr	BASEPRI, r3
 800f84c:	f3bf 8f6f 	isb	sy
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	60fb      	str	r3, [r7, #12]
}
 800f856:	bf00      	nop
 800f858:	e7fe      	b.n	800f858 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f85a:	4b07      	ldr	r3, [pc, #28]	; (800f878 <vTaskPlaceOnEventList+0x44>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	3318      	adds	r3, #24
 800f860:	4619      	mov	r1, r3
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7fe fa77 	bl	800dd56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f868:	2101      	movs	r1, #1
 800f86a:	6838      	ldr	r0, [r7, #0]
 800f86c:	f000 fb8e 	bl	800ff8c <prvAddCurrentTaskToDelayedList>
}
 800f870:	bf00      	nop
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	20003a94 	.word	0x20003a94

0800f87c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d10a      	bne.n	800f8a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	617b      	str	r3, [r7, #20]
}
 800f8a0:	bf00      	nop
 800f8a2:	e7fe      	b.n	800f8a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f8a4:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	3318      	adds	r3, #24
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7fe fa2e 	bl	800dd0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f8b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	68b8      	ldr	r0, [r7, #8]
 800f8c2:	f000 fb63 	bl	800ff8c <prvAddCurrentTaskToDelayedList>
	}
 800f8c6:	bf00      	nop
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	20003a94 	.word	0x20003a94

0800f8d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d10a      	bne.n	800f900 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	60fb      	str	r3, [r7, #12]
}
 800f8fc:	bf00      	nop
 800f8fe:	e7fe      	b.n	800f8fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	3318      	adds	r3, #24
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe fa5f 	bl	800ddc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f90a:	4b1e      	ldr	r3, [pc, #120]	; (800f984 <xTaskRemoveFromEventList+0xb0>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d11d      	bne.n	800f94e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	3304      	adds	r3, #4
 800f916:	4618      	mov	r0, r3
 800f918:	f7fe fa56 	bl	800ddc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f920:	4b19      	ldr	r3, [pc, #100]	; (800f988 <xTaskRemoveFromEventList+0xb4>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d903      	bls.n	800f930 <xTaskRemoveFromEventList+0x5c>
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92c:	4a16      	ldr	r2, [pc, #88]	; (800f988 <xTaskRemoveFromEventList+0xb4>)
 800f92e:	6013      	str	r3, [r2, #0]
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f934:	4613      	mov	r3, r2
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	4413      	add	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4a13      	ldr	r2, [pc, #76]	; (800f98c <xTaskRemoveFromEventList+0xb8>)
 800f93e:	441a      	add	r2, r3
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	3304      	adds	r3, #4
 800f944:	4619      	mov	r1, r3
 800f946:	4610      	mov	r0, r2
 800f948:	f7fe f9e1 	bl	800dd0e <vListInsertEnd>
 800f94c:	e005      	b.n	800f95a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	3318      	adds	r3, #24
 800f952:	4619      	mov	r1, r3
 800f954:	480e      	ldr	r0, [pc, #56]	; (800f990 <xTaskRemoveFromEventList+0xbc>)
 800f956:	f7fe f9da 	bl	800dd0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95e:	4b0d      	ldr	r3, [pc, #52]	; (800f994 <xTaskRemoveFromEventList+0xc0>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f964:	429a      	cmp	r2, r3
 800f966:	d905      	bls.n	800f974 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f968:	2301      	movs	r3, #1
 800f96a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f96c:	4b0a      	ldr	r3, [pc, #40]	; (800f998 <xTaskRemoveFromEventList+0xc4>)
 800f96e:	2201      	movs	r2, #1
 800f970:	601a      	str	r2, [r3, #0]
 800f972:	e001      	b.n	800f978 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f974:	2300      	movs	r3, #0
 800f976:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f978:	697b      	ldr	r3, [r7, #20]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3718      	adds	r7, #24
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	20003f90 	.word	0x20003f90
 800f988:	20003f70 	.word	0x20003f70
 800f98c:	20003a98 	.word	0x20003a98
 800f990:	20003f28 	.word	0x20003f28
 800f994:	20003a94 	.word	0x20003a94
 800f998:	20003f7c 	.word	0x20003f7c

0800f99c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f9a4:	4b06      	ldr	r3, [pc, #24]	; (800f9c0 <vTaskInternalSetTimeOutState+0x24>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9ac:	4b05      	ldr	r3, [pc, #20]	; (800f9c4 <vTaskInternalSetTimeOutState+0x28>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	605a      	str	r2, [r3, #4]
}
 800f9b4:	bf00      	nop
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr
 800f9c0:	20003f80 	.word	0x20003f80
 800f9c4:	20003f6c 	.word	0x20003f6c

0800f9c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b088      	sub	sp, #32
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d10a      	bne.n	800f9ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9dc:	f383 8811 	msr	BASEPRI, r3
 800f9e0:	f3bf 8f6f 	isb	sy
 800f9e4:	f3bf 8f4f 	dsb	sy
 800f9e8:	613b      	str	r3, [r7, #16]
}
 800f9ea:	bf00      	nop
 800f9ec:	e7fe      	b.n	800f9ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10a      	bne.n	800fa0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	60fb      	str	r3, [r7, #12]
}
 800fa06:	bf00      	nop
 800fa08:	e7fe      	b.n	800fa08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fa0a:	f000 ff8b 	bl	8010924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa0e:	4b1d      	ldr	r3, [pc, #116]	; (800fa84 <xTaskCheckForTimeOut+0xbc>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	69ba      	ldr	r2, [r7, #24]
 800fa1a:	1ad3      	subs	r3, r2, r3
 800fa1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa26:	d102      	bne.n	800fa2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	61fb      	str	r3, [r7, #28]
 800fa2c:	e023      	b.n	800fa76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	4b15      	ldr	r3, [pc, #84]	; (800fa88 <xTaskCheckForTimeOut+0xc0>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d007      	beq.n	800fa4a <xTaskCheckForTimeOut+0x82>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	69ba      	ldr	r2, [r7, #24]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d302      	bcc.n	800fa4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa44:	2301      	movs	r3, #1
 800fa46:	61fb      	str	r3, [r7, #28]
 800fa48:	e015      	b.n	800fa76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	697a      	ldr	r2, [r7, #20]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d20b      	bcs.n	800fa6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	1ad2      	subs	r2, r2, r3
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff ff9b 	bl	800f99c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	61fb      	str	r3, [r7, #28]
 800fa6a:	e004      	b.n	800fa76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa72:	2301      	movs	r3, #1
 800fa74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa76:	f000 ff85 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3720      	adds	r7, #32
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	20003f6c 	.word	0x20003f6c
 800fa88:	20003f80 	.word	0x20003f80

0800fa8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa90:	4b03      	ldr	r3, [pc, #12]	; (800faa0 <vTaskMissedYield+0x14>)
 800fa92:	2201      	movs	r2, #1
 800fa94:	601a      	str	r2, [r3, #0]
}
 800fa96:	bf00      	nop
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr
 800faa0:	20003f7c 	.word	0x20003f7c

0800faa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800faac:	f000 f852 	bl	800fb54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fab0:	4b06      	ldr	r3, [pc, #24]	; (800facc <prvIdleTask+0x28>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d9f9      	bls.n	800faac <prvIdleTask+0x8>
			{
				taskYIELD();
 800fab8:	4b05      	ldr	r3, [pc, #20]	; (800fad0 <prvIdleTask+0x2c>)
 800faba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fabe:	601a      	str	r2, [r3, #0]
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fac8:	e7f0      	b.n	800faac <prvIdleTask+0x8>
 800faca:	bf00      	nop
 800facc:	20003a98 	.word	0x20003a98
 800fad0:	e000ed04 	.word	0xe000ed04

0800fad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fada:	2300      	movs	r3, #0
 800fadc:	607b      	str	r3, [r7, #4]
 800fade:	e00c      	b.n	800fafa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	4613      	mov	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	4413      	add	r3, r2
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	4a12      	ldr	r2, [pc, #72]	; (800fb34 <prvInitialiseTaskLists+0x60>)
 800faec:	4413      	add	r3, r2
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fe f8e0 	bl	800dcb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	3301      	adds	r3, #1
 800faf8:	607b      	str	r3, [r7, #4]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b37      	cmp	r3, #55	; 0x37
 800fafe:	d9ef      	bls.n	800fae0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fb00:	480d      	ldr	r0, [pc, #52]	; (800fb38 <prvInitialiseTaskLists+0x64>)
 800fb02:	f7fe f8d7 	bl	800dcb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb06:	480d      	ldr	r0, [pc, #52]	; (800fb3c <prvInitialiseTaskLists+0x68>)
 800fb08:	f7fe f8d4 	bl	800dcb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb0c:	480c      	ldr	r0, [pc, #48]	; (800fb40 <prvInitialiseTaskLists+0x6c>)
 800fb0e:	f7fe f8d1 	bl	800dcb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb12:	480c      	ldr	r0, [pc, #48]	; (800fb44 <prvInitialiseTaskLists+0x70>)
 800fb14:	f7fe f8ce 	bl	800dcb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb18:	480b      	ldr	r0, [pc, #44]	; (800fb48 <prvInitialiseTaskLists+0x74>)
 800fb1a:	f7fe f8cb 	bl	800dcb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb1e:	4b0b      	ldr	r3, [pc, #44]	; (800fb4c <prvInitialiseTaskLists+0x78>)
 800fb20:	4a05      	ldr	r2, [pc, #20]	; (800fb38 <prvInitialiseTaskLists+0x64>)
 800fb22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb24:	4b0a      	ldr	r3, [pc, #40]	; (800fb50 <prvInitialiseTaskLists+0x7c>)
 800fb26:	4a05      	ldr	r2, [pc, #20]	; (800fb3c <prvInitialiseTaskLists+0x68>)
 800fb28:	601a      	str	r2, [r3, #0]
}
 800fb2a:	bf00      	nop
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	20003a98 	.word	0x20003a98
 800fb38:	20003ef8 	.word	0x20003ef8
 800fb3c:	20003f0c 	.word	0x20003f0c
 800fb40:	20003f28 	.word	0x20003f28
 800fb44:	20003f3c 	.word	0x20003f3c
 800fb48:	20003f54 	.word	0x20003f54
 800fb4c:	20003f20 	.word	0x20003f20
 800fb50:	20003f24 	.word	0x20003f24

0800fb54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb5a:	e019      	b.n	800fb90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb5c:	f000 fee2 	bl	8010924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb60:	4b10      	ldr	r3, [pc, #64]	; (800fba4 <prvCheckTasksWaitingTermination+0x50>)
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fe f92b 	bl	800ddc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb72:	4b0d      	ldr	r3, [pc, #52]	; (800fba8 <prvCheckTasksWaitingTermination+0x54>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3b01      	subs	r3, #1
 800fb78:	4a0b      	ldr	r2, [pc, #44]	; (800fba8 <prvCheckTasksWaitingTermination+0x54>)
 800fb7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb7c:	4b0b      	ldr	r3, [pc, #44]	; (800fbac <prvCheckTasksWaitingTermination+0x58>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	3b01      	subs	r3, #1
 800fb82:	4a0a      	ldr	r2, [pc, #40]	; (800fbac <prvCheckTasksWaitingTermination+0x58>)
 800fb84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb86:	f000 fefd 	bl	8010984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f810 	bl	800fbb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb90:	4b06      	ldr	r3, [pc, #24]	; (800fbac <prvCheckTasksWaitingTermination+0x58>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1e1      	bne.n	800fb5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb98:	bf00      	nop
 800fb9a:	bf00      	nop
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	20003f3c 	.word	0x20003f3c
 800fba8:	20003f68 	.word	0x20003f68
 800fbac:	20003f50 	.word	0x20003f50

0800fbb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	3358      	adds	r3, #88	; 0x58
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f002 fc83 	bl	80124c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d108      	bne.n	800fbde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f001 f895 	bl	8010d00 <vPortFree>
				vPortFree( pxTCB );
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f001 f892 	bl	8010d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fbdc:	e018      	b.n	800fc10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d103      	bne.n	800fbf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f001 f889 	bl	8010d00 <vPortFree>
	}
 800fbee:	e00f      	b.n	800fc10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	d00a      	beq.n	800fc10 <prvDeleteTCB+0x60>
	__asm volatile
 800fbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfe:	f383 8811 	msr	BASEPRI, r3
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	f3bf 8f4f 	dsb	sy
 800fc0a:	60fb      	str	r3, [r7, #12]
}
 800fc0c:	bf00      	nop
 800fc0e:	e7fe      	b.n	800fc0e <prvDeleteTCB+0x5e>
	}
 800fc10:	bf00      	nop
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc1e:	4b0c      	ldr	r3, [pc, #48]	; (800fc50 <prvResetNextTaskUnblockTime+0x38>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d104      	bne.n	800fc32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fc28:	4b0a      	ldr	r3, [pc, #40]	; (800fc54 <prvResetNextTaskUnblockTime+0x3c>)
 800fc2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fc30:	e008      	b.n	800fc44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc32:	4b07      	ldr	r3, [pc, #28]	; (800fc50 <prvResetNextTaskUnblockTime+0x38>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	4a04      	ldr	r2, [pc, #16]	; (800fc54 <prvResetNextTaskUnblockTime+0x3c>)
 800fc42:	6013      	str	r3, [r2, #0]
}
 800fc44:	bf00      	nop
 800fc46:	370c      	adds	r7, #12
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr
 800fc50:	20003f20 	.word	0x20003f20
 800fc54:	20003f88 	.word	0x20003f88

0800fc58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fc5e:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <xTaskGetCurrentTaskHandle+0x1c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fc64:	687b      	ldr	r3, [r7, #4]
	}
 800fc66:	4618      	mov	r0, r3
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	20003a94 	.word	0x20003a94

0800fc78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc7e:	4b0b      	ldr	r3, [pc, #44]	; (800fcac <xTaskGetSchedulerState+0x34>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d102      	bne.n	800fc8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc86:	2301      	movs	r3, #1
 800fc88:	607b      	str	r3, [r7, #4]
 800fc8a:	e008      	b.n	800fc9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc8c:	4b08      	ldr	r3, [pc, #32]	; (800fcb0 <xTaskGetSchedulerState+0x38>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d102      	bne.n	800fc9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc94:	2302      	movs	r3, #2
 800fc96:	607b      	str	r3, [r7, #4]
 800fc98:	e001      	b.n	800fc9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc9e:	687b      	ldr	r3, [r7, #4]
	}
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	20003f74 	.word	0x20003f74
 800fcb0:	20003f90 	.word	0x20003f90

0800fcb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d051      	beq.n	800fd6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcce:	4b2a      	ldr	r3, [pc, #168]	; (800fd78 <xTaskPriorityInherit+0xc4>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d241      	bcs.n	800fd5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	699b      	ldr	r3, [r3, #24]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	db06      	blt.n	800fcee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fce0:	4b25      	ldr	r3, [pc, #148]	; (800fd78 <xTaskPriorityInherit+0xc4>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	6959      	ldr	r1, [r3, #20]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	4413      	add	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4a1f      	ldr	r2, [pc, #124]	; (800fd7c <xTaskPriorityInherit+0xc8>)
 800fd00:	4413      	add	r3, r2
 800fd02:	4299      	cmp	r1, r3
 800fd04:	d122      	bne.n	800fd4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	3304      	adds	r3, #4
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fe f85c 	bl	800ddc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd10:	4b19      	ldr	r3, [pc, #100]	; (800fd78 <xTaskPriorityInherit+0xc4>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd1e:	4b18      	ldr	r3, [pc, #96]	; (800fd80 <xTaskPriorityInherit+0xcc>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d903      	bls.n	800fd2e <xTaskPriorityInherit+0x7a>
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd2a:	4a15      	ldr	r2, [pc, #84]	; (800fd80 <xTaskPriorityInherit+0xcc>)
 800fd2c:	6013      	str	r3, [r2, #0]
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd32:	4613      	mov	r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	4413      	add	r3, r2
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	4a10      	ldr	r2, [pc, #64]	; (800fd7c <xTaskPriorityInherit+0xc8>)
 800fd3c:	441a      	add	r2, r3
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	3304      	adds	r3, #4
 800fd42:	4619      	mov	r1, r3
 800fd44:	4610      	mov	r0, r2
 800fd46:	f7fd ffe2 	bl	800dd0e <vListInsertEnd>
 800fd4a:	e004      	b.n	800fd56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd4c:	4b0a      	ldr	r3, [pc, #40]	; (800fd78 <xTaskPriorityInherit+0xc4>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd56:	2301      	movs	r3, #1
 800fd58:	60fb      	str	r3, [r7, #12]
 800fd5a:	e008      	b.n	800fd6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd60:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <xTaskPriorityInherit+0xc4>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d201      	bcs.n	800fd6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
	}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3710      	adds	r7, #16
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	20003a94 	.word	0x20003a94
 800fd7c:	20003a98 	.word	0x20003a98
 800fd80:	20003f70 	.word	0x20003f70

0800fd84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b086      	sub	sp, #24
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fd90:	2300      	movs	r3, #0
 800fd92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d056      	beq.n	800fe48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fd9a:	4b2e      	ldr	r3, [pc, #184]	; (800fe54 <xTaskPriorityDisinherit+0xd0>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	693a      	ldr	r2, [r7, #16]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d00a      	beq.n	800fdba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda8:	f383 8811 	msr	BASEPRI, r3
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f3bf 8f4f 	dsb	sy
 800fdb4:	60fb      	str	r3, [r7, #12]
}
 800fdb6:	bf00      	nop
 800fdb8:	e7fe      	b.n	800fdb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10a      	bne.n	800fdd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc6:	f383 8811 	msr	BASEPRI, r3
 800fdca:	f3bf 8f6f 	isb	sy
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	60bb      	str	r3, [r7, #8]
}
 800fdd4:	bf00      	nop
 800fdd6:	e7fe      	b.n	800fdd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fddc:	1e5a      	subs	r2, r3, #1
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d02c      	beq.n	800fe48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d128      	bne.n	800fe48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	3304      	adds	r3, #4
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fd ffe4 	bl	800ddc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe18:	4b0f      	ldr	r3, [pc, #60]	; (800fe58 <xTaskPriorityDisinherit+0xd4>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d903      	bls.n	800fe28 <xTaskPriorityDisinherit+0xa4>
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe24:	4a0c      	ldr	r2, [pc, #48]	; (800fe58 <xTaskPriorityDisinherit+0xd4>)
 800fe26:	6013      	str	r3, [r2, #0]
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	4413      	add	r3, r2
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	4a09      	ldr	r2, [pc, #36]	; (800fe5c <xTaskPriorityDisinherit+0xd8>)
 800fe36:	441a      	add	r2, r3
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	3304      	adds	r3, #4
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	4610      	mov	r0, r2
 800fe40:	f7fd ff65 	bl	800dd0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fe44:	2301      	movs	r3, #1
 800fe46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe48:	697b      	ldr	r3, [r7, #20]
	}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3718      	adds	r7, #24
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	20003a94 	.word	0x20003a94
 800fe58:	20003f70 	.word	0x20003f70
 800fe5c:	20003a98 	.word	0x20003a98

0800fe60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b088      	sub	sp, #32
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d06a      	beq.n	800ff4e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d10a      	bne.n	800fe96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	60fb      	str	r3, [r7, #12]
}
 800fe92:	bf00      	nop
 800fe94:	e7fe      	b.n	800fe94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d902      	bls.n	800fea6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	61fb      	str	r3, [r7, #28]
 800fea4:	e002      	b.n	800feac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800feaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb0:	69fa      	ldr	r2, [r7, #28]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d04b      	beq.n	800ff4e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feba:	697a      	ldr	r2, [r7, #20]
 800febc:	429a      	cmp	r2, r3
 800febe:	d146      	bne.n	800ff4e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fec0:	4b25      	ldr	r3, [pc, #148]	; (800ff58 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	69ba      	ldr	r2, [r7, #24]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d10a      	bne.n	800fee0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	60bb      	str	r3, [r7, #8]
}
 800fedc:	bf00      	nop
 800fede:	e7fe      	b.n	800fede <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	69fa      	ldr	r2, [r7, #28]
 800feea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	699b      	ldr	r3, [r3, #24]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	db04      	blt.n	800fefe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	6959      	ldr	r1, [r3, #20]
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	4613      	mov	r3, r2
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	4413      	add	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4a13      	ldr	r2, [pc, #76]	; (800ff5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ff0e:	4413      	add	r3, r2
 800ff10:	4299      	cmp	r1, r3
 800ff12:	d11c      	bne.n	800ff4e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff14:	69bb      	ldr	r3, [r7, #24]
 800ff16:	3304      	adds	r3, #4
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fd ff55 	bl	800ddc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff22:	4b0f      	ldr	r3, [pc, #60]	; (800ff60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d903      	bls.n	800ff32 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2e:	4a0c      	ldr	r2, [pc, #48]	; (800ff60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff30:	6013      	str	r3, [r2, #0]
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff36:	4613      	mov	r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4413      	add	r3, r2
 800ff3c:	009b      	lsls	r3, r3, #2
 800ff3e:	4a07      	ldr	r2, [pc, #28]	; (800ff5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ff40:	441a      	add	r2, r3
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	3304      	adds	r3, #4
 800ff46:	4619      	mov	r1, r3
 800ff48:	4610      	mov	r0, r2
 800ff4a:	f7fd fee0 	bl	800dd0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff4e:	bf00      	nop
 800ff50:	3720      	adds	r7, #32
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	20003a94 	.word	0x20003a94
 800ff5c:	20003a98 	.word	0x20003a98
 800ff60:	20003f70 	.word	0x20003f70

0800ff64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ff68:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d004      	beq.n	800ff7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff70:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff76:	3201      	adds	r2, #1
 800ff78:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800ff7a:	4b03      	ldr	r3, [pc, #12]	; (800ff88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
	}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	20003a94 	.word	0x20003a94

0800ff8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff96:	4b21      	ldr	r3, [pc, #132]	; (801001c <prvAddCurrentTaskToDelayedList+0x90>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff9c:	4b20      	ldr	r3, [pc, #128]	; (8010020 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fd ff10 	bl	800ddc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffae:	d10a      	bne.n	800ffc6 <prvAddCurrentTaskToDelayedList+0x3a>
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d007      	beq.n	800ffc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffb6:	4b1a      	ldr	r3, [pc, #104]	; (8010020 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	3304      	adds	r3, #4
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	4819      	ldr	r0, [pc, #100]	; (8010024 <prvAddCurrentTaskToDelayedList+0x98>)
 800ffc0:	f7fd fea5 	bl	800dd0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ffc4:	e026      	b.n	8010014 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4413      	add	r3, r2
 800ffcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ffce:	4b14      	ldr	r3, [pc, #80]	; (8010020 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68ba      	ldr	r2, [r7, #8]
 800ffd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ffd6:	68ba      	ldr	r2, [r7, #8]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d209      	bcs.n	800fff2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffde:	4b12      	ldr	r3, [pc, #72]	; (8010028 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	4b0f      	ldr	r3, [pc, #60]	; (8010020 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	3304      	adds	r3, #4
 800ffe8:	4619      	mov	r1, r3
 800ffea:	4610      	mov	r0, r2
 800ffec:	f7fd feb3 	bl	800dd56 <vListInsert>
}
 800fff0:	e010      	b.n	8010014 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fff2:	4b0e      	ldr	r3, [pc, #56]	; (801002c <prvAddCurrentTaskToDelayedList+0xa0>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	4b0a      	ldr	r3, [pc, #40]	; (8010020 <prvAddCurrentTaskToDelayedList+0x94>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	3304      	adds	r3, #4
 800fffc:	4619      	mov	r1, r3
 800fffe:	4610      	mov	r0, r2
 8010000:	f7fd fea9 	bl	800dd56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010004:	4b0a      	ldr	r3, [pc, #40]	; (8010030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68ba      	ldr	r2, [r7, #8]
 801000a:	429a      	cmp	r2, r3
 801000c:	d202      	bcs.n	8010014 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801000e:	4a08      	ldr	r2, [pc, #32]	; (8010030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	6013      	str	r3, [r2, #0]
}
 8010014:	bf00      	nop
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	20003f6c 	.word	0x20003f6c
 8010020:	20003a94 	.word	0x20003a94
 8010024:	20003f54 	.word	0x20003f54
 8010028:	20003f24 	.word	0x20003f24
 801002c:	20003f20 	.word	0x20003f20
 8010030:	20003f88 	.word	0x20003f88

08010034 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b08a      	sub	sp, #40	; 0x28
 8010038:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801003a:	2300      	movs	r3, #0
 801003c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801003e:	f000 fb07 	bl	8010650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010042:	4b1c      	ldr	r3, [pc, #112]	; (80100b4 <xTimerCreateTimerTask+0x80>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d021      	beq.n	801008e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801004a:	2300      	movs	r3, #0
 801004c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801004e:	2300      	movs	r3, #0
 8010050:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010052:	1d3a      	adds	r2, r7, #4
 8010054:	f107 0108 	add.w	r1, r7, #8
 8010058:	f107 030c 	add.w	r3, r7, #12
 801005c:	4618      	mov	r0, r3
 801005e:	f7fd fe0f 	bl	800dc80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010062:	6879      	ldr	r1, [r7, #4]
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	68fa      	ldr	r2, [r7, #12]
 8010068:	9202      	str	r2, [sp, #8]
 801006a:	9301      	str	r3, [sp, #4]
 801006c:	2302      	movs	r3, #2
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	2300      	movs	r3, #0
 8010072:	460a      	mov	r2, r1
 8010074:	4910      	ldr	r1, [pc, #64]	; (80100b8 <xTimerCreateTimerTask+0x84>)
 8010076:	4811      	ldr	r0, [pc, #68]	; (80100bc <xTimerCreateTimerTask+0x88>)
 8010078:	f7fe ff94 	bl	800efa4 <xTaskCreateStatic>
 801007c:	4603      	mov	r3, r0
 801007e:	4a10      	ldr	r2, [pc, #64]	; (80100c0 <xTimerCreateTimerTask+0x8c>)
 8010080:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010082:	4b0f      	ldr	r3, [pc, #60]	; (80100c0 <xTimerCreateTimerTask+0x8c>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d001      	beq.n	801008e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801008a:	2301      	movs	r3, #1
 801008c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10a      	bne.n	80100aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010098:	f383 8811 	msr	BASEPRI, r3
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	f3bf 8f4f 	dsb	sy
 80100a4:	613b      	str	r3, [r7, #16]
}
 80100a6:	bf00      	nop
 80100a8:	e7fe      	b.n	80100a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80100aa:	697b      	ldr	r3, [r7, #20]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3718      	adds	r7, #24
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	20003fc4 	.word	0x20003fc4
 80100b8:	08015488 	.word	0x08015488
 80100bc:	080101f9 	.word	0x080101f9
 80100c0:	20003fc8 	.word	0x20003fc8

080100c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08a      	sub	sp, #40	; 0x28
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	607a      	str	r2, [r7, #4]
 80100d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80100d2:	2300      	movs	r3, #0
 80100d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d10a      	bne.n	80100f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80100dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e0:	f383 8811 	msr	BASEPRI, r3
 80100e4:	f3bf 8f6f 	isb	sy
 80100e8:	f3bf 8f4f 	dsb	sy
 80100ec:	623b      	str	r3, [r7, #32]
}
 80100ee:	bf00      	nop
 80100f0:	e7fe      	b.n	80100f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80100f2:	4b1a      	ldr	r3, [pc, #104]	; (801015c <xTimerGenericCommand+0x98>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d02a      	beq.n	8010150 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	2b05      	cmp	r3, #5
 801010a:	dc18      	bgt.n	801013e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801010c:	f7ff fdb4 	bl	800fc78 <xTaskGetSchedulerState>
 8010110:	4603      	mov	r3, r0
 8010112:	2b02      	cmp	r3, #2
 8010114:	d109      	bne.n	801012a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010116:	4b11      	ldr	r3, [pc, #68]	; (801015c <xTimerGenericCommand+0x98>)
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	f107 0110 	add.w	r1, r7, #16
 801011e:	2300      	movs	r3, #0
 8010120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010122:	f7fe f8d9 	bl	800e2d8 <xQueueGenericSend>
 8010126:	6278      	str	r0, [r7, #36]	; 0x24
 8010128:	e012      	b.n	8010150 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801012a:	4b0c      	ldr	r3, [pc, #48]	; (801015c <xTimerGenericCommand+0x98>)
 801012c:	6818      	ldr	r0, [r3, #0]
 801012e:	f107 0110 	add.w	r1, r7, #16
 8010132:	2300      	movs	r3, #0
 8010134:	2200      	movs	r2, #0
 8010136:	f7fe f8cf 	bl	800e2d8 <xQueueGenericSend>
 801013a:	6278      	str	r0, [r7, #36]	; 0x24
 801013c:	e008      	b.n	8010150 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801013e:	4b07      	ldr	r3, [pc, #28]	; (801015c <xTimerGenericCommand+0x98>)
 8010140:	6818      	ldr	r0, [r3, #0]
 8010142:	f107 0110 	add.w	r1, r7, #16
 8010146:	2300      	movs	r3, #0
 8010148:	683a      	ldr	r2, [r7, #0]
 801014a:	f7fe f9c3 	bl	800e4d4 <xQueueGenericSendFromISR>
 801014e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010152:	4618      	mov	r0, r3
 8010154:	3728      	adds	r7, #40	; 0x28
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	20003fc4 	.word	0x20003fc4

08010160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b088      	sub	sp, #32
 8010164:	af02      	add	r7, sp, #8
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801016a:	4b22      	ldr	r3, [pc, #136]	; (80101f4 <prvProcessExpiredTimer+0x94>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	3304      	adds	r3, #4
 8010178:	4618      	mov	r0, r3
 801017a:	f7fd fe25 	bl	800ddc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010184:	f003 0304 	and.w	r3, r3, #4
 8010188:	2b00      	cmp	r3, #0
 801018a:	d022      	beq.n	80101d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	699a      	ldr	r2, [r3, #24]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	18d1      	adds	r1, r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	683a      	ldr	r2, [r7, #0]
 8010198:	6978      	ldr	r0, [r7, #20]
 801019a:	f000 f8d1 	bl	8010340 <prvInsertTimerInActiveList>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d01f      	beq.n	80101e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101a4:	2300      	movs	r3, #0
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	2300      	movs	r3, #0
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	2100      	movs	r1, #0
 80101ae:	6978      	ldr	r0, [r7, #20]
 80101b0:	f7ff ff88 	bl	80100c4 <xTimerGenericCommand>
 80101b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d113      	bne.n	80101e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80101bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c0:	f383 8811 	msr	BASEPRI, r3
 80101c4:	f3bf 8f6f 	isb	sy
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	60fb      	str	r3, [r7, #12]
}
 80101ce:	bf00      	nop
 80101d0:	e7fe      	b.n	80101d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101d8:	f023 0301 	bic.w	r3, r3, #1
 80101dc:	b2da      	uxtb	r2, r3
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	6a1b      	ldr	r3, [r3, #32]
 80101e8:	6978      	ldr	r0, [r7, #20]
 80101ea:	4798      	blx	r3
}
 80101ec:	bf00      	nop
 80101ee:	3718      	adds	r7, #24
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	20003fbc 	.word	0x20003fbc

080101f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010200:	f107 0308 	add.w	r3, r7, #8
 8010204:	4618      	mov	r0, r3
 8010206:	f000 f857 	bl	80102b8 <prvGetNextExpireTime>
 801020a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	4619      	mov	r1, r3
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f000 f803 	bl	801021c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010216:	f000 f8d5 	bl	80103c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801021a:	e7f1      	b.n	8010200 <prvTimerTask+0x8>

0801021c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010226:	f7ff f919 	bl	800f45c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801022a:	f107 0308 	add.w	r3, r7, #8
 801022e:	4618      	mov	r0, r3
 8010230:	f000 f866 	bl	8010300 <prvSampleTimeNow>
 8010234:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d130      	bne.n	801029e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d10a      	bne.n	8010258 <prvProcessTimerOrBlockTask+0x3c>
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	429a      	cmp	r2, r3
 8010248:	d806      	bhi.n	8010258 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801024a:	f7ff f915 	bl	800f478 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801024e:	68f9      	ldr	r1, [r7, #12]
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff ff85 	bl	8010160 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010256:	e024      	b.n	80102a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d008      	beq.n	8010270 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801025e:	4b13      	ldr	r3, [pc, #76]	; (80102ac <prvProcessTimerOrBlockTask+0x90>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d101      	bne.n	801026c <prvProcessTimerOrBlockTask+0x50>
 8010268:	2301      	movs	r3, #1
 801026a:	e000      	b.n	801026e <prvProcessTimerOrBlockTask+0x52>
 801026c:	2300      	movs	r3, #0
 801026e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010270:	4b0f      	ldr	r3, [pc, #60]	; (80102b0 <prvProcessTimerOrBlockTask+0x94>)
 8010272:	6818      	ldr	r0, [r3, #0]
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	4619      	mov	r1, r3
 801027e:	f7fe fe5d 	bl	800ef3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010282:	f7ff f8f9 	bl	800f478 <xTaskResumeAll>
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d10a      	bne.n	80102a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801028c:	4b09      	ldr	r3, [pc, #36]	; (80102b4 <prvProcessTimerOrBlockTask+0x98>)
 801028e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010292:	601a      	str	r2, [r3, #0]
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	f3bf 8f6f 	isb	sy
}
 801029c:	e001      	b.n	80102a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801029e:	f7ff f8eb 	bl	800f478 <xTaskResumeAll>
}
 80102a2:	bf00      	nop
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20003fc0 	.word	0x20003fc0
 80102b0:	20003fc4 	.word	0x20003fc4
 80102b4:	e000ed04 	.word	0xe000ed04

080102b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80102c0:	4b0e      	ldr	r3, [pc, #56]	; (80102fc <prvGetNextExpireTime+0x44>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d101      	bne.n	80102ce <prvGetNextExpireTime+0x16>
 80102ca:	2201      	movs	r2, #1
 80102cc:	e000      	b.n	80102d0 <prvGetNextExpireTime+0x18>
 80102ce:	2200      	movs	r2, #0
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d105      	bne.n	80102e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102dc:	4b07      	ldr	r3, [pc, #28]	; (80102fc <prvGetNextExpireTime+0x44>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	60fb      	str	r3, [r7, #12]
 80102e6:	e001      	b.n	80102ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80102e8:	2300      	movs	r3, #0
 80102ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80102ec:	68fb      	ldr	r3, [r7, #12]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3714      	adds	r7, #20
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr
 80102fa:	bf00      	nop
 80102fc:	20003fbc 	.word	0x20003fbc

08010300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010308:	f7ff f954 	bl	800f5b4 <xTaskGetTickCount>
 801030c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801030e:	4b0b      	ldr	r3, [pc, #44]	; (801033c <prvSampleTimeNow+0x3c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	68fa      	ldr	r2, [r7, #12]
 8010314:	429a      	cmp	r2, r3
 8010316:	d205      	bcs.n	8010324 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010318:	f000 f936 	bl	8010588 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	e002      	b.n	801032a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801032a:	4a04      	ldr	r2, [pc, #16]	; (801033c <prvSampleTimeNow+0x3c>)
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010330:	68fb      	ldr	r3, [r7, #12]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	20003fcc 	.word	0x20003fcc

08010340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
 801034c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801034e:	2300      	movs	r3, #0
 8010350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801035e:	68ba      	ldr	r2, [r7, #8]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	429a      	cmp	r2, r3
 8010364:	d812      	bhi.n	801038c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	1ad2      	subs	r2, r2, r3
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	699b      	ldr	r3, [r3, #24]
 8010370:	429a      	cmp	r2, r3
 8010372:	d302      	bcc.n	801037a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010374:	2301      	movs	r3, #1
 8010376:	617b      	str	r3, [r7, #20]
 8010378:	e01b      	b.n	80103b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801037a:	4b10      	ldr	r3, [pc, #64]	; (80103bc <prvInsertTimerInActiveList+0x7c>)
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3304      	adds	r3, #4
 8010382:	4619      	mov	r1, r3
 8010384:	4610      	mov	r0, r2
 8010386:	f7fd fce6 	bl	800dd56 <vListInsert>
 801038a:	e012      	b.n	80103b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	429a      	cmp	r2, r3
 8010392:	d206      	bcs.n	80103a2 <prvInsertTimerInActiveList+0x62>
 8010394:	68ba      	ldr	r2, [r7, #8]
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	429a      	cmp	r2, r3
 801039a:	d302      	bcc.n	80103a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801039c:	2301      	movs	r3, #1
 801039e:	617b      	str	r3, [r7, #20]
 80103a0:	e007      	b.n	80103b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103a2:	4b07      	ldr	r3, [pc, #28]	; (80103c0 <prvInsertTimerInActiveList+0x80>)
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	3304      	adds	r3, #4
 80103aa:	4619      	mov	r1, r3
 80103ac:	4610      	mov	r0, r2
 80103ae:	f7fd fcd2 	bl	800dd56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80103b2:	697b      	ldr	r3, [r7, #20]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3718      	adds	r7, #24
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20003fc0 	.word	0x20003fc0
 80103c0:	20003fbc 	.word	0x20003fbc

080103c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b08e      	sub	sp, #56	; 0x38
 80103c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80103ca:	e0ca      	b.n	8010562 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	da18      	bge.n	8010404 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80103d2:	1d3b      	adds	r3, r7, #4
 80103d4:	3304      	adds	r3, #4
 80103d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80103d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d10a      	bne.n	80103f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80103de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e2:	f383 8811 	msr	BASEPRI, r3
 80103e6:	f3bf 8f6f 	isb	sy
 80103ea:	f3bf 8f4f 	dsb	sy
 80103ee:	61fb      	str	r3, [r7, #28]
}
 80103f0:	bf00      	nop
 80103f2:	e7fe      	b.n	80103f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103fa:	6850      	ldr	r0, [r2, #4]
 80103fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103fe:	6892      	ldr	r2, [r2, #8]
 8010400:	4611      	mov	r1, r2
 8010402:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	f2c0 80ab 	blt.w	8010562 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d004      	beq.n	8010422 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041a:	3304      	adds	r3, #4
 801041c:	4618      	mov	r0, r3
 801041e:	f7fd fcd3 	bl	800ddc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010422:	463b      	mov	r3, r7
 8010424:	4618      	mov	r0, r3
 8010426:	f7ff ff6b 	bl	8010300 <prvSampleTimeNow>
 801042a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2b09      	cmp	r3, #9
 8010430:	f200 8096 	bhi.w	8010560 <prvProcessReceivedCommands+0x19c>
 8010434:	a201      	add	r2, pc, #4	; (adr r2, 801043c <prvProcessReceivedCommands+0x78>)
 8010436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801043a:	bf00      	nop
 801043c:	08010465 	.word	0x08010465
 8010440:	08010465 	.word	0x08010465
 8010444:	08010465 	.word	0x08010465
 8010448:	080104d9 	.word	0x080104d9
 801044c:	080104ed 	.word	0x080104ed
 8010450:	08010537 	.word	0x08010537
 8010454:	08010465 	.word	0x08010465
 8010458:	08010465 	.word	0x08010465
 801045c:	080104d9 	.word	0x080104d9
 8010460:	080104ed 	.word	0x080104ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801046a:	f043 0301 	orr.w	r3, r3, #1
 801046e:	b2da      	uxtb	r2, r3
 8010470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010476:	68ba      	ldr	r2, [r7, #8]
 8010478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047a:	699b      	ldr	r3, [r3, #24]
 801047c:	18d1      	adds	r1, r2, r3
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010484:	f7ff ff5c 	bl	8010340 <prvInsertTimerInActiveList>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d069      	beq.n	8010562 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010490:	6a1b      	ldr	r3, [r3, #32]
 8010492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801049c:	f003 0304 	and.w	r3, r3, #4
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d05e      	beq.n	8010562 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80104a4:	68ba      	ldr	r2, [r7, #8]
 80104a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a8:	699b      	ldr	r3, [r3, #24]
 80104aa:	441a      	add	r2, r3
 80104ac:	2300      	movs	r3, #0
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	2300      	movs	r3, #0
 80104b2:	2100      	movs	r1, #0
 80104b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104b6:	f7ff fe05 	bl	80100c4 <xTimerGenericCommand>
 80104ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80104bc:	6a3b      	ldr	r3, [r7, #32]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d14f      	bne.n	8010562 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	61bb      	str	r3, [r7, #24]
}
 80104d4:	bf00      	nop
 80104d6:	e7fe      	b.n	80104d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80104d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104de:	f023 0301 	bic.w	r3, r3, #1
 80104e2:	b2da      	uxtb	r2, r3
 80104e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80104ea:	e03a      	b.n	8010562 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80104ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104f2:	f043 0301 	orr.w	r3, r3, #1
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80104fe:	68ba      	ldr	r2, [r7, #8]
 8010500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010502:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010506:	699b      	ldr	r3, [r3, #24]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10a      	bne.n	8010522 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010510:	f383 8811 	msr	BASEPRI, r3
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	617b      	str	r3, [r7, #20]
}
 801051e:	bf00      	nop
 8010520:	e7fe      	b.n	8010520 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	699a      	ldr	r2, [r3, #24]
 8010526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010528:	18d1      	adds	r1, r2, r3
 801052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801052e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010530:	f7ff ff06 	bl	8010340 <prvInsertTimerInActiveList>
					break;
 8010534:	e015      	b.n	8010562 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801053c:	f003 0302 	and.w	r3, r3, #2
 8010540:	2b00      	cmp	r3, #0
 8010542:	d103      	bne.n	801054c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010546:	f000 fbdb 	bl	8010d00 <vPortFree>
 801054a:	e00a      	b.n	8010562 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010552:	f023 0301 	bic.w	r3, r3, #1
 8010556:	b2da      	uxtb	r2, r3
 8010558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801055e:	e000      	b.n	8010562 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010560:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010562:	4b08      	ldr	r3, [pc, #32]	; (8010584 <prvProcessReceivedCommands+0x1c0>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	1d39      	adds	r1, r7, #4
 8010568:	2200      	movs	r2, #0
 801056a:	4618      	mov	r0, r3
 801056c:	f7fe f8da 	bl	800e724 <xQueueReceive>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	f47f af2a 	bne.w	80103cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010578:	bf00      	nop
 801057a:	bf00      	nop
 801057c:	3730      	adds	r7, #48	; 0x30
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	20003fc4 	.word	0x20003fc4

08010588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b088      	sub	sp, #32
 801058c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801058e:	e048      	b.n	8010622 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010590:	4b2d      	ldr	r3, [pc, #180]	; (8010648 <prvSwitchTimerLists+0xc0>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801059a:	4b2b      	ldr	r3, [pc, #172]	; (8010648 <prvSwitchTimerLists+0xc0>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	3304      	adds	r3, #4
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fd fc0d 	bl	800ddc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	6a1b      	ldr	r3, [r3, #32]
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105bc:	f003 0304 	and.w	r3, r3, #4
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d02e      	beq.n	8010622 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	699b      	ldr	r3, [r3, #24]
 80105c8:	693a      	ldr	r2, [r7, #16]
 80105ca:	4413      	add	r3, r2
 80105cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80105ce:	68ba      	ldr	r2, [r7, #8]
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d90e      	bls.n	80105f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	68ba      	ldr	r2, [r7, #8]
 80105da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105e2:	4b19      	ldr	r3, [pc, #100]	; (8010648 <prvSwitchTimerLists+0xc0>)
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	3304      	adds	r3, #4
 80105ea:	4619      	mov	r1, r3
 80105ec:	4610      	mov	r0, r2
 80105ee:	f7fd fbb2 	bl	800dd56 <vListInsert>
 80105f2:	e016      	b.n	8010622 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105f4:	2300      	movs	r3, #0
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	2300      	movs	r3, #0
 80105fa:	693a      	ldr	r2, [r7, #16]
 80105fc:	2100      	movs	r1, #0
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f7ff fd60 	bl	80100c4 <xTimerGenericCommand>
 8010604:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10a      	bne.n	8010622 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010610:	f383 8811 	msr	BASEPRI, r3
 8010614:	f3bf 8f6f 	isb	sy
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	603b      	str	r3, [r7, #0]
}
 801061e:	bf00      	nop
 8010620:	e7fe      	b.n	8010620 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010622:	4b09      	ldr	r3, [pc, #36]	; (8010648 <prvSwitchTimerLists+0xc0>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1b1      	bne.n	8010590 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801062c:	4b06      	ldr	r3, [pc, #24]	; (8010648 <prvSwitchTimerLists+0xc0>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010632:	4b06      	ldr	r3, [pc, #24]	; (801064c <prvSwitchTimerLists+0xc4>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4a04      	ldr	r2, [pc, #16]	; (8010648 <prvSwitchTimerLists+0xc0>)
 8010638:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801063a:	4a04      	ldr	r2, [pc, #16]	; (801064c <prvSwitchTimerLists+0xc4>)
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	6013      	str	r3, [r2, #0]
}
 8010640:	bf00      	nop
 8010642:	3718      	adds	r7, #24
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	20003fbc 	.word	0x20003fbc
 801064c:	20003fc0 	.word	0x20003fc0

08010650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010656:	f000 f965 	bl	8010924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801065a:	4b15      	ldr	r3, [pc, #84]	; (80106b0 <prvCheckForValidListAndQueue+0x60>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d120      	bne.n	80106a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010662:	4814      	ldr	r0, [pc, #80]	; (80106b4 <prvCheckForValidListAndQueue+0x64>)
 8010664:	f7fd fb26 	bl	800dcb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010668:	4813      	ldr	r0, [pc, #76]	; (80106b8 <prvCheckForValidListAndQueue+0x68>)
 801066a:	f7fd fb23 	bl	800dcb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801066e:	4b13      	ldr	r3, [pc, #76]	; (80106bc <prvCheckForValidListAndQueue+0x6c>)
 8010670:	4a10      	ldr	r2, [pc, #64]	; (80106b4 <prvCheckForValidListAndQueue+0x64>)
 8010672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010674:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <prvCheckForValidListAndQueue+0x70>)
 8010676:	4a10      	ldr	r2, [pc, #64]	; (80106b8 <prvCheckForValidListAndQueue+0x68>)
 8010678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801067a:	2300      	movs	r3, #0
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	4b11      	ldr	r3, [pc, #68]	; (80106c4 <prvCheckForValidListAndQueue+0x74>)
 8010680:	4a11      	ldr	r2, [pc, #68]	; (80106c8 <prvCheckForValidListAndQueue+0x78>)
 8010682:	2110      	movs	r1, #16
 8010684:	200a      	movs	r0, #10
 8010686:	f7fd fc31 	bl	800deec <xQueueGenericCreateStatic>
 801068a:	4603      	mov	r3, r0
 801068c:	4a08      	ldr	r2, [pc, #32]	; (80106b0 <prvCheckForValidListAndQueue+0x60>)
 801068e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010690:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <prvCheckForValidListAndQueue+0x60>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d005      	beq.n	80106a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010698:	4b05      	ldr	r3, [pc, #20]	; (80106b0 <prvCheckForValidListAndQueue+0x60>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	490b      	ldr	r1, [pc, #44]	; (80106cc <prvCheckForValidListAndQueue+0x7c>)
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fe fbf8 	bl	800ee94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106a4:	f000 f96e 	bl	8010984 <vPortExitCritical>
}
 80106a8:	bf00      	nop
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	20003fc4 	.word	0x20003fc4
 80106b4:	20003f94 	.word	0x20003f94
 80106b8:	20003fa8 	.word	0x20003fa8
 80106bc:	20003fbc 	.word	0x20003fbc
 80106c0:	20003fc0 	.word	0x20003fc0
 80106c4:	20004070 	.word	0x20004070
 80106c8:	20003fd0 	.word	0x20003fd0
 80106cc:	08015490 	.word	0x08015490

080106d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	3b04      	subs	r3, #4
 80106e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80106e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3b04      	subs	r3, #4
 80106ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	f023 0201 	bic.w	r2, r3, #1
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	3b04      	subs	r3, #4
 80106fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010700:	4a0c      	ldr	r2, [pc, #48]	; (8010734 <pxPortInitialiseStack+0x64>)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	3b14      	subs	r3, #20
 801070a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	3b04      	subs	r3, #4
 8010716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f06f 0202 	mvn.w	r2, #2
 801071e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	3b20      	subs	r3, #32
 8010724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010726:	68fb      	ldr	r3, [r7, #12]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr
 8010734:	08010739 	.word	0x08010739

08010738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801073e:	2300      	movs	r3, #0
 8010740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010742:	4b12      	ldr	r3, [pc, #72]	; (801078c <prvTaskExitError+0x54>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801074a:	d00a      	beq.n	8010762 <prvTaskExitError+0x2a>
	__asm volatile
 801074c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	60fb      	str	r3, [r7, #12]
}
 801075e:	bf00      	nop
 8010760:	e7fe      	b.n	8010760 <prvTaskExitError+0x28>
	__asm volatile
 8010762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010766:	f383 8811 	msr	BASEPRI, r3
 801076a:	f3bf 8f6f 	isb	sy
 801076e:	f3bf 8f4f 	dsb	sy
 8010772:	60bb      	str	r3, [r7, #8]
}
 8010774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010776:	bf00      	nop
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d0fc      	beq.n	8010778 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801077e:	bf00      	nop
 8010780:	bf00      	nop
 8010782:	3714      	adds	r7, #20
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr
 801078c:	2000011c 	.word	0x2000011c

08010790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010790:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <pxCurrentTCBConst2>)
 8010792:	6819      	ldr	r1, [r3, #0]
 8010794:	6808      	ldr	r0, [r1, #0]
 8010796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079a:	f380 8809 	msr	PSP, r0
 801079e:	f3bf 8f6f 	isb	sy
 80107a2:	f04f 0000 	mov.w	r0, #0
 80107a6:	f380 8811 	msr	BASEPRI, r0
 80107aa:	4770      	bx	lr
 80107ac:	f3af 8000 	nop.w

080107b0 <pxCurrentTCBConst2>:
 80107b0:	20003a94 	.word	0x20003a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop

080107b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80107b8:	4808      	ldr	r0, [pc, #32]	; (80107dc <prvPortStartFirstTask+0x24>)
 80107ba:	6800      	ldr	r0, [r0, #0]
 80107bc:	6800      	ldr	r0, [r0, #0]
 80107be:	f380 8808 	msr	MSP, r0
 80107c2:	f04f 0000 	mov.w	r0, #0
 80107c6:	f380 8814 	msr	CONTROL, r0
 80107ca:	b662      	cpsie	i
 80107cc:	b661      	cpsie	f
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	df00      	svc	0
 80107d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80107da:	bf00      	nop
 80107dc:	e000ed08 	.word	0xe000ed08

080107e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b086      	sub	sp, #24
 80107e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80107e6:	4b46      	ldr	r3, [pc, #280]	; (8010900 <xPortStartScheduler+0x120>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a46      	ldr	r2, [pc, #280]	; (8010904 <xPortStartScheduler+0x124>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d10a      	bne.n	8010806 <xPortStartScheduler+0x26>
	__asm volatile
 80107f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f4:	f383 8811 	msr	BASEPRI, r3
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	613b      	str	r3, [r7, #16]
}
 8010802:	bf00      	nop
 8010804:	e7fe      	b.n	8010804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010806:	4b3e      	ldr	r3, [pc, #248]	; (8010900 <xPortStartScheduler+0x120>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a3f      	ldr	r2, [pc, #252]	; (8010908 <xPortStartScheduler+0x128>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d10a      	bne.n	8010826 <xPortStartScheduler+0x46>
	__asm volatile
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	60fb      	str	r3, [r7, #12]
}
 8010822:	bf00      	nop
 8010824:	e7fe      	b.n	8010824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010826:	4b39      	ldr	r3, [pc, #228]	; (801090c <xPortStartScheduler+0x12c>)
 8010828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	b2db      	uxtb	r3, r3
 8010830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	22ff      	movs	r2, #255	; 0xff
 8010836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	b2db      	uxtb	r3, r3
 801083e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010840:	78fb      	ldrb	r3, [r7, #3]
 8010842:	b2db      	uxtb	r3, r3
 8010844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010848:	b2da      	uxtb	r2, r3
 801084a:	4b31      	ldr	r3, [pc, #196]	; (8010910 <xPortStartScheduler+0x130>)
 801084c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801084e:	4b31      	ldr	r3, [pc, #196]	; (8010914 <xPortStartScheduler+0x134>)
 8010850:	2207      	movs	r2, #7
 8010852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010854:	e009      	b.n	801086a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010856:	4b2f      	ldr	r3, [pc, #188]	; (8010914 <xPortStartScheduler+0x134>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3b01      	subs	r3, #1
 801085c:	4a2d      	ldr	r2, [pc, #180]	; (8010914 <xPortStartScheduler+0x134>)
 801085e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	b2db      	uxtb	r3, r3
 8010864:	005b      	lsls	r3, r3, #1
 8010866:	b2db      	uxtb	r3, r3
 8010868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801086a:	78fb      	ldrb	r3, [r7, #3]
 801086c:	b2db      	uxtb	r3, r3
 801086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010872:	2b80      	cmp	r3, #128	; 0x80
 8010874:	d0ef      	beq.n	8010856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010876:	4b27      	ldr	r3, [pc, #156]	; (8010914 <xPortStartScheduler+0x134>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f1c3 0307 	rsb	r3, r3, #7
 801087e:	2b04      	cmp	r3, #4
 8010880:	d00a      	beq.n	8010898 <xPortStartScheduler+0xb8>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	60bb      	str	r3, [r7, #8]
}
 8010894:	bf00      	nop
 8010896:	e7fe      	b.n	8010896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010898:	4b1e      	ldr	r3, [pc, #120]	; (8010914 <xPortStartScheduler+0x134>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	021b      	lsls	r3, r3, #8
 801089e:	4a1d      	ldr	r2, [pc, #116]	; (8010914 <xPortStartScheduler+0x134>)
 80108a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80108a2:	4b1c      	ldr	r3, [pc, #112]	; (8010914 <xPortStartScheduler+0x134>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80108aa:	4a1a      	ldr	r2, [pc, #104]	; (8010914 <xPortStartScheduler+0x134>)
 80108ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80108b6:	4b18      	ldr	r3, [pc, #96]	; (8010918 <xPortStartScheduler+0x138>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a17      	ldr	r2, [pc, #92]	; (8010918 <xPortStartScheduler+0x138>)
 80108bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80108c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80108c2:	4b15      	ldr	r3, [pc, #84]	; (8010918 <xPortStartScheduler+0x138>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a14      	ldr	r2, [pc, #80]	; (8010918 <xPortStartScheduler+0x138>)
 80108c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80108cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108ce:	f000 f8dd 	bl	8010a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108d2:	4b12      	ldr	r3, [pc, #72]	; (801091c <xPortStartScheduler+0x13c>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80108d8:	f000 f8fc 	bl	8010ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80108dc:	4b10      	ldr	r3, [pc, #64]	; (8010920 <xPortStartScheduler+0x140>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a0f      	ldr	r2, [pc, #60]	; (8010920 <xPortStartScheduler+0x140>)
 80108e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80108e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80108e8:	f7ff ff66 	bl	80107b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80108ec:	f7fe ff3e 	bl	800f76c <vTaskSwitchContext>
	prvTaskExitError();
 80108f0:	f7ff ff22 	bl	8010738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3718      	adds	r7, #24
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	e000ed00 	.word	0xe000ed00
 8010904:	410fc271 	.word	0x410fc271
 8010908:	410fc270 	.word	0x410fc270
 801090c:	e000e400 	.word	0xe000e400
 8010910:	200040c0 	.word	0x200040c0
 8010914:	200040c4 	.word	0x200040c4
 8010918:	e000ed20 	.word	0xe000ed20
 801091c:	2000011c 	.word	0x2000011c
 8010920:	e000ef34 	.word	0xe000ef34

08010924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
	__asm volatile
 801092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092e:	f383 8811 	msr	BASEPRI, r3
 8010932:	f3bf 8f6f 	isb	sy
 8010936:	f3bf 8f4f 	dsb	sy
 801093a:	607b      	str	r3, [r7, #4]
}
 801093c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801093e:	4b0f      	ldr	r3, [pc, #60]	; (801097c <vPortEnterCritical+0x58>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	3301      	adds	r3, #1
 8010944:	4a0d      	ldr	r2, [pc, #52]	; (801097c <vPortEnterCritical+0x58>)
 8010946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010948:	4b0c      	ldr	r3, [pc, #48]	; (801097c <vPortEnterCritical+0x58>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b01      	cmp	r3, #1
 801094e:	d10f      	bne.n	8010970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010950:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <vPortEnterCritical+0x5c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d00a      	beq.n	8010970 <vPortEnterCritical+0x4c>
	__asm volatile
 801095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095e:	f383 8811 	msr	BASEPRI, r3
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	603b      	str	r3, [r7, #0]
}
 801096c:	bf00      	nop
 801096e:	e7fe      	b.n	801096e <vPortEnterCritical+0x4a>
	}
}
 8010970:	bf00      	nop
 8010972:	370c      	adds	r7, #12
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr
 801097c:	2000011c 	.word	0x2000011c
 8010980:	e000ed04 	.word	0xe000ed04

08010984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801098a:	4b12      	ldr	r3, [pc, #72]	; (80109d4 <vPortExitCritical+0x50>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10a      	bne.n	80109a8 <vPortExitCritical+0x24>
	__asm volatile
 8010992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	607b      	str	r3, [r7, #4]
}
 80109a4:	bf00      	nop
 80109a6:	e7fe      	b.n	80109a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80109a8:	4b0a      	ldr	r3, [pc, #40]	; (80109d4 <vPortExitCritical+0x50>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	3b01      	subs	r3, #1
 80109ae:	4a09      	ldr	r2, [pc, #36]	; (80109d4 <vPortExitCritical+0x50>)
 80109b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80109b2:	4b08      	ldr	r3, [pc, #32]	; (80109d4 <vPortExitCritical+0x50>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d105      	bne.n	80109c6 <vPortExitCritical+0x42>
 80109ba:	2300      	movs	r3, #0
 80109bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	f383 8811 	msr	BASEPRI, r3
}
 80109c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80109c6:	bf00      	nop
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	2000011c 	.word	0x2000011c
	...

080109e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109e0:	f3ef 8009 	mrs	r0, PSP
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	4b15      	ldr	r3, [pc, #84]	; (8010a40 <pxCurrentTCBConst>)
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	f01e 0f10 	tst.w	lr, #16
 80109f0:	bf08      	it	eq
 80109f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fa:	6010      	str	r0, [r2, #0]
 80109fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010a04:	f380 8811 	msr	BASEPRI, r0
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f7fe feac 	bl	800f76c <vTaskSwitchContext>
 8010a14:	f04f 0000 	mov.w	r0, #0
 8010a18:	f380 8811 	msr	BASEPRI, r0
 8010a1c:	bc09      	pop	{r0, r3}
 8010a1e:	6819      	ldr	r1, [r3, #0]
 8010a20:	6808      	ldr	r0, [r1, #0]
 8010a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a26:	f01e 0f10 	tst.w	lr, #16
 8010a2a:	bf08      	it	eq
 8010a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a30:	f380 8809 	msr	PSP, r0
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	f3af 8000 	nop.w

08010a40 <pxCurrentTCBConst>:
 8010a40:	20003a94 	.word	0x20003a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a44:	bf00      	nop
 8010a46:	bf00      	nop

08010a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	607b      	str	r3, [r7, #4]
}
 8010a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a62:	f7fe fdc9 	bl	800f5f8 <xTaskIncrementTick>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d003      	beq.n	8010a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a6c:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <xPortSysTickHandler+0x40>)
 8010a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	2300      	movs	r3, #0
 8010a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	f383 8811 	msr	BASEPRI, r3
}
 8010a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	e000ed04 	.word	0xe000ed04

08010a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a90:	4b0b      	ldr	r3, [pc, #44]	; (8010ac0 <vPortSetupTimerInterrupt+0x34>)
 8010a92:	2200      	movs	r2, #0
 8010a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a96:	4b0b      	ldr	r3, [pc, #44]	; (8010ac4 <vPortSetupTimerInterrupt+0x38>)
 8010a98:	2200      	movs	r2, #0
 8010a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a9c:	4b0a      	ldr	r3, [pc, #40]	; (8010ac8 <vPortSetupTimerInterrupt+0x3c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a0a      	ldr	r2, [pc, #40]	; (8010acc <vPortSetupTimerInterrupt+0x40>)
 8010aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8010aa6:	099b      	lsrs	r3, r3, #6
 8010aa8:	4a09      	ldr	r2, [pc, #36]	; (8010ad0 <vPortSetupTimerInterrupt+0x44>)
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010aae:	4b04      	ldr	r3, [pc, #16]	; (8010ac0 <vPortSetupTimerInterrupt+0x34>)
 8010ab0:	2207      	movs	r2, #7
 8010ab2:	601a      	str	r2, [r3, #0]
}
 8010ab4:	bf00      	nop
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	e000e010 	.word	0xe000e010
 8010ac4:	e000e018 	.word	0xe000e018
 8010ac8:	20000000 	.word	0x20000000
 8010acc:	10624dd3 	.word	0x10624dd3
 8010ad0:	e000e014 	.word	0xe000e014

08010ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ae4 <vPortEnableVFP+0x10>
 8010ad8:	6801      	ldr	r1, [r0, #0]
 8010ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ade:	6001      	str	r1, [r0, #0]
 8010ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ae2:	bf00      	nop
 8010ae4:	e000ed88 	.word	0xe000ed88

08010ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010aee:	f3ef 8305 	mrs	r3, IPSR
 8010af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b0f      	cmp	r3, #15
 8010af8:	d914      	bls.n	8010b24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010afa:	4a17      	ldr	r2, [pc, #92]	; (8010b58 <vPortValidateInterruptPriority+0x70>)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	4413      	add	r3, r2
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010b04:	4b15      	ldr	r3, [pc, #84]	; (8010b5c <vPortValidateInterruptPriority+0x74>)
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	7afa      	ldrb	r2, [r7, #11]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d20a      	bcs.n	8010b24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	f383 8811 	msr	BASEPRI, r3
 8010b16:	f3bf 8f6f 	isb	sy
 8010b1a:	f3bf 8f4f 	dsb	sy
 8010b1e:	607b      	str	r3, [r7, #4]
}
 8010b20:	bf00      	nop
 8010b22:	e7fe      	b.n	8010b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010b24:	4b0e      	ldr	r3, [pc, #56]	; (8010b60 <vPortValidateInterruptPriority+0x78>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010b2c:	4b0d      	ldr	r3, [pc, #52]	; (8010b64 <vPortValidateInterruptPriority+0x7c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d90a      	bls.n	8010b4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b38:	f383 8811 	msr	BASEPRI, r3
 8010b3c:	f3bf 8f6f 	isb	sy
 8010b40:	f3bf 8f4f 	dsb	sy
 8010b44:	603b      	str	r3, [r7, #0]
}
 8010b46:	bf00      	nop
 8010b48:	e7fe      	b.n	8010b48 <vPortValidateInterruptPriority+0x60>
	}
 8010b4a:	bf00      	nop
 8010b4c:	3714      	adds	r7, #20
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	e000e3f0 	.word	0xe000e3f0
 8010b5c:	200040c0 	.word	0x200040c0
 8010b60:	e000ed0c 	.word	0xe000ed0c
 8010b64:	200040c4 	.word	0x200040c4

08010b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b08a      	sub	sp, #40	; 0x28
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b70:	2300      	movs	r3, #0
 8010b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b74:	f7fe fc72 	bl	800f45c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b78:	4b5b      	ldr	r3, [pc, #364]	; (8010ce8 <pvPortMalloc+0x180>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b80:	f000 f920 	bl	8010dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b84:	4b59      	ldr	r3, [pc, #356]	; (8010cec <pvPortMalloc+0x184>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f040 8093 	bne.w	8010cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d01d      	beq.n	8010bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010b98:	2208      	movs	r2, #8
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f003 0307 	and.w	r3, r3, #7
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d014      	beq.n	8010bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f023 0307 	bic.w	r3, r3, #7
 8010bb0:	3308      	adds	r3, #8
 8010bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f003 0307 	and.w	r3, r3, #7
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d00a      	beq.n	8010bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8010bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc2:	f383 8811 	msr	BASEPRI, r3
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	f3bf 8f4f 	dsb	sy
 8010bce:	617b      	str	r3, [r7, #20]
}
 8010bd0:	bf00      	nop
 8010bd2:	e7fe      	b.n	8010bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d06e      	beq.n	8010cb8 <pvPortMalloc+0x150>
 8010bda:	4b45      	ldr	r3, [pc, #276]	; (8010cf0 <pvPortMalloc+0x188>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d869      	bhi.n	8010cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010be4:	4b43      	ldr	r3, [pc, #268]	; (8010cf4 <pvPortMalloc+0x18c>)
 8010be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010be8:	4b42      	ldr	r3, [pc, #264]	; (8010cf4 <pvPortMalloc+0x18c>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bee:	e004      	b.n	8010bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d903      	bls.n	8010c0c <pvPortMalloc+0xa4>
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1f1      	bne.n	8010bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010c0c:	4b36      	ldr	r3, [pc, #216]	; (8010ce8 <pvPortMalloc+0x180>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d050      	beq.n	8010cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c16:	6a3b      	ldr	r3, [r7, #32]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2208      	movs	r2, #8
 8010c1c:	4413      	add	r3, r2
 8010c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	6a3b      	ldr	r3, [r7, #32]
 8010c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	1ad2      	subs	r2, r2, r3
 8010c30:	2308      	movs	r3, #8
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d91f      	bls.n	8010c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	f003 0307 	and.w	r3, r3, #7
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00a      	beq.n	8010c60 <pvPortMalloc+0xf8>
	__asm volatile
 8010c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c4e:	f383 8811 	msr	BASEPRI, r3
 8010c52:	f3bf 8f6f 	isb	sy
 8010c56:	f3bf 8f4f 	dsb	sy
 8010c5a:	613b      	str	r3, [r7, #16]
}
 8010c5c:	bf00      	nop
 8010c5e:	e7fe      	b.n	8010c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	1ad2      	subs	r2, r2, r3
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c72:	69b8      	ldr	r0, [r7, #24]
 8010c74:	f000 f908 	bl	8010e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c78:	4b1d      	ldr	r3, [pc, #116]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	4a1b      	ldr	r2, [pc, #108]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c86:	4b1a      	ldr	r3, [pc, #104]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	4b1b      	ldr	r3, [pc, #108]	; (8010cf8 <pvPortMalloc+0x190>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d203      	bcs.n	8010c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c92:	4b17      	ldr	r3, [pc, #92]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a18      	ldr	r2, [pc, #96]	; (8010cf8 <pvPortMalloc+0x190>)
 8010c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	4b13      	ldr	r3, [pc, #76]	; (8010cec <pvPortMalloc+0x184>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	431a      	orrs	r2, r3
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	2200      	movs	r2, #0
 8010cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010cae:	4b13      	ldr	r3, [pc, #76]	; (8010cfc <pvPortMalloc+0x194>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	4a11      	ldr	r2, [pc, #68]	; (8010cfc <pvPortMalloc+0x194>)
 8010cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010cb8:	f7fe fbde 	bl	800f478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	f003 0307 	and.w	r3, r3, #7
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00a      	beq.n	8010cdc <pvPortMalloc+0x174>
	__asm volatile
 8010cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cca:	f383 8811 	msr	BASEPRI, r3
 8010cce:	f3bf 8f6f 	isb	sy
 8010cd2:	f3bf 8f4f 	dsb	sy
 8010cd6:	60fb      	str	r3, [r7, #12]
}
 8010cd8:	bf00      	nop
 8010cda:	e7fe      	b.n	8010cda <pvPortMalloc+0x172>
	return pvReturn;
 8010cdc:	69fb      	ldr	r3, [r7, #28]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3728      	adds	r7, #40	; 0x28
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	200044d0 	.word	0x200044d0
 8010cec:	200044e4 	.word	0x200044e4
 8010cf0:	200044d4 	.word	0x200044d4
 8010cf4:	200044c8 	.word	0x200044c8
 8010cf8:	200044d8 	.word	0x200044d8
 8010cfc:	200044dc 	.word	0x200044dc

08010d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b086      	sub	sp, #24
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d04d      	beq.n	8010dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d12:	2308      	movs	r3, #8
 8010d14:	425b      	negs	r3, r3
 8010d16:	697a      	ldr	r2, [r7, #20]
 8010d18:	4413      	add	r3, r2
 8010d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	685a      	ldr	r2, [r3, #4]
 8010d24:	4b24      	ldr	r3, [pc, #144]	; (8010db8 <vPortFree+0xb8>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4013      	ands	r3, r2
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d10a      	bne.n	8010d44 <vPortFree+0x44>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	60fb      	str	r3, [r7, #12]
}
 8010d40:	bf00      	nop
 8010d42:	e7fe      	b.n	8010d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00a      	beq.n	8010d62 <vPortFree+0x62>
	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	60bb      	str	r3, [r7, #8]
}
 8010d5e:	bf00      	nop
 8010d60:	e7fe      	b.n	8010d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	685a      	ldr	r2, [r3, #4]
 8010d66:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <vPortFree+0xb8>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4013      	ands	r3, r2
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d01e      	beq.n	8010dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d11a      	bne.n	8010dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	685a      	ldr	r2, [r3, #4]
 8010d7c:	4b0e      	ldr	r3, [pc, #56]	; (8010db8 <vPortFree+0xb8>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	43db      	mvns	r3, r3
 8010d82:	401a      	ands	r2, r3
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d88:	f7fe fb68 	bl	800f45c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	685a      	ldr	r2, [r3, #4]
 8010d90:	4b0a      	ldr	r3, [pc, #40]	; (8010dbc <vPortFree+0xbc>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4413      	add	r3, r2
 8010d96:	4a09      	ldr	r2, [pc, #36]	; (8010dbc <vPortFree+0xbc>)
 8010d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d9a:	6938      	ldr	r0, [r7, #16]
 8010d9c:	f000 f874 	bl	8010e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010da0:	4b07      	ldr	r3, [pc, #28]	; (8010dc0 <vPortFree+0xc0>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	3301      	adds	r3, #1
 8010da6:	4a06      	ldr	r2, [pc, #24]	; (8010dc0 <vPortFree+0xc0>)
 8010da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010daa:	f7fe fb65 	bl	800f478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010dae:	bf00      	nop
 8010db0:	3718      	adds	r7, #24
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	200044e4 	.word	0x200044e4
 8010dbc:	200044d4 	.word	0x200044d4
 8010dc0:	200044e0 	.word	0x200044e0

08010dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010dd0:	4b27      	ldr	r3, [pc, #156]	; (8010e70 <prvHeapInit+0xac>)
 8010dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f003 0307 	and.w	r3, r3, #7
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00c      	beq.n	8010df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	3307      	adds	r3, #7
 8010de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f023 0307 	bic.w	r3, r3, #7
 8010dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	1ad3      	subs	r3, r2, r3
 8010df2:	4a1f      	ldr	r2, [pc, #124]	; (8010e70 <prvHeapInit+0xac>)
 8010df4:	4413      	add	r3, r2
 8010df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010dfc:	4a1d      	ldr	r2, [pc, #116]	; (8010e74 <prvHeapInit+0xb0>)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e02:	4b1c      	ldr	r3, [pc, #112]	; (8010e74 <prvHeapInit+0xb0>)
 8010e04:	2200      	movs	r2, #0
 8010e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e10:	2208      	movs	r2, #8
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	1a9b      	subs	r3, r3, r2
 8010e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f023 0307 	bic.w	r3, r3, #7
 8010e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	4a15      	ldr	r2, [pc, #84]	; (8010e78 <prvHeapInit+0xb4>)
 8010e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e26:	4b14      	ldr	r3, [pc, #80]	; (8010e78 <prvHeapInit+0xb4>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e2e:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <prvHeapInit+0xb4>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2200      	movs	r2, #0
 8010e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	1ad2      	subs	r2, r2, r3
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e44:	4b0c      	ldr	r3, [pc, #48]	; (8010e78 <prvHeapInit+0xb4>)
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <prvHeapInit+0xb8>)
 8010e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	4a09      	ldr	r2, [pc, #36]	; (8010e80 <prvHeapInit+0xbc>)
 8010e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e5c:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <prvHeapInit+0xc0>)
 8010e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e62:	601a      	str	r2, [r3, #0]
}
 8010e64:	bf00      	nop
 8010e66:	3714      	adds	r7, #20
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr
 8010e70:	200040c8 	.word	0x200040c8
 8010e74:	200044c8 	.word	0x200044c8
 8010e78:	200044d0 	.word	0x200044d0
 8010e7c:	200044d8 	.word	0x200044d8
 8010e80:	200044d4 	.word	0x200044d4
 8010e84:	200044e4 	.word	0x200044e4

08010e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b085      	sub	sp, #20
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e90:	4b28      	ldr	r3, [pc, #160]	; (8010f34 <prvInsertBlockIntoFreeList+0xac>)
 8010e92:	60fb      	str	r3, [r7, #12]
 8010e94:	e002      	b.n	8010e9c <prvInsertBlockIntoFreeList+0x14>
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	60fb      	str	r3, [r7, #12]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d8f7      	bhi.n	8010e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	68ba      	ldr	r2, [r7, #8]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	687a      	ldr	r2, [r7, #4]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d108      	bne.n	8010eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	441a      	add	r2, r3
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	441a      	add	r2, r3
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d118      	bne.n	8010f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	4b15      	ldr	r3, [pc, #84]	; (8010f38 <prvInsertBlockIntoFreeList+0xb0>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d00d      	beq.n	8010f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	685a      	ldr	r2, [r3, #4]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	441a      	add	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	601a      	str	r2, [r3, #0]
 8010f04:	e008      	b.n	8010f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f06:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <prvInsertBlockIntoFreeList+0xb0>)
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	e003      	b.n	8010f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f18:	68fa      	ldr	r2, [r7, #12]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d002      	beq.n	8010f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f26:	bf00      	nop
 8010f28:	3714      	adds	r7, #20
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr
 8010f32:	bf00      	nop
 8010f34:	200044c8 	.word	0x200044c8
 8010f38:	200044d0 	.word	0x200044d0

08010f3c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010f40:	2200      	movs	r2, #0
 8010f42:	4912      	ldr	r1, [pc, #72]	; (8010f8c <MX_USB_Device_Init+0x50>)
 8010f44:	4812      	ldr	r0, [pc, #72]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f46:	f7fb f9d9 	bl	800c2fc <USBD_Init>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d001      	beq.n	8010f54 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010f50:	f7f2 f88c 	bl	800306c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010f54:	490f      	ldr	r1, [pc, #60]	; (8010f94 <MX_USB_Device_Init+0x58>)
 8010f56:	480e      	ldr	r0, [pc, #56]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f58:	f7fb fa00 	bl	800c35c <USBD_RegisterClass>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d001      	beq.n	8010f66 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010f62:	f7f2 f883 	bl	800306c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010f66:	490c      	ldr	r1, [pc, #48]	; (8010f98 <MX_USB_Device_Init+0x5c>)
 8010f68:	4809      	ldr	r0, [pc, #36]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f6a:	f7fb f921 	bl	800c1b0 <USBD_CDC_RegisterInterface>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010f74:	f7f2 f87a 	bl	800306c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010f78:	4805      	ldr	r0, [pc, #20]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f7a:	f7fb fa16 	bl	800c3aa <USBD_Start>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010f84:	f7f2 f872 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010f88:	bf00      	nop
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	20000134 	.word	0x20000134
 8010f90:	200044e8 	.word	0x200044e8
 8010f94:	20000018 	.word	0x20000018
 8010f98:	20000120 	.word	0x20000120

08010f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	4905      	ldr	r1, [pc, #20]	; (8010fb8 <CDC_Init_FS+0x1c>)
 8010fa4:	4805      	ldr	r0, [pc, #20]	; (8010fbc <CDC_Init_FS+0x20>)
 8010fa6:	f7fb f918 	bl	800c1da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010faa:	4905      	ldr	r1, [pc, #20]	; (8010fc0 <CDC_Init_FS+0x24>)
 8010fac:	4803      	ldr	r0, [pc, #12]	; (8010fbc <CDC_Init_FS+0x20>)
 8010fae:	f7fb f932 	bl	800c216 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	20004fb8 	.word	0x20004fb8
 8010fbc:	200044e8 	.word	0x200044e8
 8010fc0:	200047b8 	.word	0x200047b8

08010fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	4603      	mov	r3, r0
 8010fdc:	6039      	str	r1, [r7, #0]
 8010fde:	71fb      	strb	r3, [r7, #7]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010fe4:	79fb      	ldrb	r3, [r7, #7]
 8010fe6:	2b23      	cmp	r3, #35	; 0x23
 8010fe8:	d84a      	bhi.n	8011080 <CDC_Control_FS+0xac>
 8010fea:	a201      	add	r2, pc, #4	; (adr r2, 8010ff0 <CDC_Control_FS+0x1c>)
 8010fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff0:	08011081 	.word	0x08011081
 8010ff4:	08011081 	.word	0x08011081
 8010ff8:	08011081 	.word	0x08011081
 8010ffc:	08011081 	.word	0x08011081
 8011000:	08011081 	.word	0x08011081
 8011004:	08011081 	.word	0x08011081
 8011008:	08011081 	.word	0x08011081
 801100c:	08011081 	.word	0x08011081
 8011010:	08011081 	.word	0x08011081
 8011014:	08011081 	.word	0x08011081
 8011018:	08011081 	.word	0x08011081
 801101c:	08011081 	.word	0x08011081
 8011020:	08011081 	.word	0x08011081
 8011024:	08011081 	.word	0x08011081
 8011028:	08011081 	.word	0x08011081
 801102c:	08011081 	.word	0x08011081
 8011030:	08011081 	.word	0x08011081
 8011034:	08011081 	.word	0x08011081
 8011038:	08011081 	.word	0x08011081
 801103c:	08011081 	.word	0x08011081
 8011040:	08011081 	.word	0x08011081
 8011044:	08011081 	.word	0x08011081
 8011048:	08011081 	.word	0x08011081
 801104c:	08011081 	.word	0x08011081
 8011050:	08011081 	.word	0x08011081
 8011054:	08011081 	.word	0x08011081
 8011058:	08011081 	.word	0x08011081
 801105c:	08011081 	.word	0x08011081
 8011060:	08011081 	.word	0x08011081
 8011064:	08011081 	.word	0x08011081
 8011068:	08011081 	.word	0x08011081
 801106c:	08011081 	.word	0x08011081
 8011070:	08011081 	.word	0x08011081
 8011074:	08011081 	.word	0x08011081
 8011078:	08011081 	.word	0x08011081
 801107c:	08011081 	.word	0x08011081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011080:	bf00      	nop
  }

  return (USBD_OK);
 8011082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011084:	4618      	mov	r0, r3
 8011086:	370c      	adds	r7, #12
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801109a:	6879      	ldr	r1, [r7, #4]
 801109c:	4805      	ldr	r0, [pc, #20]	; (80110b4 <CDC_Receive_FS+0x24>)
 801109e:	f7fb f8ba 	bl	800c216 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80110a2:	4804      	ldr	r0, [pc, #16]	; (80110b4 <CDC_Receive_FS+0x24>)
 80110a4:	f7fb f900 	bl	800c2a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80110a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3708      	adds	r7, #8
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	200044e8 	.word	0x200044e8

080110b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	460b      	mov	r3, r1
 80110c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80110c8:	4b0d      	ldr	r3, [pc, #52]	; (8011100 <CDC_Transmit_FS+0x48>)
 80110ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80110da:	2301      	movs	r3, #1
 80110dc:	e00b      	b.n	80110f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80110de:	887b      	ldrh	r3, [r7, #2]
 80110e0:	461a      	mov	r2, r3
 80110e2:	6879      	ldr	r1, [r7, #4]
 80110e4:	4806      	ldr	r0, [pc, #24]	; (8011100 <CDC_Transmit_FS+0x48>)
 80110e6:	f7fb f878 	bl	800c1da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80110ea:	4805      	ldr	r0, [pc, #20]	; (8011100 <CDC_Transmit_FS+0x48>)
 80110ec:	f7fb f8ac 	bl	800c248 <USBD_CDC_TransmitPacket>
 80110f0:	4603      	mov	r3, r0
 80110f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80110f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	200044e8 	.word	0x200044e8

08011104 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011104:	b480      	push	{r7}
 8011106:	b087      	sub	sp, #28
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	4613      	mov	r3, r2
 8011110:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011112:	2300      	movs	r3, #0
 8011114:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801111a:	4618      	mov	r0, r3
 801111c:	371c      	adds	r7, #28
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
	...

08011128 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	4603      	mov	r3, r0
 8011130:	6039      	str	r1, [r7, #0]
 8011132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	2212      	movs	r2, #18
 8011138:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801113a:	4b03      	ldr	r3, [pc, #12]	; (8011148 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801113c:	4618      	mov	r0, r3
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr
 8011148:	20000154 	.word	0x20000154

0801114c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
 8011152:	4603      	mov	r3, r0
 8011154:	6039      	str	r1, [r7, #0]
 8011156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	2204      	movs	r2, #4
 801115c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801115e:	4b03      	ldr	r3, [pc, #12]	; (801116c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011160:	4618      	mov	r0, r3
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr
 801116c:	20000168 	.word	0x20000168

08011170 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	4603      	mov	r3, r0
 8011178:	6039      	str	r1, [r7, #0]
 801117a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801117c:	79fb      	ldrb	r3, [r7, #7]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d105      	bne.n	801118e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011182:	683a      	ldr	r2, [r7, #0]
 8011184:	4907      	ldr	r1, [pc, #28]	; (80111a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011186:	4808      	ldr	r0, [pc, #32]	; (80111a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011188:	f7fc f8f7 	bl	800d37a <USBD_GetString>
 801118c:	e004      	b.n	8011198 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801118e:	683a      	ldr	r2, [r7, #0]
 8011190:	4904      	ldr	r1, [pc, #16]	; (80111a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011192:	4805      	ldr	r0, [pc, #20]	; (80111a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011194:	f7fc f8f1 	bl	800d37a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011198:	4b02      	ldr	r3, [pc, #8]	; (80111a4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	200057b8 	.word	0x200057b8
 80111a8:	08015498 	.word	0x08015498

080111ac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	4603      	mov	r3, r0
 80111b4:	6039      	str	r1, [r7, #0]
 80111b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80111b8:	683a      	ldr	r2, [r7, #0]
 80111ba:	4904      	ldr	r1, [pc, #16]	; (80111cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80111bc:	4804      	ldr	r0, [pc, #16]	; (80111d0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80111be:	f7fc f8dc 	bl	800d37a <USBD_GetString>
  return USBD_StrDesc;
 80111c2:	4b02      	ldr	r3, [pc, #8]	; (80111cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3708      	adds	r7, #8
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	200057b8 	.word	0x200057b8
 80111d0:	080154b4 	.word	0x080154b4

080111d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	4603      	mov	r3, r0
 80111dc:	6039      	str	r1, [r7, #0]
 80111de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	221a      	movs	r2, #26
 80111e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80111e6:	f000 f843 	bl	8011270 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80111ea:	4b02      	ldr	r3, [pc, #8]	; (80111f4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	2000016c 	.word	0x2000016c

080111f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	4603      	mov	r3, r0
 8011200:	6039      	str	r1, [r7, #0]
 8011202:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011204:	79fb      	ldrb	r3, [r7, #7]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d105      	bne.n	8011216 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	4907      	ldr	r1, [pc, #28]	; (801122c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801120e:	4808      	ldr	r0, [pc, #32]	; (8011230 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011210:	f7fc f8b3 	bl	800d37a <USBD_GetString>
 8011214:	e004      	b.n	8011220 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011216:	683a      	ldr	r2, [r7, #0]
 8011218:	4904      	ldr	r1, [pc, #16]	; (801122c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801121a:	4805      	ldr	r0, [pc, #20]	; (8011230 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801121c:	f7fc f8ad 	bl	800d37a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011220:	4b02      	ldr	r3, [pc, #8]	; (801122c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011222:	4618      	mov	r0, r3
 8011224:	3708      	adds	r7, #8
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	200057b8 	.word	0x200057b8
 8011230:	080154c8 	.word	0x080154c8

08011234 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	4603      	mov	r3, r0
 801123c:	6039      	str	r1, [r7, #0]
 801123e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011240:	79fb      	ldrb	r3, [r7, #7]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d105      	bne.n	8011252 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011246:	683a      	ldr	r2, [r7, #0]
 8011248:	4907      	ldr	r1, [pc, #28]	; (8011268 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801124a:	4808      	ldr	r0, [pc, #32]	; (801126c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801124c:	f7fc f895 	bl	800d37a <USBD_GetString>
 8011250:	e004      	b.n	801125c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011252:	683a      	ldr	r2, [r7, #0]
 8011254:	4904      	ldr	r1, [pc, #16]	; (8011268 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011256:	4805      	ldr	r0, [pc, #20]	; (801126c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011258:	f7fc f88f 	bl	800d37a <USBD_GetString>
  }
  return USBD_StrDesc;
 801125c:	4b02      	ldr	r3, [pc, #8]	; (8011268 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801125e:	4618      	mov	r0, r3
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	200057b8 	.word	0x200057b8
 801126c:	080154d4 	.word	0x080154d4

08011270 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011276:	4b0f      	ldr	r3, [pc, #60]	; (80112b4 <Get_SerialNum+0x44>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801127c:	4b0e      	ldr	r3, [pc, #56]	; (80112b8 <Get_SerialNum+0x48>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011282:	4b0e      	ldr	r3, [pc, #56]	; (80112bc <Get_SerialNum+0x4c>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	4413      	add	r3, r2
 801128e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d009      	beq.n	80112aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011296:	2208      	movs	r2, #8
 8011298:	4909      	ldr	r1, [pc, #36]	; (80112c0 <Get_SerialNum+0x50>)
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f000 f814 	bl	80112c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80112a0:	2204      	movs	r2, #4
 80112a2:	4908      	ldr	r1, [pc, #32]	; (80112c4 <Get_SerialNum+0x54>)
 80112a4:	68b8      	ldr	r0, [r7, #8]
 80112a6:	f000 f80f 	bl	80112c8 <IntToUnicode>
  }
}
 80112aa:	bf00      	nop
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	1fff7590 	.word	0x1fff7590
 80112b8:	1fff7594 	.word	0x1fff7594
 80112bc:	1fff7598 	.word	0x1fff7598
 80112c0:	2000016e 	.word	0x2000016e
 80112c4:	2000017e 	.word	0x2000017e

080112c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b087      	sub	sp, #28
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	4613      	mov	r3, r2
 80112d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80112d6:	2300      	movs	r3, #0
 80112d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80112da:	2300      	movs	r3, #0
 80112dc:	75fb      	strb	r3, [r7, #23]
 80112de:	e027      	b.n	8011330 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	0f1b      	lsrs	r3, r3, #28
 80112e4:	2b09      	cmp	r3, #9
 80112e6:	d80b      	bhi.n	8011300 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	0f1b      	lsrs	r3, r3, #28
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	7dfb      	ldrb	r3, [r7, #23]
 80112f0:	005b      	lsls	r3, r3, #1
 80112f2:	4619      	mov	r1, r3
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	440b      	add	r3, r1
 80112f8:	3230      	adds	r2, #48	; 0x30
 80112fa:	b2d2      	uxtb	r2, r2
 80112fc:	701a      	strb	r2, [r3, #0]
 80112fe:	e00a      	b.n	8011316 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	0f1b      	lsrs	r3, r3, #28
 8011304:	b2da      	uxtb	r2, r3
 8011306:	7dfb      	ldrb	r3, [r7, #23]
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	4619      	mov	r1, r3
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	440b      	add	r3, r1
 8011310:	3237      	adds	r2, #55	; 0x37
 8011312:	b2d2      	uxtb	r2, r2
 8011314:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	011b      	lsls	r3, r3, #4
 801131a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801131c:	7dfb      	ldrb	r3, [r7, #23]
 801131e:	005b      	lsls	r3, r3, #1
 8011320:	3301      	adds	r3, #1
 8011322:	68ba      	ldr	r2, [r7, #8]
 8011324:	4413      	add	r3, r2
 8011326:	2200      	movs	r2, #0
 8011328:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801132a:	7dfb      	ldrb	r3, [r7, #23]
 801132c:	3301      	adds	r3, #1
 801132e:	75fb      	strb	r3, [r7, #23]
 8011330:	7dfa      	ldrb	r2, [r7, #23]
 8011332:	79fb      	ldrb	r3, [r7, #7]
 8011334:	429a      	cmp	r2, r3
 8011336:	d3d3      	bcc.n	80112e0 <IntToUnicode+0x18>
  }
}
 8011338:	bf00      	nop
 801133a:	bf00      	nop
 801133c:	371c      	adds	r7, #28
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
	...

08011348 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b098      	sub	sp, #96	; 0x60
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011350:	f107 030c 	add.w	r3, r7, #12
 8011354:	2254      	movs	r2, #84	; 0x54
 8011356:	2100      	movs	r1, #0
 8011358:	4618      	mov	r0, r3
 801135a:	f001 f898 	bl	801248e <memset>
  if(pcdHandle->Instance==USB)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	4a15      	ldr	r2, [pc, #84]	; (80113b8 <HAL_PCD_MspInit+0x70>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d122      	bne.n	80113ae <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801136c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801136e:	2300      	movs	r3, #0
 8011370:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011372:	f107 030c 	add.w	r3, r7, #12
 8011376:	4618      	mov	r0, r3
 8011378:	f7f5 ff72 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d001      	beq.n	8011386 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011382:	f7f1 fe73 	bl	800306c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011386:	4b0d      	ldr	r3, [pc, #52]	; (80113bc <HAL_PCD_MspInit+0x74>)
 8011388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801138a:	4a0c      	ldr	r2, [pc, #48]	; (80113bc <HAL_PCD_MspInit+0x74>)
 801138c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011390:	6593      	str	r3, [r2, #88]	; 0x58
 8011392:	4b0a      	ldr	r3, [pc, #40]	; (80113bc <HAL_PCD_MspInit+0x74>)
 8011394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801139a:	60bb      	str	r3, [r7, #8]
 801139c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801139e:	2200      	movs	r2, #0
 80113a0:	2105      	movs	r1, #5
 80113a2:	2014      	movs	r0, #20
 80113a4:	f7f2 fa54 	bl	8003850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80113a8:	2014      	movs	r0, #20
 80113aa:	f7f2 fa6b 	bl	8003884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80113ae:	bf00      	nop
 80113b0:	3760      	adds	r7, #96	; 0x60
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	40005c00 	.word	0x40005c00
 80113bc:	40021000 	.word	0x40021000

080113c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80113d4:	4619      	mov	r1, r3
 80113d6:	4610      	mov	r0, r2
 80113d8:	f7fb f832 	bl	800c440 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80113dc:	bf00      	nop
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	460b      	mov	r3, r1
 80113ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80113f6:	78fa      	ldrb	r2, [r7, #3]
 80113f8:	6879      	ldr	r1, [r7, #4]
 80113fa:	4613      	mov	r3, r2
 80113fc:	009b      	lsls	r3, r3, #2
 80113fe:	4413      	add	r3, r2
 8011400:	00db      	lsls	r3, r3, #3
 8011402:	440b      	add	r3, r1
 8011404:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	78fb      	ldrb	r3, [r7, #3]
 801140c:	4619      	mov	r1, r3
 801140e:	f7fb f86c 	bl	800c4ea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011412:	bf00      	nop
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b082      	sub	sp, #8
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	460b      	mov	r3, r1
 8011424:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801142c:	78fa      	ldrb	r2, [r7, #3]
 801142e:	6879      	ldr	r1, [r7, #4]
 8011430:	4613      	mov	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4413      	add	r3, r2
 8011436:	00db      	lsls	r3, r3, #3
 8011438:	440b      	add	r3, r1
 801143a:	3324      	adds	r3, #36	; 0x24
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	78fb      	ldrb	r3, [r7, #3]
 8011440:	4619      	mov	r1, r3
 8011442:	f7fb f8b5 	bl	800c5b0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011446:	bf00      	nop
 8011448:	3708      	adds	r7, #8
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}

0801144e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801144e:	b580      	push	{r7, lr}
 8011450:	b082      	sub	sp, #8
 8011452:	af00      	add	r7, sp, #0
 8011454:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801145c:	4618      	mov	r0, r3
 801145e:	f7fb f9c9 	bl	800c7f4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011462:	bf00      	nop
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b084      	sub	sp, #16
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011472:	2301      	movs	r3, #1
 8011474:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	795b      	ldrb	r3, [r3, #5]
 801147a:	2b02      	cmp	r3, #2
 801147c:	d001      	beq.n	8011482 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801147e:	f7f1 fdf5 	bl	800306c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011488:	7bfa      	ldrb	r2, [r7, #15]
 801148a:	4611      	mov	r1, r2
 801148c:	4618      	mov	r0, r3
 801148e:	f7fb f973 	bl	800c778 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011498:	4618      	mov	r0, r3
 801149a:	f7fb f91f 	bl	800c6dc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801149e:	bf00      	nop
 80114a0:	3710      	adds	r7, #16
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
	...

080114a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fb f96e 	bl	800c798 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	7a5b      	ldrb	r3, [r3, #9]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d005      	beq.n	80114d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80114c4:	4b04      	ldr	r3, [pc, #16]	; (80114d8 <HAL_PCD_SuspendCallback+0x30>)
 80114c6:	691b      	ldr	r3, [r3, #16]
 80114c8:	4a03      	ldr	r2, [pc, #12]	; (80114d8 <HAL_PCD_SuspendCallback+0x30>)
 80114ca:	f043 0306 	orr.w	r3, r3, #6
 80114ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80114d0:	bf00      	nop
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	e000ed00 	.word	0xe000ed00

080114dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	7a5b      	ldrb	r3, [r3, #9]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d007      	beq.n	80114fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80114ec:	4b08      	ldr	r3, [pc, #32]	; (8011510 <HAL_PCD_ResumeCallback+0x34>)
 80114ee:	691b      	ldr	r3, [r3, #16]
 80114f0:	4a07      	ldr	r2, [pc, #28]	; (8011510 <HAL_PCD_ResumeCallback+0x34>)
 80114f2:	f023 0306 	bic.w	r3, r3, #6
 80114f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80114f8:	f000 f9f8 	bl	80118ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011502:	4618      	mov	r0, r3
 8011504:	f7fb f95e 	bl	800c7c4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011508:	bf00      	nop
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	e000ed00 	.word	0xe000ed00

08011514 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801151c:	4a2b      	ldr	r2, [pc, #172]	; (80115cc <USBD_LL_Init+0xb8>)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	4a29      	ldr	r2, [pc, #164]	; (80115cc <USBD_LL_Init+0xb8>)
 8011528:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801152c:	4b27      	ldr	r3, [pc, #156]	; (80115cc <USBD_LL_Init+0xb8>)
 801152e:	4a28      	ldr	r2, [pc, #160]	; (80115d0 <USBD_LL_Init+0xbc>)
 8011530:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011532:	4b26      	ldr	r3, [pc, #152]	; (80115cc <USBD_LL_Init+0xb8>)
 8011534:	2208      	movs	r2, #8
 8011536:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011538:	4b24      	ldr	r3, [pc, #144]	; (80115cc <USBD_LL_Init+0xb8>)
 801153a:	2202      	movs	r2, #2
 801153c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801153e:	4b23      	ldr	r3, [pc, #140]	; (80115cc <USBD_LL_Init+0xb8>)
 8011540:	2202      	movs	r2, #2
 8011542:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011544:	4b21      	ldr	r3, [pc, #132]	; (80115cc <USBD_LL_Init+0xb8>)
 8011546:	2200      	movs	r2, #0
 8011548:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801154a:	4b20      	ldr	r3, [pc, #128]	; (80115cc <USBD_LL_Init+0xb8>)
 801154c:	2200      	movs	r2, #0
 801154e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011550:	4b1e      	ldr	r3, [pc, #120]	; (80115cc <USBD_LL_Init+0xb8>)
 8011552:	2200      	movs	r2, #0
 8011554:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011556:	4b1d      	ldr	r3, [pc, #116]	; (80115cc <USBD_LL_Init+0xb8>)
 8011558:	2200      	movs	r2, #0
 801155a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801155c:	481b      	ldr	r0, [pc, #108]	; (80115cc <USBD_LL_Init+0xb8>)
 801155e:	f7f3 fb3a 	bl	8004bd6 <HAL_PCD_Init>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d001      	beq.n	801156c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011568:	f7f1 fd80 	bl	800306c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011572:	2318      	movs	r3, #24
 8011574:	2200      	movs	r2, #0
 8011576:	2100      	movs	r1, #0
 8011578:	f7f4 fff4 	bl	8006564 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011582:	2358      	movs	r3, #88	; 0x58
 8011584:	2200      	movs	r2, #0
 8011586:	2180      	movs	r1, #128	; 0x80
 8011588:	f7f4 ffec 	bl	8006564 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011592:	23c0      	movs	r3, #192	; 0xc0
 8011594:	2200      	movs	r2, #0
 8011596:	2181      	movs	r1, #129	; 0x81
 8011598:	f7f4 ffe4 	bl	8006564 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80115a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80115a6:	2200      	movs	r2, #0
 80115a8:	2101      	movs	r1, #1
 80115aa:	f7f4 ffdb 	bl	8006564 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80115b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115b8:	2200      	movs	r2, #0
 80115ba:	2182      	movs	r1, #130	; 0x82
 80115bc:	f7f4 ffd2 	bl	8006564 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3708      	adds	r7, #8
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	200059b8 	.word	0x200059b8
 80115d0:	40005c00 	.word	0x40005c00

080115d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115dc:	2300      	movs	r3, #0
 80115de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115e0:	2300      	movs	r3, #0
 80115e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7f3 fbc1 	bl	8004d72 <HAL_PCD_Start>
 80115f0:	4603      	mov	r3, r0
 80115f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115f4:	7bfb      	ldrb	r3, [r7, #15]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f000 f97e 	bl	80118f8 <USBD_Get_USB_Status>
 80115fc:	4603      	mov	r3, r0
 80115fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011600:	7bbb      	ldrb	r3, [r7, #14]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801160a:	b580      	push	{r7, lr}
 801160c:	b084      	sub	sp, #16
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
 8011612:	4608      	mov	r0, r1
 8011614:	4611      	mov	r1, r2
 8011616:	461a      	mov	r2, r3
 8011618:	4603      	mov	r3, r0
 801161a:	70fb      	strb	r3, [r7, #3]
 801161c:	460b      	mov	r3, r1
 801161e:	70bb      	strb	r3, [r7, #2]
 8011620:	4613      	mov	r3, r2
 8011622:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011624:	2300      	movs	r3, #0
 8011626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011628:	2300      	movs	r3, #0
 801162a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011632:	78bb      	ldrb	r3, [r7, #2]
 8011634:	883a      	ldrh	r2, [r7, #0]
 8011636:	78f9      	ldrb	r1, [r7, #3]
 8011638:	f7f3 fd08 	bl	800504c <HAL_PCD_EP_Open>
 801163c:	4603      	mov	r3, r0
 801163e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011640:	7bfb      	ldrb	r3, [r7, #15]
 8011642:	4618      	mov	r0, r3
 8011644:	f000 f958 	bl	80118f8 <USBD_Get_USB_Status>
 8011648:	4603      	mov	r3, r0
 801164a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801164c:	7bbb      	ldrb	r3, [r7, #14]
}
 801164e:	4618      	mov	r0, r3
 8011650:	3710      	adds	r7, #16
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}

08011656 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011656:	b580      	push	{r7, lr}
 8011658:	b084      	sub	sp, #16
 801165a:	af00      	add	r7, sp, #0
 801165c:	6078      	str	r0, [r7, #4]
 801165e:	460b      	mov	r3, r1
 8011660:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011666:	2300      	movs	r3, #0
 8011668:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011670:	78fa      	ldrb	r2, [r7, #3]
 8011672:	4611      	mov	r1, r2
 8011674:	4618      	mov	r0, r3
 8011676:	f7f3 fd46 	bl	8005106 <HAL_PCD_EP_Close>
 801167a:	4603      	mov	r3, r0
 801167c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801167e:	7bfb      	ldrb	r3, [r7, #15]
 8011680:	4618      	mov	r0, r3
 8011682:	f000 f939 	bl	80118f8 <USBD_Get_USB_Status>
 8011686:	4603      	mov	r3, r0
 8011688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801168a:	7bbb      	ldrb	r3, [r7, #14]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3710      	adds	r7, #16
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	460b      	mov	r3, r1
 801169e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116a0:	2300      	movs	r3, #0
 80116a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116a4:	2300      	movs	r3, #0
 80116a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80116ae:	78fa      	ldrb	r2, [r7, #3]
 80116b0:	4611      	mov	r1, r2
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7f3 fdef 	bl	8005296 <HAL_PCD_EP_SetStall>
 80116b8:	4603      	mov	r3, r0
 80116ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116bc:	7bfb      	ldrb	r3, [r7, #15]
 80116be:	4618      	mov	r0, r3
 80116c0:	f000 f91a 	bl	80118f8 <USBD_Get_USB_Status>
 80116c4:	4603      	mov	r3, r0
 80116c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3710      	adds	r7, #16
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b084      	sub	sp, #16
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	460b      	mov	r3, r1
 80116dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116de:	2300      	movs	r3, #0
 80116e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116e2:	2300      	movs	r3, #0
 80116e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80116ec:	78fa      	ldrb	r2, [r7, #3]
 80116ee:	4611      	mov	r1, r2
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7f3 fe22 	bl	800533a <HAL_PCD_EP_ClrStall>
 80116f6:	4603      	mov	r3, r0
 80116f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116fa:	7bfb      	ldrb	r3, [r7, #15]
 80116fc:	4618      	mov	r0, r3
 80116fe:	f000 f8fb 	bl	80118f8 <USBD_Get_USB_Status>
 8011702:	4603      	mov	r3, r0
 8011704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011706:	7bbb      	ldrb	r3, [r7, #14]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3710      	adds	r7, #16
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	460b      	mov	r3, r1
 801171a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011722:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011728:	2b00      	cmp	r3, #0
 801172a:	da0b      	bge.n	8011744 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801172c:	78fb      	ldrb	r3, [r7, #3]
 801172e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011732:	68f9      	ldr	r1, [r7, #12]
 8011734:	4613      	mov	r3, r2
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	4413      	add	r3, r2
 801173a:	00db      	lsls	r3, r3, #3
 801173c:	440b      	add	r3, r1
 801173e:	3312      	adds	r3, #18
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	e00b      	b.n	801175c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011744:	78fb      	ldrb	r3, [r7, #3]
 8011746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801174a:	68f9      	ldr	r1, [r7, #12]
 801174c:	4613      	mov	r3, r2
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	4413      	add	r3, r2
 8011752:	00db      	lsls	r3, r3, #3
 8011754:	440b      	add	r3, r1
 8011756:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801175a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	460b      	mov	r3, r1
 8011772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011774:	2300      	movs	r3, #0
 8011776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011778:	2300      	movs	r3, #0
 801177a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011782:	78fa      	ldrb	r2, [r7, #3]
 8011784:	4611      	mov	r1, r2
 8011786:	4618      	mov	r0, r3
 8011788:	f7f3 fc3c 	bl	8005004 <HAL_PCD_SetAddress>
 801178c:	4603      	mov	r3, r0
 801178e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011790:	7bfb      	ldrb	r3, [r7, #15]
 8011792:	4618      	mov	r0, r3
 8011794:	f000 f8b0 	bl	80118f8 <USBD_Get_USB_Status>
 8011798:	4603      	mov	r3, r0
 801179a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801179c:	7bbb      	ldrb	r3, [r7, #14]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b086      	sub	sp, #24
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	60f8      	str	r0, [r7, #12]
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	603b      	str	r3, [r7, #0]
 80117b2:	460b      	mov	r3, r1
 80117b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117b6:	2300      	movs	r3, #0
 80117b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117ba:	2300      	movs	r3, #0
 80117bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80117c4:	7af9      	ldrb	r1, [r7, #11]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	f7f3 fd2d 	bl	8005228 <HAL_PCD_EP_Transmit>
 80117ce:	4603      	mov	r3, r0
 80117d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117d2:	7dfb      	ldrb	r3, [r7, #23]
 80117d4:	4618      	mov	r0, r3
 80117d6:	f000 f88f 	bl	80118f8 <USBD_Get_USB_Status>
 80117da:	4603      	mov	r3, r0
 80117dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80117de:	7dbb      	ldrb	r3, [r7, #22]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3718      	adds	r7, #24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b086      	sub	sp, #24
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	607a      	str	r2, [r7, #4]
 80117f2:	603b      	str	r3, [r7, #0]
 80117f4:	460b      	mov	r3, r1
 80117f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117f8:	2300      	movs	r3, #0
 80117fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117fc:	2300      	movs	r3, #0
 80117fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011806:	7af9      	ldrb	r1, [r7, #11]
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	f7f3 fcc3 	bl	8005196 <HAL_PCD_EP_Receive>
 8011810:	4603      	mov	r3, r0
 8011812:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011814:	7dfb      	ldrb	r3, [r7, #23]
 8011816:	4618      	mov	r0, r3
 8011818:	f000 f86e 	bl	80118f8 <USBD_Get_USB_Status>
 801181c:	4603      	mov	r3, r0
 801181e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011820:	7dbb      	ldrb	r3, [r7, #22]
}
 8011822:	4618      	mov	r0, r3
 8011824:	3718      	adds	r7, #24
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}

0801182a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801182a:	b580      	push	{r7, lr}
 801182c:	b082      	sub	sp, #8
 801182e:	af00      	add	r7, sp, #0
 8011830:	6078      	str	r0, [r7, #4]
 8011832:	460b      	mov	r3, r1
 8011834:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801183c:	78fa      	ldrb	r2, [r7, #3]
 801183e:	4611      	mov	r1, r2
 8011840:	4618      	mov	r0, r3
 8011842:	f7f3 fcd9 	bl	80051f8 <HAL_PCD_EP_GetRxCount>
 8011846:	4603      	mov	r3, r0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	460b      	mov	r3, r1
 801185a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801185c:	78fb      	ldrb	r3, [r7, #3]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d002      	beq.n	8011868 <HAL_PCDEx_LPM_Callback+0x18>
 8011862:	2b01      	cmp	r3, #1
 8011864:	d013      	beq.n	801188e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011866:	e023      	b.n	80118b0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	7a5b      	ldrb	r3, [r3, #9]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d007      	beq.n	8011880 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011870:	f000 f83c 	bl	80118ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011874:	4b10      	ldr	r3, [pc, #64]	; (80118b8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	4a0f      	ldr	r2, [pc, #60]	; (80118b8 <HAL_PCDEx_LPM_Callback+0x68>)
 801187a:	f023 0306 	bic.w	r3, r3, #6
 801187e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011886:	4618      	mov	r0, r3
 8011888:	f7fa ff9c 	bl	800c7c4 <USBD_LL_Resume>
    break;
 801188c:	e010      	b.n	80118b0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011894:	4618      	mov	r0, r3
 8011896:	f7fa ff7f 	bl	800c798 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	7a5b      	ldrb	r3, [r3, #9]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d005      	beq.n	80118ae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80118a2:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <HAL_PCDEx_LPM_Callback+0x68>)
 80118a4:	691b      	ldr	r3, [r3, #16]
 80118a6:	4a04      	ldr	r2, [pc, #16]	; (80118b8 <HAL_PCDEx_LPM_Callback+0x68>)
 80118a8:	f043 0306 	orr.w	r3, r3, #6
 80118ac:	6113      	str	r3, [r2, #16]
    break;
 80118ae:	bf00      	nop
}
 80118b0:	bf00      	nop
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	e000ed00 	.word	0xe000ed00

080118bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80118c4:	4b03      	ldr	r3, [pc, #12]	; (80118d4 <USBD_static_malloc+0x18>)
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	370c      	adds	r7, #12
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	20005c94 	.word	0x20005c94

080118d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]

}
 80118e0:	bf00      	nop
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80118f0:	f7f1 fb5f 	bl	8002fb2 <SystemClock_Config>
}
 80118f4:	bf00      	nop
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	4603      	mov	r3, r0
 8011900:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011906:	79fb      	ldrb	r3, [r7, #7]
 8011908:	2b03      	cmp	r3, #3
 801190a:	d817      	bhi.n	801193c <USBD_Get_USB_Status+0x44>
 801190c:	a201      	add	r2, pc, #4	; (adr r2, 8011914 <USBD_Get_USB_Status+0x1c>)
 801190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011912:	bf00      	nop
 8011914:	08011925 	.word	0x08011925
 8011918:	0801192b 	.word	0x0801192b
 801191c:	08011931 	.word	0x08011931
 8011920:	08011937 	.word	0x08011937
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011924:	2300      	movs	r3, #0
 8011926:	73fb      	strb	r3, [r7, #15]
    break;
 8011928:	e00b      	b.n	8011942 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801192a:	2303      	movs	r3, #3
 801192c:	73fb      	strb	r3, [r7, #15]
    break;
 801192e:	e008      	b.n	8011942 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011930:	2301      	movs	r3, #1
 8011932:	73fb      	strb	r3, [r7, #15]
    break;
 8011934:	e005      	b.n	8011942 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011936:	2303      	movs	r3, #3
 8011938:	73fb      	strb	r3, [r7, #15]
    break;
 801193a:	e002      	b.n	8011942 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801193c:	2303      	movs	r3, #3
 801193e:	73fb      	strb	r3, [r7, #15]
    break;
 8011940:	bf00      	nop
  }
  return usb_status;
 8011942:	7bfb      	ldrb	r3, [r7, #15]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3714      	adds	r7, #20
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <__cvt>:
 8011950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011954:	ec55 4b10 	vmov	r4, r5, d0
 8011958:	2d00      	cmp	r5, #0
 801195a:	460e      	mov	r6, r1
 801195c:	4619      	mov	r1, r3
 801195e:	462b      	mov	r3, r5
 8011960:	bfbb      	ittet	lt
 8011962:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011966:	461d      	movlt	r5, r3
 8011968:	2300      	movge	r3, #0
 801196a:	232d      	movlt	r3, #45	; 0x2d
 801196c:	700b      	strb	r3, [r1, #0]
 801196e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011970:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011974:	4691      	mov	r9, r2
 8011976:	f023 0820 	bic.w	r8, r3, #32
 801197a:	bfbc      	itt	lt
 801197c:	4622      	movlt	r2, r4
 801197e:	4614      	movlt	r4, r2
 8011980:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011984:	d005      	beq.n	8011992 <__cvt+0x42>
 8011986:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801198a:	d100      	bne.n	801198e <__cvt+0x3e>
 801198c:	3601      	adds	r6, #1
 801198e:	2102      	movs	r1, #2
 8011990:	e000      	b.n	8011994 <__cvt+0x44>
 8011992:	2103      	movs	r1, #3
 8011994:	ab03      	add	r3, sp, #12
 8011996:	9301      	str	r3, [sp, #4]
 8011998:	ab02      	add	r3, sp, #8
 801199a:	9300      	str	r3, [sp, #0]
 801199c:	ec45 4b10 	vmov	d0, r4, r5
 80119a0:	4653      	mov	r3, sl
 80119a2:	4632      	mov	r2, r6
 80119a4:	f000 fee0 	bl	8012768 <_dtoa_r>
 80119a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80119ac:	4607      	mov	r7, r0
 80119ae:	d102      	bne.n	80119b6 <__cvt+0x66>
 80119b0:	f019 0f01 	tst.w	r9, #1
 80119b4:	d022      	beq.n	80119fc <__cvt+0xac>
 80119b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80119ba:	eb07 0906 	add.w	r9, r7, r6
 80119be:	d110      	bne.n	80119e2 <__cvt+0x92>
 80119c0:	783b      	ldrb	r3, [r7, #0]
 80119c2:	2b30      	cmp	r3, #48	; 0x30
 80119c4:	d10a      	bne.n	80119dc <__cvt+0x8c>
 80119c6:	2200      	movs	r2, #0
 80119c8:	2300      	movs	r3, #0
 80119ca:	4620      	mov	r0, r4
 80119cc:	4629      	mov	r1, r5
 80119ce:	f7ef f8a3 	bl	8000b18 <__aeabi_dcmpeq>
 80119d2:	b918      	cbnz	r0, 80119dc <__cvt+0x8c>
 80119d4:	f1c6 0601 	rsb	r6, r6, #1
 80119d8:	f8ca 6000 	str.w	r6, [sl]
 80119dc:	f8da 3000 	ldr.w	r3, [sl]
 80119e0:	4499      	add	r9, r3
 80119e2:	2200      	movs	r2, #0
 80119e4:	2300      	movs	r3, #0
 80119e6:	4620      	mov	r0, r4
 80119e8:	4629      	mov	r1, r5
 80119ea:	f7ef f895 	bl	8000b18 <__aeabi_dcmpeq>
 80119ee:	b108      	cbz	r0, 80119f4 <__cvt+0xa4>
 80119f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80119f4:	2230      	movs	r2, #48	; 0x30
 80119f6:	9b03      	ldr	r3, [sp, #12]
 80119f8:	454b      	cmp	r3, r9
 80119fa:	d307      	bcc.n	8011a0c <__cvt+0xbc>
 80119fc:	9b03      	ldr	r3, [sp, #12]
 80119fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a00:	1bdb      	subs	r3, r3, r7
 8011a02:	4638      	mov	r0, r7
 8011a04:	6013      	str	r3, [r2, #0]
 8011a06:	b004      	add	sp, #16
 8011a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a0c:	1c59      	adds	r1, r3, #1
 8011a0e:	9103      	str	r1, [sp, #12]
 8011a10:	701a      	strb	r2, [r3, #0]
 8011a12:	e7f0      	b.n	80119f6 <__cvt+0xa6>

08011a14 <__exponent>:
 8011a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a16:	4603      	mov	r3, r0
 8011a18:	2900      	cmp	r1, #0
 8011a1a:	bfb8      	it	lt
 8011a1c:	4249      	neglt	r1, r1
 8011a1e:	f803 2b02 	strb.w	r2, [r3], #2
 8011a22:	bfb4      	ite	lt
 8011a24:	222d      	movlt	r2, #45	; 0x2d
 8011a26:	222b      	movge	r2, #43	; 0x2b
 8011a28:	2909      	cmp	r1, #9
 8011a2a:	7042      	strb	r2, [r0, #1]
 8011a2c:	dd2a      	ble.n	8011a84 <__exponent+0x70>
 8011a2e:	f10d 0207 	add.w	r2, sp, #7
 8011a32:	4617      	mov	r7, r2
 8011a34:	260a      	movs	r6, #10
 8011a36:	4694      	mov	ip, r2
 8011a38:	fb91 f5f6 	sdiv	r5, r1, r6
 8011a3c:	fb06 1415 	mls	r4, r6, r5, r1
 8011a40:	3430      	adds	r4, #48	; 0x30
 8011a42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011a46:	460c      	mov	r4, r1
 8011a48:	2c63      	cmp	r4, #99	; 0x63
 8011a4a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011a4e:	4629      	mov	r1, r5
 8011a50:	dcf1      	bgt.n	8011a36 <__exponent+0x22>
 8011a52:	3130      	adds	r1, #48	; 0x30
 8011a54:	f1ac 0402 	sub.w	r4, ip, #2
 8011a58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011a5c:	1c41      	adds	r1, r0, #1
 8011a5e:	4622      	mov	r2, r4
 8011a60:	42ba      	cmp	r2, r7
 8011a62:	d30a      	bcc.n	8011a7a <__exponent+0x66>
 8011a64:	f10d 0209 	add.w	r2, sp, #9
 8011a68:	eba2 020c 	sub.w	r2, r2, ip
 8011a6c:	42bc      	cmp	r4, r7
 8011a6e:	bf88      	it	hi
 8011a70:	2200      	movhi	r2, #0
 8011a72:	4413      	add	r3, r2
 8011a74:	1a18      	subs	r0, r3, r0
 8011a76:	b003      	add	sp, #12
 8011a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011a7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011a82:	e7ed      	b.n	8011a60 <__exponent+0x4c>
 8011a84:	2330      	movs	r3, #48	; 0x30
 8011a86:	3130      	adds	r1, #48	; 0x30
 8011a88:	7083      	strb	r3, [r0, #2]
 8011a8a:	70c1      	strb	r1, [r0, #3]
 8011a8c:	1d03      	adds	r3, r0, #4
 8011a8e:	e7f1      	b.n	8011a74 <__exponent+0x60>

08011a90 <_printf_float>:
 8011a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	ed2d 8b02 	vpush	{d8}
 8011a98:	b08d      	sub	sp, #52	; 0x34
 8011a9a:	460c      	mov	r4, r1
 8011a9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011aa0:	4616      	mov	r6, r2
 8011aa2:	461f      	mov	r7, r3
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	f000 fcfb 	bl	80124a0 <_localeconv_r>
 8011aaa:	f8d0 a000 	ldr.w	sl, [r0]
 8011aae:	4650      	mov	r0, sl
 8011ab0:	f7ee fc06 	bl	80002c0 <strlen>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ab8:	6823      	ldr	r3, [r4, #0]
 8011aba:	9305      	str	r3, [sp, #20]
 8011abc:	f8d8 3000 	ldr.w	r3, [r8]
 8011ac0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011ac4:	3307      	adds	r3, #7
 8011ac6:	f023 0307 	bic.w	r3, r3, #7
 8011aca:	f103 0208 	add.w	r2, r3, #8
 8011ace:	f8c8 2000 	str.w	r2, [r8]
 8011ad2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ad6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011ada:	9307      	str	r3, [sp, #28]
 8011adc:	f8cd 8018 	str.w	r8, [sp, #24]
 8011ae0:	ee08 0a10 	vmov	s16, r0
 8011ae4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011aec:	4b9e      	ldr	r3, [pc, #632]	; (8011d68 <_printf_float+0x2d8>)
 8011aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011af2:	f7ef f843 	bl	8000b7c <__aeabi_dcmpun>
 8011af6:	bb88      	cbnz	r0, 8011b5c <_printf_float+0xcc>
 8011af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011afc:	4b9a      	ldr	r3, [pc, #616]	; (8011d68 <_printf_float+0x2d8>)
 8011afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b02:	f7ef f81d 	bl	8000b40 <__aeabi_dcmple>
 8011b06:	bb48      	cbnz	r0, 8011b5c <_printf_float+0xcc>
 8011b08:	2200      	movs	r2, #0
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	4640      	mov	r0, r8
 8011b0e:	4649      	mov	r1, r9
 8011b10:	f7ef f80c 	bl	8000b2c <__aeabi_dcmplt>
 8011b14:	b110      	cbz	r0, 8011b1c <_printf_float+0x8c>
 8011b16:	232d      	movs	r3, #45	; 0x2d
 8011b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b1c:	4a93      	ldr	r2, [pc, #588]	; (8011d6c <_printf_float+0x2dc>)
 8011b1e:	4b94      	ldr	r3, [pc, #592]	; (8011d70 <_printf_float+0x2e0>)
 8011b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011b24:	bf94      	ite	ls
 8011b26:	4690      	movls	r8, r2
 8011b28:	4698      	movhi	r8, r3
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	6123      	str	r3, [r4, #16]
 8011b2e:	9b05      	ldr	r3, [sp, #20]
 8011b30:	f023 0304 	bic.w	r3, r3, #4
 8011b34:	6023      	str	r3, [r4, #0]
 8011b36:	f04f 0900 	mov.w	r9, #0
 8011b3a:	9700      	str	r7, [sp, #0]
 8011b3c:	4633      	mov	r3, r6
 8011b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011b40:	4621      	mov	r1, r4
 8011b42:	4628      	mov	r0, r5
 8011b44:	f000 f9da 	bl	8011efc <_printf_common>
 8011b48:	3001      	adds	r0, #1
 8011b4a:	f040 8090 	bne.w	8011c6e <_printf_float+0x1de>
 8011b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b52:	b00d      	add	sp, #52	; 0x34
 8011b54:	ecbd 8b02 	vpop	{d8}
 8011b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b5c:	4642      	mov	r2, r8
 8011b5e:	464b      	mov	r3, r9
 8011b60:	4640      	mov	r0, r8
 8011b62:	4649      	mov	r1, r9
 8011b64:	f7ef f80a 	bl	8000b7c <__aeabi_dcmpun>
 8011b68:	b140      	cbz	r0, 8011b7c <_printf_float+0xec>
 8011b6a:	464b      	mov	r3, r9
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	bfbc      	itt	lt
 8011b70:	232d      	movlt	r3, #45	; 0x2d
 8011b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011b76:	4a7f      	ldr	r2, [pc, #508]	; (8011d74 <_printf_float+0x2e4>)
 8011b78:	4b7f      	ldr	r3, [pc, #508]	; (8011d78 <_printf_float+0x2e8>)
 8011b7a:	e7d1      	b.n	8011b20 <_printf_float+0x90>
 8011b7c:	6863      	ldr	r3, [r4, #4]
 8011b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011b82:	9206      	str	r2, [sp, #24]
 8011b84:	1c5a      	adds	r2, r3, #1
 8011b86:	d13f      	bne.n	8011c08 <_printf_float+0x178>
 8011b88:	2306      	movs	r3, #6
 8011b8a:	6063      	str	r3, [r4, #4]
 8011b8c:	9b05      	ldr	r3, [sp, #20]
 8011b8e:	6861      	ldr	r1, [r4, #4]
 8011b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011b94:	2300      	movs	r3, #0
 8011b96:	9303      	str	r3, [sp, #12]
 8011b98:	ab0a      	add	r3, sp, #40	; 0x28
 8011b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011b9e:	ab09      	add	r3, sp, #36	; 0x24
 8011ba0:	ec49 8b10 	vmov	d0, r8, r9
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	6022      	str	r2, [r4, #0]
 8011ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011bac:	4628      	mov	r0, r5
 8011bae:	f7ff fecf 	bl	8011950 <__cvt>
 8011bb2:	9b06      	ldr	r3, [sp, #24]
 8011bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011bb6:	2b47      	cmp	r3, #71	; 0x47
 8011bb8:	4680      	mov	r8, r0
 8011bba:	d108      	bne.n	8011bce <_printf_float+0x13e>
 8011bbc:	1cc8      	adds	r0, r1, #3
 8011bbe:	db02      	blt.n	8011bc6 <_printf_float+0x136>
 8011bc0:	6863      	ldr	r3, [r4, #4]
 8011bc2:	4299      	cmp	r1, r3
 8011bc4:	dd41      	ble.n	8011c4a <_printf_float+0x1ba>
 8011bc6:	f1ab 0302 	sub.w	r3, fp, #2
 8011bca:	fa5f fb83 	uxtb.w	fp, r3
 8011bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011bd2:	d820      	bhi.n	8011c16 <_printf_float+0x186>
 8011bd4:	3901      	subs	r1, #1
 8011bd6:	465a      	mov	r2, fp
 8011bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8011bde:	f7ff ff19 	bl	8011a14 <__exponent>
 8011be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011be4:	1813      	adds	r3, r2, r0
 8011be6:	2a01      	cmp	r2, #1
 8011be8:	4681      	mov	r9, r0
 8011bea:	6123      	str	r3, [r4, #16]
 8011bec:	dc02      	bgt.n	8011bf4 <_printf_float+0x164>
 8011bee:	6822      	ldr	r2, [r4, #0]
 8011bf0:	07d2      	lsls	r2, r2, #31
 8011bf2:	d501      	bpl.n	8011bf8 <_printf_float+0x168>
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	6123      	str	r3, [r4, #16]
 8011bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d09c      	beq.n	8011b3a <_printf_float+0xaa>
 8011c00:	232d      	movs	r3, #45	; 0x2d
 8011c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c06:	e798      	b.n	8011b3a <_printf_float+0xaa>
 8011c08:	9a06      	ldr	r2, [sp, #24]
 8011c0a:	2a47      	cmp	r2, #71	; 0x47
 8011c0c:	d1be      	bne.n	8011b8c <_printf_float+0xfc>
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1bc      	bne.n	8011b8c <_printf_float+0xfc>
 8011c12:	2301      	movs	r3, #1
 8011c14:	e7b9      	b.n	8011b8a <_printf_float+0xfa>
 8011c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011c1a:	d118      	bne.n	8011c4e <_printf_float+0x1be>
 8011c1c:	2900      	cmp	r1, #0
 8011c1e:	6863      	ldr	r3, [r4, #4]
 8011c20:	dd0b      	ble.n	8011c3a <_printf_float+0x1aa>
 8011c22:	6121      	str	r1, [r4, #16]
 8011c24:	b913      	cbnz	r3, 8011c2c <_printf_float+0x19c>
 8011c26:	6822      	ldr	r2, [r4, #0]
 8011c28:	07d0      	lsls	r0, r2, #31
 8011c2a:	d502      	bpl.n	8011c32 <_printf_float+0x1a2>
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	440b      	add	r3, r1
 8011c30:	6123      	str	r3, [r4, #16]
 8011c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8011c34:	f04f 0900 	mov.w	r9, #0
 8011c38:	e7de      	b.n	8011bf8 <_printf_float+0x168>
 8011c3a:	b913      	cbnz	r3, 8011c42 <_printf_float+0x1b2>
 8011c3c:	6822      	ldr	r2, [r4, #0]
 8011c3e:	07d2      	lsls	r2, r2, #31
 8011c40:	d501      	bpl.n	8011c46 <_printf_float+0x1b6>
 8011c42:	3302      	adds	r3, #2
 8011c44:	e7f4      	b.n	8011c30 <_printf_float+0x1a0>
 8011c46:	2301      	movs	r3, #1
 8011c48:	e7f2      	b.n	8011c30 <_printf_float+0x1a0>
 8011c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c50:	4299      	cmp	r1, r3
 8011c52:	db05      	blt.n	8011c60 <_printf_float+0x1d0>
 8011c54:	6823      	ldr	r3, [r4, #0]
 8011c56:	6121      	str	r1, [r4, #16]
 8011c58:	07d8      	lsls	r0, r3, #31
 8011c5a:	d5ea      	bpl.n	8011c32 <_printf_float+0x1a2>
 8011c5c:	1c4b      	adds	r3, r1, #1
 8011c5e:	e7e7      	b.n	8011c30 <_printf_float+0x1a0>
 8011c60:	2900      	cmp	r1, #0
 8011c62:	bfd4      	ite	le
 8011c64:	f1c1 0202 	rsble	r2, r1, #2
 8011c68:	2201      	movgt	r2, #1
 8011c6a:	4413      	add	r3, r2
 8011c6c:	e7e0      	b.n	8011c30 <_printf_float+0x1a0>
 8011c6e:	6823      	ldr	r3, [r4, #0]
 8011c70:	055a      	lsls	r2, r3, #21
 8011c72:	d407      	bmi.n	8011c84 <_printf_float+0x1f4>
 8011c74:	6923      	ldr	r3, [r4, #16]
 8011c76:	4642      	mov	r2, r8
 8011c78:	4631      	mov	r1, r6
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	47b8      	blx	r7
 8011c7e:	3001      	adds	r0, #1
 8011c80:	d12c      	bne.n	8011cdc <_printf_float+0x24c>
 8011c82:	e764      	b.n	8011b4e <_printf_float+0xbe>
 8011c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c88:	f240 80e0 	bls.w	8011e4c <_printf_float+0x3bc>
 8011c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c90:	2200      	movs	r2, #0
 8011c92:	2300      	movs	r3, #0
 8011c94:	f7ee ff40 	bl	8000b18 <__aeabi_dcmpeq>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d034      	beq.n	8011d06 <_printf_float+0x276>
 8011c9c:	4a37      	ldr	r2, [pc, #220]	; (8011d7c <_printf_float+0x2ec>)
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	4631      	mov	r1, r6
 8011ca2:	4628      	mov	r0, r5
 8011ca4:	47b8      	blx	r7
 8011ca6:	3001      	adds	r0, #1
 8011ca8:	f43f af51 	beq.w	8011b4e <_printf_float+0xbe>
 8011cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	db02      	blt.n	8011cba <_printf_float+0x22a>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	07d8      	lsls	r0, r3, #31
 8011cb8:	d510      	bpl.n	8011cdc <_printf_float+0x24c>
 8011cba:	ee18 3a10 	vmov	r3, s16
 8011cbe:	4652      	mov	r2, sl
 8011cc0:	4631      	mov	r1, r6
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	47b8      	blx	r7
 8011cc6:	3001      	adds	r0, #1
 8011cc8:	f43f af41 	beq.w	8011b4e <_printf_float+0xbe>
 8011ccc:	f04f 0800 	mov.w	r8, #0
 8011cd0:	f104 091a 	add.w	r9, r4, #26
 8011cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cd6:	3b01      	subs	r3, #1
 8011cd8:	4543      	cmp	r3, r8
 8011cda:	dc09      	bgt.n	8011cf0 <_printf_float+0x260>
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	079b      	lsls	r3, r3, #30
 8011ce0:	f100 8107 	bmi.w	8011ef2 <_printf_float+0x462>
 8011ce4:	68e0      	ldr	r0, [r4, #12]
 8011ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ce8:	4298      	cmp	r0, r3
 8011cea:	bfb8      	it	lt
 8011cec:	4618      	movlt	r0, r3
 8011cee:	e730      	b.n	8011b52 <_printf_float+0xc2>
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	464a      	mov	r2, r9
 8011cf4:	4631      	mov	r1, r6
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	47b8      	blx	r7
 8011cfa:	3001      	adds	r0, #1
 8011cfc:	f43f af27 	beq.w	8011b4e <_printf_float+0xbe>
 8011d00:	f108 0801 	add.w	r8, r8, #1
 8011d04:	e7e6      	b.n	8011cd4 <_printf_float+0x244>
 8011d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	dc39      	bgt.n	8011d80 <_printf_float+0x2f0>
 8011d0c:	4a1b      	ldr	r2, [pc, #108]	; (8011d7c <_printf_float+0x2ec>)
 8011d0e:	2301      	movs	r3, #1
 8011d10:	4631      	mov	r1, r6
 8011d12:	4628      	mov	r0, r5
 8011d14:	47b8      	blx	r7
 8011d16:	3001      	adds	r0, #1
 8011d18:	f43f af19 	beq.w	8011b4e <_printf_float+0xbe>
 8011d1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011d20:	4313      	orrs	r3, r2
 8011d22:	d102      	bne.n	8011d2a <_printf_float+0x29a>
 8011d24:	6823      	ldr	r3, [r4, #0]
 8011d26:	07d9      	lsls	r1, r3, #31
 8011d28:	d5d8      	bpl.n	8011cdc <_printf_float+0x24c>
 8011d2a:	ee18 3a10 	vmov	r3, s16
 8011d2e:	4652      	mov	r2, sl
 8011d30:	4631      	mov	r1, r6
 8011d32:	4628      	mov	r0, r5
 8011d34:	47b8      	blx	r7
 8011d36:	3001      	adds	r0, #1
 8011d38:	f43f af09 	beq.w	8011b4e <_printf_float+0xbe>
 8011d3c:	f04f 0900 	mov.w	r9, #0
 8011d40:	f104 0a1a 	add.w	sl, r4, #26
 8011d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d46:	425b      	negs	r3, r3
 8011d48:	454b      	cmp	r3, r9
 8011d4a:	dc01      	bgt.n	8011d50 <_printf_float+0x2c0>
 8011d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d4e:	e792      	b.n	8011c76 <_printf_float+0x1e6>
 8011d50:	2301      	movs	r3, #1
 8011d52:	4652      	mov	r2, sl
 8011d54:	4631      	mov	r1, r6
 8011d56:	4628      	mov	r0, r5
 8011d58:	47b8      	blx	r7
 8011d5a:	3001      	adds	r0, #1
 8011d5c:	f43f aef7 	beq.w	8011b4e <_printf_float+0xbe>
 8011d60:	f109 0901 	add.w	r9, r9, #1
 8011d64:	e7ee      	b.n	8011d44 <_printf_float+0x2b4>
 8011d66:	bf00      	nop
 8011d68:	7fefffff 	.word	0x7fefffff
 8011d6c:	0801566c 	.word	0x0801566c
 8011d70:	08015670 	.word	0x08015670
 8011d74:	08015674 	.word	0x08015674
 8011d78:	08015678 	.word	0x08015678
 8011d7c:	0801567c 	.word	0x0801567c
 8011d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d84:	429a      	cmp	r2, r3
 8011d86:	bfa8      	it	ge
 8011d88:	461a      	movge	r2, r3
 8011d8a:	2a00      	cmp	r2, #0
 8011d8c:	4691      	mov	r9, r2
 8011d8e:	dc37      	bgt.n	8011e00 <_printf_float+0x370>
 8011d90:	f04f 0b00 	mov.w	fp, #0
 8011d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d98:	f104 021a 	add.w	r2, r4, #26
 8011d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d9e:	9305      	str	r3, [sp, #20]
 8011da0:	eba3 0309 	sub.w	r3, r3, r9
 8011da4:	455b      	cmp	r3, fp
 8011da6:	dc33      	bgt.n	8011e10 <_printf_float+0x380>
 8011da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dac:	429a      	cmp	r2, r3
 8011dae:	db3b      	blt.n	8011e28 <_printf_float+0x398>
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	07da      	lsls	r2, r3, #31
 8011db4:	d438      	bmi.n	8011e28 <_printf_float+0x398>
 8011db6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011dba:	eba2 0903 	sub.w	r9, r2, r3
 8011dbe:	9b05      	ldr	r3, [sp, #20]
 8011dc0:	1ad2      	subs	r2, r2, r3
 8011dc2:	4591      	cmp	r9, r2
 8011dc4:	bfa8      	it	ge
 8011dc6:	4691      	movge	r9, r2
 8011dc8:	f1b9 0f00 	cmp.w	r9, #0
 8011dcc:	dc35      	bgt.n	8011e3a <_printf_float+0x3aa>
 8011dce:	f04f 0800 	mov.w	r8, #0
 8011dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dd6:	f104 0a1a 	add.w	sl, r4, #26
 8011dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dde:	1a9b      	subs	r3, r3, r2
 8011de0:	eba3 0309 	sub.w	r3, r3, r9
 8011de4:	4543      	cmp	r3, r8
 8011de6:	f77f af79 	ble.w	8011cdc <_printf_float+0x24c>
 8011dea:	2301      	movs	r3, #1
 8011dec:	4652      	mov	r2, sl
 8011dee:	4631      	mov	r1, r6
 8011df0:	4628      	mov	r0, r5
 8011df2:	47b8      	blx	r7
 8011df4:	3001      	adds	r0, #1
 8011df6:	f43f aeaa 	beq.w	8011b4e <_printf_float+0xbe>
 8011dfa:	f108 0801 	add.w	r8, r8, #1
 8011dfe:	e7ec      	b.n	8011dda <_printf_float+0x34a>
 8011e00:	4613      	mov	r3, r2
 8011e02:	4631      	mov	r1, r6
 8011e04:	4642      	mov	r2, r8
 8011e06:	4628      	mov	r0, r5
 8011e08:	47b8      	blx	r7
 8011e0a:	3001      	adds	r0, #1
 8011e0c:	d1c0      	bne.n	8011d90 <_printf_float+0x300>
 8011e0e:	e69e      	b.n	8011b4e <_printf_float+0xbe>
 8011e10:	2301      	movs	r3, #1
 8011e12:	4631      	mov	r1, r6
 8011e14:	4628      	mov	r0, r5
 8011e16:	9205      	str	r2, [sp, #20]
 8011e18:	47b8      	blx	r7
 8011e1a:	3001      	adds	r0, #1
 8011e1c:	f43f ae97 	beq.w	8011b4e <_printf_float+0xbe>
 8011e20:	9a05      	ldr	r2, [sp, #20]
 8011e22:	f10b 0b01 	add.w	fp, fp, #1
 8011e26:	e7b9      	b.n	8011d9c <_printf_float+0x30c>
 8011e28:	ee18 3a10 	vmov	r3, s16
 8011e2c:	4652      	mov	r2, sl
 8011e2e:	4631      	mov	r1, r6
 8011e30:	4628      	mov	r0, r5
 8011e32:	47b8      	blx	r7
 8011e34:	3001      	adds	r0, #1
 8011e36:	d1be      	bne.n	8011db6 <_printf_float+0x326>
 8011e38:	e689      	b.n	8011b4e <_printf_float+0xbe>
 8011e3a:	9a05      	ldr	r2, [sp, #20]
 8011e3c:	464b      	mov	r3, r9
 8011e3e:	4442      	add	r2, r8
 8011e40:	4631      	mov	r1, r6
 8011e42:	4628      	mov	r0, r5
 8011e44:	47b8      	blx	r7
 8011e46:	3001      	adds	r0, #1
 8011e48:	d1c1      	bne.n	8011dce <_printf_float+0x33e>
 8011e4a:	e680      	b.n	8011b4e <_printf_float+0xbe>
 8011e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e4e:	2a01      	cmp	r2, #1
 8011e50:	dc01      	bgt.n	8011e56 <_printf_float+0x3c6>
 8011e52:	07db      	lsls	r3, r3, #31
 8011e54:	d53a      	bpl.n	8011ecc <_printf_float+0x43c>
 8011e56:	2301      	movs	r3, #1
 8011e58:	4642      	mov	r2, r8
 8011e5a:	4631      	mov	r1, r6
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	47b8      	blx	r7
 8011e60:	3001      	adds	r0, #1
 8011e62:	f43f ae74 	beq.w	8011b4e <_printf_float+0xbe>
 8011e66:	ee18 3a10 	vmov	r3, s16
 8011e6a:	4652      	mov	r2, sl
 8011e6c:	4631      	mov	r1, r6
 8011e6e:	4628      	mov	r0, r5
 8011e70:	47b8      	blx	r7
 8011e72:	3001      	adds	r0, #1
 8011e74:	f43f ae6b 	beq.w	8011b4e <_printf_float+0xbe>
 8011e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	2300      	movs	r3, #0
 8011e80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011e84:	f7ee fe48 	bl	8000b18 <__aeabi_dcmpeq>
 8011e88:	b9d8      	cbnz	r0, 8011ec2 <_printf_float+0x432>
 8011e8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011e8e:	f108 0201 	add.w	r2, r8, #1
 8011e92:	4631      	mov	r1, r6
 8011e94:	4628      	mov	r0, r5
 8011e96:	47b8      	blx	r7
 8011e98:	3001      	adds	r0, #1
 8011e9a:	d10e      	bne.n	8011eba <_printf_float+0x42a>
 8011e9c:	e657      	b.n	8011b4e <_printf_float+0xbe>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	4652      	mov	r2, sl
 8011ea2:	4631      	mov	r1, r6
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	47b8      	blx	r7
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	f43f ae50 	beq.w	8011b4e <_printf_float+0xbe>
 8011eae:	f108 0801 	add.w	r8, r8, #1
 8011eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eb4:	3b01      	subs	r3, #1
 8011eb6:	4543      	cmp	r3, r8
 8011eb8:	dcf1      	bgt.n	8011e9e <_printf_float+0x40e>
 8011eba:	464b      	mov	r3, r9
 8011ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011ec0:	e6da      	b.n	8011c78 <_printf_float+0x1e8>
 8011ec2:	f04f 0800 	mov.w	r8, #0
 8011ec6:	f104 0a1a 	add.w	sl, r4, #26
 8011eca:	e7f2      	b.n	8011eb2 <_printf_float+0x422>
 8011ecc:	2301      	movs	r3, #1
 8011ece:	4642      	mov	r2, r8
 8011ed0:	e7df      	b.n	8011e92 <_printf_float+0x402>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	464a      	mov	r2, r9
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	4628      	mov	r0, r5
 8011eda:	47b8      	blx	r7
 8011edc:	3001      	adds	r0, #1
 8011ede:	f43f ae36 	beq.w	8011b4e <_printf_float+0xbe>
 8011ee2:	f108 0801 	add.w	r8, r8, #1
 8011ee6:	68e3      	ldr	r3, [r4, #12]
 8011ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011eea:	1a5b      	subs	r3, r3, r1
 8011eec:	4543      	cmp	r3, r8
 8011eee:	dcf0      	bgt.n	8011ed2 <_printf_float+0x442>
 8011ef0:	e6f8      	b.n	8011ce4 <_printf_float+0x254>
 8011ef2:	f04f 0800 	mov.w	r8, #0
 8011ef6:	f104 0919 	add.w	r9, r4, #25
 8011efa:	e7f4      	b.n	8011ee6 <_printf_float+0x456>

08011efc <_printf_common>:
 8011efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f00:	4616      	mov	r6, r2
 8011f02:	4699      	mov	r9, r3
 8011f04:	688a      	ldr	r2, [r1, #8]
 8011f06:	690b      	ldr	r3, [r1, #16]
 8011f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	bfb8      	it	lt
 8011f10:	4613      	movlt	r3, r2
 8011f12:	6033      	str	r3, [r6, #0]
 8011f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f18:	4607      	mov	r7, r0
 8011f1a:	460c      	mov	r4, r1
 8011f1c:	b10a      	cbz	r2, 8011f22 <_printf_common+0x26>
 8011f1e:	3301      	adds	r3, #1
 8011f20:	6033      	str	r3, [r6, #0]
 8011f22:	6823      	ldr	r3, [r4, #0]
 8011f24:	0699      	lsls	r1, r3, #26
 8011f26:	bf42      	ittt	mi
 8011f28:	6833      	ldrmi	r3, [r6, #0]
 8011f2a:	3302      	addmi	r3, #2
 8011f2c:	6033      	strmi	r3, [r6, #0]
 8011f2e:	6825      	ldr	r5, [r4, #0]
 8011f30:	f015 0506 	ands.w	r5, r5, #6
 8011f34:	d106      	bne.n	8011f44 <_printf_common+0x48>
 8011f36:	f104 0a19 	add.w	sl, r4, #25
 8011f3a:	68e3      	ldr	r3, [r4, #12]
 8011f3c:	6832      	ldr	r2, [r6, #0]
 8011f3e:	1a9b      	subs	r3, r3, r2
 8011f40:	42ab      	cmp	r3, r5
 8011f42:	dc26      	bgt.n	8011f92 <_printf_common+0x96>
 8011f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f48:	1e13      	subs	r3, r2, #0
 8011f4a:	6822      	ldr	r2, [r4, #0]
 8011f4c:	bf18      	it	ne
 8011f4e:	2301      	movne	r3, #1
 8011f50:	0692      	lsls	r2, r2, #26
 8011f52:	d42b      	bmi.n	8011fac <_printf_common+0xb0>
 8011f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f58:	4649      	mov	r1, r9
 8011f5a:	4638      	mov	r0, r7
 8011f5c:	47c0      	blx	r8
 8011f5e:	3001      	adds	r0, #1
 8011f60:	d01e      	beq.n	8011fa0 <_printf_common+0xa4>
 8011f62:	6823      	ldr	r3, [r4, #0]
 8011f64:	6922      	ldr	r2, [r4, #16]
 8011f66:	f003 0306 	and.w	r3, r3, #6
 8011f6a:	2b04      	cmp	r3, #4
 8011f6c:	bf02      	ittt	eq
 8011f6e:	68e5      	ldreq	r5, [r4, #12]
 8011f70:	6833      	ldreq	r3, [r6, #0]
 8011f72:	1aed      	subeq	r5, r5, r3
 8011f74:	68a3      	ldr	r3, [r4, #8]
 8011f76:	bf0c      	ite	eq
 8011f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f7c:	2500      	movne	r5, #0
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	bfc4      	itt	gt
 8011f82:	1a9b      	subgt	r3, r3, r2
 8011f84:	18ed      	addgt	r5, r5, r3
 8011f86:	2600      	movs	r6, #0
 8011f88:	341a      	adds	r4, #26
 8011f8a:	42b5      	cmp	r5, r6
 8011f8c:	d11a      	bne.n	8011fc4 <_printf_common+0xc8>
 8011f8e:	2000      	movs	r0, #0
 8011f90:	e008      	b.n	8011fa4 <_printf_common+0xa8>
 8011f92:	2301      	movs	r3, #1
 8011f94:	4652      	mov	r2, sl
 8011f96:	4649      	mov	r1, r9
 8011f98:	4638      	mov	r0, r7
 8011f9a:	47c0      	blx	r8
 8011f9c:	3001      	adds	r0, #1
 8011f9e:	d103      	bne.n	8011fa8 <_printf_common+0xac>
 8011fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fa8:	3501      	adds	r5, #1
 8011faa:	e7c6      	b.n	8011f3a <_printf_common+0x3e>
 8011fac:	18e1      	adds	r1, r4, r3
 8011fae:	1c5a      	adds	r2, r3, #1
 8011fb0:	2030      	movs	r0, #48	; 0x30
 8011fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011fb6:	4422      	add	r2, r4
 8011fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011fc0:	3302      	adds	r3, #2
 8011fc2:	e7c7      	b.n	8011f54 <_printf_common+0x58>
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	4622      	mov	r2, r4
 8011fc8:	4649      	mov	r1, r9
 8011fca:	4638      	mov	r0, r7
 8011fcc:	47c0      	blx	r8
 8011fce:	3001      	adds	r0, #1
 8011fd0:	d0e6      	beq.n	8011fa0 <_printf_common+0xa4>
 8011fd2:	3601      	adds	r6, #1
 8011fd4:	e7d9      	b.n	8011f8a <_printf_common+0x8e>
	...

08011fd8 <_printf_i>:
 8011fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fdc:	7e0f      	ldrb	r7, [r1, #24]
 8011fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011fe0:	2f78      	cmp	r7, #120	; 0x78
 8011fe2:	4691      	mov	r9, r2
 8011fe4:	4680      	mov	r8, r0
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	469a      	mov	sl, r3
 8011fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011fee:	d807      	bhi.n	8012000 <_printf_i+0x28>
 8011ff0:	2f62      	cmp	r7, #98	; 0x62
 8011ff2:	d80a      	bhi.n	801200a <_printf_i+0x32>
 8011ff4:	2f00      	cmp	r7, #0
 8011ff6:	f000 80d4 	beq.w	80121a2 <_printf_i+0x1ca>
 8011ffa:	2f58      	cmp	r7, #88	; 0x58
 8011ffc:	f000 80c0 	beq.w	8012180 <_printf_i+0x1a8>
 8012000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012008:	e03a      	b.n	8012080 <_printf_i+0xa8>
 801200a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801200e:	2b15      	cmp	r3, #21
 8012010:	d8f6      	bhi.n	8012000 <_printf_i+0x28>
 8012012:	a101      	add	r1, pc, #4	; (adr r1, 8012018 <_printf_i+0x40>)
 8012014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012018:	08012071 	.word	0x08012071
 801201c:	08012085 	.word	0x08012085
 8012020:	08012001 	.word	0x08012001
 8012024:	08012001 	.word	0x08012001
 8012028:	08012001 	.word	0x08012001
 801202c:	08012001 	.word	0x08012001
 8012030:	08012085 	.word	0x08012085
 8012034:	08012001 	.word	0x08012001
 8012038:	08012001 	.word	0x08012001
 801203c:	08012001 	.word	0x08012001
 8012040:	08012001 	.word	0x08012001
 8012044:	08012189 	.word	0x08012189
 8012048:	080120b1 	.word	0x080120b1
 801204c:	08012143 	.word	0x08012143
 8012050:	08012001 	.word	0x08012001
 8012054:	08012001 	.word	0x08012001
 8012058:	080121ab 	.word	0x080121ab
 801205c:	08012001 	.word	0x08012001
 8012060:	080120b1 	.word	0x080120b1
 8012064:	08012001 	.word	0x08012001
 8012068:	08012001 	.word	0x08012001
 801206c:	0801214b 	.word	0x0801214b
 8012070:	682b      	ldr	r3, [r5, #0]
 8012072:	1d1a      	adds	r2, r3, #4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	602a      	str	r2, [r5, #0]
 8012078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801207c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012080:	2301      	movs	r3, #1
 8012082:	e09f      	b.n	80121c4 <_printf_i+0x1ec>
 8012084:	6820      	ldr	r0, [r4, #0]
 8012086:	682b      	ldr	r3, [r5, #0]
 8012088:	0607      	lsls	r7, r0, #24
 801208a:	f103 0104 	add.w	r1, r3, #4
 801208e:	6029      	str	r1, [r5, #0]
 8012090:	d501      	bpl.n	8012096 <_printf_i+0xbe>
 8012092:	681e      	ldr	r6, [r3, #0]
 8012094:	e003      	b.n	801209e <_printf_i+0xc6>
 8012096:	0646      	lsls	r6, r0, #25
 8012098:	d5fb      	bpl.n	8012092 <_printf_i+0xba>
 801209a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801209e:	2e00      	cmp	r6, #0
 80120a0:	da03      	bge.n	80120aa <_printf_i+0xd2>
 80120a2:	232d      	movs	r3, #45	; 0x2d
 80120a4:	4276      	negs	r6, r6
 80120a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120aa:	485a      	ldr	r0, [pc, #360]	; (8012214 <_printf_i+0x23c>)
 80120ac:	230a      	movs	r3, #10
 80120ae:	e012      	b.n	80120d6 <_printf_i+0xfe>
 80120b0:	682b      	ldr	r3, [r5, #0]
 80120b2:	6820      	ldr	r0, [r4, #0]
 80120b4:	1d19      	adds	r1, r3, #4
 80120b6:	6029      	str	r1, [r5, #0]
 80120b8:	0605      	lsls	r5, r0, #24
 80120ba:	d501      	bpl.n	80120c0 <_printf_i+0xe8>
 80120bc:	681e      	ldr	r6, [r3, #0]
 80120be:	e002      	b.n	80120c6 <_printf_i+0xee>
 80120c0:	0641      	lsls	r1, r0, #25
 80120c2:	d5fb      	bpl.n	80120bc <_printf_i+0xe4>
 80120c4:	881e      	ldrh	r6, [r3, #0]
 80120c6:	4853      	ldr	r0, [pc, #332]	; (8012214 <_printf_i+0x23c>)
 80120c8:	2f6f      	cmp	r7, #111	; 0x6f
 80120ca:	bf0c      	ite	eq
 80120cc:	2308      	moveq	r3, #8
 80120ce:	230a      	movne	r3, #10
 80120d0:	2100      	movs	r1, #0
 80120d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120d6:	6865      	ldr	r5, [r4, #4]
 80120d8:	60a5      	str	r5, [r4, #8]
 80120da:	2d00      	cmp	r5, #0
 80120dc:	bfa2      	ittt	ge
 80120de:	6821      	ldrge	r1, [r4, #0]
 80120e0:	f021 0104 	bicge.w	r1, r1, #4
 80120e4:	6021      	strge	r1, [r4, #0]
 80120e6:	b90e      	cbnz	r6, 80120ec <_printf_i+0x114>
 80120e8:	2d00      	cmp	r5, #0
 80120ea:	d04b      	beq.n	8012184 <_printf_i+0x1ac>
 80120ec:	4615      	mov	r5, r2
 80120ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80120f2:	fb03 6711 	mls	r7, r3, r1, r6
 80120f6:	5dc7      	ldrb	r7, [r0, r7]
 80120f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80120fc:	4637      	mov	r7, r6
 80120fe:	42bb      	cmp	r3, r7
 8012100:	460e      	mov	r6, r1
 8012102:	d9f4      	bls.n	80120ee <_printf_i+0x116>
 8012104:	2b08      	cmp	r3, #8
 8012106:	d10b      	bne.n	8012120 <_printf_i+0x148>
 8012108:	6823      	ldr	r3, [r4, #0]
 801210a:	07de      	lsls	r6, r3, #31
 801210c:	d508      	bpl.n	8012120 <_printf_i+0x148>
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	6861      	ldr	r1, [r4, #4]
 8012112:	4299      	cmp	r1, r3
 8012114:	bfde      	ittt	le
 8012116:	2330      	movle	r3, #48	; 0x30
 8012118:	f805 3c01 	strble.w	r3, [r5, #-1]
 801211c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012120:	1b52      	subs	r2, r2, r5
 8012122:	6122      	str	r2, [r4, #16]
 8012124:	f8cd a000 	str.w	sl, [sp]
 8012128:	464b      	mov	r3, r9
 801212a:	aa03      	add	r2, sp, #12
 801212c:	4621      	mov	r1, r4
 801212e:	4640      	mov	r0, r8
 8012130:	f7ff fee4 	bl	8011efc <_printf_common>
 8012134:	3001      	adds	r0, #1
 8012136:	d14a      	bne.n	80121ce <_printf_i+0x1f6>
 8012138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801213c:	b004      	add	sp, #16
 801213e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012142:	6823      	ldr	r3, [r4, #0]
 8012144:	f043 0320 	orr.w	r3, r3, #32
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	4833      	ldr	r0, [pc, #204]	; (8012218 <_printf_i+0x240>)
 801214c:	2778      	movs	r7, #120	; 0x78
 801214e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012152:	6823      	ldr	r3, [r4, #0]
 8012154:	6829      	ldr	r1, [r5, #0]
 8012156:	061f      	lsls	r7, r3, #24
 8012158:	f851 6b04 	ldr.w	r6, [r1], #4
 801215c:	d402      	bmi.n	8012164 <_printf_i+0x18c>
 801215e:	065f      	lsls	r7, r3, #25
 8012160:	bf48      	it	mi
 8012162:	b2b6      	uxthmi	r6, r6
 8012164:	07df      	lsls	r7, r3, #31
 8012166:	bf48      	it	mi
 8012168:	f043 0320 	orrmi.w	r3, r3, #32
 801216c:	6029      	str	r1, [r5, #0]
 801216e:	bf48      	it	mi
 8012170:	6023      	strmi	r3, [r4, #0]
 8012172:	b91e      	cbnz	r6, 801217c <_printf_i+0x1a4>
 8012174:	6823      	ldr	r3, [r4, #0]
 8012176:	f023 0320 	bic.w	r3, r3, #32
 801217a:	6023      	str	r3, [r4, #0]
 801217c:	2310      	movs	r3, #16
 801217e:	e7a7      	b.n	80120d0 <_printf_i+0xf8>
 8012180:	4824      	ldr	r0, [pc, #144]	; (8012214 <_printf_i+0x23c>)
 8012182:	e7e4      	b.n	801214e <_printf_i+0x176>
 8012184:	4615      	mov	r5, r2
 8012186:	e7bd      	b.n	8012104 <_printf_i+0x12c>
 8012188:	682b      	ldr	r3, [r5, #0]
 801218a:	6826      	ldr	r6, [r4, #0]
 801218c:	6961      	ldr	r1, [r4, #20]
 801218e:	1d18      	adds	r0, r3, #4
 8012190:	6028      	str	r0, [r5, #0]
 8012192:	0635      	lsls	r5, r6, #24
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	d501      	bpl.n	801219c <_printf_i+0x1c4>
 8012198:	6019      	str	r1, [r3, #0]
 801219a:	e002      	b.n	80121a2 <_printf_i+0x1ca>
 801219c:	0670      	lsls	r0, r6, #25
 801219e:	d5fb      	bpl.n	8012198 <_printf_i+0x1c0>
 80121a0:	8019      	strh	r1, [r3, #0]
 80121a2:	2300      	movs	r3, #0
 80121a4:	6123      	str	r3, [r4, #16]
 80121a6:	4615      	mov	r5, r2
 80121a8:	e7bc      	b.n	8012124 <_printf_i+0x14c>
 80121aa:	682b      	ldr	r3, [r5, #0]
 80121ac:	1d1a      	adds	r2, r3, #4
 80121ae:	602a      	str	r2, [r5, #0]
 80121b0:	681d      	ldr	r5, [r3, #0]
 80121b2:	6862      	ldr	r2, [r4, #4]
 80121b4:	2100      	movs	r1, #0
 80121b6:	4628      	mov	r0, r5
 80121b8:	f7ee f832 	bl	8000220 <memchr>
 80121bc:	b108      	cbz	r0, 80121c2 <_printf_i+0x1ea>
 80121be:	1b40      	subs	r0, r0, r5
 80121c0:	6060      	str	r0, [r4, #4]
 80121c2:	6863      	ldr	r3, [r4, #4]
 80121c4:	6123      	str	r3, [r4, #16]
 80121c6:	2300      	movs	r3, #0
 80121c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121cc:	e7aa      	b.n	8012124 <_printf_i+0x14c>
 80121ce:	6923      	ldr	r3, [r4, #16]
 80121d0:	462a      	mov	r2, r5
 80121d2:	4649      	mov	r1, r9
 80121d4:	4640      	mov	r0, r8
 80121d6:	47d0      	blx	sl
 80121d8:	3001      	adds	r0, #1
 80121da:	d0ad      	beq.n	8012138 <_printf_i+0x160>
 80121dc:	6823      	ldr	r3, [r4, #0]
 80121de:	079b      	lsls	r3, r3, #30
 80121e0:	d413      	bmi.n	801220a <_printf_i+0x232>
 80121e2:	68e0      	ldr	r0, [r4, #12]
 80121e4:	9b03      	ldr	r3, [sp, #12]
 80121e6:	4298      	cmp	r0, r3
 80121e8:	bfb8      	it	lt
 80121ea:	4618      	movlt	r0, r3
 80121ec:	e7a6      	b.n	801213c <_printf_i+0x164>
 80121ee:	2301      	movs	r3, #1
 80121f0:	4632      	mov	r2, r6
 80121f2:	4649      	mov	r1, r9
 80121f4:	4640      	mov	r0, r8
 80121f6:	47d0      	blx	sl
 80121f8:	3001      	adds	r0, #1
 80121fa:	d09d      	beq.n	8012138 <_printf_i+0x160>
 80121fc:	3501      	adds	r5, #1
 80121fe:	68e3      	ldr	r3, [r4, #12]
 8012200:	9903      	ldr	r1, [sp, #12]
 8012202:	1a5b      	subs	r3, r3, r1
 8012204:	42ab      	cmp	r3, r5
 8012206:	dcf2      	bgt.n	80121ee <_printf_i+0x216>
 8012208:	e7eb      	b.n	80121e2 <_printf_i+0x20a>
 801220a:	2500      	movs	r5, #0
 801220c:	f104 0619 	add.w	r6, r4, #25
 8012210:	e7f5      	b.n	80121fe <_printf_i+0x226>
 8012212:	bf00      	nop
 8012214:	0801567e 	.word	0x0801567e
 8012218:	0801568f 	.word	0x0801568f

0801221c <std>:
 801221c:	2300      	movs	r3, #0
 801221e:	b510      	push	{r4, lr}
 8012220:	4604      	mov	r4, r0
 8012222:	e9c0 3300 	strd	r3, r3, [r0]
 8012226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801222a:	6083      	str	r3, [r0, #8]
 801222c:	8181      	strh	r1, [r0, #12]
 801222e:	6643      	str	r3, [r0, #100]	; 0x64
 8012230:	81c2      	strh	r2, [r0, #14]
 8012232:	6183      	str	r3, [r0, #24]
 8012234:	4619      	mov	r1, r3
 8012236:	2208      	movs	r2, #8
 8012238:	305c      	adds	r0, #92	; 0x5c
 801223a:	f000 f928 	bl	801248e <memset>
 801223e:	4b0d      	ldr	r3, [pc, #52]	; (8012274 <std+0x58>)
 8012240:	6263      	str	r3, [r4, #36]	; 0x24
 8012242:	4b0d      	ldr	r3, [pc, #52]	; (8012278 <std+0x5c>)
 8012244:	62a3      	str	r3, [r4, #40]	; 0x28
 8012246:	4b0d      	ldr	r3, [pc, #52]	; (801227c <std+0x60>)
 8012248:	62e3      	str	r3, [r4, #44]	; 0x2c
 801224a:	4b0d      	ldr	r3, [pc, #52]	; (8012280 <std+0x64>)
 801224c:	6323      	str	r3, [r4, #48]	; 0x30
 801224e:	4b0d      	ldr	r3, [pc, #52]	; (8012284 <std+0x68>)
 8012250:	6224      	str	r4, [r4, #32]
 8012252:	429c      	cmp	r4, r3
 8012254:	d006      	beq.n	8012264 <std+0x48>
 8012256:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801225a:	4294      	cmp	r4, r2
 801225c:	d002      	beq.n	8012264 <std+0x48>
 801225e:	33d0      	adds	r3, #208	; 0xd0
 8012260:	429c      	cmp	r4, r3
 8012262:	d105      	bne.n	8012270 <std+0x54>
 8012264:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801226c:	f000 b9e2 	b.w	8012634 <__retarget_lock_init_recursive>
 8012270:	bd10      	pop	{r4, pc}
 8012272:	bf00      	nop
 8012274:	08012409 	.word	0x08012409
 8012278:	0801242b 	.word	0x0801242b
 801227c:	08012463 	.word	0x08012463
 8012280:	08012487 	.word	0x08012487
 8012284:	20005eb4 	.word	0x20005eb4

08012288 <stdio_exit_handler>:
 8012288:	4a02      	ldr	r2, [pc, #8]	; (8012294 <stdio_exit_handler+0xc>)
 801228a:	4903      	ldr	r1, [pc, #12]	; (8012298 <stdio_exit_handler+0x10>)
 801228c:	4803      	ldr	r0, [pc, #12]	; (801229c <stdio_exit_handler+0x14>)
 801228e:	f000 b869 	b.w	8012364 <_fwalk_sglue>
 8012292:	bf00      	nop
 8012294:	20000188 	.word	0x20000188
 8012298:	08014001 	.word	0x08014001
 801229c:	20000194 	.word	0x20000194

080122a0 <cleanup_stdio>:
 80122a0:	6841      	ldr	r1, [r0, #4]
 80122a2:	4b0c      	ldr	r3, [pc, #48]	; (80122d4 <cleanup_stdio+0x34>)
 80122a4:	4299      	cmp	r1, r3
 80122a6:	b510      	push	{r4, lr}
 80122a8:	4604      	mov	r4, r0
 80122aa:	d001      	beq.n	80122b0 <cleanup_stdio+0x10>
 80122ac:	f001 fea8 	bl	8014000 <_fflush_r>
 80122b0:	68a1      	ldr	r1, [r4, #8]
 80122b2:	4b09      	ldr	r3, [pc, #36]	; (80122d8 <cleanup_stdio+0x38>)
 80122b4:	4299      	cmp	r1, r3
 80122b6:	d002      	beq.n	80122be <cleanup_stdio+0x1e>
 80122b8:	4620      	mov	r0, r4
 80122ba:	f001 fea1 	bl	8014000 <_fflush_r>
 80122be:	68e1      	ldr	r1, [r4, #12]
 80122c0:	4b06      	ldr	r3, [pc, #24]	; (80122dc <cleanup_stdio+0x3c>)
 80122c2:	4299      	cmp	r1, r3
 80122c4:	d004      	beq.n	80122d0 <cleanup_stdio+0x30>
 80122c6:	4620      	mov	r0, r4
 80122c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122cc:	f001 be98 	b.w	8014000 <_fflush_r>
 80122d0:	bd10      	pop	{r4, pc}
 80122d2:	bf00      	nop
 80122d4:	20005eb4 	.word	0x20005eb4
 80122d8:	20005f1c 	.word	0x20005f1c
 80122dc:	20005f84 	.word	0x20005f84

080122e0 <global_stdio_init.part.0>:
 80122e0:	b510      	push	{r4, lr}
 80122e2:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <global_stdio_init.part.0+0x30>)
 80122e4:	4c0b      	ldr	r4, [pc, #44]	; (8012314 <global_stdio_init.part.0+0x34>)
 80122e6:	4a0c      	ldr	r2, [pc, #48]	; (8012318 <global_stdio_init.part.0+0x38>)
 80122e8:	601a      	str	r2, [r3, #0]
 80122ea:	4620      	mov	r0, r4
 80122ec:	2200      	movs	r2, #0
 80122ee:	2104      	movs	r1, #4
 80122f0:	f7ff ff94 	bl	801221c <std>
 80122f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80122f8:	2201      	movs	r2, #1
 80122fa:	2109      	movs	r1, #9
 80122fc:	f7ff ff8e 	bl	801221c <std>
 8012300:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012304:	2202      	movs	r2, #2
 8012306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801230a:	2112      	movs	r1, #18
 801230c:	f7ff bf86 	b.w	801221c <std>
 8012310:	20005fec 	.word	0x20005fec
 8012314:	20005eb4 	.word	0x20005eb4
 8012318:	08012289 	.word	0x08012289

0801231c <__sfp_lock_acquire>:
 801231c:	4801      	ldr	r0, [pc, #4]	; (8012324 <__sfp_lock_acquire+0x8>)
 801231e:	f000 b98a 	b.w	8012636 <__retarget_lock_acquire_recursive>
 8012322:	bf00      	nop
 8012324:	20005ff5 	.word	0x20005ff5

08012328 <__sfp_lock_release>:
 8012328:	4801      	ldr	r0, [pc, #4]	; (8012330 <__sfp_lock_release+0x8>)
 801232a:	f000 b985 	b.w	8012638 <__retarget_lock_release_recursive>
 801232e:	bf00      	nop
 8012330:	20005ff5 	.word	0x20005ff5

08012334 <__sinit>:
 8012334:	b510      	push	{r4, lr}
 8012336:	4604      	mov	r4, r0
 8012338:	f7ff fff0 	bl	801231c <__sfp_lock_acquire>
 801233c:	6a23      	ldr	r3, [r4, #32]
 801233e:	b11b      	cbz	r3, 8012348 <__sinit+0x14>
 8012340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012344:	f7ff bff0 	b.w	8012328 <__sfp_lock_release>
 8012348:	4b04      	ldr	r3, [pc, #16]	; (801235c <__sinit+0x28>)
 801234a:	6223      	str	r3, [r4, #32]
 801234c:	4b04      	ldr	r3, [pc, #16]	; (8012360 <__sinit+0x2c>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d1f5      	bne.n	8012340 <__sinit+0xc>
 8012354:	f7ff ffc4 	bl	80122e0 <global_stdio_init.part.0>
 8012358:	e7f2      	b.n	8012340 <__sinit+0xc>
 801235a:	bf00      	nop
 801235c:	080122a1 	.word	0x080122a1
 8012360:	20005fec 	.word	0x20005fec

08012364 <_fwalk_sglue>:
 8012364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012368:	4607      	mov	r7, r0
 801236a:	4688      	mov	r8, r1
 801236c:	4614      	mov	r4, r2
 801236e:	2600      	movs	r6, #0
 8012370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012374:	f1b9 0901 	subs.w	r9, r9, #1
 8012378:	d505      	bpl.n	8012386 <_fwalk_sglue+0x22>
 801237a:	6824      	ldr	r4, [r4, #0]
 801237c:	2c00      	cmp	r4, #0
 801237e:	d1f7      	bne.n	8012370 <_fwalk_sglue+0xc>
 8012380:	4630      	mov	r0, r6
 8012382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012386:	89ab      	ldrh	r3, [r5, #12]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d907      	bls.n	801239c <_fwalk_sglue+0x38>
 801238c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012390:	3301      	adds	r3, #1
 8012392:	d003      	beq.n	801239c <_fwalk_sglue+0x38>
 8012394:	4629      	mov	r1, r5
 8012396:	4638      	mov	r0, r7
 8012398:	47c0      	blx	r8
 801239a:	4306      	orrs	r6, r0
 801239c:	3568      	adds	r5, #104	; 0x68
 801239e:	e7e9      	b.n	8012374 <_fwalk_sglue+0x10>

080123a0 <sniprintf>:
 80123a0:	b40c      	push	{r2, r3}
 80123a2:	b530      	push	{r4, r5, lr}
 80123a4:	4b17      	ldr	r3, [pc, #92]	; (8012404 <sniprintf+0x64>)
 80123a6:	1e0c      	subs	r4, r1, #0
 80123a8:	681d      	ldr	r5, [r3, #0]
 80123aa:	b09d      	sub	sp, #116	; 0x74
 80123ac:	da08      	bge.n	80123c0 <sniprintf+0x20>
 80123ae:	238b      	movs	r3, #139	; 0x8b
 80123b0:	602b      	str	r3, [r5, #0]
 80123b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123b6:	b01d      	add	sp, #116	; 0x74
 80123b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123bc:	b002      	add	sp, #8
 80123be:	4770      	bx	lr
 80123c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80123c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80123c8:	bf14      	ite	ne
 80123ca:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80123ce:	4623      	moveq	r3, r4
 80123d0:	9304      	str	r3, [sp, #16]
 80123d2:	9307      	str	r3, [sp, #28]
 80123d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123d8:	9002      	str	r0, [sp, #8]
 80123da:	9006      	str	r0, [sp, #24]
 80123dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80123e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80123e2:	ab21      	add	r3, sp, #132	; 0x84
 80123e4:	a902      	add	r1, sp, #8
 80123e6:	4628      	mov	r0, r5
 80123e8:	9301      	str	r3, [sp, #4]
 80123ea:	f001 fc85 	bl	8013cf8 <_svfiprintf_r>
 80123ee:	1c43      	adds	r3, r0, #1
 80123f0:	bfbc      	itt	lt
 80123f2:	238b      	movlt	r3, #139	; 0x8b
 80123f4:	602b      	strlt	r3, [r5, #0]
 80123f6:	2c00      	cmp	r4, #0
 80123f8:	d0dd      	beq.n	80123b6 <sniprintf+0x16>
 80123fa:	9b02      	ldr	r3, [sp, #8]
 80123fc:	2200      	movs	r2, #0
 80123fe:	701a      	strb	r2, [r3, #0]
 8012400:	e7d9      	b.n	80123b6 <sniprintf+0x16>
 8012402:	bf00      	nop
 8012404:	200001e0 	.word	0x200001e0

08012408 <__sread>:
 8012408:	b510      	push	{r4, lr}
 801240a:	460c      	mov	r4, r1
 801240c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012410:	f000 f8c2 	bl	8012598 <_read_r>
 8012414:	2800      	cmp	r0, #0
 8012416:	bfab      	itete	ge
 8012418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801241a:	89a3      	ldrhlt	r3, [r4, #12]
 801241c:	181b      	addge	r3, r3, r0
 801241e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012422:	bfac      	ite	ge
 8012424:	6563      	strge	r3, [r4, #84]	; 0x54
 8012426:	81a3      	strhlt	r3, [r4, #12]
 8012428:	bd10      	pop	{r4, pc}

0801242a <__swrite>:
 801242a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801242e:	461f      	mov	r7, r3
 8012430:	898b      	ldrh	r3, [r1, #12]
 8012432:	05db      	lsls	r3, r3, #23
 8012434:	4605      	mov	r5, r0
 8012436:	460c      	mov	r4, r1
 8012438:	4616      	mov	r6, r2
 801243a:	d505      	bpl.n	8012448 <__swrite+0x1e>
 801243c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012440:	2302      	movs	r3, #2
 8012442:	2200      	movs	r2, #0
 8012444:	f000 f896 	bl	8012574 <_lseek_r>
 8012448:	89a3      	ldrh	r3, [r4, #12]
 801244a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801244e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012452:	81a3      	strh	r3, [r4, #12]
 8012454:	4632      	mov	r2, r6
 8012456:	463b      	mov	r3, r7
 8012458:	4628      	mov	r0, r5
 801245a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801245e:	f000 b8ad 	b.w	80125bc <_write_r>

08012462 <__sseek>:
 8012462:	b510      	push	{r4, lr}
 8012464:	460c      	mov	r4, r1
 8012466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801246a:	f000 f883 	bl	8012574 <_lseek_r>
 801246e:	1c43      	adds	r3, r0, #1
 8012470:	89a3      	ldrh	r3, [r4, #12]
 8012472:	bf15      	itete	ne
 8012474:	6560      	strne	r0, [r4, #84]	; 0x54
 8012476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801247a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801247e:	81a3      	strheq	r3, [r4, #12]
 8012480:	bf18      	it	ne
 8012482:	81a3      	strhne	r3, [r4, #12]
 8012484:	bd10      	pop	{r4, pc}

08012486 <__sclose>:
 8012486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801248a:	f000 b80d 	b.w	80124a8 <_close_r>

0801248e <memset>:
 801248e:	4402      	add	r2, r0
 8012490:	4603      	mov	r3, r0
 8012492:	4293      	cmp	r3, r2
 8012494:	d100      	bne.n	8012498 <memset+0xa>
 8012496:	4770      	bx	lr
 8012498:	f803 1b01 	strb.w	r1, [r3], #1
 801249c:	e7f9      	b.n	8012492 <memset+0x4>
	...

080124a0 <_localeconv_r>:
 80124a0:	4800      	ldr	r0, [pc, #0]	; (80124a4 <_localeconv_r+0x4>)
 80124a2:	4770      	bx	lr
 80124a4:	200002d4 	.word	0x200002d4

080124a8 <_close_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	4d06      	ldr	r5, [pc, #24]	; (80124c4 <_close_r+0x1c>)
 80124ac:	2300      	movs	r3, #0
 80124ae:	4604      	mov	r4, r0
 80124b0:	4608      	mov	r0, r1
 80124b2:	602b      	str	r3, [r5, #0]
 80124b4:	f7f0 ff93 	bl	80033de <_close>
 80124b8:	1c43      	adds	r3, r0, #1
 80124ba:	d102      	bne.n	80124c2 <_close_r+0x1a>
 80124bc:	682b      	ldr	r3, [r5, #0]
 80124be:	b103      	cbz	r3, 80124c2 <_close_r+0x1a>
 80124c0:	6023      	str	r3, [r4, #0]
 80124c2:	bd38      	pop	{r3, r4, r5, pc}
 80124c4:	20005ff0 	.word	0x20005ff0

080124c8 <_reclaim_reent>:
 80124c8:	4b29      	ldr	r3, [pc, #164]	; (8012570 <_reclaim_reent+0xa8>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4283      	cmp	r3, r0
 80124ce:	b570      	push	{r4, r5, r6, lr}
 80124d0:	4604      	mov	r4, r0
 80124d2:	d04b      	beq.n	801256c <_reclaim_reent+0xa4>
 80124d4:	69c3      	ldr	r3, [r0, #28]
 80124d6:	b143      	cbz	r3, 80124ea <_reclaim_reent+0x22>
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d144      	bne.n	8012568 <_reclaim_reent+0xa0>
 80124de:	69e3      	ldr	r3, [r4, #28]
 80124e0:	6819      	ldr	r1, [r3, #0]
 80124e2:	b111      	cbz	r1, 80124ea <_reclaim_reent+0x22>
 80124e4:	4620      	mov	r0, r4
 80124e6:	f000 ff31 	bl	801334c <_free_r>
 80124ea:	6961      	ldr	r1, [r4, #20]
 80124ec:	b111      	cbz	r1, 80124f4 <_reclaim_reent+0x2c>
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 ff2c 	bl	801334c <_free_r>
 80124f4:	69e1      	ldr	r1, [r4, #28]
 80124f6:	b111      	cbz	r1, 80124fe <_reclaim_reent+0x36>
 80124f8:	4620      	mov	r0, r4
 80124fa:	f000 ff27 	bl	801334c <_free_r>
 80124fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012500:	b111      	cbz	r1, 8012508 <_reclaim_reent+0x40>
 8012502:	4620      	mov	r0, r4
 8012504:	f000 ff22 	bl	801334c <_free_r>
 8012508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801250a:	b111      	cbz	r1, 8012512 <_reclaim_reent+0x4a>
 801250c:	4620      	mov	r0, r4
 801250e:	f000 ff1d 	bl	801334c <_free_r>
 8012512:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012514:	b111      	cbz	r1, 801251c <_reclaim_reent+0x54>
 8012516:	4620      	mov	r0, r4
 8012518:	f000 ff18 	bl	801334c <_free_r>
 801251c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801251e:	b111      	cbz	r1, 8012526 <_reclaim_reent+0x5e>
 8012520:	4620      	mov	r0, r4
 8012522:	f000 ff13 	bl	801334c <_free_r>
 8012526:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012528:	b111      	cbz	r1, 8012530 <_reclaim_reent+0x68>
 801252a:	4620      	mov	r0, r4
 801252c:	f000 ff0e 	bl	801334c <_free_r>
 8012530:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012532:	b111      	cbz	r1, 801253a <_reclaim_reent+0x72>
 8012534:	4620      	mov	r0, r4
 8012536:	f000 ff09 	bl	801334c <_free_r>
 801253a:	6a23      	ldr	r3, [r4, #32]
 801253c:	b1b3      	cbz	r3, 801256c <_reclaim_reent+0xa4>
 801253e:	4620      	mov	r0, r4
 8012540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012544:	4718      	bx	r3
 8012546:	5949      	ldr	r1, [r1, r5]
 8012548:	b941      	cbnz	r1, 801255c <_reclaim_reent+0x94>
 801254a:	3504      	adds	r5, #4
 801254c:	69e3      	ldr	r3, [r4, #28]
 801254e:	2d80      	cmp	r5, #128	; 0x80
 8012550:	68d9      	ldr	r1, [r3, #12]
 8012552:	d1f8      	bne.n	8012546 <_reclaim_reent+0x7e>
 8012554:	4620      	mov	r0, r4
 8012556:	f000 fef9 	bl	801334c <_free_r>
 801255a:	e7c0      	b.n	80124de <_reclaim_reent+0x16>
 801255c:	680e      	ldr	r6, [r1, #0]
 801255e:	4620      	mov	r0, r4
 8012560:	f000 fef4 	bl	801334c <_free_r>
 8012564:	4631      	mov	r1, r6
 8012566:	e7ef      	b.n	8012548 <_reclaim_reent+0x80>
 8012568:	2500      	movs	r5, #0
 801256a:	e7ef      	b.n	801254c <_reclaim_reent+0x84>
 801256c:	bd70      	pop	{r4, r5, r6, pc}
 801256e:	bf00      	nop
 8012570:	200001e0 	.word	0x200001e0

08012574 <_lseek_r>:
 8012574:	b538      	push	{r3, r4, r5, lr}
 8012576:	4d07      	ldr	r5, [pc, #28]	; (8012594 <_lseek_r+0x20>)
 8012578:	4604      	mov	r4, r0
 801257a:	4608      	mov	r0, r1
 801257c:	4611      	mov	r1, r2
 801257e:	2200      	movs	r2, #0
 8012580:	602a      	str	r2, [r5, #0]
 8012582:	461a      	mov	r2, r3
 8012584:	f7f0 ff52 	bl	800342c <_lseek>
 8012588:	1c43      	adds	r3, r0, #1
 801258a:	d102      	bne.n	8012592 <_lseek_r+0x1e>
 801258c:	682b      	ldr	r3, [r5, #0]
 801258e:	b103      	cbz	r3, 8012592 <_lseek_r+0x1e>
 8012590:	6023      	str	r3, [r4, #0]
 8012592:	bd38      	pop	{r3, r4, r5, pc}
 8012594:	20005ff0 	.word	0x20005ff0

08012598 <_read_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4d07      	ldr	r5, [pc, #28]	; (80125b8 <_read_r+0x20>)
 801259c:	4604      	mov	r4, r0
 801259e:	4608      	mov	r0, r1
 80125a0:	4611      	mov	r1, r2
 80125a2:	2200      	movs	r2, #0
 80125a4:	602a      	str	r2, [r5, #0]
 80125a6:	461a      	mov	r2, r3
 80125a8:	f7f0 fee0 	bl	800336c <_read>
 80125ac:	1c43      	adds	r3, r0, #1
 80125ae:	d102      	bne.n	80125b6 <_read_r+0x1e>
 80125b0:	682b      	ldr	r3, [r5, #0]
 80125b2:	b103      	cbz	r3, 80125b6 <_read_r+0x1e>
 80125b4:	6023      	str	r3, [r4, #0]
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	20005ff0 	.word	0x20005ff0

080125bc <_write_r>:
 80125bc:	b538      	push	{r3, r4, r5, lr}
 80125be:	4d07      	ldr	r5, [pc, #28]	; (80125dc <_write_r+0x20>)
 80125c0:	4604      	mov	r4, r0
 80125c2:	4608      	mov	r0, r1
 80125c4:	4611      	mov	r1, r2
 80125c6:	2200      	movs	r2, #0
 80125c8:	602a      	str	r2, [r5, #0]
 80125ca:	461a      	mov	r2, r3
 80125cc:	f7f0 feeb 	bl	80033a6 <_write>
 80125d0:	1c43      	adds	r3, r0, #1
 80125d2:	d102      	bne.n	80125da <_write_r+0x1e>
 80125d4:	682b      	ldr	r3, [r5, #0]
 80125d6:	b103      	cbz	r3, 80125da <_write_r+0x1e>
 80125d8:	6023      	str	r3, [r4, #0]
 80125da:	bd38      	pop	{r3, r4, r5, pc}
 80125dc:	20005ff0 	.word	0x20005ff0

080125e0 <__errno>:
 80125e0:	4b01      	ldr	r3, [pc, #4]	; (80125e8 <__errno+0x8>)
 80125e2:	6818      	ldr	r0, [r3, #0]
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop
 80125e8:	200001e0 	.word	0x200001e0

080125ec <__libc_init_array>:
 80125ec:	b570      	push	{r4, r5, r6, lr}
 80125ee:	4d0d      	ldr	r5, [pc, #52]	; (8012624 <__libc_init_array+0x38>)
 80125f0:	4c0d      	ldr	r4, [pc, #52]	; (8012628 <__libc_init_array+0x3c>)
 80125f2:	1b64      	subs	r4, r4, r5
 80125f4:	10a4      	asrs	r4, r4, #2
 80125f6:	2600      	movs	r6, #0
 80125f8:	42a6      	cmp	r6, r4
 80125fa:	d109      	bne.n	8012610 <__libc_init_array+0x24>
 80125fc:	4d0b      	ldr	r5, [pc, #44]	; (801262c <__libc_init_array+0x40>)
 80125fe:	4c0c      	ldr	r4, [pc, #48]	; (8012630 <__libc_init_array+0x44>)
 8012600:	f002 fc56 	bl	8014eb0 <_init>
 8012604:	1b64      	subs	r4, r4, r5
 8012606:	10a4      	asrs	r4, r4, #2
 8012608:	2600      	movs	r6, #0
 801260a:	42a6      	cmp	r6, r4
 801260c:	d105      	bne.n	801261a <__libc_init_array+0x2e>
 801260e:	bd70      	pop	{r4, r5, r6, pc}
 8012610:	f855 3b04 	ldr.w	r3, [r5], #4
 8012614:	4798      	blx	r3
 8012616:	3601      	adds	r6, #1
 8012618:	e7ee      	b.n	80125f8 <__libc_init_array+0xc>
 801261a:	f855 3b04 	ldr.w	r3, [r5], #4
 801261e:	4798      	blx	r3
 8012620:	3601      	adds	r6, #1
 8012622:	e7f2      	b.n	801260a <__libc_init_array+0x1e>
 8012624:	080159fc 	.word	0x080159fc
 8012628:	080159fc 	.word	0x080159fc
 801262c:	080159fc 	.word	0x080159fc
 8012630:	08015a00 	.word	0x08015a00

08012634 <__retarget_lock_init_recursive>:
 8012634:	4770      	bx	lr

08012636 <__retarget_lock_acquire_recursive>:
 8012636:	4770      	bx	lr

08012638 <__retarget_lock_release_recursive>:
 8012638:	4770      	bx	lr

0801263a <memcpy>:
 801263a:	440a      	add	r2, r1
 801263c:	4291      	cmp	r1, r2
 801263e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012642:	d100      	bne.n	8012646 <memcpy+0xc>
 8012644:	4770      	bx	lr
 8012646:	b510      	push	{r4, lr}
 8012648:	f811 4b01 	ldrb.w	r4, [r1], #1
 801264c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012650:	4291      	cmp	r1, r2
 8012652:	d1f9      	bne.n	8012648 <memcpy+0xe>
 8012654:	bd10      	pop	{r4, pc}

08012656 <quorem>:
 8012656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265a:	6903      	ldr	r3, [r0, #16]
 801265c:	690c      	ldr	r4, [r1, #16]
 801265e:	42a3      	cmp	r3, r4
 8012660:	4607      	mov	r7, r0
 8012662:	db7e      	blt.n	8012762 <quorem+0x10c>
 8012664:	3c01      	subs	r4, #1
 8012666:	f101 0814 	add.w	r8, r1, #20
 801266a:	f100 0514 	add.w	r5, r0, #20
 801266e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801267c:	3301      	adds	r3, #1
 801267e:	429a      	cmp	r2, r3
 8012680:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012684:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012688:	fbb2 f6f3 	udiv	r6, r2, r3
 801268c:	d331      	bcc.n	80126f2 <quorem+0x9c>
 801268e:	f04f 0e00 	mov.w	lr, #0
 8012692:	4640      	mov	r0, r8
 8012694:	46ac      	mov	ip, r5
 8012696:	46f2      	mov	sl, lr
 8012698:	f850 2b04 	ldr.w	r2, [r0], #4
 801269c:	b293      	uxth	r3, r2
 801269e:	fb06 e303 	mla	r3, r6, r3, lr
 80126a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80126a6:	0c1a      	lsrs	r2, r3, #16
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	ebaa 0303 	sub.w	r3, sl, r3
 80126ae:	f8dc a000 	ldr.w	sl, [ip]
 80126b2:	fa13 f38a 	uxtah	r3, r3, sl
 80126b6:	fb06 220e 	mla	r2, r6, lr, r2
 80126ba:	9300      	str	r3, [sp, #0]
 80126bc:	9b00      	ldr	r3, [sp, #0]
 80126be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80126c2:	b292      	uxth	r2, r2
 80126c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80126c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80126d0:	4581      	cmp	r9, r0
 80126d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126d6:	f84c 3b04 	str.w	r3, [ip], #4
 80126da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80126de:	d2db      	bcs.n	8012698 <quorem+0x42>
 80126e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80126e4:	b92b      	cbnz	r3, 80126f2 <quorem+0x9c>
 80126e6:	9b01      	ldr	r3, [sp, #4]
 80126e8:	3b04      	subs	r3, #4
 80126ea:	429d      	cmp	r5, r3
 80126ec:	461a      	mov	r2, r3
 80126ee:	d32c      	bcc.n	801274a <quorem+0xf4>
 80126f0:	613c      	str	r4, [r7, #16]
 80126f2:	4638      	mov	r0, r7
 80126f4:	f001 f9a6 	bl	8013a44 <__mcmp>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	db22      	blt.n	8012742 <quorem+0xec>
 80126fc:	3601      	adds	r6, #1
 80126fe:	4629      	mov	r1, r5
 8012700:	2000      	movs	r0, #0
 8012702:	f858 2b04 	ldr.w	r2, [r8], #4
 8012706:	f8d1 c000 	ldr.w	ip, [r1]
 801270a:	b293      	uxth	r3, r2
 801270c:	1ac3      	subs	r3, r0, r3
 801270e:	0c12      	lsrs	r2, r2, #16
 8012710:	fa13 f38c 	uxtah	r3, r3, ip
 8012714:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801271c:	b29b      	uxth	r3, r3
 801271e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012722:	45c1      	cmp	r9, r8
 8012724:	f841 3b04 	str.w	r3, [r1], #4
 8012728:	ea4f 4022 	mov.w	r0, r2, asr #16
 801272c:	d2e9      	bcs.n	8012702 <quorem+0xac>
 801272e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012736:	b922      	cbnz	r2, 8012742 <quorem+0xec>
 8012738:	3b04      	subs	r3, #4
 801273a:	429d      	cmp	r5, r3
 801273c:	461a      	mov	r2, r3
 801273e:	d30a      	bcc.n	8012756 <quorem+0x100>
 8012740:	613c      	str	r4, [r7, #16]
 8012742:	4630      	mov	r0, r6
 8012744:	b003      	add	sp, #12
 8012746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801274a:	6812      	ldr	r2, [r2, #0]
 801274c:	3b04      	subs	r3, #4
 801274e:	2a00      	cmp	r2, #0
 8012750:	d1ce      	bne.n	80126f0 <quorem+0x9a>
 8012752:	3c01      	subs	r4, #1
 8012754:	e7c9      	b.n	80126ea <quorem+0x94>
 8012756:	6812      	ldr	r2, [r2, #0]
 8012758:	3b04      	subs	r3, #4
 801275a:	2a00      	cmp	r2, #0
 801275c:	d1f0      	bne.n	8012740 <quorem+0xea>
 801275e:	3c01      	subs	r4, #1
 8012760:	e7eb      	b.n	801273a <quorem+0xe4>
 8012762:	2000      	movs	r0, #0
 8012764:	e7ee      	b.n	8012744 <quorem+0xee>
	...

08012768 <_dtoa_r>:
 8012768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801276c:	ed2d 8b04 	vpush	{d8-d9}
 8012770:	69c5      	ldr	r5, [r0, #28]
 8012772:	b093      	sub	sp, #76	; 0x4c
 8012774:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012778:	ec57 6b10 	vmov	r6, r7, d0
 801277c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012780:	9107      	str	r1, [sp, #28]
 8012782:	4604      	mov	r4, r0
 8012784:	920a      	str	r2, [sp, #40]	; 0x28
 8012786:	930d      	str	r3, [sp, #52]	; 0x34
 8012788:	b975      	cbnz	r5, 80127a8 <_dtoa_r+0x40>
 801278a:	2010      	movs	r0, #16
 801278c:	f000 fe2a 	bl	80133e4 <malloc>
 8012790:	4602      	mov	r2, r0
 8012792:	61e0      	str	r0, [r4, #28]
 8012794:	b920      	cbnz	r0, 80127a0 <_dtoa_r+0x38>
 8012796:	4bae      	ldr	r3, [pc, #696]	; (8012a50 <_dtoa_r+0x2e8>)
 8012798:	21ef      	movs	r1, #239	; 0xef
 801279a:	48ae      	ldr	r0, [pc, #696]	; (8012a54 <_dtoa_r+0x2ec>)
 801279c:	f001 fc82 	bl	80140a4 <__assert_func>
 80127a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80127a4:	6005      	str	r5, [r0, #0]
 80127a6:	60c5      	str	r5, [r0, #12]
 80127a8:	69e3      	ldr	r3, [r4, #28]
 80127aa:	6819      	ldr	r1, [r3, #0]
 80127ac:	b151      	cbz	r1, 80127c4 <_dtoa_r+0x5c>
 80127ae:	685a      	ldr	r2, [r3, #4]
 80127b0:	604a      	str	r2, [r1, #4]
 80127b2:	2301      	movs	r3, #1
 80127b4:	4093      	lsls	r3, r2
 80127b6:	608b      	str	r3, [r1, #8]
 80127b8:	4620      	mov	r0, r4
 80127ba:	f000 ff07 	bl	80135cc <_Bfree>
 80127be:	69e3      	ldr	r3, [r4, #28]
 80127c0:	2200      	movs	r2, #0
 80127c2:	601a      	str	r2, [r3, #0]
 80127c4:	1e3b      	subs	r3, r7, #0
 80127c6:	bfbb      	ittet	lt
 80127c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80127cc:	9303      	strlt	r3, [sp, #12]
 80127ce:	2300      	movge	r3, #0
 80127d0:	2201      	movlt	r2, #1
 80127d2:	bfac      	ite	ge
 80127d4:	f8c8 3000 	strge.w	r3, [r8]
 80127d8:	f8c8 2000 	strlt.w	r2, [r8]
 80127dc:	4b9e      	ldr	r3, [pc, #632]	; (8012a58 <_dtoa_r+0x2f0>)
 80127de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80127e2:	ea33 0308 	bics.w	r3, r3, r8
 80127e6:	d11b      	bne.n	8012820 <_dtoa_r+0xb8>
 80127e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80127ee:	6013      	str	r3, [r2, #0]
 80127f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80127f4:	4333      	orrs	r3, r6
 80127f6:	f000 8593 	beq.w	8013320 <_dtoa_r+0xbb8>
 80127fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127fc:	b963      	cbnz	r3, 8012818 <_dtoa_r+0xb0>
 80127fe:	4b97      	ldr	r3, [pc, #604]	; (8012a5c <_dtoa_r+0x2f4>)
 8012800:	e027      	b.n	8012852 <_dtoa_r+0xea>
 8012802:	4b97      	ldr	r3, [pc, #604]	; (8012a60 <_dtoa_r+0x2f8>)
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	3308      	adds	r3, #8
 8012808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801280a:	6013      	str	r3, [r2, #0]
 801280c:	9800      	ldr	r0, [sp, #0]
 801280e:	b013      	add	sp, #76	; 0x4c
 8012810:	ecbd 8b04 	vpop	{d8-d9}
 8012814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012818:	4b90      	ldr	r3, [pc, #576]	; (8012a5c <_dtoa_r+0x2f4>)
 801281a:	9300      	str	r3, [sp, #0]
 801281c:	3303      	adds	r3, #3
 801281e:	e7f3      	b.n	8012808 <_dtoa_r+0xa0>
 8012820:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012824:	2200      	movs	r2, #0
 8012826:	ec51 0b17 	vmov	r0, r1, d7
 801282a:	eeb0 8a47 	vmov.f32	s16, s14
 801282e:	eef0 8a67 	vmov.f32	s17, s15
 8012832:	2300      	movs	r3, #0
 8012834:	f7ee f970 	bl	8000b18 <__aeabi_dcmpeq>
 8012838:	4681      	mov	r9, r0
 801283a:	b160      	cbz	r0, 8012856 <_dtoa_r+0xee>
 801283c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801283e:	2301      	movs	r3, #1
 8012840:	6013      	str	r3, [r2, #0]
 8012842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012844:	2b00      	cmp	r3, #0
 8012846:	f000 8568 	beq.w	801331a <_dtoa_r+0xbb2>
 801284a:	4b86      	ldr	r3, [pc, #536]	; (8012a64 <_dtoa_r+0x2fc>)
 801284c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801284e:	6013      	str	r3, [r2, #0]
 8012850:	3b01      	subs	r3, #1
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	e7da      	b.n	801280c <_dtoa_r+0xa4>
 8012856:	aa10      	add	r2, sp, #64	; 0x40
 8012858:	a911      	add	r1, sp, #68	; 0x44
 801285a:	4620      	mov	r0, r4
 801285c:	eeb0 0a48 	vmov.f32	s0, s16
 8012860:	eef0 0a68 	vmov.f32	s1, s17
 8012864:	f001 f994 	bl	8013b90 <__d2b>
 8012868:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801286c:	4682      	mov	sl, r0
 801286e:	2d00      	cmp	r5, #0
 8012870:	d07f      	beq.n	8012972 <_dtoa_r+0x20a>
 8012872:	ee18 3a90 	vmov	r3, s17
 8012876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801287a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801287e:	ec51 0b18 	vmov	r0, r1, d8
 8012882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801288a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801288e:	4619      	mov	r1, r3
 8012890:	2200      	movs	r2, #0
 8012892:	4b75      	ldr	r3, [pc, #468]	; (8012a68 <_dtoa_r+0x300>)
 8012894:	f7ed fd20 	bl	80002d8 <__aeabi_dsub>
 8012898:	a367      	add	r3, pc, #412	; (adr r3, 8012a38 <_dtoa_r+0x2d0>)
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	f7ed fed3 	bl	8000648 <__aeabi_dmul>
 80128a2:	a367      	add	r3, pc, #412	; (adr r3, 8012a40 <_dtoa_r+0x2d8>)
 80128a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a8:	f7ed fd18 	bl	80002dc <__adddf3>
 80128ac:	4606      	mov	r6, r0
 80128ae:	4628      	mov	r0, r5
 80128b0:	460f      	mov	r7, r1
 80128b2:	f7ed fe5f 	bl	8000574 <__aeabi_i2d>
 80128b6:	a364      	add	r3, pc, #400	; (adr r3, 8012a48 <_dtoa_r+0x2e0>)
 80128b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128bc:	f7ed fec4 	bl	8000648 <__aeabi_dmul>
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	4630      	mov	r0, r6
 80128c6:	4639      	mov	r1, r7
 80128c8:	f7ed fd08 	bl	80002dc <__adddf3>
 80128cc:	4606      	mov	r6, r0
 80128ce:	460f      	mov	r7, r1
 80128d0:	f7ee f96a 	bl	8000ba8 <__aeabi_d2iz>
 80128d4:	2200      	movs	r2, #0
 80128d6:	4683      	mov	fp, r0
 80128d8:	2300      	movs	r3, #0
 80128da:	4630      	mov	r0, r6
 80128dc:	4639      	mov	r1, r7
 80128de:	f7ee f925 	bl	8000b2c <__aeabi_dcmplt>
 80128e2:	b148      	cbz	r0, 80128f8 <_dtoa_r+0x190>
 80128e4:	4658      	mov	r0, fp
 80128e6:	f7ed fe45 	bl	8000574 <__aeabi_i2d>
 80128ea:	4632      	mov	r2, r6
 80128ec:	463b      	mov	r3, r7
 80128ee:	f7ee f913 	bl	8000b18 <__aeabi_dcmpeq>
 80128f2:	b908      	cbnz	r0, 80128f8 <_dtoa_r+0x190>
 80128f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80128f8:	f1bb 0f16 	cmp.w	fp, #22
 80128fc:	d857      	bhi.n	80129ae <_dtoa_r+0x246>
 80128fe:	4b5b      	ldr	r3, [pc, #364]	; (8012a6c <_dtoa_r+0x304>)
 8012900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012908:	ec51 0b18 	vmov	r0, r1, d8
 801290c:	f7ee f90e 	bl	8000b2c <__aeabi_dcmplt>
 8012910:	2800      	cmp	r0, #0
 8012912:	d04e      	beq.n	80129b2 <_dtoa_r+0x24a>
 8012914:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012918:	2300      	movs	r3, #0
 801291a:	930c      	str	r3, [sp, #48]	; 0x30
 801291c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801291e:	1b5b      	subs	r3, r3, r5
 8012920:	1e5a      	subs	r2, r3, #1
 8012922:	bf45      	ittet	mi
 8012924:	f1c3 0301 	rsbmi	r3, r3, #1
 8012928:	9305      	strmi	r3, [sp, #20]
 801292a:	2300      	movpl	r3, #0
 801292c:	2300      	movmi	r3, #0
 801292e:	9206      	str	r2, [sp, #24]
 8012930:	bf54      	ite	pl
 8012932:	9305      	strpl	r3, [sp, #20]
 8012934:	9306      	strmi	r3, [sp, #24]
 8012936:	f1bb 0f00 	cmp.w	fp, #0
 801293a:	db3c      	blt.n	80129b6 <_dtoa_r+0x24e>
 801293c:	9b06      	ldr	r3, [sp, #24]
 801293e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012942:	445b      	add	r3, fp
 8012944:	9306      	str	r3, [sp, #24]
 8012946:	2300      	movs	r3, #0
 8012948:	9308      	str	r3, [sp, #32]
 801294a:	9b07      	ldr	r3, [sp, #28]
 801294c:	2b09      	cmp	r3, #9
 801294e:	d868      	bhi.n	8012a22 <_dtoa_r+0x2ba>
 8012950:	2b05      	cmp	r3, #5
 8012952:	bfc4      	itt	gt
 8012954:	3b04      	subgt	r3, #4
 8012956:	9307      	strgt	r3, [sp, #28]
 8012958:	9b07      	ldr	r3, [sp, #28]
 801295a:	f1a3 0302 	sub.w	r3, r3, #2
 801295e:	bfcc      	ite	gt
 8012960:	2500      	movgt	r5, #0
 8012962:	2501      	movle	r5, #1
 8012964:	2b03      	cmp	r3, #3
 8012966:	f200 8085 	bhi.w	8012a74 <_dtoa_r+0x30c>
 801296a:	e8df f003 	tbb	[pc, r3]
 801296e:	3b2e      	.short	0x3b2e
 8012970:	5839      	.short	0x5839
 8012972:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012976:	441d      	add	r5, r3
 8012978:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801297c:	2b20      	cmp	r3, #32
 801297e:	bfc1      	itttt	gt
 8012980:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012984:	fa08 f803 	lslgt.w	r8, r8, r3
 8012988:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801298c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012990:	bfd6      	itet	le
 8012992:	f1c3 0320 	rsble	r3, r3, #32
 8012996:	ea48 0003 	orrgt.w	r0, r8, r3
 801299a:	fa06 f003 	lslle.w	r0, r6, r3
 801299e:	f7ed fdd9 	bl	8000554 <__aeabi_ui2d>
 80129a2:	2201      	movs	r2, #1
 80129a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80129a8:	3d01      	subs	r5, #1
 80129aa:	920e      	str	r2, [sp, #56]	; 0x38
 80129ac:	e76f      	b.n	801288e <_dtoa_r+0x126>
 80129ae:	2301      	movs	r3, #1
 80129b0:	e7b3      	b.n	801291a <_dtoa_r+0x1b2>
 80129b2:	900c      	str	r0, [sp, #48]	; 0x30
 80129b4:	e7b2      	b.n	801291c <_dtoa_r+0x1b4>
 80129b6:	9b05      	ldr	r3, [sp, #20]
 80129b8:	eba3 030b 	sub.w	r3, r3, fp
 80129bc:	9305      	str	r3, [sp, #20]
 80129be:	f1cb 0300 	rsb	r3, fp, #0
 80129c2:	9308      	str	r3, [sp, #32]
 80129c4:	2300      	movs	r3, #0
 80129c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80129c8:	e7bf      	b.n	801294a <_dtoa_r+0x1e2>
 80129ca:	2300      	movs	r3, #0
 80129cc:	9309      	str	r3, [sp, #36]	; 0x24
 80129ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	dc52      	bgt.n	8012a7a <_dtoa_r+0x312>
 80129d4:	2301      	movs	r3, #1
 80129d6:	9301      	str	r3, [sp, #4]
 80129d8:	9304      	str	r3, [sp, #16]
 80129da:	461a      	mov	r2, r3
 80129dc:	920a      	str	r2, [sp, #40]	; 0x28
 80129de:	e00b      	b.n	80129f8 <_dtoa_r+0x290>
 80129e0:	2301      	movs	r3, #1
 80129e2:	e7f3      	b.n	80129cc <_dtoa_r+0x264>
 80129e4:	2300      	movs	r3, #0
 80129e6:	9309      	str	r3, [sp, #36]	; 0x24
 80129e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129ea:	445b      	add	r3, fp
 80129ec:	9301      	str	r3, [sp, #4]
 80129ee:	3301      	adds	r3, #1
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	9304      	str	r3, [sp, #16]
 80129f4:	bfb8      	it	lt
 80129f6:	2301      	movlt	r3, #1
 80129f8:	69e0      	ldr	r0, [r4, #28]
 80129fa:	2100      	movs	r1, #0
 80129fc:	2204      	movs	r2, #4
 80129fe:	f102 0614 	add.w	r6, r2, #20
 8012a02:	429e      	cmp	r6, r3
 8012a04:	d93d      	bls.n	8012a82 <_dtoa_r+0x31a>
 8012a06:	6041      	str	r1, [r0, #4]
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f000 fd9f 	bl	801354c <_Balloc>
 8012a0e:	9000      	str	r0, [sp, #0]
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d139      	bne.n	8012a88 <_dtoa_r+0x320>
 8012a14:	4b16      	ldr	r3, [pc, #88]	; (8012a70 <_dtoa_r+0x308>)
 8012a16:	4602      	mov	r2, r0
 8012a18:	f240 11af 	movw	r1, #431	; 0x1af
 8012a1c:	e6bd      	b.n	801279a <_dtoa_r+0x32>
 8012a1e:	2301      	movs	r3, #1
 8012a20:	e7e1      	b.n	80129e6 <_dtoa_r+0x27e>
 8012a22:	2501      	movs	r5, #1
 8012a24:	2300      	movs	r3, #0
 8012a26:	9307      	str	r3, [sp, #28]
 8012a28:	9509      	str	r5, [sp, #36]	; 0x24
 8012a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a2e:	9301      	str	r3, [sp, #4]
 8012a30:	9304      	str	r3, [sp, #16]
 8012a32:	2200      	movs	r2, #0
 8012a34:	2312      	movs	r3, #18
 8012a36:	e7d1      	b.n	80129dc <_dtoa_r+0x274>
 8012a38:	636f4361 	.word	0x636f4361
 8012a3c:	3fd287a7 	.word	0x3fd287a7
 8012a40:	8b60c8b3 	.word	0x8b60c8b3
 8012a44:	3fc68a28 	.word	0x3fc68a28
 8012a48:	509f79fb 	.word	0x509f79fb
 8012a4c:	3fd34413 	.word	0x3fd34413
 8012a50:	080156ad 	.word	0x080156ad
 8012a54:	080156c4 	.word	0x080156c4
 8012a58:	7ff00000 	.word	0x7ff00000
 8012a5c:	080156a9 	.word	0x080156a9
 8012a60:	080156a0 	.word	0x080156a0
 8012a64:	0801567d 	.word	0x0801567d
 8012a68:	3ff80000 	.word	0x3ff80000
 8012a6c:	080157b0 	.word	0x080157b0
 8012a70:	0801571c 	.word	0x0801571c
 8012a74:	2301      	movs	r3, #1
 8012a76:	9309      	str	r3, [sp, #36]	; 0x24
 8012a78:	e7d7      	b.n	8012a2a <_dtoa_r+0x2c2>
 8012a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a7c:	9301      	str	r3, [sp, #4]
 8012a7e:	9304      	str	r3, [sp, #16]
 8012a80:	e7ba      	b.n	80129f8 <_dtoa_r+0x290>
 8012a82:	3101      	adds	r1, #1
 8012a84:	0052      	lsls	r2, r2, #1
 8012a86:	e7ba      	b.n	80129fe <_dtoa_r+0x296>
 8012a88:	69e3      	ldr	r3, [r4, #28]
 8012a8a:	9a00      	ldr	r2, [sp, #0]
 8012a8c:	601a      	str	r2, [r3, #0]
 8012a8e:	9b04      	ldr	r3, [sp, #16]
 8012a90:	2b0e      	cmp	r3, #14
 8012a92:	f200 80a8 	bhi.w	8012be6 <_dtoa_r+0x47e>
 8012a96:	2d00      	cmp	r5, #0
 8012a98:	f000 80a5 	beq.w	8012be6 <_dtoa_r+0x47e>
 8012a9c:	f1bb 0f00 	cmp.w	fp, #0
 8012aa0:	dd38      	ble.n	8012b14 <_dtoa_r+0x3ac>
 8012aa2:	4bc0      	ldr	r3, [pc, #768]	; (8012da4 <_dtoa_r+0x63c>)
 8012aa4:	f00b 020f 	and.w	r2, fp, #15
 8012aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012aac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012ab0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012ab4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012ab8:	d019      	beq.n	8012aee <_dtoa_r+0x386>
 8012aba:	4bbb      	ldr	r3, [pc, #748]	; (8012da8 <_dtoa_r+0x640>)
 8012abc:	ec51 0b18 	vmov	r0, r1, d8
 8012ac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ac4:	f7ed feea 	bl	800089c <__aeabi_ddiv>
 8012ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012acc:	f008 080f 	and.w	r8, r8, #15
 8012ad0:	2503      	movs	r5, #3
 8012ad2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012da8 <_dtoa_r+0x640>
 8012ad6:	f1b8 0f00 	cmp.w	r8, #0
 8012ada:	d10a      	bne.n	8012af2 <_dtoa_r+0x38a>
 8012adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ae0:	4632      	mov	r2, r6
 8012ae2:	463b      	mov	r3, r7
 8012ae4:	f7ed feda 	bl	800089c <__aeabi_ddiv>
 8012ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aec:	e02b      	b.n	8012b46 <_dtoa_r+0x3de>
 8012aee:	2502      	movs	r5, #2
 8012af0:	e7ef      	b.n	8012ad2 <_dtoa_r+0x36a>
 8012af2:	f018 0f01 	tst.w	r8, #1
 8012af6:	d008      	beq.n	8012b0a <_dtoa_r+0x3a2>
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012b00:	f7ed fda2 	bl	8000648 <__aeabi_dmul>
 8012b04:	3501      	adds	r5, #1
 8012b06:	4606      	mov	r6, r0
 8012b08:	460f      	mov	r7, r1
 8012b0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012b0e:	f109 0908 	add.w	r9, r9, #8
 8012b12:	e7e0      	b.n	8012ad6 <_dtoa_r+0x36e>
 8012b14:	f000 809f 	beq.w	8012c56 <_dtoa_r+0x4ee>
 8012b18:	f1cb 0600 	rsb	r6, fp, #0
 8012b1c:	4ba1      	ldr	r3, [pc, #644]	; (8012da4 <_dtoa_r+0x63c>)
 8012b1e:	4fa2      	ldr	r7, [pc, #648]	; (8012da8 <_dtoa_r+0x640>)
 8012b20:	f006 020f 	and.w	r2, r6, #15
 8012b24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2c:	ec51 0b18 	vmov	r0, r1, d8
 8012b30:	f7ed fd8a 	bl	8000648 <__aeabi_dmul>
 8012b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b38:	1136      	asrs	r6, r6, #4
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	2502      	movs	r5, #2
 8012b3e:	2e00      	cmp	r6, #0
 8012b40:	d17e      	bne.n	8012c40 <_dtoa_r+0x4d8>
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1d0      	bne.n	8012ae8 <_dtoa_r+0x380>
 8012b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	f000 8084 	beq.w	8012c5a <_dtoa_r+0x4f2>
 8012b52:	4b96      	ldr	r3, [pc, #600]	; (8012dac <_dtoa_r+0x644>)
 8012b54:	2200      	movs	r2, #0
 8012b56:	4640      	mov	r0, r8
 8012b58:	4649      	mov	r1, r9
 8012b5a:	f7ed ffe7 	bl	8000b2c <__aeabi_dcmplt>
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d07b      	beq.n	8012c5a <_dtoa_r+0x4f2>
 8012b62:	9b04      	ldr	r3, [sp, #16]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d078      	beq.n	8012c5a <_dtoa_r+0x4f2>
 8012b68:	9b01      	ldr	r3, [sp, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	dd39      	ble.n	8012be2 <_dtoa_r+0x47a>
 8012b6e:	4b90      	ldr	r3, [pc, #576]	; (8012db0 <_dtoa_r+0x648>)
 8012b70:	2200      	movs	r2, #0
 8012b72:	4640      	mov	r0, r8
 8012b74:	4649      	mov	r1, r9
 8012b76:	f7ed fd67 	bl	8000648 <__aeabi_dmul>
 8012b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b7e:	9e01      	ldr	r6, [sp, #4]
 8012b80:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012b84:	3501      	adds	r5, #1
 8012b86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	f7ed fcf2 	bl	8000574 <__aeabi_i2d>
 8012b90:	4642      	mov	r2, r8
 8012b92:	464b      	mov	r3, r9
 8012b94:	f7ed fd58 	bl	8000648 <__aeabi_dmul>
 8012b98:	4b86      	ldr	r3, [pc, #536]	; (8012db4 <_dtoa_r+0x64c>)
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f7ed fb9e 	bl	80002dc <__adddf3>
 8012ba0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ba8:	9303      	str	r3, [sp, #12]
 8012baa:	2e00      	cmp	r6, #0
 8012bac:	d158      	bne.n	8012c60 <_dtoa_r+0x4f8>
 8012bae:	4b82      	ldr	r3, [pc, #520]	; (8012db8 <_dtoa_r+0x650>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	4640      	mov	r0, r8
 8012bb4:	4649      	mov	r1, r9
 8012bb6:	f7ed fb8f 	bl	80002d8 <__aeabi_dsub>
 8012bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012bbe:	4680      	mov	r8, r0
 8012bc0:	4689      	mov	r9, r1
 8012bc2:	f7ed ffd1 	bl	8000b68 <__aeabi_dcmpgt>
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	f040 8296 	bne.w	80130f8 <_dtoa_r+0x990>
 8012bcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bd6:	4649      	mov	r1, r9
 8012bd8:	f7ed ffa8 	bl	8000b2c <__aeabi_dcmplt>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	f040 8289 	bne.w	80130f4 <_dtoa_r+0x98c>
 8012be2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	f2c0 814e 	blt.w	8012e8a <_dtoa_r+0x722>
 8012bee:	f1bb 0f0e 	cmp.w	fp, #14
 8012bf2:	f300 814a 	bgt.w	8012e8a <_dtoa_r+0x722>
 8012bf6:	4b6b      	ldr	r3, [pc, #428]	; (8012da4 <_dtoa_r+0x63c>)
 8012bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012bfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f280 80dc 	bge.w	8012dc0 <_dtoa_r+0x658>
 8012c08:	9b04      	ldr	r3, [sp, #16]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f300 80d8 	bgt.w	8012dc0 <_dtoa_r+0x658>
 8012c10:	f040 826f 	bne.w	80130f2 <_dtoa_r+0x98a>
 8012c14:	4b68      	ldr	r3, [pc, #416]	; (8012db8 <_dtoa_r+0x650>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	4640      	mov	r0, r8
 8012c1a:	4649      	mov	r1, r9
 8012c1c:	f7ed fd14 	bl	8000648 <__aeabi_dmul>
 8012c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c24:	f7ed ff96 	bl	8000b54 <__aeabi_dcmpge>
 8012c28:	9e04      	ldr	r6, [sp, #16]
 8012c2a:	4637      	mov	r7, r6
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	f040 8245 	bne.w	80130bc <_dtoa_r+0x954>
 8012c32:	9d00      	ldr	r5, [sp, #0]
 8012c34:	2331      	movs	r3, #49	; 0x31
 8012c36:	f805 3b01 	strb.w	r3, [r5], #1
 8012c3a:	f10b 0b01 	add.w	fp, fp, #1
 8012c3e:	e241      	b.n	80130c4 <_dtoa_r+0x95c>
 8012c40:	07f2      	lsls	r2, r6, #31
 8012c42:	d505      	bpl.n	8012c50 <_dtoa_r+0x4e8>
 8012c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c48:	f7ed fcfe 	bl	8000648 <__aeabi_dmul>
 8012c4c:	3501      	adds	r5, #1
 8012c4e:	2301      	movs	r3, #1
 8012c50:	1076      	asrs	r6, r6, #1
 8012c52:	3708      	adds	r7, #8
 8012c54:	e773      	b.n	8012b3e <_dtoa_r+0x3d6>
 8012c56:	2502      	movs	r5, #2
 8012c58:	e775      	b.n	8012b46 <_dtoa_r+0x3de>
 8012c5a:	9e04      	ldr	r6, [sp, #16]
 8012c5c:	465f      	mov	r7, fp
 8012c5e:	e792      	b.n	8012b86 <_dtoa_r+0x41e>
 8012c60:	9900      	ldr	r1, [sp, #0]
 8012c62:	4b50      	ldr	r3, [pc, #320]	; (8012da4 <_dtoa_r+0x63c>)
 8012c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c68:	4431      	add	r1, r6
 8012c6a:	9102      	str	r1, [sp, #8]
 8012c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c6e:	eeb0 9a47 	vmov.f32	s18, s14
 8012c72:	eef0 9a67 	vmov.f32	s19, s15
 8012c76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012c7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c7e:	2900      	cmp	r1, #0
 8012c80:	d044      	beq.n	8012d0c <_dtoa_r+0x5a4>
 8012c82:	494e      	ldr	r1, [pc, #312]	; (8012dbc <_dtoa_r+0x654>)
 8012c84:	2000      	movs	r0, #0
 8012c86:	f7ed fe09 	bl	800089c <__aeabi_ddiv>
 8012c8a:	ec53 2b19 	vmov	r2, r3, d9
 8012c8e:	f7ed fb23 	bl	80002d8 <__aeabi_dsub>
 8012c92:	9d00      	ldr	r5, [sp, #0]
 8012c94:	ec41 0b19 	vmov	d9, r0, r1
 8012c98:	4649      	mov	r1, r9
 8012c9a:	4640      	mov	r0, r8
 8012c9c:	f7ed ff84 	bl	8000ba8 <__aeabi_d2iz>
 8012ca0:	4606      	mov	r6, r0
 8012ca2:	f7ed fc67 	bl	8000574 <__aeabi_i2d>
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	460b      	mov	r3, r1
 8012caa:	4640      	mov	r0, r8
 8012cac:	4649      	mov	r1, r9
 8012cae:	f7ed fb13 	bl	80002d8 <__aeabi_dsub>
 8012cb2:	3630      	adds	r6, #48	; 0x30
 8012cb4:	f805 6b01 	strb.w	r6, [r5], #1
 8012cb8:	ec53 2b19 	vmov	r2, r3, d9
 8012cbc:	4680      	mov	r8, r0
 8012cbe:	4689      	mov	r9, r1
 8012cc0:	f7ed ff34 	bl	8000b2c <__aeabi_dcmplt>
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	d164      	bne.n	8012d92 <_dtoa_r+0x62a>
 8012cc8:	4642      	mov	r2, r8
 8012cca:	464b      	mov	r3, r9
 8012ccc:	4937      	ldr	r1, [pc, #220]	; (8012dac <_dtoa_r+0x644>)
 8012cce:	2000      	movs	r0, #0
 8012cd0:	f7ed fb02 	bl	80002d8 <__aeabi_dsub>
 8012cd4:	ec53 2b19 	vmov	r2, r3, d9
 8012cd8:	f7ed ff28 	bl	8000b2c <__aeabi_dcmplt>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	f040 80b6 	bne.w	8012e4e <_dtoa_r+0x6e6>
 8012ce2:	9b02      	ldr	r3, [sp, #8]
 8012ce4:	429d      	cmp	r5, r3
 8012ce6:	f43f af7c 	beq.w	8012be2 <_dtoa_r+0x47a>
 8012cea:	4b31      	ldr	r3, [pc, #196]	; (8012db0 <_dtoa_r+0x648>)
 8012cec:	ec51 0b19 	vmov	r0, r1, d9
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	f7ed fca9 	bl	8000648 <__aeabi_dmul>
 8012cf6:	4b2e      	ldr	r3, [pc, #184]	; (8012db0 <_dtoa_r+0x648>)
 8012cf8:	ec41 0b19 	vmov	d9, r0, r1
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	4640      	mov	r0, r8
 8012d00:	4649      	mov	r1, r9
 8012d02:	f7ed fca1 	bl	8000648 <__aeabi_dmul>
 8012d06:	4680      	mov	r8, r0
 8012d08:	4689      	mov	r9, r1
 8012d0a:	e7c5      	b.n	8012c98 <_dtoa_r+0x530>
 8012d0c:	ec51 0b17 	vmov	r0, r1, d7
 8012d10:	f7ed fc9a 	bl	8000648 <__aeabi_dmul>
 8012d14:	9b02      	ldr	r3, [sp, #8]
 8012d16:	9d00      	ldr	r5, [sp, #0]
 8012d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d1a:	ec41 0b19 	vmov	d9, r0, r1
 8012d1e:	4649      	mov	r1, r9
 8012d20:	4640      	mov	r0, r8
 8012d22:	f7ed ff41 	bl	8000ba8 <__aeabi_d2iz>
 8012d26:	4606      	mov	r6, r0
 8012d28:	f7ed fc24 	bl	8000574 <__aeabi_i2d>
 8012d2c:	3630      	adds	r6, #48	; 0x30
 8012d2e:	4602      	mov	r2, r0
 8012d30:	460b      	mov	r3, r1
 8012d32:	4640      	mov	r0, r8
 8012d34:	4649      	mov	r1, r9
 8012d36:	f7ed facf 	bl	80002d8 <__aeabi_dsub>
 8012d3a:	f805 6b01 	strb.w	r6, [r5], #1
 8012d3e:	9b02      	ldr	r3, [sp, #8]
 8012d40:	429d      	cmp	r5, r3
 8012d42:	4680      	mov	r8, r0
 8012d44:	4689      	mov	r9, r1
 8012d46:	f04f 0200 	mov.w	r2, #0
 8012d4a:	d124      	bne.n	8012d96 <_dtoa_r+0x62e>
 8012d4c:	4b1b      	ldr	r3, [pc, #108]	; (8012dbc <_dtoa_r+0x654>)
 8012d4e:	ec51 0b19 	vmov	r0, r1, d9
 8012d52:	f7ed fac3 	bl	80002dc <__adddf3>
 8012d56:	4602      	mov	r2, r0
 8012d58:	460b      	mov	r3, r1
 8012d5a:	4640      	mov	r0, r8
 8012d5c:	4649      	mov	r1, r9
 8012d5e:	f7ed ff03 	bl	8000b68 <__aeabi_dcmpgt>
 8012d62:	2800      	cmp	r0, #0
 8012d64:	d173      	bne.n	8012e4e <_dtoa_r+0x6e6>
 8012d66:	ec53 2b19 	vmov	r2, r3, d9
 8012d6a:	4914      	ldr	r1, [pc, #80]	; (8012dbc <_dtoa_r+0x654>)
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	f7ed fab3 	bl	80002d8 <__aeabi_dsub>
 8012d72:	4602      	mov	r2, r0
 8012d74:	460b      	mov	r3, r1
 8012d76:	4640      	mov	r0, r8
 8012d78:	4649      	mov	r1, r9
 8012d7a:	f7ed fed7 	bl	8000b2c <__aeabi_dcmplt>
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	f43f af2f 	beq.w	8012be2 <_dtoa_r+0x47a>
 8012d84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012d86:	1e6b      	subs	r3, r5, #1
 8012d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d8e:	2b30      	cmp	r3, #48	; 0x30
 8012d90:	d0f8      	beq.n	8012d84 <_dtoa_r+0x61c>
 8012d92:	46bb      	mov	fp, r7
 8012d94:	e04a      	b.n	8012e2c <_dtoa_r+0x6c4>
 8012d96:	4b06      	ldr	r3, [pc, #24]	; (8012db0 <_dtoa_r+0x648>)
 8012d98:	f7ed fc56 	bl	8000648 <__aeabi_dmul>
 8012d9c:	4680      	mov	r8, r0
 8012d9e:	4689      	mov	r9, r1
 8012da0:	e7bd      	b.n	8012d1e <_dtoa_r+0x5b6>
 8012da2:	bf00      	nop
 8012da4:	080157b0 	.word	0x080157b0
 8012da8:	08015788 	.word	0x08015788
 8012dac:	3ff00000 	.word	0x3ff00000
 8012db0:	40240000 	.word	0x40240000
 8012db4:	401c0000 	.word	0x401c0000
 8012db8:	40140000 	.word	0x40140000
 8012dbc:	3fe00000 	.word	0x3fe00000
 8012dc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012dc4:	9d00      	ldr	r5, [sp, #0]
 8012dc6:	4642      	mov	r2, r8
 8012dc8:	464b      	mov	r3, r9
 8012dca:	4630      	mov	r0, r6
 8012dcc:	4639      	mov	r1, r7
 8012dce:	f7ed fd65 	bl	800089c <__aeabi_ddiv>
 8012dd2:	f7ed fee9 	bl	8000ba8 <__aeabi_d2iz>
 8012dd6:	9001      	str	r0, [sp, #4]
 8012dd8:	f7ed fbcc 	bl	8000574 <__aeabi_i2d>
 8012ddc:	4642      	mov	r2, r8
 8012dde:	464b      	mov	r3, r9
 8012de0:	f7ed fc32 	bl	8000648 <__aeabi_dmul>
 8012de4:	4602      	mov	r2, r0
 8012de6:	460b      	mov	r3, r1
 8012de8:	4630      	mov	r0, r6
 8012dea:	4639      	mov	r1, r7
 8012dec:	f7ed fa74 	bl	80002d8 <__aeabi_dsub>
 8012df0:	9e01      	ldr	r6, [sp, #4]
 8012df2:	9f04      	ldr	r7, [sp, #16]
 8012df4:	3630      	adds	r6, #48	; 0x30
 8012df6:	f805 6b01 	strb.w	r6, [r5], #1
 8012dfa:	9e00      	ldr	r6, [sp, #0]
 8012dfc:	1bae      	subs	r6, r5, r6
 8012dfe:	42b7      	cmp	r7, r6
 8012e00:	4602      	mov	r2, r0
 8012e02:	460b      	mov	r3, r1
 8012e04:	d134      	bne.n	8012e70 <_dtoa_r+0x708>
 8012e06:	f7ed fa69 	bl	80002dc <__adddf3>
 8012e0a:	4642      	mov	r2, r8
 8012e0c:	464b      	mov	r3, r9
 8012e0e:	4606      	mov	r6, r0
 8012e10:	460f      	mov	r7, r1
 8012e12:	f7ed fea9 	bl	8000b68 <__aeabi_dcmpgt>
 8012e16:	b9c8      	cbnz	r0, 8012e4c <_dtoa_r+0x6e4>
 8012e18:	4642      	mov	r2, r8
 8012e1a:	464b      	mov	r3, r9
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	4639      	mov	r1, r7
 8012e20:	f7ed fe7a 	bl	8000b18 <__aeabi_dcmpeq>
 8012e24:	b110      	cbz	r0, 8012e2c <_dtoa_r+0x6c4>
 8012e26:	9b01      	ldr	r3, [sp, #4]
 8012e28:	07db      	lsls	r3, r3, #31
 8012e2a:	d40f      	bmi.n	8012e4c <_dtoa_r+0x6e4>
 8012e2c:	4651      	mov	r1, sl
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f000 fbcc 	bl	80135cc <_Bfree>
 8012e34:	2300      	movs	r3, #0
 8012e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e38:	702b      	strb	r3, [r5, #0]
 8012e3a:	f10b 0301 	add.w	r3, fp, #1
 8012e3e:	6013      	str	r3, [r2, #0]
 8012e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	f43f ace2 	beq.w	801280c <_dtoa_r+0xa4>
 8012e48:	601d      	str	r5, [r3, #0]
 8012e4a:	e4df      	b.n	801280c <_dtoa_r+0xa4>
 8012e4c:	465f      	mov	r7, fp
 8012e4e:	462b      	mov	r3, r5
 8012e50:	461d      	mov	r5, r3
 8012e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e56:	2a39      	cmp	r2, #57	; 0x39
 8012e58:	d106      	bne.n	8012e68 <_dtoa_r+0x700>
 8012e5a:	9a00      	ldr	r2, [sp, #0]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d1f7      	bne.n	8012e50 <_dtoa_r+0x6e8>
 8012e60:	9900      	ldr	r1, [sp, #0]
 8012e62:	2230      	movs	r2, #48	; 0x30
 8012e64:	3701      	adds	r7, #1
 8012e66:	700a      	strb	r2, [r1, #0]
 8012e68:	781a      	ldrb	r2, [r3, #0]
 8012e6a:	3201      	adds	r2, #1
 8012e6c:	701a      	strb	r2, [r3, #0]
 8012e6e:	e790      	b.n	8012d92 <_dtoa_r+0x62a>
 8012e70:	4ba3      	ldr	r3, [pc, #652]	; (8013100 <_dtoa_r+0x998>)
 8012e72:	2200      	movs	r2, #0
 8012e74:	f7ed fbe8 	bl	8000648 <__aeabi_dmul>
 8012e78:	2200      	movs	r2, #0
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	460f      	mov	r7, r1
 8012e80:	f7ed fe4a 	bl	8000b18 <__aeabi_dcmpeq>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d09e      	beq.n	8012dc6 <_dtoa_r+0x65e>
 8012e88:	e7d0      	b.n	8012e2c <_dtoa_r+0x6c4>
 8012e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e8c:	2a00      	cmp	r2, #0
 8012e8e:	f000 80ca 	beq.w	8013026 <_dtoa_r+0x8be>
 8012e92:	9a07      	ldr	r2, [sp, #28]
 8012e94:	2a01      	cmp	r2, #1
 8012e96:	f300 80ad 	bgt.w	8012ff4 <_dtoa_r+0x88c>
 8012e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e9c:	2a00      	cmp	r2, #0
 8012e9e:	f000 80a5 	beq.w	8012fec <_dtoa_r+0x884>
 8012ea2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ea6:	9e08      	ldr	r6, [sp, #32]
 8012ea8:	9d05      	ldr	r5, [sp, #20]
 8012eaa:	9a05      	ldr	r2, [sp, #20]
 8012eac:	441a      	add	r2, r3
 8012eae:	9205      	str	r2, [sp, #20]
 8012eb0:	9a06      	ldr	r2, [sp, #24]
 8012eb2:	2101      	movs	r1, #1
 8012eb4:	441a      	add	r2, r3
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	9206      	str	r2, [sp, #24]
 8012eba:	f000 fc3d 	bl	8013738 <__i2b>
 8012ebe:	4607      	mov	r7, r0
 8012ec0:	b165      	cbz	r5, 8012edc <_dtoa_r+0x774>
 8012ec2:	9b06      	ldr	r3, [sp, #24]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dd09      	ble.n	8012edc <_dtoa_r+0x774>
 8012ec8:	42ab      	cmp	r3, r5
 8012eca:	9a05      	ldr	r2, [sp, #20]
 8012ecc:	bfa8      	it	ge
 8012ece:	462b      	movge	r3, r5
 8012ed0:	1ad2      	subs	r2, r2, r3
 8012ed2:	9205      	str	r2, [sp, #20]
 8012ed4:	9a06      	ldr	r2, [sp, #24]
 8012ed6:	1aed      	subs	r5, r5, r3
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	9306      	str	r3, [sp, #24]
 8012edc:	9b08      	ldr	r3, [sp, #32]
 8012ede:	b1f3      	cbz	r3, 8012f1e <_dtoa_r+0x7b6>
 8012ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	f000 80a3 	beq.w	801302e <_dtoa_r+0x8c6>
 8012ee8:	2e00      	cmp	r6, #0
 8012eea:	dd10      	ble.n	8012f0e <_dtoa_r+0x7a6>
 8012eec:	4639      	mov	r1, r7
 8012eee:	4632      	mov	r2, r6
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f000 fce1 	bl	80138b8 <__pow5mult>
 8012ef6:	4652      	mov	r2, sl
 8012ef8:	4601      	mov	r1, r0
 8012efa:	4607      	mov	r7, r0
 8012efc:	4620      	mov	r0, r4
 8012efe:	f000 fc31 	bl	8013764 <__multiply>
 8012f02:	4651      	mov	r1, sl
 8012f04:	4680      	mov	r8, r0
 8012f06:	4620      	mov	r0, r4
 8012f08:	f000 fb60 	bl	80135cc <_Bfree>
 8012f0c:	46c2      	mov	sl, r8
 8012f0e:	9b08      	ldr	r3, [sp, #32]
 8012f10:	1b9a      	subs	r2, r3, r6
 8012f12:	d004      	beq.n	8012f1e <_dtoa_r+0x7b6>
 8012f14:	4651      	mov	r1, sl
 8012f16:	4620      	mov	r0, r4
 8012f18:	f000 fcce 	bl	80138b8 <__pow5mult>
 8012f1c:	4682      	mov	sl, r0
 8012f1e:	2101      	movs	r1, #1
 8012f20:	4620      	mov	r0, r4
 8012f22:	f000 fc09 	bl	8013738 <__i2b>
 8012f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	4606      	mov	r6, r0
 8012f2c:	f340 8081 	ble.w	8013032 <_dtoa_r+0x8ca>
 8012f30:	461a      	mov	r2, r3
 8012f32:	4601      	mov	r1, r0
 8012f34:	4620      	mov	r0, r4
 8012f36:	f000 fcbf 	bl	80138b8 <__pow5mult>
 8012f3a:	9b07      	ldr	r3, [sp, #28]
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	4606      	mov	r6, r0
 8012f40:	dd7a      	ble.n	8013038 <_dtoa_r+0x8d0>
 8012f42:	f04f 0800 	mov.w	r8, #0
 8012f46:	6933      	ldr	r3, [r6, #16]
 8012f48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012f4c:	6918      	ldr	r0, [r3, #16]
 8012f4e:	f000 fba5 	bl	801369c <__hi0bits>
 8012f52:	f1c0 0020 	rsb	r0, r0, #32
 8012f56:	9b06      	ldr	r3, [sp, #24]
 8012f58:	4418      	add	r0, r3
 8012f5a:	f010 001f 	ands.w	r0, r0, #31
 8012f5e:	f000 8094 	beq.w	801308a <_dtoa_r+0x922>
 8012f62:	f1c0 0320 	rsb	r3, r0, #32
 8012f66:	2b04      	cmp	r3, #4
 8012f68:	f340 8085 	ble.w	8013076 <_dtoa_r+0x90e>
 8012f6c:	9b05      	ldr	r3, [sp, #20]
 8012f6e:	f1c0 001c 	rsb	r0, r0, #28
 8012f72:	4403      	add	r3, r0
 8012f74:	9305      	str	r3, [sp, #20]
 8012f76:	9b06      	ldr	r3, [sp, #24]
 8012f78:	4403      	add	r3, r0
 8012f7a:	4405      	add	r5, r0
 8012f7c:	9306      	str	r3, [sp, #24]
 8012f7e:	9b05      	ldr	r3, [sp, #20]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	dd05      	ble.n	8012f90 <_dtoa_r+0x828>
 8012f84:	4651      	mov	r1, sl
 8012f86:	461a      	mov	r2, r3
 8012f88:	4620      	mov	r0, r4
 8012f8a:	f000 fcef 	bl	801396c <__lshift>
 8012f8e:	4682      	mov	sl, r0
 8012f90:	9b06      	ldr	r3, [sp, #24]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	dd05      	ble.n	8012fa2 <_dtoa_r+0x83a>
 8012f96:	4631      	mov	r1, r6
 8012f98:	461a      	mov	r2, r3
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	f000 fce6 	bl	801396c <__lshift>
 8012fa0:	4606      	mov	r6, r0
 8012fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d072      	beq.n	801308e <_dtoa_r+0x926>
 8012fa8:	4631      	mov	r1, r6
 8012faa:	4650      	mov	r0, sl
 8012fac:	f000 fd4a 	bl	8013a44 <__mcmp>
 8012fb0:	2800      	cmp	r0, #0
 8012fb2:	da6c      	bge.n	801308e <_dtoa_r+0x926>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	4651      	mov	r1, sl
 8012fb8:	220a      	movs	r2, #10
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f000 fb28 	bl	8013610 <__multadd>
 8012fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012fc6:	4682      	mov	sl, r0
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	f000 81b0 	beq.w	801332e <_dtoa_r+0xbc6>
 8012fce:	2300      	movs	r3, #0
 8012fd0:	4639      	mov	r1, r7
 8012fd2:	220a      	movs	r2, #10
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f000 fb1b 	bl	8013610 <__multadd>
 8012fda:	9b01      	ldr	r3, [sp, #4]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	4607      	mov	r7, r0
 8012fe0:	f300 8096 	bgt.w	8013110 <_dtoa_r+0x9a8>
 8012fe4:	9b07      	ldr	r3, [sp, #28]
 8012fe6:	2b02      	cmp	r3, #2
 8012fe8:	dc59      	bgt.n	801309e <_dtoa_r+0x936>
 8012fea:	e091      	b.n	8013110 <_dtoa_r+0x9a8>
 8012fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ff2:	e758      	b.n	8012ea6 <_dtoa_r+0x73e>
 8012ff4:	9b04      	ldr	r3, [sp, #16]
 8012ff6:	1e5e      	subs	r6, r3, #1
 8012ff8:	9b08      	ldr	r3, [sp, #32]
 8012ffa:	42b3      	cmp	r3, r6
 8012ffc:	bfbf      	itttt	lt
 8012ffe:	9b08      	ldrlt	r3, [sp, #32]
 8013000:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013002:	9608      	strlt	r6, [sp, #32]
 8013004:	1af3      	sublt	r3, r6, r3
 8013006:	bfb4      	ite	lt
 8013008:	18d2      	addlt	r2, r2, r3
 801300a:	1b9e      	subge	r6, r3, r6
 801300c:	9b04      	ldr	r3, [sp, #16]
 801300e:	bfbc      	itt	lt
 8013010:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013012:	2600      	movlt	r6, #0
 8013014:	2b00      	cmp	r3, #0
 8013016:	bfb7      	itett	lt
 8013018:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801301c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013020:	1a9d      	sublt	r5, r3, r2
 8013022:	2300      	movlt	r3, #0
 8013024:	e741      	b.n	8012eaa <_dtoa_r+0x742>
 8013026:	9e08      	ldr	r6, [sp, #32]
 8013028:	9d05      	ldr	r5, [sp, #20]
 801302a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801302c:	e748      	b.n	8012ec0 <_dtoa_r+0x758>
 801302e:	9a08      	ldr	r2, [sp, #32]
 8013030:	e770      	b.n	8012f14 <_dtoa_r+0x7ac>
 8013032:	9b07      	ldr	r3, [sp, #28]
 8013034:	2b01      	cmp	r3, #1
 8013036:	dc19      	bgt.n	801306c <_dtoa_r+0x904>
 8013038:	9b02      	ldr	r3, [sp, #8]
 801303a:	b9bb      	cbnz	r3, 801306c <_dtoa_r+0x904>
 801303c:	9b03      	ldr	r3, [sp, #12]
 801303e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013042:	b99b      	cbnz	r3, 801306c <_dtoa_r+0x904>
 8013044:	9b03      	ldr	r3, [sp, #12]
 8013046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801304a:	0d1b      	lsrs	r3, r3, #20
 801304c:	051b      	lsls	r3, r3, #20
 801304e:	b183      	cbz	r3, 8013072 <_dtoa_r+0x90a>
 8013050:	9b05      	ldr	r3, [sp, #20]
 8013052:	3301      	adds	r3, #1
 8013054:	9305      	str	r3, [sp, #20]
 8013056:	9b06      	ldr	r3, [sp, #24]
 8013058:	3301      	adds	r3, #1
 801305a:	9306      	str	r3, [sp, #24]
 801305c:	f04f 0801 	mov.w	r8, #1
 8013060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013062:	2b00      	cmp	r3, #0
 8013064:	f47f af6f 	bne.w	8012f46 <_dtoa_r+0x7de>
 8013068:	2001      	movs	r0, #1
 801306a:	e774      	b.n	8012f56 <_dtoa_r+0x7ee>
 801306c:	f04f 0800 	mov.w	r8, #0
 8013070:	e7f6      	b.n	8013060 <_dtoa_r+0x8f8>
 8013072:	4698      	mov	r8, r3
 8013074:	e7f4      	b.n	8013060 <_dtoa_r+0x8f8>
 8013076:	d082      	beq.n	8012f7e <_dtoa_r+0x816>
 8013078:	9a05      	ldr	r2, [sp, #20]
 801307a:	331c      	adds	r3, #28
 801307c:	441a      	add	r2, r3
 801307e:	9205      	str	r2, [sp, #20]
 8013080:	9a06      	ldr	r2, [sp, #24]
 8013082:	441a      	add	r2, r3
 8013084:	441d      	add	r5, r3
 8013086:	9206      	str	r2, [sp, #24]
 8013088:	e779      	b.n	8012f7e <_dtoa_r+0x816>
 801308a:	4603      	mov	r3, r0
 801308c:	e7f4      	b.n	8013078 <_dtoa_r+0x910>
 801308e:	9b04      	ldr	r3, [sp, #16]
 8013090:	2b00      	cmp	r3, #0
 8013092:	dc37      	bgt.n	8013104 <_dtoa_r+0x99c>
 8013094:	9b07      	ldr	r3, [sp, #28]
 8013096:	2b02      	cmp	r3, #2
 8013098:	dd34      	ble.n	8013104 <_dtoa_r+0x99c>
 801309a:	9b04      	ldr	r3, [sp, #16]
 801309c:	9301      	str	r3, [sp, #4]
 801309e:	9b01      	ldr	r3, [sp, #4]
 80130a0:	b963      	cbnz	r3, 80130bc <_dtoa_r+0x954>
 80130a2:	4631      	mov	r1, r6
 80130a4:	2205      	movs	r2, #5
 80130a6:	4620      	mov	r0, r4
 80130a8:	f000 fab2 	bl	8013610 <__multadd>
 80130ac:	4601      	mov	r1, r0
 80130ae:	4606      	mov	r6, r0
 80130b0:	4650      	mov	r0, sl
 80130b2:	f000 fcc7 	bl	8013a44 <__mcmp>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	f73f adbb 	bgt.w	8012c32 <_dtoa_r+0x4ca>
 80130bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130be:	9d00      	ldr	r5, [sp, #0]
 80130c0:	ea6f 0b03 	mvn.w	fp, r3
 80130c4:	f04f 0800 	mov.w	r8, #0
 80130c8:	4631      	mov	r1, r6
 80130ca:	4620      	mov	r0, r4
 80130cc:	f000 fa7e 	bl	80135cc <_Bfree>
 80130d0:	2f00      	cmp	r7, #0
 80130d2:	f43f aeab 	beq.w	8012e2c <_dtoa_r+0x6c4>
 80130d6:	f1b8 0f00 	cmp.w	r8, #0
 80130da:	d005      	beq.n	80130e8 <_dtoa_r+0x980>
 80130dc:	45b8      	cmp	r8, r7
 80130de:	d003      	beq.n	80130e8 <_dtoa_r+0x980>
 80130e0:	4641      	mov	r1, r8
 80130e2:	4620      	mov	r0, r4
 80130e4:	f000 fa72 	bl	80135cc <_Bfree>
 80130e8:	4639      	mov	r1, r7
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 fa6e 	bl	80135cc <_Bfree>
 80130f0:	e69c      	b.n	8012e2c <_dtoa_r+0x6c4>
 80130f2:	2600      	movs	r6, #0
 80130f4:	4637      	mov	r7, r6
 80130f6:	e7e1      	b.n	80130bc <_dtoa_r+0x954>
 80130f8:	46bb      	mov	fp, r7
 80130fa:	4637      	mov	r7, r6
 80130fc:	e599      	b.n	8012c32 <_dtoa_r+0x4ca>
 80130fe:	bf00      	nop
 8013100:	40240000 	.word	0x40240000
 8013104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013106:	2b00      	cmp	r3, #0
 8013108:	f000 80c8 	beq.w	801329c <_dtoa_r+0xb34>
 801310c:	9b04      	ldr	r3, [sp, #16]
 801310e:	9301      	str	r3, [sp, #4]
 8013110:	2d00      	cmp	r5, #0
 8013112:	dd05      	ble.n	8013120 <_dtoa_r+0x9b8>
 8013114:	4639      	mov	r1, r7
 8013116:	462a      	mov	r2, r5
 8013118:	4620      	mov	r0, r4
 801311a:	f000 fc27 	bl	801396c <__lshift>
 801311e:	4607      	mov	r7, r0
 8013120:	f1b8 0f00 	cmp.w	r8, #0
 8013124:	d05b      	beq.n	80131de <_dtoa_r+0xa76>
 8013126:	6879      	ldr	r1, [r7, #4]
 8013128:	4620      	mov	r0, r4
 801312a:	f000 fa0f 	bl	801354c <_Balloc>
 801312e:	4605      	mov	r5, r0
 8013130:	b928      	cbnz	r0, 801313e <_dtoa_r+0x9d6>
 8013132:	4b83      	ldr	r3, [pc, #524]	; (8013340 <_dtoa_r+0xbd8>)
 8013134:	4602      	mov	r2, r0
 8013136:	f240 21ef 	movw	r1, #751	; 0x2ef
 801313a:	f7ff bb2e 	b.w	801279a <_dtoa_r+0x32>
 801313e:	693a      	ldr	r2, [r7, #16]
 8013140:	3202      	adds	r2, #2
 8013142:	0092      	lsls	r2, r2, #2
 8013144:	f107 010c 	add.w	r1, r7, #12
 8013148:	300c      	adds	r0, #12
 801314a:	f7ff fa76 	bl	801263a <memcpy>
 801314e:	2201      	movs	r2, #1
 8013150:	4629      	mov	r1, r5
 8013152:	4620      	mov	r0, r4
 8013154:	f000 fc0a 	bl	801396c <__lshift>
 8013158:	9b00      	ldr	r3, [sp, #0]
 801315a:	3301      	adds	r3, #1
 801315c:	9304      	str	r3, [sp, #16]
 801315e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013162:	4413      	add	r3, r2
 8013164:	9308      	str	r3, [sp, #32]
 8013166:	9b02      	ldr	r3, [sp, #8]
 8013168:	f003 0301 	and.w	r3, r3, #1
 801316c:	46b8      	mov	r8, r7
 801316e:	9306      	str	r3, [sp, #24]
 8013170:	4607      	mov	r7, r0
 8013172:	9b04      	ldr	r3, [sp, #16]
 8013174:	4631      	mov	r1, r6
 8013176:	3b01      	subs	r3, #1
 8013178:	4650      	mov	r0, sl
 801317a:	9301      	str	r3, [sp, #4]
 801317c:	f7ff fa6b 	bl	8012656 <quorem>
 8013180:	4641      	mov	r1, r8
 8013182:	9002      	str	r0, [sp, #8]
 8013184:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013188:	4650      	mov	r0, sl
 801318a:	f000 fc5b 	bl	8013a44 <__mcmp>
 801318e:	463a      	mov	r2, r7
 8013190:	9005      	str	r0, [sp, #20]
 8013192:	4631      	mov	r1, r6
 8013194:	4620      	mov	r0, r4
 8013196:	f000 fc71 	bl	8013a7c <__mdiff>
 801319a:	68c2      	ldr	r2, [r0, #12]
 801319c:	4605      	mov	r5, r0
 801319e:	bb02      	cbnz	r2, 80131e2 <_dtoa_r+0xa7a>
 80131a0:	4601      	mov	r1, r0
 80131a2:	4650      	mov	r0, sl
 80131a4:	f000 fc4e 	bl	8013a44 <__mcmp>
 80131a8:	4602      	mov	r2, r0
 80131aa:	4629      	mov	r1, r5
 80131ac:	4620      	mov	r0, r4
 80131ae:	9209      	str	r2, [sp, #36]	; 0x24
 80131b0:	f000 fa0c 	bl	80135cc <_Bfree>
 80131b4:	9b07      	ldr	r3, [sp, #28]
 80131b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131b8:	9d04      	ldr	r5, [sp, #16]
 80131ba:	ea43 0102 	orr.w	r1, r3, r2
 80131be:	9b06      	ldr	r3, [sp, #24]
 80131c0:	4319      	orrs	r1, r3
 80131c2:	d110      	bne.n	80131e6 <_dtoa_r+0xa7e>
 80131c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80131c8:	d029      	beq.n	801321e <_dtoa_r+0xab6>
 80131ca:	9b05      	ldr	r3, [sp, #20]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	dd02      	ble.n	80131d6 <_dtoa_r+0xa6e>
 80131d0:	9b02      	ldr	r3, [sp, #8]
 80131d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80131d6:	9b01      	ldr	r3, [sp, #4]
 80131d8:	f883 9000 	strb.w	r9, [r3]
 80131dc:	e774      	b.n	80130c8 <_dtoa_r+0x960>
 80131de:	4638      	mov	r0, r7
 80131e0:	e7ba      	b.n	8013158 <_dtoa_r+0x9f0>
 80131e2:	2201      	movs	r2, #1
 80131e4:	e7e1      	b.n	80131aa <_dtoa_r+0xa42>
 80131e6:	9b05      	ldr	r3, [sp, #20]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	db04      	blt.n	80131f6 <_dtoa_r+0xa8e>
 80131ec:	9907      	ldr	r1, [sp, #28]
 80131ee:	430b      	orrs	r3, r1
 80131f0:	9906      	ldr	r1, [sp, #24]
 80131f2:	430b      	orrs	r3, r1
 80131f4:	d120      	bne.n	8013238 <_dtoa_r+0xad0>
 80131f6:	2a00      	cmp	r2, #0
 80131f8:	dded      	ble.n	80131d6 <_dtoa_r+0xa6e>
 80131fa:	4651      	mov	r1, sl
 80131fc:	2201      	movs	r2, #1
 80131fe:	4620      	mov	r0, r4
 8013200:	f000 fbb4 	bl	801396c <__lshift>
 8013204:	4631      	mov	r1, r6
 8013206:	4682      	mov	sl, r0
 8013208:	f000 fc1c 	bl	8013a44 <__mcmp>
 801320c:	2800      	cmp	r0, #0
 801320e:	dc03      	bgt.n	8013218 <_dtoa_r+0xab0>
 8013210:	d1e1      	bne.n	80131d6 <_dtoa_r+0xa6e>
 8013212:	f019 0f01 	tst.w	r9, #1
 8013216:	d0de      	beq.n	80131d6 <_dtoa_r+0xa6e>
 8013218:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801321c:	d1d8      	bne.n	80131d0 <_dtoa_r+0xa68>
 801321e:	9a01      	ldr	r2, [sp, #4]
 8013220:	2339      	movs	r3, #57	; 0x39
 8013222:	7013      	strb	r3, [r2, #0]
 8013224:	462b      	mov	r3, r5
 8013226:	461d      	mov	r5, r3
 8013228:	3b01      	subs	r3, #1
 801322a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801322e:	2a39      	cmp	r2, #57	; 0x39
 8013230:	d06c      	beq.n	801330c <_dtoa_r+0xba4>
 8013232:	3201      	adds	r2, #1
 8013234:	701a      	strb	r2, [r3, #0]
 8013236:	e747      	b.n	80130c8 <_dtoa_r+0x960>
 8013238:	2a00      	cmp	r2, #0
 801323a:	dd07      	ble.n	801324c <_dtoa_r+0xae4>
 801323c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013240:	d0ed      	beq.n	801321e <_dtoa_r+0xab6>
 8013242:	9a01      	ldr	r2, [sp, #4]
 8013244:	f109 0301 	add.w	r3, r9, #1
 8013248:	7013      	strb	r3, [r2, #0]
 801324a:	e73d      	b.n	80130c8 <_dtoa_r+0x960>
 801324c:	9b04      	ldr	r3, [sp, #16]
 801324e:	9a08      	ldr	r2, [sp, #32]
 8013250:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013254:	4293      	cmp	r3, r2
 8013256:	d043      	beq.n	80132e0 <_dtoa_r+0xb78>
 8013258:	4651      	mov	r1, sl
 801325a:	2300      	movs	r3, #0
 801325c:	220a      	movs	r2, #10
 801325e:	4620      	mov	r0, r4
 8013260:	f000 f9d6 	bl	8013610 <__multadd>
 8013264:	45b8      	cmp	r8, r7
 8013266:	4682      	mov	sl, r0
 8013268:	f04f 0300 	mov.w	r3, #0
 801326c:	f04f 020a 	mov.w	r2, #10
 8013270:	4641      	mov	r1, r8
 8013272:	4620      	mov	r0, r4
 8013274:	d107      	bne.n	8013286 <_dtoa_r+0xb1e>
 8013276:	f000 f9cb 	bl	8013610 <__multadd>
 801327a:	4680      	mov	r8, r0
 801327c:	4607      	mov	r7, r0
 801327e:	9b04      	ldr	r3, [sp, #16]
 8013280:	3301      	adds	r3, #1
 8013282:	9304      	str	r3, [sp, #16]
 8013284:	e775      	b.n	8013172 <_dtoa_r+0xa0a>
 8013286:	f000 f9c3 	bl	8013610 <__multadd>
 801328a:	4639      	mov	r1, r7
 801328c:	4680      	mov	r8, r0
 801328e:	2300      	movs	r3, #0
 8013290:	220a      	movs	r2, #10
 8013292:	4620      	mov	r0, r4
 8013294:	f000 f9bc 	bl	8013610 <__multadd>
 8013298:	4607      	mov	r7, r0
 801329a:	e7f0      	b.n	801327e <_dtoa_r+0xb16>
 801329c:	9b04      	ldr	r3, [sp, #16]
 801329e:	9301      	str	r3, [sp, #4]
 80132a0:	9d00      	ldr	r5, [sp, #0]
 80132a2:	4631      	mov	r1, r6
 80132a4:	4650      	mov	r0, sl
 80132a6:	f7ff f9d6 	bl	8012656 <quorem>
 80132aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80132ae:	9b00      	ldr	r3, [sp, #0]
 80132b0:	f805 9b01 	strb.w	r9, [r5], #1
 80132b4:	1aea      	subs	r2, r5, r3
 80132b6:	9b01      	ldr	r3, [sp, #4]
 80132b8:	4293      	cmp	r3, r2
 80132ba:	dd07      	ble.n	80132cc <_dtoa_r+0xb64>
 80132bc:	4651      	mov	r1, sl
 80132be:	2300      	movs	r3, #0
 80132c0:	220a      	movs	r2, #10
 80132c2:	4620      	mov	r0, r4
 80132c4:	f000 f9a4 	bl	8013610 <__multadd>
 80132c8:	4682      	mov	sl, r0
 80132ca:	e7ea      	b.n	80132a2 <_dtoa_r+0xb3a>
 80132cc:	9b01      	ldr	r3, [sp, #4]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	bfc8      	it	gt
 80132d2:	461d      	movgt	r5, r3
 80132d4:	9b00      	ldr	r3, [sp, #0]
 80132d6:	bfd8      	it	le
 80132d8:	2501      	movle	r5, #1
 80132da:	441d      	add	r5, r3
 80132dc:	f04f 0800 	mov.w	r8, #0
 80132e0:	4651      	mov	r1, sl
 80132e2:	2201      	movs	r2, #1
 80132e4:	4620      	mov	r0, r4
 80132e6:	f000 fb41 	bl	801396c <__lshift>
 80132ea:	4631      	mov	r1, r6
 80132ec:	4682      	mov	sl, r0
 80132ee:	f000 fba9 	bl	8013a44 <__mcmp>
 80132f2:	2800      	cmp	r0, #0
 80132f4:	dc96      	bgt.n	8013224 <_dtoa_r+0xabc>
 80132f6:	d102      	bne.n	80132fe <_dtoa_r+0xb96>
 80132f8:	f019 0f01 	tst.w	r9, #1
 80132fc:	d192      	bne.n	8013224 <_dtoa_r+0xabc>
 80132fe:	462b      	mov	r3, r5
 8013300:	461d      	mov	r5, r3
 8013302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013306:	2a30      	cmp	r2, #48	; 0x30
 8013308:	d0fa      	beq.n	8013300 <_dtoa_r+0xb98>
 801330a:	e6dd      	b.n	80130c8 <_dtoa_r+0x960>
 801330c:	9a00      	ldr	r2, [sp, #0]
 801330e:	429a      	cmp	r2, r3
 8013310:	d189      	bne.n	8013226 <_dtoa_r+0xabe>
 8013312:	f10b 0b01 	add.w	fp, fp, #1
 8013316:	2331      	movs	r3, #49	; 0x31
 8013318:	e796      	b.n	8013248 <_dtoa_r+0xae0>
 801331a:	4b0a      	ldr	r3, [pc, #40]	; (8013344 <_dtoa_r+0xbdc>)
 801331c:	f7ff ba99 	b.w	8012852 <_dtoa_r+0xea>
 8013320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013322:	2b00      	cmp	r3, #0
 8013324:	f47f aa6d 	bne.w	8012802 <_dtoa_r+0x9a>
 8013328:	4b07      	ldr	r3, [pc, #28]	; (8013348 <_dtoa_r+0xbe0>)
 801332a:	f7ff ba92 	b.w	8012852 <_dtoa_r+0xea>
 801332e:	9b01      	ldr	r3, [sp, #4]
 8013330:	2b00      	cmp	r3, #0
 8013332:	dcb5      	bgt.n	80132a0 <_dtoa_r+0xb38>
 8013334:	9b07      	ldr	r3, [sp, #28]
 8013336:	2b02      	cmp	r3, #2
 8013338:	f73f aeb1 	bgt.w	801309e <_dtoa_r+0x936>
 801333c:	e7b0      	b.n	80132a0 <_dtoa_r+0xb38>
 801333e:	bf00      	nop
 8013340:	0801571c 	.word	0x0801571c
 8013344:	0801567c 	.word	0x0801567c
 8013348:	080156a0 	.word	0x080156a0

0801334c <_free_r>:
 801334c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801334e:	2900      	cmp	r1, #0
 8013350:	d044      	beq.n	80133dc <_free_r+0x90>
 8013352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013356:	9001      	str	r0, [sp, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	f1a1 0404 	sub.w	r4, r1, #4
 801335e:	bfb8      	it	lt
 8013360:	18e4      	addlt	r4, r4, r3
 8013362:	f000 f8e7 	bl	8013534 <__malloc_lock>
 8013366:	4a1e      	ldr	r2, [pc, #120]	; (80133e0 <_free_r+0x94>)
 8013368:	9801      	ldr	r0, [sp, #4]
 801336a:	6813      	ldr	r3, [r2, #0]
 801336c:	b933      	cbnz	r3, 801337c <_free_r+0x30>
 801336e:	6063      	str	r3, [r4, #4]
 8013370:	6014      	str	r4, [r2, #0]
 8013372:	b003      	add	sp, #12
 8013374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013378:	f000 b8e2 	b.w	8013540 <__malloc_unlock>
 801337c:	42a3      	cmp	r3, r4
 801337e:	d908      	bls.n	8013392 <_free_r+0x46>
 8013380:	6825      	ldr	r5, [r4, #0]
 8013382:	1961      	adds	r1, r4, r5
 8013384:	428b      	cmp	r3, r1
 8013386:	bf01      	itttt	eq
 8013388:	6819      	ldreq	r1, [r3, #0]
 801338a:	685b      	ldreq	r3, [r3, #4]
 801338c:	1949      	addeq	r1, r1, r5
 801338e:	6021      	streq	r1, [r4, #0]
 8013390:	e7ed      	b.n	801336e <_free_r+0x22>
 8013392:	461a      	mov	r2, r3
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	b10b      	cbz	r3, 801339c <_free_r+0x50>
 8013398:	42a3      	cmp	r3, r4
 801339a:	d9fa      	bls.n	8013392 <_free_r+0x46>
 801339c:	6811      	ldr	r1, [r2, #0]
 801339e:	1855      	adds	r5, r2, r1
 80133a0:	42a5      	cmp	r5, r4
 80133a2:	d10b      	bne.n	80133bc <_free_r+0x70>
 80133a4:	6824      	ldr	r4, [r4, #0]
 80133a6:	4421      	add	r1, r4
 80133a8:	1854      	adds	r4, r2, r1
 80133aa:	42a3      	cmp	r3, r4
 80133ac:	6011      	str	r1, [r2, #0]
 80133ae:	d1e0      	bne.n	8013372 <_free_r+0x26>
 80133b0:	681c      	ldr	r4, [r3, #0]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	6053      	str	r3, [r2, #4]
 80133b6:	440c      	add	r4, r1
 80133b8:	6014      	str	r4, [r2, #0]
 80133ba:	e7da      	b.n	8013372 <_free_r+0x26>
 80133bc:	d902      	bls.n	80133c4 <_free_r+0x78>
 80133be:	230c      	movs	r3, #12
 80133c0:	6003      	str	r3, [r0, #0]
 80133c2:	e7d6      	b.n	8013372 <_free_r+0x26>
 80133c4:	6825      	ldr	r5, [r4, #0]
 80133c6:	1961      	adds	r1, r4, r5
 80133c8:	428b      	cmp	r3, r1
 80133ca:	bf04      	itt	eq
 80133cc:	6819      	ldreq	r1, [r3, #0]
 80133ce:	685b      	ldreq	r3, [r3, #4]
 80133d0:	6063      	str	r3, [r4, #4]
 80133d2:	bf04      	itt	eq
 80133d4:	1949      	addeq	r1, r1, r5
 80133d6:	6021      	streq	r1, [r4, #0]
 80133d8:	6054      	str	r4, [r2, #4]
 80133da:	e7ca      	b.n	8013372 <_free_r+0x26>
 80133dc:	b003      	add	sp, #12
 80133de:	bd30      	pop	{r4, r5, pc}
 80133e0:	20005ff8 	.word	0x20005ff8

080133e4 <malloc>:
 80133e4:	4b02      	ldr	r3, [pc, #8]	; (80133f0 <malloc+0xc>)
 80133e6:	4601      	mov	r1, r0
 80133e8:	6818      	ldr	r0, [r3, #0]
 80133ea:	f000 b823 	b.w	8013434 <_malloc_r>
 80133ee:	bf00      	nop
 80133f0:	200001e0 	.word	0x200001e0

080133f4 <sbrk_aligned>:
 80133f4:	b570      	push	{r4, r5, r6, lr}
 80133f6:	4e0e      	ldr	r6, [pc, #56]	; (8013430 <sbrk_aligned+0x3c>)
 80133f8:	460c      	mov	r4, r1
 80133fa:	6831      	ldr	r1, [r6, #0]
 80133fc:	4605      	mov	r5, r0
 80133fe:	b911      	cbnz	r1, 8013406 <sbrk_aligned+0x12>
 8013400:	f000 fe40 	bl	8014084 <_sbrk_r>
 8013404:	6030      	str	r0, [r6, #0]
 8013406:	4621      	mov	r1, r4
 8013408:	4628      	mov	r0, r5
 801340a:	f000 fe3b 	bl	8014084 <_sbrk_r>
 801340e:	1c43      	adds	r3, r0, #1
 8013410:	d00a      	beq.n	8013428 <sbrk_aligned+0x34>
 8013412:	1cc4      	adds	r4, r0, #3
 8013414:	f024 0403 	bic.w	r4, r4, #3
 8013418:	42a0      	cmp	r0, r4
 801341a:	d007      	beq.n	801342c <sbrk_aligned+0x38>
 801341c:	1a21      	subs	r1, r4, r0
 801341e:	4628      	mov	r0, r5
 8013420:	f000 fe30 	bl	8014084 <_sbrk_r>
 8013424:	3001      	adds	r0, #1
 8013426:	d101      	bne.n	801342c <sbrk_aligned+0x38>
 8013428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801342c:	4620      	mov	r0, r4
 801342e:	bd70      	pop	{r4, r5, r6, pc}
 8013430:	20005ffc 	.word	0x20005ffc

08013434 <_malloc_r>:
 8013434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013438:	1ccd      	adds	r5, r1, #3
 801343a:	f025 0503 	bic.w	r5, r5, #3
 801343e:	3508      	adds	r5, #8
 8013440:	2d0c      	cmp	r5, #12
 8013442:	bf38      	it	cc
 8013444:	250c      	movcc	r5, #12
 8013446:	2d00      	cmp	r5, #0
 8013448:	4607      	mov	r7, r0
 801344a:	db01      	blt.n	8013450 <_malloc_r+0x1c>
 801344c:	42a9      	cmp	r1, r5
 801344e:	d905      	bls.n	801345c <_malloc_r+0x28>
 8013450:	230c      	movs	r3, #12
 8013452:	603b      	str	r3, [r7, #0]
 8013454:	2600      	movs	r6, #0
 8013456:	4630      	mov	r0, r6
 8013458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801345c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013530 <_malloc_r+0xfc>
 8013460:	f000 f868 	bl	8013534 <__malloc_lock>
 8013464:	f8d8 3000 	ldr.w	r3, [r8]
 8013468:	461c      	mov	r4, r3
 801346a:	bb5c      	cbnz	r4, 80134c4 <_malloc_r+0x90>
 801346c:	4629      	mov	r1, r5
 801346e:	4638      	mov	r0, r7
 8013470:	f7ff ffc0 	bl	80133f4 <sbrk_aligned>
 8013474:	1c43      	adds	r3, r0, #1
 8013476:	4604      	mov	r4, r0
 8013478:	d155      	bne.n	8013526 <_malloc_r+0xf2>
 801347a:	f8d8 4000 	ldr.w	r4, [r8]
 801347e:	4626      	mov	r6, r4
 8013480:	2e00      	cmp	r6, #0
 8013482:	d145      	bne.n	8013510 <_malloc_r+0xdc>
 8013484:	2c00      	cmp	r4, #0
 8013486:	d048      	beq.n	801351a <_malloc_r+0xe6>
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	4631      	mov	r1, r6
 801348c:	4638      	mov	r0, r7
 801348e:	eb04 0903 	add.w	r9, r4, r3
 8013492:	f000 fdf7 	bl	8014084 <_sbrk_r>
 8013496:	4581      	cmp	r9, r0
 8013498:	d13f      	bne.n	801351a <_malloc_r+0xe6>
 801349a:	6821      	ldr	r1, [r4, #0]
 801349c:	1a6d      	subs	r5, r5, r1
 801349e:	4629      	mov	r1, r5
 80134a0:	4638      	mov	r0, r7
 80134a2:	f7ff ffa7 	bl	80133f4 <sbrk_aligned>
 80134a6:	3001      	adds	r0, #1
 80134a8:	d037      	beq.n	801351a <_malloc_r+0xe6>
 80134aa:	6823      	ldr	r3, [r4, #0]
 80134ac:	442b      	add	r3, r5
 80134ae:	6023      	str	r3, [r4, #0]
 80134b0:	f8d8 3000 	ldr.w	r3, [r8]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d038      	beq.n	801352a <_malloc_r+0xf6>
 80134b8:	685a      	ldr	r2, [r3, #4]
 80134ba:	42a2      	cmp	r2, r4
 80134bc:	d12b      	bne.n	8013516 <_malloc_r+0xe2>
 80134be:	2200      	movs	r2, #0
 80134c0:	605a      	str	r2, [r3, #4]
 80134c2:	e00f      	b.n	80134e4 <_malloc_r+0xb0>
 80134c4:	6822      	ldr	r2, [r4, #0]
 80134c6:	1b52      	subs	r2, r2, r5
 80134c8:	d41f      	bmi.n	801350a <_malloc_r+0xd6>
 80134ca:	2a0b      	cmp	r2, #11
 80134cc:	d917      	bls.n	80134fe <_malloc_r+0xca>
 80134ce:	1961      	adds	r1, r4, r5
 80134d0:	42a3      	cmp	r3, r4
 80134d2:	6025      	str	r5, [r4, #0]
 80134d4:	bf18      	it	ne
 80134d6:	6059      	strne	r1, [r3, #4]
 80134d8:	6863      	ldr	r3, [r4, #4]
 80134da:	bf08      	it	eq
 80134dc:	f8c8 1000 	streq.w	r1, [r8]
 80134e0:	5162      	str	r2, [r4, r5]
 80134e2:	604b      	str	r3, [r1, #4]
 80134e4:	4638      	mov	r0, r7
 80134e6:	f104 060b 	add.w	r6, r4, #11
 80134ea:	f000 f829 	bl	8013540 <__malloc_unlock>
 80134ee:	f026 0607 	bic.w	r6, r6, #7
 80134f2:	1d23      	adds	r3, r4, #4
 80134f4:	1af2      	subs	r2, r6, r3
 80134f6:	d0ae      	beq.n	8013456 <_malloc_r+0x22>
 80134f8:	1b9b      	subs	r3, r3, r6
 80134fa:	50a3      	str	r3, [r4, r2]
 80134fc:	e7ab      	b.n	8013456 <_malloc_r+0x22>
 80134fe:	42a3      	cmp	r3, r4
 8013500:	6862      	ldr	r2, [r4, #4]
 8013502:	d1dd      	bne.n	80134c0 <_malloc_r+0x8c>
 8013504:	f8c8 2000 	str.w	r2, [r8]
 8013508:	e7ec      	b.n	80134e4 <_malloc_r+0xb0>
 801350a:	4623      	mov	r3, r4
 801350c:	6864      	ldr	r4, [r4, #4]
 801350e:	e7ac      	b.n	801346a <_malloc_r+0x36>
 8013510:	4634      	mov	r4, r6
 8013512:	6876      	ldr	r6, [r6, #4]
 8013514:	e7b4      	b.n	8013480 <_malloc_r+0x4c>
 8013516:	4613      	mov	r3, r2
 8013518:	e7cc      	b.n	80134b4 <_malloc_r+0x80>
 801351a:	230c      	movs	r3, #12
 801351c:	603b      	str	r3, [r7, #0]
 801351e:	4638      	mov	r0, r7
 8013520:	f000 f80e 	bl	8013540 <__malloc_unlock>
 8013524:	e797      	b.n	8013456 <_malloc_r+0x22>
 8013526:	6025      	str	r5, [r4, #0]
 8013528:	e7dc      	b.n	80134e4 <_malloc_r+0xb0>
 801352a:	605b      	str	r3, [r3, #4]
 801352c:	deff      	udf	#255	; 0xff
 801352e:	bf00      	nop
 8013530:	20005ff8 	.word	0x20005ff8

08013534 <__malloc_lock>:
 8013534:	4801      	ldr	r0, [pc, #4]	; (801353c <__malloc_lock+0x8>)
 8013536:	f7ff b87e 	b.w	8012636 <__retarget_lock_acquire_recursive>
 801353a:	bf00      	nop
 801353c:	20005ff4 	.word	0x20005ff4

08013540 <__malloc_unlock>:
 8013540:	4801      	ldr	r0, [pc, #4]	; (8013548 <__malloc_unlock+0x8>)
 8013542:	f7ff b879 	b.w	8012638 <__retarget_lock_release_recursive>
 8013546:	bf00      	nop
 8013548:	20005ff4 	.word	0x20005ff4

0801354c <_Balloc>:
 801354c:	b570      	push	{r4, r5, r6, lr}
 801354e:	69c6      	ldr	r6, [r0, #28]
 8013550:	4604      	mov	r4, r0
 8013552:	460d      	mov	r5, r1
 8013554:	b976      	cbnz	r6, 8013574 <_Balloc+0x28>
 8013556:	2010      	movs	r0, #16
 8013558:	f7ff ff44 	bl	80133e4 <malloc>
 801355c:	4602      	mov	r2, r0
 801355e:	61e0      	str	r0, [r4, #28]
 8013560:	b920      	cbnz	r0, 801356c <_Balloc+0x20>
 8013562:	4b18      	ldr	r3, [pc, #96]	; (80135c4 <_Balloc+0x78>)
 8013564:	4818      	ldr	r0, [pc, #96]	; (80135c8 <_Balloc+0x7c>)
 8013566:	216b      	movs	r1, #107	; 0x6b
 8013568:	f000 fd9c 	bl	80140a4 <__assert_func>
 801356c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013570:	6006      	str	r6, [r0, #0]
 8013572:	60c6      	str	r6, [r0, #12]
 8013574:	69e6      	ldr	r6, [r4, #28]
 8013576:	68f3      	ldr	r3, [r6, #12]
 8013578:	b183      	cbz	r3, 801359c <_Balloc+0x50>
 801357a:	69e3      	ldr	r3, [r4, #28]
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013582:	b9b8      	cbnz	r0, 80135b4 <_Balloc+0x68>
 8013584:	2101      	movs	r1, #1
 8013586:	fa01 f605 	lsl.w	r6, r1, r5
 801358a:	1d72      	adds	r2, r6, #5
 801358c:	0092      	lsls	r2, r2, #2
 801358e:	4620      	mov	r0, r4
 8013590:	f000 fda6 	bl	80140e0 <_calloc_r>
 8013594:	b160      	cbz	r0, 80135b0 <_Balloc+0x64>
 8013596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801359a:	e00e      	b.n	80135ba <_Balloc+0x6e>
 801359c:	2221      	movs	r2, #33	; 0x21
 801359e:	2104      	movs	r1, #4
 80135a0:	4620      	mov	r0, r4
 80135a2:	f000 fd9d 	bl	80140e0 <_calloc_r>
 80135a6:	69e3      	ldr	r3, [r4, #28]
 80135a8:	60f0      	str	r0, [r6, #12]
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d1e4      	bne.n	801357a <_Balloc+0x2e>
 80135b0:	2000      	movs	r0, #0
 80135b2:	bd70      	pop	{r4, r5, r6, pc}
 80135b4:	6802      	ldr	r2, [r0, #0]
 80135b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80135ba:	2300      	movs	r3, #0
 80135bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80135c0:	e7f7      	b.n	80135b2 <_Balloc+0x66>
 80135c2:	bf00      	nop
 80135c4:	080156ad 	.word	0x080156ad
 80135c8:	0801572d 	.word	0x0801572d

080135cc <_Bfree>:
 80135cc:	b570      	push	{r4, r5, r6, lr}
 80135ce:	69c6      	ldr	r6, [r0, #28]
 80135d0:	4605      	mov	r5, r0
 80135d2:	460c      	mov	r4, r1
 80135d4:	b976      	cbnz	r6, 80135f4 <_Bfree+0x28>
 80135d6:	2010      	movs	r0, #16
 80135d8:	f7ff ff04 	bl	80133e4 <malloc>
 80135dc:	4602      	mov	r2, r0
 80135de:	61e8      	str	r0, [r5, #28]
 80135e0:	b920      	cbnz	r0, 80135ec <_Bfree+0x20>
 80135e2:	4b09      	ldr	r3, [pc, #36]	; (8013608 <_Bfree+0x3c>)
 80135e4:	4809      	ldr	r0, [pc, #36]	; (801360c <_Bfree+0x40>)
 80135e6:	218f      	movs	r1, #143	; 0x8f
 80135e8:	f000 fd5c 	bl	80140a4 <__assert_func>
 80135ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80135f0:	6006      	str	r6, [r0, #0]
 80135f2:	60c6      	str	r6, [r0, #12]
 80135f4:	b13c      	cbz	r4, 8013606 <_Bfree+0x3a>
 80135f6:	69eb      	ldr	r3, [r5, #28]
 80135f8:	6862      	ldr	r2, [r4, #4]
 80135fa:	68db      	ldr	r3, [r3, #12]
 80135fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013600:	6021      	str	r1, [r4, #0]
 8013602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013606:	bd70      	pop	{r4, r5, r6, pc}
 8013608:	080156ad 	.word	0x080156ad
 801360c:	0801572d 	.word	0x0801572d

08013610 <__multadd>:
 8013610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013614:	690d      	ldr	r5, [r1, #16]
 8013616:	4607      	mov	r7, r0
 8013618:	460c      	mov	r4, r1
 801361a:	461e      	mov	r6, r3
 801361c:	f101 0c14 	add.w	ip, r1, #20
 8013620:	2000      	movs	r0, #0
 8013622:	f8dc 3000 	ldr.w	r3, [ip]
 8013626:	b299      	uxth	r1, r3
 8013628:	fb02 6101 	mla	r1, r2, r1, r6
 801362c:	0c1e      	lsrs	r6, r3, #16
 801362e:	0c0b      	lsrs	r3, r1, #16
 8013630:	fb02 3306 	mla	r3, r2, r6, r3
 8013634:	b289      	uxth	r1, r1
 8013636:	3001      	adds	r0, #1
 8013638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801363c:	4285      	cmp	r5, r0
 801363e:	f84c 1b04 	str.w	r1, [ip], #4
 8013642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013646:	dcec      	bgt.n	8013622 <__multadd+0x12>
 8013648:	b30e      	cbz	r6, 801368e <__multadd+0x7e>
 801364a:	68a3      	ldr	r3, [r4, #8]
 801364c:	42ab      	cmp	r3, r5
 801364e:	dc19      	bgt.n	8013684 <__multadd+0x74>
 8013650:	6861      	ldr	r1, [r4, #4]
 8013652:	4638      	mov	r0, r7
 8013654:	3101      	adds	r1, #1
 8013656:	f7ff ff79 	bl	801354c <_Balloc>
 801365a:	4680      	mov	r8, r0
 801365c:	b928      	cbnz	r0, 801366a <__multadd+0x5a>
 801365e:	4602      	mov	r2, r0
 8013660:	4b0c      	ldr	r3, [pc, #48]	; (8013694 <__multadd+0x84>)
 8013662:	480d      	ldr	r0, [pc, #52]	; (8013698 <__multadd+0x88>)
 8013664:	21ba      	movs	r1, #186	; 0xba
 8013666:	f000 fd1d 	bl	80140a4 <__assert_func>
 801366a:	6922      	ldr	r2, [r4, #16]
 801366c:	3202      	adds	r2, #2
 801366e:	f104 010c 	add.w	r1, r4, #12
 8013672:	0092      	lsls	r2, r2, #2
 8013674:	300c      	adds	r0, #12
 8013676:	f7fe ffe0 	bl	801263a <memcpy>
 801367a:	4621      	mov	r1, r4
 801367c:	4638      	mov	r0, r7
 801367e:	f7ff ffa5 	bl	80135cc <_Bfree>
 8013682:	4644      	mov	r4, r8
 8013684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013688:	3501      	adds	r5, #1
 801368a:	615e      	str	r6, [r3, #20]
 801368c:	6125      	str	r5, [r4, #16]
 801368e:	4620      	mov	r0, r4
 8013690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013694:	0801571c 	.word	0x0801571c
 8013698:	0801572d 	.word	0x0801572d

0801369c <__hi0bits>:
 801369c:	0c03      	lsrs	r3, r0, #16
 801369e:	041b      	lsls	r3, r3, #16
 80136a0:	b9d3      	cbnz	r3, 80136d8 <__hi0bits+0x3c>
 80136a2:	0400      	lsls	r0, r0, #16
 80136a4:	2310      	movs	r3, #16
 80136a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80136aa:	bf04      	itt	eq
 80136ac:	0200      	lsleq	r0, r0, #8
 80136ae:	3308      	addeq	r3, #8
 80136b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80136b4:	bf04      	itt	eq
 80136b6:	0100      	lsleq	r0, r0, #4
 80136b8:	3304      	addeq	r3, #4
 80136ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80136be:	bf04      	itt	eq
 80136c0:	0080      	lsleq	r0, r0, #2
 80136c2:	3302      	addeq	r3, #2
 80136c4:	2800      	cmp	r0, #0
 80136c6:	db05      	blt.n	80136d4 <__hi0bits+0x38>
 80136c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80136cc:	f103 0301 	add.w	r3, r3, #1
 80136d0:	bf08      	it	eq
 80136d2:	2320      	moveq	r3, #32
 80136d4:	4618      	mov	r0, r3
 80136d6:	4770      	bx	lr
 80136d8:	2300      	movs	r3, #0
 80136da:	e7e4      	b.n	80136a6 <__hi0bits+0xa>

080136dc <__lo0bits>:
 80136dc:	6803      	ldr	r3, [r0, #0]
 80136de:	f013 0207 	ands.w	r2, r3, #7
 80136e2:	d00c      	beq.n	80136fe <__lo0bits+0x22>
 80136e4:	07d9      	lsls	r1, r3, #31
 80136e6:	d422      	bmi.n	801372e <__lo0bits+0x52>
 80136e8:	079a      	lsls	r2, r3, #30
 80136ea:	bf49      	itett	mi
 80136ec:	085b      	lsrmi	r3, r3, #1
 80136ee:	089b      	lsrpl	r3, r3, #2
 80136f0:	6003      	strmi	r3, [r0, #0]
 80136f2:	2201      	movmi	r2, #1
 80136f4:	bf5c      	itt	pl
 80136f6:	6003      	strpl	r3, [r0, #0]
 80136f8:	2202      	movpl	r2, #2
 80136fa:	4610      	mov	r0, r2
 80136fc:	4770      	bx	lr
 80136fe:	b299      	uxth	r1, r3
 8013700:	b909      	cbnz	r1, 8013706 <__lo0bits+0x2a>
 8013702:	0c1b      	lsrs	r3, r3, #16
 8013704:	2210      	movs	r2, #16
 8013706:	b2d9      	uxtb	r1, r3
 8013708:	b909      	cbnz	r1, 801370e <__lo0bits+0x32>
 801370a:	3208      	adds	r2, #8
 801370c:	0a1b      	lsrs	r3, r3, #8
 801370e:	0719      	lsls	r1, r3, #28
 8013710:	bf04      	itt	eq
 8013712:	091b      	lsreq	r3, r3, #4
 8013714:	3204      	addeq	r2, #4
 8013716:	0799      	lsls	r1, r3, #30
 8013718:	bf04      	itt	eq
 801371a:	089b      	lsreq	r3, r3, #2
 801371c:	3202      	addeq	r2, #2
 801371e:	07d9      	lsls	r1, r3, #31
 8013720:	d403      	bmi.n	801372a <__lo0bits+0x4e>
 8013722:	085b      	lsrs	r3, r3, #1
 8013724:	f102 0201 	add.w	r2, r2, #1
 8013728:	d003      	beq.n	8013732 <__lo0bits+0x56>
 801372a:	6003      	str	r3, [r0, #0]
 801372c:	e7e5      	b.n	80136fa <__lo0bits+0x1e>
 801372e:	2200      	movs	r2, #0
 8013730:	e7e3      	b.n	80136fa <__lo0bits+0x1e>
 8013732:	2220      	movs	r2, #32
 8013734:	e7e1      	b.n	80136fa <__lo0bits+0x1e>
	...

08013738 <__i2b>:
 8013738:	b510      	push	{r4, lr}
 801373a:	460c      	mov	r4, r1
 801373c:	2101      	movs	r1, #1
 801373e:	f7ff ff05 	bl	801354c <_Balloc>
 8013742:	4602      	mov	r2, r0
 8013744:	b928      	cbnz	r0, 8013752 <__i2b+0x1a>
 8013746:	4b05      	ldr	r3, [pc, #20]	; (801375c <__i2b+0x24>)
 8013748:	4805      	ldr	r0, [pc, #20]	; (8013760 <__i2b+0x28>)
 801374a:	f240 1145 	movw	r1, #325	; 0x145
 801374e:	f000 fca9 	bl	80140a4 <__assert_func>
 8013752:	2301      	movs	r3, #1
 8013754:	6144      	str	r4, [r0, #20]
 8013756:	6103      	str	r3, [r0, #16]
 8013758:	bd10      	pop	{r4, pc}
 801375a:	bf00      	nop
 801375c:	0801571c 	.word	0x0801571c
 8013760:	0801572d 	.word	0x0801572d

08013764 <__multiply>:
 8013764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013768:	4691      	mov	r9, r2
 801376a:	690a      	ldr	r2, [r1, #16]
 801376c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013770:	429a      	cmp	r2, r3
 8013772:	bfb8      	it	lt
 8013774:	460b      	movlt	r3, r1
 8013776:	460c      	mov	r4, r1
 8013778:	bfbc      	itt	lt
 801377a:	464c      	movlt	r4, r9
 801377c:	4699      	movlt	r9, r3
 801377e:	6927      	ldr	r7, [r4, #16]
 8013780:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013784:	68a3      	ldr	r3, [r4, #8]
 8013786:	6861      	ldr	r1, [r4, #4]
 8013788:	eb07 060a 	add.w	r6, r7, sl
 801378c:	42b3      	cmp	r3, r6
 801378e:	b085      	sub	sp, #20
 8013790:	bfb8      	it	lt
 8013792:	3101      	addlt	r1, #1
 8013794:	f7ff feda 	bl	801354c <_Balloc>
 8013798:	b930      	cbnz	r0, 80137a8 <__multiply+0x44>
 801379a:	4602      	mov	r2, r0
 801379c:	4b44      	ldr	r3, [pc, #272]	; (80138b0 <__multiply+0x14c>)
 801379e:	4845      	ldr	r0, [pc, #276]	; (80138b4 <__multiply+0x150>)
 80137a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80137a4:	f000 fc7e 	bl	80140a4 <__assert_func>
 80137a8:	f100 0514 	add.w	r5, r0, #20
 80137ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80137b0:	462b      	mov	r3, r5
 80137b2:	2200      	movs	r2, #0
 80137b4:	4543      	cmp	r3, r8
 80137b6:	d321      	bcc.n	80137fc <__multiply+0x98>
 80137b8:	f104 0314 	add.w	r3, r4, #20
 80137bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80137c0:	f109 0314 	add.w	r3, r9, #20
 80137c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80137c8:	9202      	str	r2, [sp, #8]
 80137ca:	1b3a      	subs	r2, r7, r4
 80137cc:	3a15      	subs	r2, #21
 80137ce:	f022 0203 	bic.w	r2, r2, #3
 80137d2:	3204      	adds	r2, #4
 80137d4:	f104 0115 	add.w	r1, r4, #21
 80137d8:	428f      	cmp	r7, r1
 80137da:	bf38      	it	cc
 80137dc:	2204      	movcc	r2, #4
 80137de:	9201      	str	r2, [sp, #4]
 80137e0:	9a02      	ldr	r2, [sp, #8]
 80137e2:	9303      	str	r3, [sp, #12]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d80c      	bhi.n	8013802 <__multiply+0x9e>
 80137e8:	2e00      	cmp	r6, #0
 80137ea:	dd03      	ble.n	80137f4 <__multiply+0x90>
 80137ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d05b      	beq.n	80138ac <__multiply+0x148>
 80137f4:	6106      	str	r6, [r0, #16]
 80137f6:	b005      	add	sp, #20
 80137f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137fc:	f843 2b04 	str.w	r2, [r3], #4
 8013800:	e7d8      	b.n	80137b4 <__multiply+0x50>
 8013802:	f8b3 a000 	ldrh.w	sl, [r3]
 8013806:	f1ba 0f00 	cmp.w	sl, #0
 801380a:	d024      	beq.n	8013856 <__multiply+0xf2>
 801380c:	f104 0e14 	add.w	lr, r4, #20
 8013810:	46a9      	mov	r9, r5
 8013812:	f04f 0c00 	mov.w	ip, #0
 8013816:	f85e 2b04 	ldr.w	r2, [lr], #4
 801381a:	f8d9 1000 	ldr.w	r1, [r9]
 801381e:	fa1f fb82 	uxth.w	fp, r2
 8013822:	b289      	uxth	r1, r1
 8013824:	fb0a 110b 	mla	r1, sl, fp, r1
 8013828:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801382c:	f8d9 2000 	ldr.w	r2, [r9]
 8013830:	4461      	add	r1, ip
 8013832:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013836:	fb0a c20b 	mla	r2, sl, fp, ip
 801383a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801383e:	b289      	uxth	r1, r1
 8013840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013844:	4577      	cmp	r7, lr
 8013846:	f849 1b04 	str.w	r1, [r9], #4
 801384a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801384e:	d8e2      	bhi.n	8013816 <__multiply+0xb2>
 8013850:	9a01      	ldr	r2, [sp, #4]
 8013852:	f845 c002 	str.w	ip, [r5, r2]
 8013856:	9a03      	ldr	r2, [sp, #12]
 8013858:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801385c:	3304      	adds	r3, #4
 801385e:	f1b9 0f00 	cmp.w	r9, #0
 8013862:	d021      	beq.n	80138a8 <__multiply+0x144>
 8013864:	6829      	ldr	r1, [r5, #0]
 8013866:	f104 0c14 	add.w	ip, r4, #20
 801386a:	46ae      	mov	lr, r5
 801386c:	f04f 0a00 	mov.w	sl, #0
 8013870:	f8bc b000 	ldrh.w	fp, [ip]
 8013874:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013878:	fb09 220b 	mla	r2, r9, fp, r2
 801387c:	4452      	add	r2, sl
 801387e:	b289      	uxth	r1, r1
 8013880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013884:	f84e 1b04 	str.w	r1, [lr], #4
 8013888:	f85c 1b04 	ldr.w	r1, [ip], #4
 801388c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013890:	f8be 1000 	ldrh.w	r1, [lr]
 8013894:	fb09 110a 	mla	r1, r9, sl, r1
 8013898:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801389c:	4567      	cmp	r7, ip
 801389e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80138a2:	d8e5      	bhi.n	8013870 <__multiply+0x10c>
 80138a4:	9a01      	ldr	r2, [sp, #4]
 80138a6:	50a9      	str	r1, [r5, r2]
 80138a8:	3504      	adds	r5, #4
 80138aa:	e799      	b.n	80137e0 <__multiply+0x7c>
 80138ac:	3e01      	subs	r6, #1
 80138ae:	e79b      	b.n	80137e8 <__multiply+0x84>
 80138b0:	0801571c 	.word	0x0801571c
 80138b4:	0801572d 	.word	0x0801572d

080138b8 <__pow5mult>:
 80138b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138bc:	4615      	mov	r5, r2
 80138be:	f012 0203 	ands.w	r2, r2, #3
 80138c2:	4606      	mov	r6, r0
 80138c4:	460f      	mov	r7, r1
 80138c6:	d007      	beq.n	80138d8 <__pow5mult+0x20>
 80138c8:	4c25      	ldr	r4, [pc, #148]	; (8013960 <__pow5mult+0xa8>)
 80138ca:	3a01      	subs	r2, #1
 80138cc:	2300      	movs	r3, #0
 80138ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80138d2:	f7ff fe9d 	bl	8013610 <__multadd>
 80138d6:	4607      	mov	r7, r0
 80138d8:	10ad      	asrs	r5, r5, #2
 80138da:	d03d      	beq.n	8013958 <__pow5mult+0xa0>
 80138dc:	69f4      	ldr	r4, [r6, #28]
 80138de:	b97c      	cbnz	r4, 8013900 <__pow5mult+0x48>
 80138e0:	2010      	movs	r0, #16
 80138e2:	f7ff fd7f 	bl	80133e4 <malloc>
 80138e6:	4602      	mov	r2, r0
 80138e8:	61f0      	str	r0, [r6, #28]
 80138ea:	b928      	cbnz	r0, 80138f8 <__pow5mult+0x40>
 80138ec:	4b1d      	ldr	r3, [pc, #116]	; (8013964 <__pow5mult+0xac>)
 80138ee:	481e      	ldr	r0, [pc, #120]	; (8013968 <__pow5mult+0xb0>)
 80138f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80138f4:	f000 fbd6 	bl	80140a4 <__assert_func>
 80138f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138fc:	6004      	str	r4, [r0, #0]
 80138fe:	60c4      	str	r4, [r0, #12]
 8013900:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013908:	b94c      	cbnz	r4, 801391e <__pow5mult+0x66>
 801390a:	f240 2171 	movw	r1, #625	; 0x271
 801390e:	4630      	mov	r0, r6
 8013910:	f7ff ff12 	bl	8013738 <__i2b>
 8013914:	2300      	movs	r3, #0
 8013916:	f8c8 0008 	str.w	r0, [r8, #8]
 801391a:	4604      	mov	r4, r0
 801391c:	6003      	str	r3, [r0, #0]
 801391e:	f04f 0900 	mov.w	r9, #0
 8013922:	07eb      	lsls	r3, r5, #31
 8013924:	d50a      	bpl.n	801393c <__pow5mult+0x84>
 8013926:	4639      	mov	r1, r7
 8013928:	4622      	mov	r2, r4
 801392a:	4630      	mov	r0, r6
 801392c:	f7ff ff1a 	bl	8013764 <__multiply>
 8013930:	4639      	mov	r1, r7
 8013932:	4680      	mov	r8, r0
 8013934:	4630      	mov	r0, r6
 8013936:	f7ff fe49 	bl	80135cc <_Bfree>
 801393a:	4647      	mov	r7, r8
 801393c:	106d      	asrs	r5, r5, #1
 801393e:	d00b      	beq.n	8013958 <__pow5mult+0xa0>
 8013940:	6820      	ldr	r0, [r4, #0]
 8013942:	b938      	cbnz	r0, 8013954 <__pow5mult+0x9c>
 8013944:	4622      	mov	r2, r4
 8013946:	4621      	mov	r1, r4
 8013948:	4630      	mov	r0, r6
 801394a:	f7ff ff0b 	bl	8013764 <__multiply>
 801394e:	6020      	str	r0, [r4, #0]
 8013950:	f8c0 9000 	str.w	r9, [r0]
 8013954:	4604      	mov	r4, r0
 8013956:	e7e4      	b.n	8013922 <__pow5mult+0x6a>
 8013958:	4638      	mov	r0, r7
 801395a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801395e:	bf00      	nop
 8013960:	08015878 	.word	0x08015878
 8013964:	080156ad 	.word	0x080156ad
 8013968:	0801572d 	.word	0x0801572d

0801396c <__lshift>:
 801396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013970:	460c      	mov	r4, r1
 8013972:	6849      	ldr	r1, [r1, #4]
 8013974:	6923      	ldr	r3, [r4, #16]
 8013976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801397a:	68a3      	ldr	r3, [r4, #8]
 801397c:	4607      	mov	r7, r0
 801397e:	4691      	mov	r9, r2
 8013980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013984:	f108 0601 	add.w	r6, r8, #1
 8013988:	42b3      	cmp	r3, r6
 801398a:	db0b      	blt.n	80139a4 <__lshift+0x38>
 801398c:	4638      	mov	r0, r7
 801398e:	f7ff fddd 	bl	801354c <_Balloc>
 8013992:	4605      	mov	r5, r0
 8013994:	b948      	cbnz	r0, 80139aa <__lshift+0x3e>
 8013996:	4602      	mov	r2, r0
 8013998:	4b28      	ldr	r3, [pc, #160]	; (8013a3c <__lshift+0xd0>)
 801399a:	4829      	ldr	r0, [pc, #164]	; (8013a40 <__lshift+0xd4>)
 801399c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80139a0:	f000 fb80 	bl	80140a4 <__assert_func>
 80139a4:	3101      	adds	r1, #1
 80139a6:	005b      	lsls	r3, r3, #1
 80139a8:	e7ee      	b.n	8013988 <__lshift+0x1c>
 80139aa:	2300      	movs	r3, #0
 80139ac:	f100 0114 	add.w	r1, r0, #20
 80139b0:	f100 0210 	add.w	r2, r0, #16
 80139b4:	4618      	mov	r0, r3
 80139b6:	4553      	cmp	r3, sl
 80139b8:	db33      	blt.n	8013a22 <__lshift+0xb6>
 80139ba:	6920      	ldr	r0, [r4, #16]
 80139bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80139c0:	f104 0314 	add.w	r3, r4, #20
 80139c4:	f019 091f 	ands.w	r9, r9, #31
 80139c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80139cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80139d0:	d02b      	beq.n	8013a2a <__lshift+0xbe>
 80139d2:	f1c9 0e20 	rsb	lr, r9, #32
 80139d6:	468a      	mov	sl, r1
 80139d8:	2200      	movs	r2, #0
 80139da:	6818      	ldr	r0, [r3, #0]
 80139dc:	fa00 f009 	lsl.w	r0, r0, r9
 80139e0:	4310      	orrs	r0, r2
 80139e2:	f84a 0b04 	str.w	r0, [sl], #4
 80139e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80139ea:	459c      	cmp	ip, r3
 80139ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80139f0:	d8f3      	bhi.n	80139da <__lshift+0x6e>
 80139f2:	ebac 0304 	sub.w	r3, ip, r4
 80139f6:	3b15      	subs	r3, #21
 80139f8:	f023 0303 	bic.w	r3, r3, #3
 80139fc:	3304      	adds	r3, #4
 80139fe:	f104 0015 	add.w	r0, r4, #21
 8013a02:	4584      	cmp	ip, r0
 8013a04:	bf38      	it	cc
 8013a06:	2304      	movcc	r3, #4
 8013a08:	50ca      	str	r2, [r1, r3]
 8013a0a:	b10a      	cbz	r2, 8013a10 <__lshift+0xa4>
 8013a0c:	f108 0602 	add.w	r6, r8, #2
 8013a10:	3e01      	subs	r6, #1
 8013a12:	4638      	mov	r0, r7
 8013a14:	612e      	str	r6, [r5, #16]
 8013a16:	4621      	mov	r1, r4
 8013a18:	f7ff fdd8 	bl	80135cc <_Bfree>
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8013a26:	3301      	adds	r3, #1
 8013a28:	e7c5      	b.n	80139b6 <__lshift+0x4a>
 8013a2a:	3904      	subs	r1, #4
 8013a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a34:	459c      	cmp	ip, r3
 8013a36:	d8f9      	bhi.n	8013a2c <__lshift+0xc0>
 8013a38:	e7ea      	b.n	8013a10 <__lshift+0xa4>
 8013a3a:	bf00      	nop
 8013a3c:	0801571c 	.word	0x0801571c
 8013a40:	0801572d 	.word	0x0801572d

08013a44 <__mcmp>:
 8013a44:	b530      	push	{r4, r5, lr}
 8013a46:	6902      	ldr	r2, [r0, #16]
 8013a48:	690c      	ldr	r4, [r1, #16]
 8013a4a:	1b12      	subs	r2, r2, r4
 8013a4c:	d10e      	bne.n	8013a6c <__mcmp+0x28>
 8013a4e:	f100 0314 	add.w	r3, r0, #20
 8013a52:	3114      	adds	r1, #20
 8013a54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013a58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013a5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013a60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013a64:	42a5      	cmp	r5, r4
 8013a66:	d003      	beq.n	8013a70 <__mcmp+0x2c>
 8013a68:	d305      	bcc.n	8013a76 <__mcmp+0x32>
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	4610      	mov	r0, r2
 8013a6e:	bd30      	pop	{r4, r5, pc}
 8013a70:	4283      	cmp	r3, r0
 8013a72:	d3f3      	bcc.n	8013a5c <__mcmp+0x18>
 8013a74:	e7fa      	b.n	8013a6c <__mcmp+0x28>
 8013a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a7a:	e7f7      	b.n	8013a6c <__mcmp+0x28>

08013a7c <__mdiff>:
 8013a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a80:	460c      	mov	r4, r1
 8013a82:	4606      	mov	r6, r0
 8013a84:	4611      	mov	r1, r2
 8013a86:	4620      	mov	r0, r4
 8013a88:	4690      	mov	r8, r2
 8013a8a:	f7ff ffdb 	bl	8013a44 <__mcmp>
 8013a8e:	1e05      	subs	r5, r0, #0
 8013a90:	d110      	bne.n	8013ab4 <__mdiff+0x38>
 8013a92:	4629      	mov	r1, r5
 8013a94:	4630      	mov	r0, r6
 8013a96:	f7ff fd59 	bl	801354c <_Balloc>
 8013a9a:	b930      	cbnz	r0, 8013aaa <__mdiff+0x2e>
 8013a9c:	4b3a      	ldr	r3, [pc, #232]	; (8013b88 <__mdiff+0x10c>)
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	f240 2137 	movw	r1, #567	; 0x237
 8013aa4:	4839      	ldr	r0, [pc, #228]	; (8013b8c <__mdiff+0x110>)
 8013aa6:	f000 fafd 	bl	80140a4 <__assert_func>
 8013aaa:	2301      	movs	r3, #1
 8013aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab4:	bfa4      	itt	ge
 8013ab6:	4643      	movge	r3, r8
 8013ab8:	46a0      	movge	r8, r4
 8013aba:	4630      	mov	r0, r6
 8013abc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013ac0:	bfa6      	itte	ge
 8013ac2:	461c      	movge	r4, r3
 8013ac4:	2500      	movge	r5, #0
 8013ac6:	2501      	movlt	r5, #1
 8013ac8:	f7ff fd40 	bl	801354c <_Balloc>
 8013acc:	b920      	cbnz	r0, 8013ad8 <__mdiff+0x5c>
 8013ace:	4b2e      	ldr	r3, [pc, #184]	; (8013b88 <__mdiff+0x10c>)
 8013ad0:	4602      	mov	r2, r0
 8013ad2:	f240 2145 	movw	r1, #581	; 0x245
 8013ad6:	e7e5      	b.n	8013aa4 <__mdiff+0x28>
 8013ad8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013adc:	6926      	ldr	r6, [r4, #16]
 8013ade:	60c5      	str	r5, [r0, #12]
 8013ae0:	f104 0914 	add.w	r9, r4, #20
 8013ae4:	f108 0514 	add.w	r5, r8, #20
 8013ae8:	f100 0e14 	add.w	lr, r0, #20
 8013aec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013af0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013af4:	f108 0210 	add.w	r2, r8, #16
 8013af8:	46f2      	mov	sl, lr
 8013afa:	2100      	movs	r1, #0
 8013afc:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013b04:	fa11 f88b 	uxtah	r8, r1, fp
 8013b08:	b299      	uxth	r1, r3
 8013b0a:	0c1b      	lsrs	r3, r3, #16
 8013b0c:	eba8 0801 	sub.w	r8, r8, r1
 8013b10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013b14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013b18:	fa1f f888 	uxth.w	r8, r8
 8013b1c:	1419      	asrs	r1, r3, #16
 8013b1e:	454e      	cmp	r6, r9
 8013b20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013b24:	f84a 3b04 	str.w	r3, [sl], #4
 8013b28:	d8e8      	bhi.n	8013afc <__mdiff+0x80>
 8013b2a:	1b33      	subs	r3, r6, r4
 8013b2c:	3b15      	subs	r3, #21
 8013b2e:	f023 0303 	bic.w	r3, r3, #3
 8013b32:	3304      	adds	r3, #4
 8013b34:	3415      	adds	r4, #21
 8013b36:	42a6      	cmp	r6, r4
 8013b38:	bf38      	it	cc
 8013b3a:	2304      	movcc	r3, #4
 8013b3c:	441d      	add	r5, r3
 8013b3e:	4473      	add	r3, lr
 8013b40:	469e      	mov	lr, r3
 8013b42:	462e      	mov	r6, r5
 8013b44:	4566      	cmp	r6, ip
 8013b46:	d30e      	bcc.n	8013b66 <__mdiff+0xea>
 8013b48:	f10c 0203 	add.w	r2, ip, #3
 8013b4c:	1b52      	subs	r2, r2, r5
 8013b4e:	f022 0203 	bic.w	r2, r2, #3
 8013b52:	3d03      	subs	r5, #3
 8013b54:	45ac      	cmp	ip, r5
 8013b56:	bf38      	it	cc
 8013b58:	2200      	movcc	r2, #0
 8013b5a:	4413      	add	r3, r2
 8013b5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013b60:	b17a      	cbz	r2, 8013b82 <__mdiff+0x106>
 8013b62:	6107      	str	r7, [r0, #16]
 8013b64:	e7a4      	b.n	8013ab0 <__mdiff+0x34>
 8013b66:	f856 8b04 	ldr.w	r8, [r6], #4
 8013b6a:	fa11 f288 	uxtah	r2, r1, r8
 8013b6e:	1414      	asrs	r4, r2, #16
 8013b70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013b74:	b292      	uxth	r2, r2
 8013b76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013b7a:	f84e 2b04 	str.w	r2, [lr], #4
 8013b7e:	1421      	asrs	r1, r4, #16
 8013b80:	e7e0      	b.n	8013b44 <__mdiff+0xc8>
 8013b82:	3f01      	subs	r7, #1
 8013b84:	e7ea      	b.n	8013b5c <__mdiff+0xe0>
 8013b86:	bf00      	nop
 8013b88:	0801571c 	.word	0x0801571c
 8013b8c:	0801572d 	.word	0x0801572d

08013b90 <__d2b>:
 8013b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b94:	460f      	mov	r7, r1
 8013b96:	2101      	movs	r1, #1
 8013b98:	ec59 8b10 	vmov	r8, r9, d0
 8013b9c:	4616      	mov	r6, r2
 8013b9e:	f7ff fcd5 	bl	801354c <_Balloc>
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	b930      	cbnz	r0, 8013bb4 <__d2b+0x24>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	4b24      	ldr	r3, [pc, #144]	; (8013c3c <__d2b+0xac>)
 8013baa:	4825      	ldr	r0, [pc, #148]	; (8013c40 <__d2b+0xb0>)
 8013bac:	f240 310f 	movw	r1, #783	; 0x30f
 8013bb0:	f000 fa78 	bl	80140a4 <__assert_func>
 8013bb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013bb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bbc:	bb2d      	cbnz	r5, 8013c0a <__d2b+0x7a>
 8013bbe:	9301      	str	r3, [sp, #4]
 8013bc0:	f1b8 0300 	subs.w	r3, r8, #0
 8013bc4:	d026      	beq.n	8013c14 <__d2b+0x84>
 8013bc6:	4668      	mov	r0, sp
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	f7ff fd87 	bl	80136dc <__lo0bits>
 8013bce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013bd2:	b1e8      	cbz	r0, 8013c10 <__d2b+0x80>
 8013bd4:	f1c0 0320 	rsb	r3, r0, #32
 8013bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8013bdc:	430b      	orrs	r3, r1
 8013bde:	40c2      	lsrs	r2, r0
 8013be0:	6163      	str	r3, [r4, #20]
 8013be2:	9201      	str	r2, [sp, #4]
 8013be4:	9b01      	ldr	r3, [sp, #4]
 8013be6:	61a3      	str	r3, [r4, #24]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	bf14      	ite	ne
 8013bec:	2202      	movne	r2, #2
 8013bee:	2201      	moveq	r2, #1
 8013bf0:	6122      	str	r2, [r4, #16]
 8013bf2:	b1bd      	cbz	r5, 8013c24 <__d2b+0x94>
 8013bf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013bf8:	4405      	add	r5, r0
 8013bfa:	603d      	str	r5, [r7, #0]
 8013bfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c00:	6030      	str	r0, [r6, #0]
 8013c02:	4620      	mov	r0, r4
 8013c04:	b003      	add	sp, #12
 8013c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c0e:	e7d6      	b.n	8013bbe <__d2b+0x2e>
 8013c10:	6161      	str	r1, [r4, #20]
 8013c12:	e7e7      	b.n	8013be4 <__d2b+0x54>
 8013c14:	a801      	add	r0, sp, #4
 8013c16:	f7ff fd61 	bl	80136dc <__lo0bits>
 8013c1a:	9b01      	ldr	r3, [sp, #4]
 8013c1c:	6163      	str	r3, [r4, #20]
 8013c1e:	3020      	adds	r0, #32
 8013c20:	2201      	movs	r2, #1
 8013c22:	e7e5      	b.n	8013bf0 <__d2b+0x60>
 8013c24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c2c:	6038      	str	r0, [r7, #0]
 8013c2e:	6918      	ldr	r0, [r3, #16]
 8013c30:	f7ff fd34 	bl	801369c <__hi0bits>
 8013c34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c38:	e7e2      	b.n	8013c00 <__d2b+0x70>
 8013c3a:	bf00      	nop
 8013c3c:	0801571c 	.word	0x0801571c
 8013c40:	0801572d 	.word	0x0801572d

08013c44 <__ssputs_r>:
 8013c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c48:	688e      	ldr	r6, [r1, #8]
 8013c4a:	461f      	mov	r7, r3
 8013c4c:	42be      	cmp	r6, r7
 8013c4e:	680b      	ldr	r3, [r1, #0]
 8013c50:	4682      	mov	sl, r0
 8013c52:	460c      	mov	r4, r1
 8013c54:	4690      	mov	r8, r2
 8013c56:	d82c      	bhi.n	8013cb2 <__ssputs_r+0x6e>
 8013c58:	898a      	ldrh	r2, [r1, #12]
 8013c5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013c5e:	d026      	beq.n	8013cae <__ssputs_r+0x6a>
 8013c60:	6965      	ldr	r5, [r4, #20]
 8013c62:	6909      	ldr	r1, [r1, #16]
 8013c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c68:	eba3 0901 	sub.w	r9, r3, r1
 8013c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c70:	1c7b      	adds	r3, r7, #1
 8013c72:	444b      	add	r3, r9
 8013c74:	106d      	asrs	r5, r5, #1
 8013c76:	429d      	cmp	r5, r3
 8013c78:	bf38      	it	cc
 8013c7a:	461d      	movcc	r5, r3
 8013c7c:	0553      	lsls	r3, r2, #21
 8013c7e:	d527      	bpl.n	8013cd0 <__ssputs_r+0x8c>
 8013c80:	4629      	mov	r1, r5
 8013c82:	f7ff fbd7 	bl	8013434 <_malloc_r>
 8013c86:	4606      	mov	r6, r0
 8013c88:	b360      	cbz	r0, 8013ce4 <__ssputs_r+0xa0>
 8013c8a:	6921      	ldr	r1, [r4, #16]
 8013c8c:	464a      	mov	r2, r9
 8013c8e:	f7fe fcd4 	bl	801263a <memcpy>
 8013c92:	89a3      	ldrh	r3, [r4, #12]
 8013c94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c9c:	81a3      	strh	r3, [r4, #12]
 8013c9e:	6126      	str	r6, [r4, #16]
 8013ca0:	6165      	str	r5, [r4, #20]
 8013ca2:	444e      	add	r6, r9
 8013ca4:	eba5 0509 	sub.w	r5, r5, r9
 8013ca8:	6026      	str	r6, [r4, #0]
 8013caa:	60a5      	str	r5, [r4, #8]
 8013cac:	463e      	mov	r6, r7
 8013cae:	42be      	cmp	r6, r7
 8013cb0:	d900      	bls.n	8013cb4 <__ssputs_r+0x70>
 8013cb2:	463e      	mov	r6, r7
 8013cb4:	6820      	ldr	r0, [r4, #0]
 8013cb6:	4632      	mov	r2, r6
 8013cb8:	4641      	mov	r1, r8
 8013cba:	f000 f9c9 	bl	8014050 <memmove>
 8013cbe:	68a3      	ldr	r3, [r4, #8]
 8013cc0:	1b9b      	subs	r3, r3, r6
 8013cc2:	60a3      	str	r3, [r4, #8]
 8013cc4:	6823      	ldr	r3, [r4, #0]
 8013cc6:	4433      	add	r3, r6
 8013cc8:	6023      	str	r3, [r4, #0]
 8013cca:	2000      	movs	r0, #0
 8013ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd0:	462a      	mov	r2, r5
 8013cd2:	f000 fa2d 	bl	8014130 <_realloc_r>
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d1e0      	bne.n	8013c9e <__ssputs_r+0x5a>
 8013cdc:	6921      	ldr	r1, [r4, #16]
 8013cde:	4650      	mov	r0, sl
 8013ce0:	f7ff fb34 	bl	801334c <_free_r>
 8013ce4:	230c      	movs	r3, #12
 8013ce6:	f8ca 3000 	str.w	r3, [sl]
 8013cea:	89a3      	ldrh	r3, [r4, #12]
 8013cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cf0:	81a3      	strh	r3, [r4, #12]
 8013cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013cf6:	e7e9      	b.n	8013ccc <__ssputs_r+0x88>

08013cf8 <_svfiprintf_r>:
 8013cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cfc:	4698      	mov	r8, r3
 8013cfe:	898b      	ldrh	r3, [r1, #12]
 8013d00:	061b      	lsls	r3, r3, #24
 8013d02:	b09d      	sub	sp, #116	; 0x74
 8013d04:	4607      	mov	r7, r0
 8013d06:	460d      	mov	r5, r1
 8013d08:	4614      	mov	r4, r2
 8013d0a:	d50e      	bpl.n	8013d2a <_svfiprintf_r+0x32>
 8013d0c:	690b      	ldr	r3, [r1, #16]
 8013d0e:	b963      	cbnz	r3, 8013d2a <_svfiprintf_r+0x32>
 8013d10:	2140      	movs	r1, #64	; 0x40
 8013d12:	f7ff fb8f 	bl	8013434 <_malloc_r>
 8013d16:	6028      	str	r0, [r5, #0]
 8013d18:	6128      	str	r0, [r5, #16]
 8013d1a:	b920      	cbnz	r0, 8013d26 <_svfiprintf_r+0x2e>
 8013d1c:	230c      	movs	r3, #12
 8013d1e:	603b      	str	r3, [r7, #0]
 8013d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d24:	e0d0      	b.n	8013ec8 <_svfiprintf_r+0x1d0>
 8013d26:	2340      	movs	r3, #64	; 0x40
 8013d28:	616b      	str	r3, [r5, #20]
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d2e:	2320      	movs	r3, #32
 8013d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d38:	2330      	movs	r3, #48	; 0x30
 8013d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013ee0 <_svfiprintf_r+0x1e8>
 8013d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d42:	f04f 0901 	mov.w	r9, #1
 8013d46:	4623      	mov	r3, r4
 8013d48:	469a      	mov	sl, r3
 8013d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d4e:	b10a      	cbz	r2, 8013d54 <_svfiprintf_r+0x5c>
 8013d50:	2a25      	cmp	r2, #37	; 0x25
 8013d52:	d1f9      	bne.n	8013d48 <_svfiprintf_r+0x50>
 8013d54:	ebba 0b04 	subs.w	fp, sl, r4
 8013d58:	d00b      	beq.n	8013d72 <_svfiprintf_r+0x7a>
 8013d5a:	465b      	mov	r3, fp
 8013d5c:	4622      	mov	r2, r4
 8013d5e:	4629      	mov	r1, r5
 8013d60:	4638      	mov	r0, r7
 8013d62:	f7ff ff6f 	bl	8013c44 <__ssputs_r>
 8013d66:	3001      	adds	r0, #1
 8013d68:	f000 80a9 	beq.w	8013ebe <_svfiprintf_r+0x1c6>
 8013d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d6e:	445a      	add	r2, fp
 8013d70:	9209      	str	r2, [sp, #36]	; 0x24
 8013d72:	f89a 3000 	ldrb.w	r3, [sl]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f000 80a1 	beq.w	8013ebe <_svfiprintf_r+0x1c6>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d86:	f10a 0a01 	add.w	sl, sl, #1
 8013d8a:	9304      	str	r3, [sp, #16]
 8013d8c:	9307      	str	r3, [sp, #28]
 8013d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d92:	931a      	str	r3, [sp, #104]	; 0x68
 8013d94:	4654      	mov	r4, sl
 8013d96:	2205      	movs	r2, #5
 8013d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d9c:	4850      	ldr	r0, [pc, #320]	; (8013ee0 <_svfiprintf_r+0x1e8>)
 8013d9e:	f7ec fa3f 	bl	8000220 <memchr>
 8013da2:	9a04      	ldr	r2, [sp, #16]
 8013da4:	b9d8      	cbnz	r0, 8013dde <_svfiprintf_r+0xe6>
 8013da6:	06d0      	lsls	r0, r2, #27
 8013da8:	bf44      	itt	mi
 8013daa:	2320      	movmi	r3, #32
 8013dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013db0:	0711      	lsls	r1, r2, #28
 8013db2:	bf44      	itt	mi
 8013db4:	232b      	movmi	r3, #43	; 0x2b
 8013db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dba:	f89a 3000 	ldrb.w	r3, [sl]
 8013dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8013dc0:	d015      	beq.n	8013dee <_svfiprintf_r+0xf6>
 8013dc2:	9a07      	ldr	r2, [sp, #28]
 8013dc4:	4654      	mov	r4, sl
 8013dc6:	2000      	movs	r0, #0
 8013dc8:	f04f 0c0a 	mov.w	ip, #10
 8013dcc:	4621      	mov	r1, r4
 8013dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dd2:	3b30      	subs	r3, #48	; 0x30
 8013dd4:	2b09      	cmp	r3, #9
 8013dd6:	d94d      	bls.n	8013e74 <_svfiprintf_r+0x17c>
 8013dd8:	b1b0      	cbz	r0, 8013e08 <_svfiprintf_r+0x110>
 8013dda:	9207      	str	r2, [sp, #28]
 8013ddc:	e014      	b.n	8013e08 <_svfiprintf_r+0x110>
 8013dde:	eba0 0308 	sub.w	r3, r0, r8
 8013de2:	fa09 f303 	lsl.w	r3, r9, r3
 8013de6:	4313      	orrs	r3, r2
 8013de8:	9304      	str	r3, [sp, #16]
 8013dea:	46a2      	mov	sl, r4
 8013dec:	e7d2      	b.n	8013d94 <_svfiprintf_r+0x9c>
 8013dee:	9b03      	ldr	r3, [sp, #12]
 8013df0:	1d19      	adds	r1, r3, #4
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	9103      	str	r1, [sp, #12]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	bfbb      	ittet	lt
 8013dfa:	425b      	neglt	r3, r3
 8013dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8013e00:	9307      	strge	r3, [sp, #28]
 8013e02:	9307      	strlt	r3, [sp, #28]
 8013e04:	bfb8      	it	lt
 8013e06:	9204      	strlt	r2, [sp, #16]
 8013e08:	7823      	ldrb	r3, [r4, #0]
 8013e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8013e0c:	d10c      	bne.n	8013e28 <_svfiprintf_r+0x130>
 8013e0e:	7863      	ldrb	r3, [r4, #1]
 8013e10:	2b2a      	cmp	r3, #42	; 0x2a
 8013e12:	d134      	bne.n	8013e7e <_svfiprintf_r+0x186>
 8013e14:	9b03      	ldr	r3, [sp, #12]
 8013e16:	1d1a      	adds	r2, r3, #4
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	9203      	str	r2, [sp, #12]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	bfb8      	it	lt
 8013e20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013e24:	3402      	adds	r4, #2
 8013e26:	9305      	str	r3, [sp, #20]
 8013e28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013ef0 <_svfiprintf_r+0x1f8>
 8013e2c:	7821      	ldrb	r1, [r4, #0]
 8013e2e:	2203      	movs	r2, #3
 8013e30:	4650      	mov	r0, sl
 8013e32:	f7ec f9f5 	bl	8000220 <memchr>
 8013e36:	b138      	cbz	r0, 8013e48 <_svfiprintf_r+0x150>
 8013e38:	9b04      	ldr	r3, [sp, #16]
 8013e3a:	eba0 000a 	sub.w	r0, r0, sl
 8013e3e:	2240      	movs	r2, #64	; 0x40
 8013e40:	4082      	lsls	r2, r0
 8013e42:	4313      	orrs	r3, r2
 8013e44:	3401      	adds	r4, #1
 8013e46:	9304      	str	r3, [sp, #16]
 8013e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e4c:	4825      	ldr	r0, [pc, #148]	; (8013ee4 <_svfiprintf_r+0x1ec>)
 8013e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e52:	2206      	movs	r2, #6
 8013e54:	f7ec f9e4 	bl	8000220 <memchr>
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d038      	beq.n	8013ece <_svfiprintf_r+0x1d6>
 8013e5c:	4b22      	ldr	r3, [pc, #136]	; (8013ee8 <_svfiprintf_r+0x1f0>)
 8013e5e:	bb1b      	cbnz	r3, 8013ea8 <_svfiprintf_r+0x1b0>
 8013e60:	9b03      	ldr	r3, [sp, #12]
 8013e62:	3307      	adds	r3, #7
 8013e64:	f023 0307 	bic.w	r3, r3, #7
 8013e68:	3308      	adds	r3, #8
 8013e6a:	9303      	str	r3, [sp, #12]
 8013e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e6e:	4433      	add	r3, r6
 8013e70:	9309      	str	r3, [sp, #36]	; 0x24
 8013e72:	e768      	b.n	8013d46 <_svfiprintf_r+0x4e>
 8013e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e78:	460c      	mov	r4, r1
 8013e7a:	2001      	movs	r0, #1
 8013e7c:	e7a6      	b.n	8013dcc <_svfiprintf_r+0xd4>
 8013e7e:	2300      	movs	r3, #0
 8013e80:	3401      	adds	r4, #1
 8013e82:	9305      	str	r3, [sp, #20]
 8013e84:	4619      	mov	r1, r3
 8013e86:	f04f 0c0a 	mov.w	ip, #10
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e90:	3a30      	subs	r2, #48	; 0x30
 8013e92:	2a09      	cmp	r2, #9
 8013e94:	d903      	bls.n	8013e9e <_svfiprintf_r+0x1a6>
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d0c6      	beq.n	8013e28 <_svfiprintf_r+0x130>
 8013e9a:	9105      	str	r1, [sp, #20]
 8013e9c:	e7c4      	b.n	8013e28 <_svfiprintf_r+0x130>
 8013e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ea2:	4604      	mov	r4, r0
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e7f0      	b.n	8013e8a <_svfiprintf_r+0x192>
 8013ea8:	ab03      	add	r3, sp, #12
 8013eaa:	9300      	str	r3, [sp, #0]
 8013eac:	462a      	mov	r2, r5
 8013eae:	4b0f      	ldr	r3, [pc, #60]	; (8013eec <_svfiprintf_r+0x1f4>)
 8013eb0:	a904      	add	r1, sp, #16
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	f7fd fdec 	bl	8011a90 <_printf_float>
 8013eb8:	1c42      	adds	r2, r0, #1
 8013eba:	4606      	mov	r6, r0
 8013ebc:	d1d6      	bne.n	8013e6c <_svfiprintf_r+0x174>
 8013ebe:	89ab      	ldrh	r3, [r5, #12]
 8013ec0:	065b      	lsls	r3, r3, #25
 8013ec2:	f53f af2d 	bmi.w	8013d20 <_svfiprintf_r+0x28>
 8013ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ec8:	b01d      	add	sp, #116	; 0x74
 8013eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ece:	ab03      	add	r3, sp, #12
 8013ed0:	9300      	str	r3, [sp, #0]
 8013ed2:	462a      	mov	r2, r5
 8013ed4:	4b05      	ldr	r3, [pc, #20]	; (8013eec <_svfiprintf_r+0x1f4>)
 8013ed6:	a904      	add	r1, sp, #16
 8013ed8:	4638      	mov	r0, r7
 8013eda:	f7fe f87d 	bl	8011fd8 <_printf_i>
 8013ede:	e7eb      	b.n	8013eb8 <_svfiprintf_r+0x1c0>
 8013ee0:	08015884 	.word	0x08015884
 8013ee4:	0801588e 	.word	0x0801588e
 8013ee8:	08011a91 	.word	0x08011a91
 8013eec:	08013c45 	.word	0x08013c45
 8013ef0:	0801588a 	.word	0x0801588a

08013ef4 <__sflush_r>:
 8013ef4:	898a      	ldrh	r2, [r1, #12]
 8013ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013efa:	4605      	mov	r5, r0
 8013efc:	0710      	lsls	r0, r2, #28
 8013efe:	460c      	mov	r4, r1
 8013f00:	d458      	bmi.n	8013fb4 <__sflush_r+0xc0>
 8013f02:	684b      	ldr	r3, [r1, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	dc05      	bgt.n	8013f14 <__sflush_r+0x20>
 8013f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	dc02      	bgt.n	8013f14 <__sflush_r+0x20>
 8013f0e:	2000      	movs	r0, #0
 8013f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f16:	2e00      	cmp	r6, #0
 8013f18:	d0f9      	beq.n	8013f0e <__sflush_r+0x1a>
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f20:	682f      	ldr	r7, [r5, #0]
 8013f22:	6a21      	ldr	r1, [r4, #32]
 8013f24:	602b      	str	r3, [r5, #0]
 8013f26:	d032      	beq.n	8013f8e <__sflush_r+0x9a>
 8013f28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	075a      	lsls	r2, r3, #29
 8013f2e:	d505      	bpl.n	8013f3c <__sflush_r+0x48>
 8013f30:	6863      	ldr	r3, [r4, #4]
 8013f32:	1ac0      	subs	r0, r0, r3
 8013f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f36:	b10b      	cbz	r3, 8013f3c <__sflush_r+0x48>
 8013f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f3a:	1ac0      	subs	r0, r0, r3
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	4602      	mov	r2, r0
 8013f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f42:	6a21      	ldr	r1, [r4, #32]
 8013f44:	4628      	mov	r0, r5
 8013f46:	47b0      	blx	r6
 8013f48:	1c43      	adds	r3, r0, #1
 8013f4a:	89a3      	ldrh	r3, [r4, #12]
 8013f4c:	d106      	bne.n	8013f5c <__sflush_r+0x68>
 8013f4e:	6829      	ldr	r1, [r5, #0]
 8013f50:	291d      	cmp	r1, #29
 8013f52:	d82b      	bhi.n	8013fac <__sflush_r+0xb8>
 8013f54:	4a29      	ldr	r2, [pc, #164]	; (8013ffc <__sflush_r+0x108>)
 8013f56:	410a      	asrs	r2, r1
 8013f58:	07d6      	lsls	r6, r2, #31
 8013f5a:	d427      	bmi.n	8013fac <__sflush_r+0xb8>
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	6062      	str	r2, [r4, #4]
 8013f60:	04d9      	lsls	r1, r3, #19
 8013f62:	6922      	ldr	r2, [r4, #16]
 8013f64:	6022      	str	r2, [r4, #0]
 8013f66:	d504      	bpl.n	8013f72 <__sflush_r+0x7e>
 8013f68:	1c42      	adds	r2, r0, #1
 8013f6a:	d101      	bne.n	8013f70 <__sflush_r+0x7c>
 8013f6c:	682b      	ldr	r3, [r5, #0]
 8013f6e:	b903      	cbnz	r3, 8013f72 <__sflush_r+0x7e>
 8013f70:	6560      	str	r0, [r4, #84]	; 0x54
 8013f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f74:	602f      	str	r7, [r5, #0]
 8013f76:	2900      	cmp	r1, #0
 8013f78:	d0c9      	beq.n	8013f0e <__sflush_r+0x1a>
 8013f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f7e:	4299      	cmp	r1, r3
 8013f80:	d002      	beq.n	8013f88 <__sflush_r+0x94>
 8013f82:	4628      	mov	r0, r5
 8013f84:	f7ff f9e2 	bl	801334c <_free_r>
 8013f88:	2000      	movs	r0, #0
 8013f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8013f8c:	e7c0      	b.n	8013f10 <__sflush_r+0x1c>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	4628      	mov	r0, r5
 8013f92:	47b0      	blx	r6
 8013f94:	1c41      	adds	r1, r0, #1
 8013f96:	d1c8      	bne.n	8013f2a <__sflush_r+0x36>
 8013f98:	682b      	ldr	r3, [r5, #0]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d0c5      	beq.n	8013f2a <__sflush_r+0x36>
 8013f9e:	2b1d      	cmp	r3, #29
 8013fa0:	d001      	beq.n	8013fa6 <__sflush_r+0xb2>
 8013fa2:	2b16      	cmp	r3, #22
 8013fa4:	d101      	bne.n	8013faa <__sflush_r+0xb6>
 8013fa6:	602f      	str	r7, [r5, #0]
 8013fa8:	e7b1      	b.n	8013f0e <__sflush_r+0x1a>
 8013faa:	89a3      	ldrh	r3, [r4, #12]
 8013fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fb0:	81a3      	strh	r3, [r4, #12]
 8013fb2:	e7ad      	b.n	8013f10 <__sflush_r+0x1c>
 8013fb4:	690f      	ldr	r7, [r1, #16]
 8013fb6:	2f00      	cmp	r7, #0
 8013fb8:	d0a9      	beq.n	8013f0e <__sflush_r+0x1a>
 8013fba:	0793      	lsls	r3, r2, #30
 8013fbc:	680e      	ldr	r6, [r1, #0]
 8013fbe:	bf08      	it	eq
 8013fc0:	694b      	ldreq	r3, [r1, #20]
 8013fc2:	600f      	str	r7, [r1, #0]
 8013fc4:	bf18      	it	ne
 8013fc6:	2300      	movne	r3, #0
 8013fc8:	eba6 0807 	sub.w	r8, r6, r7
 8013fcc:	608b      	str	r3, [r1, #8]
 8013fce:	f1b8 0f00 	cmp.w	r8, #0
 8013fd2:	dd9c      	ble.n	8013f0e <__sflush_r+0x1a>
 8013fd4:	6a21      	ldr	r1, [r4, #32]
 8013fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013fd8:	4643      	mov	r3, r8
 8013fda:	463a      	mov	r2, r7
 8013fdc:	4628      	mov	r0, r5
 8013fde:	47b0      	blx	r6
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	dc06      	bgt.n	8013ff2 <__sflush_r+0xfe>
 8013fe4:	89a3      	ldrh	r3, [r4, #12]
 8013fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fea:	81a3      	strh	r3, [r4, #12]
 8013fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ff0:	e78e      	b.n	8013f10 <__sflush_r+0x1c>
 8013ff2:	4407      	add	r7, r0
 8013ff4:	eba8 0800 	sub.w	r8, r8, r0
 8013ff8:	e7e9      	b.n	8013fce <__sflush_r+0xda>
 8013ffa:	bf00      	nop
 8013ffc:	dfbffffe 	.word	0xdfbffffe

08014000 <_fflush_r>:
 8014000:	b538      	push	{r3, r4, r5, lr}
 8014002:	690b      	ldr	r3, [r1, #16]
 8014004:	4605      	mov	r5, r0
 8014006:	460c      	mov	r4, r1
 8014008:	b913      	cbnz	r3, 8014010 <_fflush_r+0x10>
 801400a:	2500      	movs	r5, #0
 801400c:	4628      	mov	r0, r5
 801400e:	bd38      	pop	{r3, r4, r5, pc}
 8014010:	b118      	cbz	r0, 801401a <_fflush_r+0x1a>
 8014012:	6a03      	ldr	r3, [r0, #32]
 8014014:	b90b      	cbnz	r3, 801401a <_fflush_r+0x1a>
 8014016:	f7fe f98d 	bl	8012334 <__sinit>
 801401a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d0f3      	beq.n	801400a <_fflush_r+0xa>
 8014022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014024:	07d0      	lsls	r0, r2, #31
 8014026:	d404      	bmi.n	8014032 <_fflush_r+0x32>
 8014028:	0599      	lsls	r1, r3, #22
 801402a:	d402      	bmi.n	8014032 <_fflush_r+0x32>
 801402c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801402e:	f7fe fb02 	bl	8012636 <__retarget_lock_acquire_recursive>
 8014032:	4628      	mov	r0, r5
 8014034:	4621      	mov	r1, r4
 8014036:	f7ff ff5d 	bl	8013ef4 <__sflush_r>
 801403a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801403c:	07da      	lsls	r2, r3, #31
 801403e:	4605      	mov	r5, r0
 8014040:	d4e4      	bmi.n	801400c <_fflush_r+0xc>
 8014042:	89a3      	ldrh	r3, [r4, #12]
 8014044:	059b      	lsls	r3, r3, #22
 8014046:	d4e1      	bmi.n	801400c <_fflush_r+0xc>
 8014048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801404a:	f7fe faf5 	bl	8012638 <__retarget_lock_release_recursive>
 801404e:	e7dd      	b.n	801400c <_fflush_r+0xc>

08014050 <memmove>:
 8014050:	4288      	cmp	r0, r1
 8014052:	b510      	push	{r4, lr}
 8014054:	eb01 0402 	add.w	r4, r1, r2
 8014058:	d902      	bls.n	8014060 <memmove+0x10>
 801405a:	4284      	cmp	r4, r0
 801405c:	4623      	mov	r3, r4
 801405e:	d807      	bhi.n	8014070 <memmove+0x20>
 8014060:	1e43      	subs	r3, r0, #1
 8014062:	42a1      	cmp	r1, r4
 8014064:	d008      	beq.n	8014078 <memmove+0x28>
 8014066:	f811 2b01 	ldrb.w	r2, [r1], #1
 801406a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801406e:	e7f8      	b.n	8014062 <memmove+0x12>
 8014070:	4402      	add	r2, r0
 8014072:	4601      	mov	r1, r0
 8014074:	428a      	cmp	r2, r1
 8014076:	d100      	bne.n	801407a <memmove+0x2a>
 8014078:	bd10      	pop	{r4, pc}
 801407a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801407e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014082:	e7f7      	b.n	8014074 <memmove+0x24>

08014084 <_sbrk_r>:
 8014084:	b538      	push	{r3, r4, r5, lr}
 8014086:	4d06      	ldr	r5, [pc, #24]	; (80140a0 <_sbrk_r+0x1c>)
 8014088:	2300      	movs	r3, #0
 801408a:	4604      	mov	r4, r0
 801408c:	4608      	mov	r0, r1
 801408e:	602b      	str	r3, [r5, #0]
 8014090:	f7ef f9da 	bl	8003448 <_sbrk>
 8014094:	1c43      	adds	r3, r0, #1
 8014096:	d102      	bne.n	801409e <_sbrk_r+0x1a>
 8014098:	682b      	ldr	r3, [r5, #0]
 801409a:	b103      	cbz	r3, 801409e <_sbrk_r+0x1a>
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	bd38      	pop	{r3, r4, r5, pc}
 80140a0:	20005ff0 	.word	0x20005ff0

080140a4 <__assert_func>:
 80140a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140a6:	4614      	mov	r4, r2
 80140a8:	461a      	mov	r2, r3
 80140aa:	4b09      	ldr	r3, [pc, #36]	; (80140d0 <__assert_func+0x2c>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4605      	mov	r5, r0
 80140b0:	68d8      	ldr	r0, [r3, #12]
 80140b2:	b14c      	cbz	r4, 80140c8 <__assert_func+0x24>
 80140b4:	4b07      	ldr	r3, [pc, #28]	; (80140d4 <__assert_func+0x30>)
 80140b6:	9100      	str	r1, [sp, #0]
 80140b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80140bc:	4906      	ldr	r1, [pc, #24]	; (80140d8 <__assert_func+0x34>)
 80140be:	462b      	mov	r3, r5
 80140c0:	f000 f872 	bl	80141a8 <fiprintf>
 80140c4:	f000 f882 	bl	80141cc <abort>
 80140c8:	4b04      	ldr	r3, [pc, #16]	; (80140dc <__assert_func+0x38>)
 80140ca:	461c      	mov	r4, r3
 80140cc:	e7f3      	b.n	80140b6 <__assert_func+0x12>
 80140ce:	bf00      	nop
 80140d0:	200001e0 	.word	0x200001e0
 80140d4:	0801589f 	.word	0x0801589f
 80140d8:	080158ac 	.word	0x080158ac
 80140dc:	080158da 	.word	0x080158da

080140e0 <_calloc_r>:
 80140e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140e2:	fba1 2402 	umull	r2, r4, r1, r2
 80140e6:	b94c      	cbnz	r4, 80140fc <_calloc_r+0x1c>
 80140e8:	4611      	mov	r1, r2
 80140ea:	9201      	str	r2, [sp, #4]
 80140ec:	f7ff f9a2 	bl	8013434 <_malloc_r>
 80140f0:	9a01      	ldr	r2, [sp, #4]
 80140f2:	4605      	mov	r5, r0
 80140f4:	b930      	cbnz	r0, 8014104 <_calloc_r+0x24>
 80140f6:	4628      	mov	r0, r5
 80140f8:	b003      	add	sp, #12
 80140fa:	bd30      	pop	{r4, r5, pc}
 80140fc:	220c      	movs	r2, #12
 80140fe:	6002      	str	r2, [r0, #0]
 8014100:	2500      	movs	r5, #0
 8014102:	e7f8      	b.n	80140f6 <_calloc_r+0x16>
 8014104:	4621      	mov	r1, r4
 8014106:	f7fe f9c2 	bl	801248e <memset>
 801410a:	e7f4      	b.n	80140f6 <_calloc_r+0x16>

0801410c <__ascii_mbtowc>:
 801410c:	b082      	sub	sp, #8
 801410e:	b901      	cbnz	r1, 8014112 <__ascii_mbtowc+0x6>
 8014110:	a901      	add	r1, sp, #4
 8014112:	b142      	cbz	r2, 8014126 <__ascii_mbtowc+0x1a>
 8014114:	b14b      	cbz	r3, 801412a <__ascii_mbtowc+0x1e>
 8014116:	7813      	ldrb	r3, [r2, #0]
 8014118:	600b      	str	r3, [r1, #0]
 801411a:	7812      	ldrb	r2, [r2, #0]
 801411c:	1e10      	subs	r0, r2, #0
 801411e:	bf18      	it	ne
 8014120:	2001      	movne	r0, #1
 8014122:	b002      	add	sp, #8
 8014124:	4770      	bx	lr
 8014126:	4610      	mov	r0, r2
 8014128:	e7fb      	b.n	8014122 <__ascii_mbtowc+0x16>
 801412a:	f06f 0001 	mvn.w	r0, #1
 801412e:	e7f8      	b.n	8014122 <__ascii_mbtowc+0x16>

08014130 <_realloc_r>:
 8014130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014134:	4680      	mov	r8, r0
 8014136:	4614      	mov	r4, r2
 8014138:	460e      	mov	r6, r1
 801413a:	b921      	cbnz	r1, 8014146 <_realloc_r+0x16>
 801413c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014140:	4611      	mov	r1, r2
 8014142:	f7ff b977 	b.w	8013434 <_malloc_r>
 8014146:	b92a      	cbnz	r2, 8014154 <_realloc_r+0x24>
 8014148:	f7ff f900 	bl	801334c <_free_r>
 801414c:	4625      	mov	r5, r4
 801414e:	4628      	mov	r0, r5
 8014150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014154:	f000 f841 	bl	80141da <_malloc_usable_size_r>
 8014158:	4284      	cmp	r4, r0
 801415a:	4607      	mov	r7, r0
 801415c:	d802      	bhi.n	8014164 <_realloc_r+0x34>
 801415e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014162:	d812      	bhi.n	801418a <_realloc_r+0x5a>
 8014164:	4621      	mov	r1, r4
 8014166:	4640      	mov	r0, r8
 8014168:	f7ff f964 	bl	8013434 <_malloc_r>
 801416c:	4605      	mov	r5, r0
 801416e:	2800      	cmp	r0, #0
 8014170:	d0ed      	beq.n	801414e <_realloc_r+0x1e>
 8014172:	42bc      	cmp	r4, r7
 8014174:	4622      	mov	r2, r4
 8014176:	4631      	mov	r1, r6
 8014178:	bf28      	it	cs
 801417a:	463a      	movcs	r2, r7
 801417c:	f7fe fa5d 	bl	801263a <memcpy>
 8014180:	4631      	mov	r1, r6
 8014182:	4640      	mov	r0, r8
 8014184:	f7ff f8e2 	bl	801334c <_free_r>
 8014188:	e7e1      	b.n	801414e <_realloc_r+0x1e>
 801418a:	4635      	mov	r5, r6
 801418c:	e7df      	b.n	801414e <_realloc_r+0x1e>

0801418e <__ascii_wctomb>:
 801418e:	b149      	cbz	r1, 80141a4 <__ascii_wctomb+0x16>
 8014190:	2aff      	cmp	r2, #255	; 0xff
 8014192:	bf85      	ittet	hi
 8014194:	238a      	movhi	r3, #138	; 0x8a
 8014196:	6003      	strhi	r3, [r0, #0]
 8014198:	700a      	strbls	r2, [r1, #0]
 801419a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801419e:	bf98      	it	ls
 80141a0:	2001      	movls	r0, #1
 80141a2:	4770      	bx	lr
 80141a4:	4608      	mov	r0, r1
 80141a6:	4770      	bx	lr

080141a8 <fiprintf>:
 80141a8:	b40e      	push	{r1, r2, r3}
 80141aa:	b503      	push	{r0, r1, lr}
 80141ac:	4601      	mov	r1, r0
 80141ae:	ab03      	add	r3, sp, #12
 80141b0:	4805      	ldr	r0, [pc, #20]	; (80141c8 <fiprintf+0x20>)
 80141b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80141b6:	6800      	ldr	r0, [r0, #0]
 80141b8:	9301      	str	r3, [sp, #4]
 80141ba:	f000 f83f 	bl	801423c <_vfiprintf_r>
 80141be:	b002      	add	sp, #8
 80141c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80141c4:	b003      	add	sp, #12
 80141c6:	4770      	bx	lr
 80141c8:	200001e0 	.word	0x200001e0

080141cc <abort>:
 80141cc:	b508      	push	{r3, lr}
 80141ce:	2006      	movs	r0, #6
 80141d0:	f000 fa0c 	bl	80145ec <raise>
 80141d4:	2001      	movs	r0, #1
 80141d6:	f7ef f8bf 	bl	8003358 <_exit>

080141da <_malloc_usable_size_r>:
 80141da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141de:	1f18      	subs	r0, r3, #4
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	bfbc      	itt	lt
 80141e4:	580b      	ldrlt	r3, [r1, r0]
 80141e6:	18c0      	addlt	r0, r0, r3
 80141e8:	4770      	bx	lr

080141ea <__sfputc_r>:
 80141ea:	6893      	ldr	r3, [r2, #8]
 80141ec:	3b01      	subs	r3, #1
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	b410      	push	{r4}
 80141f2:	6093      	str	r3, [r2, #8]
 80141f4:	da08      	bge.n	8014208 <__sfputc_r+0x1e>
 80141f6:	6994      	ldr	r4, [r2, #24]
 80141f8:	42a3      	cmp	r3, r4
 80141fa:	db01      	blt.n	8014200 <__sfputc_r+0x16>
 80141fc:	290a      	cmp	r1, #10
 80141fe:	d103      	bne.n	8014208 <__sfputc_r+0x1e>
 8014200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014204:	f000 b934 	b.w	8014470 <__swbuf_r>
 8014208:	6813      	ldr	r3, [r2, #0]
 801420a:	1c58      	adds	r0, r3, #1
 801420c:	6010      	str	r0, [r2, #0]
 801420e:	7019      	strb	r1, [r3, #0]
 8014210:	4608      	mov	r0, r1
 8014212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014216:	4770      	bx	lr

08014218 <__sfputs_r>:
 8014218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801421a:	4606      	mov	r6, r0
 801421c:	460f      	mov	r7, r1
 801421e:	4614      	mov	r4, r2
 8014220:	18d5      	adds	r5, r2, r3
 8014222:	42ac      	cmp	r4, r5
 8014224:	d101      	bne.n	801422a <__sfputs_r+0x12>
 8014226:	2000      	movs	r0, #0
 8014228:	e007      	b.n	801423a <__sfputs_r+0x22>
 801422a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801422e:	463a      	mov	r2, r7
 8014230:	4630      	mov	r0, r6
 8014232:	f7ff ffda 	bl	80141ea <__sfputc_r>
 8014236:	1c43      	adds	r3, r0, #1
 8014238:	d1f3      	bne.n	8014222 <__sfputs_r+0xa>
 801423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801423c <_vfiprintf_r>:
 801423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014240:	460d      	mov	r5, r1
 8014242:	b09d      	sub	sp, #116	; 0x74
 8014244:	4614      	mov	r4, r2
 8014246:	4698      	mov	r8, r3
 8014248:	4606      	mov	r6, r0
 801424a:	b118      	cbz	r0, 8014254 <_vfiprintf_r+0x18>
 801424c:	6a03      	ldr	r3, [r0, #32]
 801424e:	b90b      	cbnz	r3, 8014254 <_vfiprintf_r+0x18>
 8014250:	f7fe f870 	bl	8012334 <__sinit>
 8014254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014256:	07d9      	lsls	r1, r3, #31
 8014258:	d405      	bmi.n	8014266 <_vfiprintf_r+0x2a>
 801425a:	89ab      	ldrh	r3, [r5, #12]
 801425c:	059a      	lsls	r2, r3, #22
 801425e:	d402      	bmi.n	8014266 <_vfiprintf_r+0x2a>
 8014260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014262:	f7fe f9e8 	bl	8012636 <__retarget_lock_acquire_recursive>
 8014266:	89ab      	ldrh	r3, [r5, #12]
 8014268:	071b      	lsls	r3, r3, #28
 801426a:	d501      	bpl.n	8014270 <_vfiprintf_r+0x34>
 801426c:	692b      	ldr	r3, [r5, #16]
 801426e:	b99b      	cbnz	r3, 8014298 <_vfiprintf_r+0x5c>
 8014270:	4629      	mov	r1, r5
 8014272:	4630      	mov	r0, r6
 8014274:	f000 f93a 	bl	80144ec <__swsetup_r>
 8014278:	b170      	cbz	r0, 8014298 <_vfiprintf_r+0x5c>
 801427a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801427c:	07dc      	lsls	r4, r3, #31
 801427e:	d504      	bpl.n	801428a <_vfiprintf_r+0x4e>
 8014280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014284:	b01d      	add	sp, #116	; 0x74
 8014286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801428a:	89ab      	ldrh	r3, [r5, #12]
 801428c:	0598      	lsls	r0, r3, #22
 801428e:	d4f7      	bmi.n	8014280 <_vfiprintf_r+0x44>
 8014290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014292:	f7fe f9d1 	bl	8012638 <__retarget_lock_release_recursive>
 8014296:	e7f3      	b.n	8014280 <_vfiprintf_r+0x44>
 8014298:	2300      	movs	r3, #0
 801429a:	9309      	str	r3, [sp, #36]	; 0x24
 801429c:	2320      	movs	r3, #32
 801429e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80142a6:	2330      	movs	r3, #48	; 0x30
 80142a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801445c <_vfiprintf_r+0x220>
 80142ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142b0:	f04f 0901 	mov.w	r9, #1
 80142b4:	4623      	mov	r3, r4
 80142b6:	469a      	mov	sl, r3
 80142b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142bc:	b10a      	cbz	r2, 80142c2 <_vfiprintf_r+0x86>
 80142be:	2a25      	cmp	r2, #37	; 0x25
 80142c0:	d1f9      	bne.n	80142b6 <_vfiprintf_r+0x7a>
 80142c2:	ebba 0b04 	subs.w	fp, sl, r4
 80142c6:	d00b      	beq.n	80142e0 <_vfiprintf_r+0xa4>
 80142c8:	465b      	mov	r3, fp
 80142ca:	4622      	mov	r2, r4
 80142cc:	4629      	mov	r1, r5
 80142ce:	4630      	mov	r0, r6
 80142d0:	f7ff ffa2 	bl	8014218 <__sfputs_r>
 80142d4:	3001      	adds	r0, #1
 80142d6:	f000 80a9 	beq.w	801442c <_vfiprintf_r+0x1f0>
 80142da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142dc:	445a      	add	r2, fp
 80142de:	9209      	str	r2, [sp, #36]	; 0x24
 80142e0:	f89a 3000 	ldrb.w	r3, [sl]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f000 80a1 	beq.w	801442c <_vfiprintf_r+0x1f0>
 80142ea:	2300      	movs	r3, #0
 80142ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142f4:	f10a 0a01 	add.w	sl, sl, #1
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	9307      	str	r3, [sp, #28]
 80142fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014300:	931a      	str	r3, [sp, #104]	; 0x68
 8014302:	4654      	mov	r4, sl
 8014304:	2205      	movs	r2, #5
 8014306:	f814 1b01 	ldrb.w	r1, [r4], #1
 801430a:	4854      	ldr	r0, [pc, #336]	; (801445c <_vfiprintf_r+0x220>)
 801430c:	f7eb ff88 	bl	8000220 <memchr>
 8014310:	9a04      	ldr	r2, [sp, #16]
 8014312:	b9d8      	cbnz	r0, 801434c <_vfiprintf_r+0x110>
 8014314:	06d1      	lsls	r1, r2, #27
 8014316:	bf44      	itt	mi
 8014318:	2320      	movmi	r3, #32
 801431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801431e:	0713      	lsls	r3, r2, #28
 8014320:	bf44      	itt	mi
 8014322:	232b      	movmi	r3, #43	; 0x2b
 8014324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014328:	f89a 3000 	ldrb.w	r3, [sl]
 801432c:	2b2a      	cmp	r3, #42	; 0x2a
 801432e:	d015      	beq.n	801435c <_vfiprintf_r+0x120>
 8014330:	9a07      	ldr	r2, [sp, #28]
 8014332:	4654      	mov	r4, sl
 8014334:	2000      	movs	r0, #0
 8014336:	f04f 0c0a 	mov.w	ip, #10
 801433a:	4621      	mov	r1, r4
 801433c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014340:	3b30      	subs	r3, #48	; 0x30
 8014342:	2b09      	cmp	r3, #9
 8014344:	d94d      	bls.n	80143e2 <_vfiprintf_r+0x1a6>
 8014346:	b1b0      	cbz	r0, 8014376 <_vfiprintf_r+0x13a>
 8014348:	9207      	str	r2, [sp, #28]
 801434a:	e014      	b.n	8014376 <_vfiprintf_r+0x13a>
 801434c:	eba0 0308 	sub.w	r3, r0, r8
 8014350:	fa09 f303 	lsl.w	r3, r9, r3
 8014354:	4313      	orrs	r3, r2
 8014356:	9304      	str	r3, [sp, #16]
 8014358:	46a2      	mov	sl, r4
 801435a:	e7d2      	b.n	8014302 <_vfiprintf_r+0xc6>
 801435c:	9b03      	ldr	r3, [sp, #12]
 801435e:	1d19      	adds	r1, r3, #4
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	9103      	str	r1, [sp, #12]
 8014364:	2b00      	cmp	r3, #0
 8014366:	bfbb      	ittet	lt
 8014368:	425b      	neglt	r3, r3
 801436a:	f042 0202 	orrlt.w	r2, r2, #2
 801436e:	9307      	strge	r3, [sp, #28]
 8014370:	9307      	strlt	r3, [sp, #28]
 8014372:	bfb8      	it	lt
 8014374:	9204      	strlt	r2, [sp, #16]
 8014376:	7823      	ldrb	r3, [r4, #0]
 8014378:	2b2e      	cmp	r3, #46	; 0x2e
 801437a:	d10c      	bne.n	8014396 <_vfiprintf_r+0x15a>
 801437c:	7863      	ldrb	r3, [r4, #1]
 801437e:	2b2a      	cmp	r3, #42	; 0x2a
 8014380:	d134      	bne.n	80143ec <_vfiprintf_r+0x1b0>
 8014382:	9b03      	ldr	r3, [sp, #12]
 8014384:	1d1a      	adds	r2, r3, #4
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	9203      	str	r2, [sp, #12]
 801438a:	2b00      	cmp	r3, #0
 801438c:	bfb8      	it	lt
 801438e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014392:	3402      	adds	r4, #2
 8014394:	9305      	str	r3, [sp, #20]
 8014396:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801446c <_vfiprintf_r+0x230>
 801439a:	7821      	ldrb	r1, [r4, #0]
 801439c:	2203      	movs	r2, #3
 801439e:	4650      	mov	r0, sl
 80143a0:	f7eb ff3e 	bl	8000220 <memchr>
 80143a4:	b138      	cbz	r0, 80143b6 <_vfiprintf_r+0x17a>
 80143a6:	9b04      	ldr	r3, [sp, #16]
 80143a8:	eba0 000a 	sub.w	r0, r0, sl
 80143ac:	2240      	movs	r2, #64	; 0x40
 80143ae:	4082      	lsls	r2, r0
 80143b0:	4313      	orrs	r3, r2
 80143b2:	3401      	adds	r4, #1
 80143b4:	9304      	str	r3, [sp, #16]
 80143b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ba:	4829      	ldr	r0, [pc, #164]	; (8014460 <_vfiprintf_r+0x224>)
 80143bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143c0:	2206      	movs	r2, #6
 80143c2:	f7eb ff2d 	bl	8000220 <memchr>
 80143c6:	2800      	cmp	r0, #0
 80143c8:	d03f      	beq.n	801444a <_vfiprintf_r+0x20e>
 80143ca:	4b26      	ldr	r3, [pc, #152]	; (8014464 <_vfiprintf_r+0x228>)
 80143cc:	bb1b      	cbnz	r3, 8014416 <_vfiprintf_r+0x1da>
 80143ce:	9b03      	ldr	r3, [sp, #12]
 80143d0:	3307      	adds	r3, #7
 80143d2:	f023 0307 	bic.w	r3, r3, #7
 80143d6:	3308      	adds	r3, #8
 80143d8:	9303      	str	r3, [sp, #12]
 80143da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143dc:	443b      	add	r3, r7
 80143de:	9309      	str	r3, [sp, #36]	; 0x24
 80143e0:	e768      	b.n	80142b4 <_vfiprintf_r+0x78>
 80143e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80143e6:	460c      	mov	r4, r1
 80143e8:	2001      	movs	r0, #1
 80143ea:	e7a6      	b.n	801433a <_vfiprintf_r+0xfe>
 80143ec:	2300      	movs	r3, #0
 80143ee:	3401      	adds	r4, #1
 80143f0:	9305      	str	r3, [sp, #20]
 80143f2:	4619      	mov	r1, r3
 80143f4:	f04f 0c0a 	mov.w	ip, #10
 80143f8:	4620      	mov	r0, r4
 80143fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143fe:	3a30      	subs	r2, #48	; 0x30
 8014400:	2a09      	cmp	r2, #9
 8014402:	d903      	bls.n	801440c <_vfiprintf_r+0x1d0>
 8014404:	2b00      	cmp	r3, #0
 8014406:	d0c6      	beq.n	8014396 <_vfiprintf_r+0x15a>
 8014408:	9105      	str	r1, [sp, #20]
 801440a:	e7c4      	b.n	8014396 <_vfiprintf_r+0x15a>
 801440c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014410:	4604      	mov	r4, r0
 8014412:	2301      	movs	r3, #1
 8014414:	e7f0      	b.n	80143f8 <_vfiprintf_r+0x1bc>
 8014416:	ab03      	add	r3, sp, #12
 8014418:	9300      	str	r3, [sp, #0]
 801441a:	462a      	mov	r2, r5
 801441c:	4b12      	ldr	r3, [pc, #72]	; (8014468 <_vfiprintf_r+0x22c>)
 801441e:	a904      	add	r1, sp, #16
 8014420:	4630      	mov	r0, r6
 8014422:	f7fd fb35 	bl	8011a90 <_printf_float>
 8014426:	4607      	mov	r7, r0
 8014428:	1c78      	adds	r0, r7, #1
 801442a:	d1d6      	bne.n	80143da <_vfiprintf_r+0x19e>
 801442c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801442e:	07d9      	lsls	r1, r3, #31
 8014430:	d405      	bmi.n	801443e <_vfiprintf_r+0x202>
 8014432:	89ab      	ldrh	r3, [r5, #12]
 8014434:	059a      	lsls	r2, r3, #22
 8014436:	d402      	bmi.n	801443e <_vfiprintf_r+0x202>
 8014438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801443a:	f7fe f8fd 	bl	8012638 <__retarget_lock_release_recursive>
 801443e:	89ab      	ldrh	r3, [r5, #12]
 8014440:	065b      	lsls	r3, r3, #25
 8014442:	f53f af1d 	bmi.w	8014280 <_vfiprintf_r+0x44>
 8014446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014448:	e71c      	b.n	8014284 <_vfiprintf_r+0x48>
 801444a:	ab03      	add	r3, sp, #12
 801444c:	9300      	str	r3, [sp, #0]
 801444e:	462a      	mov	r2, r5
 8014450:	4b05      	ldr	r3, [pc, #20]	; (8014468 <_vfiprintf_r+0x22c>)
 8014452:	a904      	add	r1, sp, #16
 8014454:	4630      	mov	r0, r6
 8014456:	f7fd fdbf 	bl	8011fd8 <_printf_i>
 801445a:	e7e4      	b.n	8014426 <_vfiprintf_r+0x1ea>
 801445c:	08015884 	.word	0x08015884
 8014460:	0801588e 	.word	0x0801588e
 8014464:	08011a91 	.word	0x08011a91
 8014468:	08014219 	.word	0x08014219
 801446c:	0801588a 	.word	0x0801588a

08014470 <__swbuf_r>:
 8014470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014472:	460e      	mov	r6, r1
 8014474:	4614      	mov	r4, r2
 8014476:	4605      	mov	r5, r0
 8014478:	b118      	cbz	r0, 8014482 <__swbuf_r+0x12>
 801447a:	6a03      	ldr	r3, [r0, #32]
 801447c:	b90b      	cbnz	r3, 8014482 <__swbuf_r+0x12>
 801447e:	f7fd ff59 	bl	8012334 <__sinit>
 8014482:	69a3      	ldr	r3, [r4, #24]
 8014484:	60a3      	str	r3, [r4, #8]
 8014486:	89a3      	ldrh	r3, [r4, #12]
 8014488:	071a      	lsls	r2, r3, #28
 801448a:	d525      	bpl.n	80144d8 <__swbuf_r+0x68>
 801448c:	6923      	ldr	r3, [r4, #16]
 801448e:	b31b      	cbz	r3, 80144d8 <__swbuf_r+0x68>
 8014490:	6823      	ldr	r3, [r4, #0]
 8014492:	6922      	ldr	r2, [r4, #16]
 8014494:	1a98      	subs	r0, r3, r2
 8014496:	6963      	ldr	r3, [r4, #20]
 8014498:	b2f6      	uxtb	r6, r6
 801449a:	4283      	cmp	r3, r0
 801449c:	4637      	mov	r7, r6
 801449e:	dc04      	bgt.n	80144aa <__swbuf_r+0x3a>
 80144a0:	4621      	mov	r1, r4
 80144a2:	4628      	mov	r0, r5
 80144a4:	f7ff fdac 	bl	8014000 <_fflush_r>
 80144a8:	b9e0      	cbnz	r0, 80144e4 <__swbuf_r+0x74>
 80144aa:	68a3      	ldr	r3, [r4, #8]
 80144ac:	3b01      	subs	r3, #1
 80144ae:	60a3      	str	r3, [r4, #8]
 80144b0:	6823      	ldr	r3, [r4, #0]
 80144b2:	1c5a      	adds	r2, r3, #1
 80144b4:	6022      	str	r2, [r4, #0]
 80144b6:	701e      	strb	r6, [r3, #0]
 80144b8:	6962      	ldr	r2, [r4, #20]
 80144ba:	1c43      	adds	r3, r0, #1
 80144bc:	429a      	cmp	r2, r3
 80144be:	d004      	beq.n	80144ca <__swbuf_r+0x5a>
 80144c0:	89a3      	ldrh	r3, [r4, #12]
 80144c2:	07db      	lsls	r3, r3, #31
 80144c4:	d506      	bpl.n	80144d4 <__swbuf_r+0x64>
 80144c6:	2e0a      	cmp	r6, #10
 80144c8:	d104      	bne.n	80144d4 <__swbuf_r+0x64>
 80144ca:	4621      	mov	r1, r4
 80144cc:	4628      	mov	r0, r5
 80144ce:	f7ff fd97 	bl	8014000 <_fflush_r>
 80144d2:	b938      	cbnz	r0, 80144e4 <__swbuf_r+0x74>
 80144d4:	4638      	mov	r0, r7
 80144d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d8:	4621      	mov	r1, r4
 80144da:	4628      	mov	r0, r5
 80144dc:	f000 f806 	bl	80144ec <__swsetup_r>
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d0d5      	beq.n	8014490 <__swbuf_r+0x20>
 80144e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80144e8:	e7f4      	b.n	80144d4 <__swbuf_r+0x64>
	...

080144ec <__swsetup_r>:
 80144ec:	b538      	push	{r3, r4, r5, lr}
 80144ee:	4b2a      	ldr	r3, [pc, #168]	; (8014598 <__swsetup_r+0xac>)
 80144f0:	4605      	mov	r5, r0
 80144f2:	6818      	ldr	r0, [r3, #0]
 80144f4:	460c      	mov	r4, r1
 80144f6:	b118      	cbz	r0, 8014500 <__swsetup_r+0x14>
 80144f8:	6a03      	ldr	r3, [r0, #32]
 80144fa:	b90b      	cbnz	r3, 8014500 <__swsetup_r+0x14>
 80144fc:	f7fd ff1a 	bl	8012334 <__sinit>
 8014500:	89a3      	ldrh	r3, [r4, #12]
 8014502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014506:	0718      	lsls	r0, r3, #28
 8014508:	d422      	bmi.n	8014550 <__swsetup_r+0x64>
 801450a:	06d9      	lsls	r1, r3, #27
 801450c:	d407      	bmi.n	801451e <__swsetup_r+0x32>
 801450e:	2309      	movs	r3, #9
 8014510:	602b      	str	r3, [r5, #0]
 8014512:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014516:	81a3      	strh	r3, [r4, #12]
 8014518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801451c:	e034      	b.n	8014588 <__swsetup_r+0x9c>
 801451e:	0758      	lsls	r0, r3, #29
 8014520:	d512      	bpl.n	8014548 <__swsetup_r+0x5c>
 8014522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014524:	b141      	cbz	r1, 8014538 <__swsetup_r+0x4c>
 8014526:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801452a:	4299      	cmp	r1, r3
 801452c:	d002      	beq.n	8014534 <__swsetup_r+0x48>
 801452e:	4628      	mov	r0, r5
 8014530:	f7fe ff0c 	bl	801334c <_free_r>
 8014534:	2300      	movs	r3, #0
 8014536:	6363      	str	r3, [r4, #52]	; 0x34
 8014538:	89a3      	ldrh	r3, [r4, #12]
 801453a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801453e:	81a3      	strh	r3, [r4, #12]
 8014540:	2300      	movs	r3, #0
 8014542:	6063      	str	r3, [r4, #4]
 8014544:	6923      	ldr	r3, [r4, #16]
 8014546:	6023      	str	r3, [r4, #0]
 8014548:	89a3      	ldrh	r3, [r4, #12]
 801454a:	f043 0308 	orr.w	r3, r3, #8
 801454e:	81a3      	strh	r3, [r4, #12]
 8014550:	6923      	ldr	r3, [r4, #16]
 8014552:	b94b      	cbnz	r3, 8014568 <__swsetup_r+0x7c>
 8014554:	89a3      	ldrh	r3, [r4, #12]
 8014556:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801455a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801455e:	d003      	beq.n	8014568 <__swsetup_r+0x7c>
 8014560:	4621      	mov	r1, r4
 8014562:	4628      	mov	r0, r5
 8014564:	f000 f884 	bl	8014670 <__smakebuf_r>
 8014568:	89a0      	ldrh	r0, [r4, #12]
 801456a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801456e:	f010 0301 	ands.w	r3, r0, #1
 8014572:	d00a      	beq.n	801458a <__swsetup_r+0x9e>
 8014574:	2300      	movs	r3, #0
 8014576:	60a3      	str	r3, [r4, #8]
 8014578:	6963      	ldr	r3, [r4, #20]
 801457a:	425b      	negs	r3, r3
 801457c:	61a3      	str	r3, [r4, #24]
 801457e:	6923      	ldr	r3, [r4, #16]
 8014580:	b943      	cbnz	r3, 8014594 <__swsetup_r+0xa8>
 8014582:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014586:	d1c4      	bne.n	8014512 <__swsetup_r+0x26>
 8014588:	bd38      	pop	{r3, r4, r5, pc}
 801458a:	0781      	lsls	r1, r0, #30
 801458c:	bf58      	it	pl
 801458e:	6963      	ldrpl	r3, [r4, #20]
 8014590:	60a3      	str	r3, [r4, #8]
 8014592:	e7f4      	b.n	801457e <__swsetup_r+0x92>
 8014594:	2000      	movs	r0, #0
 8014596:	e7f7      	b.n	8014588 <__swsetup_r+0x9c>
 8014598:	200001e0 	.word	0x200001e0

0801459c <_raise_r>:
 801459c:	291f      	cmp	r1, #31
 801459e:	b538      	push	{r3, r4, r5, lr}
 80145a0:	4604      	mov	r4, r0
 80145a2:	460d      	mov	r5, r1
 80145a4:	d904      	bls.n	80145b0 <_raise_r+0x14>
 80145a6:	2316      	movs	r3, #22
 80145a8:	6003      	str	r3, [r0, #0]
 80145aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80145b2:	b112      	cbz	r2, 80145ba <_raise_r+0x1e>
 80145b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80145b8:	b94b      	cbnz	r3, 80145ce <_raise_r+0x32>
 80145ba:	4620      	mov	r0, r4
 80145bc:	f000 f830 	bl	8014620 <_getpid_r>
 80145c0:	462a      	mov	r2, r5
 80145c2:	4601      	mov	r1, r0
 80145c4:	4620      	mov	r0, r4
 80145c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145ca:	f000 b817 	b.w	80145fc <_kill_r>
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	d00a      	beq.n	80145e8 <_raise_r+0x4c>
 80145d2:	1c59      	adds	r1, r3, #1
 80145d4:	d103      	bne.n	80145de <_raise_r+0x42>
 80145d6:	2316      	movs	r3, #22
 80145d8:	6003      	str	r3, [r0, #0]
 80145da:	2001      	movs	r0, #1
 80145dc:	e7e7      	b.n	80145ae <_raise_r+0x12>
 80145de:	2400      	movs	r4, #0
 80145e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80145e4:	4628      	mov	r0, r5
 80145e6:	4798      	blx	r3
 80145e8:	2000      	movs	r0, #0
 80145ea:	e7e0      	b.n	80145ae <_raise_r+0x12>

080145ec <raise>:
 80145ec:	4b02      	ldr	r3, [pc, #8]	; (80145f8 <raise+0xc>)
 80145ee:	4601      	mov	r1, r0
 80145f0:	6818      	ldr	r0, [r3, #0]
 80145f2:	f7ff bfd3 	b.w	801459c <_raise_r>
 80145f6:	bf00      	nop
 80145f8:	200001e0 	.word	0x200001e0

080145fc <_kill_r>:
 80145fc:	b538      	push	{r3, r4, r5, lr}
 80145fe:	4d07      	ldr	r5, [pc, #28]	; (801461c <_kill_r+0x20>)
 8014600:	2300      	movs	r3, #0
 8014602:	4604      	mov	r4, r0
 8014604:	4608      	mov	r0, r1
 8014606:	4611      	mov	r1, r2
 8014608:	602b      	str	r3, [r5, #0]
 801460a:	f7ee fe95 	bl	8003338 <_kill>
 801460e:	1c43      	adds	r3, r0, #1
 8014610:	d102      	bne.n	8014618 <_kill_r+0x1c>
 8014612:	682b      	ldr	r3, [r5, #0]
 8014614:	b103      	cbz	r3, 8014618 <_kill_r+0x1c>
 8014616:	6023      	str	r3, [r4, #0]
 8014618:	bd38      	pop	{r3, r4, r5, pc}
 801461a:	bf00      	nop
 801461c:	20005ff0 	.word	0x20005ff0

08014620 <_getpid_r>:
 8014620:	f7ee be82 	b.w	8003328 <_getpid>

08014624 <__swhatbuf_r>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	460c      	mov	r4, r1
 8014628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801462c:	2900      	cmp	r1, #0
 801462e:	b096      	sub	sp, #88	; 0x58
 8014630:	4615      	mov	r5, r2
 8014632:	461e      	mov	r6, r3
 8014634:	da0d      	bge.n	8014652 <__swhatbuf_r+0x2e>
 8014636:	89a3      	ldrh	r3, [r4, #12]
 8014638:	f013 0f80 	tst.w	r3, #128	; 0x80
 801463c:	f04f 0100 	mov.w	r1, #0
 8014640:	bf0c      	ite	eq
 8014642:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014646:	2340      	movne	r3, #64	; 0x40
 8014648:	2000      	movs	r0, #0
 801464a:	6031      	str	r1, [r6, #0]
 801464c:	602b      	str	r3, [r5, #0]
 801464e:	b016      	add	sp, #88	; 0x58
 8014650:	bd70      	pop	{r4, r5, r6, pc}
 8014652:	466a      	mov	r2, sp
 8014654:	f000 f848 	bl	80146e8 <_fstat_r>
 8014658:	2800      	cmp	r0, #0
 801465a:	dbec      	blt.n	8014636 <__swhatbuf_r+0x12>
 801465c:	9901      	ldr	r1, [sp, #4]
 801465e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014662:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014666:	4259      	negs	r1, r3
 8014668:	4159      	adcs	r1, r3
 801466a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801466e:	e7eb      	b.n	8014648 <__swhatbuf_r+0x24>

08014670 <__smakebuf_r>:
 8014670:	898b      	ldrh	r3, [r1, #12]
 8014672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014674:	079d      	lsls	r5, r3, #30
 8014676:	4606      	mov	r6, r0
 8014678:	460c      	mov	r4, r1
 801467a:	d507      	bpl.n	801468c <__smakebuf_r+0x1c>
 801467c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014680:	6023      	str	r3, [r4, #0]
 8014682:	6123      	str	r3, [r4, #16]
 8014684:	2301      	movs	r3, #1
 8014686:	6163      	str	r3, [r4, #20]
 8014688:	b002      	add	sp, #8
 801468a:	bd70      	pop	{r4, r5, r6, pc}
 801468c:	ab01      	add	r3, sp, #4
 801468e:	466a      	mov	r2, sp
 8014690:	f7ff ffc8 	bl	8014624 <__swhatbuf_r>
 8014694:	9900      	ldr	r1, [sp, #0]
 8014696:	4605      	mov	r5, r0
 8014698:	4630      	mov	r0, r6
 801469a:	f7fe fecb 	bl	8013434 <_malloc_r>
 801469e:	b948      	cbnz	r0, 80146b4 <__smakebuf_r+0x44>
 80146a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146a4:	059a      	lsls	r2, r3, #22
 80146a6:	d4ef      	bmi.n	8014688 <__smakebuf_r+0x18>
 80146a8:	f023 0303 	bic.w	r3, r3, #3
 80146ac:	f043 0302 	orr.w	r3, r3, #2
 80146b0:	81a3      	strh	r3, [r4, #12]
 80146b2:	e7e3      	b.n	801467c <__smakebuf_r+0xc>
 80146b4:	89a3      	ldrh	r3, [r4, #12]
 80146b6:	6020      	str	r0, [r4, #0]
 80146b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146bc:	81a3      	strh	r3, [r4, #12]
 80146be:	9b00      	ldr	r3, [sp, #0]
 80146c0:	6163      	str	r3, [r4, #20]
 80146c2:	9b01      	ldr	r3, [sp, #4]
 80146c4:	6120      	str	r0, [r4, #16]
 80146c6:	b15b      	cbz	r3, 80146e0 <__smakebuf_r+0x70>
 80146c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146cc:	4630      	mov	r0, r6
 80146ce:	f000 f81d 	bl	801470c <_isatty_r>
 80146d2:	b128      	cbz	r0, 80146e0 <__smakebuf_r+0x70>
 80146d4:	89a3      	ldrh	r3, [r4, #12]
 80146d6:	f023 0303 	bic.w	r3, r3, #3
 80146da:	f043 0301 	orr.w	r3, r3, #1
 80146de:	81a3      	strh	r3, [r4, #12]
 80146e0:	89a3      	ldrh	r3, [r4, #12]
 80146e2:	431d      	orrs	r5, r3
 80146e4:	81a5      	strh	r5, [r4, #12]
 80146e6:	e7cf      	b.n	8014688 <__smakebuf_r+0x18>

080146e8 <_fstat_r>:
 80146e8:	b538      	push	{r3, r4, r5, lr}
 80146ea:	4d07      	ldr	r5, [pc, #28]	; (8014708 <_fstat_r+0x20>)
 80146ec:	2300      	movs	r3, #0
 80146ee:	4604      	mov	r4, r0
 80146f0:	4608      	mov	r0, r1
 80146f2:	4611      	mov	r1, r2
 80146f4:	602b      	str	r3, [r5, #0]
 80146f6:	f7ee fe7e 	bl	80033f6 <_fstat>
 80146fa:	1c43      	adds	r3, r0, #1
 80146fc:	d102      	bne.n	8014704 <_fstat_r+0x1c>
 80146fe:	682b      	ldr	r3, [r5, #0]
 8014700:	b103      	cbz	r3, 8014704 <_fstat_r+0x1c>
 8014702:	6023      	str	r3, [r4, #0]
 8014704:	bd38      	pop	{r3, r4, r5, pc}
 8014706:	bf00      	nop
 8014708:	20005ff0 	.word	0x20005ff0

0801470c <_isatty_r>:
 801470c:	b538      	push	{r3, r4, r5, lr}
 801470e:	4d06      	ldr	r5, [pc, #24]	; (8014728 <_isatty_r+0x1c>)
 8014710:	2300      	movs	r3, #0
 8014712:	4604      	mov	r4, r0
 8014714:	4608      	mov	r0, r1
 8014716:	602b      	str	r3, [r5, #0]
 8014718:	f7ee fe7d 	bl	8003416 <_isatty>
 801471c:	1c43      	adds	r3, r0, #1
 801471e:	d102      	bne.n	8014726 <_isatty_r+0x1a>
 8014720:	682b      	ldr	r3, [r5, #0]
 8014722:	b103      	cbz	r3, 8014726 <_isatty_r+0x1a>
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	bd38      	pop	{r3, r4, r5, pc}
 8014728:	20005ff0 	.word	0x20005ff0

0801472c <powf>:
 801472c:	b508      	push	{r3, lr}
 801472e:	ed2d 8b04 	vpush	{d8-d9}
 8014732:	eeb0 8a60 	vmov.f32	s16, s1
 8014736:	eeb0 9a40 	vmov.f32	s18, s0
 801473a:	f000 f85b 	bl	80147f4 <__ieee754_powf>
 801473e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014746:	eef0 8a40 	vmov.f32	s17, s0
 801474a:	d63e      	bvs.n	80147ca <powf+0x9e>
 801474c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014754:	d112      	bne.n	801477c <powf+0x50>
 8014756:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801475e:	d039      	beq.n	80147d4 <powf+0xa8>
 8014760:	eeb0 0a48 	vmov.f32	s0, s16
 8014764:	f000 f839 	bl	80147da <finitef>
 8014768:	b378      	cbz	r0, 80147ca <powf+0x9e>
 801476a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014772:	d52a      	bpl.n	80147ca <powf+0x9e>
 8014774:	f7fd ff34 	bl	80125e0 <__errno>
 8014778:	2322      	movs	r3, #34	; 0x22
 801477a:	e014      	b.n	80147a6 <powf+0x7a>
 801477c:	f000 f82d 	bl	80147da <finitef>
 8014780:	b998      	cbnz	r0, 80147aa <powf+0x7e>
 8014782:	eeb0 0a49 	vmov.f32	s0, s18
 8014786:	f000 f828 	bl	80147da <finitef>
 801478a:	b170      	cbz	r0, 80147aa <powf+0x7e>
 801478c:	eeb0 0a48 	vmov.f32	s0, s16
 8014790:	f000 f823 	bl	80147da <finitef>
 8014794:	b148      	cbz	r0, 80147aa <powf+0x7e>
 8014796:	eef4 8a68 	vcmp.f32	s17, s17
 801479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479e:	d7e9      	bvc.n	8014774 <powf+0x48>
 80147a0:	f7fd ff1e 	bl	80125e0 <__errno>
 80147a4:	2321      	movs	r3, #33	; 0x21
 80147a6:	6003      	str	r3, [r0, #0]
 80147a8:	e00f      	b.n	80147ca <powf+0x9e>
 80147aa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80147ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b2:	d10a      	bne.n	80147ca <powf+0x9e>
 80147b4:	eeb0 0a49 	vmov.f32	s0, s18
 80147b8:	f000 f80f 	bl	80147da <finitef>
 80147bc:	b128      	cbz	r0, 80147ca <powf+0x9e>
 80147be:	eeb0 0a48 	vmov.f32	s0, s16
 80147c2:	f000 f80a 	bl	80147da <finitef>
 80147c6:	2800      	cmp	r0, #0
 80147c8:	d1d4      	bne.n	8014774 <powf+0x48>
 80147ca:	eeb0 0a68 	vmov.f32	s0, s17
 80147ce:	ecbd 8b04 	vpop	{d8-d9}
 80147d2:	bd08      	pop	{r3, pc}
 80147d4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80147d8:	e7f7      	b.n	80147ca <powf+0x9e>

080147da <finitef>:
 80147da:	b082      	sub	sp, #8
 80147dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80147e0:	9801      	ldr	r0, [sp, #4]
 80147e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80147e6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80147ea:	bfac      	ite	ge
 80147ec:	2000      	movge	r0, #0
 80147ee:	2001      	movlt	r0, #1
 80147f0:	b002      	add	sp, #8
 80147f2:	4770      	bx	lr

080147f4 <__ieee754_powf>:
 80147f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f8:	ee10 4a90 	vmov	r4, s1
 80147fc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8014800:	ed2d 8b02 	vpush	{d8}
 8014804:	ee10 7a10 	vmov	r7, s0
 8014808:	eeb0 8a40 	vmov.f32	s16, s0
 801480c:	eef0 8a60 	vmov.f32	s17, s1
 8014810:	d10c      	bne.n	801482c <__ieee754_powf+0x38>
 8014812:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8014816:	007f      	lsls	r7, r7, #1
 8014818:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801481c:	f240 8292 	bls.w	8014d44 <__ieee754_powf+0x550>
 8014820:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014824:	ecbd 8b02 	vpop	{d8}
 8014828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801482c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8014830:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014834:	dcf4      	bgt.n	8014820 <__ieee754_powf+0x2c>
 8014836:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801483a:	dd08      	ble.n	801484e <__ieee754_powf+0x5a>
 801483c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014840:	d1ee      	bne.n	8014820 <__ieee754_powf+0x2c>
 8014842:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8014846:	0064      	lsls	r4, r4, #1
 8014848:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801484c:	e7e6      	b.n	801481c <__ieee754_powf+0x28>
 801484e:	2f00      	cmp	r7, #0
 8014850:	da20      	bge.n	8014894 <__ieee754_powf+0xa0>
 8014852:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8014856:	da2d      	bge.n	80148b4 <__ieee754_powf+0xc0>
 8014858:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801485c:	f2c0 827b 	blt.w	8014d56 <__ieee754_powf+0x562>
 8014860:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8014864:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014868:	fa48 f603 	asr.w	r6, r8, r3
 801486c:	fa06 f303 	lsl.w	r3, r6, r3
 8014870:	4543      	cmp	r3, r8
 8014872:	f040 8270 	bne.w	8014d56 <__ieee754_powf+0x562>
 8014876:	f006 0601 	and.w	r6, r6, #1
 801487a:	f1c6 0602 	rsb	r6, r6, #2
 801487e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8014882:	d11f      	bne.n	80148c4 <__ieee754_powf+0xd0>
 8014884:	2c00      	cmp	r4, #0
 8014886:	f280 8263 	bge.w	8014d50 <__ieee754_powf+0x55c>
 801488a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801488e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014892:	e7c7      	b.n	8014824 <__ieee754_powf+0x30>
 8014894:	2600      	movs	r6, #0
 8014896:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801489a:	d1f0      	bne.n	801487e <__ieee754_powf+0x8a>
 801489c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80148a0:	f000 8250 	beq.w	8014d44 <__ieee754_powf+0x550>
 80148a4:	dd08      	ble.n	80148b8 <__ieee754_powf+0xc4>
 80148a6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8014bac <__ieee754_powf+0x3b8>
 80148aa:	2c00      	cmp	r4, #0
 80148ac:	bfa8      	it	ge
 80148ae:	eeb0 0a68 	vmovge.f32	s0, s17
 80148b2:	e7b7      	b.n	8014824 <__ieee754_powf+0x30>
 80148b4:	2602      	movs	r6, #2
 80148b6:	e7ee      	b.n	8014896 <__ieee754_powf+0xa2>
 80148b8:	2c00      	cmp	r4, #0
 80148ba:	f280 8246 	bge.w	8014d4a <__ieee754_powf+0x556>
 80148be:	eeb1 0a68 	vneg.f32	s0, s17
 80148c2:	e7af      	b.n	8014824 <__ieee754_powf+0x30>
 80148c4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80148c8:	d102      	bne.n	80148d0 <__ieee754_powf+0xdc>
 80148ca:	ee28 0a08 	vmul.f32	s0, s16, s16
 80148ce:	e7a9      	b.n	8014824 <__ieee754_powf+0x30>
 80148d0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80148d4:	eeb0 0a48 	vmov.f32	s0, s16
 80148d8:	d107      	bne.n	80148ea <__ieee754_powf+0xf6>
 80148da:	2f00      	cmp	r7, #0
 80148dc:	db05      	blt.n	80148ea <__ieee754_powf+0xf6>
 80148de:	ecbd 8b02 	vpop	{d8}
 80148e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148e6:	f000 badf 	b.w	8014ea8 <__ieee754_sqrtf>
 80148ea:	f000 fa4d 	bl	8014d88 <fabsf>
 80148ee:	b125      	cbz	r5, 80148fa <__ieee754_powf+0x106>
 80148f0:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 80148f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80148f8:	d115      	bne.n	8014926 <__ieee754_powf+0x132>
 80148fa:	2c00      	cmp	r4, #0
 80148fc:	bfbc      	itt	lt
 80148fe:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8014902:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014906:	2f00      	cmp	r7, #0
 8014908:	da8c      	bge.n	8014824 <__ieee754_powf+0x30>
 801490a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801490e:	4335      	orrs	r5, r6
 8014910:	d104      	bne.n	801491c <__ieee754_powf+0x128>
 8014912:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014916:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801491a:	e783      	b.n	8014824 <__ieee754_powf+0x30>
 801491c:	2e01      	cmp	r6, #1
 801491e:	d181      	bne.n	8014824 <__ieee754_powf+0x30>
 8014920:	eeb1 0a40 	vneg.f32	s0, s0
 8014924:	e77e      	b.n	8014824 <__ieee754_powf+0x30>
 8014926:	0ff8      	lsrs	r0, r7, #31
 8014928:	3801      	subs	r0, #1
 801492a:	ea56 0300 	orrs.w	r3, r6, r0
 801492e:	d104      	bne.n	801493a <__ieee754_powf+0x146>
 8014930:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014934:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014938:	e774      	b.n	8014824 <__ieee754_powf+0x30>
 801493a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801493e:	dd73      	ble.n	8014a28 <__ieee754_powf+0x234>
 8014940:	4b9b      	ldr	r3, [pc, #620]	; (8014bb0 <__ieee754_powf+0x3bc>)
 8014942:	429d      	cmp	r5, r3
 8014944:	dc08      	bgt.n	8014958 <__ieee754_powf+0x164>
 8014946:	2c00      	cmp	r4, #0
 8014948:	da0b      	bge.n	8014962 <__ieee754_powf+0x16e>
 801494a:	2000      	movs	r0, #0
 801494c:	ecbd 8b02 	vpop	{d8}
 8014950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014954:	f000 baa2 	b.w	8014e9c <__math_oflowf>
 8014958:	4b96      	ldr	r3, [pc, #600]	; (8014bb4 <__ieee754_powf+0x3c0>)
 801495a:	429d      	cmp	r5, r3
 801495c:	dd08      	ble.n	8014970 <__ieee754_powf+0x17c>
 801495e:	2c00      	cmp	r4, #0
 8014960:	dcf3      	bgt.n	801494a <__ieee754_powf+0x156>
 8014962:	2000      	movs	r0, #0
 8014964:	ecbd 8b02 	vpop	{d8}
 8014968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801496c:	f000 ba90 	b.w	8014e90 <__math_uflowf>
 8014970:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014974:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014978:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8014bb8 <__ieee754_powf+0x3c4>
 801497c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014980:	eee0 6a67 	vfms.f32	s13, s0, s15
 8014984:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014988:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801498c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014994:	eddf 7a89 	vldr	s15, [pc, #548]	; 8014bbc <__ieee754_powf+0x3c8>
 8014998:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801499c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8014bc0 <__ieee754_powf+0x3cc>
 80149a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80149a4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8014bc4 <__ieee754_powf+0x3d0>
 80149a8:	eef0 6a67 	vmov.f32	s13, s15
 80149ac:	eee0 6a07 	vfma.f32	s13, s0, s14
 80149b0:	ee16 3a90 	vmov	r3, s13
 80149b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80149b8:	f023 030f 	bic.w	r3, r3, #15
 80149bc:	ee06 3a90 	vmov	s13, r3
 80149c0:	eee0 6a47 	vfms.f32	s13, s0, s14
 80149c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80149c8:	3e01      	subs	r6, #1
 80149ca:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80149ce:	4306      	orrs	r6, r0
 80149d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80149d4:	f024 040f 	bic.w	r4, r4, #15
 80149d8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80149dc:	bf08      	it	eq
 80149de:	eeb0 8a47 	vmoveq.f32	s16, s14
 80149e2:	ee07 4a10 	vmov	s14, r4
 80149e6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80149ea:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80149ee:	ee07 3a90 	vmov	s15, r3
 80149f2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80149f6:	ee07 4a10 	vmov	s14, r4
 80149fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149fe:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014a02:	ee17 1a10 	vmov	r1, s14
 8014a06:	2900      	cmp	r1, #0
 8014a08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a0c:	f340 817c 	ble.w	8014d08 <__ieee754_powf+0x514>
 8014a10:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014a14:	f340 80f8 	ble.w	8014c08 <__ieee754_powf+0x414>
 8014a18:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a20:	bf4c      	ite	mi
 8014a22:	2001      	movmi	r0, #1
 8014a24:	2000      	movpl	r0, #0
 8014a26:	e791      	b.n	801494c <__ieee754_powf+0x158>
 8014a28:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8014a2c:	bf01      	itttt	eq
 8014a2e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8014bc8 <__ieee754_powf+0x3d4>
 8014a32:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014a36:	f06f 0317 	mvneq.w	r3, #23
 8014a3a:	ee17 5a90 	vmoveq	r5, s15
 8014a3e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8014a42:	bf18      	it	ne
 8014a44:	2300      	movne	r3, #0
 8014a46:	3a7f      	subs	r2, #127	; 0x7f
 8014a48:	441a      	add	r2, r3
 8014a4a:	4b60      	ldr	r3, [pc, #384]	; (8014bcc <__ieee754_powf+0x3d8>)
 8014a4c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8014a50:	429d      	cmp	r5, r3
 8014a52:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8014a56:	dd06      	ble.n	8014a66 <__ieee754_powf+0x272>
 8014a58:	4b5d      	ldr	r3, [pc, #372]	; (8014bd0 <__ieee754_powf+0x3dc>)
 8014a5a:	429d      	cmp	r5, r3
 8014a5c:	f340 80a4 	ble.w	8014ba8 <__ieee754_powf+0x3b4>
 8014a60:	3201      	adds	r2, #1
 8014a62:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014a66:	2500      	movs	r5, #0
 8014a68:	4b5a      	ldr	r3, [pc, #360]	; (8014bd4 <__ieee754_powf+0x3e0>)
 8014a6a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014a6e:	ee07 1a10 	vmov	s14, r1
 8014a72:	edd3 5a00 	vldr	s11, [r3]
 8014a76:	4b58      	ldr	r3, [pc, #352]	; (8014bd8 <__ieee754_powf+0x3e4>)
 8014a78:	ee75 7a87 	vadd.f32	s15, s11, s14
 8014a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a80:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8014a84:	1049      	asrs	r1, r1, #1
 8014a86:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014a8a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014a8e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8014a92:	ee37 6a65 	vsub.f32	s12, s14, s11
 8014a96:	ee07 1a90 	vmov	s15, r1
 8014a9a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8014a9e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8014aa2:	ee15 7a10 	vmov	r7, s10
 8014aa6:	401f      	ands	r7, r3
 8014aa8:	ee06 7a90 	vmov	s13, r7
 8014aac:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8014ab0:	ee37 7a65 	vsub.f32	s14, s14, s11
 8014ab4:	ee65 7a05 	vmul.f32	s15, s10, s10
 8014ab8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8014abc:	eddf 5a47 	vldr	s11, [pc, #284]	; 8014bdc <__ieee754_powf+0x3e8>
 8014ac0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8014be0 <__ieee754_powf+0x3ec>
 8014ac4:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014ac8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014be4 <__ieee754_powf+0x3f0>
 8014acc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014ad0:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014bb8 <__ieee754_powf+0x3c4>
 8014ad4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014ad8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014be8 <__ieee754_powf+0x3f4>
 8014adc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014ae0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8014bec <__ieee754_powf+0x3f8>
 8014ae4:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014ae8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014aec:	ee35 7a26 	vadd.f32	s14, s10, s13
 8014af0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8014af4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014af8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014afc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8014b00:	eef0 5a67 	vmov.f32	s11, s15
 8014b04:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8014b08:	ee75 5a87 	vadd.f32	s11, s11, s14
 8014b0c:	ee15 1a90 	vmov	r1, s11
 8014b10:	4019      	ands	r1, r3
 8014b12:	ee05 1a90 	vmov	s11, r1
 8014b16:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8014b1a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8014b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b22:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014b26:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014b2a:	eeb0 6a67 	vmov.f32	s12, s15
 8014b2e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014b32:	ee16 1a10 	vmov	r1, s12
 8014b36:	4019      	ands	r1, r3
 8014b38:	ee07 1a10 	vmov	s14, r1
 8014b3c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8014b40:	ee06 1a10 	vmov	s12, r1
 8014b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b48:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014bf0 <__ieee754_powf+0x3fc>
 8014b4c:	4929      	ldr	r1, [pc, #164]	; (8014bf4 <__ieee754_powf+0x400>)
 8014b4e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8014bf8 <__ieee754_powf+0x404>
 8014b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b56:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014bfc <__ieee754_powf+0x408>
 8014b5a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014b5e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014b62:	ed91 7a00 	vldr	s14, [r1]
 8014b66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b6a:	ee07 2a10 	vmov	s14, r2
 8014b6e:	eef0 6a67 	vmov.f32	s13, s15
 8014b72:	4a23      	ldr	r2, [pc, #140]	; (8014c00 <__ieee754_powf+0x40c>)
 8014b74:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014b78:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8014b7c:	ed92 5a00 	vldr	s10, [r2]
 8014b80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b84:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014b88:	ee76 6a87 	vadd.f32	s13, s13, s14
 8014b8c:	ee16 2a90 	vmov	r2, s13
 8014b90:	4013      	ands	r3, r2
 8014b92:	ee06 3a90 	vmov	s13, r3
 8014b96:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014b9a:	ee37 7a45 	vsub.f32	s14, s14, s10
 8014b9e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8014ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ba6:	e70f      	b.n	80149c8 <__ieee754_powf+0x1d4>
 8014ba8:	2501      	movs	r5, #1
 8014baa:	e75d      	b.n	8014a68 <__ieee754_powf+0x274>
 8014bac:	00000000 	.word	0x00000000
 8014bb0:	3f7ffff3 	.word	0x3f7ffff3
 8014bb4:	3f800007 	.word	0x3f800007
 8014bb8:	3eaaaaab 	.word	0x3eaaaaab
 8014bbc:	3fb8aa3b 	.word	0x3fb8aa3b
 8014bc0:	36eca570 	.word	0x36eca570
 8014bc4:	3fb8aa00 	.word	0x3fb8aa00
 8014bc8:	4b800000 	.word	0x4b800000
 8014bcc:	001cc471 	.word	0x001cc471
 8014bd0:	005db3d6 	.word	0x005db3d6
 8014bd4:	080159dc 	.word	0x080159dc
 8014bd8:	fffff000 	.word	0xfffff000
 8014bdc:	3e6c3255 	.word	0x3e6c3255
 8014be0:	3e53f142 	.word	0x3e53f142
 8014be4:	3e8ba305 	.word	0x3e8ba305
 8014be8:	3edb6db7 	.word	0x3edb6db7
 8014bec:	3f19999a 	.word	0x3f19999a
 8014bf0:	3f76384f 	.word	0x3f76384f
 8014bf4:	080159ec 	.word	0x080159ec
 8014bf8:	3f763800 	.word	0x3f763800
 8014bfc:	369dc3a0 	.word	0x369dc3a0
 8014c00:	080159e4 	.word	0x080159e4
 8014c04:	3338aa3c 	.word	0x3338aa3c
 8014c08:	f040 8093 	bne.w	8014d32 <__ieee754_powf+0x53e>
 8014c0c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014c04 <__ieee754_powf+0x410>
 8014c10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c14:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014c18:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c20:	f73f aefa 	bgt.w	8014a18 <__ieee754_powf+0x224>
 8014c24:	15db      	asrs	r3, r3, #23
 8014c26:	3b7e      	subs	r3, #126	; 0x7e
 8014c28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8014c2c:	4118      	asrs	r0, r3
 8014c2e:	4408      	add	r0, r1
 8014c30:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014c34:	4a49      	ldr	r2, [pc, #292]	; (8014d5c <__ieee754_powf+0x568>)
 8014c36:	3b7f      	subs	r3, #127	; 0x7f
 8014c38:	411a      	asrs	r2, r3
 8014c3a:	4002      	ands	r2, r0
 8014c3c:	ee07 2a10 	vmov	s14, r2
 8014c40:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8014c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014c48:	f1c3 0317 	rsb	r3, r3, #23
 8014c4c:	4118      	asrs	r0, r3
 8014c4e:	2900      	cmp	r1, #0
 8014c50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014c54:	bfb8      	it	lt
 8014c56:	4240      	neglt	r0, r0
 8014c58:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014c5c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8014d60 <__ieee754_powf+0x56c>
 8014c60:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8014d64 <__ieee754_powf+0x570>
 8014c64:	ee17 3a10 	vmov	r3, s14
 8014c68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014c6c:	f023 030f 	bic.w	r3, r3, #15
 8014c70:	ee07 3a10 	vmov	s14, r3
 8014c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c7c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014c80:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014d68 <__ieee754_powf+0x574>
 8014c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c88:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8014c8c:	eef0 6a67 	vmov.f32	s13, s15
 8014c90:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014c94:	eef0 5a66 	vmov.f32	s11, s13
 8014c98:	eee7 5a46 	vfms.f32	s11, s14, s12
 8014c9c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014ca0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014ca4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8014d6c <__ieee754_powf+0x578>
 8014ca8:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014d70 <__ieee754_powf+0x57c>
 8014cac:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014cb0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8014d74 <__ieee754_powf+0x580>
 8014cb4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014cb8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014d78 <__ieee754_powf+0x584>
 8014cbc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014cc0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8014d7c <__ieee754_powf+0x588>
 8014cc4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014cc8:	eeb0 6a66 	vmov.f32	s12, s13
 8014ccc:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8014cd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014cd4:	ee66 5a86 	vmul.f32	s11, s13, s12
 8014cd8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014cdc:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8014ce0:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8014ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ce8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014cec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014cf0:	ee10 3a10 	vmov	r3, s0
 8014cf4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014cfc:	da1f      	bge.n	8014d3e <__ieee754_powf+0x54a>
 8014cfe:	f000 f84b 	bl	8014d98 <scalbnf>
 8014d02:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014d06:	e58d      	b.n	8014824 <__ieee754_powf+0x30>
 8014d08:	4a1d      	ldr	r2, [pc, #116]	; (8014d80 <__ieee754_powf+0x58c>)
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	dd07      	ble.n	8014d1e <__ieee754_powf+0x52a>
 8014d0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d16:	bf4c      	ite	mi
 8014d18:	2001      	movmi	r0, #1
 8014d1a:	2000      	movpl	r0, #0
 8014d1c:	e622      	b.n	8014964 <__ieee754_powf+0x170>
 8014d1e:	d108      	bne.n	8014d32 <__ieee754_powf+0x53e>
 8014d20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014d24:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2c:	f6ff af7a 	blt.w	8014c24 <__ieee754_powf+0x430>
 8014d30:	e7ed      	b.n	8014d0e <__ieee754_powf+0x51a>
 8014d32:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014d36:	f73f af75 	bgt.w	8014c24 <__ieee754_powf+0x430>
 8014d3a:	2000      	movs	r0, #0
 8014d3c:	e78c      	b.n	8014c58 <__ieee754_powf+0x464>
 8014d3e:	ee00 3a10 	vmov	s0, r3
 8014d42:	e7de      	b.n	8014d02 <__ieee754_powf+0x50e>
 8014d44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014d48:	e56c      	b.n	8014824 <__ieee754_powf+0x30>
 8014d4a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014d84 <__ieee754_powf+0x590>
 8014d4e:	e569      	b.n	8014824 <__ieee754_powf+0x30>
 8014d50:	eeb0 0a48 	vmov.f32	s0, s16
 8014d54:	e566      	b.n	8014824 <__ieee754_powf+0x30>
 8014d56:	2600      	movs	r6, #0
 8014d58:	e591      	b.n	801487e <__ieee754_powf+0x8a>
 8014d5a:	bf00      	nop
 8014d5c:	ff800000 	.word	0xff800000
 8014d60:	3f317218 	.word	0x3f317218
 8014d64:	3f317200 	.word	0x3f317200
 8014d68:	35bfbe8c 	.word	0x35bfbe8c
 8014d6c:	b5ddea0e 	.word	0xb5ddea0e
 8014d70:	3331bb4c 	.word	0x3331bb4c
 8014d74:	388ab355 	.word	0x388ab355
 8014d78:	bb360b61 	.word	0xbb360b61
 8014d7c:	3e2aaaab 	.word	0x3e2aaaab
 8014d80:	43160000 	.word	0x43160000
 8014d84:	00000000 	.word	0x00000000

08014d88 <fabsf>:
 8014d88:	ee10 3a10 	vmov	r3, s0
 8014d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d90:	ee00 3a10 	vmov	s0, r3
 8014d94:	4770      	bx	lr
	...

08014d98 <scalbnf>:
 8014d98:	ee10 3a10 	vmov	r3, s0
 8014d9c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014da0:	d02b      	beq.n	8014dfa <scalbnf+0x62>
 8014da2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014da6:	d302      	bcc.n	8014dae <scalbnf+0x16>
 8014da8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014dac:	4770      	bx	lr
 8014dae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014db2:	d123      	bne.n	8014dfc <scalbnf+0x64>
 8014db4:	4b24      	ldr	r3, [pc, #144]	; (8014e48 <scalbnf+0xb0>)
 8014db6:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014e4c <scalbnf+0xb4>
 8014dba:	4298      	cmp	r0, r3
 8014dbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014dc0:	db17      	blt.n	8014df2 <scalbnf+0x5a>
 8014dc2:	ee10 3a10 	vmov	r3, s0
 8014dc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014dca:	3a19      	subs	r2, #25
 8014dcc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8014dd0:	4288      	cmp	r0, r1
 8014dd2:	dd15      	ble.n	8014e00 <scalbnf+0x68>
 8014dd4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014e50 <scalbnf+0xb8>
 8014dd8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8014e54 <scalbnf+0xbc>
 8014ddc:	ee10 3a10 	vmov	r3, s0
 8014de0:	eeb0 7a67 	vmov.f32	s14, s15
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	bfb8      	it	lt
 8014de8:	eef0 7a66 	vmovlt.f32	s15, s13
 8014dec:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014df0:	4770      	bx	lr
 8014df2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014e58 <scalbnf+0xc0>
 8014df6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014dfa:	4770      	bx	lr
 8014dfc:	0dd2      	lsrs	r2, r2, #23
 8014dfe:	e7e5      	b.n	8014dcc <scalbnf+0x34>
 8014e00:	4410      	add	r0, r2
 8014e02:	28fe      	cmp	r0, #254	; 0xfe
 8014e04:	dce6      	bgt.n	8014dd4 <scalbnf+0x3c>
 8014e06:	2800      	cmp	r0, #0
 8014e08:	dd06      	ble.n	8014e18 <scalbnf+0x80>
 8014e0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014e0e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014e12:	ee00 3a10 	vmov	s0, r3
 8014e16:	4770      	bx	lr
 8014e18:	f110 0f16 	cmn.w	r0, #22
 8014e1c:	da09      	bge.n	8014e32 <scalbnf+0x9a>
 8014e1e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014e58 <scalbnf+0xc0>
 8014e22:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8014e5c <scalbnf+0xc4>
 8014e26:	ee10 3a10 	vmov	r3, s0
 8014e2a:	eeb0 7a67 	vmov.f32	s14, s15
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	e7d9      	b.n	8014de6 <scalbnf+0x4e>
 8014e32:	3019      	adds	r0, #25
 8014e34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014e38:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014e3c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014e60 <scalbnf+0xc8>
 8014e40:	ee07 3a90 	vmov	s15, r3
 8014e44:	e7d7      	b.n	8014df6 <scalbnf+0x5e>
 8014e46:	bf00      	nop
 8014e48:	ffff3cb0 	.word	0xffff3cb0
 8014e4c:	4c000000 	.word	0x4c000000
 8014e50:	7149f2ca 	.word	0x7149f2ca
 8014e54:	f149f2ca 	.word	0xf149f2ca
 8014e58:	0da24260 	.word	0x0da24260
 8014e5c:	8da24260 	.word	0x8da24260
 8014e60:	33000000 	.word	0x33000000

08014e64 <with_errnof>:
 8014e64:	b513      	push	{r0, r1, r4, lr}
 8014e66:	4604      	mov	r4, r0
 8014e68:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014e6c:	f7fd fbb8 	bl	80125e0 <__errno>
 8014e70:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014e74:	6004      	str	r4, [r0, #0]
 8014e76:	b002      	add	sp, #8
 8014e78:	bd10      	pop	{r4, pc}

08014e7a <xflowf>:
 8014e7a:	b130      	cbz	r0, 8014e8a <xflowf+0x10>
 8014e7c:	eef1 7a40 	vneg.f32	s15, s0
 8014e80:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014e84:	2022      	movs	r0, #34	; 0x22
 8014e86:	f7ff bfed 	b.w	8014e64 <with_errnof>
 8014e8a:	eef0 7a40 	vmov.f32	s15, s0
 8014e8e:	e7f7      	b.n	8014e80 <xflowf+0x6>

08014e90 <__math_uflowf>:
 8014e90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014e98 <__math_uflowf+0x8>
 8014e94:	f7ff bff1 	b.w	8014e7a <xflowf>
 8014e98:	10000000 	.word	0x10000000

08014e9c <__math_oflowf>:
 8014e9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ea4 <__math_oflowf+0x8>
 8014ea0:	f7ff bfeb 	b.w	8014e7a <xflowf>
 8014ea4:	70000000 	.word	0x70000000

08014ea8 <__ieee754_sqrtf>:
 8014ea8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014eac:	4770      	bx	lr
	...

08014eb0 <_init>:
 8014eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eb2:	bf00      	nop
 8014eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eb6:	bc08      	pop	{r3}
 8014eb8:	469e      	mov	lr, r3
 8014eba:	4770      	bx	lr

08014ebc <_fini>:
 8014ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ebe:	bf00      	nop
 8014ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ec2:	bc08      	pop	{r3}
 8014ec4:	469e      	mov	lr, r3
 8014ec6:	4770      	bx	lr
