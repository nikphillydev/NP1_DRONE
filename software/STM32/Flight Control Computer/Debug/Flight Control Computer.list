
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f24  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08013108  08013108  00023108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138ec  080138ec  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  080138ec  080138ec  000238ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138f4  080138f4  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138f4  080138f4  000238f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138f8  080138f8  000238f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  080138fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059e0  20000350  08013c4c  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d30  08013c4c  00035d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   000321f1  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006cf1  00000000  00000000  000625b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002760  00000000  00000000  000692a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e4b  00000000  00000000  0006ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003064f  00000000  00000000  0006d853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000323d5  00000000  00000000  0009dea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001187ad  00000000  00000000  000d0277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b748  00000000  00000000  001e8a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001f416c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	080130ec 	.word	0x080130ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	080130ec 	.word	0x080130ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <BMI088_Init>:
 *
 */

uint8_t BMI088_Init(BMI088* imu, SPI_HandleTypeDef* spi_handle, osMutexId_t* spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port,
		uint16_t acc_cs_pin, uint16_t gyro_cs_pin, uint16_t acc_irq_pin, uint16_t gyro_irq_pin)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
	imu->spi_handle = spi_handle;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	601a      	str	r2, [r3, #0]
	imu->spi_mutex = spi_mutex;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
	imu->acc_cs_port = acc_cs_port;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	609a      	str	r2, [r3, #8]
	imu->gyro_cs_port = gyro_cs_port;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a3a      	ldr	r2, [r7, #32]
 8000f18:	60da      	str	r2, [r3, #12]
	imu->acc_cs_pin = acc_cs_pin;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f1e:	821a      	strh	r2, [r3, #16]
	imu->gyro_cs_pin = gyro_cs_pin;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f24:	825a      	strh	r2, [r3, #18]
	imu->acc_irq_pin = acc_irq_pin;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f2a:	829a      	strh	r2, [r3, #20]
	imu->gyro_irq_pin = gyro_irq_pin;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f30:	82da      	strh	r2, [r3, #22]
	imu->accel_x = 0.0;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
	imu->accel_y = 0.0;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
	imu->accel_z = 0.0;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
	imu->rate_x = 0.0;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
	imu->rate_y = 0.0;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
	imu->rate_z = 0.0;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
	imu->temperature = 0.0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
	imu->acc_conversion = 9.80665 / 32768.0f * 2.0f * 1.5f; /* Based on +-3g range */
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4a7b      	ldr	r2, [pc, #492]	; (800115c <BMI088_Init+0x268>)
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
	imu->gyro_conversion = M_PI / 180.0f * 500.0f / 32768.0f; /* Based on +-500 deg/s range */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4a7b      	ldr	r2, [pc, #492]	; (8001160 <BMI088_Init+0x26c>)
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Perform soft-reset of accelerometer
	tx_data[0] = 0xB6;
 8000f76:	23b6      	movs	r3, #182	; 0xb6
 8000f78:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_SOFTRESET, tx_data, 1);
 8000f7a:	f107 0214 	add.w	r2, r7, #20
 8000f7e:	2301      	movs	r3, #1
 8000f80:	217e      	movs	r1, #126	; 0x7e
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 fb3e 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f00b f8f2 	bl	800c172 <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 8000f8e:	23b6      	movs	r3, #182	; 0xb6
 8000f90:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_SOFTRESET, tx_data, 1);
 8000f92:	f107 0214 	add.w	r2, r7, #20
 8000f96:	2301      	movs	r3, #1
 8000f98:	2114      	movs	r1, #20
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 fc8c 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f00b f8e6 	bl	800c172 <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6898      	ldr	r0, [r3, #8]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	8a1b      	ldrh	r3, [r3, #16]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f002 f98b 	bl	80032cc <HAL_GPIO_WritePin>
	osDelay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f00b f8db 	bl	800c172 <osDelay>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6898      	ldr	r0, [r3, #8]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8a1b      	ldrh	r3, [r3, #16]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f002 f980 	bl	80032cc <HAL_GPIO_WritePin>
	osDelay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f00b f8d0 	bl	800c172 <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	743b      	strb	r3, [r7, #16]
	BMI088_ReadAccRegister(imu, ACC_CHIP_ID, rx_data, 1);
 8000fd6:	f107 0210 	add.w	r2, r7, #16
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2100      	movs	r1, #0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 fa42 	bl	8001468 <BMI088_ReadAccRegister>
	if (rx_data[0] == 0x1E)
 8000fe4:	7c3b      	ldrb	r3, [r7, #16]
 8000fe6:	2b1e      	cmp	r3, #30
 8000fe8:	d15f      	bne.n	80010aa <BMI088_Init+0x1b6>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", INFO);
 8000fea:	2100      	movs	r1, #0
 8000fec:	485d      	ldr	r0, [pc, #372]	; (8001164 <BMI088_Init+0x270>)
 8000fee:	f000 fcef 	bl	80019d0 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 8000ff2:	200a      	movs	r0, #10
 8000ff4:	f00b f8bd 	bl	800c172 <osDelay>

	// Set 100Hz ODR, no over-sampling (40Hz BW)
	tx_data[0] = 0x88;
 8000ff8:	2388      	movs	r3, #136	; 0x88
 8000ffa:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_CONF, tx_data, 1);
 8000ffc:	f107 0214 	add.w	r2, r7, #20
 8001000:	2301      	movs	r3, #1
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 fafd 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 800100a:	200a      	movs	r0, #10
 800100c:	f00b f8b1 	bl	800c172 <osDelay>

	// Set +-3g range (10920 LSB/g)
	tx_data[0] = 0x00;
 8001010:	2300      	movs	r3, #0
 8001012:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_RANGE, tx_data, 1);
 8001014:	f107 0214 	add.w	r2, r7, #20
 8001018:	2301      	movs	r3, #1
 800101a:	2141      	movs	r1, #65	; 0x41
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 faf1 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f00b f8a5 	bl	800c172 <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 8001028:	230a      	movs	r3, #10
 800102a:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT1_IO_CTRL, tx_data, 1);
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	2301      	movs	r3, #1
 8001032:	2153      	movs	r1, #83	; 0x53
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 fae5 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f00b f899 	bl	800c172 <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 8001040:	2304      	movs	r3, #4
 8001042:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT_MAP_DATA, tx_data, 1);
 8001044:	f107 0214 	add.w	r2, r7, #20
 8001048:	2301      	movs	r3, #1
 800104a:	2158      	movs	r1, #88	; 0x58
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 fad9 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8001052:	200a      	movs	r0, #10
 8001054:	f00b f88d 	bl	800c172 <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 8001058:	2300      	movs	r3, #0
 800105a:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CONF, tx_data, 1);
 800105c:	f107 0214 	add.w	r2, r7, #20
 8001060:	2301      	movs	r3, #1
 8001062:	217c      	movs	r1, #124	; 0x7c
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f000 facd 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f00b f881 	bl	800c172 <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 8001070:	2304      	movs	r3, #4
 8001072:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CTRL, tx_data, 1);
 8001074:	f107 0214 	add.w	r2, r7, #20
 8001078:	2301      	movs	r3, #1
 800107a:	217d      	movs	r1, #125	; 0x7d
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 fac1 	bl	8001604 <BMI088_WriteAccRegister>
	osDelay(10);
 8001082:	200a      	movs	r0, #10
 8001084:	f00b f875 	bl	800c172 <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", INFO);
 8001088:	2100      	movs	r1, #0
 800108a:	4837      	ldr	r0, [pc, #220]	; (8001168 <BMI088_Init+0x274>)
 800108c:	f000 fca0 	bl	80019d0 <USB_Log>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	743b      	strb	r3, [r7, #16]
	BMI088_ReadGyroRegister(imu, GYRO_CHIP_ID, rx_data, 1);
 8001094:	f107 0210 	add.w	r2, r7, #16
 8001098:	2301      	movs	r3, #1
 800109a:	2100      	movs	r1, #0
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fb3d 	bl	800171c <BMI088_ReadGyroRegister>
	if (rx_data[0] == 0x0F)
 80010a2:	7c3b      	ldrb	r3, [r7, #16]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d14f      	bne.n	8001148 <BMI088_Init+0x254>
 80010a8:	e005      	b.n	80010b6 <BMI088_Init+0x1c2>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 80010aa:	2102      	movs	r1, #2
 80010ac:	482f      	ldr	r0, [pc, #188]	; (800116c <BMI088_Init+0x278>)
 80010ae:	f000 fc8f 	bl	80019d0 <USB_Log>
		return 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e04d      	b.n	8001152 <BMI088_Init+0x25e>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", INFO);
 80010b6:	2100      	movs	r1, #0
 80010b8:	482d      	ldr	r0, [pc, #180]	; (8001170 <BMI088_Init+0x27c>)
 80010ba:	f000 fc89 	bl	80019d0 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f00b f857 	bl	800c172 <osDelay>

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 80010c4:	2302      	movs	r3, #2
 80010c6:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_RANGE, tx_data, 1);
 80010c8:	f107 0214 	add.w	r2, r7, #20
 80010cc:	2301      	movs	r3, #1
 80010ce:	210f      	movs	r1, #15
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 fbf1 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f00b f84b 	bl	800c172 <osDelay>

	// Set 100Hz ODR (32Hz BW)
	tx_data[0] = 0x07;
 80010dc:	2307      	movs	r3, #7
 80010de:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_BANDWIDTH, tx_data, 1);
 80010e0:	f107 0214 	add.w	r2, r7, #20
 80010e4:	2301      	movs	r3, #1
 80010e6:	2110      	movs	r1, #16
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 fbe5 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f00b f83f 	bl	800c172 <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_INT_CTRL, tx_data, 1);
 80010f8:	f107 0214 	add.w	r2, r7, #20
 80010fc:	2301      	movs	r3, #1
 80010fe:	2115      	movs	r1, #21
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 fbd9 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f00b f833 	bl	800c172 <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 800110c:	2301      	movs	r3, #1
 800110e:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_CONF, tx_data, 1);
 8001110:	f107 0214 	add.w	r2, r7, #20
 8001114:	2301      	movs	r3, #1
 8001116:	2116      	movs	r1, #22
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 fbcd 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f00b f827 	bl	800c172 <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 8001124:	2301      	movs	r3, #1
 8001126:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_MAP, tx_data, 1);
 8001128:	f107 0214 	add.w	r2, r7, #20
 800112c:	2301      	movs	r3, #1
 800112e:	2118      	movs	r1, #24
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 fbc1 	bl	80018b8 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f00b f81b 	bl	800c172 <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", INFO);
 800113c:	2100      	movs	r1, #0
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <BMI088_Init+0x280>)
 8001140:	f000 fc46 	bl	80019d0 <USB_Log>

	return 1;
 8001144:	2301      	movs	r3, #1
 8001146:	e004      	b.n	8001152 <BMI088_Init+0x25e>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 8001148:	2102      	movs	r1, #2
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <BMI088_Init+0x284>)
 800114c:	f000 fc40 	bl	80019d0 <USB_Log>
		return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	3a6b5c0f 	.word	0x3a6b5c0f
 8001160:	398ba058 	.word	0x398ba058
 8001164:	08013108 	.word	0x08013108
 8001168:	0801317c 	.word	0x0801317c
 800116c:	08013140 	.word	0x08013140
 8001170:	080131a4 	.word	0x080131a4
 8001174:	08013210 	.word	0x08013210
 8001178:	080131d8 	.word	0x080131d8

0800117c <BMI088_ReadAccData>:

uint8_t BMI088_ReadAccData(BMI088* imu)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadAccRegister(imu, ACC_X_LSB, rx_data, sizeof(rx_data));
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2306      	movs	r3, #6
 800118a:	2112      	movs	r1, #18
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f96b 	bl	8001468 <BMI088_ReadAccRegister>
 8001192:	4603      	mov	r3, r0
 8001194:	75fb      	strb	r3, [r7, #23]

	if (status)
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d045      	beq.n	8001228 <BMI088_ReadAccData+0xac>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7a3b      	ldrb	r3, [r7, #8]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	82bb      	strh	r3, [r7, #20]
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	7abb      	ldrb	r3, [r7, #10]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	827b      	strh	r3, [r7, #18]
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	7b3b      	ldrb	r3, [r7, #12]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	823b      	strh	r3, [r7, #16]

		imu->accel_x = accel_x_int16 * imu->acc_conversion;
 80011c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a06 	vstr	s15, [r3, #24]
		imu->accel_y = accel_y_int16 * imu->acc_conversion;
 80011e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edc3 7a07 	vstr	s15, [r3, #28]
		imu->accel_z = accel_z_int16 * imu->acc_conversion;
 80011fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edc3 7a08 	vstr	s15, [r3, #32]

		// Clear data ready interrupt
		BMI088_ReadAccRegister(imu, ACC_INT_STAT_1, rx_data, 1);
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	2301      	movs	r3, #1
 8001220:	211d      	movs	r1, #29
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f920 	bl	8001468 <BMI088_ReadAccRegister>
	}

	return status;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <BMI088_ReadGyroData>:

uint8_t BMI088_ReadGyroData(BMI088* imu)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadGyroRegister(imu, RATE_X_LSB, rx_data, sizeof(rx_data));
 800123a:	f107 0208 	add.w	r2, r7, #8
 800123e:	2306      	movs	r3, #6
 8001240:	2102      	movs	r1, #2
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fa6a 	bl	800171c <BMI088_ReadGyroRegister>
 8001248:	4603      	mov	r3, r0
 800124a:	75fb      	strb	r3, [r7, #23]

	if (status)
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03e      	beq.n	80012d0 <BMI088_ReadGyroData+0x9e>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 8001252:	7a7b      	ldrb	r3, [r7, #9]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7a3b      	ldrb	r3, [r7, #8]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	82bb      	strh	r3, [r7, #20]
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	7abb      	ldrb	r3, [r7, #10]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	827b      	strh	r3, [r7, #18]
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 800126e:	7b7b      	ldrb	r3, [r7, #13]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7b3b      	ldrb	r3, [r7, #12]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	823b      	strh	r3, [r7, #16]

		imu->rate_x = rate_x_int16 * imu->gyro_conversion;
 800127c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		imu->rate_y = rate_y_int16 * imu->gyro_conversion;
 8001298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		imu->rate_z = rate_z_int16 * imu->gyro_conversion;
 80012b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		// Interrupt cleared automatically after 280-400us
	}

	return status;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <BMI088_ReadTempData>:

uint8_t BMI088_ReadTempData(BMI088* imu)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	uint8_t status = BMI088_ReadAccRegister(imu, TEMP_MSB, rx_data, sizeof(rx_data));
 80012e2:	f107 0208 	add.w	r2, r7, #8
 80012e6:	2302      	movs	r3, #2
 80012e8:	2122      	movs	r1, #34	; 0x22
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f8bc 	bl	8001468 <BMI088_ReadAccRegister>
 80012f0:	4603      	mov	r3, r0
 80012f2:	737b      	strb	r3, [r7, #13]

	if (status)
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d028      	beq.n	800134c <BMI088_ReadTempData+0x72>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	b21a      	sxth	r2, r3
 8001300:	7a7b      	ldrb	r3, [r7, #9]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	b2db      	uxtb	r3, r3
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	817b      	strh	r3, [r7, #10]
		int16_t temp_int11 = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	81fb      	strh	r3, [r7, #14]
		if (temp_uint11 > 1023)
 8001312:	897b      	ldrh	r3, [r7, #10]
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001318:	d305      	bcc.n	8001326 <BMI088_ReadTempData+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 800131a:	897b      	ldrh	r3, [r7, #10]
 800131c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001320:	b29b      	uxth	r3, r3
 8001322:	81fb      	strh	r3, [r7, #14]
 8001324:	e001      	b.n	800132a <BMI088_ReadTempData+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 8001326:	897b      	ldrh	r3, [r7, #10]
 8001328:	81fb      	strh	r3, [r7, #14]
		}
		imu->temperature = temp_int11 * 0.125f + 23.0f;
 800132a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001336:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	}

	return status;
 800134c:	7b7b      	ldrb	r3, [r7, #13]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <BMI088_LogAccData>:

uint8_t BMI088_LogAccData(BMI088* imu)
{
 8001358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800135c:	b0a8      	sub	sp, #160	; 0xa0
 800135e:	af06      	add	r7, sp, #24
 8001360:	6078      	str	r0, [r7, #4]
	char string[128];
	snprintf(string, 128, "ACC %.2f %.2f %.2f", imu->accel_x, imu->accel_y, imu->accel_z);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f916 	bl	8000598 <__aeabi_f2d>
 800136c:	4604      	mov	r4, r0
 800136e:	460d      	mov	r5, r1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f90f 	bl	8000598 <__aeabi_f2d>
 800137a:	4680      	mov	r8, r0
 800137c:	4689      	mov	r9, r1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f908 	bl	8000598 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	f107 0008 	add.w	r0, r7, #8
 8001390:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001394:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001398:	e9cd 4500 	strd	r4, r5, [sp]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <BMI088_LogAccData+0x64>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	f00f fcde 	bl	8010d60 <sniprintf>
	return USB_Log(string, SENSOR);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2103      	movs	r1, #3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fb10 	bl	80019d0 <USB_Log>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3788      	adds	r7, #136	; 0x88
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013bc:	08013234 	.word	0x08013234

080013c0 <BMI088_LogGyroData>:

uint8_t BMI088_LogGyroData(BMI088* imu)
{
 80013c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013c4:	b0a8      	sub	sp, #160	; 0xa0
 80013c6:	af06      	add	r7, sp, #24
 80013c8:	6078      	str	r0, [r7, #4]
	char string[128];
	snprintf(string, 128, "GYRO %.2f %.2f %.2f", imu->rate_x, imu->rate_y, imu->rate_z);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	4604      	mov	r4, r0
 80013d6:	460d      	mov	r5, r1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	4680      	mov	r8, r0
 80013e4:	4689      	mov	r9, r1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8d4 	bl	8000598 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	f107 0008 	add.w	r0, r7, #8
 80013f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001400:	e9cd 4500 	strd	r4, r5, [sp]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <BMI088_LogGyroData+0x64>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	f00f fcaa 	bl	8010d60 <sniprintf>
	return USB_Log(string, SENSOR);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2103      	movs	r1, #3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fadc 	bl	80019d0 <USB_Log>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3788      	adds	r7, #136	; 0x88
 800141e:	46bd      	mov	sp, r7
 8001420:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001424:	08013248 	.word	0x08013248

08001428 <BMI088_LogTempData>:

uint8_t BMI088_LogTempData(BMI088* imu)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0a4      	sub	sp, #144	; 0x90
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
	char string[128];
	snprintf(string, 128, "TEMP %.2f", imu->temperature);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f8af 	bl	8000598 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	f107 0008 	add.w	r0, r7, #8
 8001442:	e9cd 2300 	strd	r2, r3, [sp]
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <BMI088_LogTempData+0x3c>)
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	f00f fc89 	bl	8010d60 <sniprintf>
	return USB_Log(string, SENSOR);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2103      	movs	r1, #3
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fabb 	bl	80019d0 <USB_Log>
 800145a:	4603      	mov	r3, r0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3788      	adds	r7, #136	; 0x88
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	0801325c 	.word	0x0801325c

08001468 <BMI088_ReadAccRegister>:
 * BMI088 LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t BMI088_ReadAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	b091      	sub	sp, #68	; 0x44
 800146e:	af02      	add	r7, sp, #8
 8001470:	6178      	str	r0, [r7, #20]
 8001472:	60fa      	str	r2, [r7, #12]
 8001474:	461a      	mov	r2, r3
 8001476:	460b      	mov	r3, r1
 8001478:	74fb      	strb	r3, [r7, #19]
 800147a:	4613      	mov	r3, r2
 800147c:	823b      	strh	r3, [r7, #16]
 800147e:	466b      	mov	r3, sp
 8001480:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 2;
 8001482:	8a3b      	ldrh	r3, [r7, #16]
 8001484:	3302      	adds	r3, #2
 8001486:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t tx_buffer[num_bytes];
 8001488:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800148a:	460b      	mov	r3, r1
 800148c:	3b01      	subs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001490:	b28b      	uxth	r3, r1
 8001492:	2200      	movs	r2, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	00c3      	lsls	r3, r0, #3
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	00c2      	lsls	r2, r0, #3
 80014ae:	b28b      	uxth	r3, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	469a      	mov	sl, r3
 80014b4:	4693      	mov	fp, r2
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014ca:	460b      	mov	r3, r1
 80014cc:	3307      	adds	r3, #7
 80014ce:	08db      	lsrs	r3, r3, #3
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	ebad 0d03 	sub.w	sp, sp, r3
 80014d6:	ab02      	add	r3, sp, #8
 80014d8:	3300      	adds	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t rx_buffer[num_bytes];
 80014dc:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80014de:	460b      	mov	r3, r1
 80014e0:	3b01      	subs	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	b28b      	uxth	r3, r1
 80014e6:	2200      	movs	r2, #0
 80014e8:	4698      	mov	r8, r3
 80014ea:	4691      	mov	r9, r2
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001500:	b28b      	uxth	r3, r1
 8001502:	2200      	movs	r2, #0
 8001504:	461c      	mov	r4, r3
 8001506:	4615      	mov	r5, r2
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	00eb      	lsls	r3, r5, #3
 8001512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001516:	00e2      	lsls	r2, r4, #3
 8001518:	460b      	mov	r3, r1
 800151a:	3307      	adds	r3, #7
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	ebad 0d03 	sub.w	sp, sp, r3
 8001524:	ab02      	add	r3, sp, #8
 8001526:	3300      	adds	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
 800152e:	e00c      	b.n	800154a <BMI088_ReadAccRegister+0xe2>
	{
		tx_buffer[i] = 0;
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	4413      	add	r3, r2
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	4413      	add	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	3301      	adds	r3, #1
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
 800154a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800154c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154e:	429a      	cmp	r2, r3
 8001550:	dbee      	blt.n	8001530 <BMI088_ReadAccRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001558:	b2da      	uxtb	r2, r3
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001568:	4618      	mov	r0, r3
 800156a:	f00a fea3 	bl	800c2b4 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6898      	ldr	r0, [r3, #8]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	8a1b      	ldrh	r3, [r3, #16]
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	f001 fea7 	bl	80032cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001588:	9200      	str	r2, [sp, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800158e:	f004 ffb1 	bl	80064f4 <HAL_SPI_TransmitReceive>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	6898      	ldr	r0, [r3, #8]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	8a1b      	ldrh	r3, [r3, #16]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	f001 fe8e 	bl	80032cc <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f00a fec7 	bl	800c34a <osMutexRelease>

	if (status)
 80015bc:	7efb      	ldrb	r3, [r7, #27]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d013      	beq.n	80015ea <BMI088_ReadAccRegister+0x182>
	{
		// The first received byte is a dummy byte (ignore index i=1)
		for (int i = 2; i < num_bytes; i++)
 80015c2:	2302      	movs	r3, #2
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
 80015c6:	e00b      	b.n	80015e0 <BMI088_ReadAccRegister+0x178>
		{
			rx_data[i - 2] = rx_buffer[i];
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	3b02      	subs	r3, #2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	69f9      	ldr	r1, [r7, #28]
 80015d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d4:	440a      	add	r2, r1
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	3301      	adds	r3, #1
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
 80015e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbef      	blt.n	80015c8 <BMI088_ReadAccRegister+0x160>
 80015e8:	e003      	b.n	80015f2 <BMI088_ReadAccRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 80015ea:	2102      	movs	r1, #2
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <BMI088_ReadAccRegister+0x198>)
 80015ee:	f000 f9ef 	bl	80019d0 <USB_Log>
	}

	return status;
 80015f2:	7efb      	ldrb	r3, [r7, #27]
 80015f4:	46b5      	mov	sp, r6
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	373c      	adds	r7, #60	; 0x3c
 80015fa:	46bd      	mov	sp, r7
 80015fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001600:	08013268 	.word	0x08013268

08001604 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001608:	b08b      	sub	sp, #44	; 0x2c
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	461a      	mov	r2, r3
 8001612:	460b      	mov	r3, r1
 8001614:	72fb      	strb	r3, [r7, #11]
 8001616:	4613      	mov	r3, r2
 8001618:	813b      	strh	r3, [r7, #8]
 800161a:	466b      	mov	r3, sp
 800161c:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 800161e:	893b      	ldrh	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t tx_buffer[num_bytes];
 8001624:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001626:	460b      	mov	r3, r1
 8001628:	3b01      	subs	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	b28b      	uxth	r3, r1
 800162e:	2200      	movs	r2, #0
 8001630:	4698      	mov	r8, r3
 8001632:	4691      	mov	r9, r2
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001648:	b28b      	uxth	r3, r1
 800164a:	2200      	movs	r2, #0
 800164c:	461c      	mov	r4, r3
 800164e:	4615      	mov	r5, r2
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	00eb      	lsls	r3, r5, #3
 800165a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165e:	00e2      	lsls	r2, r4, #3
 8001660:	460b      	mov	r3, r1
 8001662:	3307      	adds	r3, #7
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	ebad 0d03 	sub.w	sp, sp, r3
 800166c:	466b      	mov	r3, sp
 800166e:	3300      	adds	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	7afa      	ldrb	r2, [r7, #11]
 8001676:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 8001678:	2301      	movs	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
 800167c:	e00c      	b.n	8001698 <BMI088_WriteAccRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	3b01      	subs	r3, #1
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	7819      	ldrb	r1, [r3, #0]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	4413      	add	r3, r2
 800168e:	460a      	mov	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
 8001698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	429a      	cmp	r2, r3
 800169e:	dbee      	blt.n	800167e <BMI088_WriteAccRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00a fe02 	bl	800c2b4 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6898      	ldr	r0, [r3, #8]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8a1b      	ldrh	r3, [r3, #16]
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	f001 fe06 	bl	80032cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f004 fd9d 	bl	800620a <HAL_SPI_Transmit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6898      	ldr	r0, [r3, #8]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8a1b      	ldrh	r3, [r3, #16]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	f001 fdef 	bl	80032cc <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00a fe28 	bl	800c34a <osMutexRelease>

	if (!status)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <BMI088_WriteAccRegister+0x104>
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 8001700:	2102      	movs	r1, #2
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <BMI088_WriteAccRegister+0x114>)
 8001704:	f000 f964 	bl	80019d0 <USB_Log>
	}

	return status;
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	46b5      	mov	sp, r6
}
 800170c:	4618      	mov	r0, r3
 800170e:	372c      	adds	r7, #44	; 0x2c
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001716:	bf00      	nop
 8001718:	08013294 	.word	0x08013294

0800171c <BMI088_ReadGyroRegister>:

uint8_t BMI088_ReadGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	b091      	sub	sp, #68	; 0x44
 8001722:	af02      	add	r7, sp, #8
 8001724:	6178      	str	r0, [r7, #20]
 8001726:	60fa      	str	r2, [r7, #12]
 8001728:	461a      	mov	r2, r3
 800172a:	460b      	mov	r3, r1
 800172c:	74fb      	strb	r3, [r7, #19]
 800172e:	4613      	mov	r3, r2
 8001730:	823b      	strh	r3, [r7, #16]
 8001732:	466b      	mov	r3, sp
 8001734:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 8001736:	8a3b      	ldrh	r3, [r7, #16]
 8001738:	3301      	adds	r3, #1
 800173a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t tx_buffer[num_bytes];
 800173c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800173e:	460b      	mov	r3, r1
 8001740:	3b01      	subs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
 8001744:	b28b      	uxth	r3, r1
 8001746:	2200      	movs	r2, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	00c3      	lsls	r3, r0, #3
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800175e:	6838      	ldr	r0, [r7, #0]
 8001760:	00c2      	lsls	r2, r0, #3
 8001762:	b28b      	uxth	r3, r1
 8001764:	2200      	movs	r2, #0
 8001766:	469a      	mov	sl, r3
 8001768:	4693      	mov	fp, r2
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001776:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800177a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800177e:	460b      	mov	r3, r1
 8001780:	3307      	adds	r3, #7
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	ebad 0d03 	sub.w	sp, sp, r3
 800178a:	ab02      	add	r3, sp, #8
 800178c:	3300      	adds	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t rx_buffer[num_bytes];
 8001790:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001792:	460b      	mov	r3, r1
 8001794:	3b01      	subs	r3, #1
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	b28b      	uxth	r3, r1
 800179a:	2200      	movs	r2, #0
 800179c:	4698      	mov	r8, r3
 800179e:	4691      	mov	r9, r2
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b4:	b28b      	uxth	r3, r1
 80017b6:	2200      	movs	r2, #0
 80017b8:	461c      	mov	r4, r3
 80017ba:	4615      	mov	r5, r2
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	00eb      	lsls	r3, r5, #3
 80017c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ca:	00e2      	lsls	r2, r4, #3
 80017cc:	460b      	mov	r3, r1
 80017ce:	3307      	adds	r3, #7
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	ebad 0d03 	sub.w	sp, sp, r3
 80017d8:	ab02      	add	r3, sp, #8
 80017da:	3300      	adds	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
 80017e2:	e00c      	b.n	80017fe <BMI088_ReadGyroRegister+0xe2>
	{
		tx_buffer[i] = 0;
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	4413      	add	r3, r2
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f2:	4413      	add	r3, r2
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	3301      	adds	r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
 80017fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001802:	429a      	cmp	r2, r3
 8001804:	dbee      	blt.n	80017e4 <BMI088_ReadGyroRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001806:	7cfb      	ldrb	r3, [r7, #19]
 8001808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800180c:	b2da      	uxtb	r2, r3
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800181c:	4618      	mov	r0, r3
 800181e:	f00a fd49 	bl	800c2b4 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	68d8      	ldr	r0, [r3, #12]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	8a5b      	ldrh	r3, [r3, #18]
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	f001 fd4d 	bl	80032cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800183c:	9200      	str	r2, [sp, #0]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001842:	f004 fe57 	bl	80064f4 <HAL_SPI_TransmitReceive>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	68d8      	ldr	r0, [r3, #12]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	8a5b      	ldrh	r3, [r3, #18]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 fd34 	bl	80032cc <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f00a fd6d 	bl	800c34a <osMutexRelease>

	if (status)
 8001870:	7efb      	ldrb	r3, [r7, #27]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d013      	beq.n	800189e <BMI088_ReadGyroRegister+0x182>
	{
		for (int i = 1; i < num_bytes; i++)
 8001876:	2301      	movs	r3, #1
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
 800187a:	e00b      	b.n	8001894 <BMI088_ReadGyroRegister+0x178>
		{
			rx_data[i - 1] = rx_buffer[i];
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187e:	3b01      	subs	r3, #1
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	69f9      	ldr	r1, [r7, #28]
 8001886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001888:	440a      	add	r2, r1
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	3301      	adds	r3, #1
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
 8001894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001898:	429a      	cmp	r2, r3
 800189a:	dbef      	blt.n	800187c <BMI088_ReadGyroRegister+0x160>
 800189c:	e003      	b.n	80018a6 <BMI088_ReadGyroRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 800189e:	2102      	movs	r1, #2
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <BMI088_ReadGyroRegister+0x198>)
 80018a2:	f000 f895 	bl	80019d0 <USB_Log>
	}

	return status;
 80018a6:	7efb      	ldrb	r3, [r7, #27]
 80018a8:	46b5      	mov	sp, r6
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	373c      	adds	r7, #60	; 0x3c
 80018ae:	46bd      	mov	sp, r7
 80018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b4:	080132c4 	.word	0x080132c4

080018b8 <BMI088_WriteGyroRegister>:

uint8_t BMI088_WriteGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 80018b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018bc:	b08b      	sub	sp, #44	; 0x2c
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	72fb      	strb	r3, [r7, #11]
 80018ca:	4613      	mov	r3, r2
 80018cc:	813b      	strh	r3, [r7, #8]
 80018ce:	466b      	mov	r3, sp
 80018d0:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 80018d2:	893b      	ldrh	r3, [r7, #8]
 80018d4:	3301      	adds	r3, #1
 80018d6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t tx_buffer[num_bytes];
 80018d8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80018da:	460b      	mov	r3, r1
 80018dc:	3b01      	subs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	b28b      	uxth	r3, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	4698      	mov	r8, r3
 80018e6:	4691      	mov	r9, r2
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fc:	b28b      	uxth	r3, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	461c      	mov	r4, r3
 8001902:	4615      	mov	r5, r2
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	00eb      	lsls	r3, r5, #3
 800190e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001912:	00e2      	lsls	r2, r4, #3
 8001914:	460b      	mov	r3, r1
 8001916:	3307      	adds	r3, #7
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	ebad 0d03 	sub.w	sp, sp, r3
 8001920:	466b      	mov	r3, sp
 8001922:	3300      	adds	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	7afa      	ldrb	r2, [r7, #11]
 800192a:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e00c      	b.n	800194c <BMI088_WriteGyroRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	3b01      	subs	r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	7819      	ldrb	r1, [r3, #0]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	4413      	add	r3, r2
 8001942:	460a      	mov	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	3301      	adds	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
 800194c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001950:	429a      	cmp	r2, r3
 8001952:	dbee      	blt.n	8001932 <BMI088_WriteGyroRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800195e:	4618      	mov	r0, r3
 8001960:	f00a fca8 	bl	800c2b4 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	68d8      	ldr	r0, [r3, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8a5b      	ldrh	r3, [r3, #18]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	f001 fcac 	bl	80032cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800197a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f004 fc43 	bl	800620a <HAL_SPI_Transmit>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	68d8      	ldr	r0, [r3, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8a5b      	ldrh	r3, [r3, #18]
 800199a:	2201      	movs	r2, #1
 800199c:	4619      	mov	r1, r3
 800199e:	f001 fc95 	bl	80032cc <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00a fcce 	bl	800c34a <osMutexRelease>

	if (!status)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <BMI088_WriteGyroRegister+0x104>
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 80019b4:	2102      	movs	r1, #2
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <BMI088_WriteGyroRegister+0x114>)
 80019b8:	f000 f80a 	bl	80019d0 <USB_Log>
	}

	return status;
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	46b5      	mov	sp, r6
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	372c      	adds	r7, #44	; 0x2c
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019ca:	bf00      	nop
 80019cc:	080132ec 	.word	0x080132ec

080019d0 <USB_Log>:
#include "cmsis_os.h"
#include "usbd_cdc_if.h"
#include "usbd_def.h"

uint8_t USB_Log(const char* string, Log_Level level)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	ed2d 8b02 	vpush	{d8}
 80019d6:	b0c8      	sub	sp, #288	; 0x120
 80019d8:	af04      	add	r7, sp, #16
 80019da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019e2:	6018      	str	r0, [r3, #0]
 80019e4:	460a      	mov	r2, r1
 80019e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ea:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80019ee:	701a      	strb	r2, [r3, #0]
	char str[256];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 80019f0:	f00a fb0e 	bl	800c010 <osKernelGetTickCount>
 80019f4:	ee07 0a90 	vmov	s15, r0
 80019f8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019fc:	f00a fb1d 	bl	800c03a <osKernelGetTickFreq>
 8001a00:	ee07 0a90 	vmov	s15, r0
 8001a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a08:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a0c:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108

	switch (level) {
 8001a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a14:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d862      	bhi.n	8001ae4 <USB_Log+0x114>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <USB_Log+0x54>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a61 	.word	0x08001a61
 8001a2c:	08001a8d 	.word	0x08001a8d
 8001a30:	08001ab9 	.word	0x08001ab9
		case INFO:
			snprintf(str, 256, "%.2f LOG INFO %s\n", seconds, string);
 8001a34:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001a38:	f7fe fdae 	bl	8000598 <__aeabi_f2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	f107 0008 	add.w	r0, r7, #8
 8001a44:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001a48:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001a4c:	6809      	ldr	r1, [r1, #0]
 8001a4e:	9102      	str	r1, [sp, #8]
 8001a50:	e9cd 2300 	strd	r2, r3, [sp]
 8001a54:	4a4d      	ldr	r2, [pc, #308]	; (8001b8c <USB_Log+0x1bc>)
 8001a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a5a:	f00f f981 	bl	8010d60 <sniprintf>
			break;
 8001a5e:	e057      	b.n	8001b10 <USB_Log+0x140>
		case WARN:
			snprintf(str, 256, "%.2f LOG WARN %s\n", seconds, string);
 8001a60:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001a64:	f7fe fd98 	bl	8000598 <__aeabi_f2d>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	f107 0008 	add.w	r0, r7, #8
 8001a70:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001a74:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001a78:	6809      	ldr	r1, [r1, #0]
 8001a7a:	9102      	str	r1, [sp, #8]
 8001a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a80:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <USB_Log+0x1c0>)
 8001a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a86:	f00f f96b 	bl	8010d60 <sniprintf>
			break;
 8001a8a:	e041      	b.n	8001b10 <USB_Log+0x140>
		case ERR:
			snprintf(str, 256, "%.2f LOG ERR %s\n", seconds, string);
 8001a8c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001a90:	f7fe fd82 	bl	8000598 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	f107 0008 	add.w	r0, r7, #8
 8001a9c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001aa0:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001aa4:	6809      	ldr	r1, [r1, #0]
 8001aa6:	9102      	str	r1, [sp, #8]
 8001aa8:	e9cd 2300 	strd	r2, r3, [sp]
 8001aac:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <USB_Log+0x1c4>)
 8001aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab2:	f00f f955 	bl	8010d60 <sniprintf>
			break;
 8001ab6:	e02b      	b.n	8001b10 <USB_Log+0x140>
		case SENSOR:
			snprintf(str, 256, "%.2f SENSOR %s\n", seconds, string);
 8001ab8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001abc:	f7fe fd6c 	bl	8000598 <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	f107 0008 	add.w	r0, r7, #8
 8001ac8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001acc:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001ad0:	6809      	ldr	r1, [r1, #0]
 8001ad2:	9102      	str	r1, [sp, #8]
 8001ad4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <USB_Log+0x1c8>)
 8001ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ade:	f00f f93f 	bl	8010d60 <sniprintf>
			break;
 8001ae2:	e015      	b.n	8001b10 <USB_Log+0x140>
		default:
			snprintf(str, 256, "%.2f LOG ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 8001ae4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001ae8:	f7fe fd56 	bl	8000598 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	f107 0008 	add.w	r0, r7, #8
 8001af4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001af8:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001afc:	6809      	ldr	r1, [r1, #0]
 8001afe:	9102      	str	r1, [sp, #8]
 8001b00:	e9cd 2300 	strd	r2, r3, [sp]
 8001b04:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <USB_Log+0x1cc>)
 8001b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0a:	f00f f929 	bl	8010d60 <sniprintf>
			break;
 8001b0e:	bf00      	nop
	}

	// Get USB mutex (shared resource)
	osMutexAcquire(usbMutexHandle, osWaitForever);
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <USB_Log+0x1d0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00a fbcb 	bl	800c2b4 <osMutexAcquire>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fbcc 	bl	80002c0 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00d ffa0 	bl	800fa78 <CDC_Transmit_FS>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	while (status == USBD_BUSY)
 8001b3e:	e012      	b.n	8001b66 <USB_Log+0x196>
	{
		osDelay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f00a fb16 	bl	800c172 <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fbb8 	bl	80002c0 <strlen>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00d ff8c 	bl	800fa78 <CDC_Transmit_FS>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	while (status == USBD_BUSY)
 8001b66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d0e8      	beq.n	8001b40 <USB_Log+0x170>
	}
	osMutexRelease(usbMutexHandle);
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <USB_Log+0x1d0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00a fbe9 	bl	800c34a <osMutexRelease>

	return status;
 8001b78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001b82:	46bd      	mov	sp, r7
 8001b84:	ecbd 8b02 	vpop	{d8}
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08013318 	.word	0x08013318
 8001b90:	0801332c 	.word	0x0801332c
 8001b94:	08013340 	.word	0x08013340
 8001b98:	08013354 	.word	0x08013354
 8001b9c:	08013364 	.word	0x08013364
 8001ba0:	200026bc 	.word	0x200026bc

08001ba4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 8001ba8:	481e      	ldr	r0, [pc, #120]	; (8001c24 <MX_FREERTOS_Init+0x80>)
 8001baa:	f00a fafd 	bl	800c1a8 <osMutexNew>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <MX_FREERTOS_Init+0x84>)
 8001bb2:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 8001bb4:	481d      	ldr	r0, [pc, #116]	; (8001c2c <MX_FREERTOS_Init+0x88>)
 8001bb6:	f00a faf7 	bl	800c1a8 <osMutexNew>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <MX_FREERTOS_Init+0x8c>)
 8001bbe:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of accIRQSemaphore */
  accIRQSemaphoreHandle = osSemaphoreNew(64, 0, &accIRQSemaphore_attributes);
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <MX_FREERTOS_Init+0x90>)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2040      	movs	r0, #64	; 0x40
 8001bc6:	f00a fbfd 	bl	800c3c4 <osSemaphoreNew>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <MX_FREERTOS_Init+0x94>)
 8001bce:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQSemaphore */
  gyroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &gyroIRQSemaphore_attributes);
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <MX_FREERTOS_Init+0x98>)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2040      	movs	r0, #64	; 0x40
 8001bd6:	f00a fbf5 	bl	800c3c4 <osSemaphoreNew>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <MX_FREERTOS_Init+0x9c>)
 8001bde:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of applicationTask */
  applicationTaskHandle = osThreadNew(start_application_task, NULL, &applicationTask_attributes);
 8001be0:	4a18      	ldr	r2, [pc, #96]	; (8001c44 <MX_FREERTOS_Init+0xa0>)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4818      	ldr	r0, [pc, #96]	; (8001c48 <MX_FREERTOS_Init+0xa4>)
 8001be6:	f00a fa31 	bl	800c04c <osThreadNew>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <MX_FREERTOS_Init+0xa8>)
 8001bee:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <MX_FREERTOS_Init+0xac>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4817      	ldr	r0, [pc, #92]	; (8001c54 <MX_FREERTOS_Init+0xb0>)
 8001bf6:	f00a fa29 	bl	800c04c <osThreadNew>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <MX_FREERTOS_Init+0xb4>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 8001c00:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <MX_FREERTOS_Init+0xb8>)
 8001c02:	2100      	movs	r1, #0
 8001c04:	4816      	ldr	r0, [pc, #88]	; (8001c60 <MX_FREERTOS_Init+0xbc>)
 8001c06:	f00a fa21 	bl	800c04c <osThreadNew>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <MX_FREERTOS_Init+0xc0>)
 8001c0e:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(start_logging_task, NULL, &loggingTask_attributes);
 8001c10:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <MX_FREERTOS_Init+0xc4>)
 8001c12:	2100      	movs	r1, #0
 8001c14:	4815      	ldr	r0, [pc, #84]	; (8001c6c <MX_FREERTOS_Init+0xc8>)
 8001c16:	f00a fa19 	bl	800c04c <osThreadNew>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <MX_FREERTOS_Init+0xcc>)
 8001c1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	080134fc 	.word	0x080134fc
 8001c28:	20002668 	.word	0x20002668
 8001c2c:	0801350c 	.word	0x0801350c
 8001c30:	200026bc 	.word	0x200026bc
 8001c34:	0801351c 	.word	0x0801351c
 8001c38:	20002710 	.word	0x20002710
 8001c3c:	0801352c 	.word	0x0801352c
 8001c40:	20002764 	.word	0x20002764
 8001c44:	0801346c 	.word	0x0801346c
 8001c48:	08001c75 	.word	0x08001c75
 8001c4c:	200003a8 	.word	0x200003a8
 8001c50:	08013490 	.word	0x08013490
 8001c54:	08001ce1 	.word	0x08001ce1
 8001c58:	20000c58 	.word	0x20000c58
 8001c5c:	080134b4 	.word	0x080134b4
 8001c60:	08001d0d 	.word	0x08001d0d
 8001c64:	20001508 	.word	0x20001508
 8001c68:	080134d8 	.word	0x080134d8
 8001c6c:	08001d35 	.word	0x08001d35
 8001c70:	20001db8 	.word	0x20001db8

08001c74 <start_application_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_application_task */
void start_application_task(void *argument)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af06      	add	r7, sp, #24
 8001c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_application_task */

	BMI088_Init(&imu, &hspi1, &spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin, GYRO_CS_Pin, ACCEL_INT_Pin, GYRO_INT_Pin);
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	2301      	movs	r3, #1
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <start_application_task+0x5c>)
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <start_application_task+0x60>)
 8001c9c:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <start_application_task+0x64>)
 8001c9e:	f7ff f929 	bl	8000ef4 <BMI088_Init>

	/* Infinite loop */
	for(;;)
	{
		osDelay(100);
 8001ca2:	2064      	movs	r0, #100	; 0x64
 8001ca4:	f00a fa65 	bl	800c172 <osDelay>
		USB_Log("nikolai", INFO);
 8001ca8:	2100      	movs	r1, #0
 8001caa:	480c      	ldr	r0, [pc, #48]	; (8001cdc <start_application_task+0x68>)
 8001cac:	f7ff fe90 	bl	80019d0 <USB_Log>
		osDelay(100);
 8001cb0:	2064      	movs	r0, #100	; 0x64
 8001cb2:	f00a fa5e 	bl	800c172 <osDelay>
		USB_Log("nikolai", WARN);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <start_application_task+0x68>)
 8001cba:	f7ff fe89 	bl	80019d0 <USB_Log>
		osDelay(100);
 8001cbe:	2064      	movs	r0, #100	; 0x64
 8001cc0:	f00a fa57 	bl	800c172 <osDelay>
		USB_Log("nikolai", ERR);
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <start_application_task+0x68>)
 8001cc8:	f7ff fe82 	bl	80019d0 <USB_Log>
		osDelay(100);
 8001ccc:	e7e9      	b.n	8001ca2 <start_application_task+0x2e>
 8001cce:	bf00      	nop
 8001cd0:	20002668 	.word	0x20002668
 8001cd4:	200028d8 	.word	0x200028d8
 8001cd8:	2000036c 	.word	0x2000036c
 8001cdc:	08013400 	.word	0x08013400

08001ce0 <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <start_acc_irq_task+0x24>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00a fbf1 	bl	800c4d8 <osSemaphoreAcquire>
		BMI088_ReadAccData(&imu);
 8001cf6:	4804      	ldr	r0, [pc, #16]	; (8001d08 <start_acc_irq_task+0x28>)
 8001cf8:	f7ff fa40 	bl	800117c <BMI088_ReadAccData>
		BMI088_ReadTempData(&imu); // TODO put this somewhere else?
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <start_acc_irq_task+0x28>)
 8001cfe:	f7ff faec 	bl	80012da <BMI088_ReadTempData>
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 8001d02:	e7f1      	b.n	8001ce8 <start_acc_irq_task+0x8>
 8001d04:	20002710 	.word	0x20002710
 8001d08:	2000036c 	.word	0x2000036c

08001d0c <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <start_gyro_irq_task+0x20>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00a fbdb 	bl	800c4d8 <osSemaphoreAcquire>
		BMI088_ReadGyroData(&imu);
 8001d22:	4803      	ldr	r0, [pc, #12]	; (8001d30 <start_gyro_irq_task+0x24>)
 8001d24:	f7ff fa85 	bl	8001232 <BMI088_ReadGyroData>
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 8001d28:	e7f4      	b.n	8001d14 <start_gyro_irq_task+0x8>
 8001d2a:	bf00      	nop
 8001d2c:	20002764 	.word	0x20002764
 8001d30:	2000036c 	.word	0x2000036c

08001d34 <start_logging_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_logging_task */
void start_logging_task(void *argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN start_logging_task */
	/* Infinite loop */
	for(;;)
	{
		BMI088_LogAccData(&imu);
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <start_logging_task+0x30>)
 8001d3e:	f7ff fb0b 	bl	8001358 <BMI088_LogAccData>
		osDelay(3);
 8001d42:	2003      	movs	r0, #3
 8001d44:	f00a fa15 	bl	800c172 <osDelay>
		BMI088_LogGyroData(&imu);
 8001d48:	4806      	ldr	r0, [pc, #24]	; (8001d64 <start_logging_task+0x30>)
 8001d4a:	f7ff fb39 	bl	80013c0 <BMI088_LogGyroData>
		osDelay(3);
 8001d4e:	2003      	movs	r0, #3
 8001d50:	f00a fa0f 	bl	800c172 <osDelay>
		BMI088_LogTempData(&imu);
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <start_logging_task+0x30>)
 8001d56:	f7ff fb67 	bl	8001428 <BMI088_LogTempData>
		osDelay(3);
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f00a fa09 	bl	800c172 <osDelay>
		BMI088_LogAccData(&imu);
 8001d60:	e7ec      	b.n	8001d3c <start_logging_task+0x8>
 8001d62:	bf00      	nop
 8001d64:	2000036c 	.word	0x2000036c

08001d68 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == imu.acc_irq_pin)
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001d74:	8a9b      	ldrh	r3, [r3, #20]
 8001d76:	88fa      	ldrh	r2, [r7, #6]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d105      	bne.n	8001d88 <HAL_GPIO_EXTI_Callback+0x20>
	{
		osSemaphoreRelease(accIRQSemaphoreHandle);
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00a fbfb 	bl	800c57c <osSemaphoreRelease>
	}
	else if (GPIO_Pin == imu.gyro_irq_pin)
	{
		osSemaphoreRelease(gyroIRQSemaphoreHandle);
	}
}
 8001d86:	e009      	b.n	8001d9c <HAL_GPIO_EXTI_Callback+0x34>
	else if (GPIO_Pin == imu.gyro_irq_pin)
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001d8a:	8adb      	ldrh	r3, [r3, #22]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d104      	bne.n	8001d9c <HAL_GPIO_EXTI_Callback+0x34>
		osSemaphoreRelease(gyroIRQSemaphoreHandle);
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_GPIO_EXTI_Callback+0x44>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00a fbf0 	bl	800c57c <osSemaphoreRelease>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000036c 	.word	0x2000036c
 8001da8:	20002710 	.word	0x20002710
 8001dac:	20002764 	.word	0x20002764

08001db0 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001db6:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <MX_FDCAN1_Init+0x88>)
 8001db8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001de0:	2210      	movs	r2, #16
 8001de2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <MX_FDCAN1_Init+0x84>)
 8001e22:	f000 ff0b 	bl	8002c3c <HAL_FDCAN_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001e2c:	f000 faf4 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200027b8 	.word	0x200027b8
 8001e38:	40006400 	.word	0x40006400

08001e3c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e42:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <MX_FDCAN2_Init+0x88>)
 8001e44:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e7e:	2202      	movs	r2, #2
 8001e80:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_FDCAN2_Init+0x84>)
 8001eae:	f000 fec5 	bl	8002c3c <HAL_FDCAN_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001eb8:	f000 faae 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000281c 	.word	0x2000281c
 8001ec4:	40006800 	.word	0x40006800

08001ec8 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0a0      	sub	sp, #128	; 0x80
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	2254      	movs	r2, #84	; 0x54
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00e ffb0 	bl	8010e4e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_FDCAN_MspInit+0x14c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d142      	bne.n	8001f7e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fe85 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001f14:	f000 fa80 	bl	8002418 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f18:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <HAL_FDCAN_MspInit+0x150>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a3e      	ldr	r2, [pc, #248]	; (8002018 <HAL_FDCAN_MspInit+0x150>)
 8001f20:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_FDCAN_MspInit+0x150>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10b      	bne.n	8001f42 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a35      	ldr	r2, [pc, #212]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f6c:	2309      	movs	r3, #9
 8001f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f74:	4619      	mov	r1, r3
 8001f76:	482a      	ldr	r0, [pc, #168]	; (8002020 <HAL_FDCAN_MspInit+0x158>)
 8001f78:	f001 f826 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001f7c:	e045      	b.n	800200a <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <HAL_FDCAN_MspInit+0x15c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d140      	bne.n	800200a <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 fe3d 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8001fa4:	f000 fa38 	bl	8002418 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_FDCAN_MspInit+0x150>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_FDCAN_MspInit+0x150>)
 8001fb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_FDCAN_MspInit+0x150>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001fc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_FDCAN_MspInit+0x154>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fea:	2360      	movs	r3, #96	; 0x60
 8001fec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002002:	4619      	mov	r1, r3
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <HAL_FDCAN_MspInit+0x158>)
 8002006:	f000 ffdf 	bl	8002fc8 <HAL_GPIO_Init>
}
 800200a:	bf00      	nop
 800200c:	3780      	adds	r7, #128	; 0x80
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40006400 	.word	0x40006400
 8002018:	20002880 	.word	0x20002880
 800201c:	40021000 	.word	0x40021000
 8002020:	48000400 	.word	0x48000400
 8002024:	40006800 	.word	0x40006800

08002028 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	4b6b      	ldr	r3, [pc, #428]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a6a      	ldr	r2, [pc, #424]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b68      	ldr	r3, [pc, #416]	; (80021ec <MX_GPIO_Init+0x1c4>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002056:	4b65      	ldr	r3, [pc, #404]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	4a64      	ldr	r2, [pc, #400]	; (80021ec <MX_GPIO_Init+0x1c4>)
 800205c:	f043 0320 	orr.w	r3, r3, #32
 8002060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002062:	4b62      	ldr	r3, [pc, #392]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	4a5e      	ldr	r2, [pc, #376]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207a:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <MX_GPIO_Init+0x1c4>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	4a58      	ldr	r2, [pc, #352]	; (80021ec <MX_GPIO_Init+0x1c4>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002092:	4b56      	ldr	r3, [pc, #344]	; (80021ec <MX_GPIO_Init+0x1c4>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80020a4:	4852      	ldr	r0, [pc, #328]	; (80021f0 <MX_GPIO_Init+0x1c8>)
 80020a6:	f001 f911 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 80020aa:	2201      	movs	r2, #1
 80020ac:	2111      	movs	r1, #17
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b2:	f001 f90b 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	2102      	movs	r1, #2
 80020ba:	484e      	ldr	r0, [pc, #312]	; (80021f4 <MX_GPIO_Init+0x1cc>)
 80020bc:	f001 f906 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 80020c0:	2200      	movs	r2, #0
 80020c2:	f648 4190 	movw	r1, #35984	; 0x8c90
 80020c6:	484b      	ldr	r0, [pc, #300]	; (80021f4 <MX_GPIO_Init+0x1cc>)
 80020c8:	f001 f900 	bl	80032cc <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f001 f8f9 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 80020da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4619      	mov	r1, r3
 80020f2:	483f      	ldr	r0, [pc, #252]	; (80021f0 <MX_GPIO_Init+0x1c8>)
 80020f4:	f000 ff68 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 80020f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002104:	2302      	movs	r3, #2
 8002106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4838      	ldr	r0, [pc, #224]	; (80021f0 <MX_GPIO_Init+0x1c8>)
 8002110:	f000 ff5a 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8002114:	2311      	movs	r3, #17
 8002116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211c:	2301      	movs	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f000 ff4b 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8002132:	2302      	movs	r3, #2
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002136:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800213a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800213c:	2302      	movs	r3, #2
 800213e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f000 ff3d 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_DRDY_Pin|MAG_INT_Pin
 800214e:	f247 0305 	movw	r3, #28677	; 0x7005
 8002152:	617b      	str	r3, [r7, #20]
                          |BMP_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4824      	ldr	r0, [pc, #144]	; (80021f4 <MX_GPIO_Init+0x1cc>)
 8002164:	f000 ff30 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 8002168:	2302      	movs	r3, #2
 800216a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216c:	2301      	movs	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002170:	2301      	movs	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	481d      	ldr	r0, [pc, #116]	; (80021f4 <MX_GPIO_Init+0x1cc>)
 8002180:	f000 ff22 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8002184:	f648 4390 	movw	r3, #35984	; 0x8c90
 8002188:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4815      	ldr	r0, [pc, #84]	; (80021f4 <MX_GPIO_Init+0x1cc>)
 800219e:	f000 ff13 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 80021a2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80021a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021be:	f000 ff03 	bl	8002fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2105      	movs	r1, #5
 80021c6:	2007      	movs	r0, #7
 80021c8:	f000 fd10 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021cc:	2007      	movs	r0, #7
 80021ce:	f000 fd27 	bl	8002c20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	2028      	movs	r0, #40	; 0x28
 80021d8:	f000 fd08 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021dc:	2028      	movs	r0, #40	; 0x28
 80021de:	f000 fd1f 	bl	8002c20 <HAL_NVIC_EnableIRQ>

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000800 	.word	0x48000800
 80021f4:	48000400 	.word	0x48000400

080021f8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <MX_I2C2_Init+0x74>)
 80021fe:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <MX_I2C2_Init+0x78>)
 8002200:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <MX_I2C2_Init+0x74>)
 8002204:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <MX_I2C2_Init+0x7c>)
 8002206:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <MX_I2C2_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <MX_I2C2_Init+0x74>)
 8002210:	2201      	movs	r2, #1
 8002212:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <MX_I2C2_Init+0x74>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <MX_I2C2_Init+0x74>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_I2C2_Init+0x74>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_I2C2_Init+0x74>)
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_I2C2_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002232:	480e      	ldr	r0, [pc, #56]	; (800226c <MX_I2C2_Init+0x74>)
 8002234:	f001 f87a 	bl	800332c <HAL_I2C_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800223e:	f000 f8eb 	bl	8002418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002242:	2100      	movs	r1, #0
 8002244:	4809      	ldr	r0, [pc, #36]	; (800226c <MX_I2C2_Init+0x74>)
 8002246:	f001 f90c 	bl	8003462 <HAL_I2CEx_ConfigAnalogFilter>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002250:	f000 f8e2 	bl	8002418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002254:	2100      	movs	r1, #0
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_I2C2_Init+0x74>)
 8002258:	f001 f94e 	bl	80034f8 <HAL_I2CEx_ConfigDigitalFilter>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002262:	f000 f8d9 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20002884 	.word	0x20002884
 8002270:	40005800 	.word	0x40005800
 8002274:	30a0a7fb 	.word	0x30a0a7fb

08002278 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b09e      	sub	sp, #120	; 0x78
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	2254      	movs	r2, #84	; 0x54
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00e fdd8 	bl	8010e4e <memset>
  if(i2cHandle->Instance==I2C2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_I2C_MspInit+0xa8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d137      	bne.n	8002318 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fcaf 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80022c0:	f000 f8aa 	bl	8002418 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_I2C_MspInit+0xac>)
 80022c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_I2C_MspInit+0xac>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_I2C_MspInit+0xac>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e2:	2312      	movs	r3, #18
 80022e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022ee:	2304      	movs	r3, #4
 80022f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022f6:	4619      	mov	r1, r3
 80022f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fc:	f000 fe64 	bl	8002fc8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_I2C_MspInit+0xac>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_I2C_MspInit+0xac>)
 8002306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800230a:	6593      	str	r3, [r2, #88]	; 0x58
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_I2C_MspInit+0xac>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002318:	bf00      	nop
 800231a:	3778      	adds	r7, #120	; 0x78
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40005800 	.word	0x40005800
 8002324:	40021000 	.word	0x40021000

08002328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800232c:	f000 fb6f 	bl	8002a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002330:	f000 f815 	bl	800235e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002334:	f7ff fe78 	bl	8002028 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8002338:	f7ff fd3a 	bl	8001db0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800233c:	f7ff fd7e 	bl	8001e3c <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8002340:	f7ff ff5a 	bl	80021f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002344:	f000 f86e 	bl	8002424 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002348:	f000 fa94 	bl	8002874 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 800234c:	f00d fad6 	bl	800f8fc <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002350:	f009 fe14 	bl	800bf7c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002354:	f7ff fc26 	bl	8001ba4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002358:	f009 fe34 	bl	800bfc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800235c:	e7fe      	b.n	800235c <main+0x34>

0800235e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b094      	sub	sp, #80	; 0x50
 8002362:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002364:	f107 0318 	add.w	r3, r7, #24
 8002368:	2238      	movs	r2, #56	; 0x38
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f00e fd6e 	bl	8010e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002380:	2000      	movs	r0, #0
 8002382:	f002 fe39 	bl	8004ff8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002386:	2321      	movs	r3, #33	; 0x21
 8002388:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002390:	2301      	movs	r3, #1
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002394:	2302      	movs	r3, #2
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002398:	2303      	movs	r3, #3
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800239c:	2304      	movs	r3, #4
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80023a0:	2355      	movs	r3, #85	; 0x55
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a4:	2302      	movs	r3, #2
 80023a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80023a8:	2308      	movs	r3, #8
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 fed3 	bl	8005160 <HAL_RCC_OscConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023c0:	f000 f82a 	bl	8002418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c4:	230f      	movs	r3, #15
 80023c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c8:	2303      	movs	r3, #3
 80023ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2104      	movs	r1, #4
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 f9d1 	bl	8005784 <HAL_RCC_ClockConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80023e8:	f000 f816 	bl	8002418 <Error_Handler>
  }
}
 80023ec:	bf00      	nop
 80023ee:	3750      	adds	r7, #80	; 0x50
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002406:	f000 fb1b 	bl	8002a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40001000 	.word	0x40001000

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002420:	e7fe      	b.n	8002420 <Error_Handler+0x8>
	...

08002424 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_SPI1_Init+0x74>)
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <MX_SPI1_Init+0x78>)
 800242c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_SPI1_Init+0x74>)
 8002430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_SPI1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <MX_SPI1_Init+0x74>)
 800243e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002442:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_SPI1_Init+0x74>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <MX_SPI1_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_SPI1_Init+0x74>)
 8002452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002456:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_SPI1_Init+0x74>)
 800245a:	2218      	movs	r2, #24
 800245c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <MX_SPI1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <MX_SPI1_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <MX_SPI1_Init+0x74>)
 800246c:	2200      	movs	r2, #0
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <MX_SPI1_Init+0x74>)
 8002472:	2207      	movs	r2, #7
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <MX_SPI1_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <MX_SPI1_Init+0x74>)
 800247e:	2208      	movs	r2, #8
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_SPI1_Init+0x74>)
 8002484:	f003 fe16 	bl	80060b4 <HAL_SPI_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800248e:	f7ff ffc3 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200028d8 	.word	0x200028d8
 800249c:	40013000 	.word	0x40013000

080024a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_SPI_MspInit+0x7c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d128      	bne.n	8002514 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HAL_SPI_MspInit+0x80>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_SPI_MspInit+0x80>)
 80024c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024cc:	6613      	str	r3, [r2, #96]	; 0x60
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_SPI_MspInit+0x80>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_SPI_MspInit+0x80>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4a10      	ldr	r2, [pc, #64]	; (8002520 <HAL_SPI_MspInit+0x80>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_SPI_MspInit+0x80>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024f2:	23e0      	movs	r3, #224	; 0xe0
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002502:	2305      	movs	r3, #5
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f000 fd5a 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40013000 	.word	0x40013000
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_MspInit+0x50>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_MspInit+0x50>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6613      	str	r3, [r2, #96]	; 0x60
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_MspInit+0x50>)
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_MspInit+0x50>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <HAL_MspInit+0x50>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_MspInit+0x50>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	210f      	movs	r1, #15
 800255e:	f06f 0001 	mvn.w	r0, #1
 8002562:	f000 fb43 	bl	8002bec <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002566:	f002 fdeb 	bl	8005140 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <HAL_InitTick+0xc4>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	4a2b      	ldr	r2, [pc, #172]	; (800263c <HAL_InitTick+0xc4>)
 800258e:	f043 0310 	orr.w	r3, r3, #16
 8002592:	6593      	str	r3, [r2, #88]	; 0x58
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_InitTick+0xc4>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a0:	f107 020c 	add.w	r2, r7, #12
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fabe 	bl	8005b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025b0:	f003 fa90 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 80025b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	4a21      	ldr	r2, [pc, #132]	; (8002640 <HAL_InitTick+0xc8>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	3b01      	subs	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_InitTick+0xcc>)
 80025c6:	4a20      	ldr	r2, [pc, #128]	; (8002648 <HAL_InitTick+0xd0>)
 80025c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_InitTick+0xcc>)
 80025cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_InitTick+0xcc>)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_InitTick+0xcc>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_InitTick+0xcc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80025e4:	4817      	ldr	r0, [pc, #92]	; (8002644 <HAL_InitTick+0xcc>)
 80025e6:	f004 fb0b 	bl	8006c00 <HAL_TIM_Base_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d11b      	bne.n	8002630 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80025f8:	4812      	ldr	r0, [pc, #72]	; (8002644 <HAL_InitTick+0xcc>)
 80025fa:	f004 fb63 	bl	8006cc4 <HAL_TIM_Base_Start_IT>
 80025fe:	4603      	mov	r3, r0
 8002600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800260c:	2036      	movs	r0, #54	; 0x36
 800260e:	f000 fb07 	bl	8002c20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d808      	bhi.n	800262a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	2036      	movs	r0, #54	; 0x36
 800261e:	f000 fae5 	bl	8002bec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_InitTick+0xd4>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	e002      	b.n	8002630 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002634:	4618      	mov	r0, r3
 8002636:	3730      	adds	r7, #48	; 0x30
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	431bde83 	.word	0x431bde83
 8002644:	2000293c 	.word	0x2000293c
 8002648:	40001000 	.word	0x40001000
 800264c:	20000004 	.word	0x20000004

08002650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002654:	e7fe      	b.n	8002654 <NMI_Handler+0x4>

08002656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <HardFault_Handler+0x4>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <MemManage_Handler+0x4>

08002662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <UsageFault_Handler+0x4>

0800266e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8002680:	2002      	movs	r0, #2
 8002682:	f000 fe3b 	bl	80032fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <USB_LP_IRQHandler+0x10>)
 8002692:	f001 f86d 	bl	8003770 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200056e8 	.word	0x200056e8

080026a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 80026a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026a8:	f000 fe28 	bl	80032fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <TIM6_DAC_IRQHandler+0x10>)
 80026b6:	f004 fb7d 	bl	8006db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000293c 	.word	0x2000293c

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_kill>:

int _kill(int pid, int sig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026de:	f00e fc5f 	bl	8010fa0 <__errno>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2216      	movs	r2, #22
 80026e6:	601a      	str	r2, [r3, #0]
  return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_exit>:

void _exit (int status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe7 	bl	80026d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002706:	e7fe      	b.n	8002706 <_exit+0x12>

08002708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e00a      	b.n	8002730 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800271a:	f3af 8000 	nop.w
 800271e:	4601      	mov	r1, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbf0      	blt.n	800271a <_read+0x12>
  }

  return len;
 8002738:	687b      	ldr	r3, [r7, #4]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e009      	b.n	8002768 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	60ba      	str	r2, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	dbf1      	blt.n	8002754 <_write+0x12>
  }
  return len;
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <_close>:

int _close(int file)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a2:	605a      	str	r2, [r3, #4]
  return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_isatty>:

int _isatty(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f00e fbc4 	bl	8010fa0 <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20020000 	.word	0x20020000
 8002844:	00000400 	.word	0x00000400
 8002848:	20002988 	.word	0x20002988
 800284c:	20005d30 	.word	0x20005d30

08002850 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002878:	4b22      	ldr	r3, [pc, #136]	; (8002904 <MX_USART2_UART_Init+0x90>)
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <MX_USART2_UART_Init+0x94>)
 800287c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <MX_USART2_UART_Init+0x90>)
 8002880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <MX_USART2_UART_Init+0x90>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_USART2_UART_Init+0x90>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <MX_USART2_UART_Init+0x90>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_USART2_UART_Init+0x90>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028bc:	4811      	ldr	r0, [pc, #68]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028be:	f004 fceb 	bl	8007298 <HAL_UART_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028c8:	f7ff fda6 	bl	8002418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028cc:	2100      	movs	r1, #0
 80028ce:	480d      	ldr	r0, [pc, #52]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028d0:	f005 fa86 	bl	8007de0 <HAL_UARTEx_SetTxFifoThreshold>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028da:	f7ff fd9d 	bl	8002418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028de:	2100      	movs	r1, #0
 80028e0:	4808      	ldr	r0, [pc, #32]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028e2:	f005 fabb 	bl	8007e5c <HAL_UARTEx_SetRxFifoThreshold>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028ec:	f7ff fd94 	bl	8002418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_USART2_UART_Init+0x90>)
 80028f2:	f005 fa3c 	bl	8007d6e <HAL_UARTEx_DisableFifoMode>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028fc:	f7ff fd8c 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000298c 	.word	0x2000298c
 8002908:	40004400 	.word	0x40004400

0800290c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b09e      	sub	sp, #120	; 0x78
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	2254      	movs	r2, #84	; 0x54
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f00e fa8e 	bl	8010e4e <memset>
  if(uartHandle->Instance==USART2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_UART_MspInit+0xa8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d136      	bne.n	80029aa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800293c:	2302      	movs	r3, #2
 800293e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	4618      	mov	r0, r3
 800294a:	f003 f965 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002954:	f7ff fd60 	bl	8002418 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_UART_MspInit+0xac>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_UART_MspInit+0xac>)
 800295e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_UART_MspInit+0xac>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_UART_MspInit+0xac>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_UART_MspInit+0xac>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_UART_MspInit+0xac>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002988:	230c      	movs	r3, #12
 800298a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002998:	2307      	movs	r3, #7
 800299a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a6:	f000 fb0f 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029aa:	bf00      	nop
 80029ac:	3778      	adds	r7, #120	; 0x78
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40004400 	.word	0x40004400
 80029b8:	40021000 	.word	0x40021000

080029bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029c0:	f7ff ff46 	bl	8002850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029c6:	490d      	ldr	r1, [pc, #52]	; (80029fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <LoopForever+0xe>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029dc:	4c0a      	ldr	r4, [pc, #40]	; (8002a08 <LoopForever+0x16>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ea:	f00e fadf 	bl	8010fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ee:	f7ff fc9b 	bl	8002328 <main>

080029f2 <LoopForever>:

LoopForever:
    b LoopForever
 80029f2:	e7fe      	b.n	80029f2 <LoopForever>
  ldr   r0, =_estack
 80029f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8002a00:	080138fc 	.word	0x080138fc
  ldr r2, =_sbss
 8002a04:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002a08:	20005d30 	.word	0x20005d30

08002a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC1_2_IRQHandler>

08002a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 f8dc 	bl	8002bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1e:	200f      	movs	r0, #15
 8002a20:	f7ff fdaa 	bl	8002578 <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	71fb      	strb	r3, [r7, #7]
 8002a2e:	e001      	b.n	8002a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a30:	f7ff fd78 	bl	8002524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a34:	79fb      	ldrb	r3, [r7, #7]

}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_IncTick+0x1c>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_IncTick+0x20>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_IncTick+0x1c>)
 8002a50:	6013      	str	r3, [r2, #0]
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	20002a20 	.word	0x20002a20
 8002a60:	20000008 	.word	0x20000008

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20002a20 	.word	0x20002a20

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <__NVIC_EnableIRQ+0x38>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff4c 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfa:	f7ff ff63 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002bfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	6978      	ldr	r0, [r7, #20]
 8002c06:	f7ff ffb3 	bl	8002b70 <NVIC_EncodePriority>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff82 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c18:	bf00      	nop
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff56 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e147      	b.n	8002ede <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff f930 	bl	8001ec8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0210 	bic.w	r2, r2, #16
 8002c76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c78:	f7ff fef4 	bl	8002a64 <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c7e:	e012      	b.n	8002ca6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c80:	f7ff fef0 	bl	8002a64 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b0a      	cmp	r3, #10
 8002c8c:	d90b      	bls.n	8002ca6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e11b      	b.n	8002ede <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d0e5      	beq.n	8002c80 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7ff fece 	bl	8002a64 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cca:	e012      	b.n	8002cf2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ccc:	f7ff feca 	bl	8002a64 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b0a      	cmp	r3, #10
 8002cd8:	d90b      	bls.n	8002cf2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0f5      	b.n	8002ede <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0e5      	beq.n	8002ccc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0202 	orr.w	r2, r2, #2
 8002d0e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a74      	ldr	r2, [pc, #464]	; (8002ee8 <HAL_FDCAN_Init+0x2ac>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d103      	bne.n	8002d22 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d1a:	4a74      	ldr	r2, [pc, #464]	; (8002eec <HAL_FDCAN_Init+0x2b0>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7c1b      	ldrb	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d38:	619a      	str	r2, [r3, #24]
 8002d3a:	e007      	b.n	8002d4c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7c5b      	ldrb	r3, [r3, #17]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d108      	bne.n	8002d66 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d62:	619a      	str	r2, [r3, #24]
 8002d64:	e007      	b.n	8002d76 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d74:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7c9b      	ldrb	r3, [r3, #18]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d8c:	619a      	str	r2, [r3, #24]
 8002d8e:	e007      	b.n	8002da0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d9e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002dc4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0210 	bic.w	r2, r2, #16
 8002dd4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d108      	bne.n	8002df0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0204 	orr.w	r2, r2, #4
 8002dec:	619a      	str	r2, [r3, #24]
 8002dee:	e02c      	b.n	8002e4a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d028      	beq.n	8002e4a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d01c      	beq.n	8002e3a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e0e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0210 	orr.w	r2, r2, #16
 8002e1e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d110      	bne.n	8002e4a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0220 	orr.w	r2, r2, #32
 8002e36:	619a      	str	r2, [r3, #24]
 8002e38:	e007      	b.n	8002e4a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e5a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e62:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e72:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e74:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7e:	d115      	bne.n	8002eac <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e8e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	3b01      	subs	r3, #1
 8002e96:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002e98:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ea8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002eaa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f814 	bl	8002ef0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40006400 	.word	0x40006400
 8002eec:	40006500 	.word	0x40006500

08002ef0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002ef8:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002efa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d103      	bne.n	8002f0e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f0c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d103      	bne.n	8002f20 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002f1e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	041a      	lsls	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f54:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	061a      	lsls	r2, r3, #24
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e005      	b.n	8002fa2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d3f3      	bcc.n	8002f96 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	4000a400 	.word	0x4000a400
 8002fc0:	40006800 	.word	0x40006800
 8002fc4:	40006c00 	.word	0x40006c00

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fd6:	e15a      	b.n	800328e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 814c 	beq.w	8003288 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d005      	beq.n	8003008 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003004:	2b02      	cmp	r3, #2
 8003006:	d130      	bne.n	800306a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800303e:	2201      	movs	r2, #1
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0201 	and.w	r2, r3, #1
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b03      	cmp	r3, #3
 8003074:	d017      	beq.n	80030a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	2203      	movs	r2, #3
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d123      	bne.n	80030fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3208      	adds	r2, #8
 80030f4:	6939      	ldr	r1, [r7, #16]
 80030f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	2203      	movs	r2, #3
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0203 	and.w	r2, r3, #3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80a6 	beq.w	8003288 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313c:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_GPIO_Init+0x2e4>)
 800313e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003140:	4a5a      	ldr	r2, [pc, #360]	; (80032ac <HAL_GPIO_Init+0x2e4>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6613      	str	r3, [r2, #96]	; 0x60
 8003148:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_GPIO_Init+0x2e4>)
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003154:	4a56      	ldr	r2, [pc, #344]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3302      	adds	r3, #2
 800315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	220f      	movs	r2, #15
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800317e:	d01f      	beq.n	80031c0 <HAL_GPIO_Init+0x1f8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a4c      	ldr	r2, [pc, #304]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d019      	beq.n	80031bc <HAL_GPIO_Init+0x1f4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <HAL_GPIO_Init+0x2f0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <HAL_GPIO_Init+0x1f0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <HAL_GPIO_Init+0x2f4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00d      	beq.n	80031b4 <HAL_GPIO_Init+0x1ec>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a49      	ldr	r2, [pc, #292]	; (80032c0 <HAL_GPIO_Init+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <HAL_GPIO_Init+0x1e8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a48      	ldr	r2, [pc, #288]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_GPIO_Init+0x1e4>
 80031a8:	2305      	movs	r3, #5
 80031aa:	e00a      	b.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031ac:	2306      	movs	r3, #6
 80031ae:	e008      	b.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031b0:	2304      	movs	r3, #4
 80031b2:	e006      	b.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031b4:	2303      	movs	r3, #3
 80031b6:	e004      	b.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e002      	b.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031c0:	2300      	movs	r3, #0
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	f002 0203 	and.w	r2, r2, #3
 80031c8:	0092      	lsls	r2, r2, #2
 80031ca:	4093      	lsls	r3, r2
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d2:	4937      	ldr	r1, [pc, #220]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031e0:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_GPIO_Init+0x300>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003204:	4a30      	ldr	r2, [pc, #192]	; (80032c8 <HAL_GPIO_Init+0x300>)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_GPIO_Init+0x300>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800322e:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <HAL_GPIO_Init+0x300>)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_GPIO_Init+0x300>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_GPIO_Init+0x300>)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800325e:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <HAL_GPIO_Init+0x300>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_GPIO_Init+0x300>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3301      	adds	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	f47f ae9d 	bne.w	8002fd8 <HAL_GPIO_Init+0x10>
  }
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40010000 	.word	0x40010000
 80032b4:	48000400 	.word	0x48000400
 80032b8:	48000800 	.word	0x48000800
 80032bc:	48000c00 	.word	0x48000c00
 80032c0:	48001000 	.word	0x48001000
 80032c4:	48001400 	.word	0x48001400
 80032c8:	40010400 	.word	0x40010400

080032cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032dc:	787b      	ldrb	r3, [r7, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032e8:	e002      	b.n	80032f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d006      	beq.n	8003320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fd24 	bl	8001d68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40010400 	.word	0x40010400

0800332c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e08d      	b.n	800345a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe ff90 	bl	8002278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800337c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	e006      	b.n	80033b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d108      	bne.n	80033ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e007      	b.n	80033de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003400:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69d9      	ldr	r1, [r3, #28]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	d138      	bne.n	80034ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003482:	2302      	movs	r3, #2
 8003484:	e032      	b.n	80034ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2224      	movs	r2, #36	; 0x24
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e000      	b.n	80034ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034ea:	2302      	movs	r3, #2
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	d139      	bne.n	8003582 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003518:	2302      	movs	r3, #2
 800351a:	e033      	b.n	8003584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800354a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e000      	b.n	8003584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003582:	2302      	movs	r3, #2
  }
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0c0      	b.n	8003724 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f00c fba6 	bl	800fd08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2203      	movs	r2, #3
 80035c0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 fcea 	bl	8007fa2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e03e      	b.n	8003652 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	3311      	adds	r3, #17
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	3310      	adds	r3, #16
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	3313      	adds	r3, #19
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	3320      	adds	r3, #32
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	3301      	adds	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	429a      	cmp	r2, r3
 800365a:	d3bb      	bcc.n	80035d4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e044      	b.n	80036ec <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	440b      	add	r3, r1
 8003670:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	f203 1353 	addw	r3, r3, #339	; 0x153
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	440b      	add	r3, r1
 80036de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	3301      	adds	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	791b      	ldrb	r3, [r3, #4]
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d3b5      	bcc.n	8003662 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003702:	f004 fc69 	bl	8007fd8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7a9b      	ldrb	r3, [r3, #10]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 fc41 	bl	8004fa4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_Start+0x16>
 800373e:	2302      	movs	r3, #2
 8003740:	e012      	b.n	8003768 <HAL_PCD_Start+0x3c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f004 fc10 	bl	8007f74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f006 fed0 	bl	800a4fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f006 fed5 	bl	800a52c <USB_ReadInterrupts>
 8003782:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fb04 	bl	8003d9c <PCD_EP_ISR_Handler>

    return;
 8003794:	e110      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f00c fb36 	bl	800fe2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037be:	2100      	movs	r1, #0
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8fc 	bl	80039be <HAL_PCD_SetAddress>

    return;
 80037c6:	e0f7      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e4:	b292      	uxth	r2, r2
 80037e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80037ea:	e0e5      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003808:	b292      	uxth	r2, r2
 800380a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800380e:	e0d3      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d034      	beq.n	8003884 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0204 	bic.w	r2, r2, #4
 800382c:	b292      	uxth	r2, r2
 800382e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0208 	bic.w	r2, r2, #8
 8003844:	b292      	uxth	r2, r2
 8003846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800385c:	2100      	movs	r1, #0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f00c fcd6 	bl	8010210 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f00c fb19 	bl	800fe9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800387c:	b292      	uxth	r2, r2
 800387e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003882:	e099      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	2b00      	cmp	r3, #0
 800388c:	d027      	beq.n	80038de <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0208 	orr.w	r2, r2, #8
 80038a0:	b292      	uxth	r2, r2
 80038a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b8:	b292      	uxth	r2, r2
 80038ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0204 	orr.w	r2, r2, #4
 80038d0:	b292      	uxth	r2, r2
 80038d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f00c fac6 	bl	800fe68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038dc:	e06c      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d040      	beq.n	800396a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038fa:	b292      	uxth	r2, r2
 80038fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d12b      	bne.n	8003962 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0204 	orr.w	r2, r2, #4
 800391c:	b292      	uxth	r2, r2
 800391e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0208 	orr.w	r2, r2, #8
 8003934:	b292      	uxth	r2, r2
 8003936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800394a:	b29b      	uxth	r3, r3
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003958:	2101      	movs	r1, #1
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f00c fc58 	bl	8010210 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003960:	e02a      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f00c fa80 	bl	800fe68 <HAL_PCD_SuspendCallback>
    return;
 8003968:	e026      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00f      	beq.n	8003994 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003986:	b292      	uxth	r2, r2
 8003988:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f00c fa3e 	bl	800fe0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003992:	e011      	b.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b0:	b292      	uxth	r2, r2
 80039b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80039b6:	bf00      	nop
  }
}
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_PCD_SetAddress+0x1a>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e012      	b.n	80039fe <HAL_PCD_SetAddress+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f006 fd71 	bl	800a4d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	4608      	mov	r0, r1
 8003a10:	4611      	mov	r1, r2
 8003a12:	461a      	mov	r2, r3
 8003a14:	4603      	mov	r3, r0
 8003a16:	70fb      	strb	r3, [r7, #3]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	803b      	strh	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da0e      	bge.n	8003a4a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 0207 	and.w	r2, r3, #7
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	3310      	adds	r3, #16
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	705a      	strb	r2, [r3, #1]
 8003a48:	e00e      	b.n	8003a68 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 0207 	and.w	r2, r3, #7
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a74:	883a      	ldrh	r2, [r7, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	78ba      	ldrb	r2, [r7, #2]
 8003a7e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a80:	78bb      	ldrb	r3, [r7, #2]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d102      	bne.n	8003a8c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_PCD_EP_Open+0x94>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e00e      	b.n	8003ab8 <HAL_PCD_EP_Open+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f004 fab3 	bl	8008014 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da0e      	bge.n	8003af2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 0207 	and.w	r2, r3, #7
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	3310      	adds	r3, #16
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	705a      	strb	r2, [r3, #1]
 8003af0:	e00e      	b.n	8003b10 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	f003 0207 	and.w	r2, r3, #7
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_PCD_EP_Close+0x6a>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e00e      	b.n	8003b48 <HAL_PCD_EP_Close+0x88>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 fe2f 	bl	800879c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b60:	7afb      	ldrb	r3, [r7, #11]
 8003b62:	f003 0207 	and.w	r2, r3, #7
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b90:	7afb      	ldrb	r3, [r7, #11]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f004 ffe7 	bl	8008b76 <USB_EPStartXfer>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 0207 	and.w	r2, r3, #7
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003bd4:	681b      	ldr	r3, [r3, #0]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	f003 0207 	and.w	r2, r3, #7
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	3310      	adds	r3, #16
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6979      	ldr	r1, [r7, #20]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f004 ff98 	bl	8008b76 <USB_EPStartXfer>

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	7912      	ldrb	r2, [r2, #4]
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e03e      	b.n	8003cec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da0e      	bge.n	8003c94 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 0207 	and.w	r2, r3, #7
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	3310      	adds	r3, #16
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	705a      	strb	r2, [r3, #1]
 8003c92:	e00c      	b.n	8003cae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_PCD_EP_SetStall+0x7e>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e00e      	b.n	8003cec <HAL_PCD_EP_SetStall+0x9c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f006 fafb 	bl	800a2d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	7912      	ldrb	r2, [r2, #4]
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e040      	b.n	8003d94 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da0e      	bge.n	8003d38 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 0207 	and.w	r2, r3, #7
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	3310      	adds	r3, #16
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	705a      	strb	r2, [r3, #1]
 8003d36:	e00e      	b.n	8003d56 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 0207 	and.w	r2, r3, #7
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_PCD_EP_ClrStall+0x82>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e00e      	b.n	8003d94 <HAL_PCD_EP_ClrStall+0xa0>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f006 faf8 	bl	800a37a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b096      	sub	sp, #88	; 0x58
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003da4:	e3ae      	b.n	8004504 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003db2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003dc0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 8170 	bne.w	80040aa <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003dca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d14d      	bne.n	8003e72 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	81fb      	strh	r3, [r7, #14]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	89fb      	ldrh	r3, [r7, #14]
 8003dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3310      	adds	r3, #16
 8003dfe:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	441a      	add	r2, r3
 8003e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e36:	2100      	movs	r1, #0
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f00b ffce 	bl	800fdda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7b1b      	ldrb	r3, [r3, #12]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 835d 	beq.w	8004504 <PCD_EP_ISR_Handler+0x768>
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 8358 	bne.w	8004504 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7b1b      	ldrb	r3, [r3, #12]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b292      	uxth	r2, r2
 8003e66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	731a      	strb	r2, [r3, #12]
 8003e70:	e348      	b.n	8004504 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e78:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d032      	beq.n	8003ef6 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f006 fb80 	bl	800a5d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003edc:	4013      	ands	r3, r2
 8003ede:	823b      	strh	r3, [r7, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	8a3a      	ldrh	r2, [r7, #16]
 8003ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eea:	b292      	uxth	r2, r2
 8003eec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f00b ff46 	bl	800fd80 <HAL_PCD_SetupStageCallback>
 8003ef4:	e306      	b.n	8004504 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ef6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f280 8302 	bge.w	8004504 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	83fb      	strh	r3, [r7, #30]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	8bfa      	ldrh	r2, [r7, #30]
 8003f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f44:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d019      	beq.n	8003f82 <PCD_EP_ISR_Handler+0x1e6>
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d015      	beq.n	8003f82 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5c:	6959      	ldr	r1, [r3, #20]
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f60:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f64:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f006 fb32 	bl	800a5d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	441a      	add	r2, r3
 8003f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f78:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f00b ff11 	bl	800fda4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 82b5 	bne.w	8004504 <PCD_EP_ISR_Handler+0x768>
 8003f9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fa6:	f000 82ad 	beq.w	8004504 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe0:	d91d      	bls.n	800401e <PCD_EP_ISR_Handler+0x282>
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <PCD_EP_ISR_Handler+0x260>
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29a      	uxth	r2, r3
 8004002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004004:	b29b      	uxth	r3, r3
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	b29b      	uxth	r3, r3
 800400a:	4313      	orrs	r3, r2
 800400c:	b29b      	uxth	r3, r3
 800400e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004016:	b29a      	uxth	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	e026      	b.n	800406c <PCD_EP_ISR_Handler+0x2d0>
 800401e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <PCD_EP_ISR_Handler+0x2a0>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004034:	b29a      	uxth	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	801a      	strh	r2, [r3, #0]
 800403a:	e017      	b.n	800406c <PCD_EP_ISR_Handler+0x2d0>
 800403c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	647b      	str	r3, [r7, #68]	; 0x44
 8004044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <PCD_EP_ISR_Handler+0x2ba>
 8004050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004052:	3301      	adds	r3, #1
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29a      	uxth	r2, r3
 800405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405e:	b29b      	uxth	r3, r3
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	b29b      	uxth	r3, r3
 8004064:	4313      	orrs	r3, r2
 8004066:	b29a      	uxth	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	827b      	strh	r3, [r7, #18]
 800407e:	8a7b      	ldrh	r3, [r7, #18]
 8004080:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004084:	827b      	strh	r3, [r7, #18]
 8004086:	8a7b      	ldrh	r3, [r7, #18]
 8004088:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800408c:	827b      	strh	r3, [r7, #18]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	8a7b      	ldrh	r3, [r7, #18]
 8004094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	8013      	strh	r3, [r2, #0]
 80040a8:	e22c      	b.n	8004504 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040be:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f280 80f6 	bge.w	80042b4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040de:	4013      	ands	r3, r2
 80040e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80040f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040fa:	b292      	uxth	r2, r2
 80040fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80040fe:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004116:	7b1b      	ldrb	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d123      	bne.n	8004164 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004124:	b29b      	uxth	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	4413      	add	r3, r2
 8004136:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004140:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004144:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 808e 	beq.w	800426a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004154:	6959      	ldr	r1, [r3, #20]
 8004156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004158:	88da      	ldrh	r2, [r3, #6]
 800415a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800415e:	f006 fa37 	bl	800a5d0 <USB_ReadPMA>
 8004162:	e082      	b.n	800426a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004166:	78db      	ldrb	r3, [r3, #3]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d10a      	bne.n	8004182 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800416c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004170:	461a      	mov	r2, r3
 8004172:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f9d3 	bl	8004520 <HAL_PCD_EP_DB_Receive>
 800417a:	4603      	mov	r3, r0
 800417c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004180:	e073      	b.n	800426a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d022      	beq.n	8004226 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	4413      	add	r3, r2
 80041fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004204:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004208:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02c      	beq.n	800426a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004216:	6959      	ldr	r1, [r3, #20]
 8004218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421a:	891a      	ldrh	r2, [r3, #8]
 800421c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004220:	f006 f9d6 	bl	800a5d0 <USB_ReadPMA>
 8004224:	e021      	b.n	800426a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	4413      	add	r3, r2
 8004240:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800424e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425c:	6959      	ldr	r1, [r3, #20]
 800425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004260:	895a      	ldrh	r2, [r3, #10]
 8004262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004266:	f006 f9b3 	bl	800a5d0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800426a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004272:	441a      	add	r2, r3
 8004274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004276:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004280:	441a      	add	r2, r3
 8004282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004284:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <PCD_EP_ISR_Handler+0x4fe>
 800428e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d206      	bcs.n	80042a8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f00b fd7f 	bl	800fda4 <HAL_PCD_DataOutStageCallback>
 80042a6:	e005      	b.n	80042b4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 fc61 	bl	8008b76 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8121 	beq.w	8004504 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80042c2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	3310      	adds	r3, #16
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	2b01      	cmp	r3, #1
 8004318:	f040 80a2 	bne.w	8004460 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800431c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004324:	7b1b      	ldrb	r3, [r3, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8093 	beq.w	8004452 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800432c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d046      	beq.n	80043c6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <PCD_EP_ISR_Handler+0x5f2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	4413      	add	r3, r2
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	4413      	add	r3, r2
 8004362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004372:	b29a      	uxth	r2, r3
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004386:	b29a      	uxth	r2, r3
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	801a      	strh	r2, [r3, #0]
 800438c:	e061      	b.n	8004452 <PCD_EP_ISR_Handler+0x6b6>
 800438e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d15d      	bne.n	8004452 <PCD_EP_ISR_Handler+0x6b6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	4413      	add	r3, r2
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	00da      	lsls	r2, r3, #3
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	4413      	add	r3, r2
 80043b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2200      	movs	r2, #0
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e045      	b.n	8004452 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d126      	bne.n	8004422 <PCD_EP_ISR_Handler+0x686>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e8:	4413      	add	r3, r2
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
 80043ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	00da      	lsls	r2, r3, #3
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f4:	4413      	add	r3, r2
 80043f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004406:	b29a      	uxth	r2, r3
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	b29b      	uxth	r3, r3
 8004412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441a:	b29a      	uxth	r2, r3
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	801a      	strh	r2, [r3, #0]
 8004420:	e017      	b.n	8004452 <PCD_EP_ISR_Handler+0x6b6>
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d113      	bne.n	8004452 <PCD_EP_ISR_Handler+0x6b6>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004432:	b29b      	uxth	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004438:	4413      	add	r3, r2
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	00da      	lsls	r2, r3, #3
 8004442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004444:	4413      	add	r3, r2
 8004446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	2200      	movs	r2, #0
 8004450:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f00b fcbe 	bl	800fdda <HAL_PCD_DataInStageCallback>
 800445e:	e051      	b.n	8004504 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d144      	bne.n	80044f6 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004474:	b29b      	uxth	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	4413      	add	r3, r2
 8004486:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004490:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800449c:	429a      	cmp	r2, r3
 800449e:	d907      	bls.n	80044b0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80044a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044a8:	1ad2      	subs	r2, r2, r3
 80044aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ac:	619a      	str	r2, [r3, #24]
 80044ae:	e002      	b.n	80044b6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80044b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b2:	2200      	movs	r2, #0
 80044b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80044b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f00b fc88 	bl	800fdda <HAL_PCD_DataInStageCallback>
 80044ca:	e01b      	b.n	8004504 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80044cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044d4:	441a      	add	r2, r3
 80044d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80044da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044e2:	441a      	add	r2, r3
 80044e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 fb41 	bl	8008b76 <USB_EPStartXfer>
 80044f4:	e006      	b.n	8004504 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044fa:	461a      	mov	r2, r3
 80044fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f917 	bl	8004732 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800450c:	b29b      	uxth	r3, r3
 800450e:	b21b      	sxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	f6ff ac48 	blt.w	8003da6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3758      	adds	r7, #88	; 0x58
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d07c      	beq.n	8004632 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004540:	b29b      	uxth	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	4413      	add	r3, r2
 8004552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	8b7b      	ldrh	r3, [r7, #26]
 8004564:	429a      	cmp	r2, r3
 8004566:	d306      	bcc.n	8004576 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	8b7b      	ldrh	r3, [r7, #26]
 800456e:	1ad2      	subs	r2, r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	619a      	str	r2, [r3, #24]
 8004574:	e002      	b.n	800457c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d123      	bne.n	80045cc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	833b      	strh	r3, [r7, #24]
 80045a0:	8b3b      	ldrh	r3, [r7, #24]
 80045a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045a6:	833b      	strh	r3, [r7, #24]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	8b3b      	ldrh	r3, [r7, #24]
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01f      	beq.n	8004616 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f0:	82fb      	strh	r3, [r7, #22]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	8afb      	ldrh	r3, [r7, #22]
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004616:	8b7b      	ldrh	r3, [r7, #26]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8085 	beq.w	8004728 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6959      	ldr	r1, [r3, #20]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	891a      	ldrh	r2, [r3, #8]
 800462a:	8b7b      	ldrh	r3, [r7, #26]
 800462c:	f005 ffd0 	bl	800a5d0 <USB_ReadPMA>
 8004630:	e07a      	b.n	8004728 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463a:	b29b      	uxth	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	4413      	add	r3, r2
 800464c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004656:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	8b7b      	ldrh	r3, [r7, #26]
 800465e:	429a      	cmp	r2, r3
 8004660:	d306      	bcc.n	8004670 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	8b7b      	ldrh	r3, [r7, #26]
 8004668:	1ad2      	subs	r2, r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	619a      	str	r2, [r3, #24]
 800466e:	e002      	b.n	8004676 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d123      	bne.n	80046c6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	83fb      	strh	r3, [r7, #30]
 800469a:	8bfb      	ldrh	r3, [r7, #30]
 800469c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046a0:	83fb      	strh	r3, [r7, #30]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	8bfb      	ldrh	r3, [r7, #30]
 80046b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11f      	bne.n	8004710 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	83bb      	strh	r3, [r7, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	8bbb      	ldrh	r3, [r7, #28]
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004710:	8b7b      	ldrh	r3, [r7, #26]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6959      	ldr	r1, [r3, #20]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	895a      	ldrh	r2, [r3, #10]
 8004722:	8b7b      	ldrh	r3, [r7, #26]
 8004724:	f005 ff54 	bl	800a5d0 <USB_ReadPMA>
    }
  }

  return count;
 8004728:	8b7b      	ldrh	r3, [r7, #26]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b0a4      	sub	sp, #144	; 0x90
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	4613      	mov	r3, r2
 800473e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 81db 	beq.w	8004b02 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004754:	b29b      	uxth	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	4413      	add	r3, r2
 8004766:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004770:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800477c:	429a      	cmp	r2, r3
 800477e:	d907      	bls.n	8004790 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004788:	1ad2      	subs	r2, r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	619a      	str	r2, [r3, #24]
 800478e:	e002      	b.n	8004796 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 80b9 	bne.w	8004912 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d126      	bne.n	80047f6 <HAL_PCD_EP_DB_Transmit+0xc4>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	4413      	add	r3, r2
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	00da      	lsls	r2, r3, #3
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e01a      	b.n	800482c <HAL_PCD_EP_DB_Transmit+0xfa>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d116      	bne.n	800482c <HAL_PCD_EP_DB_Transmit+0xfa>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	4413      	add	r3, r2
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	00da      	lsls	r2, r3, #3
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	4413      	add	r3, r2
 8004820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	2200      	movs	r2, #0
 800482a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d126      	bne.n	8004888 <HAL_PCD_EP_DB_Transmit+0x156>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004848:	b29b      	uxth	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	00da      	lsls	r2, r3, #3
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800486c:	b29a      	uxth	r2, r3
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004880:	b29a      	uxth	r2, r3
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	e017      	b.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x186>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d113      	bne.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x186>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	4413      	add	r3, r2
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	00da      	lsls	r2, r3, #3
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	4413      	add	r3, r2
 80048ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2200      	movs	r2, #0
 80048b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	4619      	mov	r1, r3
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f00b fa8b 	bl	800fdda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 82fa 	beq.w	8004ec4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	82fb      	strh	r3, [r7, #22]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	441a      	add	r2, r3
 80048fa:	8afb      	ldrh	r3, [r7, #22]
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
 8004910:	e2d8      	b.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d021      	beq.n	8004960 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004966:	2b01      	cmp	r3, #1
 8004968:	f040 82ac 	bne.w	8004ec4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004974:	441a      	add	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004982:	441a      	add	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d30b      	bcc.n	80049ac <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049a4:	1ad2      	subs	r2, r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	621a      	str	r2, [r3, #32]
 80049aa:	e017      	b.n	80049dc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80049b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049c4:	e00a      	b.n	80049dc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d165      	bne.n	8004ab0 <HAL_PCD_EP_DB_Transmit+0x37e>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	4413      	add	r3, r2
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	00da      	lsls	r2, r3, #3
 8004a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a04:	4413      	add	r3, r2
 8004a06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a20:	2b3e      	cmp	r3, #62	; 0x3e
 8004a22:	d91d      	bls.n	8004a60 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_PCD_EP_DB_Transmit+0x30c>
 8004a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	029b      	lsls	r3, r3, #10
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	e044      	b.n	8004aea <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <HAL_PCD_EP_DB_Transmit+0x34c>
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	e035      	b.n	8004aea <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x366>
 8004a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a94:	3301      	adds	r3, #1
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	e01c      	b.n	8004aea <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d118      	bne.n	8004aea <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004acc:	4413      	add	r3, r2
 8004ace:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	00da      	lsls	r2, r3, #3
 8004ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad8:	4413      	add	r3, r2
 8004ada:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
 8004ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6959      	ldr	r1, [r3, #20]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	891a      	ldrh	r2, [r3, #8]
 8004af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f005 fd26 	bl	800a54c <USB_WritePMA>
 8004b00:	e1e0      	b.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b26:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d307      	bcc.n	8004b46 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	619a      	str	r2, [r3, #24]
 8004b44:	e002      	b.n	8004b4c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 80c0 	bne.w	8004cd6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d126      	bne.n	8004bac <HAL_PCD_EP_DB_Transmit+0x47a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b72:	4413      	add	r3, r2
 8004b74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	00da      	lsls	r2, r3, #3
 8004b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b7e:	4413      	add	r3, r2
 8004b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	e01a      	b.n	8004be2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d116      	bne.n	8004be2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc8:	4413      	add	r3, r2
 8004bca:	667b      	str	r3, [r7, #100]	; 0x64
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	00da      	lsls	r2, r3, #3
 8004bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bda:	663b      	str	r3, [r7, #96]	; 0x60
 8004bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bde:	2200      	movs	r2, #0
 8004be0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	677b      	str	r3, [r7, #116]	; 0x74
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d12b      	bne.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x516>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	4413      	add	r3, r2
 8004c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	00da      	lsls	r2, r3, #3
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	4413      	add	r3, r2
 8004c12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	e017      	b.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x546>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d113      	bne.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x546>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c5e:	4413      	add	r3, r2
 8004c60:	677b      	str	r3, [r7, #116]	; 0x74
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	00da      	lsls	r2, r3, #3
 8004c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c70:	673b      	str	r3, [r7, #112]	; 0x70
 8004c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c74:	2200      	movs	r2, #0
 8004c76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f00b f8ab 	bl	800fdda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 811a 	bne.w	8004ec4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]
 8004cd4:	e0f6      	b.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d121      	bne.n	8004d24 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	f040 80ca 	bne.w	8004ec4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d38:	441a      	add	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d46:	441a      	add	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d30b      	bcc.n	8004d70 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d68:	1ad2      	subs	r2, r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	621a      	str	r2, [r3, #32]
 8004d6e:	e017      	b.n	8004da0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d108      	bne.n	8004d8a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004d78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d88:	e00a      	b.n	8004da0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	657b      	str	r3, [r7, #84]	; 0x54
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d165      	bne.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x748>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc2:	4413      	add	r3, r2
 8004dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	00da      	lsls	r2, r3, #3
 8004dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dea:	2b3e      	cmp	r3, #62	; 0x3e
 8004dec:	d91d      	bls.n	8004e2a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e04:	3b01      	subs	r3, #1
 8004e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e041      	b.n	8004eae <HAL_PCD_EP_DB_Transmit+0x77c>
 8004e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x716>
 8004e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e032      	b.n	8004eae <HAL_PCD_EP_DB_Transmit+0x77c>
 8004e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x730>
 8004e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e5e:	3301      	adds	r3, #1
 8004e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	e019      	b.n	8004eae <HAL_PCD_EP_DB_Transmit+0x77c>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	785b      	ldrb	r3, [r3, #1]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d115      	bne.n	8004eae <HAL_PCD_EP_DB_Transmit+0x77c>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e90:	4413      	add	r3, r2
 8004e92:	657b      	str	r3, [r7, #84]	; 0x54
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	00da      	lsls	r2, r3, #3
 8004e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	6959      	ldr	r1, [r3, #20]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	895a      	ldrh	r2, [r3, #10]
 8004eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f005 fb44 	bl	800a54c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ede:	82bb      	strh	r3, [r7, #20]
 8004ee0:	8abb      	ldrh	r3, [r7, #20]
 8004ee2:	f083 0310 	eor.w	r3, r3, #16
 8004ee6:	82bb      	strh	r3, [r7, #20]
 8004ee8:	8abb      	ldrh	r3, [r7, #20]
 8004eea:	f083 0320 	eor.w	r3, r3, #32
 8004eee:	82bb      	strh	r3, [r7, #20]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	441a      	add	r2, r3
 8004efe:	8abb      	ldrh	r3, [r7, #20]
 8004f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3790      	adds	r7, #144	; 0x90
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b087      	sub	sp, #28
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	817b      	strh	r3, [r7, #10]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f30:	897b      	ldrh	r3, [r7, #10]
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00b      	beq.n	8004f54 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f3c:	897b      	ldrh	r3, [r7, #10]
 8004f3e:	f003 0207 	and.w	r2, r3, #7
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	3310      	adds	r3, #16
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e009      	b.n	8004f68 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f54:	897a      	ldrh	r2, [r7, #10]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f68:	893b      	ldrh	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	80da      	strh	r2, [r3, #6]
 8004f7c:	e00b      	b.n	8004f96 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2201      	movs	r2, #1
 8004f82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d141      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005006:	4b4b      	ldr	r3, [pc, #300]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800500e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005012:	d131      	bne.n	8005078 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005014:	4b47      	ldr	r3, [pc, #284]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501a:	4a46      	ldr	r2, [pc, #280]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005024:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800502c:	4a41      	ldr	r2, [pc, #260]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005032:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005034:	4b40      	ldr	r3, [pc, #256]	; (8005138 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2232      	movs	r2, #50	; 0x32
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	4a3f      	ldr	r2, [pc, #252]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	0c9b      	lsrs	r3, r3, #18
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800504a:	e002      	b.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b01      	subs	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505e:	d102      	bne.n	8005066 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f2      	bne.n	800504c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005066:	4b33      	ldr	r3, [pc, #204]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005072:	d158      	bne.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e057      	b.n	8005128 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005078:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507e:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005084:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005088:	e04d      	b.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005090:	d141      	bne.n	8005116 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005092:	4b28      	ldr	r3, [pc, #160]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509e:	d131      	bne.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a6:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050b0:	4b20      	ldr	r3, [pc, #128]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050b8:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2232      	movs	r2, #50	; 0x32
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	4a1c      	ldr	r2, [pc, #112]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	0c9b      	lsrs	r3, r3, #18
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d6:	e002      	b.n	80050de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ea:	d102      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f2      	bne.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fe:	d112      	bne.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e011      	b.n	8005128 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510a:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005114:	e007      	b.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005116:	4b07      	ldr	r3, [pc, #28]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800511e:	4a05      	ldr	r2, [pc, #20]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005120:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005124:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40007000 	.word	0x40007000
 8005138:	20000000 	.word	0x20000000
 800513c:	431bde83 	.word	0x431bde83

08005140 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4a04      	ldr	r2, [pc, #16]	; (800515c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800514a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800514e:	6093      	str	r3, [r2, #8]
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40007000 	.word	0x40007000

08005160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e2fe      	b.n	8005770 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d075      	beq.n	800526a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517e:	4b97      	ldr	r3, [pc, #604]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005188:	4b94      	ldr	r3, [pc, #592]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	d102      	bne.n	800519e <HAL_RCC_OscConfig+0x3e>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d002      	beq.n	80051a4 <HAL_RCC_OscConfig+0x44>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d10b      	bne.n	80051bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	4b8d      	ldr	r3, [pc, #564]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d05b      	beq.n	8005268 <HAL_RCC_OscConfig+0x108>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d157      	bne.n	8005268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e2d9      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d106      	bne.n	80051d4 <HAL_RCC_OscConfig+0x74>
 80051c6:	4b85      	ldr	r3, [pc, #532]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a84      	ldr	r2, [pc, #528]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e01d      	b.n	8005210 <HAL_RCC_OscConfig+0xb0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x98>
 80051de:	4b7f      	ldr	r3, [pc, #508]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a7e      	ldr	r2, [pc, #504]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	4b7c      	ldr	r3, [pc, #496]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a7b      	ldr	r2, [pc, #492]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e00b      	b.n	8005210 <HAL_RCC_OscConfig+0xb0>
 80051f8:	4b78      	ldr	r3, [pc, #480]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a77      	ldr	r2, [pc, #476]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80051fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	4b75      	ldr	r3, [pc, #468]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a74      	ldr	r2, [pc, #464]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 800520a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800520e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fd fc24 	bl	8002a64 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005220:	f7fd fc20 	bl	8002a64 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e29e      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005232:	4b6a      	ldr	r3, [pc, #424]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0xc0>
 800523e:	e014      	b.n	800526a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fd fc10 	bl	8002a64 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005248:	f7fd fc0c 	bl	8002a64 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	; 0x64
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e28a      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800525a:	4b60      	ldr	r3, [pc, #384]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0xe8>
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d075      	beq.n	8005362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005276:	4b59      	ldr	r3, [pc, #356]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005280:	4b56      	ldr	r3, [pc, #344]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b0c      	cmp	r3, #12
 800528e:	d102      	bne.n	8005296 <HAL_RCC_OscConfig+0x136>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d002      	beq.n	800529c <HAL_RCC_OscConfig+0x13c>
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d11f      	bne.n	80052dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800529c:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_OscConfig+0x154>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e25d      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	4946      	ldr	r1, [pc, #280]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052c8:	4b45      	ldr	r3, [pc, #276]	; (80053e0 <HAL_RCC_OscConfig+0x280>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fd f953 	bl	8002578 <HAL_InitTick>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d043      	beq.n	8005360 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e249      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e4:	4b3d      	ldr	r3, [pc, #244]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3c      	ldr	r2, [pc, #240]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80052ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fd fbb8 	bl	8002a64 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f8:	f7fd fbb4 	bl	8002a64 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e232      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800530a:	4b34      	ldr	r3, [pc, #208]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005316:	4b31      	ldr	r3, [pc, #196]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	492d      	ldr	r1, [pc, #180]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
 800532a:	e01a      	b.n	8005362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fd fb94 	bl	8002a64 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005340:	f7fd fb90 	bl	8002a64 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e20e      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005352:	4b22      	ldr	r3, [pc, #136]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x1e0>
 800535e:	e000      	b.n	8005362 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005360:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d041      	beq.n	80053f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d01c      	beq.n	80053b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 8005378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005386:	f7fd fb6d 	bl	8002a64 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538e:	f7fd fb69 	bl	8002a64 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e1e7      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80053a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0ef      	beq.n	800538e <HAL_RCC_OscConfig+0x22e>
 80053ae:	e020      	b.n	80053f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80053b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <HAL_RCC_OscConfig+0x27c>)
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fd fb50 	bl	8002a64 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c6:	e00d      	b.n	80053e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c8:	f7fd fb4c 	bl	8002a64 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d906      	bls.n	80053e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e1ca      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
 80053e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053e4:	4b8c      	ldr	r3, [pc, #560]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ea      	bne.n	80053c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a6 	beq.w	800554c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005400:	2300      	movs	r3, #0
 8005402:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005404:	4b84      	ldr	r3, [pc, #528]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_OscConfig+0x2b4>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_RCC_OscConfig+0x2b6>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	4b7f      	ldr	r3, [pc, #508]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	4a7e      	ldr	r2, [pc, #504]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005424:	6593      	str	r3, [r2, #88]	; 0x58
 8005426:	4b7c      	ldr	r3, [pc, #496]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005432:	2301      	movs	r3, #1
 8005434:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005436:	4b79      	ldr	r3, [pc, #484]	; (800561c <HAL_RCC_OscConfig+0x4bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d118      	bne.n	8005474 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005442:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCC_OscConfig+0x4bc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a75      	ldr	r2, [pc, #468]	; (800561c <HAL_RCC_OscConfig+0x4bc>)
 8005448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544e:	f7fd fb09 	bl	8002a64 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005456:	f7fd fb05 	bl	8002a64 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e183      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005468:	4b6c      	ldr	r3, [pc, #432]	; (800561c <HAL_RCC_OscConfig+0x4bc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d108      	bne.n	800548e <HAL_RCC_OscConfig+0x32e>
 800547c:	4b66      	ldr	r3, [pc, #408]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	4a65      	ldr	r2, [pc, #404]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800548c:	e024      	b.n	80054d8 <HAL_RCC_OscConfig+0x378>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b05      	cmp	r3, #5
 8005494:	d110      	bne.n	80054b8 <HAL_RCC_OscConfig+0x358>
 8005496:	4b60      	ldr	r3, [pc, #384]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	4a5e      	ldr	r2, [pc, #376]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 800549e:	f043 0304 	orr.w	r3, r3, #4
 80054a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054a6:	4b5c      	ldr	r3, [pc, #368]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	4a5a      	ldr	r2, [pc, #360]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054b6:	e00f      	b.n	80054d8 <HAL_RCC_OscConfig+0x378>
 80054b8:	4b57      	ldr	r3, [pc, #348]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	4a56      	ldr	r2, [pc, #344]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c8:	4b53      	ldr	r3, [pc, #332]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	4a52      	ldr	r2, [pc, #328]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d016      	beq.n	800550e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fd fac0 	bl	8002a64 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e6:	e00a      	b.n	80054fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e8:	f7fd fabc 	bl	8002a64 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e138      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fe:	4b46      	ldr	r3, [pc, #280]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ed      	beq.n	80054e8 <HAL_RCC_OscConfig+0x388>
 800550c:	e015      	b.n	800553a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550e:	f7fd faa9 	bl	8002a64 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005514:	e00a      	b.n	800552c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005516:	f7fd faa5 	bl	8002a64 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e121      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800552c:	4b3a      	ldr	r3, [pc, #232]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1ed      	bne.n	8005516 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800553a:	7ffb      	ldrb	r3, [r7, #31]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d105      	bne.n	800554c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005540:	4b35      	ldr	r3, [pc, #212]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	4a34      	ldr	r2, [pc, #208]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800554a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d03c      	beq.n	80055d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01c      	beq.n	800559a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005560:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005566:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fd fa78 	bl	8002a64 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005578:	f7fd fa74 	bl	8002a64 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e0f2      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800558a:	4b23      	ldr	r3, [pc, #140]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ef      	beq.n	8005578 <HAL_RCC_OscConfig+0x418>
 8005598:	e01b      	b.n	80055d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800559a:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 800559c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055aa:	f7fd fa5b 	bl	8002a64 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055b2:	f7fd fa57 	bl	8002a64 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e0d5      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055c4:	4b14      	ldr	r3, [pc, #80]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80055c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1ef      	bne.n	80055b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80c9 	beq.w	800576e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 030c 	and.w	r3, r3, #12
 80055e4:	2b0c      	cmp	r3, #12
 80055e6:	f000 8083 	beq.w	80056f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d15e      	bne.n	80056b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a08      	ldr	r2, [pc, #32]	; (8005618 <HAL_RCC_OscConfig+0x4b8>)
 80055f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fd fa31 	bl	8002a64 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005604:	e00c      	b.n	8005620 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005606:	f7fd fa2d 	bl	8002a64 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d905      	bls.n	8005620 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e0ab      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
 8005618:	40021000 	.word	0x40021000
 800561c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005620:	4b55      	ldr	r3, [pc, #340]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ec      	bne.n	8005606 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800562c:	4b52      	ldr	r3, [pc, #328]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	4b52      	ldr	r3, [pc, #328]	; (800577c <HAL_RCC_OscConfig+0x61c>)
 8005632:	4013      	ands	r3, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6a11      	ldr	r1, [r2, #32]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800563c:	3a01      	subs	r2, #1
 800563e:	0112      	lsls	r2, r2, #4
 8005640:	4311      	orrs	r1, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005646:	0212      	lsls	r2, r2, #8
 8005648:	4311      	orrs	r1, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800564e:	0852      	lsrs	r2, r2, #1
 8005650:	3a01      	subs	r2, #1
 8005652:	0552      	lsls	r2, r2, #21
 8005654:	4311      	orrs	r1, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800565a:	0852      	lsrs	r2, r2, #1
 800565c:	3a01      	subs	r2, #1
 800565e:	0652      	lsls	r2, r2, #25
 8005660:	4311      	orrs	r1, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005666:	06d2      	lsls	r2, r2, #27
 8005668:	430a      	orrs	r2, r1
 800566a:	4943      	ldr	r1, [pc, #268]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 800566c:	4313      	orrs	r3, r2
 800566e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005670:	4b41      	ldr	r3, [pc, #260]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a40      	ldr	r2, [pc, #256]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 8005676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800567a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800567c:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4a3d      	ldr	r2, [pc, #244]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 8005682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005686:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fd f9ec 	bl	8002a64 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005690:	f7fd f9e8 	bl	8002a64 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e066      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a2:	4b35      	ldr	r3, [pc, #212]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0x530>
 80056ae:	e05e      	b.n	800576e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b0:	4b31      	ldr	r3, [pc, #196]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a30      	ldr	r2, [pc, #192]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 80056b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fd f9d2 	bl	8002a64 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fd f9ce 	bl	8002a64 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e04c      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056e2:	4b25      	ldr	r3, [pc, #148]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	4924      	ldr	r1, [pc, #144]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 80056e8:	4b25      	ldr	r3, [pc, #148]	; (8005780 <HAL_RCC_OscConfig+0x620>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	60cb      	str	r3, [r1, #12]
 80056ee:	e03e      	b.n	800576e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e039      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056fc:	4b1e      	ldr	r3, [pc, #120]	; (8005778 <HAL_RCC_OscConfig+0x618>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 0203 	and.w	r2, r3, #3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	429a      	cmp	r2, r3
 800570e:	d12c      	bne.n	800576a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	3b01      	subs	r3, #1
 800571c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571e:	429a      	cmp	r2, r3
 8005720:	d123      	bne.n	800576a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d11b      	bne.n	800576a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d113      	bne.n	800576a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	3b01      	subs	r3, #1
 8005750:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d109      	bne.n	800576a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	3b01      	subs	r3, #1
 8005764:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d001      	beq.n	800576e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000
 800577c:	019f800c 	.word	0x019f800c
 8005780:	feeefffc 	.word	0xfeeefffc

08005784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e11e      	b.n	80059da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b91      	ldr	r3, [pc, #580]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d910      	bls.n	80057cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b8e      	ldr	r3, [pc, #568]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 020f 	bic.w	r2, r3, #15
 80057b2:	498c      	ldr	r1, [pc, #560]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b8a      	ldr	r3, [pc, #552]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e106      	b.n	80059da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d073      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d129      	bne.n	8005834 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e0:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0f4      	b.n	80059da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057f0:	f000 f9ce 	bl	8005b90 <RCC_GetSysClockFreqFromPLLSource>
 80057f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4a7c      	ldr	r2, [pc, #496]	; (80059ec <HAL_RCC_ClockConfig+0x268>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d93f      	bls.n	800587e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057fe:	4b7a      	ldr	r3, [pc, #488]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005812:	2b00      	cmp	r3, #0
 8005814:	d033      	beq.n	800587e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800581a:	2b00      	cmp	r3, #0
 800581c:	d12f      	bne.n	800587e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800581e:	4b72      	ldr	r3, [pc, #456]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005826:	4a70      	ldr	r2, [pc, #448]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e024      	b.n	800587e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d107      	bne.n	800584c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583c:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0c6      	b.n	80059da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800584c:	4b66      	ldr	r3, [pc, #408]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0be      	b.n	80059da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800585c:	f000 f8ce 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8005860:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4a61      	ldr	r2, [pc, #388]	; (80059ec <HAL_RCC_ClockConfig+0x268>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d909      	bls.n	800587e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800586a:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005872:	4a5d      	ldr	r2, [pc, #372]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 8005874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005878:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800587e:	4b5a      	ldr	r3, [pc, #360]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f023 0203 	bic.w	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4957      	ldr	r1, [pc, #348]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800588c:	4313      	orrs	r3, r2
 800588e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005890:	f7fd f8e8 	bl	8002a64 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005896:	e00a      	b.n	80058ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005898:	f7fd f8e4 	bl	8002a64 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e095      	b.n	80059da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ae:	4b4e      	ldr	r3, [pc, #312]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 020c 	and.w	r2, r3, #12
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	429a      	cmp	r2, r3
 80058be:	d1eb      	bne.n	8005898 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d023      	beq.n	8005914 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d8:	4b43      	ldr	r3, [pc, #268]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a42      	ldr	r2, [pc, #264]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80058de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058f0:	4b3d      	ldr	r3, [pc, #244]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058f8:	4a3b      	ldr	r2, [pc, #236]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80058fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005900:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4936      	ldr	r1, [pc, #216]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
 8005912:	e008      	b.n	8005926 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b80      	cmp	r3, #128	; 0x80
 8005918:	d105      	bne.n	8005926 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800591a:	4b33      	ldr	r3, [pc, #204]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4a32      	ldr	r2, [pc, #200]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 8005920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005924:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d21d      	bcs.n	8005970 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f023 020f 	bic.w	r2, r3, #15
 800593c:	4929      	ldr	r1, [pc, #164]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005944:	f7fd f88e 	bl	8002a64 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	e00a      	b.n	8005962 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594c:	f7fd f88a 	bl	8002a64 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	; 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e03b      	b.n	80059da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005962:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d1ed      	bne.n	800594c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4917      	ldr	r1, [pc, #92]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800599a:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	490f      	ldr	r1, [pc, #60]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059ae:	f000 f825 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCC_ClockConfig+0x264>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	490c      	ldr	r1, [pc, #48]	; (80059f0 <HAL_RCC_ClockConfig+0x26c>)
 80059c0:	5ccb      	ldrb	r3, [r1, r3]
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <HAL_RCC_ClockConfig+0x270>)
 80059cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <HAL_RCC_ClockConfig+0x274>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fc fdd0 	bl	8002578 <HAL_InitTick>
 80059d8:	4603      	mov	r3, r0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40022000 	.word	0x40022000
 80059e8:	40021000 	.word	0x40021000
 80059ec:	04c4b400 	.word	0x04c4b400
 80059f0:	0801353c 	.word	0x0801353c
 80059f4:	20000000 	.word	0x20000000
 80059f8:	20000004 	.word	0x20000004

080059fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a02:	4b2c      	ldr	r3, [pc, #176]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d102      	bne.n	8005a14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a0e:	4b2a      	ldr	r3, [pc, #168]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	e047      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a14:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d102      	bne.n	8005a26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a20:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	e03e      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a26:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b0c      	cmp	r3, #12
 8005a30:	d136      	bne.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	3301      	adds	r3, #1
 8005a48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d10c      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a50:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a5a:	68d2      	ldr	r2, [r2, #12]
 8005a5c:	0a12      	lsrs	r2, r2, #8
 8005a5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	617b      	str	r3, [r7, #20]
      break;
 8005a68:	e00c      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	4a10      	ldr	r2, [pc, #64]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a74:	68d2      	ldr	r2, [r2, #12]
 8005a76:	0a12      	lsrs	r2, r2, #8
 8005a78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a7c:	fb02 f303 	mul.w	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
      break;
 8005a82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	0e5b      	lsrs	r3, r3, #25
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e001      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005aa4:	693b      	ldr	r3, [r7, #16]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	00f42400 	.word	0x00f42400

08005abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000000 	.word	0x20000000

08005ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ad8:	f7ff fff0 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	4904      	ldr	r1, [pc, #16]	; (8005afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	0801354c 	.word	0x0801354c

08005b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b04:	f7ff ffda 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	0adb      	lsrs	r3, r3, #11
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4904      	ldr	r1, [pc, #16]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000
 8005b28:	0801354c 	.word	0x0801354c

08005b2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	220f      	movs	r2, #15
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b3c:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0203 	and.w	r2, r3, #3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b48:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b54:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	08db      	lsrs	r3, r3, #3
 8005b66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <HAL_RCC_GetClockConfig+0x60>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	601a      	str	r2, [r3, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40022000 	.word	0x40022000

08005b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b96:	4b1e      	ldr	r3, [pc, #120]	; (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d10c      	bne.n	8005bce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bb4:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bbe:	68d2      	ldr	r2, [r2, #12]
 8005bc0:	0a12      	lsrs	r2, r2, #8
 8005bc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	617b      	str	r3, [r7, #20]
    break;
 8005bcc:	e00c      	b.n	8005be8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bce:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bd8:	68d2      	ldr	r2, [r2, #12]
 8005bda:	0a12      	lsrs	r2, r2, #8
 8005bdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
    break;
 8005be6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0e5b      	lsrs	r3, r3, #25
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c02:	687b      	ldr	r3, [r7, #4]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40021000 	.word	0x40021000
 8005c14:	00f42400 	.word	0x00f42400

08005c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c20:	2300      	movs	r3, #0
 8005c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c24:	2300      	movs	r3, #0
 8005c26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8098 	beq.w	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3a:	4b43      	ldr	r3, [pc, #268]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c46:	4b40      	ldr	r3, [pc, #256]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4a:	4a3f      	ldr	r2, [pc, #252]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c50:	6593      	str	r3, [r2, #88]	; 0x58
 8005c52:	4b3d      	ldr	r3, [pc, #244]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	60bb      	str	r3, [r7, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c62:	4b3a      	ldr	r3, [pc, #232]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a39      	ldr	r2, [pc, #228]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c6e:	f7fc fef9 	bl	8002a64 <HAL_GetTick>
 8005c72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c74:	e009      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c76:	f7fc fef5 	bl	8002a64 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d902      	bls.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	74fb      	strb	r3, [r7, #19]
        break;
 8005c88:	e005      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c8a:	4b30      	ldr	r3, [pc, #192]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0ef      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d159      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c9c:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01e      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d019      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cb8:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cc4:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ce4:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf6:	f7fc feb5 	bl	8002a64 <HAL_GetTick>
 8005cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cfc:	e00b      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfe:	f7fc feb1 	bl	8002a64 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d902      	bls.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	74fb      	strb	r3, [r7, #19]
            break;
 8005d14:	e006      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0ec      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d24:	7cfb      	ldrb	r3, [r7, #19]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d38:	4903      	ldr	r1, [pc, #12]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d40:	e008      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d42:	7cfb      	ldrb	r3, [r7, #19]
 8005d44:	74bb      	strb	r3, [r7, #18]
 8005d46:	e005      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
 8005d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d54:	7c7b      	ldrb	r3, [r7, #17]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d105      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5a:	4ba7      	ldr	r3, [pc, #668]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	4aa6      	ldr	r2, [pc, #664]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d72:	4ba1      	ldr	r3, [pc, #644]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f023 0203 	bic.w	r2, r3, #3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	499d      	ldr	r1, [pc, #628]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d94:	4b98      	ldr	r3, [pc, #608]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f023 020c 	bic.w	r2, r3, #12
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4995      	ldr	r1, [pc, #596]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005db6:	4b90      	ldr	r3, [pc, #576]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	498c      	ldr	r1, [pc, #560]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dd8:	4b87      	ldr	r3, [pc, #540]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	4984      	ldr	r1, [pc, #528]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dfa:	4b7f      	ldr	r3, [pc, #508]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	497b      	ldr	r1, [pc, #492]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e1c:	4b76      	ldr	r3, [pc, #472]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	4973      	ldr	r1, [pc, #460]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e3e:	4b6e      	ldr	r3, [pc, #440]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	496a      	ldr	r1, [pc, #424]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e60:	4b65      	ldr	r3, [pc, #404]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	4962      	ldr	r1, [pc, #392]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e82:	4b5d      	ldr	r3, [pc, #372]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	4959      	ldr	r1, [pc, #356]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ea4:	4b54      	ldr	r3, [pc, #336]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eaa:	f023 0203 	bic.w	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	4951      	ldr	r1, [pc, #324]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ec6:	4b4c      	ldr	r3, [pc, #304]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ecc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	4948      	ldr	r1, [pc, #288]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ee8:	4b43      	ldr	r3, [pc, #268]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	4940      	ldr	r1, [pc, #256]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f08:	4b3b      	ldr	r3, [pc, #236]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a3a      	ldr	r2, [pc, #232]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f20:	4b35      	ldr	r3, [pc, #212]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	4932      	ldr	r1, [pc, #200]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f40:	4b2d      	ldr	r3, [pc, #180]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a2c      	ldr	r2, [pc, #176]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f58:	4b27      	ldr	r3, [pc, #156]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	4924      	ldr	r1, [pc, #144]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f76:	d105      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f78:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a1e      	ldr	r2, [pc, #120]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	4916      	ldr	r1, [pc, #88]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fae:	d105      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fb0:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4a10      	ldr	r2, [pc, #64]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d019      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	4908      	ldr	r1, [pc, #32]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe6:	d109      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4a02      	ldr	r2, [pc, #8]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff2:	60d3      	str	r3, [r2, #12]
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d015      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006008:	4b29      	ldr	r3, [pc, #164]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	4926      	ldr	r1, [pc, #152]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006026:	d105      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006028:	4b21      	ldr	r3, [pc, #132]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006032:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d015      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604e:	4918      	ldr	r1, [pc, #96]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d105      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a12      	ldr	r2, [pc, #72]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d015      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800607a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800607e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	490a      	ldr	r1, [pc, #40]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006096:	d105      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a04      	ldr	r2, [pc, #16]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800609e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000

080060b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e09d      	b.n	8006202 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d6:	d009      	beq.n	80060ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	61da      	str	r2, [r3, #28]
 80060de:	e005      	b.n	80060ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fc f9ca 	bl	80024a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006122:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800612c:	d902      	bls.n	8006134 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e002      	b.n	800613a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006138:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006142:	d007      	beq.n	8006154 <HAL_SPI_Init+0xa0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800614c:	d002      	beq.n	8006154 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	ea42 0103 	orr.w	r1, r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	0c1b      	lsrs	r3, r3, #16
 80061b0:	f003 0204 	and.w	r2, r3, #4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061d0:	ea42 0103 	orr.w	r1, r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b088      	sub	sp, #32
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	603b      	str	r3, [r7, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_SPI_Transmit+0x22>
 8006228:	2302      	movs	r3, #2
 800622a:	e15f      	b.n	80064ec <HAL_SPI_Transmit+0x2e2>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006234:	f7fc fc16 	bl	8002a64 <HAL_GetTick>
 8006238:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d002      	beq.n	8006250 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800624a:	2302      	movs	r3, #2
 800624c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800624e:	e148      	b.n	80064e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_SPI_Transmit+0x52>
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006260:	e13f      	b.n	80064e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2203      	movs	r2, #3
 8006266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ac:	d10f      	bne.n	80062ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d007      	beq.n	80062ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062f4:	d94f      	bls.n	8006396 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_SPI_Transmit+0xfa>
 80062fe:	8afb      	ldrh	r3, [r7, #22]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d142      	bne.n	800638a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	881a      	ldrh	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	1c9a      	adds	r2, r3, #2
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006328:	e02f      	b.n	800638a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b02      	cmp	r3, #2
 8006336:	d112      	bne.n	800635e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	881a      	ldrh	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	1c9a      	adds	r2, r3, #2
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800635c:	e015      	b.n	800638a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635e:	f7fc fb81 	bl	8002a64 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d803      	bhi.n	8006376 <HAL_SPI_Transmit+0x16c>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006374:	d102      	bne.n	800637c <HAL_SPI_Transmit+0x172>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006388:	e0ab      	b.n	80064e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1ca      	bne.n	800632a <HAL_SPI_Transmit+0x120>
 8006394:	e080      	b.n	8006498 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_SPI_Transmit+0x19a>
 800639e:	8afb      	ldrh	r3, [r7, #22]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d174      	bne.n	800648e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d912      	bls.n	80063d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	881a      	ldrh	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	1c9a      	adds	r2, r3, #2
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b02      	subs	r3, #2
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063d2:	e05c      	b.n	800648e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	7812      	ldrb	r2, [r2, #0]
 80063e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80063fa:	e048      	b.n	800648e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d12b      	bne.n	8006462 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	d912      	bls.n	800643a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	881a      	ldrh	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	1c9a      	adds	r2, r3, #2
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b02      	subs	r3, #2
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006438:	e029      	b.n	800648e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006460:	e015      	b.n	800648e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006462:	f7fc faff 	bl	8002a64 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d803      	bhi.n	800647a <HAL_SPI_Transmit+0x270>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006478:	d102      	bne.n	8006480 <HAL_SPI_Transmit+0x276>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800648c:	e029      	b.n	80064e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1b1      	bne.n	80063fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fb69 	bl	8006b74 <SPI_EndRxTxTransaction>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e003      	b.n	80064e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006502:	2301      	movs	r3, #1
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_SPI_TransmitReceive+0x26>
 8006516:	2302      	movs	r3, #2
 8006518:	e20a      	b.n	8006930 <HAL_SPI_TransmitReceive+0x43c>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006522:	f7fc fa9f 	bl	8002a64 <HAL_GetTick>
 8006526:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800652e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006536:	887b      	ldrh	r3, [r7, #2]
 8006538:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800653a:	887b      	ldrh	r3, [r7, #2]
 800653c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800653e:	7efb      	ldrb	r3, [r7, #27]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d00e      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x6e>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800654a:	d106      	bne.n	800655a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <HAL_SPI_TransmitReceive+0x66>
 8006554:	7efb      	ldrb	r3, [r7, #27]
 8006556:	2b04      	cmp	r3, #4
 8006558:	d003      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800655a:	2302      	movs	r3, #2
 800655c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006560:	e1e0      	b.n	8006924 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x80>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x80>
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800657a:	e1d3      	b.n	8006924 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b04      	cmp	r3, #4
 8006586:	d003      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2205      	movs	r2, #5
 800658c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	887a      	ldrh	r2, [r7, #2]
 80065a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	887a      	ldrh	r2, [r7, #2]
 80065b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	887a      	ldrh	r2, [r7, #2]
 80065bc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065d2:	d802      	bhi.n	80065da <HAL_SPI_TransmitReceive+0xe6>
 80065d4:	8a3b      	ldrh	r3, [r7, #16]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d908      	bls.n	80065ec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	e007      	b.n	80065fc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d007      	beq.n	800661a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006618:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006622:	f240 8081 	bls.w	8006728 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x140>
 800662e:	8a7b      	ldrh	r3, [r7, #18]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d16d      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	881a      	ldrh	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006658:	e05a      	b.n	8006710 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b02      	cmp	r3, #2
 8006666:	d11b      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x1ac>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x1ac>
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	2b01      	cmp	r3, #1
 8006676:	d113      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d11c      	bne.n	80066e8 <HAL_SPI_TransmitReceive+0x1f4>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d016      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	b292      	uxth	r2, r2
 80066c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066e4:	2301      	movs	r3, #1
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066e8:	f7fc f9bc 	bl	8002a64 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d80b      	bhi.n	8006710 <HAL_SPI_TransmitReceive+0x21c>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fe:	d007      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800670e:	e109      	b.n	8006924 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d19f      	bne.n	800665a <HAL_SPI_TransmitReceive+0x166>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d199      	bne.n	800665a <HAL_SPI_TransmitReceive+0x166>
 8006726:	e0e3      	b.n	80068f0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x244>
 8006730:	8a7b      	ldrh	r3, [r7, #18]
 8006732:	2b01      	cmp	r3, #1
 8006734:	f040 80cf 	bne.w	80068d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	d912      	bls.n	8006768 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b02      	subs	r3, #2
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006766:	e0b6      	b.n	80068d6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	330c      	adds	r3, #12
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800678e:	e0a2      	b.n	80068d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b02      	cmp	r3, #2
 800679c:	d134      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x314>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d02f      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x314>
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d12c      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d912      	bls.n	80067de <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	881a      	ldrh	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	1c9a      	adds	r2, r3, #2
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b02      	subs	r3, #2
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067dc:	e012      	b.n	8006804 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	7812      	ldrb	r2, [r2, #0]
 80067ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d148      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x3b4>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d042      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	d923      	bls.n	8006876 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	b292      	uxth	r2, r2
 800683a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b02      	subs	r3, #2
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	d81f      	bhi.n	80068a4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006872:	605a      	str	r2, [r3, #4]
 8006874:	e016      	b.n	80068a4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f103 020c 	add.w	r2, r3, #12
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068a4:	2301      	movs	r3, #1
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068a8:	f7fc f8dc 	bl	8002a64 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d803      	bhi.n	80068c0 <HAL_SPI_TransmitReceive+0x3cc>
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068be:	d102      	bne.n	80068c6 <HAL_SPI_TransmitReceive+0x3d2>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80068d4:	e026      	b.n	8006924 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f47f af57 	bne.w	8006790 <HAL_SPI_TransmitReceive+0x29c>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f47f af50 	bne.w	8006790 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f93d 	bl	8006b74 <SPI_EndRxTxTransaction>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2220      	movs	r2, #32
 800690a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691a:	e003      	b.n	8006924 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800692c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006930:	4618      	mov	r0, r3
 8006932:	3728      	adds	r7, #40	; 0x28
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006948:	f7fc f88c 	bl	8002a64 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	4413      	add	r3, r2
 8006956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006958:	f7fc f884 	bl	8002a64 <HAL_GetTick>
 800695c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	015b      	lsls	r3, r3, #5
 8006964:	0d1b      	lsrs	r3, r3, #20
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	fb02 f303 	mul.w	r3, r2, r3
 800696c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696e:	e054      	b.n	8006a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006976:	d050      	beq.n	8006a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006978:	f7fc f874 	bl	8002a64 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	429a      	cmp	r2, r3
 8006986:	d902      	bls.n	800698e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d13d      	bne.n	8006a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800699c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a6:	d111      	bne.n	80069cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b0:	d004      	beq.n	80069bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ba:	d107      	bne.n	80069cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d4:	d10f      	bne.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e017      	b.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d19b      	bne.n	8006970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000000 	.word	0x20000000

08006a48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a5a:	f7fc f803 	bl	8002a64 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	4413      	add	r3, r2
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006a6a:	f7fb fffb 	bl	8002a64 <HAL_GetTick>
 8006a6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a78:	4b3d      	ldr	r3, [pc, #244]	; (8006b70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	00da      	lsls	r2, r3, #3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	0d1b      	lsrs	r3, r3, #20
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
 8006a8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a90:	e060      	b.n	8006b54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a98:	d107      	bne.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d104      	bne.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ab0:	d050      	beq.n	8006b54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ab2:	f7fb ffd7 	bl	8002a64 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d902      	bls.n	8006ac8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d13d      	bne.n	8006b44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ad6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ae0:	d111      	bne.n	8006b06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aea:	d004      	beq.n	8006af6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af4:	d107      	bne.n	8006b06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0e:	d10f      	bne.n	8006b30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e010      	b.n	8006b66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d196      	bne.n	8006a92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3728      	adds	r7, #40	; 0x28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000000 	.word	0x20000000

08006b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff ff5b 	bl	8006a48 <SPI_WaitFifoStateUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9c:	f043 0220 	orr.w	r2, r3, #32
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e027      	b.n	8006bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fec0 	bl	8006938 <SPI_WaitFlagStateUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e014      	b.n	8006bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff ff34 	bl	8006a48 <SPI_WaitFifoStateUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e000      	b.n	8006bf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e049      	b.n	8006ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f841 	bl	8006cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f000 fa30 	bl	80070a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d001      	beq.n	8006cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e054      	b.n	8006d86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d022      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x80>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d06:	d01d      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x80>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d018      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x80>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a21      	ldr	r2, [pc, #132]	; (8006d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x80>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1f      	ldr	r2, [pc, #124]	; (8006da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x80>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1e      	ldr	r2, [pc, #120]	; (8006da4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x80>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1c      	ldr	r2, [pc, #112]	; (8006da8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x80>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <HAL_TIM_Base_Start_IT+0xe8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d115      	bne.n	8006d70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <HAL_TIM_Base_Start_IT+0xec>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	d015      	beq.n	8006d82 <HAL_TIM_Base_Start_IT+0xbe>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5c:	d011      	beq.n	8006d82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0201 	orr.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6e:	e008      	b.n	8006d82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e000      	b.n	8006d84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40013400 	.word	0x40013400
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40015000 	.word	0x40015000
 8006db0:	00010007 	.word	0x00010007

08006db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d020      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01b      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0202 	mvn.w	r2, #2
 8006de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f931 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f923 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f934 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d020      	beq.n	8006e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01b      	beq.n	8006e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0204 	mvn.w	r2, #4
 8006e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f90b 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006e50:	e005      	b.n	8006e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8fd 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f90e 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d020      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01b      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0208 	mvn.w	r2, #8
 8006e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2204      	movs	r2, #4
 8006e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f8e5 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8d7 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f8e8 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d020      	beq.n	8006efc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0210 	mvn.w	r2, #16
 8006ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8bf 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006ee8:	e005      	b.n	8006ef6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8b1 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f8c2 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00c      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d007      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0201 	mvn.w	r2, #1
 8006f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fb fa6a 	bl	80023f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00c      	beq.n	8006f4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f969 	bl	8007220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00c      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f961 	bl	8007234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f87c 	bl	800708e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f06f 0220 	mvn.w	r2, #32
 8006fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f929 	bl	800720c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f935 	bl	8007248 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00c      	beq.n	8007002 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f92d 	bl	800725c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800701e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f925 	bl	8007270 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00c      	beq.n	800704a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f91d 	bl	8007284 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a4c      	ldr	r2, [pc, #304]	; (80071e8 <TIM_Base_SetConfig+0x144>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d017      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d013      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a49      	ldr	r2, [pc, #292]	; (80071ec <TIM_Base_SetConfig+0x148>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00f      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a48      	ldr	r2, [pc, #288]	; (80071f0 <TIM_Base_SetConfig+0x14c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00b      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a47      	ldr	r2, [pc, #284]	; (80071f4 <TIM_Base_SetConfig+0x150>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d007      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a46      	ldr	r2, [pc, #280]	; (80071f8 <TIM_Base_SetConfig+0x154>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a45      	ldr	r2, [pc, #276]	; (80071fc <TIM_Base_SetConfig+0x158>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d108      	bne.n	80070fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a39      	ldr	r2, [pc, #228]	; (80071e8 <TIM_Base_SetConfig+0x144>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d023      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710c:	d01f      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a36      	ldr	r2, [pc, #216]	; (80071ec <TIM_Base_SetConfig+0x148>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01b      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a35      	ldr	r2, [pc, #212]	; (80071f0 <TIM_Base_SetConfig+0x14c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d017      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a34      	ldr	r2, [pc, #208]	; (80071f4 <TIM_Base_SetConfig+0x150>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a33      	ldr	r2, [pc, #204]	; (80071f8 <TIM_Base_SetConfig+0x154>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00f      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a33      	ldr	r2, [pc, #204]	; (8007200 <TIM_Base_SetConfig+0x15c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00b      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a32      	ldr	r2, [pc, #200]	; (8007204 <TIM_Base_SetConfig+0x160>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d007      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a31      	ldr	r2, [pc, #196]	; (8007208 <TIM_Base_SetConfig+0x164>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2c      	ldr	r2, [pc, #176]	; (80071fc <TIM_Base_SetConfig+0x158>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d108      	bne.n	8007160 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a18      	ldr	r2, [pc, #96]	; (80071e8 <TIM_Base_SetConfig+0x144>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <TIM_Base_SetConfig+0x154>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <TIM_Base_SetConfig+0x15c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a19      	ldr	r2, [pc, #100]	; (8007204 <TIM_Base_SetConfig+0x160>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a18      	ldr	r2, [pc, #96]	; (8007208 <TIM_Base_SetConfig+0x164>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a13      	ldr	r2, [pc, #76]	; (80071fc <TIM_Base_SetConfig+0x158>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d105      	bne.n	80071da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	611a      	str	r2, [r3, #16]
  }
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40000400 	.word	0x40000400
 80071f0:	40000800 	.word	0x40000800
 80071f4:	40000c00 	.word	0x40000c00
 80071f8:	40013400 	.word	0x40013400
 80071fc:	40015000 	.word	0x40015000
 8007200:	40014000 	.word	0x40014000
 8007204:	40014400 	.word	0x40014400
 8007208:	40014800 	.word	0x40014800

0800720c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e042      	b.n	8007330 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d106      	bne.n	80072c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7fb fb25 	bl	800290c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2224      	movs	r2, #36	; 0x24
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0201 	bic.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fb24 	bl	8007930 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f825 	bl	8007338 <UART_SetConfig>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e01b      	b.n	8007330 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fba3 	bl	8007a74 <UART_CheckIdleState>
 800732e:	4603      	mov	r3, r0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b08c      	sub	sp, #48	; 0x30
 800733e:	af00      	add	r7, sp, #0
 8007340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	431a      	orrs	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	431a      	orrs	r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	4313      	orrs	r3, r2
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4baa      	ldr	r3, [pc, #680]	; (8007610 <UART_SetConfig+0x2d8>)
 8007368:	4013      	ands	r3, r2
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007370:	430b      	orrs	r3, r1
 8007372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a9f      	ldr	r2, [pc, #636]	; (8007614 <UART_SetConfig+0x2dc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a0:	4313      	orrs	r3, r2
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80073ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f023 010f 	bic.w	r1, r3, #15
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a90      	ldr	r2, [pc, #576]	; (8007618 <UART_SetConfig+0x2e0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d125      	bne.n	8007428 <UART_SetConfig+0xf0>
 80073dc:	4b8f      	ldr	r3, [pc, #572]	; (800761c <UART_SetConfig+0x2e4>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d81a      	bhi.n	8007420 <UART_SetConfig+0xe8>
 80073ea:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <UART_SetConfig+0xb8>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007401 	.word	0x08007401
 80073f4:	08007411 	.word	0x08007411
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007419 	.word	0x08007419
 8007400:	2301      	movs	r3, #1
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e116      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e112      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007416:	e10e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741e:	e10a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007426:	e106      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a7c      	ldr	r2, [pc, #496]	; (8007620 <UART_SetConfig+0x2e8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d138      	bne.n	80074a4 <UART_SetConfig+0x16c>
 8007432:	4b7a      	ldr	r3, [pc, #488]	; (800761c <UART_SetConfig+0x2e4>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	f003 030c 	and.w	r3, r3, #12
 800743c:	2b0c      	cmp	r3, #12
 800743e:	d82d      	bhi.n	800749c <UART_SetConfig+0x164>
 8007440:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <UART_SetConfig+0x110>)
 8007442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007446:	bf00      	nop
 8007448:	0800747d 	.word	0x0800747d
 800744c:	0800749d 	.word	0x0800749d
 8007450:	0800749d 	.word	0x0800749d
 8007454:	0800749d 	.word	0x0800749d
 8007458:	0800748d 	.word	0x0800748d
 800745c:	0800749d 	.word	0x0800749d
 8007460:	0800749d 	.word	0x0800749d
 8007464:	0800749d 	.word	0x0800749d
 8007468:	08007485 	.word	0x08007485
 800746c:	0800749d 	.word	0x0800749d
 8007470:	0800749d 	.word	0x0800749d
 8007474:	0800749d 	.word	0x0800749d
 8007478:	08007495 	.word	0x08007495
 800747c:	2300      	movs	r3, #0
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007482:	e0d8      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007484:	2302      	movs	r3, #2
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800748a:	e0d4      	b.n	8007636 <UART_SetConfig+0x2fe>
 800748c:	2304      	movs	r3, #4
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007492:	e0d0      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007494:	2308      	movs	r3, #8
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749a:	e0cc      	b.n	8007636 <UART_SetConfig+0x2fe>
 800749c:	2310      	movs	r3, #16
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a2:	e0c8      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a5e      	ldr	r2, [pc, #376]	; (8007624 <UART_SetConfig+0x2ec>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d125      	bne.n	80074fa <UART_SetConfig+0x1c2>
 80074ae:	4b5b      	ldr	r3, [pc, #364]	; (800761c <UART_SetConfig+0x2e4>)
 80074b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074b8:	2b30      	cmp	r3, #48	; 0x30
 80074ba:	d016      	beq.n	80074ea <UART_SetConfig+0x1b2>
 80074bc:	2b30      	cmp	r3, #48	; 0x30
 80074be:	d818      	bhi.n	80074f2 <UART_SetConfig+0x1ba>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d00a      	beq.n	80074da <UART_SetConfig+0x1a2>
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d814      	bhi.n	80074f2 <UART_SetConfig+0x1ba>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <UART_SetConfig+0x19a>
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d008      	beq.n	80074e2 <UART_SetConfig+0x1aa>
 80074d0:	e00f      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d8:	e0ad      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074da:	2302      	movs	r3, #2
 80074dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e0:	e0a9      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074e2:	2304      	movs	r3, #4
 80074e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e8:	e0a5      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074ea:	2308      	movs	r3, #8
 80074ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f0:	e0a1      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074f2:	2310      	movs	r3, #16
 80074f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f8:	e09d      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a4a      	ldr	r2, [pc, #296]	; (8007628 <UART_SetConfig+0x2f0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d125      	bne.n	8007550 <UART_SetConfig+0x218>
 8007504:	4b45      	ldr	r3, [pc, #276]	; (800761c <UART_SetConfig+0x2e4>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800750e:	2bc0      	cmp	r3, #192	; 0xc0
 8007510:	d016      	beq.n	8007540 <UART_SetConfig+0x208>
 8007512:	2bc0      	cmp	r3, #192	; 0xc0
 8007514:	d818      	bhi.n	8007548 <UART_SetConfig+0x210>
 8007516:	2b80      	cmp	r3, #128	; 0x80
 8007518:	d00a      	beq.n	8007530 <UART_SetConfig+0x1f8>
 800751a:	2b80      	cmp	r3, #128	; 0x80
 800751c:	d814      	bhi.n	8007548 <UART_SetConfig+0x210>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <UART_SetConfig+0x1f0>
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d008      	beq.n	8007538 <UART_SetConfig+0x200>
 8007526:	e00f      	b.n	8007548 <UART_SetConfig+0x210>
 8007528:	2300      	movs	r3, #0
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752e:	e082      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007530:	2302      	movs	r3, #2
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007536:	e07e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753e:	e07a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007546:	e076      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800754e:	e072      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a35      	ldr	r2, [pc, #212]	; (800762c <UART_SetConfig+0x2f4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d12a      	bne.n	80075b0 <UART_SetConfig+0x278>
 800755a:	4b30      	ldr	r3, [pc, #192]	; (800761c <UART_SetConfig+0x2e4>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007568:	d01a      	beq.n	80075a0 <UART_SetConfig+0x268>
 800756a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800756e:	d81b      	bhi.n	80075a8 <UART_SetConfig+0x270>
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d00c      	beq.n	8007590 <UART_SetConfig+0x258>
 8007576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800757a:	d815      	bhi.n	80075a8 <UART_SetConfig+0x270>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <UART_SetConfig+0x250>
 8007580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007584:	d008      	beq.n	8007598 <UART_SetConfig+0x260>
 8007586:	e00f      	b.n	80075a8 <UART_SetConfig+0x270>
 8007588:	2300      	movs	r3, #0
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758e:	e052      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007590:	2302      	movs	r3, #2
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007596:	e04e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007598:	2304      	movs	r3, #4
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759e:	e04a      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075a0:	2308      	movs	r3, #8
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a6:	e046      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ae:	e042      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a17      	ldr	r2, [pc, #92]	; (8007614 <UART_SetConfig+0x2dc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d13a      	bne.n	8007630 <UART_SetConfig+0x2f8>
 80075ba:	4b18      	ldr	r3, [pc, #96]	; (800761c <UART_SetConfig+0x2e4>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c8:	d01a      	beq.n	8007600 <UART_SetConfig+0x2c8>
 80075ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ce:	d81b      	bhi.n	8007608 <UART_SetConfig+0x2d0>
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d4:	d00c      	beq.n	80075f0 <UART_SetConfig+0x2b8>
 80075d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075da:	d815      	bhi.n	8007608 <UART_SetConfig+0x2d0>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <UART_SetConfig+0x2b0>
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e4:	d008      	beq.n	80075f8 <UART_SetConfig+0x2c0>
 80075e6:	e00f      	b.n	8007608 <UART_SetConfig+0x2d0>
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ee:	e022      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075f0:	2302      	movs	r3, #2
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075f6:	e01e      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e01a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007606:	e016      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800760e:	e012      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007610:	cfff69f3 	.word	0xcfff69f3
 8007614:	40008000 	.word	0x40008000
 8007618:	40013800 	.word	0x40013800
 800761c:	40021000 	.word	0x40021000
 8007620:	40004400 	.word	0x40004400
 8007624:	40004800 	.word	0x40004800
 8007628:	40004c00 	.word	0x40004c00
 800762c:	40005000 	.word	0x40005000
 8007630:	2310      	movs	r3, #16
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4aae      	ldr	r2, [pc, #696]	; (80078f4 <UART_SetConfig+0x5bc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	f040 8097 	bne.w	8007770 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007646:	2b08      	cmp	r3, #8
 8007648:	d823      	bhi.n	8007692 <UART_SetConfig+0x35a>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <UART_SetConfig+0x318>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007675 	.word	0x08007675
 8007654:	08007693 	.word	0x08007693
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007693 	.word	0x08007693
 8007660:	08007683 	.word	0x08007683
 8007664:	08007693 	.word	0x08007693
 8007668:	08007693 	.word	0x08007693
 800766c:	08007693 	.word	0x08007693
 8007670:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007674:	f7fe fa2e 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8007678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800767a:	e010      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b9e      	ldr	r3, [pc, #632]	; (80078f8 <UART_SetConfig+0x5c0>)
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007680:	e00d      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fe f9bb 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007688:	e009      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007690:	e005      	b.n	800769e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800769c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8130 	beq.w	8007906 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	4a94      	ldr	r2, [pc, #592]	; (80078fc <UART_SetConfig+0x5c4>)
 80076ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d305      	bcc.n	80076d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d903      	bls.n	80076de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076dc:	e113      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2200      	movs	r2, #0
 80076e2:	60bb      	str	r3, [r7, #8]
 80076e4:	60fa      	str	r2, [r7, #12]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	4a84      	ldr	r2, [pc, #528]	; (80078fc <UART_SetConfig+0x5c4>)
 80076ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2200      	movs	r2, #0
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007700:	f7f9 fa7a 	bl	8000bf8 <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4610      	mov	r0, r2
 800770a:	4619      	mov	r1, r3
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	020b      	lsls	r3, r1, #8
 8007716:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800771a:	0202      	lsls	r2, r0, #8
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	6849      	ldr	r1, [r1, #4]
 8007720:	0849      	lsrs	r1, r1, #1
 8007722:	2000      	movs	r0, #0
 8007724:	460c      	mov	r4, r1
 8007726:	4605      	mov	r5, r0
 8007728:	eb12 0804 	adds.w	r8, r2, r4
 800772c:	eb43 0905 	adc.w	r9, r3, r5
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	469a      	mov	sl, r3
 8007738:	4693      	mov	fp, r2
 800773a:	4652      	mov	r2, sl
 800773c:	465b      	mov	r3, fp
 800773e:	4640      	mov	r0, r8
 8007740:	4649      	mov	r1, r9
 8007742:	f7f9 fa59 	bl	8000bf8 <__aeabi_uldivmod>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4613      	mov	r3, r2
 800774c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007754:	d308      	bcc.n	8007768 <UART_SetConfig+0x430>
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800775c:	d204      	bcs.n	8007768 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6a3a      	ldr	r2, [r7, #32]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	e0ce      	b.n	8007906 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800776e:	e0ca      	b.n	8007906 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007778:	d166      	bne.n	8007848 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800777a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800777e:	2b08      	cmp	r3, #8
 8007780:	d827      	bhi.n	80077d2 <UART_SetConfig+0x49a>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x450>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	080077d3 	.word	0x080077d3
 8007798:	080077c3 	.word	0x080077c3
 800779c:	080077d3 	.word	0x080077d3
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077d3 	.word	0x080077d3
 80077a8:	080077cb 	.word	0x080077cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fe f992 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 80077b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077b2:	e014      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b4:	f7fe f9a4 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 80077b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077ba:	e010      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b4e      	ldr	r3, [pc, #312]	; (80078f8 <UART_SetConfig+0x5c0>)
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077c0:	e00d      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fe f91b 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077c8:	e009      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077d0:	e005      	b.n	80077de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8090 	beq.w	8007906 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	4a44      	ldr	r2, [pc, #272]	; (80078fc <UART_SetConfig+0x5c4>)
 80077ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	441a      	add	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	2b0f      	cmp	r3, #15
 8007810:	d916      	bls.n	8007840 <UART_SetConfig+0x508>
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007818:	d212      	bcs.n	8007840 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f023 030f 	bic.w	r3, r3, #15
 8007822:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	b29a      	uxth	r2, r3
 8007830:	8bfb      	ldrh	r3, [r7, #30]
 8007832:	4313      	orrs	r3, r2
 8007834:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	8bfa      	ldrh	r2, [r7, #30]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	e062      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007846:	e05e      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800784c:	2b08      	cmp	r3, #8
 800784e:	d828      	bhi.n	80078a2 <UART_SetConfig+0x56a>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x520>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	080078a3 	.word	0x080078a3
 8007868:	08007893 	.word	0x08007893
 800786c:	080078a3 	.word	0x080078a3
 8007870:	080078a3 	.word	0x080078a3
 8007874:	080078a3 	.word	0x080078a3
 8007878:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fe f92a 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8007880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007882:	e014      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007884:	f7fe f93c 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8007888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800788a:	e010      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <UART_SetConfig+0x5c0>)
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007890:	e00d      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fe f8b3 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007898:	e009      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078a0:	e005      	b.n	80078ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078ac:	bf00      	nop
    }

    if (pclk != 0U)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d028      	beq.n	8007906 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	4a10      	ldr	r2, [pc, #64]	; (80078fc <UART_SetConfig+0x5c4>)
 80078ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078be:	461a      	mov	r2, r3
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	441a      	add	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2b0f      	cmp	r3, #15
 80078dc:	d910      	bls.n	8007900 <UART_SetConfig+0x5c8>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e4:	d20c      	bcs.n	8007900 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60da      	str	r2, [r3, #12]
 80078f0:	e009      	b.n	8007906 <UART_SetConfig+0x5ce>
 80078f2:	bf00      	nop
 80078f4:	40008000 	.word	0x40008000
 80078f8:	00f42400 	.word	0x00f42400
 80078fc:	08013554 	.word	0x08013554
      }
      else
      {
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2201      	movs	r2, #1
 800790a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2201      	movs	r2, #1
 8007912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2200      	movs	r2, #0
 800791a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007922:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007926:	4618      	mov	r0, r3
 8007928:	3730      	adds	r7, #48	; 0x30
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01a      	beq.n	8007a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2e:	d10a      	bne.n	8007a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	605a      	str	r2, [r3, #4]
  }
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b098      	sub	sp, #96	; 0x60
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a84:	f7fa ffee 	bl	8002a64 <HAL_GetTick>
 8007a88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d12f      	bne.n	8007af8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f88e 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d022      	beq.n	8007af8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e6      	bne.n	8007ab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e063      	b.n	8007bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d149      	bne.n	8007b9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f857 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d03c      	beq.n	8007b9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b72:	61fa      	str	r2, [r7, #28]
 8007b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	69b9      	ldr	r1, [r7, #24]
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e012      	b.n	8007bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3758      	adds	r7, #88	; 0x58
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd8:	e04f      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be0:	d04b      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be2:	f7fa ff3f 	bl	8002a64 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e04e      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d037      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d034      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d031      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d110      	bne.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2208      	movs	r2, #8
 8007c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f838 	bl	8007ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2208      	movs	r2, #8
 8007c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e029      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c54:	d111      	bne.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f81e 	bl	8007ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e00f      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4013      	ands	r3, r2
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	bf0c      	ite	eq
 8007c8a:	2301      	moveq	r3, #1
 8007c8c:	2300      	movne	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d0a0      	beq.n	8007bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b095      	sub	sp, #84	; 0x54
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e6      	bne.n	8007caa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e3      	bne.n	8007cdc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d118      	bne.n	8007d4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f023 0310 	bic.w	r3, r3, #16
 8007d30:	647b      	str	r3, [r7, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6979      	ldr	r1, [r7, #20]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	613b      	str	r3, [r7, #16]
   return(result);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d62:	bf00      	nop
 8007d64:	3754      	adds	r7, #84	; 0x54
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d101      	bne.n	8007d84 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e027      	b.n	8007dd4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2224      	movs	r2, #36	; 0x24
 8007d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007db2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e02d      	b.n	8007e54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2224      	movs	r2, #36	; 0x24
 8007e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0201 	bic.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f84f 	bl	8007ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2220      	movs	r2, #32
 8007e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e02d      	b.n	8007ed0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2224      	movs	r2, #36	; 0x24
 8007e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0201 	bic.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f811 	bl	8007ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d108      	bne.n	8007efa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ef8:	e031      	b.n	8007f5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007efa:	2308      	movs	r3, #8
 8007efc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007efe:	2308      	movs	r3, #8
 8007f00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	0e5b      	lsrs	r3, r3, #25
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	0f5b      	lsrs	r3, r3, #29
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	7b3a      	ldrb	r2, [r7, #12]
 8007f26:	4911      	ldr	r1, [pc, #68]	; (8007f6c <UARTEx_SetNbDataToProcess+0x94>)
 8007f28:	5c8a      	ldrb	r2, [r1, r2]
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f2e:	7b3a      	ldrb	r2, [r7, #12]
 8007f30:	490f      	ldr	r1, [pc, #60]	; (8007f70 <UARTEx_SetNbDataToProcess+0x98>)
 8007f32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f34:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	7b7a      	ldrb	r2, [r7, #13]
 8007f44:	4909      	ldr	r1, [pc, #36]	; (8007f6c <UARTEx_SetNbDataToProcess+0x94>)
 8007f46:	5c8a      	ldrb	r2, [r1, r2]
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f4c:	7b7a      	ldrb	r2, [r7, #13]
 8007f4e:	4908      	ldr	r1, [pc, #32]	; (8007f70 <UARTEx_SetNbDataToProcess+0x98>)
 8007f50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f52:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	0801356c 	.word	0x0801356c
 8007f70:	08013574 	.word	0x08013574

08007f74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f84:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007f88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b085      	sub	sp, #20
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007faa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007fae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	1d3b      	adds	r3, r7, #4
 8007fe2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008014:	b480      	push	{r7}
 8008016:	b09d      	sub	sp, #116	; 0x74
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	78db      	ldrb	r3, [r3, #3]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d81f      	bhi.n	8008086 <USB_ActivateEndpoint+0x72>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <USB_ActivateEndpoint+0x38>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	0800805d 	.word	0x0800805d
 8008050:	08008079 	.word	0x08008079
 8008054:	0800808f 	.word	0x0800808f
 8008058:	0800806b 	.word	0x0800806b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800805c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008068:	e012      	b.n	8008090 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800806a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800806e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008072:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008076:	e00b      	b.n	8008090 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008078:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800807c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008080:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008084:	e004      	b.n	8008090 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800808c:	e000      	b.n	8008090 <USB_ActivateEndpoint+0x7c>
      break;
 800808e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800809e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	b21b      	sxth	r3, r3
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ca:	b21a      	sxth	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	b21b      	sxth	r3, r3
 80080d2:	4313      	orrs	r3, r2
 80080d4:	b21b      	sxth	r3, r3
 80080d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	441a      	add	r2, r3
 80080e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	7b1b      	ldrb	r3, [r3, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f040 8178 	bne.w	80083f6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 8084 	beq.w	8008218 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800811a:	b29b      	uxth	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	4413      	add	r3, r2
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	00da      	lsls	r2, r3, #3
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	88db      	ldrh	r3, [r3, #6]
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	b29b      	uxth	r3, r3
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	827b      	strh	r3, [r7, #18]
 8008152:	8a7b      	ldrh	r3, [r7, #18]
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01b      	beq.n	8008194 <USB_ActivateEndpoint+0x180>
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008172:	823b      	strh	r3, [r7, #16]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	441a      	add	r2, r3
 800817e:	8a3b      	ldrh	r3, [r7, #16]
 8008180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008190:	b29b      	uxth	r3, r3
 8008192:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	78db      	ldrb	r3, [r3, #3]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d020      	beq.n	80081de <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b2:	81bb      	strh	r3, [r7, #12]
 80081b4:	89bb      	ldrh	r3, [r7, #12]
 80081b6:	f083 0320 	eor.w	r3, r3, #32
 80081ba:	81bb      	strh	r3, [r7, #12]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	441a      	add	r2, r3
 80081c6:	89bb      	ldrh	r3, [r7, #12]
 80081c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]
 80081dc:	e2d5      	b.n	800878a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f4:	81fb      	strh	r3, [r7, #14]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	441a      	add	r2, r3
 8008200:	89fb      	ldrh	r3, [r7, #14]
 8008202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	b29b      	uxth	r3, r3
 8008214:	8013      	strh	r3, [r2, #0]
 8008216:	e2b8      	b.n	800878a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	633b      	str	r3, [r7, #48]	; 0x30
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008222:	b29b      	uxth	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	4413      	add	r3, r2
 800822a:	633b      	str	r3, [r7, #48]	; 0x30
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	00da      	lsls	r2, r3, #3
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	4413      	add	r3, r2
 8008236:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800823a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	88db      	ldrh	r3, [r3, #6]
 8008240:	085b      	lsrs	r3, r3, #1
 8008242:	b29b      	uxth	r3, r3
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	b29a      	uxth	r2, r3
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	4413      	add	r3, r2
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	00da      	lsls	r2, r3, #3
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	4413      	add	r3, r2
 800826a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800827a:	b29a      	uxth	r2, r3
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b3e      	cmp	r3, #62	; 0x3e
 8008286:	d91d      	bls.n	80082c4 <USB_ActivateEndpoint+0x2b0>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f003 031f 	and.w	r3, r3, #31
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <USB_ActivateEndpoint+0x28e>
 800829c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800829e:	3b01      	subs	r3, #1
 80082a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	029b      	lsls	r3, r3, #10
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4313      	orrs	r3, r2
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082bc:	b29a      	uxth	r2, r3
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	801a      	strh	r2, [r3, #0]
 80082c2:	e026      	b.n	8008312 <USB_ActivateEndpoint+0x2fe>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <USB_ActivateEndpoint+0x2ce>
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082da:	b29a      	uxth	r2, r3
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e017      	b.n	8008312 <USB_ActivateEndpoint+0x2fe>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <USB_ActivateEndpoint+0x2e8>
 80082f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082f8:	3301      	adds	r3, #1
 80082fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29a      	uxth	r2, r3
 8008302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008304:	b29b      	uxth	r3, r3
 8008306:	029b      	lsls	r3, r3, #10
 8008308:	b29b      	uxth	r3, r3
 800830a:	4313      	orrs	r3, r2
 800830c:	b29a      	uxth	r2, r3
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01b      	beq.n	8008362 <USB_ActivateEndpoint+0x34e>
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	843b      	strh	r3, [r7, #32]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	441a      	add	r2, r3
 800834c:	8c3b      	ldrh	r3, [r7, #32]
 800834e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800835a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835e:	b29b      	uxth	r3, r3
 8008360:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d124      	bne.n	80083b4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008380:	83bb      	strh	r3, [r7, #28]
 8008382:	8bbb      	ldrh	r3, [r7, #28]
 8008384:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008388:	83bb      	strh	r3, [r7, #28]
 800838a:	8bbb      	ldrh	r3, [r7, #28]
 800838c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008390:	83bb      	strh	r3, [r7, #28]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	441a      	add	r2, r3
 800839c:	8bbb      	ldrh	r3, [r7, #28]
 800839e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	8013      	strh	r3, [r2, #0]
 80083b2:	e1ea      	b.n	800878a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ca:	83fb      	strh	r3, [r7, #30]
 80083cc:	8bfb      	ldrh	r3, [r7, #30]
 80083ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083d2:	83fb      	strh	r3, [r7, #30]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	441a      	add	r2, r3
 80083de:	8bfb      	ldrh	r3, [r7, #30]
 80083e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	8013      	strh	r3, [r2, #0]
 80083f4:	e1c9      	b.n	800878a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	78db      	ldrb	r3, [r3, #3]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d11e      	bne.n	800843c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008414:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	441a      	add	r2, r3
 8008422:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800842e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]
 800843a:	e01d      	b.n	8008478 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	441a      	add	r2, r3
 8008460:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008474:	b29b      	uxth	r3, r3
 8008476:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008488:	4413      	add	r3, r2
 800848a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	00da      	lsls	r2, r3, #3
 8008492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008494:	4413      	add	r3, r2
 8008496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800849a:	65bb      	str	r3, [r7, #88]	; 0x58
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	891b      	ldrh	r3, [r3, #8]
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084aa:	801a      	strh	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	657b      	str	r3, [r7, #84]	; 0x54
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084bc:	4413      	add	r3, r2
 80084be:	657b      	str	r3, [r7, #84]	; 0x54
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	00da      	lsls	r2, r3, #3
 80084c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c8:	4413      	add	r3, r2
 80084ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ce:	653b      	str	r3, [r7, #80]	; 0x50
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	895b      	ldrh	r3, [r3, #10]
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 8093 	bne.w	8008610 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80084fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80084fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01b      	beq.n	800853e <USB_ActivateEndpoint+0x52a>
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	441a      	add	r2, r3
 8008528:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800852a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800852e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853a:	b29b      	uxth	r3, r3
 800853c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800854c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800854e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d01b      	beq.n	800858e <USB_ActivateEndpoint+0x57a>
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	441a      	add	r2, r3
 8008578:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800857a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800858a:	b29b      	uxth	r3, r3
 800858c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80085a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80085ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	441a      	add	r2, r3
 80085c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860a:	b29b      	uxth	r3, r3
 800860c:	8013      	strh	r3, [r2, #0]
 800860e:	e0bc      	b.n	800878a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01d      	beq.n	8008668 <USB_ActivateEndpoint+0x654>
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008642:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	441a      	add	r2, r3
 8008650:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008664:	b29b      	uxth	r3, r3
 8008666:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800867c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01d      	beq.n	80086c0 <USB_ActivateEndpoint+0x6ac>
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80086ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086bc:	b29b      	uxth	r3, r3
 80086be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	78db      	ldrb	r3, [r3, #3]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d024      	beq.n	8008712 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80086e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80086e6:	f083 0320 	eor.w	r3, r3, #32
 80086ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	441a      	add	r2, r3
 80086f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80086fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870c:	b29b      	uxth	r3, r3
 800870e:	8013      	strh	r3, [r2, #0]
 8008710:	e01d      	b.n	800874e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	441a      	add	r2, r3
 8008736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800873a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874a:	b29b      	uxth	r3, r3
 800874c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008764:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	441a      	add	r2, r3
 8008772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800877e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008786:	b29b      	uxth	r3, r3
 8008788:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800878a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800878e:	4618      	mov	r0, r3
 8008790:	3774      	adds	r7, #116	; 0x74
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800879c:	b480      	push	{r7}
 800879e:	b08d      	sub	sp, #52	; 0x34
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	7b1b      	ldrb	r3, [r3, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f040 808e 	bne.w	80088cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d044      	beq.n	8008842 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	81bb      	strh	r3, [r7, #12]
 80087c6:	89bb      	ldrh	r3, [r7, #12]
 80087c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01b      	beq.n	8008808 <USB_DeactivateEndpoint+0x6c>
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e6:	817b      	strh	r3, [r7, #10]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	441a      	add	r2, r3
 80087f2:	897b      	ldrh	r3, [r7, #10]
 80087f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008800:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008804:	b29b      	uxth	r3, r3
 8008806:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	b29b      	uxth	r3, r3
 8008816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800881e:	813b      	strh	r3, [r7, #8]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	441a      	add	r2, r3
 800882a:	893b      	ldrh	r3, [r7, #8]
 800882c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883c:	b29b      	uxth	r3, r3
 800883e:	8013      	strh	r3, [r2, #0]
 8008840:	e192      	b.n	8008b68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	827b      	strh	r3, [r7, #18]
 8008850:	8a7b      	ldrh	r3, [r7, #18]
 8008852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01b      	beq.n	8008892 <USB_DeactivateEndpoint+0xf6>
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b29b      	uxth	r3, r3
 8008868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008870:	823b      	strh	r3, [r7, #16]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	441a      	add	r2, r3
 800887c:	8a3b      	ldrh	r3, [r7, #16]
 800887e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800888a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888e:	b29b      	uxth	r3, r3
 8008890:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a8:	81fb      	strh	r3, [r7, #14]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	441a      	add	r2, r3
 80088b4:	89fb      	ldrh	r3, [r7, #14]
 80088b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	8013      	strh	r3, [r2, #0]
 80088ca:	e14d      	b.n	8008b68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 80a5 	bne.w	8008a20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	843b      	strh	r3, [r7, #32]
 80088e4:	8c3b      	ldrh	r3, [r7, #32]
 80088e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01b      	beq.n	8008926 <USB_DeactivateEndpoint+0x18a>
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008904:	83fb      	strh	r3, [r7, #30]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	441a      	add	r2, r3
 8008910:	8bfb      	ldrh	r3, [r7, #30]
 8008912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800891a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800891e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008922:	b29b      	uxth	r3, r3
 8008924:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	83bb      	strh	r3, [r7, #28]
 8008934:	8bbb      	ldrh	r3, [r7, #28]
 8008936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01b      	beq.n	8008976 <USB_DeactivateEndpoint+0x1da>
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008954:	837b      	strh	r3, [r7, #26]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	441a      	add	r2, r3
 8008960:	8b7b      	ldrh	r3, [r7, #26]
 8008962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800896a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800896e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008972:	b29b      	uxth	r3, r3
 8008974:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898c:	833b      	strh	r3, [r7, #24]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	8b3b      	ldrh	r3, [r7, #24]
 800899a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800899e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c4:	82fb      	strh	r3, [r7, #22]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	441a      	add	r2, r3
 80089d0:	8afb      	ldrh	r3, [r7, #22]
 80089d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089fc:	82bb      	strh	r3, [r7, #20]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	441a      	add	r2, r3
 8008a08:	8abb      	ldrh	r3, [r7, #20]
 8008a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	8013      	strh	r3, [r2, #0]
 8008a1e:	e0a3      	b.n	8008b68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01b      	beq.n	8008a70 <USB_DeactivateEndpoint+0x2d4>
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01b      	beq.n	8008ac0 <USB_DeactivateEndpoint+0x324>
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	441a      	add	r2, r3
 8008b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b46:	847b      	strh	r3, [r7, #34]	; 0x22
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	441a      	add	r2, r3
 8008b52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3734      	adds	r7, #52	; 0x34
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b0c2      	sub	sp, #264	; 0x108
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b84:	6018      	str	r0, [r3, #0]
 8008b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	785b      	ldrb	r3, [r3, #1]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	f040 86b7 	bne.w	8009910 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	699a      	ldr	r2, [r3, #24]
 8008bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d908      	bls.n	8008bd0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008bce:	e007      	b.n	8008be0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	7b1b      	ldrb	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d13a      	bne.n	8008c66 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6959      	ldr	r1, [r3, #20]
 8008bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	88da      	ldrh	r2, [r3, #6]
 8008c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	f001 fc98 	bl	800a54c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	00da      	lsls	r2, r3, #3
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	4413      	add	r3, r2
 8008c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	801a      	strh	r2, [r3, #0]
 8008c62:	f000 be1f 	b.w	80098a4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	78db      	ldrb	r3, [r3, #3]
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	f040 8462 	bne.w	800953c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6a1a      	ldr	r2, [r3, #32]
 8008c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	f240 83df 	bls.w	8009454 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6a1a      	ldr	r2, [r3, #32]
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d02:	1ad2      	subs	r2, r2, r3
 8008d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 81c7 	beq.w	80090c6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
 8008d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d177      	bne.n	8008e44 <USB_EPStartXfer+0x2ce>
 8008d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	4413      	add	r3, r2
 8008d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	00da      	lsls	r2, r3, #3
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	4413      	add	r3, r2
 8008d8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	801a      	strh	r2, [r3, #0]
 8008da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da4:	2b3e      	cmp	r3, #62	; 0x3e
 8008da6:	d921      	bls.n	8008dec <USB_EPStartXfer+0x276>
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db6:	f003 031f 	and.w	r3, r3, #31
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <USB_EPStartXfer+0x252>
 8008dbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	029b      	lsls	r3, r3, #10
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	801a      	strh	r2, [r3, #0]
 8008dea:	e050      	b.n	8008e8e <USB_EPStartXfer+0x318>
 8008dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <USB_EPStartXfer+0x294>
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	e041      	b.n	8008e8e <USB_EPStartXfer+0x318>
 8008e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <USB_EPStartXfer+0x2b4>
 8008e20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e24:	3301      	adds	r3, #1
 8008e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	029b      	lsls	r3, r3, #10
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	e024      	b.n	8008e8e <USB_EPStartXfer+0x318>
 8008e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	785b      	ldrb	r3, [r3, #1]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d11c      	bne.n	8008e8e <USB_EPStartXfer+0x318>
 8008e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	461a      	mov	r2, r3
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	4413      	add	r3, r2
 8008e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	00da      	lsls	r2, r3, #3
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	895b      	ldrh	r3, [r3, #10]
 8008e9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6959      	ldr	r1, [r3, #20]
 8008eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008eb4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008eb8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ebc:	6800      	ldr	r0, [r0, #0]
 8008ebe:	f001 fb45 	bl	800a54c <USB_WritePMA>
            ep->xfer_buff += len;
 8008ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695a      	ldr	r2, [r3, #20]
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed2:	441a      	add	r2, r3
 8008ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6a1a      	ldr	r2, [r3, #32]
 8008eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d90f      	bls.n	8008f1c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6a1a      	ldr	r2, [r3, #32]
 8008f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0c:	1ad2      	subs	r2, r2, r3
 8008f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	621a      	str	r2, [r3, #32]
 8008f1a:	e00e      	b.n	8008f3a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2200      	movs	r2, #0
 8008f38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d177      	bne.n	800903a <USB_EPStartXfer+0x4c4>
 8008f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	461a      	mov	r2, r3
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]
 8008f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	00da      	lsls	r2, r3, #3
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	801a      	strh	r2, [r3, #0]
 8008f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f9c:	d921      	bls.n	8008fe2 <USB_EPStartXfer+0x46c>
 8008f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d104      	bne.n	8008fbe <USB_EPStartXfer+0x448>
 8008fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	029b      	lsls	r3, r3, #10
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	801a      	strh	r2, [r3, #0]
 8008fe0:	e056      	b.n	8009090 <USB_EPStartXfer+0x51a>
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10a      	bne.n	8009000 <USB_EPStartXfer+0x48a>
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	801a      	strh	r2, [r3, #0]
 8008ffe:	e047      	b.n	8009090 <USB_EPStartXfer+0x51a>
 8009000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009004:	085b      	lsrs	r3, r3, #1
 8009006:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800900a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <USB_EPStartXfer+0x4aa>
 8009016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800901a:	3301      	adds	r3, #1
 800901c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	b29a      	uxth	r2, r3
 8009026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800902a:	b29b      	uxth	r3, r3
 800902c:	029b      	lsls	r3, r3, #10
 800902e:	b29b      	uxth	r3, r3
 8009030:	4313      	orrs	r3, r2
 8009032:	b29a      	uxth	r2, r3
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	e02a      	b.n	8009090 <USB_EPStartXfer+0x51a>
 800903a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d122      	bne.n	8009090 <USB_EPStartXfer+0x51a>
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	623b      	str	r3, [r7, #32]
 8009056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009064:	b29b      	uxth	r3, r3
 8009066:	461a      	mov	r2, r3
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	4413      	add	r3, r2
 800906c:	623b      	str	r3, [r7, #32]
 800906e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	00da      	lsls	r2, r3, #3
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	4413      	add	r3, r2
 8009080:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908a:	b29a      	uxth	r2, r3
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	891b      	ldrh	r3, [r3, #8]
 800909c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6959      	ldr	r1, [r3, #20]
 80090ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80090ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	f001 fa44 	bl	800a54c <USB_WritePMA>
 80090c4:	e3ee      	b.n	80098a4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	785b      	ldrb	r3, [r3, #1]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d177      	bne.n	80091c6 <USB_EPStartXfer+0x650>
 80090d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	461a      	mov	r2, r3
 80090f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f6:	4413      	add	r3, r2
 80090f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80090fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	00da      	lsls	r2, r3, #3
 8009108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910a:	4413      	add	r3, r2
 800910c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009110:	647b      	str	r3, [r7, #68]	; 0x44
 8009112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800911c:	b29a      	uxth	r2, r3
 800911e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009120:	801a      	strh	r2, [r3, #0]
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009126:	2b3e      	cmp	r3, #62	; 0x3e
 8009128:	d921      	bls.n	800916e <USB_EPStartXfer+0x5f8>
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009138:	f003 031f 	and.w	r3, r3, #31
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <USB_EPStartXfer+0x5d4>
 8009140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009144:	3b01      	subs	r3, #1
 8009146:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800914a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	b29a      	uxth	r2, r3
 8009150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009154:	b29b      	uxth	r3, r3
 8009156:	029b      	lsls	r3, r3, #10
 8009158:	b29b      	uxth	r3, r3
 800915a:	4313      	orrs	r3, r2
 800915c:	b29b      	uxth	r3, r3
 800915e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009166:	b29a      	uxth	r2, r3
 8009168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916a:	801a      	strh	r2, [r3, #0]
 800916c:	e056      	b.n	800921c <USB_EPStartXfer+0x6a6>
 800916e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <USB_EPStartXfer+0x616>
 8009176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	b29b      	uxth	r3, r3
 800917c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009184:	b29a      	uxth	r2, r3
 8009186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	e047      	b.n	800921c <USB_EPStartXfer+0x6a6>
 800918c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <USB_EPStartXfer+0x636>
 80091a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091a6:	3301      	adds	r3, #1
 80091a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	029b      	lsls	r3, r3, #10
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4313      	orrs	r3, r2
 80091be:	b29a      	uxth	r2, r3
 80091c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	e02a      	b.n	800921c <USB_EPStartXfer+0x6a6>
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d122      	bne.n	800921c <USB_EPStartXfer+0x6a6>
 80091d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	653b      	str	r3, [r7, #80]	; 0x50
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f6:	4413      	add	r3, r2
 80091f8:	653b      	str	r3, [r7, #80]	; 0x50
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	00da      	lsls	r2, r3, #3
 8009208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800920a:	4413      	add	r3, r2
 800920c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009216:	b29a      	uxth	r2, r3
 8009218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800921c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	891b      	ldrh	r3, [r3, #8]
 8009228:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800922c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6959      	ldr	r1, [r3, #20]
 8009238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800923c:	b29b      	uxth	r3, r3
 800923e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009242:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009246:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	f001 f97e 	bl	800a54c <USB_WritePMA>
            ep->xfer_buff += len;
 8009250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695a      	ldr	r2, [r3, #20]
 800925c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009260:	441a      	add	r2, r3
 8009262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800926e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6a1a      	ldr	r2, [r3, #32]
 800927a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	429a      	cmp	r2, r3
 8009288:	d90f      	bls.n	80092aa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800928a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800928e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6a1a      	ldr	r2, [r3, #32]
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929a:	1ad2      	subs	r2, r2, r3
 800929c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	621a      	str	r2, [r3, #32]
 80092a8:	e00e      	b.n	80092c8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80092aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80092ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2200      	movs	r2, #0
 80092c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	643b      	str	r3, [r7, #64]	; 0x40
 80092d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d177      	bne.n	80093d4 <USB_EPStartXfer+0x85e>
 80092e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092fe:	b29b      	uxth	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	4413      	add	r3, r2
 8009306:	63bb      	str	r3, [r7, #56]	; 0x38
 8009308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	00da      	lsls	r2, r3, #3
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	4413      	add	r3, r2
 800931a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
 8009320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800932a:	b29a      	uxth	r2, r3
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	801a      	strh	r2, [r3, #0]
 8009330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009334:	2b3e      	cmp	r3, #62	; 0x3e
 8009336:	d921      	bls.n	800937c <USB_EPStartXfer+0x806>
 8009338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933c:	095b      	lsrs	r3, r3, #5
 800933e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009346:	f003 031f 	and.w	r3, r3, #31
 800934a:	2b00      	cmp	r3, #0
 800934c:	d104      	bne.n	8009358 <USB_EPStartXfer+0x7e2>
 800934e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009352:	3b01      	subs	r3, #1
 8009354:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b29a      	uxth	r2, r3
 800935e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009362:	b29b      	uxth	r3, r3
 8009364:	029b      	lsls	r3, r3, #10
 8009366:	b29b      	uxth	r3, r3
 8009368:	4313      	orrs	r3, r2
 800936a:	b29b      	uxth	r3, r3
 800936c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009374:	b29a      	uxth	r2, r3
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009378:	801a      	strh	r2, [r3, #0]
 800937a:	e050      	b.n	800941e <USB_EPStartXfer+0x8a8>
 800937c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <USB_EPStartXfer+0x824>
 8009384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800938e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009392:	b29a      	uxth	r2, r3
 8009394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009396:	801a      	strh	r2, [r3, #0]
 8009398:	e041      	b.n	800941e <USB_EPStartXfer+0x8a8>
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939e:	085b      	lsrs	r3, r3, #1
 80093a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <USB_EPStartXfer+0x844>
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b4:	3301      	adds	r3, #1
 80093b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29a      	uxth	r2, r3
 80093c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	029b      	lsls	r3, r3, #10
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	4313      	orrs	r3, r2
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	e024      	b.n	800941e <USB_EPStartXfer+0x8a8>
 80093d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d11c      	bne.n	800941e <USB_EPStartXfer+0x8a8>
 80093e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f8:	4413      	add	r3, r2
 80093fa:	643b      	str	r3, [r7, #64]	; 0x40
 80093fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	00da      	lsls	r2, r3, #3
 800940a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940c:	4413      	add	r3, r2
 800940e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009418:	b29a      	uxth	r2, r3
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800941e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	895b      	ldrh	r3, [r3, #10]
 800942a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800942e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6959      	ldr	r1, [r3, #20]
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943e:	b29b      	uxth	r3, r3
 8009440:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009444:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009448:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800944c:	6800      	ldr	r0, [r0, #0]
 800944e:	f001 f87d 	bl	800a54c <USB_WritePMA>
 8009452:	e227      	b.n	80098a4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29b      	uxth	r3, r3
 8009482:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800948e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	441a      	add	r2, r3
 80094a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80094ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094bc:	b29b      	uxth	r3, r3
 80094be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e0:	4413      	add	r3, r2
 80094e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	00da      	lsls	r2, r3, #3
 80094f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094f4:	4413      	add	r3, r2
 80094f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80094fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009500:	b29a      	uxth	r2, r3
 8009502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009504:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	891b      	ldrh	r3, [r3, #8]
 8009512:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6959      	ldr	r1, [r3, #20]
 8009522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009526:	b29b      	uxth	r3, r3
 8009528:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800952c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009530:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009534:	6800      	ldr	r0, [r0, #0]
 8009536:	f001 f809 	bl	800a54c <USB_WritePMA>
 800953a:	e1b3      	b.n	80098a4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800953c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6a1a      	ldr	r2, [r3, #32]
 8009548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954c:	1ad2      	subs	r2, r2, r3
 800954e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800955a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 80c6 	beq.w	800970e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	673b      	str	r3, [r7, #112]	; 0x70
 800958e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d177      	bne.n	800968e <USB_EPStartXfer+0xb18>
 800959e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80095aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095be:	4413      	add	r3, r2
 80095c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80095c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	00da      	lsls	r2, r3, #3
 80095d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095d2:	4413      	add	r3, r2
 80095d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095d8:	667b      	str	r3, [r7, #100]	; 0x64
 80095da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ee:	2b3e      	cmp	r3, #62	; 0x3e
 80095f0:	d921      	bls.n	8009636 <USB_EPStartXfer+0xac0>
 80095f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f6:	095b      	lsrs	r3, r3, #5
 80095f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009600:	f003 031f 	and.w	r3, r3, #31
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <USB_EPStartXfer+0xa9c>
 8009608:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800960c:	3b01      	subs	r3, #1
 800960e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	b29a      	uxth	r2, r3
 8009618:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800961c:	b29b      	uxth	r3, r3
 800961e:	029b      	lsls	r3, r3, #10
 8009620:	b29b      	uxth	r3, r3
 8009622:	4313      	orrs	r3, r2
 8009624:	b29b      	uxth	r3, r3
 8009626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800962e:	b29a      	uxth	r2, r3
 8009630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009632:	801a      	strh	r2, [r3, #0]
 8009634:	e050      	b.n	80096d8 <USB_EPStartXfer+0xb62>
 8009636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <USB_EPStartXfer+0xade>
 800963e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800964c:	b29a      	uxth	r2, r3
 800964e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009650:	801a      	strh	r2, [r3, #0]
 8009652:	e041      	b.n	80096d8 <USB_EPStartXfer+0xb62>
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d004      	beq.n	8009674 <USB_EPStartXfer+0xafe>
 800966a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800966e:	3301      	adds	r3, #1
 8009670:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29a      	uxth	r2, r3
 800967a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800967e:	b29b      	uxth	r3, r3
 8009680:	029b      	lsls	r3, r3, #10
 8009682:	b29b      	uxth	r3, r3
 8009684:	4313      	orrs	r3, r2
 8009686:	b29a      	uxth	r2, r3
 8009688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800968a:	801a      	strh	r2, [r3, #0]
 800968c:	e024      	b.n	80096d8 <USB_EPStartXfer+0xb62>
 800968e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d11c      	bne.n	80096d8 <USB_EPStartXfer+0xb62>
 800969e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	461a      	mov	r2, r3
 80096b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096b2:	4413      	add	r3, r2
 80096b4:	673b      	str	r3, [r7, #112]	; 0x70
 80096b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	00da      	lsls	r2, r3, #3
 80096c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096c6:	4413      	add	r3, r2
 80096c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80096d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	895b      	ldrh	r3, [r3, #10]
 80096e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6959      	ldr	r1, [r3, #20]
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009702:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009706:	6800      	ldr	r0, [r0, #0]
 8009708:	f000 ff20 	bl	800a54c <USB_WritePMA>
 800970c:	e0ca      	b.n	80098a4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800970e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d177      	bne.n	800980e <USB_EPStartXfer+0xc98>
 800971e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	67fb      	str	r3, [r7, #124]	; 0x7c
 800972a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009738:	b29b      	uxth	r3, r3
 800973a:	461a      	mov	r2, r3
 800973c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800973e:	4413      	add	r3, r2
 8009740:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	00da      	lsls	r2, r3, #3
 8009750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009752:	4413      	add	r3, r2
 8009754:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009758:	67bb      	str	r3, [r7, #120]	; 0x78
 800975a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009764:	b29a      	uxth	r2, r3
 8009766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976e:	2b3e      	cmp	r3, #62	; 0x3e
 8009770:	d921      	bls.n	80097b6 <USB_EPStartXfer+0xc40>
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009776:	095b      	lsrs	r3, r3, #5
 8009778:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800977c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009780:	f003 031f 	and.w	r3, r3, #31
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <USB_EPStartXfer+0xc1c>
 8009788:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800978c:	3b01      	subs	r3, #1
 800978e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29a      	uxth	r2, r3
 8009798:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800979c:	b29b      	uxth	r3, r3
 800979e:	029b      	lsls	r3, r3, #10
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	4313      	orrs	r3, r2
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097b2:	801a      	strh	r2, [r3, #0]
 80097b4:	e05c      	b.n	8009870 <USB_EPStartXfer+0xcfa>
 80097b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <USB_EPStartXfer+0xc5e>
 80097be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	e04d      	b.n	8009870 <USB_EPStartXfer+0xcfa>
 80097d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <USB_EPStartXfer+0xc7e>
 80097ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097ee:	3301      	adds	r3, #1
 80097f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097fe:	b29b      	uxth	r3, r3
 8009800:	029b      	lsls	r3, r3, #10
 8009802:	b29b      	uxth	r3, r3
 8009804:	4313      	orrs	r3, r2
 8009806:	b29a      	uxth	r2, r3
 8009808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800980a:	801a      	strh	r2, [r3, #0]
 800980c:	e030      	b.n	8009870 <USB_EPStartXfer+0xcfa>
 800980e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d128      	bne.n	8009870 <USB_EPStartXfer+0xcfa>
 800981e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800982c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009842:	4413      	add	r3, r2
 8009844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	00da      	lsls	r2, r3, #3
 8009856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800985a:	4413      	add	r3, r2
 800985c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009868:	b29a      	uxth	r2, r3
 800986a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800986e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	891b      	ldrh	r3, [r3, #8]
 800987c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6959      	ldr	r1, [r3, #20]
 800988c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009890:	b29b      	uxth	r3, r3
 8009892:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009896:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800989a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800989e:	6800      	ldr	r0, [r0, #0]
 80098a0:	f000 fe54 	bl	800a54c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80098a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ca:	817b      	strh	r3, [r7, #10]
 80098cc:	897b      	ldrh	r3, [r7, #10]
 80098ce:	f083 0310 	eor.w	r3, r3, #16
 80098d2:	817b      	strh	r3, [r7, #10]
 80098d4:	897b      	ldrh	r3, [r7, #10]
 80098d6:	f083 0320 	eor.w	r3, r3, #32
 80098da:	817b      	strh	r3, [r7, #10]
 80098dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	441a      	add	r2, r3
 80098f6:	897b      	ldrh	r3, [r7, #10]
 80098f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009908:	b29b      	uxth	r3, r3
 800990a:	8013      	strh	r3, [r2, #0]
 800990c:	f000 bcde 	b.w	800a2cc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	7b1b      	ldrb	r3, [r3, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	f040 80bb 	bne.w	8009a98 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	699a      	ldr	r2, [r3, #24]
 800992e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	429a      	cmp	r2, r3
 800993c:	d917      	bls.n	800996e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800993e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800994e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	699a      	ldr	r2, [r3, #24]
 800995a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	619a      	str	r2, [r3, #24]
 800996c:	e00e      	b.n	800998c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800996e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800997e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2200      	movs	r2, #0
 800998a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800998c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800999a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	461a      	mov	r2, r3
 80099ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099b0:	4413      	add	r3, r2
 80099b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	00da      	lsls	r2, r3, #3
 80099c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099c8:	4413      	add	r3, r2
 80099ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099de:	b29a      	uxth	r2, r3
 80099e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ea:	2b3e      	cmp	r3, #62	; 0x3e
 80099ec:	d924      	bls.n	8009a38 <USB_EPStartXfer+0xec2>
 80099ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f2:	095b      	lsrs	r3, r3, #5
 80099f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d104      	bne.n	8009a0e <USB_EPStartXfer+0xe98>
 8009a04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	029b      	lsls	r3, r3, #10
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	4313      	orrs	r3, r2
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a32:	801a      	strh	r2, [r3, #0]
 8009a34:	f000 bc10 	b.w	800a258 <USB_EPStartXfer+0x16e2>
 8009a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10c      	bne.n	8009a5a <USB_EPStartXfer+0xee4>
 8009a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a56:	801a      	strh	r2, [r3, #0]
 8009a58:	e3fe      	b.n	800a258 <USB_EPStartXfer+0x16e2>
 8009a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5e:	085b      	lsrs	r3, r3, #1
 8009a60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d004      	beq.n	8009a7a <USB_EPStartXfer+0xf04>
 8009a70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a74:	3301      	adds	r3, #1
 8009a76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	029b      	lsls	r3, r3, #10
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a94:	801a      	strh	r2, [r3, #0]
 8009a96:	e3df      	b.n	800a258 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	78db      	ldrb	r3, [r3, #3]
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	f040 8218 	bne.w	8009eda <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f040 809d 	bne.w	8009bf6 <USB_EPStartXfer+0x1080>
 8009abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	00da      	lsls	r2, r3, #3
 8009af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009af8:	4413      	add	r3, r2
 8009afa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b14:	801a      	strh	r2, [r3, #0]
 8009b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b3e      	cmp	r3, #62	; 0x3e
 8009b24:	d92b      	bls.n	8009b7e <USB_EPStartXfer+0x1008>
 8009b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	f003 031f 	and.w	r3, r3, #31
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <USB_EPStartXfer+0xfe0>
 8009b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b50:	3b01      	subs	r3, #1
 8009b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	029b      	lsls	r3, r3, #10
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	e070      	b.n	8009c60 <USB_EPStartXfer+0x10ea>
 8009b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10c      	bne.n	8009ba8 <USB_EPStartXfer+0x1032>
 8009b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ba4:	801a      	strh	r2, [r3, #0]
 8009ba6:	e05b      	b.n	8009c60 <USB_EPStartXfer+0x10ea>
 8009ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	085b      	lsrs	r3, r3, #1
 8009bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <USB_EPStartXfer+0x1062>
 8009bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	029b      	lsls	r3, r3, #10
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bf2:	801a      	strh	r2, [r3, #0]
 8009bf4:	e034      	b.n	8009c60 <USB_EPStartXfer+0x10ea>
 8009bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d12c      	bne.n	8009c60 <USB_EPStartXfer+0x10ea>
 8009c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	00da      	lsls	r2, r3, #3
 8009c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c42:	4413      	add	r3, r2
 8009c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f040 809d 	bne.w	8009dba <USB_EPStartXfer+0x1244>
 8009c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	00da      	lsls	r2, r3, #3
 8009cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cd8:	801a      	strh	r2, [r3, #0]
 8009cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ce8:	d92b      	bls.n	8009d42 <USB_EPStartXfer+0x11cc>
 8009cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	f003 031f 	and.w	r3, r3, #31
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <USB_EPStartXfer+0x11a4>
 8009d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d14:	3b01      	subs	r3, #1
 8009d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	029b      	lsls	r3, r3, #10
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d3e:	801a      	strh	r2, [r3, #0]
 8009d40:	e069      	b.n	8009e16 <USB_EPStartXfer+0x12a0>
 8009d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10c      	bne.n	8009d6c <USB_EPStartXfer+0x11f6>
 8009d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d68:	801a      	strh	r2, [r3, #0]
 8009d6a:	e054      	b.n	8009e16 <USB_EPStartXfer+0x12a0>
 8009d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	085b      	lsrs	r3, r3, #1
 8009d7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d004      	beq.n	8009d9c <USB_EPStartXfer+0x1226>
 8009d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d96:	3301      	adds	r3, #1
 8009d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	029b      	lsls	r3, r3, #10
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	4313      	orrs	r3, r2
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009db6:	801a      	strh	r2, [r3, #0]
 8009db8:	e02d      	b.n	8009e16 <USB_EPStartXfer+0x12a0>
 8009dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d125      	bne.n	8009e16 <USB_EPStartXfer+0x12a0>
 8009dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009de0:	4413      	add	r3, r2
 8009de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	00da      	lsls	r2, r3, #3
 8009df4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009df8:	4413      	add	r3, r2
 8009dfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e14:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 8218 	beq.w	800a258 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d005      	beq.n	8009e60 <USB_EPStartXfer+0x12ea>
 8009e54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10d      	bne.n	8009e7c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f040 81f5 	bne.w	800a258 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f040 81ee 	bne.w	800a258 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	441a      	add	r2, r3
 8009ec0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ed0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	8013      	strh	r3, [r2, #0]
 8009ed8:	e1be      	b.n	800a258 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	78db      	ldrb	r3, [r3, #3]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	f040 81b4 	bne.w	800a254 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d917      	bls.n	8009f38 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	619a      	str	r2, [r3, #24]
 8009f36:	e00e      	b.n	8009f56 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2200      	movs	r2, #0
 8009f54:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	785b      	ldrb	r3, [r3, #1]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f040 8085 	bne.w	800a072 <USB_EPStartXfer+0x14fc>
 8009f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	00da      	lsls	r2, r3, #3
 8009fa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009fc8:	d923      	bls.n	800a012 <USB_EPStartXfer+0x149c>
 8009fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fce:	095b      	lsrs	r3, r3, #5
 8009fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd8:	f003 031f 	and.w	r3, r3, #31
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d104      	bne.n	8009fea <USB_EPStartXfer+0x1474>
 8009fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	029b      	lsls	r3, r3, #10
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a008:	b29a      	uxth	r2, r3
 800a00a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a00e:	801a      	strh	r2, [r3, #0]
 800a010:	e060      	b.n	800a0d4 <USB_EPStartXfer+0x155e>
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10c      	bne.n	800a034 <USB_EPStartXfer+0x14be>
 800a01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a030:	801a      	strh	r2, [r3, #0]
 800a032:	e04f      	b.n	800a0d4 <USB_EPStartXfer+0x155e>
 800a034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a038:	085b      	lsrs	r3, r3, #1
 800a03a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <USB_EPStartXfer+0x14de>
 800a04a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a04e:	3301      	adds	r3, #1
 800a050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a054:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a060:	b29b      	uxth	r3, r3
 800a062:	029b      	lsls	r3, r3, #10
 800a064:	b29b      	uxth	r3, r3
 800a066:	4313      	orrs	r3, r2
 800a068:	b29a      	uxth	r2, r3
 800a06a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a06e:	801a      	strh	r2, [r3, #0]
 800a070:	e030      	b.n	800a0d4 <USB_EPStartXfer+0x155e>
 800a072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d128      	bne.n	800a0d4 <USB_EPStartXfer+0x155e>
 800a082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a0ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	00da      	lsls	r2, r3, #3
 800a0ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0be:	4413      	add	r3, r2
 800a0c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a0d2:	801a      	strh	r2, [r3, #0]
 800a0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	785b      	ldrb	r3, [r3, #1]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f040 8085 	bne.w	800a1fe <USB_EPStartXfer+0x1688>
 800a0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a110:	b29b      	uxth	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a118:	4413      	add	r3, r2
 800a11a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	00da      	lsls	r2, r3, #3
 800a12c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a130:	4413      	add	r3, r2
 800a132:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a13a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a146:	b29a      	uxth	r2, r3
 800a148:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a152:	2b3e      	cmp	r3, #62	; 0x3e
 800a154:	d923      	bls.n	800a19e <USB_EPStartXfer+0x1628>
 800a156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a164:	f003 031f 	and.w	r3, r3, #31
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d104      	bne.n	800a176 <USB_EPStartXfer+0x1600>
 800a16c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a170:	3b01      	subs	r3, #1
 800a172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a176:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a182:	b29b      	uxth	r3, r3
 800a184:	029b      	lsls	r3, r3, #10
 800a186:	b29b      	uxth	r3, r3
 800a188:	4313      	orrs	r3, r2
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a194:	b29a      	uxth	r2, r3
 800a196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a19a:	801a      	strh	r2, [r3, #0]
 800a19c:	e05c      	b.n	800a258 <USB_EPStartXfer+0x16e2>
 800a19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10c      	bne.n	800a1c0 <USB_EPStartXfer+0x164a>
 800a1a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1bc:	801a      	strh	r2, [r3, #0]
 800a1be:	e04b      	b.n	800a258 <USB_EPStartXfer+0x16e2>
 800a1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c4:	085b      	lsrs	r3, r3, #1
 800a1c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d004      	beq.n	800a1e0 <USB_EPStartXfer+0x166a>
 800a1d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1da:	3301      	adds	r3, #1
 800a1dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	029b      	lsls	r3, r3, #10
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1fa:	801a      	strh	r2, [r3, #0]
 800a1fc:	e02c      	b.n	800a258 <USB_EPStartXfer+0x16e2>
 800a1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	785b      	ldrb	r3, [r3, #1]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d124      	bne.n	800a258 <USB_EPStartXfer+0x16e2>
 800a20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	461a      	mov	r2, r3
 800a220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a224:	4413      	add	r3, r2
 800a226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	00da      	lsls	r2, r3, #3
 800a238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a23c:	4413      	add	r3, r2
 800a23e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a250:	801a      	strh	r2, [r3, #0]
 800a252:	e001      	b.n	800a258 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e03a      	b.n	800a2ce <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	b29b      	uxth	r3, r3
 800a276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a282:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a286:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a28a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a28e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a292:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a296:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	441a      	add	r2, r3
 800a2b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d020      	beq.n	800a32c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a300:	81bb      	strh	r3, [r7, #12]
 800a302:	89bb      	ldrh	r3, [r7, #12]
 800a304:	f083 0310 	eor.w	r3, r3, #16
 800a308:	81bb      	strh	r3, [r7, #12]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	441a      	add	r2, r3
 800a314:	89bb      	ldrh	r3, [r7, #12]
 800a316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a31a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a31e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a326:	b29b      	uxth	r3, r3
 800a328:	8013      	strh	r3, [r2, #0]
 800a32a:	e01f      	b.n	800a36c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a342:	81fb      	strh	r3, [r7, #14]
 800a344:	89fb      	ldrh	r3, [r7, #14]
 800a346:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a34a:	81fb      	strh	r3, [r7, #14]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	441a      	add	r2, r3
 800a356:	89fb      	ldrh	r3, [r7, #14]
 800a358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a35c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a368:	b29b      	uxth	r3, r3
 800a36a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b087      	sub	sp, #28
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	7b1b      	ldrb	r3, [r3, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f040 809d 	bne.w	800a4c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d04c      	beq.n	800a430 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	823b      	strh	r3, [r7, #16]
 800a3a4:	8a3b      	ldrh	r3, [r7, #16]
 800a3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d01b      	beq.n	800a3e6 <USB_EPClearStall+0x6c>
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c4:	81fb      	strh	r3, [r7, #14]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	441a      	add	r2, r3
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	78db      	ldrb	r3, [r3, #3]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d06c      	beq.n	800a4c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a404:	81bb      	strh	r3, [r7, #12]
 800a406:	89bb      	ldrh	r3, [r7, #12]
 800a408:	f083 0320 	eor.w	r3, r3, #32
 800a40c:	81bb      	strh	r3, [r7, #12]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	441a      	add	r2, r3
 800a418:	89bb      	ldrh	r3, [r7, #12]
 800a41a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a41e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	8013      	strh	r3, [r2, #0]
 800a42e:	e04b      	b.n	800a4c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	82fb      	strh	r3, [r7, #22]
 800a43e:	8afb      	ldrh	r3, [r7, #22]
 800a440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d01b      	beq.n	800a480 <USB_EPClearStall+0x106>
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29b      	uxth	r3, r3
 800a456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45e:	82bb      	strh	r3, [r7, #20]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	441a      	add	r2, r3
 800a46a:	8abb      	ldrh	r3, [r7, #20]
 800a46c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a496:	827b      	strh	r3, [r7, #18]
 800a498:	8a7b      	ldrh	r3, [r7, #18]
 800a49a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a49e:	827b      	strh	r3, [r7, #18]
 800a4a0:	8a7b      	ldrh	r3, [r7, #18]
 800a4a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4a6:	827b      	strh	r3, [r7, #18]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	441a      	add	r2, r3
 800a4b2:	8a7b      	ldrh	r3, [r7, #18]
 800a4b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2280      	movs	r2, #128	; 0x80
 800a4ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a516:	b29a      	uxth	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a53e:	68fb      	ldr	r3, [r7, #12]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b08b      	sub	sp, #44	; 0x2c
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4611      	mov	r1, r2
 800a558:	461a      	mov	r2, r3
 800a55a:	460b      	mov	r3, r1
 800a55c:	80fb      	strh	r3, [r7, #6]
 800a55e:	4613      	mov	r3, r2
 800a560:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a562:	88bb      	ldrh	r3, [r7, #4]
 800a564:	3301      	adds	r3, #1
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a572:	88fa      	ldrh	r2, [r7, #6]
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a57c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
 800a582:	e01b      	b.n	800a5bc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3301      	adds	r3, #1
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	b21a      	sxth	r2, r3
 800a594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a598:	4313      	orrs	r3, r2
 800a59a:	b21b      	sxth	r3, r3
 800a59c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	8a7a      	ldrh	r2, [r7, #18]
 800a5a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	3302      	adds	r3, #2
 800a5a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1e0      	bne.n	800a584 <USB_WritePMA+0x38>
  }
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	372c      	adds	r7, #44	; 0x2c
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b08b      	sub	sp, #44	; 0x2c
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	4611      	mov	r1, r2
 800a5dc:	461a      	mov	r2, r3
 800a5de:	460b      	mov	r3, r1
 800a5e0:	80fb      	strh	r3, [r7, #6]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a5e6:	88bb      	ldrh	r3, [r7, #4]
 800a5e8:	085b      	lsrs	r3, r3, #1
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5f6:	88fa      	ldrh	r2, [r7, #6]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a600:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
 800a606:	e018      	b.n	800a63a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	3302      	adds	r3, #2
 800a614:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	3301      	adds	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	0a1b      	lsrs	r3, r3, #8
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	3301      	adds	r3, #1
 800a632:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	3b01      	subs	r3, #1
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e3      	bne.n	800a608 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a640:	88bb      	ldrh	r3, [r7, #4]
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	b29b      	uxth	r3, r3
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d007      	beq.n	800a65c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	b29b      	uxth	r3, r3
 800a652:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	b2da      	uxtb	r2, r3
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	701a      	strb	r2, [r3, #0]
  }
}
 800a65c:	bf00      	nop
 800a65e:	372c      	adds	r7, #44	; 0x2c
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a674:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a678:	f005 fe00 	bl	801027c <USBD_static_malloc>
 800a67c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d105      	bne.n	800a690 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a68c:	2302      	movs	r3, #2
 800a68e:	e066      	b.n	800a75e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	7c1b      	ldrb	r3, [r3, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d119      	bne.n	800a6d4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	2181      	movs	r1, #129	; 0x81
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f005 fc8e 	bl	800ffca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f005 fc84 	bl	800ffca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2210      	movs	r2, #16
 800a6ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a6d2:	e016      	b.n	800a702 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6d4:	2340      	movs	r3, #64	; 0x40
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	2181      	movs	r1, #129	; 0x81
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f005 fc75 	bl	800ffca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6e6:	2340      	movs	r3, #64	; 0x40
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f005 fc6c 	bl	800ffca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2210      	movs	r2, #16
 800a6fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a702:	2308      	movs	r3, #8
 800a704:	2203      	movs	r2, #3
 800a706:	2182      	movs	r1, #130	; 0x82
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f005 fc5e 	bl	800ffca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	7c1b      	ldrb	r3, [r3, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d109      	bne.n	800a74c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a73e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a742:	2101      	movs	r1, #1
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f005 fd2f 	bl	80101a8 <USBD_LL_PrepareReceive>
 800a74a:	e007      	b.n	800a75c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	2101      	movs	r1, #1
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f005 fd26 	bl	80101a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a772:	2181      	movs	r1, #129	; 0x81
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f005 fc4e 	bl	8010016 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a780:	2101      	movs	r1, #1
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f005 fc47 	bl	8010016 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a790:	2182      	movs	r1, #130	; 0x82
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f005 fc3f 	bl	8010016 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00e      	beq.n	800a7d0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f005 fd68 	bl	8010298 <USBD_static_free>
    pdev->pClassData = NULL;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a800:	2303      	movs	r3, #3
 800a802:	e0af      	b.n	800a964 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d03f      	beq.n	800a890 <USBD_CDC_Setup+0xb4>
 800a810:	2b20      	cmp	r3, #32
 800a812:	f040 809f 	bne.w	800a954 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	88db      	ldrh	r3, [r3, #6]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d02e      	beq.n	800a87c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	b25b      	sxtb	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	da16      	bge.n	800a856 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a834:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	88d2      	ldrh	r2, [r2, #6]
 800a83a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	88db      	ldrh	r3, [r3, #6]
 800a840:	2b07      	cmp	r3, #7
 800a842:	bf28      	it	cs
 800a844:	2307      	movcs	r3, #7
 800a846:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	89fa      	ldrh	r2, [r7, #14]
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f001 facf 	bl	800bdf2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a854:	e085      	b.n	800a962 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	785a      	ldrb	r2, [r3, #1]
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	88db      	ldrh	r3, [r3, #6]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a86c:	6939      	ldr	r1, [r7, #16]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	88db      	ldrh	r3, [r3, #6]
 800a872:	461a      	mov	r2, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f001 fae8 	bl	800be4a <USBD_CtlPrepareRx>
      break;
 800a87a:	e072      	b.n	800a962 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	7850      	ldrb	r0, [r2, #1]
 800a888:	2200      	movs	r2, #0
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	4798      	blx	r3
      break;
 800a88e:	e068      	b.n	800a962 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	785b      	ldrb	r3, [r3, #1]
 800a894:	2b0b      	cmp	r3, #11
 800a896:	d852      	bhi.n	800a93e <USBD_CDC_Setup+0x162>
 800a898:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <USBD_CDC_Setup+0xc4>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a8d1 	.word	0x0800a8d1
 800a8a4:	0800a94d 	.word	0x0800a94d
 800a8a8:	0800a93f 	.word	0x0800a93f
 800a8ac:	0800a93f 	.word	0x0800a93f
 800a8b0:	0800a93f 	.word	0x0800a93f
 800a8b4:	0800a93f 	.word	0x0800a93f
 800a8b8:	0800a93f 	.word	0x0800a93f
 800a8bc:	0800a93f 	.word	0x0800a93f
 800a8c0:	0800a93f 	.word	0x0800a93f
 800a8c4:	0800a93f 	.word	0x0800a93f
 800a8c8:	0800a8fb 	.word	0x0800a8fb
 800a8cc:	0800a925 	.word	0x0800a925
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d107      	bne.n	800a8ec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a8dc:	f107 030a 	add.w	r3, r7, #10
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 fa84 	bl	800bdf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8ea:	e032      	b.n	800a952 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f001 fa0e 	bl	800bd10 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	75fb      	strb	r3, [r7, #23]
          break;
 800a8f8:	e02b      	b.n	800a952 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b03      	cmp	r3, #3
 800a904:	d107      	bne.n	800a916 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a906:	f107 030d 	add.w	r3, r7, #13
 800a90a:	2201      	movs	r2, #1
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 fa6f 	bl	800bdf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a914:	e01d      	b.n	800a952 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 f9f9 	bl	800bd10 <USBD_CtlError>
            ret = USBD_FAIL;
 800a91e:	2303      	movs	r3, #3
 800a920:	75fb      	strb	r3, [r7, #23]
          break;
 800a922:	e016      	b.n	800a952 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	d00f      	beq.n	800a950 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f001 f9ec 	bl	800bd10 <USBD_CtlError>
            ret = USBD_FAIL;
 800a938:	2303      	movs	r3, #3
 800a93a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a93c:	e008      	b.n	800a950 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 f9e5 	bl	800bd10 <USBD_CtlError>
          ret = USBD_FAIL;
 800a946:	2303      	movs	r3, #3
 800a948:	75fb      	strb	r3, [r7, #23]
          break;
 800a94a:	e002      	b.n	800a952 <USBD_CDC_Setup+0x176>
          break;
 800a94c:	bf00      	nop
 800a94e:	e008      	b.n	800a962 <USBD_CDC_Setup+0x186>
          break;
 800a950:	bf00      	nop
      }
      break;
 800a952:	e006      	b.n	800a962 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 f9da 	bl	800bd10 <USBD_CtlError>
      ret = USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	75fb      	strb	r3, [r7, #23]
      break;
 800a960:	bf00      	nop
  }

  return (uint8_t)ret;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a97e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e04f      	b.n	800aa2e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a994:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a996:	78fa      	ldrb	r2, [r7, #3]
 800a998:	6879      	ldr	r1, [r7, #4]
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	440b      	add	r3, r1
 800a9a4:	3318      	adds	r3, #24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d029      	beq.n	800aa00 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a9ac:	78fa      	ldrb	r2, [r7, #3]
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	440b      	add	r3, r1
 800a9ba:	3318      	adds	r3, #24
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	78f9      	ldrb	r1, [r7, #3]
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	440b      	add	r3, r1
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	4403      	add	r3, r0
 800a9cc:	3320      	adds	r3, #32
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9d4:	fb01 f303 	mul.w	r3, r1, r3
 800a9d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d110      	bne.n	800aa00 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	440b      	add	r3, r1
 800a9ec:	3318      	adds	r3, #24
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9f2:	78f9      	ldrb	r1, [r7, #3]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f005 fbb4 	bl	8010166 <USBD_LL_Transmit>
 800a9fe:	e015      	b.n	800aa2c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e015      	b.n	800aa84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f005 fbc4 	bl	80101ea <USBD_LL_GetRxDataSize>
 800aa62:	4602      	mov	r2, r0
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e01b      	b.n	800aade <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d015      	beq.n	800aadc <USBD_CDC_EP0_RxReady+0x50>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aab6:	2bff      	cmp	r3, #255	; 0xff
 800aab8:	d010      	beq.n	800aadc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800aac8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aad0:	b292      	uxth	r2, r2
 800aad2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	22ff      	movs	r2, #255	; 0xff
 800aad8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2243      	movs	r2, #67	; 0x43
 800aaf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800aaf6:	4b03      	ldr	r3, [pc, #12]	; (800ab04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	20000094 	.word	0x20000094

0800ab08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2243      	movs	r2, #67	; 0x43
 800ab14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab16:	4b03      	ldr	r3, [pc, #12]	; (800ab24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	20000050 	.word	0x20000050

0800ab28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2243      	movs	r2, #67	; 0x43
 800ab34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ab36:	4b03      	ldr	r3, [pc, #12]	; (800ab44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	200000d8 	.word	0x200000d8

0800ab48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	220a      	movs	r2, #10
 800ab54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab56:	4b03      	ldr	r3, [pc, #12]	; (800ab64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	2000000c 	.word	0x2000000c

0800ab68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e004      	b.n	800ab86 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b087      	sub	sp, #28
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	60f8      	str	r0, [r7, #12]
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aba4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800abac:	2303      	movs	r3, #3
 800abae:	e008      	b.n	800abc2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abde:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e004      	b.n	800abf4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac0e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e01a      	b.n	800ac58 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d114      	bne.n	800ac56 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ac4a:	2181      	movs	r1, #129	; 0x81
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f005 fa8a 	bl	8010166 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e016      	b.n	800acac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	7c1b      	ldrb	r3, [r3, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d109      	bne.n	800ac9a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac90:	2101      	movs	r1, #1
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f005 fa88 	bl	80101a8 <USBD_LL_PrepareReceive>
 800ac98:	e007      	b.n	800acaa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aca0:	2340      	movs	r3, #64	; 0x40
 800aca2:	2101      	movs	r1, #1
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f005 fa7f 	bl	80101a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800acc8:	2303      	movs	r3, #3
 800acca:	e01f      	b.n	800ad0c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	79fa      	ldrb	r2, [r7, #7]
 800acfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f005 f8e7 	bl	800fed4 <USBD_LL_Init>
 800ad06:	4603      	mov	r3, r0
 800ad08:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e016      	b.n	800ad5a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	f107 020e 	add.w	r2, r7, #14
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4798      	blx	r3
 800ad50:	4602      	mov	r2, r0
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f005 f912 	bl	800ff94 <USBD_LL_Start>
 800ad70:	4603      	mov	r3, r0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d009      	beq.n	800adbe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	78fa      	ldrb	r2, [r7, #3]
 800adb4:	4611      	mov	r1, r2
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	4798      	blx	r3
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adda:	2b00      	cmp	r3, #0
 800addc:	d007      	beq.n	800adee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	78fa      	ldrb	r2, [r7, #3]
 800ade8:	4611      	mov	r1, r2
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	4798      	blx	r3
  }

  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 ff46 	bl	800bc9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ae1e:	461a      	mov	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae2c:	f003 031f 	and.w	r3, r3, #31
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d01a      	beq.n	800ae6a <USBD_LL_SetupStage+0x72>
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d822      	bhi.n	800ae7e <USBD_LL_SetupStage+0x86>
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <USBD_LL_SetupStage+0x4a>
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d00a      	beq.n	800ae56 <USBD_LL_SetupStage+0x5e>
 800ae40:	e01d      	b.n	800ae7e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f9ee 	bl	800b22c <USBD_StdDevReq>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
      break;
 800ae54:	e020      	b.n	800ae98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fa52 	bl	800b308 <USBD_StdItfReq>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]
      break;
 800ae68:	e016      	b.n	800ae98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fa91 	bl	800b39a <USBD_StdEPReq>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7c:	e00c      	b.n	800ae98 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f005 f8e1 	bl	8010054 <USBD_LL_StallEP>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73fb      	strb	r3, [r7, #15]
      break;
 800ae96:	bf00      	nop
  }

  return ret;
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b086      	sub	sp, #24
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	607a      	str	r2, [r7, #4]
 800aeae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aeb0:	7afb      	ldrb	r3, [r7, #11]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d138      	bne.n	800af28 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aebc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d14a      	bne.n	800af5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d913      	bls.n	800aefc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	1ad2      	subs	r2, r2, r3
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	4293      	cmp	r3, r2
 800aeec:	bf28      	it	cs
 800aeee:	4613      	movcs	r3, r2
 800aef0:	461a      	mov	r2, r3
 800aef2:	6879      	ldr	r1, [r7, #4]
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 ffc5 	bl	800be84 <USBD_CtlContinueRx>
 800aefa:	e030      	b.n	800af5e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b03      	cmp	r3, #3
 800af06:	d10b      	bne.n	800af20 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d005      	beq.n	800af20 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 ffc0 	bl	800bea6 <USBD_CtlSendStatus>
 800af26:	e01a      	b.n	800af5e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b03      	cmp	r3, #3
 800af32:	d114      	bne.n	800af5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00e      	beq.n	800af5e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	7afa      	ldrb	r2, [r7, #11]
 800af4a:	4611      	mov	r1, r2
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	4798      	blx	r3
 800af50:	4603      	mov	r3, r0
 800af52:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	e000      	b.n	800af60 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	460b      	mov	r3, r1
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800af76:	7afb      	ldrb	r3, [r7, #11]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d16b      	bne.n	800b054 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3314      	adds	r3, #20
 800af80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d156      	bne.n	800b03a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	429a      	cmp	r2, r3
 800af96:	d914      	bls.n	800afc2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	1ad2      	subs	r2, r2, r3
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	461a      	mov	r2, r3
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 ff3a 	bl	800be28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afb4:	2300      	movs	r3, #0
 800afb6:	2200      	movs	r2, #0
 800afb8:	2100      	movs	r1, #0
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f005 f8f4 	bl	80101a8 <USBD_LL_PrepareReceive>
 800afc0:	e03b      	b.n	800b03a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	68da      	ldr	r2, [r3, #12]
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d11c      	bne.n	800b008 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d316      	bcc.n	800b008 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d20f      	bcs.n	800b008 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800afe8:	2200      	movs	r2, #0
 800afea:	2100      	movs	r1, #0
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 ff1b 	bl	800be28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800affa:	2300      	movs	r3, #0
 800affc:	2200      	movs	r2, #0
 800affe:	2100      	movs	r1, #0
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f005 f8d1 	bl	80101a8 <USBD_LL_PrepareReceive>
 800b006:	e018      	b.n	800b03a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b03      	cmp	r3, #3
 800b012:	d10b      	bne.n	800b02c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d005      	beq.n	800b02c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b02c:	2180      	movs	r1, #128	; 0x80
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f005 f810 	bl	8010054 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 ff49 	bl	800becc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b040:	2b01      	cmp	r3, #1
 800b042:	d122      	bne.n	800b08a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7ff fe98 	bl	800ad7a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b052:	e01a      	b.n	800b08a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d114      	bne.n	800b08a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00e      	beq.n	800b08a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	7afa      	ldrb	r2, [r7, #11]
 800b076:	4611      	mov	r1, r2
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	4798      	blx	r3
 800b07c:	4603      	mov	r3, r0
 800b07e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	e000      	b.n	800b08c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e02f      	b.n	800b128 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00f      	beq.n	800b0f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d009      	beq.n	800b0f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6852      	ldr	r2, [r2, #4]
 800b0ea:	b2d2      	uxtb	r2, r2
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0f2:	2340      	movs	r3, #64	; 0x40
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f004 ff66 	bl	800ffca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2240      	movs	r2, #64	; 0x40
 800b10a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b10e:	2340      	movs	r3, #64	; 0x40
 800b110:	2200      	movs	r2, #0
 800b112:	2180      	movs	r1, #128	; 0x80
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f004 ff58 	bl	800ffca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2240      	movs	r2, #64	; 0x40
 800b124:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2204      	movs	r2, #4
 800b16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b04      	cmp	r3, #4
 800b18e:	d106      	bne.n	800b19e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b196:	b2da      	uxtb	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e012      	b.n	800b1e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d10b      	bne.n	800b1e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1e0:	69db      	ldr	r3, [r3, #28]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	3301      	adds	r3, #1
 800b206:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b20e:	8a3b      	ldrh	r3, [r7, #16]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	b21a      	sxth	r2, r3
 800b214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b218:	4313      	orrs	r3, r2
 800b21a:	b21b      	sxth	r3, r3
 800b21c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b21e:	89fb      	ldrh	r3, [r7, #14]
}
 800b220:	4618      	mov	r0, r3
 800b222:	371c      	adds	r7, #28
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b242:	2b40      	cmp	r3, #64	; 0x40
 800b244:	d005      	beq.n	800b252 <USBD_StdDevReq+0x26>
 800b246:	2b40      	cmp	r3, #64	; 0x40
 800b248:	d853      	bhi.n	800b2f2 <USBD_StdDevReq+0xc6>
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00b      	beq.n	800b266 <USBD_StdDevReq+0x3a>
 800b24e:	2b20      	cmp	r3, #32
 800b250:	d14f      	bne.n	800b2f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	4798      	blx	r3
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]
      break;
 800b264:	e04a      	b.n	800b2fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	2b09      	cmp	r3, #9
 800b26c:	d83b      	bhi.n	800b2e6 <USBD_StdDevReq+0xba>
 800b26e:	a201      	add	r2, pc, #4	; (adr r2, 800b274 <USBD_StdDevReq+0x48>)
 800b270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b274:	0800b2c9 	.word	0x0800b2c9
 800b278:	0800b2dd 	.word	0x0800b2dd
 800b27c:	0800b2e7 	.word	0x0800b2e7
 800b280:	0800b2d3 	.word	0x0800b2d3
 800b284:	0800b2e7 	.word	0x0800b2e7
 800b288:	0800b2a7 	.word	0x0800b2a7
 800b28c:	0800b29d 	.word	0x0800b29d
 800b290:	0800b2e7 	.word	0x0800b2e7
 800b294:	0800b2bf 	.word	0x0800b2bf
 800b298:	0800b2b1 	.word	0x0800b2b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f9de 	bl	800b660 <USBD_GetDescriptor>
          break;
 800b2a4:	e024      	b.n	800b2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fb6d 	bl	800b988 <USBD_SetAddress>
          break;
 800b2ae:	e01f      	b.n	800b2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fbac 	bl	800ba10 <USBD_SetConfig>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
          break;
 800b2bc:	e018      	b.n	800b2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fc4b 	bl	800bb5c <USBD_GetConfig>
          break;
 800b2c6:	e013      	b.n	800b2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fc7c 	bl	800bbc8 <USBD_GetStatus>
          break;
 800b2d0:	e00e      	b.n	800b2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fcab 	bl	800bc30 <USBD_SetFeature>
          break;
 800b2da:	e009      	b.n	800b2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fcba 	bl	800bc58 <USBD_ClrFeature>
          break;
 800b2e4:	e004      	b.n	800b2f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fd11 	bl	800bd10 <USBD_CtlError>
          break;
 800b2ee:	bf00      	nop
      }
      break;
 800b2f0:	e004      	b.n	800b2fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fd0b 	bl	800bd10 <USBD_CtlError>
      break;
 800b2fa:	bf00      	nop
  }

  return ret;
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop

0800b308 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b31e:	2b40      	cmp	r3, #64	; 0x40
 800b320:	d005      	beq.n	800b32e <USBD_StdItfReq+0x26>
 800b322:	2b40      	cmp	r3, #64	; 0x40
 800b324:	d82f      	bhi.n	800b386 <USBD_StdItfReq+0x7e>
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <USBD_StdItfReq+0x26>
 800b32a:	2b20      	cmp	r3, #32
 800b32c:	d12b      	bne.n	800b386 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d81d      	bhi.n	800b378 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	889b      	ldrh	r3, [r3, #4]
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b01      	cmp	r3, #1
 800b344:	d813      	bhi.n	800b36e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	4798      	blx	r3
 800b354:	4603      	mov	r3, r0
 800b356:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	88db      	ldrh	r3, [r3, #6]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d110      	bne.n	800b382 <USBD_StdItfReq+0x7a>
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10d      	bne.n	800b382 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fd9d 	bl	800bea6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b36c:	e009      	b.n	800b382 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fccd 	bl	800bd10 <USBD_CtlError>
          break;
 800b376:	e004      	b.n	800b382 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fcc8 	bl	800bd10 <USBD_CtlError>
          break;
 800b380:	e000      	b.n	800b384 <USBD_StdItfReq+0x7c>
          break;
 800b382:	bf00      	nop
      }
      break;
 800b384:	e004      	b.n	800b390 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b386:	6839      	ldr	r1, [r7, #0]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fcc1 	bl	800bd10 <USBD_CtlError>
      break;
 800b38e:	bf00      	nop
  }

  return ret;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	889b      	ldrh	r3, [r3, #4]
 800b3ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3b6:	2b40      	cmp	r3, #64	; 0x40
 800b3b8:	d007      	beq.n	800b3ca <USBD_StdEPReq+0x30>
 800b3ba:	2b40      	cmp	r3, #64	; 0x40
 800b3bc:	f200 8145 	bhi.w	800b64a <USBD_StdEPReq+0x2b0>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00c      	beq.n	800b3de <USBD_StdEPReq+0x44>
 800b3c4:	2b20      	cmp	r3, #32
 800b3c6:	f040 8140 	bne.w	800b64a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	4798      	blx	r3
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73fb      	strb	r3, [r7, #15]
      break;
 800b3dc:	e13a      	b.n	800b654 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	785b      	ldrb	r3, [r3, #1]
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d007      	beq.n	800b3f6 <USBD_StdEPReq+0x5c>
 800b3e6:	2b03      	cmp	r3, #3
 800b3e8:	f300 8129 	bgt.w	800b63e <USBD_StdEPReq+0x2a4>
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d07f      	beq.n	800b4f0 <USBD_StdEPReq+0x156>
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d03c      	beq.n	800b46e <USBD_StdEPReq+0xd4>
 800b3f4:	e123      	b.n	800b63e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d002      	beq.n	800b408 <USBD_StdEPReq+0x6e>
 800b402:	2b03      	cmp	r3, #3
 800b404:	d016      	beq.n	800b434 <USBD_StdEPReq+0x9a>
 800b406:	e02c      	b.n	800b462 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00d      	beq.n	800b42a <USBD_StdEPReq+0x90>
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	2b80      	cmp	r3, #128	; 0x80
 800b412:	d00a      	beq.n	800b42a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b414:	7bbb      	ldrb	r3, [r7, #14]
 800b416:	4619      	mov	r1, r3
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f004 fe1b 	bl	8010054 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b41e:	2180      	movs	r1, #128	; 0x80
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f004 fe17 	bl	8010054 <USBD_LL_StallEP>
 800b426:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b428:	e020      	b.n	800b46c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fc6f 	bl	800bd10 <USBD_CtlError>
              break;
 800b432:	e01b      	b.n	800b46c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	885b      	ldrh	r3, [r3, #2]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10e      	bne.n	800b45a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <USBD_StdEPReq+0xc0>
 800b442:	7bbb      	ldrb	r3, [r7, #14]
 800b444:	2b80      	cmp	r3, #128	; 0x80
 800b446:	d008      	beq.n	800b45a <USBD_StdEPReq+0xc0>
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	88db      	ldrh	r3, [r3, #6]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d104      	bne.n	800b45a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f004 fdfd 	bl	8010054 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fd23 	bl	800bea6 <USBD_CtlSendStatus>

              break;
 800b460:	e004      	b.n	800b46c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fc53 	bl	800bd10 <USBD_CtlError>
              break;
 800b46a:	bf00      	nop
          }
          break;
 800b46c:	e0ec      	b.n	800b648 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b474:	b2db      	uxtb	r3, r3
 800b476:	2b02      	cmp	r3, #2
 800b478:	d002      	beq.n	800b480 <USBD_StdEPReq+0xe6>
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d016      	beq.n	800b4ac <USBD_StdEPReq+0x112>
 800b47e:	e030      	b.n	800b4e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00d      	beq.n	800b4a2 <USBD_StdEPReq+0x108>
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b80      	cmp	r3, #128	; 0x80
 800b48a:	d00a      	beq.n	800b4a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f004 fddf 	bl	8010054 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b496:	2180      	movs	r1, #128	; 0x80
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f004 fddb 	bl	8010054 <USBD_LL_StallEP>
 800b49e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4a0:	e025      	b.n	800b4ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fc33 	bl	800bd10 <USBD_CtlError>
              break;
 800b4aa:	e020      	b.n	800b4ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	885b      	ldrh	r3, [r3, #2]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d11b      	bne.n	800b4ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d004      	beq.n	800b4c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f004 fde5 	bl	8010092 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fcec 	bl	800bea6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	4798      	blx	r3
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b4e0:	e004      	b.n	800b4ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fc13 	bl	800bd10 <USBD_CtlError>
              break;
 800b4ea:	e000      	b.n	800b4ee <USBD_StdEPReq+0x154>
              break;
 800b4ec:	bf00      	nop
          }
          break;
 800b4ee:	e0ab      	b.n	800b648 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d002      	beq.n	800b502 <USBD_StdEPReq+0x168>
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	d032      	beq.n	800b566 <USBD_StdEPReq+0x1cc>
 800b500:	e097      	b.n	800b632 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b502:	7bbb      	ldrb	r3, [r7, #14]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d007      	beq.n	800b518 <USBD_StdEPReq+0x17e>
 800b508:	7bbb      	ldrb	r3, [r7, #14]
 800b50a:	2b80      	cmp	r3, #128	; 0x80
 800b50c:	d004      	beq.n	800b518 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fbfd 	bl	800bd10 <USBD_CtlError>
                break;
 800b516:	e091      	b.n	800b63c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	da0b      	bge.n	800b538 <USBD_StdEPReq+0x19e>
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	3310      	adds	r3, #16
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	4413      	add	r3, r2
 800b534:	3304      	adds	r3, #4
 800b536:	e00b      	b.n	800b550 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b538:	7bbb      	ldrb	r3, [r7, #14]
 800b53a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	4413      	add	r3, r2
 800b54e:	3304      	adds	r3, #4
 800b550:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	2200      	movs	r2, #0
 800b556:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2202      	movs	r2, #2
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fc47 	bl	800bdf2 <USBD_CtlSendData>
              break;
 800b564:	e06a      	b.n	800b63c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da11      	bge.n	800b592 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	f003 020f 	and.w	r2, r3, #15
 800b574:	6879      	ldr	r1, [r7, #4]
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	440b      	add	r3, r1
 800b580:	3324      	adds	r3, #36	; 0x24
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d117      	bne.n	800b5b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fbc0 	bl	800bd10 <USBD_CtlError>
                  break;
 800b590:	e054      	b.n	800b63c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	f003 020f 	and.w	r2, r3, #15
 800b598:	6879      	ldr	r1, [r7, #4]
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	440b      	add	r3, r1
 800b5a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fbad 	bl	800bd10 <USBD_CtlError>
                  break;
 800b5b6:	e041      	b.n	800b63c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	da0b      	bge.n	800b5d8 <USBD_StdEPReq+0x23e>
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	3310      	adds	r3, #16
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	e00b      	b.n	800b5f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b5f2:	7bbb      	ldrb	r3, [r7, #14]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <USBD_StdEPReq+0x264>
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	2b80      	cmp	r3, #128	; 0x80
 800b5fc:	d103      	bne.n	800b606 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	e00e      	b.n	800b624 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f004 fd60 	bl	80100d0 <USBD_LL_IsStallEP>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2201      	movs	r2, #1
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	e002      	b.n	800b624 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2202      	movs	r2, #2
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fbe1 	bl	800bdf2 <USBD_CtlSendData>
              break;
 800b630:	e004      	b.n	800b63c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fb6b 	bl	800bd10 <USBD_CtlError>
              break;
 800b63a:	bf00      	nop
          }
          break;
 800b63c:	e004      	b.n	800b648 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fb65 	bl	800bd10 <USBD_CtlError>
          break;
 800b646:	bf00      	nop
      }
      break;
 800b648:	e004      	b.n	800b654 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fb5f 	bl	800bd10 <USBD_CtlError>
      break;
 800b652:	bf00      	nop
  }

  return ret;
 800b654:	7bfb      	ldrb	r3, [r7, #15]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
	...

0800b660 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	885b      	ldrh	r3, [r3, #2]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	2b0e      	cmp	r3, #14
 800b682:	f200 8152 	bhi.w	800b92a <USBD_GetDescriptor+0x2ca>
 800b686:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <USBD_GetDescriptor+0x2c>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6fd 	.word	0x0800b6fd
 800b690:	0800b715 	.word	0x0800b715
 800b694:	0800b755 	.word	0x0800b755
 800b698:	0800b92b 	.word	0x0800b92b
 800b69c:	0800b92b 	.word	0x0800b92b
 800b6a0:	0800b8cb 	.word	0x0800b8cb
 800b6a4:	0800b8f7 	.word	0x0800b8f7
 800b6a8:	0800b92b 	.word	0x0800b92b
 800b6ac:	0800b92b 	.word	0x0800b92b
 800b6b0:	0800b92b 	.word	0x0800b92b
 800b6b4:	0800b92b 	.word	0x0800b92b
 800b6b8:	0800b92b 	.word	0x0800b92b
 800b6bc:	0800b92b 	.word	0x0800b92b
 800b6c0:	0800b92b 	.word	0x0800b92b
 800b6c4:	0800b6c9 	.word	0x0800b6c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ce:	69db      	ldr	r3, [r3, #28]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00b      	beq.n	800b6ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6da:	69db      	ldr	r3, [r3, #28]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	7c12      	ldrb	r2, [r2, #16]
 800b6e0:	f107 0108 	add.w	r1, r7, #8
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	4798      	blx	r3
 800b6e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6ea:	e126      	b.n	800b93a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fb0e 	bl	800bd10 <USBD_CtlError>
        err++;
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	72fb      	strb	r3, [r7, #11]
      break;
 800b6fa:	e11e      	b.n	800b93a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	7c12      	ldrb	r2, [r2, #16]
 800b708:	f107 0108 	add.w	r1, r7, #8
 800b70c:	4610      	mov	r0, r2
 800b70e:	4798      	blx	r3
 800b710:	60f8      	str	r0, [r7, #12]
      break;
 800b712:	e112      	b.n	800b93a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	7c1b      	ldrb	r3, [r3, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10d      	bne.n	800b738 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b724:	f107 0208 	add.w	r2, r7, #8
 800b728:	4610      	mov	r0, r2
 800b72a:	4798      	blx	r3
 800b72c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3301      	adds	r3, #1
 800b732:	2202      	movs	r2, #2
 800b734:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b736:	e100      	b.n	800b93a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	f107 0208 	add.w	r2, r7, #8
 800b744:	4610      	mov	r0, r2
 800b746:	4798      	blx	r3
 800b748:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	2202      	movs	r2, #2
 800b750:	701a      	strb	r2, [r3, #0]
      break;
 800b752:	e0f2      	b.n	800b93a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	885b      	ldrh	r3, [r3, #2]
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	f200 80ac 	bhi.w	800b8b8 <USBD_GetDescriptor+0x258>
 800b760:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <USBD_GetDescriptor+0x108>)
 800b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b766:	bf00      	nop
 800b768:	0800b781 	.word	0x0800b781
 800b76c:	0800b7b5 	.word	0x0800b7b5
 800b770:	0800b7e9 	.word	0x0800b7e9
 800b774:	0800b81d 	.word	0x0800b81d
 800b778:	0800b851 	.word	0x0800b851
 800b77c:	0800b885 	.word	0x0800b885
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00b      	beq.n	800b7a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	7c12      	ldrb	r2, [r2, #16]
 800b798:	f107 0108 	add.w	r1, r7, #8
 800b79c:	4610      	mov	r0, r2
 800b79e:	4798      	blx	r3
 800b7a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7a2:	e091      	b.n	800b8c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fab2 	bl	800bd10 <USBD_CtlError>
            err++;
 800b7ac:	7afb      	ldrb	r3, [r7, #11]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7b2:	e089      	b.n	800b8c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00b      	beq.n	800b7d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	7c12      	ldrb	r2, [r2, #16]
 800b7cc:	f107 0108 	add.w	r1, r7, #8
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	4798      	blx	r3
 800b7d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7d6:	e077      	b.n	800b8c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa98 	bl	800bd10 <USBD_CtlError>
            err++;
 800b7e0:	7afb      	ldrb	r3, [r7, #11]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7e6:	e06f      	b.n	800b8c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00b      	beq.n	800b80c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	7c12      	ldrb	r2, [r2, #16]
 800b800:	f107 0108 	add.w	r1, r7, #8
 800b804:	4610      	mov	r0, r2
 800b806:	4798      	blx	r3
 800b808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b80a:	e05d      	b.n	800b8c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fa7e 	bl	800bd10 <USBD_CtlError>
            err++;
 800b814:	7afb      	ldrb	r3, [r7, #11]
 800b816:	3301      	adds	r3, #1
 800b818:	72fb      	strb	r3, [r7, #11]
          break;
 800b81a:	e055      	b.n	800b8c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00b      	beq.n	800b840 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	7c12      	ldrb	r2, [r2, #16]
 800b834:	f107 0108 	add.w	r1, r7, #8
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b83e:	e043      	b.n	800b8c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fa64 	bl	800bd10 <USBD_CtlError>
            err++;
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	3301      	adds	r3, #1
 800b84c:	72fb      	strb	r3, [r7, #11]
          break;
 800b84e:	e03b      	b.n	800b8c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00b      	beq.n	800b874 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	7c12      	ldrb	r2, [r2, #16]
 800b868:	f107 0108 	add.w	r1, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b872:	e029      	b.n	800b8c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fa4a 	bl	800bd10 <USBD_CtlError>
            err++;
 800b87c:	7afb      	ldrb	r3, [r7, #11]
 800b87e:	3301      	adds	r3, #1
 800b880:	72fb      	strb	r3, [r7, #11]
          break;
 800b882:	e021      	b.n	800b8c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	7c12      	ldrb	r2, [r2, #16]
 800b89c:	f107 0108 	add.w	r1, r7, #8
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
 800b8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8a6:	e00f      	b.n	800b8c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fa30 	bl	800bd10 <USBD_CtlError>
            err++;
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8b6:	e007      	b.n	800b8c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fa28 	bl	800bd10 <USBD_CtlError>
          err++;
 800b8c0:	7afb      	ldrb	r3, [r7, #11]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b8c6:	bf00      	nop
      }
      break;
 800b8c8:	e037      	b.n	800b93a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7c1b      	ldrb	r3, [r3, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8da:	f107 0208 	add.w	r2, r7, #8
 800b8de:	4610      	mov	r0, r2
 800b8e0:	4798      	blx	r3
 800b8e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8e4:	e029      	b.n	800b93a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fa11 	bl	800bd10 <USBD_CtlError>
        err++;
 800b8ee:	7afb      	ldrb	r3, [r7, #11]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b8f4:	e021      	b.n	800b93a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	7c1b      	ldrb	r3, [r3, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10d      	bne.n	800b91a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b906:	f107 0208 	add.w	r2, r7, #8
 800b90a:	4610      	mov	r0, r2
 800b90c:	4798      	blx	r3
 800b90e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3301      	adds	r3, #1
 800b914:	2207      	movs	r2, #7
 800b916:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b918:	e00f      	b.n	800b93a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f9f7 	bl	800bd10 <USBD_CtlError>
        err++;
 800b922:	7afb      	ldrb	r3, [r7, #11]
 800b924:	3301      	adds	r3, #1
 800b926:	72fb      	strb	r3, [r7, #11]
      break;
 800b928:	e007      	b.n	800b93a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f9ef 	bl	800bd10 <USBD_CtlError>
      err++;
 800b932:	7afb      	ldrb	r3, [r7, #11]
 800b934:	3301      	adds	r3, #1
 800b936:	72fb      	strb	r3, [r7, #11]
      break;
 800b938:	bf00      	nop
  }

  if (err != 0U)
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d11e      	bne.n	800b97e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	88db      	ldrh	r3, [r3, #6]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d016      	beq.n	800b976 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b948:	893b      	ldrh	r3, [r7, #8]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00e      	beq.n	800b96c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	88da      	ldrh	r2, [r3, #6]
 800b952:	893b      	ldrh	r3, [r7, #8]
 800b954:	4293      	cmp	r3, r2
 800b956:	bf28      	it	cs
 800b958:	4613      	movcs	r3, r2
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b95e:	893b      	ldrh	r3, [r7, #8]
 800b960:	461a      	mov	r2, r3
 800b962:	68f9      	ldr	r1, [r7, #12]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fa44 	bl	800bdf2 <USBD_CtlSendData>
 800b96a:	e009      	b.n	800b980 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f9ce 	bl	800bd10 <USBD_CtlError>
 800b974:	e004      	b.n	800b980 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fa95 	bl	800bea6 <USBD_CtlSendStatus>
 800b97c:	e000      	b.n	800b980 <USBD_GetDescriptor+0x320>
    return;
 800b97e:	bf00      	nop
  }
}
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop

0800b988 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	889b      	ldrh	r3, [r3, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d131      	bne.n	800b9fe <USBD_SetAddress+0x76>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	88db      	ldrh	r3, [r3, #6]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d12d      	bne.n	800b9fe <USBD_SetAddress+0x76>
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	885b      	ldrh	r3, [r3, #2]
 800b9a6:	2b7f      	cmp	r3, #127	; 0x7f
 800b9a8:	d829      	bhi.n	800b9fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	885b      	ldrh	r3, [r3, #2]
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d104      	bne.n	800b9cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f9a3 	bl	800bd10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ca:	e01d      	b.n	800ba08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	7bfa      	ldrb	r2, [r7, #15]
 800b9d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f004 fba5 	bl	8010128 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fa61 	bl	800bea6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d004      	beq.n	800b9f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f2:	e009      	b.n	800ba08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9fc:	e004      	b.n	800ba08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9fe:	6839      	ldr	r1, [r7, #0]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f985 	bl	800bd10 <USBD_CtlError>
  }
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	885b      	ldrh	r3, [r3, #2]
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	4b4c      	ldr	r3, [pc, #304]	; (800bb58 <USBD_SetConfig+0x148>)
 800ba26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba28:	4b4b      	ldr	r3, [pc, #300]	; (800bb58 <USBD_SetConfig+0x148>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d905      	bls.n	800ba3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f96c 	bl	800bd10 <USBD_CtlError>
    return USBD_FAIL;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e088      	b.n	800bb4e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d002      	beq.n	800ba4e <USBD_SetConfig+0x3e>
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d025      	beq.n	800ba98 <USBD_SetConfig+0x88>
 800ba4c:	e071      	b.n	800bb32 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba4e:	4b42      	ldr	r3, [pc, #264]	; (800bb58 <USBD_SetConfig+0x148>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d01c      	beq.n	800ba90 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ba56:	4b40      	ldr	r3, [pc, #256]	; (800bb58 <USBD_SetConfig+0x148>)
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba60:	4b3d      	ldr	r3, [pc, #244]	; (800bb58 <USBD_SetConfig+0x148>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7ff f992 	bl	800ad90 <USBD_SetClassConfig>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d004      	beq.n	800ba80 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f949 	bl	800bd10 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba7e:	e065      	b.n	800bb4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fa10 	bl	800bea6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2203      	movs	r2, #3
 800ba8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba8e:	e05d      	b.n	800bb4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fa08 	bl	800bea6 <USBD_CtlSendStatus>
      break;
 800ba96:	e059      	b.n	800bb4c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ba98:	4b2f      	ldr	r3, [pc, #188]	; (800bb58 <USBD_SetConfig+0x148>)
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d112      	bne.n	800bac6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800baa8:	4b2b      	ldr	r3, [pc, #172]	; (800bb58 <USBD_SetConfig+0x148>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bab2:	4b29      	ldr	r3, [pc, #164]	; (800bb58 <USBD_SetConfig+0x148>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7ff f985 	bl	800adc8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f9f1 	bl	800bea6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bac4:	e042      	b.n	800bb4c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bac6:	4b24      	ldr	r3, [pc, #144]	; (800bb58 <USBD_SetConfig+0x148>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d02a      	beq.n	800bb2a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff f973 	bl	800adc8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bae2:	4b1d      	ldr	r3, [pc, #116]	; (800bb58 <USBD_SetConfig+0x148>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800baec:	4b1a      	ldr	r3, [pc, #104]	; (800bb58 <USBD_SetConfig+0x148>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff f94c 	bl	800ad90 <USBD_SetClassConfig>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00f      	beq.n	800bb22 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f903 	bl	800bd10 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff f958 	bl	800adc8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb20:	e014      	b.n	800bb4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9bf 	bl	800bea6 <USBD_CtlSendStatus>
      break;
 800bb28:	e010      	b.n	800bb4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f9bb 	bl	800bea6 <USBD_CtlSendStatus>
      break;
 800bb30:	e00c      	b.n	800bb4c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f8eb 	bl	800bd10 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb3a:	4b07      	ldr	r3, [pc, #28]	; (800bb58 <USBD_SetConfig+0x148>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7ff f941 	bl	800adc8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb46:	2303      	movs	r3, #3
 800bb48:	73fb      	strb	r3, [r7, #15]
      break;
 800bb4a:	bf00      	nop
  }

  return ret;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20002a24 	.word	0x20002a24

0800bb5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	88db      	ldrh	r3, [r3, #6]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d004      	beq.n	800bb78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f8cd 	bl	800bd10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb76:	e023      	b.n	800bbc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	dc02      	bgt.n	800bb8a <USBD_GetConfig+0x2e>
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dc03      	bgt.n	800bb90 <USBD_GetConfig+0x34>
 800bb88:	e015      	b.n	800bbb6 <USBD_GetConfig+0x5a>
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d00b      	beq.n	800bba6 <USBD_GetConfig+0x4a>
 800bb8e:	e012      	b.n	800bbb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3308      	adds	r3, #8
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f927 	bl	800bdf2 <USBD_CtlSendData>
        break;
 800bba4:	e00c      	b.n	800bbc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f91f 	bl	800bdf2 <USBD_CtlSendData>
        break;
 800bbb4:	e004      	b.n	800bbc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f8a9 	bl	800bd10 <USBD_CtlError>
        break;
 800bbbe:	bf00      	nop
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d81e      	bhi.n	800bc1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	88db      	ldrh	r3, [r3, #6]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d004      	beq.n	800bbf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f890 	bl	800bd10 <USBD_CtlError>
        break;
 800bbf0:	e01a      	b.n	800bc28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d005      	beq.n	800bc0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	f043 0202 	orr.w	r2, r3, #2
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	330c      	adds	r3, #12
 800bc12:	2202      	movs	r2, #2
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f8eb 	bl	800bdf2 <USBD_CtlSendData>
      break;
 800bc1c:	e004      	b.n	800bc28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f875 	bl	800bd10 <USBD_CtlError>
      break;
 800bc26:	bf00      	nop
  }
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	885b      	ldrh	r3, [r3, #2]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d106      	bne.n	800bc50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f92b 	bl	800bea6 <USBD_CtlSendStatus>
  }
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d80b      	bhi.n	800bc88 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	885b      	ldrh	r3, [r3, #2]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d10c      	bne.n	800bc92 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f910 	bl	800bea6 <USBD_CtlSendStatus>
      }
      break;
 800bc86:	e004      	b.n	800bc92 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f840 	bl	800bd10 <USBD_CtlError>
      break;
 800bc90:	e000      	b.n	800bc94 <USBD_ClrFeature+0x3c>
      break;
 800bc92:	bf00      	nop
  }
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	781a      	ldrb	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	781a      	ldrb	r2, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f7ff fa92 	bl	800b1f0 <SWAPBYTE>
 800bccc:	4603      	mov	r3, r0
 800bcce:	461a      	mov	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff fa85 	bl	800b1f0 <SWAPBYTE>
 800bce6:	4603      	mov	r3, r0
 800bce8:	461a      	mov	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7ff fa78 	bl	800b1f0 <SWAPBYTE>
 800bd00:	4603      	mov	r3, r0
 800bd02:	461a      	mov	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	80da      	strh	r2, [r3, #6]
}
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd1a:	2180      	movs	r1, #128	; 0x80
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f004 f999 	bl	8010054 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd22:	2100      	movs	r1, #0
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f004 f995 	bl	8010054 <USBD_LL_StallEP>
}
 800bd2a:	bf00      	nop
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d036      	beq.n	800bdb6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd4c:	6938      	ldr	r0, [r7, #16]
 800bd4e:	f000 f836 	bl	800bdbe <USBD_GetLen>
 800bd52:	4603      	mov	r3, r0
 800bd54:	3301      	adds	r3, #1
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd60:	7dfb      	ldrb	r3, [r7, #23]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	4413      	add	r3, r2
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	7812      	ldrb	r2, [r2, #0]
 800bd6a:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	4413      	add	r3, r2
 800bd78:	2203      	movs	r2, #3
 800bd7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd82:	e013      	b.n	800bdac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	4413      	add	r3, r2
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	3301      	adds	r3, #1
 800bd94:	613b      	str	r3, [r7, #16]
    idx++;
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	2200      	movs	r2, #0
 800bda4:	701a      	strb	r2, [r3, #0]
    idx++;
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1e7      	bne.n	800bd84 <USBD_GetString+0x52>
 800bdb4:	e000      	b.n	800bdb8 <USBD_GetString+0x86>
    return;
 800bdb6:	bf00      	nop
  }
}
 800bdb8:	3718      	adds	r7, #24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bdce:	e005      	b.n	800bddc <USBD_GetLen+0x1e>
  {
    len++;
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1f5      	bne.n	800bdd0 <USBD_GetLen+0x12>
  }

  return len;
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b084      	sub	sp, #16
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2202      	movs	r2, #2
 800be02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	2100      	movs	r1, #0
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f004 f9a4 	bl	8010166 <USBD_LL_Transmit>

  return USBD_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	2100      	movs	r1, #0
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f004 f993 	bl	8010166 <USBD_LL_Transmit>

  return USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2203      	movs	r2, #3
 800be5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	2100      	movs	r1, #0
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f004 f997 	bl	80101a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	2100      	movs	r1, #0
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f004 f986 	bl	80101a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2204      	movs	r2, #4
 800beb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800beb6:	2300      	movs	r3, #0
 800beb8:	2200      	movs	r2, #0
 800beba:	2100      	movs	r1, #0
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f004 f952 	bl	8010166 <USBD_LL_Transmit>

  return USBD_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2205      	movs	r2, #5
 800bed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bedc:	2300      	movs	r3, #0
 800bede:	2200      	movs	r2, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f004 f960 	bl	80101a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
	...

0800bef4 <__NVIC_SetPriority>:
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	4603      	mov	r3, r0
 800befc:	6039      	str	r1, [r7, #0]
 800befe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	db0a      	blt.n	800bf1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	490c      	ldr	r1, [pc, #48]	; (800bf40 <__NVIC_SetPriority+0x4c>)
 800bf0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf12:	0112      	lsls	r2, r2, #4
 800bf14:	b2d2      	uxtb	r2, r2
 800bf16:	440b      	add	r3, r1
 800bf18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bf1c:	e00a      	b.n	800bf34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	4908      	ldr	r1, [pc, #32]	; (800bf44 <__NVIC_SetPriority+0x50>)
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	f003 030f 	and.w	r3, r3, #15
 800bf2a:	3b04      	subs	r3, #4
 800bf2c:	0112      	lsls	r2, r2, #4
 800bf2e:	b2d2      	uxtb	r2, r2
 800bf30:	440b      	add	r3, r1
 800bf32:	761a      	strb	r2, [r3, #24]
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	e000e100 	.word	0xe000e100
 800bf44:	e000ed00 	.word	0xe000ed00

0800bf48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <SysTick_Handler+0x1c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf50:	f002 fb6e 	bl	800e630 <xTaskGetSchedulerState>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d001      	beq.n	800bf5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf5a:	f003 fa55 	bl	800f408 <xPortSysTickHandler>
  }
}
 800bf5e:	bf00      	nop
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	e000e010 	.word	0xe000e010

0800bf68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	f06f 0004 	mvn.w	r0, #4
 800bf72:	f7ff ffbf 	bl	800bef4 <__NVIC_SetPriority>
#endif
}
 800bf76:	bf00      	nop
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf82:	f3ef 8305 	mrs	r3, IPSR
 800bf86:	603b      	str	r3, [r7, #0]
  return(result);
 800bf88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bf8e:	f06f 0305 	mvn.w	r3, #5
 800bf92:	607b      	str	r3, [r7, #4]
 800bf94:	e00c      	b.n	800bfb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bf96:	4b0a      	ldr	r3, [pc, #40]	; (800bfc0 <osKernelInitialize+0x44>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d105      	bne.n	800bfaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bf9e:	4b08      	ldr	r3, [pc, #32]	; (800bfc0 <osKernelInitialize+0x44>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	607b      	str	r3, [r7, #4]
 800bfa8:	e002      	b.n	800bfb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bfaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfb0:	687b      	ldr	r3, [r7, #4]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	20002a28 	.word	0x20002a28

0800bfc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfca:	f3ef 8305 	mrs	r3, IPSR
 800bfce:	603b      	str	r3, [r7, #0]
  return(result);
 800bfd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d003      	beq.n	800bfde <osKernelStart+0x1a>
    stat = osErrorISR;
 800bfd6:	f06f 0305 	mvn.w	r3, #5
 800bfda:	607b      	str	r3, [r7, #4]
 800bfdc:	e010      	b.n	800c000 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bfde:	4b0b      	ldr	r3, [pc, #44]	; (800c00c <osKernelStart+0x48>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d109      	bne.n	800bffa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bfe6:	f7ff ffbf 	bl	800bf68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bfea:	4b08      	ldr	r3, [pc, #32]	; (800c00c <osKernelStart+0x48>)
 800bfec:	2202      	movs	r2, #2
 800bfee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bff0:	f001 fea0 	bl	800dd34 <vTaskStartScheduler>
      stat = osOK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	607b      	str	r3, [r7, #4]
 800bff8:	e002      	b.n	800c000 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bffe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c000:	687b      	ldr	r3, [r7, #4]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	20002a28 	.word	0x20002a28

0800c010 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c016:	f3ef 8305 	mrs	r3, IPSR
 800c01a:	603b      	str	r3, [r7, #0]
  return(result);
 800c01c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c022:	f001 ffb3 	bl	800df8c <xTaskGetTickCountFromISR>
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	e002      	b.n	800c030 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c02a:	f001 ff9f 	bl	800df6c <xTaskGetTickCount>
 800c02e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c030:	687b      	ldr	r3, [r7, #4]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800c03a:	b480      	push	{r7}
 800c03c:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800c03e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800c042:	4618      	mov	r0, r3
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08e      	sub	sp, #56	; 0x38
 800c050:	af04      	add	r7, sp, #16
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c05c:	f3ef 8305 	mrs	r3, IPSR
 800c060:	617b      	str	r3, [r7, #20]
  return(result);
 800c062:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c064:	2b00      	cmp	r3, #0
 800c066:	d17f      	bne.n	800c168 <osThreadNew+0x11c>
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d07c      	beq.n	800c168 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c06e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c072:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c074:	2318      	movs	r3, #24
 800c076:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c080:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d045      	beq.n	800c114 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <osThreadNew+0x4a>
        name = attr->name;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d002      	beq.n	800c0a4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d008      	beq.n	800c0bc <osThreadNew+0x70>
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	2b38      	cmp	r3, #56	; 0x38
 800c0ae:	d805      	bhi.n	800c0bc <osThreadNew+0x70>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <osThreadNew+0x74>
        return (NULL);
 800c0bc:	2300      	movs	r3, #0
 800c0be:	e054      	b.n	800c16a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	089b      	lsrs	r3, r3, #2
 800c0ce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00e      	beq.n	800c0f6 <osThreadNew+0xaa>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	2bab      	cmp	r3, #171	; 0xab
 800c0de:	d90a      	bls.n	800c0f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d006      	beq.n	800c0f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <osThreadNew+0xaa>
        mem = 1;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	61bb      	str	r3, [r7, #24]
 800c0f4:	e010      	b.n	800c118 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10c      	bne.n	800c118 <osThreadNew+0xcc>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d108      	bne.n	800c118 <osThreadNew+0xcc>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d104      	bne.n	800c118 <osThreadNew+0xcc>
          mem = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	61bb      	str	r3, [r7, #24]
 800c112:	e001      	b.n	800c118 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d110      	bne.n	800c140 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c126:	9202      	str	r2, [sp, #8]
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	6a3a      	ldr	r2, [r7, #32]
 800c132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f001 fc11 	bl	800d95c <xTaskCreateStatic>
 800c13a:	4603      	mov	r3, r0
 800c13c:	613b      	str	r3, [r7, #16]
 800c13e:	e013      	b.n	800c168 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d110      	bne.n	800c168 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	b29a      	uxth	r2, r3
 800c14a:	f107 0310 	add.w	r3, r7, #16
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f001 fc5c 	bl	800da16 <xTaskCreate>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b01      	cmp	r3, #1
 800c162:	d001      	beq.n	800c168 <osThreadNew+0x11c>
            hTask = NULL;
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c168:	693b      	ldr	r3, [r7, #16]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3728      	adds	r7, #40	; 0x28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c17a:	f3ef 8305 	mrs	r3, IPSR
 800c17e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c180:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <osDelay+0x1c>
    stat = osErrorISR;
 800c186:	f06f 0305 	mvn.w	r3, #5
 800c18a:	60fb      	str	r3, [r7, #12]
 800c18c:	e007      	b.n	800c19e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f001 fd97 	bl	800dccc <vTaskDelay>
    }
  }

  return (stat);
 800c19e:	68fb      	ldr	r3, [r7, #12]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b088      	sub	sp, #32
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1b4:	f3ef 8305 	mrs	r3, IPSR
 800c1b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1ba:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d174      	bne.n	800c2aa <osMutexNew+0x102>
    if (attr != NULL) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <osMutexNew+0x26>
      type = attr->attr_bits;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	61bb      	str	r3, [r7, #24]
 800c1cc:	e001      	b.n	800c1d2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <osMutexNew+0x3a>
      rmtx = 1U;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	617b      	str	r3, [r7, #20]
 800c1e0:	e001      	b.n	800c1e6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	f003 0308 	and.w	r3, r3, #8
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d15c      	bne.n	800c2aa <osMutexNew+0x102>
      mem = -1;
 800c1f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1f4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d015      	beq.n	800c228 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d006      	beq.n	800c212 <osMutexNew+0x6a>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	2b4f      	cmp	r3, #79	; 0x4f
 800c20a:	d902      	bls.n	800c212 <osMutexNew+0x6a>
          mem = 1;
 800c20c:	2301      	movs	r3, #1
 800c20e:	613b      	str	r3, [r7, #16]
 800c210:	e00c      	b.n	800c22c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d108      	bne.n	800c22c <osMutexNew+0x84>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <osMutexNew+0x84>
            mem = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	613b      	str	r3, [r7, #16]
 800c226:	e001      	b.n	800c22c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d112      	bne.n	800c258 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d007      	beq.n	800c248 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	4619      	mov	r1, r3
 800c23e:	2004      	movs	r0, #4
 800c240:	f000 fc37 	bl	800cab2 <xQueueCreateMutexStatic>
 800c244:	61f8      	str	r0, [r7, #28]
 800c246:	e016      	b.n	800c276 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	4619      	mov	r1, r3
 800c24e:	2001      	movs	r0, #1
 800c250:	f000 fc2f 	bl	800cab2 <xQueueCreateMutexStatic>
 800c254:	61f8      	str	r0, [r7, #28]
 800c256:	e00e      	b.n	800c276 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d004      	beq.n	800c26e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c264:	2004      	movs	r0, #4
 800c266:	f000 fc0c 	bl	800ca82 <xQueueCreateMutex>
 800c26a:	61f8      	str	r0, [r7, #28]
 800c26c:	e003      	b.n	800c276 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c26e:	2001      	movs	r0, #1
 800c270:	f000 fc07 	bl	800ca82 <xQueueCreateMutex>
 800c274:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00c      	beq.n	800c296 <osMutexNew+0xee>
        if (attr != NULL) {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <osMutexNew+0xe2>
          name = attr->name;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	e001      	b.n	800c28e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	69f8      	ldr	r0, [r7, #28]
 800c292:	f001 fadb 	bl	800d84c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d006      	beq.n	800c2aa <osMutexNew+0x102>
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d003      	beq.n	800c2aa <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	f043 0301 	orr.w	r3, r3, #1
 800c2a8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c2aa:	69fb      	ldr	r3, [r7, #28]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3720      	adds	r7, #32
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f023 0301 	bic.w	r3, r3, #1
 800c2c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2d2:	f3ef 8305 	mrs	r3, IPSR
 800c2d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d003      	beq.n	800c2e6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c2de:	f06f 0305 	mvn.w	r3, #5
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e02c      	b.n	800c340 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d103      	bne.n	800c2f4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c2ec:	f06f 0303 	mvn.w	r3, #3
 800c2f0:	617b      	str	r3, [r7, #20]
 800c2f2:	e025      	b.n	800c340 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d011      	beq.n	800c31e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6938      	ldr	r0, [r7, #16]
 800c2fe:	f000 fc27 	bl	800cb50 <xQueueTakeMutexRecursive>
 800c302:	4603      	mov	r3, r0
 800c304:	2b01      	cmp	r3, #1
 800c306:	d01b      	beq.n	800c340 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c30e:	f06f 0301 	mvn.w	r3, #1
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	e014      	b.n	800c340 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c316:	f06f 0302 	mvn.w	r3, #2
 800c31a:	617b      	str	r3, [r7, #20]
 800c31c:	e010      	b.n	800c340 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c31e:	6839      	ldr	r1, [r7, #0]
 800c320:	6938      	ldr	r0, [r7, #16]
 800c322:	f000 ffbb 	bl	800d29c <xQueueSemaphoreTake>
 800c326:	4603      	mov	r3, r0
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d009      	beq.n	800c340 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c332:	f06f 0301 	mvn.w	r3, #1
 800c336:	617b      	str	r3, [r7, #20]
 800c338:	e002      	b.n	800c340 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c33a:	f06f 0302 	mvn.w	r3, #2
 800c33e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c340:	697b      	ldr	r3, [r7, #20]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b086      	sub	sp, #24
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f023 0301 	bic.w	r3, r3, #1
 800c358:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c366:	f3ef 8305 	mrs	r3, IPSR
 800c36a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c36c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <osMutexRelease+0x30>
    stat = osErrorISR;
 800c372:	f06f 0305 	mvn.w	r3, #5
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	e01f      	b.n	800c3ba <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d103      	bne.n	800c388 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c380:	f06f 0303 	mvn.w	r3, #3
 800c384:	617b      	str	r3, [r7, #20]
 800c386:	e018      	b.n	800c3ba <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d009      	beq.n	800c3a2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c38e:	6938      	ldr	r0, [r7, #16]
 800c390:	f000 fbaa 	bl	800cae8 <xQueueGiveMutexRecursive>
 800c394:	4603      	mov	r3, r0
 800c396:	2b01      	cmp	r3, #1
 800c398:	d00f      	beq.n	800c3ba <osMutexRelease+0x70>
        stat = osErrorResource;
 800c39a:	f06f 0302 	mvn.w	r3, #2
 800c39e:	617b      	str	r3, [r7, #20]
 800c3a0:	e00b      	b.n	800c3ba <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	6938      	ldr	r0, [r7, #16]
 800c3aa:	f000 fc71 	bl	800cc90 <xQueueGenericSend>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d002      	beq.n	800c3ba <osMutexRelease+0x70>
        stat = osErrorResource;
 800c3b4:	f06f 0302 	mvn.w	r3, #2
 800c3b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c3ba:	697b      	ldr	r3, [r7, #20]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	; 0x28
 800c3c8:	af02      	add	r7, sp, #8
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3d4:	f3ef 8305 	mrs	r3, IPSR
 800c3d8:	613b      	str	r3, [r7, #16]
  return(result);
 800c3da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d175      	bne.n	800c4cc <osSemaphoreNew+0x108>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d072      	beq.n	800c4cc <osSemaphoreNew+0x108>
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d86e      	bhi.n	800c4cc <osSemaphoreNew+0x108>
    mem = -1;
 800c3ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d015      	beq.n	800c426 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d006      	beq.n	800c410 <osSemaphoreNew+0x4c>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	2b4f      	cmp	r3, #79	; 0x4f
 800c408:	d902      	bls.n	800c410 <osSemaphoreNew+0x4c>
        mem = 1;
 800c40a:	2301      	movs	r3, #1
 800c40c:	61bb      	str	r3, [r7, #24]
 800c40e:	e00c      	b.n	800c42a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d108      	bne.n	800c42a <osSemaphoreNew+0x66>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d104      	bne.n	800c42a <osSemaphoreNew+0x66>
          mem = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	61bb      	str	r3, [r7, #24]
 800c424:	e001      	b.n	800c42a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c430:	d04c      	beq.n	800c4cc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d128      	bne.n	800c48a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d10a      	bne.n	800c454 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	2203      	movs	r2, #3
 800c444:	9200      	str	r2, [sp, #0]
 800c446:	2200      	movs	r2, #0
 800c448:	2100      	movs	r1, #0
 800c44a:	2001      	movs	r0, #1
 800c44c:	f000 fa2a 	bl	800c8a4 <xQueueGenericCreateStatic>
 800c450:	61f8      	str	r0, [r7, #28]
 800c452:	e005      	b.n	800c460 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c454:	2203      	movs	r2, #3
 800c456:	2100      	movs	r1, #0
 800c458:	2001      	movs	r0, #1
 800c45a:	f000 fa9b 	bl	800c994 <xQueueGenericCreate>
 800c45e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d022      	beq.n	800c4ac <osSemaphoreNew+0xe8>
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01f      	beq.n	800c4ac <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c46c:	2300      	movs	r3, #0
 800c46e:	2200      	movs	r2, #0
 800c470:	2100      	movs	r1, #0
 800c472:	69f8      	ldr	r0, [r7, #28]
 800c474:	f000 fc0c 	bl	800cc90 <xQueueGenericSend>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d016      	beq.n	800c4ac <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c47e:	69f8      	ldr	r0, [r7, #28]
 800c480:	f001 f898 	bl	800d5b4 <vQueueDelete>
            hSemaphore = NULL;
 800c484:	2300      	movs	r3, #0
 800c486:	61fb      	str	r3, [r7, #28]
 800c488:	e010      	b.n	800c4ac <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d108      	bne.n	800c4a2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	461a      	mov	r2, r3
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f000 fb8f 	bl	800cbbc <xQueueCreateCountingSemaphoreStatic>
 800c49e:	61f8      	str	r0, [r7, #28]
 800c4a0:	e004      	b.n	800c4ac <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c4a2:	68b9      	ldr	r1, [r7, #8]
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 fbc0 	bl	800cc2a <xQueueCreateCountingSemaphore>
 800c4aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00c      	beq.n	800c4cc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d003      	beq.n	800c4c0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	617b      	str	r3, [r7, #20]
 800c4be:	e001      	b.n	800c4c4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c4c4:	6979      	ldr	r1, [r7, #20]
 800c4c6:	69f8      	ldr	r0, [r7, #28]
 800c4c8:	f001 f9c0 	bl	800d84c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c4cc:	69fb      	ldr	r3, [r7, #28]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3720      	adds	r7, #32
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d103      	bne.n	800c4f8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c4f0:	f06f 0303 	mvn.w	r3, #3
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	e039      	b.n	800c56c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4f8:	f3ef 8305 	mrs	r3, IPSR
 800c4fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c500:	2b00      	cmp	r3, #0
 800c502:	d022      	beq.n	800c54a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c50a:	f06f 0303 	mvn.w	r3, #3
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e02c      	b.n	800c56c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c512:	2300      	movs	r3, #0
 800c514:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c516:	f107 0308 	add.w	r3, r7, #8
 800c51a:	461a      	mov	r2, r3
 800c51c:	2100      	movs	r1, #0
 800c51e:	6938      	ldr	r0, [r7, #16]
 800c520:	f000 ffc8 	bl	800d4b4 <xQueueReceiveFromISR>
 800c524:	4603      	mov	r3, r0
 800c526:	2b01      	cmp	r3, #1
 800c528:	d003      	beq.n	800c532 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c52a:	f06f 0302 	mvn.w	r3, #2
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e01c      	b.n	800c56c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d019      	beq.n	800c56c <osSemaphoreAcquire+0x94>
 800c538:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <osSemaphoreAcquire+0xa0>)
 800c53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	e010      	b.n	800c56c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6938      	ldr	r0, [r7, #16]
 800c54e:	f000 fea5 	bl	800d29c <xQueueSemaphoreTake>
 800c552:	4603      	mov	r3, r0
 800c554:	2b01      	cmp	r3, #1
 800c556:	d009      	beq.n	800c56c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d003      	beq.n	800c566 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c55e:	f06f 0301 	mvn.w	r3, #1
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	e002      	b.n	800c56c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c566:	f06f 0302 	mvn.w	r3, #2
 800c56a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c56c:	697b      	ldr	r3, [r7, #20]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c588:	2300      	movs	r3, #0
 800c58a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d103      	bne.n	800c59a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c592:	f06f 0303 	mvn.w	r3, #3
 800c596:	617b      	str	r3, [r7, #20]
 800c598:	e02c      	b.n	800c5f4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c59a:	f3ef 8305 	mrs	r3, IPSR
 800c59e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d01a      	beq.n	800c5dc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c5aa:	f107 0308 	add.w	r3, r7, #8
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6938      	ldr	r0, [r7, #16]
 800c5b2:	f000 fd06 	bl	800cfc2 <xQueueGiveFromISR>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d003      	beq.n	800c5c4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c5bc:	f06f 0302 	mvn.w	r3, #2
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	e017      	b.n	800c5f4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d014      	beq.n	800c5f4 <osSemaphoreRelease+0x78>
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	; (800c600 <osSemaphoreRelease+0x84>)
 800c5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d0:	601a      	str	r2, [r3, #0]
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	e00b      	b.n	800c5f4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c5dc:	2300      	movs	r3, #0
 800c5de:	2200      	movs	r2, #0
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6938      	ldr	r0, [r7, #16]
 800c5e4:	f000 fb54 	bl	800cc90 <xQueueGenericSend>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d002      	beq.n	800c5f4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c5ee:	f06f 0302 	mvn.w	r3, #2
 800c5f2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c5f4:	697b      	ldr	r3, [r7, #20]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	e000ed04 	.word	0xe000ed04

0800c604 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	4a07      	ldr	r2, [pc, #28]	; (800c630 <vApplicationGetIdleTaskMemory+0x2c>)
 800c614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	4a06      	ldr	r2, [pc, #24]	; (800c634 <vApplicationGetIdleTaskMemory+0x30>)
 800c61a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c622:	601a      	str	r2, [r3, #0]
}
 800c624:	bf00      	nop
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	20002a2c 	.word	0x20002a2c
 800c634:	20002ad8 	.word	0x20002ad8

0800c638 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4a07      	ldr	r2, [pc, #28]	; (800c664 <vApplicationGetTimerTaskMemory+0x2c>)
 800c648:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	4a06      	ldr	r2, [pc, #24]	; (800c668 <vApplicationGetTimerTaskMemory+0x30>)
 800c64e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c656:	601a      	str	r2, [r3, #0]
}
 800c658:	bf00      	nop
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr
 800c664:	20002ed8 	.word	0x20002ed8
 800c668:	20002f84 	.word	0x20002f84

0800c66c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f103 0208 	add.w	r2, r3, #8
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c684:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f103 0208 	add.w	r2, r3, #8
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f103 0208 	add.w	r2, r3, #8
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	1c5a      	adds	r2, r3, #1
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	601a      	str	r2, [r3, #0]
}
 800c702:	bf00      	nop
 800c704:	3714      	adds	r7, #20
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c70e:	b480      	push	{r7}
 800c710:	b085      	sub	sp, #20
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c724:	d103      	bne.n	800c72e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	e00c      	b.n	800c748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3308      	adds	r3, #8
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e002      	b.n	800c73c <vListInsert+0x2e>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	429a      	cmp	r2, r3
 800c746:	d2f6      	bcs.n	800c736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	601a      	str	r2, [r3, #0]
}
 800c774:	bf00      	nop
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6892      	ldr	r2, [r2, #8]
 800c796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	6852      	ldr	r2, [r2, #4]
 800c7a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d103      	bne.n	800c7b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	689a      	ldr	r2, [r3, #8]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	1e5a      	subs	r2, r3, #1
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10a      	bne.n	800c7fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7fa:	bf00      	nop
 800c7fc:	e7fe      	b.n	800c7fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7fe:	f002 fd71 	bl	800f2e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80a:	68f9      	ldr	r1, [r7, #12]
 800c80c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c80e:	fb01 f303 	mul.w	r3, r1, r3
 800c812:	441a      	add	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82e:	3b01      	subs	r3, #1
 800c830:	68f9      	ldr	r1, [r7, #12]
 800c832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c834:	fb01 f303 	mul.w	r3, r1, r3
 800c838:	441a      	add	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	22ff      	movs	r2, #255	; 0xff
 800c842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	22ff      	movs	r2, #255	; 0xff
 800c84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d114      	bne.n	800c87e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d01a      	beq.n	800c892 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	3310      	adds	r3, #16
 800c860:	4618      	mov	r0, r3
 800c862:	f001 fd13 	bl	800e28c <xTaskRemoveFromEventList>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d012      	beq.n	800c892 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c86c:	4b0c      	ldr	r3, [pc, #48]	; (800c8a0 <xQueueGenericReset+0xcc>)
 800c86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	e009      	b.n	800c892 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3310      	adds	r3, #16
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fef2 	bl	800c66c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3324      	adds	r3, #36	; 0x24
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff feed 	bl	800c66c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c892:	f002 fd57 	bl	800f344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c896:	2301      	movs	r3, #1
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	e000ed04 	.word	0xe000ed04

0800c8a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08e      	sub	sp, #56	; 0x38
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10a      	bne.n	800c8ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <xQueueGenericCreateStatic+0x52>
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <xQueueGenericCreateStatic+0x56>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <xQueueGenericCreateStatic+0x58>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10a      	bne.n	800c916 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	623b      	str	r3, [r7, #32]
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <xQueueGenericCreateStatic+0x7e>
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <xQueueGenericCreateStatic+0x82>
 800c922:	2301      	movs	r3, #1
 800c924:	e000      	b.n	800c928 <xQueueGenericCreateStatic+0x84>
 800c926:	2300      	movs	r3, #0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	61fb      	str	r3, [r7, #28]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c942:	2350      	movs	r3, #80	; 0x50
 800c944:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2b50      	cmp	r3, #80	; 0x50
 800c94a:	d00a      	beq.n	800c962 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c950:	f383 8811 	msr	BASEPRI, r3
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	61bb      	str	r3, [r7, #24]
}
 800c95e:	bf00      	nop
 800c960:	e7fe      	b.n	800c960 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c962:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00d      	beq.n	800c98a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	2201      	movs	r2, #1
 800c972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c976:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	4613      	mov	r3, r2
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f000 f83f 	bl	800ca08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3730      	adds	r7, #48	; 0x30
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08a      	sub	sp, #40	; 0x28
 800c998:	af02      	add	r7, sp, #8
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <xQueueGenericCreate+0x2a>
	__asm volatile
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	f383 8811 	msr	BASEPRI, r3
 800c9b0:	f3bf 8f6f 	isb	sy
 800c9b4:	f3bf 8f4f 	dsb	sy
 800c9b8:	613b      	str	r3, [r7, #16]
}
 800c9ba:	bf00      	nop
 800c9bc:	e7fe      	b.n	800c9bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	fb02 f303 	mul.w	r3, r2, r3
 800c9c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	3350      	adds	r3, #80	; 0x50
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f002 fdab 	bl	800f528 <pvPortMalloc>
 800c9d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d011      	beq.n	800c9fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	3350      	adds	r3, #80	; 0x50
 800c9e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9ec:	79fa      	ldrb	r2, [r7, #7]
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	68b9      	ldr	r1, [r7, #8]
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 f805 	bl	800ca08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c9fe:	69bb      	ldr	r3, [r7, #24]
	}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3720      	adds	r7, #32
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	69ba      	ldr	r2, [r7, #24]
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	e002      	b.n	800ca2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca36:	2101      	movs	r1, #1
 800ca38:	69b8      	ldr	r0, [r7, #24]
 800ca3a:	f7ff fecb 	bl	800c7d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	78fa      	ldrb	r2, [r7, #3]
 800ca42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca46:	bf00      	nop
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00e      	beq.n	800ca7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2200      	movs	r2, #0
 800ca72:	2100      	movs	r1, #0
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f90b 	bl	800cc90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ca7a:	bf00      	nop
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b086      	sub	sp, #24
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	4603      	mov	r3, r0
 800ca8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	617b      	str	r3, [r7, #20]
 800ca90:	2300      	movs	r3, #0
 800ca92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	461a      	mov	r2, r3
 800ca98:	6939      	ldr	r1, [r7, #16]
 800ca9a:	6978      	ldr	r0, [r7, #20]
 800ca9c:	f7ff ff7a 	bl	800c994 <xQueueGenericCreate>
 800caa0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f7ff ffd3 	bl	800ca4e <prvInitialiseMutex>

		return xNewQueue;
 800caa8:	68fb      	ldr	r3, [r7, #12]
	}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b088      	sub	sp, #32
 800cab6:	af02      	add	r7, sp, #8
 800cab8:	4603      	mov	r3, r0
 800caba:	6039      	str	r1, [r7, #0]
 800cabc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cabe:	2301      	movs	r3, #1
 800cac0:	617b      	str	r3, [r7, #20]
 800cac2:	2300      	movs	r3, #0
 800cac4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cac6:	79fb      	ldrb	r3, [r7, #7]
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2200      	movs	r2, #0
 800cace:	6939      	ldr	r1, [r7, #16]
 800cad0:	6978      	ldr	r0, [r7, #20]
 800cad2:	f7ff fee7 	bl	800c8a4 <xQueueGenericCreateStatic>
 800cad6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff ffb8 	bl	800ca4e <prvInitialiseMutex>

		return xNewQueue;
 800cade:	68fb      	ldr	r3, [r7, #12]
	}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cae8:	b590      	push	{r4, r7, lr}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10a      	bne.n	800cb10 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	60fb      	str	r3, [r7, #12]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	689c      	ldr	r4, [r3, #8]
 800cb14:	f001 fd7c 	bl	800e610 <xTaskGetCurrentTaskHandle>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	429c      	cmp	r4, r3
 800cb1c:	d111      	bne.n	800cb42 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	1e5a      	subs	r2, r3, #1
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d105      	bne.n	800cb3c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cb30:	2300      	movs	r3, #0
 800cb32:	2200      	movs	r2, #0
 800cb34:	2100      	movs	r1, #0
 800cb36:	6938      	ldr	r0, [r7, #16]
 800cb38:	f000 f8aa 	bl	800cc90 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	e001      	b.n	800cb46 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cb46:	697b      	ldr	r3, [r7, #20]
	}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	371c      	adds	r7, #28
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd90      	pop	{r4, r7, pc}

0800cb50 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cb50:	b590      	push	{r4, r7, lr}
 800cb52:	b087      	sub	sp, #28
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	60fb      	str	r3, [r7, #12]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	689c      	ldr	r4, [r3, #8]
 800cb7e:	f001 fd47 	bl	800e610 <xTaskGetCurrentTaskHandle>
 800cb82:	4603      	mov	r3, r0
 800cb84:	429c      	cmp	r4, r3
 800cb86:	d107      	bne.n	800cb98 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	1c5a      	adds	r2, r3, #1
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cb92:	2301      	movs	r3, #1
 800cb94:	617b      	str	r3, [r7, #20]
 800cb96:	e00c      	b.n	800cbb2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6938      	ldr	r0, [r7, #16]
 800cb9c:	f000 fb7e 	bl	800d29c <xQueueSemaphoreTake>
 800cba0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	1c5a      	adds	r2, r3, #1
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cbb2:	697b      	ldr	r3, [r7, #20]
	}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	371c      	adds	r7, #28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd90      	pop	{r4, r7, pc}

0800cbbc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08a      	sub	sp, #40	; 0x28
 800cbc0:	af02      	add	r7, sp, #8
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10a      	bne.n	800cbe4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	61bb      	str	r3, [r7, #24]
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d90a      	bls.n	800cc02 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	617b      	str	r3, [r7, #20]
}
 800cbfe:	bf00      	nop
 800cc00:	e7fe      	b.n	800cc00 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc02:	2302      	movs	r3, #2
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f7ff fe49 	bl	800c8a4 <xQueueGenericCreateStatic>
 800cc12:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d002      	beq.n	800cc20 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc20:	69fb      	ldr	r3, [r7, #28]
	}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3720      	adds	r7, #32
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b086      	sub	sp, #24
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10a      	bne.n	800cc50 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	613b      	str	r3, [r7, #16]
}
 800cc4c:	bf00      	nop
 800cc4e:	e7fe      	b.n	800cc4e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d90a      	bls.n	800cc6e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	60fb      	str	r3, [r7, #12]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc6e:	2202      	movs	r2, #2
 800cc70:	2100      	movs	r1, #0
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff fe8e 	bl	800c994 <xQueueGenericCreate>
 800cc78:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc86:	697b      	ldr	r3, [r7, #20]
	}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08e      	sub	sp, #56	; 0x38
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10a      	bne.n	800ccc2 <xQueueGenericSend+0x32>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d103      	bne.n	800ccd0 <xQueueGenericSend+0x40>
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <xQueueGenericSend+0x44>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e000      	b.n	800ccd6 <xQueueGenericSend+0x46>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10a      	bne.n	800ccf0 <xQueueGenericSend+0x60>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	d103      	bne.n	800ccfe <xQueueGenericSend+0x6e>
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d101      	bne.n	800cd02 <xQueueGenericSend+0x72>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e000      	b.n	800cd04 <xQueueGenericSend+0x74>
 800cd02:	2300      	movs	r3, #0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10a      	bne.n	800cd1e <xQueueGenericSend+0x8e>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	623b      	str	r3, [r7, #32]
}
 800cd1a:	bf00      	nop
 800cd1c:	e7fe      	b.n	800cd1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd1e:	f001 fc87 	bl	800e630 <xTaskGetSchedulerState>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <xQueueGenericSend+0x9e>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <xQueueGenericSend+0xa2>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e000      	b.n	800cd34 <xQueueGenericSend+0xa4>
 800cd32:	2300      	movs	r3, #0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10a      	bne.n	800cd4e <xQueueGenericSend+0xbe>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	61fb      	str	r3, [r7, #28]
}
 800cd4a:	bf00      	nop
 800cd4c:	e7fe      	b.n	800cd4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd4e:	f002 fac9 	bl	800f2e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d302      	bcc.n	800cd64 <xQueueGenericSend+0xd4>
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d129      	bne.n	800cdb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd6a:	f000 fc5e 	bl	800d62a <prvCopyDataToQueue>
 800cd6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d010      	beq.n	800cd9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	3324      	adds	r3, #36	; 0x24
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f001 fa85 	bl	800e28c <xTaskRemoveFromEventList>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d013      	beq.n	800cdb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd88:	4b3f      	ldr	r3, [pc, #252]	; (800ce88 <xQueueGenericSend+0x1f8>)
 800cd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd8e:	601a      	str	r2, [r3, #0]
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	e00a      	b.n	800cdb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d007      	beq.n	800cdb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cda0:	4b39      	ldr	r3, [pc, #228]	; (800ce88 <xQueueGenericSend+0x1f8>)
 800cda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cdb0:	f002 fac8 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e063      	b.n	800ce80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d103      	bne.n	800cdc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdbe:	f002 fac1 	bl	800f344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	e05c      	b.n	800ce80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d106      	bne.n	800cdda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdcc:	f107 0314 	add.w	r3, r7, #20
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f001 fabf 	bl	800e354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdda:	f002 fab3 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdde:	f001 f819 	bl	800de14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cde2:	f002 fa7f 	bl	800f2e4 <vPortEnterCritical>
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdec:	b25b      	sxtb	r3, r3
 800cdee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdf2:	d103      	bne.n	800cdfc <xQueueGenericSend+0x16c>
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce02:	b25b      	sxtb	r3, r3
 800ce04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce08:	d103      	bne.n	800ce12 <xQueueGenericSend+0x182>
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce12:	f002 fa97 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce16:	1d3a      	adds	r2, r7, #4
 800ce18:	f107 0314 	add.w	r3, r7, #20
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f001 faae 	bl	800e380 <xTaskCheckForTimeOut>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d124      	bne.n	800ce74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce2c:	f000 fcf5 	bl	800d81a <prvIsQueueFull>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d018      	beq.n	800ce68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce38:	3310      	adds	r3, #16
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f001 f9d4 	bl	800e1ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce46:	f000 fc80 	bl	800d74a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce4a:	f000 fff1 	bl	800de30 <xTaskResumeAll>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f47f af7c 	bne.w	800cd4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce56:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <xQueueGenericSend+0x1f8>)
 800ce58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	e772      	b.n	800cd4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce6a:	f000 fc6e 	bl	800d74a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce6e:	f000 ffdf 	bl	800de30 <xTaskResumeAll>
 800ce72:	e76c      	b.n	800cd4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce76:	f000 fc68 	bl	800d74a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce7a:	f000 ffd9 	bl	800de30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3738      	adds	r7, #56	; 0x38
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	e000ed04 	.word	0xe000ed04

0800ce8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b090      	sub	sp, #64	; 0x40
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceb6:	bf00      	nop
 800ceb8:	e7fe      	b.n	800ceb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d103      	bne.n	800cec8 <xQueueGenericSendFromISR+0x3c>
 800cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d101      	bne.n	800cecc <xQueueGenericSendFromISR+0x40>
 800cec8:	2301      	movs	r3, #1
 800ceca:	e000      	b.n	800cece <xQueueGenericSendFromISR+0x42>
 800cecc:	2300      	movs	r3, #0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d103      	bne.n	800cef6 <xQueueGenericSendFromISR+0x6a>
 800ceee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d101      	bne.n	800cefa <xQueueGenericSendFromISR+0x6e>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e000      	b.n	800cefc <xQueueGenericSendFromISR+0x70>
 800cefa:	2300      	movs	r3, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10a      	bne.n	800cf16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	623b      	str	r3, [r7, #32]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf16:	f002 fac7 	bl	800f4a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf1a:	f3ef 8211 	mrs	r2, BASEPRI
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	61fa      	str	r2, [r7, #28]
 800cf30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d302      	bcc.n	800cf48 <xQueueGenericSendFromISR+0xbc>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d12f      	bne.n	800cfa8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf58:	683a      	ldr	r2, [r7, #0]
 800cf5a:	68b9      	ldr	r1, [r7, #8]
 800cf5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf5e:	f000 fb64 	bl	800d62a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf6a:	d112      	bne.n	800cf92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d016      	beq.n	800cfa2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	3324      	adds	r3, #36	; 0x24
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f001 f987 	bl	800e28c <xTaskRemoveFromEventList>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d00e      	beq.n	800cfa2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00b      	beq.n	800cfa2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]
 800cf90:	e007      	b.n	800cfa2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf96:	3301      	adds	r3, #1
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	b25a      	sxtb	r2, r3
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cfa6:	e001      	b.n	800cfac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cfb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3740      	adds	r7, #64	; 0x40
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b08e      	sub	sp, #56	; 0x38
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10a      	bne.n	800cfec <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	623b      	str	r3, [r7, #32]
}
 800cfe8:	bf00      	nop
 800cfea:	e7fe      	b.n	800cfea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00a      	beq.n	800d00a <xQueueGiveFromISR+0x48>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	61fb      	str	r3, [r7, #28]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d103      	bne.n	800d01a <xQueueGiveFromISR+0x58>
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <xQueueGiveFromISR+0x5c>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <xQueueGiveFromISR+0x5e>
 800d01e:	2300      	movs	r3, #0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <xQueueGiveFromISR+0x78>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	61bb      	str	r3, [r7, #24]
}
 800d036:	bf00      	nop
 800d038:	e7fe      	b.n	800d038 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d03a:	f002 fa35 	bl	800f4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d03e:	f3ef 8211 	mrs	r2, BASEPRI
 800d042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	617a      	str	r2, [r7, #20]
 800d054:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d056:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d058:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d066:	429a      	cmp	r2, r3
 800d068:	d22b      	bcs.n	800d0c2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	1c5a      	adds	r2, r3, #1
 800d078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d07c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d084:	d112      	bne.n	800d0ac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d016      	beq.n	800d0bc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	3324      	adds	r3, #36	; 0x24
 800d092:	4618      	mov	r0, r3
 800d094:	f001 f8fa 	bl	800e28c <xTaskRemoveFromEventList>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00e      	beq.n	800d0bc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00b      	beq.n	800d0bc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	601a      	str	r2, [r3, #0]
 800d0aa:	e007      	b.n	800d0bc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	b25a      	sxtb	r2, r3
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	637b      	str	r3, [r7, #52]	; 0x34
 800d0c0:	e001      	b.n	800d0c6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f383 8811 	msr	BASEPRI, r3
}
 800d0d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3738      	adds	r7, #56	; 0x38
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08c      	sub	sp, #48	; 0x30
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10a      	bne.n	800d10c <xQueueReceive+0x30>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	623b      	str	r3, [r7, #32]
}
 800d108:	bf00      	nop
 800d10a:	e7fe      	b.n	800d10a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d103      	bne.n	800d11a <xQueueReceive+0x3e>
 800d112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <xQueueReceive+0x42>
 800d11a:	2301      	movs	r3, #1
 800d11c:	e000      	b.n	800d120 <xQueueReceive+0x44>
 800d11e:	2300      	movs	r3, #0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10a      	bne.n	800d13a <xQueueReceive+0x5e>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	61fb      	str	r3, [r7, #28]
}
 800d136:	bf00      	nop
 800d138:	e7fe      	b.n	800d138 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d13a:	f001 fa79 	bl	800e630 <xTaskGetSchedulerState>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d102      	bne.n	800d14a <xQueueReceive+0x6e>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <xQueueReceive+0x72>
 800d14a:	2301      	movs	r3, #1
 800d14c:	e000      	b.n	800d150 <xQueueReceive+0x74>
 800d14e:	2300      	movs	r3, #0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <xQueueReceive+0x8e>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	61bb      	str	r3, [r7, #24]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d16a:	f002 f8bb 	bl	800f2e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	2b00      	cmp	r3, #0
 800d178:	d01f      	beq.n	800d1ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d17a:	68b9      	ldr	r1, [r7, #8]
 800d17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d17e:	f000 fabe 	bl	800d6fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	1e5a      	subs	r2, r3, #1
 800d186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d188:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00f      	beq.n	800d1b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	3310      	adds	r3, #16
 800d196:	4618      	mov	r0, r3
 800d198:	f001 f878 	bl	800e28c <xTaskRemoveFromEventList>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d007      	beq.n	800d1b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1a2:	4b3d      	ldr	r3, [pc, #244]	; (800d298 <xQueueReceive+0x1bc>)
 800d1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1b2:	f002 f8c7 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e069      	b.n	800d28e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d103      	bne.n	800d1c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1c0:	f002 f8c0 	bl	800f344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e062      	b.n	800d28e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d106      	bne.n	800d1dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1ce:	f107 0310 	add.w	r3, r7, #16
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f001 f8be 	bl	800e354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1dc:	f002 f8b2 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1e0:	f000 fe18 	bl	800de14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1e4:	f002 f87e 	bl	800f2e4 <vPortEnterCritical>
 800d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1ee:	b25b      	sxtb	r3, r3
 800d1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1f4:	d103      	bne.n	800d1fe <xQueueReceive+0x122>
 800d1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d204:	b25b      	sxtb	r3, r3
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d20a:	d103      	bne.n	800d214 <xQueueReceive+0x138>
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d214:	f002 f896 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d218:	1d3a      	adds	r2, r7, #4
 800d21a:	f107 0310 	add.w	r3, r7, #16
 800d21e:	4611      	mov	r1, r2
 800d220:	4618      	mov	r0, r3
 800d222:	f001 f8ad 	bl	800e380 <xTaskCheckForTimeOut>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d123      	bne.n	800d274 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d22e:	f000 fade 	bl	800d7ee <prvIsQueueEmpty>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d017      	beq.n	800d268 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	3324      	adds	r3, #36	; 0x24
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f000 ffd3 	bl	800e1ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d248:	f000 fa7f 	bl	800d74a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d24c:	f000 fdf0 	bl	800de30 <xTaskResumeAll>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d189      	bne.n	800d16a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d256:	4b10      	ldr	r3, [pc, #64]	; (800d298 <xQueueReceive+0x1bc>)
 800d258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	e780      	b.n	800d16a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26a:	f000 fa6e 	bl	800d74a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d26e:	f000 fddf 	bl	800de30 <xTaskResumeAll>
 800d272:	e77a      	b.n	800d16a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d276:	f000 fa68 	bl	800d74a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d27a:	f000 fdd9 	bl	800de30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d27e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d280:	f000 fab5 	bl	800d7ee <prvIsQueueEmpty>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	f43f af6f 	beq.w	800d16a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d28c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3730      	adds	r7, #48	; 0x30
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b08e      	sub	sp, #56	; 0x38
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10a      	bne.n	800d2ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	623b      	str	r3, [r7, #32]
}
 800d2ca:	bf00      	nop
 800d2cc:	e7fe      	b.n	800d2cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	61fb      	str	r3, [r7, #28]
}
 800d2e8:	bf00      	nop
 800d2ea:	e7fe      	b.n	800d2ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2ec:	f001 f9a0 	bl	800e630 <xTaskGetSchedulerState>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d102      	bne.n	800d2fc <xQueueSemaphoreTake+0x60>
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <xQueueSemaphoreTake+0x64>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <xQueueSemaphoreTake+0x66>
 800d300:	2300      	movs	r3, #0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10a      	bne.n	800d31c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	61bb      	str	r3, [r7, #24]
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d31c:	f001 ffe2 	bl	800f2e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d324:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d024      	beq.n	800d376 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	1e5a      	subs	r2, r3, #1
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d104      	bne.n	800d346 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d33c:	f001 faee 	bl	800e91c <pvTaskIncrementMutexHeldCount>
 800d340:	4602      	mov	r2, r0
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00f      	beq.n	800d36e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	3310      	adds	r3, #16
 800d352:	4618      	mov	r0, r3
 800d354:	f000 ff9a 	bl	800e28c <xTaskRemoveFromEventList>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d007      	beq.n	800d36e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d35e:	4b54      	ldr	r3, [pc, #336]	; (800d4b0 <xQueueSemaphoreTake+0x214>)
 800d360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d364:	601a      	str	r2, [r3, #0]
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d36e:	f001 ffe9 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800d372:	2301      	movs	r3, #1
 800d374:	e097      	b.n	800d4a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d111      	bne.n	800d3a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00a      	beq.n	800d398 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	617b      	str	r3, [r7, #20]
}
 800d394:	bf00      	nop
 800d396:	e7fe      	b.n	800d396 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d398:	f001 ffd4 	bl	800f344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d39c:	2300      	movs	r3, #0
 800d39e:	e082      	b.n	800d4a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d106      	bne.n	800d3b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3a6:	f107 030c 	add.w	r3, r7, #12
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 ffd2 	bl	800e354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3b4:	f001 ffc6 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3b8:	f000 fd2c 	bl	800de14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3bc:	f001 ff92 	bl	800f2e4 <vPortEnterCritical>
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3c6:	b25b      	sxtb	r3, r3
 800d3c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3cc:	d103      	bne.n	800d3d6 <xQueueSemaphoreTake+0x13a>
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3dc:	b25b      	sxtb	r3, r3
 800d3de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3e2:	d103      	bne.n	800d3ec <xQueueSemaphoreTake+0x150>
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ec:	f001 ffaa 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3f0:	463a      	mov	r2, r7
 800d3f2:	f107 030c 	add.w	r3, r7, #12
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 ffc1 	bl	800e380 <xTaskCheckForTimeOut>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d132      	bne.n	800d46a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d406:	f000 f9f2 	bl	800d7ee <prvIsQueueEmpty>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d026      	beq.n	800d45e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d109      	bne.n	800d42c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d418:	f001 ff64 	bl	800f2e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	4618      	mov	r0, r3
 800d422:	f001 f923 	bl	800e66c <xTaskPriorityInherit>
 800d426:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d428:	f001 ff8c 	bl	800f344 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	3324      	adds	r3, #36	; 0x24
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f000 fed9 	bl	800e1ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d43a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d43c:	f000 f985 	bl	800d74a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d440:	f000 fcf6 	bl	800de30 <xTaskResumeAll>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	f47f af68 	bne.w	800d31c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d44c:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <xQueueSemaphoreTake+0x214>)
 800d44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	e75e      	b.n	800d31c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d45e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d460:	f000 f973 	bl	800d74a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d464:	f000 fce4 	bl	800de30 <xTaskResumeAll>
 800d468:	e758      	b.n	800d31c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d46a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d46c:	f000 f96d 	bl	800d74a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d470:	f000 fcde 	bl	800de30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d476:	f000 f9ba 	bl	800d7ee <prvIsQueueEmpty>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f43f af4d 	beq.w	800d31c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00d      	beq.n	800d4a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d488:	f001 ff2c 	bl	800f2e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d48c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d48e:	f000 f8b4 	bl	800d5fa <prvGetDisinheritPriorityAfterTimeout>
 800d492:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d49a:	4618      	mov	r0, r3
 800d49c:	f001 f9bc 	bl	800e818 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d4a0:	f001 ff50 	bl	800f344 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3738      	adds	r7, #56	; 0x38
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b08e      	sub	sp, #56	; 0x38
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10a      	bne.n	800d4e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	623b      	str	r3, [r7, #32]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d103      	bne.n	800d4ee <xQueueReceiveFromISR+0x3a>
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <xQueueReceiveFromISR+0x3e>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e000      	b.n	800d4f4 <xQueueReceiveFromISR+0x40>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10a      	bne.n	800d50e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	61fb      	str	r3, [r7, #28]
}
 800d50a:	bf00      	nop
 800d50c:	e7fe      	b.n	800d50c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d50e:	f001 ffcb 	bl	800f4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d512:	f3ef 8211 	mrs	r2, BASEPRI
 800d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	61ba      	str	r2, [r7, #24]
 800d528:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d52a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d52c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d532:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d536:	2b00      	cmp	r3, #0
 800d538:	d02f      	beq.n	800d59a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d544:	68b9      	ldr	r1, [r7, #8]
 800d546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d548:	f000 f8d9 	bl	800d6fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54e:	1e5a      	subs	r2, r3, #1
 800d550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d552:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d554:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d55c:	d112      	bne.n	800d584 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d016      	beq.n	800d594 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	3310      	adds	r3, #16
 800d56a:	4618      	mov	r0, r3
 800d56c:	f000 fe8e 	bl	800e28c <xTaskRemoveFromEventList>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00e      	beq.n	800d594 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00b      	beq.n	800d594 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	e007      	b.n	800d594 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d588:	3301      	adds	r3, #1
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	b25a      	sxtb	r2, r3
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d594:	2301      	movs	r3, #1
 800d596:	637b      	str	r3, [r7, #52]	; 0x34
 800d598:	e001      	b.n	800d59e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	637b      	str	r3, [r7, #52]	; 0x34
 800d59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	f383 8811 	msr	BASEPRI, r3
}
 800d5a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3738      	adds	r7, #56	; 0x38
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10a      	bne.n	800d5dc <vQueueDelete+0x28>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	60bb      	str	r3, [r7, #8]
}
 800d5d8:	bf00      	nop
 800d5da:	e7fe      	b.n	800d5da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f000 f95f 	bl	800d8a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d102      	bne.n	800d5f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f002 f867 	bl	800f6c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5f2:	bf00      	nop
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b085      	sub	sp, #20
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	2b00      	cmp	r3, #0
 800d608:	d006      	beq.n	800d618 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d614:	60fb      	str	r3, [r7, #12]
 800d616:	e001      	b.n	800d61c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d618:	2300      	movs	r3, #0
 800d61a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d61c:	68fb      	ldr	r3, [r7, #12]
	}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b086      	sub	sp, #24
 800d62e:	af00      	add	r7, sp, #0
 800d630:	60f8      	str	r0, [r7, #12]
 800d632:	60b9      	str	r1, [r7, #8]
 800d634:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d636:	2300      	movs	r3, #0
 800d638:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10d      	bne.n	800d664 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d14d      	bne.n	800d6ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	4618      	mov	r0, r3
 800d656:	f001 f871 	bl	800e73c <xTaskPriorityDisinherit>
 800d65a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2200      	movs	r2, #0
 800d660:	609a      	str	r2, [r3, #8]
 800d662:	e043      	b.n	800d6ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d119      	bne.n	800d69e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6858      	ldr	r0, [r3, #4]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d672:	461a      	mov	r2, r3
 800d674:	68b9      	ldr	r1, [r7, #8]
 800d676:	f003 fcc0 	bl	8010ffa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d682:	441a      	add	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	429a      	cmp	r2, r3
 800d692:	d32b      	bcc.n	800d6ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	605a      	str	r2, [r3, #4]
 800d69c:	e026      	b.n	800d6ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	68d8      	ldr	r0, [r3, #12]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	68b9      	ldr	r1, [r7, #8]
 800d6aa:	f003 fca6 	bl	8010ffa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	68da      	ldr	r2, [r3, #12]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b6:	425b      	negs	r3, r3
 800d6b8:	441a      	add	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	68da      	ldr	r2, [r3, #12]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d207      	bcs.n	800d6da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	689a      	ldr	r2, [r3, #8]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	425b      	negs	r3, r3
 800d6d4:	441a      	add	r2, r3
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d105      	bne.n	800d6ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	1c5a      	adds	r2, r3, #1
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6f4:	697b      	ldr	r3, [r7, #20]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3718      	adds	r7, #24
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b082      	sub	sp, #8
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d018      	beq.n	800d742 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	68da      	ldr	r2, [r3, #12]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d718:	441a      	add	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68da      	ldr	r2, [r3, #12]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	429a      	cmp	r2, r3
 800d728:	d303      	bcc.n	800d732 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68d9      	ldr	r1, [r3, #12]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73a:	461a      	mov	r2, r3
 800d73c:	6838      	ldr	r0, [r7, #0]
 800d73e:	f003 fc5c 	bl	8010ffa <memcpy>
	}
}
 800d742:	bf00      	nop
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d752:	f001 fdc7 	bl	800f2e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d75c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d75e:	e011      	b.n	800d784 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d764:	2b00      	cmp	r3, #0
 800d766:	d012      	beq.n	800d78e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	3324      	adds	r3, #36	; 0x24
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 fd8d 	bl	800e28c <xTaskRemoveFromEventList>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d778:	f000 fe64 	bl	800e444 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	3b01      	subs	r3, #1
 800d780:	b2db      	uxtb	r3, r3
 800d782:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	dce9      	bgt.n	800d760 <prvUnlockQueue+0x16>
 800d78c:	e000      	b.n	800d790 <prvUnlockQueue+0x46>
					break;
 800d78e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	22ff      	movs	r2, #255	; 0xff
 800d794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d798:	f001 fdd4 	bl	800f344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d79c:	f001 fda2 	bl	800f2e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7a8:	e011      	b.n	800d7ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d012      	beq.n	800d7d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	3310      	adds	r3, #16
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f000 fd68 	bl	800e28c <xTaskRemoveFromEventList>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7c2:	f000 fe3f 	bl	800e444 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7c6:	7bbb      	ldrb	r3, [r7, #14]
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	dce9      	bgt.n	800d7aa <prvUnlockQueue+0x60>
 800d7d6:	e000      	b.n	800d7da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	22ff      	movs	r2, #255	; 0xff
 800d7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7e2:	f001 fdaf 	bl	800f344 <vPortExitCritical>
}
 800d7e6:	bf00      	nop
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7f6:	f001 fd75 	bl	800f2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d802:	2301      	movs	r3, #1
 800d804:	60fb      	str	r3, [r7, #12]
 800d806:	e001      	b.n	800d80c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d808:	2300      	movs	r3, #0
 800d80a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d80c:	f001 fd9a 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800d810:	68fb      	ldr	r3, [r7, #12]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d822:	f001 fd5f 	bl	800f2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82e:	429a      	cmp	r2, r3
 800d830:	d102      	bne.n	800d838 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d832:	2301      	movs	r3, #1
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	e001      	b.n	800d83c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d838:	2300      	movs	r3, #0
 800d83a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d83c:	f001 fd82 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800d840:	68fb      	ldr	r3, [r7, #12]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
	...

0800d84c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	e014      	b.n	800d886 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d85c:	4a0f      	ldr	r2, [pc, #60]	; (800d89c <vQueueAddToRegistry+0x50>)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10b      	bne.n	800d880 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d868:	490c      	ldr	r1, [pc, #48]	; (800d89c <vQueueAddToRegistry+0x50>)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d872:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <vQueueAddToRegistry+0x50>)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	4413      	add	r3, r2
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d87e:	e006      	b.n	800d88e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	3301      	adds	r3, #1
 800d884:	60fb      	str	r3, [r7, #12]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b07      	cmp	r3, #7
 800d88a:	d9e7      	bls.n	800d85c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d88c:	bf00      	nop
 800d88e:	bf00      	nop
 800d890:	3714      	adds	r7, #20
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	20003784 	.word	0x20003784

0800d8a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	e016      	b.n	800d8dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8ae:	4a10      	ldr	r2, [pc, #64]	; (800d8f0 <vQueueUnregisterQueue+0x50>)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d10b      	bne.n	800d8d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8be:	4a0c      	ldr	r2, [pc, #48]	; (800d8f0 <vQueueUnregisterQueue+0x50>)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8c8:	4a09      	ldr	r2, [pc, #36]	; (800d8f0 <vQueueUnregisterQueue+0x50>)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	00db      	lsls	r3, r3, #3
 800d8ce:	4413      	add	r3, r2
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	605a      	str	r2, [r3, #4]
				break;
 800d8d4:	e006      	b.n	800d8e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	60fb      	str	r3, [r7, #12]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b07      	cmp	r3, #7
 800d8e0:	d9e5      	bls.n	800d8ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8e2:	bf00      	nop
 800d8e4:	bf00      	nop
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	20003784 	.word	0x20003784

0800d8f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d904:	f001 fcee 	bl	800f2e4 <vPortEnterCritical>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d90e:	b25b      	sxtb	r3, r3
 800d910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d914:	d103      	bne.n	800d91e <vQueueWaitForMessageRestricted+0x2a>
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d924:	b25b      	sxtb	r3, r3
 800d926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d92a:	d103      	bne.n	800d934 <vQueueWaitForMessageRestricted+0x40>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d934:	f001 fd06 	bl	800f344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d106      	bne.n	800d94e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	3324      	adds	r3, #36	; 0x24
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 fc73 	bl	800e234 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d94e:	6978      	ldr	r0, [r7, #20]
 800d950:	f7ff fefb 	bl	800d74a <prvUnlockQueue>
	}
 800d954:	bf00      	nop
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08e      	sub	sp, #56	; 0x38
 800d960:	af04      	add	r7, sp, #16
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
 800d968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10a      	bne.n	800d986 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	623b      	str	r3, [r7, #32]
}
 800d982:	bf00      	nop
 800d984:	e7fe      	b.n	800d984 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10a      	bne.n	800d9a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	61fb      	str	r3, [r7, #28]
}
 800d99e:	bf00      	nop
 800d9a0:	e7fe      	b.n	800d9a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d9a2:	23ac      	movs	r3, #172	; 0xac
 800d9a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	2bac      	cmp	r3, #172	; 0xac
 800d9aa:	d00a      	beq.n	800d9c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	61bb      	str	r3, [r7, #24]
}
 800d9be:	bf00      	nop
 800d9c0:	e7fe      	b.n	800d9c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d01e      	beq.n	800da08 <xTaskCreateStatic+0xac>
 800d9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d01b      	beq.n	800da08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	2202      	movs	r2, #2
 800d9de:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	9303      	str	r3, [sp, #12]
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	9302      	str	r3, [sp, #8]
 800d9ea:	f107 0314 	add.w	r3, r7, #20
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	68b9      	ldr	r1, [r7, #8]
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 f850 	bl	800daa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da02:	f000 f8f3 	bl	800dbec <prvAddNewTaskToReadyList>
 800da06:	e001      	b.n	800da0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800da08:	2300      	movs	r3, #0
 800da0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da0c:	697b      	ldr	r3, [r7, #20]
	}
 800da0e:	4618      	mov	r0, r3
 800da10:	3728      	adds	r7, #40	; 0x28
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da16:	b580      	push	{r7, lr}
 800da18:	b08c      	sub	sp, #48	; 0x30
 800da1a:	af04      	add	r7, sp, #16
 800da1c:	60f8      	str	r0, [r7, #12]
 800da1e:	60b9      	str	r1, [r7, #8]
 800da20:	603b      	str	r3, [r7, #0]
 800da22:	4613      	mov	r3, r2
 800da24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da26:	88fb      	ldrh	r3, [r7, #6]
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	4618      	mov	r0, r3
 800da2c:	f001 fd7c 	bl	800f528 <pvPortMalloc>
 800da30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00e      	beq.n	800da56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da38:	20ac      	movs	r0, #172	; 0xac
 800da3a:	f001 fd75 	bl	800f528 <pvPortMalloc>
 800da3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	631a      	str	r2, [r3, #48]	; 0x30
 800da4c:	e005      	b.n	800da5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da4e:	6978      	ldr	r0, [r7, #20]
 800da50:	f001 fe36 	bl	800f6c0 <vPortFree>
 800da54:	e001      	b.n	800da5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da56:	2300      	movs	r3, #0
 800da58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d017      	beq.n	800da90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da68:	88fa      	ldrh	r2, [r7, #6]
 800da6a:	2300      	movs	r3, #0
 800da6c:	9303      	str	r3, [sp, #12]
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	9302      	str	r3, [sp, #8]
 800da72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 f80e 	bl	800daa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da84:	69f8      	ldr	r0, [r7, #28]
 800da86:	f000 f8b1 	bl	800dbec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da8a:	2301      	movs	r3, #1
 800da8c:	61bb      	str	r3, [r7, #24]
 800da8e:	e002      	b.n	800da96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da96:	69bb      	ldr	r3, [r7, #24]
	}
 800da98:	4618      	mov	r0, r3
 800da9a:	3720      	adds	r7, #32
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b088      	sub	sp, #32
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
 800daac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	461a      	mov	r2, r3
 800dab8:	21a5      	movs	r1, #165	; 0xa5
 800daba:	f003 f9c8 	bl	8010e4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dac8:	3b01      	subs	r3, #1
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4413      	add	r3, r2
 800dace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	f023 0307 	bic.w	r3, r3, #7
 800dad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	f003 0307 	and.w	r3, r3, #7
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00a      	beq.n	800daf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	617b      	str	r3, [r7, #20]
}
 800daf4:	bf00      	nop
 800daf6:	e7fe      	b.n	800daf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d01f      	beq.n	800db3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dafe:	2300      	movs	r3, #0
 800db00:	61fb      	str	r3, [r7, #28]
 800db02:	e012      	b.n	800db2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	4413      	add	r3, r2
 800db0a:	7819      	ldrb	r1, [r3, #0]
 800db0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	4413      	add	r3, r2
 800db12:	3334      	adds	r3, #52	; 0x34
 800db14:	460a      	mov	r2, r1
 800db16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	4413      	add	r3, r2
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d006      	beq.n	800db32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	3301      	adds	r3, #1
 800db28:	61fb      	str	r3, [r7, #28]
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	2b13      	cmp	r3, #19
 800db2e:	d9e9      	bls.n	800db04 <prvInitialiseNewTask+0x64>
 800db30:	e000      	b.n	800db34 <prvInitialiseNewTask+0x94>
			{
				break;
 800db32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db36:	2200      	movs	r2, #0
 800db38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800db3c:	e003      	b.n	800db46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db48:	2b37      	cmp	r3, #55	; 0x37
 800db4a:	d901      	bls.n	800db50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db4c:	2337      	movs	r3, #55	; 0x37
 800db4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db5a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800db5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5e:	2200      	movs	r2, #0
 800db60:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	3304      	adds	r3, #4
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe fda0 	bl	800c6ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6e:	3318      	adds	r3, #24
 800db70:	4618      	mov	r0, r3
 800db72:	f7fe fd9b 	bl	800c6ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	2200      	movs	r2, #0
 800db90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	2200      	movs	r2, #0
 800db98:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	3358      	adds	r3, #88	; 0x58
 800dba0:	224c      	movs	r2, #76	; 0x4c
 800dba2:	2100      	movs	r1, #0
 800dba4:	4618      	mov	r0, r3
 800dba6:	f003 f952 	bl	8010e4e <memset>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	4a0c      	ldr	r2, [pc, #48]	; (800dbe0 <prvInitialiseNewTask+0x140>)
 800dbae:	65da      	str	r2, [r3, #92]	; 0x5c
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb2:	4a0c      	ldr	r2, [pc, #48]	; (800dbe4 <prvInitialiseNewTask+0x144>)
 800dbb4:	661a      	str	r2, [r3, #96]	; 0x60
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	4a0b      	ldr	r2, [pc, #44]	; (800dbe8 <prvInitialiseNewTask+0x148>)
 800dbba:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	68f9      	ldr	r1, [r7, #12]
 800dbc0:	69b8      	ldr	r0, [r7, #24]
 800dbc2:	f001 fa61 	bl	800f088 <pxPortInitialiseStack>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbd8:	bf00      	nop
 800dbda:	3720      	adds	r7, #32
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20005be4 	.word	0x20005be4
 800dbe4:	20005c4c 	.word	0x20005c4c
 800dbe8:	20005cb4 	.word	0x20005cb4

0800dbec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbf4:	f001 fb76 	bl	800f2e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbf8:	4b2d      	ldr	r3, [pc, #180]	; (800dcb0 <prvAddNewTaskToReadyList+0xc4>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	4a2c      	ldr	r2, [pc, #176]	; (800dcb0 <prvAddNewTaskToReadyList+0xc4>)
 800dc00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc02:	4b2c      	ldr	r3, [pc, #176]	; (800dcb4 <prvAddNewTaskToReadyList+0xc8>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d109      	bne.n	800dc1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc0a:	4a2a      	ldr	r2, [pc, #168]	; (800dcb4 <prvAddNewTaskToReadyList+0xc8>)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc10:	4b27      	ldr	r3, [pc, #156]	; (800dcb0 <prvAddNewTaskToReadyList+0xc4>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d110      	bne.n	800dc3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc18:	f000 fc38 	bl	800e48c <prvInitialiseTaskLists>
 800dc1c:	e00d      	b.n	800dc3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc1e:	4b26      	ldr	r3, [pc, #152]	; (800dcb8 <prvAddNewTaskToReadyList+0xcc>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d109      	bne.n	800dc3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc26:	4b23      	ldr	r3, [pc, #140]	; (800dcb4 <prvAddNewTaskToReadyList+0xc8>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d802      	bhi.n	800dc3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc34:	4a1f      	ldr	r2, [pc, #124]	; (800dcb4 <prvAddNewTaskToReadyList+0xc8>)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc3a:	4b20      	ldr	r3, [pc, #128]	; (800dcbc <prvAddNewTaskToReadyList+0xd0>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	4a1e      	ldr	r2, [pc, #120]	; (800dcbc <prvAddNewTaskToReadyList+0xd0>)
 800dc42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc44:	4b1d      	ldr	r3, [pc, #116]	; (800dcbc <prvAddNewTaskToReadyList+0xd0>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc50:	4b1b      	ldr	r3, [pc, #108]	; (800dcc0 <prvAddNewTaskToReadyList+0xd4>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d903      	bls.n	800dc60 <prvAddNewTaskToReadyList+0x74>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5c:	4a18      	ldr	r2, [pc, #96]	; (800dcc0 <prvAddNewTaskToReadyList+0xd4>)
 800dc5e:	6013      	str	r3, [r2, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc64:	4613      	mov	r3, r2
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4413      	add	r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4a15      	ldr	r2, [pc, #84]	; (800dcc4 <prvAddNewTaskToReadyList+0xd8>)
 800dc6e:	441a      	add	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	3304      	adds	r3, #4
 800dc74:	4619      	mov	r1, r3
 800dc76:	4610      	mov	r0, r2
 800dc78:	f7fe fd25 	bl	800c6c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc7c:	f001 fb62 	bl	800f344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc80:	4b0d      	ldr	r3, [pc, #52]	; (800dcb8 <prvAddNewTaskToReadyList+0xcc>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00e      	beq.n	800dca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc88:	4b0a      	ldr	r3, [pc, #40]	; (800dcb4 <prvAddNewTaskToReadyList+0xc8>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d207      	bcs.n	800dca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc96:	4b0c      	ldr	r3, [pc, #48]	; (800dcc8 <prvAddNewTaskToReadyList+0xdc>)
 800dc98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dca6:	bf00      	nop
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	20003c98 	.word	0x20003c98
 800dcb4:	200037c4 	.word	0x200037c4
 800dcb8:	20003ca4 	.word	0x20003ca4
 800dcbc:	20003cb4 	.word	0x20003cb4
 800dcc0:	20003ca0 	.word	0x20003ca0
 800dcc4:	200037c8 	.word	0x200037c8
 800dcc8:	e000ed04 	.word	0xe000ed04

0800dccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d017      	beq.n	800dd0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcde:	4b13      	ldr	r3, [pc, #76]	; (800dd2c <vTaskDelay+0x60>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00a      	beq.n	800dcfc <vTaskDelay+0x30>
	__asm volatile
 800dce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcea:	f383 8811 	msr	BASEPRI, r3
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	60bb      	str	r3, [r7, #8]
}
 800dcf8:	bf00      	nop
 800dcfa:	e7fe      	b.n	800dcfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dcfc:	f000 f88a 	bl	800de14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd00:	2100      	movs	r1, #0
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fe1e 	bl	800e944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd08:	f000 f892 	bl	800de30 <xTaskResumeAll>
 800dd0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d107      	bne.n	800dd24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dd14:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <vTaskDelay+0x64>)
 800dd16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd1a:	601a      	str	r2, [r3, #0]
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd24:	bf00      	nop
 800dd26:	3710      	adds	r7, #16
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	20003cc0 	.word	0x20003cc0
 800dd30:	e000ed04 	.word	0xe000ed04

0800dd34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b08a      	sub	sp, #40	; 0x28
 800dd38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd42:	463a      	mov	r2, r7
 800dd44:	1d39      	adds	r1, r7, #4
 800dd46:	f107 0308 	add.w	r3, r7, #8
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe fc5a 	bl	800c604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd50:	6839      	ldr	r1, [r7, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68ba      	ldr	r2, [r7, #8]
 800dd56:	9202      	str	r2, [sp, #8]
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	460a      	mov	r2, r1
 800dd62:	4924      	ldr	r1, [pc, #144]	; (800ddf4 <vTaskStartScheduler+0xc0>)
 800dd64:	4824      	ldr	r0, [pc, #144]	; (800ddf8 <vTaskStartScheduler+0xc4>)
 800dd66:	f7ff fdf9 	bl	800d95c <xTaskCreateStatic>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	4a23      	ldr	r2, [pc, #140]	; (800ddfc <vTaskStartScheduler+0xc8>)
 800dd6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd70:	4b22      	ldr	r3, [pc, #136]	; (800ddfc <vTaskStartScheduler+0xc8>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	617b      	str	r3, [r7, #20]
 800dd7c:	e001      	b.n	800dd82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d102      	bne.n	800dd8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd88:	f000 fe30 	bl	800e9ec <xTimerCreateTimerTask>
 800dd8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d11b      	bne.n	800ddcc <vTaskStartScheduler+0x98>
	__asm volatile
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	613b      	str	r3, [r7, #16]
}
 800dda6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dda8:	4b15      	ldr	r3, [pc, #84]	; (800de00 <vTaskStartScheduler+0xcc>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3358      	adds	r3, #88	; 0x58
 800ddae:	4a15      	ldr	r2, [pc, #84]	; (800de04 <vTaskStartScheduler+0xd0>)
 800ddb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddb2:	4b15      	ldr	r3, [pc, #84]	; (800de08 <vTaskStartScheduler+0xd4>)
 800ddb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddba:	4b14      	ldr	r3, [pc, #80]	; (800de0c <vTaskStartScheduler+0xd8>)
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddc0:	4b13      	ldr	r3, [pc, #76]	; (800de10 <vTaskStartScheduler+0xdc>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddc6:	f001 f9eb 	bl	800f1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddca:	e00e      	b.n	800ddea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddd2:	d10a      	bne.n	800ddea <vTaskStartScheduler+0xb6>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	60fb      	str	r3, [r7, #12]
}
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <vTaskStartScheduler+0xb4>
}
 800ddea:	bf00      	nop
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	08013408 	.word	0x08013408
 800ddf8:	0800e45d 	.word	0x0800e45d
 800ddfc:	20003cbc 	.word	0x20003cbc
 800de00:	200037c4 	.word	0x200037c4
 800de04:	200001e0 	.word	0x200001e0
 800de08:	20003cb8 	.word	0x20003cb8
 800de0c:	20003ca4 	.word	0x20003ca4
 800de10:	20003c9c 	.word	0x20003c9c

0800de14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de14:	b480      	push	{r7}
 800de16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de18:	4b04      	ldr	r3, [pc, #16]	; (800de2c <vTaskSuspendAll+0x18>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3301      	adds	r3, #1
 800de1e:	4a03      	ldr	r2, [pc, #12]	; (800de2c <vTaskSuspendAll+0x18>)
 800de20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de22:	bf00      	nop
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	20003cc0 	.word	0x20003cc0

0800de30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de36:	2300      	movs	r3, #0
 800de38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de3a:	2300      	movs	r3, #0
 800de3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de3e:	4b42      	ldr	r3, [pc, #264]	; (800df48 <xTaskResumeAll+0x118>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10a      	bne.n	800de5c <xTaskResumeAll+0x2c>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	603b      	str	r3, [r7, #0]
}
 800de58:	bf00      	nop
 800de5a:	e7fe      	b.n	800de5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de5c:	f001 fa42 	bl	800f2e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de60:	4b39      	ldr	r3, [pc, #228]	; (800df48 <xTaskResumeAll+0x118>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	3b01      	subs	r3, #1
 800de66:	4a38      	ldr	r2, [pc, #224]	; (800df48 <xTaskResumeAll+0x118>)
 800de68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de6a:	4b37      	ldr	r3, [pc, #220]	; (800df48 <xTaskResumeAll+0x118>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d162      	bne.n	800df38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de72:	4b36      	ldr	r3, [pc, #216]	; (800df4c <xTaskResumeAll+0x11c>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d05e      	beq.n	800df38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de7a:	e02f      	b.n	800dedc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de7c:	4b34      	ldr	r3, [pc, #208]	; (800df50 <xTaskResumeAll+0x120>)
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	3318      	adds	r3, #24
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fe fc79 	bl	800c780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	3304      	adds	r3, #4
 800de92:	4618      	mov	r0, r3
 800de94:	f7fe fc74 	bl	800c780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9c:	4b2d      	ldr	r3, [pc, #180]	; (800df54 <xTaskResumeAll+0x124>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d903      	bls.n	800deac <xTaskResumeAll+0x7c>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea8:	4a2a      	ldr	r2, [pc, #168]	; (800df54 <xTaskResumeAll+0x124>)
 800deaa:	6013      	str	r3, [r2, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb0:	4613      	mov	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4413      	add	r3, r2
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	4a27      	ldr	r2, [pc, #156]	; (800df58 <xTaskResumeAll+0x128>)
 800deba:	441a      	add	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3304      	adds	r3, #4
 800dec0:	4619      	mov	r1, r3
 800dec2:	4610      	mov	r0, r2
 800dec4:	f7fe fbff 	bl	800c6c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800decc:	4b23      	ldr	r3, [pc, #140]	; (800df5c <xTaskResumeAll+0x12c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d302      	bcc.n	800dedc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ded6:	4b22      	ldr	r3, [pc, #136]	; (800df60 <xTaskResumeAll+0x130>)
 800ded8:	2201      	movs	r2, #1
 800deda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dedc:	4b1c      	ldr	r3, [pc, #112]	; (800df50 <xTaskResumeAll+0x120>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1cb      	bne.n	800de7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800deea:	f000 fb71 	bl	800e5d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800deee:	4b1d      	ldr	r3, [pc, #116]	; (800df64 <xTaskResumeAll+0x134>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d010      	beq.n	800df1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800defa:	f000 f859 	bl	800dfb0 <xTaskIncrementTick>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df04:	4b16      	ldr	r3, [pc, #88]	; (800df60 <xTaskResumeAll+0x130>)
 800df06:	2201      	movs	r2, #1
 800df08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	3b01      	subs	r3, #1
 800df0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1f1      	bne.n	800defa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df16:	4b13      	ldr	r3, [pc, #76]	; (800df64 <xTaskResumeAll+0x134>)
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df1c:	4b10      	ldr	r3, [pc, #64]	; (800df60 <xTaskResumeAll+0x130>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d009      	beq.n	800df38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df24:	2301      	movs	r3, #1
 800df26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df28:	4b0f      	ldr	r3, [pc, #60]	; (800df68 <xTaskResumeAll+0x138>)
 800df2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df2e:	601a      	str	r2, [r3, #0]
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df38:	f001 fa04 	bl	800f344 <vPortExitCritical>

	return xAlreadyYielded;
 800df3c:	68bb      	ldr	r3, [r7, #8]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	20003cc0 	.word	0x20003cc0
 800df4c:	20003c98 	.word	0x20003c98
 800df50:	20003c58 	.word	0x20003c58
 800df54:	20003ca0 	.word	0x20003ca0
 800df58:	200037c8 	.word	0x200037c8
 800df5c:	200037c4 	.word	0x200037c4
 800df60:	20003cac 	.word	0x20003cac
 800df64:	20003ca8 	.word	0x20003ca8
 800df68:	e000ed04 	.word	0xe000ed04

0800df6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df72:	4b05      	ldr	r3, [pc, #20]	; (800df88 <xTaskGetTickCount+0x1c>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df78:	687b      	ldr	r3, [r7, #4]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	20003c9c 	.word	0x20003c9c

0800df8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df92:	f001 fa89 	bl	800f4a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800df96:	2300      	movs	r3, #0
 800df98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800df9a:	4b04      	ldr	r3, [pc, #16]	; (800dfac <xTaskGetTickCountFromISR+0x20>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfa0:	683b      	ldr	r3, [r7, #0]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	20003c9c 	.word	0x20003c9c

0800dfb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfba:	4b4f      	ldr	r3, [pc, #316]	; (800e0f8 <xTaskIncrementTick+0x148>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f040 808f 	bne.w	800e0e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfc4:	4b4d      	ldr	r3, [pc, #308]	; (800e0fc <xTaskIncrementTick+0x14c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfcc:	4a4b      	ldr	r2, [pc, #300]	; (800e0fc <xTaskIncrementTick+0x14c>)
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d120      	bne.n	800e01a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfd8:	4b49      	ldr	r3, [pc, #292]	; (800e100 <xTaskIncrementTick+0x150>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00a      	beq.n	800dff8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	603b      	str	r3, [r7, #0]
}
 800dff4:	bf00      	nop
 800dff6:	e7fe      	b.n	800dff6 <xTaskIncrementTick+0x46>
 800dff8:	4b41      	ldr	r3, [pc, #260]	; (800e100 <xTaskIncrementTick+0x150>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	60fb      	str	r3, [r7, #12]
 800dffe:	4b41      	ldr	r3, [pc, #260]	; (800e104 <xTaskIncrementTick+0x154>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a3f      	ldr	r2, [pc, #252]	; (800e100 <xTaskIncrementTick+0x150>)
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	4a3f      	ldr	r2, [pc, #252]	; (800e104 <xTaskIncrementTick+0x154>)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6013      	str	r3, [r2, #0]
 800e00c:	4b3e      	ldr	r3, [pc, #248]	; (800e108 <xTaskIncrementTick+0x158>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3301      	adds	r3, #1
 800e012:	4a3d      	ldr	r2, [pc, #244]	; (800e108 <xTaskIncrementTick+0x158>)
 800e014:	6013      	str	r3, [r2, #0]
 800e016:	f000 fadb 	bl	800e5d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e01a:	4b3c      	ldr	r3, [pc, #240]	; (800e10c <xTaskIncrementTick+0x15c>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	693a      	ldr	r2, [r7, #16]
 800e020:	429a      	cmp	r2, r3
 800e022:	d349      	bcc.n	800e0b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e024:	4b36      	ldr	r3, [pc, #216]	; (800e100 <xTaskIncrementTick+0x150>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d104      	bne.n	800e038 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e02e:	4b37      	ldr	r3, [pc, #220]	; (800e10c <xTaskIncrementTick+0x15c>)
 800e030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e034:	601a      	str	r2, [r3, #0]
					break;
 800e036:	e03f      	b.n	800e0b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e038:	4b31      	ldr	r3, [pc, #196]	; (800e100 <xTaskIncrementTick+0x150>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d203      	bcs.n	800e058 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e050:	4a2e      	ldr	r2, [pc, #184]	; (800e10c <xTaskIncrementTick+0x15c>)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e056:	e02f      	b.n	800e0b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	3304      	adds	r3, #4
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe fb8f 	bl	800c780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e066:	2b00      	cmp	r3, #0
 800e068:	d004      	beq.n	800e074 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	3318      	adds	r3, #24
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fb86 	bl	800c780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e078:	4b25      	ldr	r3, [pc, #148]	; (800e110 <xTaskIncrementTick+0x160>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d903      	bls.n	800e088 <xTaskIncrementTick+0xd8>
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e084:	4a22      	ldr	r2, [pc, #136]	; (800e110 <xTaskIncrementTick+0x160>)
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08c:	4613      	mov	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4a1f      	ldr	r2, [pc, #124]	; (800e114 <xTaskIncrementTick+0x164>)
 800e096:	441a      	add	r2, r3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	3304      	adds	r3, #4
 800e09c:	4619      	mov	r1, r3
 800e09e:	4610      	mov	r0, r2
 800e0a0:	f7fe fb11 	bl	800c6c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a8:	4b1b      	ldr	r3, [pc, #108]	; (800e118 <xTaskIncrementTick+0x168>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d3b8      	bcc.n	800e024 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0b6:	e7b5      	b.n	800e024 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0b8:	4b17      	ldr	r3, [pc, #92]	; (800e118 <xTaskIncrementTick+0x168>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0be:	4915      	ldr	r1, [pc, #84]	; (800e114 <xTaskIncrementTick+0x164>)
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	440b      	add	r3, r1
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d901      	bls.n	800e0d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0d4:	4b11      	ldr	r3, [pc, #68]	; (800e11c <xTaskIncrementTick+0x16c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d007      	beq.n	800e0ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	e004      	b.n	800e0ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0e2:	4b0f      	ldr	r3, [pc, #60]	; (800e120 <xTaskIncrementTick+0x170>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	4a0d      	ldr	r2, [pc, #52]	; (800e120 <xTaskIncrementTick+0x170>)
 800e0ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0ec:	697b      	ldr	r3, [r7, #20]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20003cc0 	.word	0x20003cc0
 800e0fc:	20003c9c 	.word	0x20003c9c
 800e100:	20003c50 	.word	0x20003c50
 800e104:	20003c54 	.word	0x20003c54
 800e108:	20003cb0 	.word	0x20003cb0
 800e10c:	20003cb8 	.word	0x20003cb8
 800e110:	20003ca0 	.word	0x20003ca0
 800e114:	200037c8 	.word	0x200037c8
 800e118:	200037c4 	.word	0x200037c4
 800e11c:	20003cac 	.word	0x20003cac
 800e120:	20003ca8 	.word	0x20003ca8

0800e124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e12a:	4b2a      	ldr	r3, [pc, #168]	; (800e1d4 <vTaskSwitchContext+0xb0>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d003      	beq.n	800e13a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e132:	4b29      	ldr	r3, [pc, #164]	; (800e1d8 <vTaskSwitchContext+0xb4>)
 800e134:	2201      	movs	r2, #1
 800e136:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e138:	e046      	b.n	800e1c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e13a:	4b27      	ldr	r3, [pc, #156]	; (800e1d8 <vTaskSwitchContext+0xb4>)
 800e13c:	2200      	movs	r2, #0
 800e13e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e140:	4b26      	ldr	r3, [pc, #152]	; (800e1dc <vTaskSwitchContext+0xb8>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	e010      	b.n	800e16a <vTaskSwitchContext+0x46>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d10a      	bne.n	800e164 <vTaskSwitchContext+0x40>
	__asm volatile
 800e14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	607b      	str	r3, [r7, #4]
}
 800e160:	bf00      	nop
 800e162:	e7fe      	b.n	800e162 <vTaskSwitchContext+0x3e>
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3b01      	subs	r3, #1
 800e168:	60fb      	str	r3, [r7, #12]
 800e16a:	491d      	ldr	r1, [pc, #116]	; (800e1e0 <vTaskSwitchContext+0xbc>)
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	440b      	add	r3, r1
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d0e4      	beq.n	800e148 <vTaskSwitchContext+0x24>
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	4613      	mov	r3, r2
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4a15      	ldr	r2, [pc, #84]	; (800e1e0 <vTaskSwitchContext+0xbc>)
 800e18a:	4413      	add	r3, r2
 800e18c:	60bb      	str	r3, [r7, #8]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	605a      	str	r2, [r3, #4]
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	3308      	adds	r3, #8
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d104      	bne.n	800e1ae <vTaskSwitchContext+0x8a>
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	685a      	ldr	r2, [r3, #4]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	605a      	str	r2, [r3, #4]
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	4a0b      	ldr	r2, [pc, #44]	; (800e1e4 <vTaskSwitchContext+0xc0>)
 800e1b6:	6013      	str	r3, [r2, #0]
 800e1b8:	4a08      	ldr	r2, [pc, #32]	; (800e1dc <vTaskSwitchContext+0xb8>)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1be:	4b09      	ldr	r3, [pc, #36]	; (800e1e4 <vTaskSwitchContext+0xc0>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	3358      	adds	r3, #88	; 0x58
 800e1c4:	4a08      	ldr	r2, [pc, #32]	; (800e1e8 <vTaskSwitchContext+0xc4>)
 800e1c6:	6013      	str	r3, [r2, #0]
}
 800e1c8:	bf00      	nop
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	20003cc0 	.word	0x20003cc0
 800e1d8:	20003cac 	.word	0x20003cac
 800e1dc:	20003ca0 	.word	0x20003ca0
 800e1e0:	200037c8 	.word	0x200037c8
 800e1e4:	200037c4 	.word	0x200037c4
 800e1e8:	200001e0 	.word	0x200001e0

0800e1ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10a      	bne.n	800e212 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	60fb      	str	r3, [r7, #12]
}
 800e20e:	bf00      	nop
 800e210:	e7fe      	b.n	800e210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e212:	4b07      	ldr	r3, [pc, #28]	; (800e230 <vTaskPlaceOnEventList+0x44>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3318      	adds	r3, #24
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7fe fa77 	bl	800c70e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e220:	2101      	movs	r1, #1
 800e222:	6838      	ldr	r0, [r7, #0]
 800e224:	f000 fb8e 	bl	800e944 <prvAddCurrentTaskToDelayedList>
}
 800e228:	bf00      	nop
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	200037c4 	.word	0x200037c4

0800e234 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d10a      	bne.n	800e25c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	617b      	str	r3, [r7, #20]
}
 800e258:	bf00      	nop
 800e25a:	e7fe      	b.n	800e25a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e25c:	4b0a      	ldr	r3, [pc, #40]	; (800e288 <vTaskPlaceOnEventListRestricted+0x54>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	3318      	adds	r3, #24
 800e262:	4619      	mov	r1, r3
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f7fe fa2e 	bl	800c6c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e274:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e276:	6879      	ldr	r1, [r7, #4]
 800e278:	68b8      	ldr	r0, [r7, #8]
 800e27a:	f000 fb63 	bl	800e944 <prvAddCurrentTaskToDelayedList>
	}
 800e27e:	bf00      	nop
 800e280:	3718      	adds	r7, #24
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	200037c4 	.word	0x200037c4

0800e28c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b086      	sub	sp, #24
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10a      	bne.n	800e2b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	60fb      	str	r3, [r7, #12]
}
 800e2b4:	bf00      	nop
 800e2b6:	e7fe      	b.n	800e2b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	3318      	adds	r3, #24
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fe fa5f 	bl	800c780 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2c2:	4b1e      	ldr	r3, [pc, #120]	; (800e33c <xTaskRemoveFromEventList+0xb0>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d11d      	bne.n	800e306 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fe fa56 	bl	800c780 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	4b19      	ldr	r3, [pc, #100]	; (800e340 <xTaskRemoveFromEventList+0xb4>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d903      	bls.n	800e2e8 <xTaskRemoveFromEventList+0x5c>
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e4:	4a16      	ldr	r2, [pc, #88]	; (800e340 <xTaskRemoveFromEventList+0xb4>)
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4413      	add	r3, r2
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4a13      	ldr	r2, [pc, #76]	; (800e344 <xTaskRemoveFromEventList+0xb8>)
 800e2f6:	441a      	add	r2, r3
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4610      	mov	r0, r2
 800e300:	f7fe f9e1 	bl	800c6c6 <vListInsertEnd>
 800e304:	e005      	b.n	800e312 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	3318      	adds	r3, #24
 800e30a:	4619      	mov	r1, r3
 800e30c:	480e      	ldr	r0, [pc, #56]	; (800e348 <xTaskRemoveFromEventList+0xbc>)
 800e30e:	f7fe f9da 	bl	800c6c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e316:	4b0d      	ldr	r3, [pc, #52]	; (800e34c <xTaskRemoveFromEventList+0xc0>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d905      	bls.n	800e32c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e320:	2301      	movs	r3, #1
 800e322:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e324:	4b0a      	ldr	r3, [pc, #40]	; (800e350 <xTaskRemoveFromEventList+0xc4>)
 800e326:	2201      	movs	r2, #1
 800e328:	601a      	str	r2, [r3, #0]
 800e32a:	e001      	b.n	800e330 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e32c:	2300      	movs	r3, #0
 800e32e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e330:	697b      	ldr	r3, [r7, #20]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3718      	adds	r7, #24
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20003cc0 	.word	0x20003cc0
 800e340:	20003ca0 	.word	0x20003ca0
 800e344:	200037c8 	.word	0x200037c8
 800e348:	20003c58 	.word	0x20003c58
 800e34c:	200037c4 	.word	0x200037c4
 800e350:	20003cac 	.word	0x20003cac

0800e354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e35c:	4b06      	ldr	r3, [pc, #24]	; (800e378 <vTaskInternalSetTimeOutState+0x24>)
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e364:	4b05      	ldr	r3, [pc, #20]	; (800e37c <vTaskInternalSetTimeOutState+0x28>)
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	605a      	str	r2, [r3, #4]
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	20003cb0 	.word	0x20003cb0
 800e37c:	20003c9c 	.word	0x20003c9c

0800e380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	613b      	str	r3, [r7, #16]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10a      	bne.n	800e3c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	60fb      	str	r3, [r7, #12]
}
 800e3be:	bf00      	nop
 800e3c0:	e7fe      	b.n	800e3c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e3c2:	f000 ff8f 	bl	800f2e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e3c6:	4b1d      	ldr	r3, [pc, #116]	; (800e43c <xTaskCheckForTimeOut+0xbc>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	69ba      	ldr	r2, [r7, #24]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3de:	d102      	bne.n	800e3e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	61fb      	str	r3, [r7, #28]
 800e3e4:	e023      	b.n	800e42e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	4b15      	ldr	r3, [pc, #84]	; (800e440 <xTaskCheckForTimeOut+0xc0>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d007      	beq.n	800e402 <xTaskCheckForTimeOut+0x82>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	69ba      	ldr	r2, [r7, #24]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d302      	bcc.n	800e402 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	61fb      	str	r3, [r7, #28]
 800e400:	e015      	b.n	800e42e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d20b      	bcs.n	800e424 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	1ad2      	subs	r2, r2, r3
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff ff9b 	bl	800e354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e41e:	2300      	movs	r3, #0
 800e420:	61fb      	str	r3, [r7, #28]
 800e422:	e004      	b.n	800e42e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	2200      	movs	r2, #0
 800e428:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e42a:	2301      	movs	r3, #1
 800e42c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e42e:	f000 ff89 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800e432:	69fb      	ldr	r3, [r7, #28]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3720      	adds	r7, #32
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	20003c9c 	.word	0x20003c9c
 800e440:	20003cb0 	.word	0x20003cb0

0800e444 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e444:	b480      	push	{r7}
 800e446:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e448:	4b03      	ldr	r3, [pc, #12]	; (800e458 <vTaskMissedYield+0x14>)
 800e44a:	2201      	movs	r2, #1
 800e44c:	601a      	str	r2, [r3, #0]
}
 800e44e:	bf00      	nop
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr
 800e458:	20003cac 	.word	0x20003cac

0800e45c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e464:	f000 f852 	bl	800e50c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e468:	4b06      	ldr	r3, [pc, #24]	; (800e484 <prvIdleTask+0x28>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d9f9      	bls.n	800e464 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e470:	4b05      	ldr	r3, [pc, #20]	; (800e488 <prvIdleTask+0x2c>)
 800e472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e476:	601a      	str	r2, [r3, #0]
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e480:	e7f0      	b.n	800e464 <prvIdleTask+0x8>
 800e482:	bf00      	nop
 800e484:	200037c8 	.word	0x200037c8
 800e488:	e000ed04 	.word	0xe000ed04

0800e48c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e492:	2300      	movs	r3, #0
 800e494:	607b      	str	r3, [r7, #4]
 800e496:	e00c      	b.n	800e4b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4a12      	ldr	r2, [pc, #72]	; (800e4ec <prvInitialiseTaskLists+0x60>)
 800e4a4:	4413      	add	r3, r2
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe f8e0 	bl	800c66c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	607b      	str	r3, [r7, #4]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2b37      	cmp	r3, #55	; 0x37
 800e4b6:	d9ef      	bls.n	800e498 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4b8:	480d      	ldr	r0, [pc, #52]	; (800e4f0 <prvInitialiseTaskLists+0x64>)
 800e4ba:	f7fe f8d7 	bl	800c66c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4be:	480d      	ldr	r0, [pc, #52]	; (800e4f4 <prvInitialiseTaskLists+0x68>)
 800e4c0:	f7fe f8d4 	bl	800c66c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4c4:	480c      	ldr	r0, [pc, #48]	; (800e4f8 <prvInitialiseTaskLists+0x6c>)
 800e4c6:	f7fe f8d1 	bl	800c66c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e4ca:	480c      	ldr	r0, [pc, #48]	; (800e4fc <prvInitialiseTaskLists+0x70>)
 800e4cc:	f7fe f8ce 	bl	800c66c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e4d0:	480b      	ldr	r0, [pc, #44]	; (800e500 <prvInitialiseTaskLists+0x74>)
 800e4d2:	f7fe f8cb 	bl	800c66c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4d6:	4b0b      	ldr	r3, [pc, #44]	; (800e504 <prvInitialiseTaskLists+0x78>)
 800e4d8:	4a05      	ldr	r2, [pc, #20]	; (800e4f0 <prvInitialiseTaskLists+0x64>)
 800e4da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	; (800e508 <prvInitialiseTaskLists+0x7c>)
 800e4de:	4a05      	ldr	r2, [pc, #20]	; (800e4f4 <prvInitialiseTaskLists+0x68>)
 800e4e0:	601a      	str	r2, [r3, #0]
}
 800e4e2:	bf00      	nop
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	200037c8 	.word	0x200037c8
 800e4f0:	20003c28 	.word	0x20003c28
 800e4f4:	20003c3c 	.word	0x20003c3c
 800e4f8:	20003c58 	.word	0x20003c58
 800e4fc:	20003c6c 	.word	0x20003c6c
 800e500:	20003c84 	.word	0x20003c84
 800e504:	20003c50 	.word	0x20003c50
 800e508:	20003c54 	.word	0x20003c54

0800e50c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e512:	e019      	b.n	800e548 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e514:	f000 fee6 	bl	800f2e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e518:	4b10      	ldr	r3, [pc, #64]	; (800e55c <prvCheckTasksWaitingTermination+0x50>)
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3304      	adds	r3, #4
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe f92b 	bl	800c780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e52a:	4b0d      	ldr	r3, [pc, #52]	; (800e560 <prvCheckTasksWaitingTermination+0x54>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3b01      	subs	r3, #1
 800e530:	4a0b      	ldr	r2, [pc, #44]	; (800e560 <prvCheckTasksWaitingTermination+0x54>)
 800e532:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e534:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <prvCheckTasksWaitingTermination+0x58>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	3b01      	subs	r3, #1
 800e53a:	4a0a      	ldr	r2, [pc, #40]	; (800e564 <prvCheckTasksWaitingTermination+0x58>)
 800e53c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e53e:	f000 ff01 	bl	800f344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f810 	bl	800e568 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e548:	4b06      	ldr	r3, [pc, #24]	; (800e564 <prvCheckTasksWaitingTermination+0x58>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1e1      	bne.n	800e514 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e550:	bf00      	nop
 800e552:	bf00      	nop
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	20003c6c 	.word	0x20003c6c
 800e560:	20003c98 	.word	0x20003c98
 800e564:	20003c80 	.word	0x20003c80

0800e568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3358      	adds	r3, #88	; 0x58
 800e574:	4618      	mov	r0, r3
 800e576:	f002 fc87 	bl	8010e88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800e580:	2b00      	cmp	r3, #0
 800e582:	d108      	bne.n	800e596 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e588:	4618      	mov	r0, r3
 800e58a:	f001 f899 	bl	800f6c0 <vPortFree>
				vPortFree( pxTCB );
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f001 f896 	bl	800f6c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e594:	e018      	b.n	800e5c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d103      	bne.n	800e5a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f001 f88d 	bl	800f6c0 <vPortFree>
	}
 800e5a6:	e00f      	b.n	800e5c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d00a      	beq.n	800e5c8 <prvDeleteTCB+0x60>
	__asm volatile
 800e5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b6:	f383 8811 	msr	BASEPRI, r3
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	60fb      	str	r3, [r7, #12]
}
 800e5c4:	bf00      	nop
 800e5c6:	e7fe      	b.n	800e5c6 <prvDeleteTCB+0x5e>
	}
 800e5c8:	bf00      	nop
 800e5ca:	3710      	adds	r7, #16
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5d6:	4b0c      	ldr	r3, [pc, #48]	; (800e608 <prvResetNextTaskUnblockTime+0x38>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d104      	bne.n	800e5ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5e0:	4b0a      	ldr	r3, [pc, #40]	; (800e60c <prvResetNextTaskUnblockTime+0x3c>)
 800e5e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e5e8:	e008      	b.n	800e5fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5ea:	4b07      	ldr	r3, [pc, #28]	; (800e608 <prvResetNextTaskUnblockTime+0x38>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	4a04      	ldr	r2, [pc, #16]	; (800e60c <prvResetNextTaskUnblockTime+0x3c>)
 800e5fa:	6013      	str	r3, [r2, #0]
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	20003c50 	.word	0x20003c50
 800e60c:	20003cb8 	.word	0x20003cb8

0800e610 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e616:	4b05      	ldr	r3, [pc, #20]	; (800e62c <xTaskGetCurrentTaskHandle+0x1c>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e61c:	687b      	ldr	r3, [r7, #4]
	}
 800e61e:	4618      	mov	r0, r3
 800e620:	370c      	adds	r7, #12
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	200037c4 	.word	0x200037c4

0800e630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e636:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <xTaskGetSchedulerState+0x34>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d102      	bne.n	800e644 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e63e:	2301      	movs	r3, #1
 800e640:	607b      	str	r3, [r7, #4]
 800e642:	e008      	b.n	800e656 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e644:	4b08      	ldr	r3, [pc, #32]	; (800e668 <xTaskGetSchedulerState+0x38>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e64c:	2302      	movs	r3, #2
 800e64e:	607b      	str	r3, [r7, #4]
 800e650:	e001      	b.n	800e656 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e652:	2300      	movs	r3, #0
 800e654:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e656:	687b      	ldr	r3, [r7, #4]
	}
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	20003ca4 	.word	0x20003ca4
 800e668:	20003cc0 	.word	0x20003cc0

0800e66c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e678:	2300      	movs	r3, #0
 800e67a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d051      	beq.n	800e726 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e686:	4b2a      	ldr	r3, [pc, #168]	; (800e730 <xTaskPriorityInherit+0xc4>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d241      	bcs.n	800e714 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	2b00      	cmp	r3, #0
 800e696:	db06      	blt.n	800e6a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e698:	4b25      	ldr	r3, [pc, #148]	; (800e730 <xTaskPriorityInherit+0xc4>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	6959      	ldr	r1, [r3, #20]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4a1f      	ldr	r2, [pc, #124]	; (800e734 <xTaskPriorityInherit+0xc8>)
 800e6b8:	4413      	add	r3, r2
 800e6ba:	4299      	cmp	r1, r3
 800e6bc:	d122      	bne.n	800e704 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe f85c 	bl	800c780 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6c8:	4b19      	ldr	r3, [pc, #100]	; (800e730 <xTaskPriorityInherit+0xc4>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d6:	4b18      	ldr	r3, [pc, #96]	; (800e738 <xTaskPriorityInherit+0xcc>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d903      	bls.n	800e6e6 <xTaskPriorityInherit+0x7a>
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e2:	4a15      	ldr	r2, [pc, #84]	; (800e738 <xTaskPriorityInherit+0xcc>)
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4a10      	ldr	r2, [pc, #64]	; (800e734 <xTaskPriorityInherit+0xc8>)
 800e6f4:	441a      	add	r2, r3
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	f7fd ffe2 	bl	800c6c6 <vListInsertEnd>
 800e702:	e004      	b.n	800e70e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e704:	4b0a      	ldr	r3, [pc, #40]	; (800e730 <xTaskPriorityInherit+0xc4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e70e:	2301      	movs	r3, #1
 800e710:	60fb      	str	r3, [r7, #12]
 800e712:	e008      	b.n	800e726 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e718:	4b05      	ldr	r3, [pc, #20]	; (800e730 <xTaskPriorityInherit+0xc4>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71e:	429a      	cmp	r2, r3
 800e720:	d201      	bcs.n	800e726 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e722:	2301      	movs	r3, #1
 800e724:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e726:	68fb      	ldr	r3, [r7, #12]
	}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	200037c4 	.word	0x200037c4
 800e734:	200037c8 	.word	0x200037c8
 800e738:	20003ca0 	.word	0x20003ca0

0800e73c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b086      	sub	sp, #24
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e748:	2300      	movs	r3, #0
 800e74a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d056      	beq.n	800e800 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e752:	4b2e      	ldr	r3, [pc, #184]	; (800e80c <xTaskPriorityDisinherit+0xd0>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	693a      	ldr	r2, [r7, #16]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d00a      	beq.n	800e772 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	60fb      	str	r3, [r7, #12]
}
 800e76e:	bf00      	nop
 800e770:	e7fe      	b.n	800e770 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10a      	bne.n	800e790 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77e:	f383 8811 	msr	BASEPRI, r3
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	60bb      	str	r3, [r7, #8]
}
 800e78c:	bf00      	nop
 800e78e:	e7fe      	b.n	800e78e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e794:	1e5a      	subs	r2, r3, #1
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d02c      	beq.n	800e800 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d128      	bne.n	800e800 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	3304      	adds	r3, #4
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fd ffe4 	bl	800c780 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d0:	4b0f      	ldr	r3, [pc, #60]	; (800e810 <xTaskPriorityDisinherit+0xd4>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d903      	bls.n	800e7e0 <xTaskPriorityDisinherit+0xa4>
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7dc:	4a0c      	ldr	r2, [pc, #48]	; (800e810 <xTaskPriorityDisinherit+0xd4>)
 800e7de:	6013      	str	r3, [r2, #0]
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	4413      	add	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	4a09      	ldr	r2, [pc, #36]	; (800e814 <xTaskPriorityDisinherit+0xd8>)
 800e7ee:	441a      	add	r2, r3
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	f7fd ff65 	bl	800c6c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e800:	697b      	ldr	r3, [r7, #20]
	}
 800e802:	4618      	mov	r0, r3
 800e804:	3718      	adds	r7, #24
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	200037c4 	.word	0x200037c4
 800e810:	20003ca0 	.word	0x20003ca0
 800e814:	200037c8 	.word	0x200037c8

0800e818 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b088      	sub	sp, #32
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e826:	2301      	movs	r3, #1
 800e828:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d06a      	beq.n	800e906 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10a      	bne.n	800e84e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	60fb      	str	r3, [r7, #12]
}
 800e84a:	bf00      	nop
 800e84c:	e7fe      	b.n	800e84c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	429a      	cmp	r2, r3
 800e856:	d902      	bls.n	800e85e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	61fb      	str	r3, [r7, #28]
 800e85c:	e002      	b.n	800e864 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e862:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e868:	69fa      	ldr	r2, [r7, #28]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d04b      	beq.n	800e906 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	429a      	cmp	r2, r3
 800e876:	d146      	bne.n	800e906 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e878:	4b25      	ldr	r3, [pc, #148]	; (800e910 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	69ba      	ldr	r2, [r7, #24]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d10a      	bne.n	800e898 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	60bb      	str	r3, [r7, #8]
}
 800e894:	bf00      	nop
 800e896:	e7fe      	b.n	800e896 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	699b      	ldr	r3, [r3, #24]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	db04      	blt.n	800e8b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	6959      	ldr	r1, [r3, #20]
 800e8ba:	693a      	ldr	r2, [r7, #16]
 800e8bc:	4613      	mov	r3, r2
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	4413      	add	r3, r2
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4a13      	ldr	r2, [pc, #76]	; (800e914 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8c6:	4413      	add	r3, r2
 800e8c8:	4299      	cmp	r1, r3
 800e8ca:	d11c      	bne.n	800e906 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fd ff55 	bl	800c780 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8da:	4b0f      	ldr	r3, [pc, #60]	; (800e918 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d903      	bls.n	800e8ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e6:	4a0c      	ldr	r2, [pc, #48]	; (800e918 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8e8:	6013      	str	r3, [r2, #0]
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4a07      	ldr	r2, [pc, #28]	; (800e914 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8f8:	441a      	add	r2, r3
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	4619      	mov	r1, r3
 800e900:	4610      	mov	r0, r2
 800e902:	f7fd fee0 	bl	800c6c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e906:	bf00      	nop
 800e908:	3720      	adds	r7, #32
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	200037c4 	.word	0x200037c4
 800e914:	200037c8 	.word	0x200037c8
 800e918:	20003ca0 	.word	0x20003ca0

0800e91c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e91c:	b480      	push	{r7}
 800e91e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e920:	4b07      	ldr	r3, [pc, #28]	; (800e940 <pvTaskIncrementMutexHeldCount+0x24>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d004      	beq.n	800e932 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e928:	4b05      	ldr	r3, [pc, #20]	; (800e940 <pvTaskIncrementMutexHeldCount+0x24>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e92e:	3201      	adds	r2, #1
 800e930:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800e932:	4b03      	ldr	r3, [pc, #12]	; (800e940 <pvTaskIncrementMutexHeldCount+0x24>)
 800e934:	681b      	ldr	r3, [r3, #0]
	}
 800e936:	4618      	mov	r0, r3
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	200037c4 	.word	0x200037c4

0800e944 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e94e:	4b21      	ldr	r3, [pc, #132]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e954:	4b20      	ldr	r3, [pc, #128]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3304      	adds	r3, #4
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fd ff10 	bl	800c780 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e966:	d10a      	bne.n	800e97e <prvAddCurrentTaskToDelayedList+0x3a>
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d007      	beq.n	800e97e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e96e:	4b1a      	ldr	r3, [pc, #104]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3304      	adds	r3, #4
 800e974:	4619      	mov	r1, r3
 800e976:	4819      	ldr	r0, [pc, #100]	; (800e9dc <prvAddCurrentTaskToDelayedList+0x98>)
 800e978:	f7fd fea5 	bl	800c6c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e97c:	e026      	b.n	800e9cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e97e:	68fa      	ldr	r2, [r7, #12]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	4413      	add	r3, r2
 800e984:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e986:	4b14      	ldr	r3, [pc, #80]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e98e:	68ba      	ldr	r2, [r7, #8]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	429a      	cmp	r2, r3
 800e994:	d209      	bcs.n	800e9aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e996:	4b12      	ldr	r3, [pc, #72]	; (800e9e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	4b0f      	ldr	r3, [pc, #60]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	3304      	adds	r3, #4
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	f7fd feb3 	bl	800c70e <vListInsert>
}
 800e9a8:	e010      	b.n	800e9cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9aa:	4b0e      	ldr	r3, [pc, #56]	; (800e9e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	4b0a      	ldr	r3, [pc, #40]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	4610      	mov	r0, r2
 800e9b8:	f7fd fea9 	bl	800c70e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9bc:	4b0a      	ldr	r3, [pc, #40]	; (800e9e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d202      	bcs.n	800e9cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e9c6:	4a08      	ldr	r2, [pc, #32]	; (800e9e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	6013      	str	r3, [r2, #0]
}
 800e9cc:	bf00      	nop
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	20003c9c 	.word	0x20003c9c
 800e9d8:	200037c4 	.word	0x200037c4
 800e9dc:	20003c84 	.word	0x20003c84
 800e9e0:	20003c54 	.word	0x20003c54
 800e9e4:	20003c50 	.word	0x20003c50
 800e9e8:	20003cb8 	.word	0x20003cb8

0800e9ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b08a      	sub	sp, #40	; 0x28
 800e9f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e9f6:	f000 fb07 	bl	800f008 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e9fa:	4b1c      	ldr	r3, [pc, #112]	; (800ea6c <xTimerCreateTimerTask+0x80>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d021      	beq.n	800ea46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea0a:	1d3a      	adds	r2, r7, #4
 800ea0c:	f107 0108 	add.w	r1, r7, #8
 800ea10:	f107 030c 	add.w	r3, r7, #12
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fd fe0f 	bl	800c638 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea1a:	6879      	ldr	r1, [r7, #4]
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	9202      	str	r2, [sp, #8]
 800ea22:	9301      	str	r3, [sp, #4]
 800ea24:	2302      	movs	r3, #2
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	2300      	movs	r3, #0
 800ea2a:	460a      	mov	r2, r1
 800ea2c:	4910      	ldr	r1, [pc, #64]	; (800ea70 <xTimerCreateTimerTask+0x84>)
 800ea2e:	4811      	ldr	r0, [pc, #68]	; (800ea74 <xTimerCreateTimerTask+0x88>)
 800ea30:	f7fe ff94 	bl	800d95c <xTaskCreateStatic>
 800ea34:	4603      	mov	r3, r0
 800ea36:	4a10      	ldr	r2, [pc, #64]	; (800ea78 <xTimerCreateTimerTask+0x8c>)
 800ea38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea3a:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <xTimerCreateTimerTask+0x8c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d001      	beq.n	800ea46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea42:	2301      	movs	r3, #1
 800ea44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10a      	bne.n	800ea62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	613b      	str	r3, [r7, #16]
}
 800ea5e:	bf00      	nop
 800ea60:	e7fe      	b.n	800ea60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea62:	697b      	ldr	r3, [r7, #20]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	20003cf4 	.word	0x20003cf4
 800ea70:	08013410 	.word	0x08013410
 800ea74:	0800ebb1 	.word	0x0800ebb1
 800ea78:	20003cf8 	.word	0x20003cf8

0800ea7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b08a      	sub	sp, #40	; 0x28
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
 800ea88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10a      	bne.n	800eaaa <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	623b      	str	r3, [r7, #32]
}
 800eaa6:	bf00      	nop
 800eaa8:	e7fe      	b.n	800eaa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eaaa:	4b1a      	ldr	r3, [pc, #104]	; (800eb14 <xTimerGenericCommand+0x98>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d02a      	beq.n	800eb08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2b05      	cmp	r3, #5
 800eac2:	dc18      	bgt.n	800eaf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eac4:	f7ff fdb4 	bl	800e630 <xTaskGetSchedulerState>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	d109      	bne.n	800eae2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eace:	4b11      	ldr	r3, [pc, #68]	; (800eb14 <xTimerGenericCommand+0x98>)
 800ead0:	6818      	ldr	r0, [r3, #0]
 800ead2:	f107 0110 	add.w	r1, r7, #16
 800ead6:	2300      	movs	r3, #0
 800ead8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eada:	f7fe f8d9 	bl	800cc90 <xQueueGenericSend>
 800eade:	6278      	str	r0, [r7, #36]	; 0x24
 800eae0:	e012      	b.n	800eb08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eae2:	4b0c      	ldr	r3, [pc, #48]	; (800eb14 <xTimerGenericCommand+0x98>)
 800eae4:	6818      	ldr	r0, [r3, #0]
 800eae6:	f107 0110 	add.w	r1, r7, #16
 800eaea:	2300      	movs	r3, #0
 800eaec:	2200      	movs	r2, #0
 800eaee:	f7fe f8cf 	bl	800cc90 <xQueueGenericSend>
 800eaf2:	6278      	str	r0, [r7, #36]	; 0x24
 800eaf4:	e008      	b.n	800eb08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eaf6:	4b07      	ldr	r3, [pc, #28]	; (800eb14 <xTimerGenericCommand+0x98>)
 800eaf8:	6818      	ldr	r0, [r3, #0]
 800eafa:	f107 0110 	add.w	r1, r7, #16
 800eafe:	2300      	movs	r3, #0
 800eb00:	683a      	ldr	r2, [r7, #0]
 800eb02:	f7fe f9c3 	bl	800ce8c <xQueueGenericSendFromISR>
 800eb06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3728      	adds	r7, #40	; 0x28
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20003cf4 	.word	0x20003cf4

0800eb18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b088      	sub	sp, #32
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb22:	4b22      	ldr	r3, [pc, #136]	; (800ebac <prvProcessExpiredTimer+0x94>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fd fe25 	bl	800c780 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb3c:	f003 0304 	and.w	r3, r3, #4
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d022      	beq.n	800eb8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	699a      	ldr	r2, [r3, #24]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	18d1      	adds	r1, r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	6978      	ldr	r0, [r7, #20]
 800eb52:	f000 f8d1 	bl	800ecf8 <prvInsertTimerInActiveList>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d01f      	beq.n	800eb9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	2300      	movs	r3, #0
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	2100      	movs	r1, #0
 800eb66:	6978      	ldr	r0, [r7, #20]
 800eb68:	f7ff ff88 	bl	800ea7c <xTimerGenericCommand>
 800eb6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d113      	bne.n	800eb9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	60fb      	str	r3, [r7, #12]
}
 800eb86:	bf00      	nop
 800eb88:	e7fe      	b.n	800eb88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb90:	f023 0301 	bic.w	r3, r3, #1
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	6a1b      	ldr	r3, [r3, #32]
 800eba0:	6978      	ldr	r0, [r7, #20]
 800eba2:	4798      	blx	r3
}
 800eba4:	bf00      	nop
 800eba6:	3718      	adds	r7, #24
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	20003cec 	.word	0x20003cec

0800ebb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebb8:	f107 0308 	add.w	r3, r7, #8
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 f857 	bl	800ec70 <prvGetNextExpireTime>
 800ebc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f000 f803 	bl	800ebd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ebce:	f000 f8d5 	bl	800ed7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebd2:	e7f1      	b.n	800ebb8 <prvTimerTask+0x8>

0800ebd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ebde:	f7ff f919 	bl	800de14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebe2:	f107 0308 	add.w	r3, r7, #8
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 f866 	bl	800ecb8 <prvSampleTimeNow>
 800ebec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d130      	bne.n	800ec56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d10a      	bne.n	800ec10 <prvProcessTimerOrBlockTask+0x3c>
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d806      	bhi.n	800ec10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec02:	f7ff f915 	bl	800de30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec06:	68f9      	ldr	r1, [r7, #12]
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7ff ff85 	bl	800eb18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec0e:	e024      	b.n	800ec5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d008      	beq.n	800ec28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec16:	4b13      	ldr	r3, [pc, #76]	; (800ec64 <prvProcessTimerOrBlockTask+0x90>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <prvProcessTimerOrBlockTask+0x50>
 800ec20:	2301      	movs	r3, #1
 800ec22:	e000      	b.n	800ec26 <prvProcessTimerOrBlockTask+0x52>
 800ec24:	2300      	movs	r3, #0
 800ec26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec28:	4b0f      	ldr	r3, [pc, #60]	; (800ec68 <prvProcessTimerOrBlockTask+0x94>)
 800ec2a:	6818      	ldr	r0, [r3, #0]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	4619      	mov	r1, r3
 800ec36:	f7fe fe5d 	bl	800d8f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec3a:	f7ff f8f9 	bl	800de30 <xTaskResumeAll>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10a      	bne.n	800ec5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec44:	4b09      	ldr	r3, [pc, #36]	; (800ec6c <prvProcessTimerOrBlockTask+0x98>)
 800ec46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec4a:	601a      	str	r2, [r3, #0]
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	f3bf 8f6f 	isb	sy
}
 800ec54:	e001      	b.n	800ec5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec56:	f7ff f8eb 	bl	800de30 <xTaskResumeAll>
}
 800ec5a:	bf00      	nop
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20003cf0 	.word	0x20003cf0
 800ec68:	20003cf4 	.word	0x20003cf4
 800ec6c:	e000ed04 	.word	0xe000ed04

0800ec70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec78:	4b0e      	ldr	r3, [pc, #56]	; (800ecb4 <prvGetNextExpireTime+0x44>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d101      	bne.n	800ec86 <prvGetNextExpireTime+0x16>
 800ec82:	2201      	movs	r2, #1
 800ec84:	e000      	b.n	800ec88 <prvGetNextExpireTime+0x18>
 800ec86:	2200      	movs	r2, #0
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d105      	bne.n	800eca0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec94:	4b07      	ldr	r3, [pc, #28]	; (800ecb4 <prvGetNextExpireTime+0x44>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	60fb      	str	r3, [r7, #12]
 800ec9e:	e001      	b.n	800eca4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eca0:	2300      	movs	r3, #0
 800eca2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eca4:	68fb      	ldr	r3, [r7, #12]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	20003cec 	.word	0x20003cec

0800ecb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ecc0:	f7ff f954 	bl	800df6c <xTaskGetTickCount>
 800ecc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ecc6:	4b0b      	ldr	r3, [pc, #44]	; (800ecf4 <prvSampleTimeNow+0x3c>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d205      	bcs.n	800ecdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ecd0:	f000 f936 	bl	800ef40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	e002      	b.n	800ece2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ece2:	4a04      	ldr	r2, [pc, #16]	; (800ecf4 <prvSampleTimeNow+0x3c>)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ece8:	68fb      	ldr	r3, [r7, #12]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	20003cfc 	.word	0x20003cfc

0800ecf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
 800ed04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed06:	2300      	movs	r3, #0
 800ed08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68fa      	ldr	r2, [r7, #12]
 800ed14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d812      	bhi.n	800ed44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	1ad2      	subs	r2, r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d302      	bcc.n	800ed32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	617b      	str	r3, [r7, #20]
 800ed30:	e01b      	b.n	800ed6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed32:	4b10      	ldr	r3, [pc, #64]	; (800ed74 <prvInsertTimerInActiveList+0x7c>)
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	3304      	adds	r3, #4
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	f7fd fce6 	bl	800c70e <vListInsert>
 800ed42:	e012      	b.n	800ed6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d206      	bcs.n	800ed5a <prvInsertTimerInActiveList+0x62>
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d302      	bcc.n	800ed5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed54:	2301      	movs	r3, #1
 800ed56:	617b      	str	r3, [r7, #20]
 800ed58:	e007      	b.n	800ed6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed5a:	4b07      	ldr	r3, [pc, #28]	; (800ed78 <prvInsertTimerInActiveList+0x80>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3304      	adds	r3, #4
 800ed62:	4619      	mov	r1, r3
 800ed64:	4610      	mov	r0, r2
 800ed66:	f7fd fcd2 	bl	800c70e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed6a:	697b      	ldr	r3, [r7, #20]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3718      	adds	r7, #24
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	20003cf0 	.word	0x20003cf0
 800ed78:	20003cec 	.word	0x20003cec

0800ed7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08e      	sub	sp, #56	; 0x38
 800ed80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed82:	e0ca      	b.n	800ef1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	da18      	bge.n	800edbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed8a:	1d3b      	adds	r3, r7, #4
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10a      	bne.n	800edac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9a:	f383 8811 	msr	BASEPRI, r3
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	61fb      	str	r3, [r7, #28]
}
 800eda8:	bf00      	nop
 800edaa:	e7fe      	b.n	800edaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edb2:	6850      	ldr	r0, [r2, #4]
 800edb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edb6:	6892      	ldr	r2, [r2, #8]
 800edb8:	4611      	mov	r1, r2
 800edba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f2c0 80ab 	blt.w	800ef1a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edca:	695b      	ldr	r3, [r3, #20]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d004      	beq.n	800edda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd2:	3304      	adds	r3, #4
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fd fcd3 	bl	800c780 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edda:	463b      	mov	r3, r7
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff ff6b 	bl	800ecb8 <prvSampleTimeNow>
 800ede2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b09      	cmp	r3, #9
 800ede8:	f200 8096 	bhi.w	800ef18 <prvProcessReceivedCommands+0x19c>
 800edec:	a201      	add	r2, pc, #4	; (adr r2, 800edf4 <prvProcessReceivedCommands+0x78>)
 800edee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf2:	bf00      	nop
 800edf4:	0800ee1d 	.word	0x0800ee1d
 800edf8:	0800ee1d 	.word	0x0800ee1d
 800edfc:	0800ee1d 	.word	0x0800ee1d
 800ee00:	0800ee91 	.word	0x0800ee91
 800ee04:	0800eea5 	.word	0x0800eea5
 800ee08:	0800eeef 	.word	0x0800eeef
 800ee0c:	0800ee1d 	.word	0x0800ee1d
 800ee10:	0800ee1d 	.word	0x0800ee1d
 800ee14:	0800ee91 	.word	0x0800ee91
 800ee18:	0800eea5 	.word	0x0800eea5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee22:	f043 0301 	orr.w	r3, r3, #1
 800ee26:	b2da      	uxtb	r2, r3
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	18d1      	adds	r1, r2, r3
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee3c:	f7ff ff5c 	bl	800ecf8 <prvInsertTimerInActiveList>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d069      	beq.n	800ef1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee54:	f003 0304 	and.w	r3, r3, #4
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d05e      	beq.n	800ef1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee60:	699b      	ldr	r3, [r3, #24]
 800ee62:	441a      	add	r2, r3
 800ee64:	2300      	movs	r3, #0
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	2300      	movs	r3, #0
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee6e:	f7ff fe05 	bl	800ea7c <xTimerGenericCommand>
 800ee72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee74:	6a3b      	ldr	r3, [r7, #32]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d14f      	bne.n	800ef1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	61bb      	str	r3, [r7, #24]
}
 800ee8c:	bf00      	nop
 800ee8e:	e7fe      	b.n	800ee8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee96:	f023 0301 	bic.w	r3, r3, #1
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eea2:	e03a      	b.n	800ef1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeaa:	f043 0301 	orr.w	r3, r3, #1
 800eeae:	b2da      	uxtb	r2, r3
 800eeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebe:	699b      	ldr	r3, [r3, #24]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10a      	bne.n	800eeda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	617b      	str	r3, [r7, #20]
}
 800eed6:	bf00      	nop
 800eed8:	e7fe      	b.n	800eed8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eedc:	699a      	ldr	r2, [r3, #24]
 800eede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee0:	18d1      	adds	r1, r2, r3
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eee8:	f7ff ff06 	bl	800ecf8 <prvInsertTimerInActiveList>
					break;
 800eeec:	e015      	b.n	800ef1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eef4:	f003 0302 	and.w	r3, r3, #2
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d103      	bne.n	800ef04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eefc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eefe:	f000 fbdf 	bl	800f6c0 <vPortFree>
 800ef02:	e00a      	b.n	800ef1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef0a:	f023 0301 	bic.w	r3, r3, #1
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef16:	e000      	b.n	800ef1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ef18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef1a:	4b08      	ldr	r3, [pc, #32]	; (800ef3c <prvProcessReceivedCommands+0x1c0>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	1d39      	adds	r1, r7, #4
 800ef20:	2200      	movs	r2, #0
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe f8da 	bl	800d0dc <xQueueReceive>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f47f af2a 	bne.w	800ed84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ef30:	bf00      	nop
 800ef32:	bf00      	nop
 800ef34:	3730      	adds	r7, #48	; 0x30
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	20003cf4 	.word	0x20003cf4

0800ef40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b088      	sub	sp, #32
 800ef44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef46:	e048      	b.n	800efda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef48:	4b2d      	ldr	r3, [pc, #180]	; (800f000 <prvSwitchTimerLists+0xc0>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68db      	ldr	r3, [r3, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef52:	4b2b      	ldr	r3, [pc, #172]	; (800f000 <prvSwitchTimerLists+0xc0>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	3304      	adds	r3, #4
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fd fc0d 	bl	800c780 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6a1b      	ldr	r3, [r3, #32]
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef74:	f003 0304 	and.w	r3, r3, #4
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d02e      	beq.n	800efda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	699b      	ldr	r3, [r3, #24]
 800ef80:	693a      	ldr	r2, [r7, #16]
 800ef82:	4413      	add	r3, r2
 800ef84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef86:	68ba      	ldr	r2, [r7, #8]
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d90e      	bls.n	800efac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef9a:	4b19      	ldr	r3, [pc, #100]	; (800f000 <prvSwitchTimerLists+0xc0>)
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3304      	adds	r3, #4
 800efa2:	4619      	mov	r1, r3
 800efa4:	4610      	mov	r0, r2
 800efa6:	f7fd fbb2 	bl	800c70e <vListInsert>
 800efaa:	e016      	b.n	800efda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efac:	2300      	movs	r3, #0
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	2300      	movs	r3, #0
 800efb2:	693a      	ldr	r2, [r7, #16]
 800efb4:	2100      	movs	r1, #0
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f7ff fd60 	bl	800ea7c <xTimerGenericCommand>
 800efbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10a      	bne.n	800efda <prvSwitchTimerLists+0x9a>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	603b      	str	r3, [r7, #0]
}
 800efd6:	bf00      	nop
 800efd8:	e7fe      	b.n	800efd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efda:	4b09      	ldr	r3, [pc, #36]	; (800f000 <prvSwitchTimerLists+0xc0>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1b1      	bne.n	800ef48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efe4:	4b06      	ldr	r3, [pc, #24]	; (800f000 <prvSwitchTimerLists+0xc0>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efea:	4b06      	ldr	r3, [pc, #24]	; (800f004 <prvSwitchTimerLists+0xc4>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a04      	ldr	r2, [pc, #16]	; (800f000 <prvSwitchTimerLists+0xc0>)
 800eff0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eff2:	4a04      	ldr	r2, [pc, #16]	; (800f004 <prvSwitchTimerLists+0xc4>)
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	6013      	str	r3, [r2, #0]
}
 800eff8:	bf00      	nop
 800effa:	3718      	adds	r7, #24
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	20003cec 	.word	0x20003cec
 800f004:	20003cf0 	.word	0x20003cf0

0800f008 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f00e:	f000 f969 	bl	800f2e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f012:	4b15      	ldr	r3, [pc, #84]	; (800f068 <prvCheckForValidListAndQueue+0x60>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d120      	bne.n	800f05c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f01a:	4814      	ldr	r0, [pc, #80]	; (800f06c <prvCheckForValidListAndQueue+0x64>)
 800f01c:	f7fd fb26 	bl	800c66c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f020:	4813      	ldr	r0, [pc, #76]	; (800f070 <prvCheckForValidListAndQueue+0x68>)
 800f022:	f7fd fb23 	bl	800c66c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f026:	4b13      	ldr	r3, [pc, #76]	; (800f074 <prvCheckForValidListAndQueue+0x6c>)
 800f028:	4a10      	ldr	r2, [pc, #64]	; (800f06c <prvCheckForValidListAndQueue+0x64>)
 800f02a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f02c:	4b12      	ldr	r3, [pc, #72]	; (800f078 <prvCheckForValidListAndQueue+0x70>)
 800f02e:	4a10      	ldr	r2, [pc, #64]	; (800f070 <prvCheckForValidListAndQueue+0x68>)
 800f030:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f032:	2300      	movs	r3, #0
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	4b11      	ldr	r3, [pc, #68]	; (800f07c <prvCheckForValidListAndQueue+0x74>)
 800f038:	4a11      	ldr	r2, [pc, #68]	; (800f080 <prvCheckForValidListAndQueue+0x78>)
 800f03a:	2110      	movs	r1, #16
 800f03c:	200a      	movs	r0, #10
 800f03e:	f7fd fc31 	bl	800c8a4 <xQueueGenericCreateStatic>
 800f042:	4603      	mov	r3, r0
 800f044:	4a08      	ldr	r2, [pc, #32]	; (800f068 <prvCheckForValidListAndQueue+0x60>)
 800f046:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f048:	4b07      	ldr	r3, [pc, #28]	; (800f068 <prvCheckForValidListAndQueue+0x60>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d005      	beq.n	800f05c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f050:	4b05      	ldr	r3, [pc, #20]	; (800f068 <prvCheckForValidListAndQueue+0x60>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	490b      	ldr	r1, [pc, #44]	; (800f084 <prvCheckForValidListAndQueue+0x7c>)
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe fbf8 	bl	800d84c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f05c:	f000 f972 	bl	800f344 <vPortExitCritical>
}
 800f060:	bf00      	nop
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	20003cf4 	.word	0x20003cf4
 800f06c:	20003cc4 	.word	0x20003cc4
 800f070:	20003cd8 	.word	0x20003cd8
 800f074:	20003cec 	.word	0x20003cec
 800f078:	20003cf0 	.word	0x20003cf0
 800f07c:	20003da0 	.word	0x20003da0
 800f080:	20003d00 	.word	0x20003d00
 800f084:	08013418 	.word	0x08013418

0800f088 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f088:	b480      	push	{r7}
 800f08a:	b085      	sub	sp, #20
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3b04      	subs	r3, #4
 800f098:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	3b04      	subs	r3, #4
 800f0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	f023 0201 	bic.w	r2, r3, #1
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3b04      	subs	r3, #4
 800f0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0b8:	4a0c      	ldr	r2, [pc, #48]	; (800f0ec <pxPortInitialiseStack+0x64>)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	3b14      	subs	r3, #20
 800f0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3b04      	subs	r3, #4
 800f0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f06f 0202 	mvn.w	r2, #2
 800f0d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	3b20      	subs	r3, #32
 800f0dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0de:	68fb      	ldr	r3, [r7, #12]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr
 800f0ec:	0800f0f1 	.word	0x0800f0f1

0800f0f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0fa:	4b12      	ldr	r3, [pc, #72]	; (800f144 <prvTaskExitError+0x54>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f102:	d00a      	beq.n	800f11a <prvTaskExitError+0x2a>
	__asm volatile
 800f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	60fb      	str	r3, [r7, #12]
}
 800f116:	bf00      	nop
 800f118:	e7fe      	b.n	800f118 <prvTaskExitError+0x28>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	60bb      	str	r3, [r7, #8]
}
 800f12c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f12e:	bf00      	nop
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d0fc      	beq.n	800f130 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	3714      	adds	r7, #20
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr
 800f144:	2000011c 	.word	0x2000011c
	...

0800f150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f150:	4b07      	ldr	r3, [pc, #28]	; (800f170 <pxCurrentTCBConst2>)
 800f152:	6819      	ldr	r1, [r3, #0]
 800f154:	6808      	ldr	r0, [r1, #0]
 800f156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15a:	f380 8809 	msr	PSP, r0
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f04f 0000 	mov.w	r0, #0
 800f166:	f380 8811 	msr	BASEPRI, r0
 800f16a:	4770      	bx	lr
 800f16c:	f3af 8000 	nop.w

0800f170 <pxCurrentTCBConst2>:
 800f170:	200037c4 	.word	0x200037c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop

0800f178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f178:	4808      	ldr	r0, [pc, #32]	; (800f19c <prvPortStartFirstTask+0x24>)
 800f17a:	6800      	ldr	r0, [r0, #0]
 800f17c:	6800      	ldr	r0, [r0, #0]
 800f17e:	f380 8808 	msr	MSP, r0
 800f182:	f04f 0000 	mov.w	r0, #0
 800f186:	f380 8814 	msr	CONTROL, r0
 800f18a:	b662      	cpsie	i
 800f18c:	b661      	cpsie	f
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	df00      	svc	0
 800f198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f19a:	bf00      	nop
 800f19c:	e000ed08 	.word	0xe000ed08

0800f1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f1a6:	4b46      	ldr	r3, [pc, #280]	; (800f2c0 <xPortStartScheduler+0x120>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a46      	ldr	r2, [pc, #280]	; (800f2c4 <xPortStartScheduler+0x124>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d10a      	bne.n	800f1c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	613b      	str	r3, [r7, #16]
}
 800f1c2:	bf00      	nop
 800f1c4:	e7fe      	b.n	800f1c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f1c6:	4b3e      	ldr	r3, [pc, #248]	; (800f2c0 <xPortStartScheduler+0x120>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a3f      	ldr	r2, [pc, #252]	; (800f2c8 <xPortStartScheduler+0x128>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d10a      	bne.n	800f1e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d4:	f383 8811 	msr	BASEPRI, r3
 800f1d8:	f3bf 8f6f 	isb	sy
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	60fb      	str	r3, [r7, #12]
}
 800f1e2:	bf00      	nop
 800f1e4:	e7fe      	b.n	800f1e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1e6:	4b39      	ldr	r3, [pc, #228]	; (800f2cc <xPortStartScheduler+0x12c>)
 800f1e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	22ff      	movs	r2, #255	; 0xff
 800f1f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f200:	78fb      	ldrb	r3, [r7, #3]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	4b31      	ldr	r3, [pc, #196]	; (800f2d0 <xPortStartScheduler+0x130>)
 800f20c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f20e:	4b31      	ldr	r3, [pc, #196]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f210:	2207      	movs	r2, #7
 800f212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f214:	e009      	b.n	800f22a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f216:	4b2f      	ldr	r3, [pc, #188]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	4a2d      	ldr	r2, [pc, #180]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f21e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	005b      	lsls	r3, r3, #1
 800f226:	b2db      	uxtb	r3, r3
 800f228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f22a:	78fb      	ldrb	r3, [r7, #3]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f232:	2b80      	cmp	r3, #128	; 0x80
 800f234:	d0ef      	beq.n	800f216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f236:	4b27      	ldr	r3, [pc, #156]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f1c3 0307 	rsb	r3, r3, #7
 800f23e:	2b04      	cmp	r3, #4
 800f240:	d00a      	beq.n	800f258 <xPortStartScheduler+0xb8>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	60bb      	str	r3, [r7, #8]
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f258:	4b1e      	ldr	r3, [pc, #120]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	021b      	lsls	r3, r3, #8
 800f25e:	4a1d      	ldr	r2, [pc, #116]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f262:	4b1c      	ldr	r3, [pc, #112]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f26a:	4a1a      	ldr	r2, [pc, #104]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f26c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	b2da      	uxtb	r2, r3
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f276:	4b18      	ldr	r3, [pc, #96]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a17      	ldr	r2, [pc, #92]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f27c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f282:	4b15      	ldr	r3, [pc, #84]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a14      	ldr	r2, [pc, #80]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f28c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f28e:	f000 f8dd 	bl	800f44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f292:	4b12      	ldr	r3, [pc, #72]	; (800f2dc <xPortStartScheduler+0x13c>)
 800f294:	2200      	movs	r2, #0
 800f296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f298:	f000 f8fc 	bl	800f494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f29c:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <xPortStartScheduler+0x140>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a0f      	ldr	r2, [pc, #60]	; (800f2e0 <xPortStartScheduler+0x140>)
 800f2a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f2a8:	f7ff ff66 	bl	800f178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f2ac:	f7fe ff3a 	bl	800e124 <vTaskSwitchContext>
	prvTaskExitError();
 800f2b0:	f7ff ff1e 	bl	800f0f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3718      	adds	r7, #24
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	e000ed00 	.word	0xe000ed00
 800f2c4:	410fc271 	.word	0x410fc271
 800f2c8:	410fc270 	.word	0x410fc270
 800f2cc:	e000e400 	.word	0xe000e400
 800f2d0:	20003df0 	.word	0x20003df0
 800f2d4:	20003df4 	.word	0x20003df4
 800f2d8:	e000ed20 	.word	0xe000ed20
 800f2dc:	2000011c 	.word	0x2000011c
 800f2e0:	e000ef34 	.word	0xe000ef34

0800f2e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ee:	f383 8811 	msr	BASEPRI, r3
 800f2f2:	f3bf 8f6f 	isb	sy
 800f2f6:	f3bf 8f4f 	dsb	sy
 800f2fa:	607b      	str	r3, [r7, #4]
}
 800f2fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <vPortEnterCritical+0x58>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	4a0d      	ldr	r2, [pc, #52]	; (800f33c <vPortEnterCritical+0x58>)
 800f306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f308:	4b0c      	ldr	r3, [pc, #48]	; (800f33c <vPortEnterCritical+0x58>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d10f      	bne.n	800f330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f310:	4b0b      	ldr	r3, [pc, #44]	; (800f340 <vPortEnterCritical+0x5c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00a      	beq.n	800f330 <vPortEnterCritical+0x4c>
	__asm volatile
 800f31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31e:	f383 8811 	msr	BASEPRI, r3
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	f3bf 8f4f 	dsb	sy
 800f32a:	603b      	str	r3, [r7, #0]
}
 800f32c:	bf00      	nop
 800f32e:	e7fe      	b.n	800f32e <vPortEnterCritical+0x4a>
	}
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	2000011c 	.word	0x2000011c
 800f340:	e000ed04 	.word	0xe000ed04

0800f344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f34a:	4b12      	ldr	r3, [pc, #72]	; (800f394 <vPortExitCritical+0x50>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <vPortExitCritical+0x24>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	607b      	str	r3, [r7, #4]
}
 800f364:	bf00      	nop
 800f366:	e7fe      	b.n	800f366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f368:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <vPortExitCritical+0x50>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	4a09      	ldr	r2, [pc, #36]	; (800f394 <vPortExitCritical+0x50>)
 800f370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f372:	4b08      	ldr	r3, [pc, #32]	; (800f394 <vPortExitCritical+0x50>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <vPortExitCritical+0x42>
 800f37a:	2300      	movs	r3, #0
 800f37c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f383 8811 	msr	BASEPRI, r3
}
 800f384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f386:	bf00      	nop
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	2000011c 	.word	0x2000011c
	...

0800f3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f3a0:	f3ef 8009 	mrs	r0, PSP
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	4b15      	ldr	r3, [pc, #84]	; (800f400 <pxCurrentTCBConst>)
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	f01e 0f10 	tst.w	lr, #16
 800f3b0:	bf08      	it	eq
 800f3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ba:	6010      	str	r0, [r2, #0]
 800f3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3c4:	f380 8811 	msr	BASEPRI, r0
 800f3c8:	f3bf 8f4f 	dsb	sy
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f7fe fea8 	bl	800e124 <vTaskSwitchContext>
 800f3d4:	f04f 0000 	mov.w	r0, #0
 800f3d8:	f380 8811 	msr	BASEPRI, r0
 800f3dc:	bc09      	pop	{r0, r3}
 800f3de:	6819      	ldr	r1, [r3, #0]
 800f3e0:	6808      	ldr	r0, [r1, #0]
 800f3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e6:	f01e 0f10 	tst.w	lr, #16
 800f3ea:	bf08      	it	eq
 800f3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3f0:	f380 8809 	msr	PSP, r0
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	f3af 8000 	nop.w

0800f400 <pxCurrentTCBConst>:
 800f400:	200037c4 	.word	0x200037c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop

0800f408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	607b      	str	r3, [r7, #4]
}
 800f420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f422:	f7fe fdc5 	bl	800dfb0 <xTaskIncrementTick>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d003      	beq.n	800f434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f42c:	4b06      	ldr	r3, [pc, #24]	; (800f448 <xPortSysTickHandler+0x40>)
 800f42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	2300      	movs	r3, #0
 800f436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	f383 8811 	msr	BASEPRI, r3
}
 800f43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	e000ed04 	.word	0xe000ed04

0800f44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f44c:	b480      	push	{r7}
 800f44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f450:	4b0b      	ldr	r3, [pc, #44]	; (800f480 <vPortSetupTimerInterrupt+0x34>)
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f456:	4b0b      	ldr	r3, [pc, #44]	; (800f484 <vPortSetupTimerInterrupt+0x38>)
 800f458:	2200      	movs	r2, #0
 800f45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f45c:	4b0a      	ldr	r3, [pc, #40]	; (800f488 <vPortSetupTimerInterrupt+0x3c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a0a      	ldr	r2, [pc, #40]	; (800f48c <vPortSetupTimerInterrupt+0x40>)
 800f462:	fba2 2303 	umull	r2, r3, r2, r3
 800f466:	099b      	lsrs	r3, r3, #6
 800f468:	4a09      	ldr	r2, [pc, #36]	; (800f490 <vPortSetupTimerInterrupt+0x44>)
 800f46a:	3b01      	subs	r3, #1
 800f46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f46e:	4b04      	ldr	r3, [pc, #16]	; (800f480 <vPortSetupTimerInterrupt+0x34>)
 800f470:	2207      	movs	r2, #7
 800f472:	601a      	str	r2, [r3, #0]
}
 800f474:	bf00      	nop
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	e000e010 	.word	0xe000e010
 800f484:	e000e018 	.word	0xe000e018
 800f488:	20000000 	.word	0x20000000
 800f48c:	10624dd3 	.word	0x10624dd3
 800f490:	e000e014 	.word	0xe000e014

0800f494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4a4 <vPortEnableVFP+0x10>
 800f498:	6801      	ldr	r1, [r0, #0]
 800f49a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f49e:	6001      	str	r1, [r0, #0]
 800f4a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4a2:	bf00      	nop
 800f4a4:	e000ed88 	.word	0xe000ed88

0800f4a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f4ae:	f3ef 8305 	mrs	r3, IPSR
 800f4b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b0f      	cmp	r3, #15
 800f4b8:	d914      	bls.n	800f4e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f4ba:	4a17      	ldr	r2, [pc, #92]	; (800f518 <vPortValidateInterruptPriority+0x70>)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	4413      	add	r3, r2
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4c4:	4b15      	ldr	r3, [pc, #84]	; (800f51c <vPortValidateInterruptPriority+0x74>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	7afa      	ldrb	r2, [r7, #11]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d20a      	bcs.n	800f4e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	607b      	str	r3, [r7, #4]
}
 800f4e0:	bf00      	nop
 800f4e2:	e7fe      	b.n	800f4e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4e4:	4b0e      	ldr	r3, [pc, #56]	; (800f520 <vPortValidateInterruptPriority+0x78>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4ec:	4b0d      	ldr	r3, [pc, #52]	; (800f524 <vPortValidateInterruptPriority+0x7c>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d90a      	bls.n	800f50a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	603b      	str	r3, [r7, #0]
}
 800f506:	bf00      	nop
 800f508:	e7fe      	b.n	800f508 <vPortValidateInterruptPriority+0x60>
	}
 800f50a:	bf00      	nop
 800f50c:	3714      	adds	r7, #20
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
 800f516:	bf00      	nop
 800f518:	e000e3f0 	.word	0xe000e3f0
 800f51c:	20003df0 	.word	0x20003df0
 800f520:	e000ed0c 	.word	0xe000ed0c
 800f524:	20003df4 	.word	0x20003df4

0800f528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08a      	sub	sp, #40	; 0x28
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f530:	2300      	movs	r3, #0
 800f532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f534:	f7fe fc6e 	bl	800de14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f538:	4b5b      	ldr	r3, [pc, #364]	; (800f6a8 <pvPortMalloc+0x180>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d101      	bne.n	800f544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f540:	f000 f920 	bl	800f784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f544:	4b59      	ldr	r3, [pc, #356]	; (800f6ac <pvPortMalloc+0x184>)
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4013      	ands	r3, r2
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f040 8093 	bne.w	800f678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d01d      	beq.n	800f594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f558:	2208      	movs	r2, #8
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4413      	add	r3, r2
 800f55e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f003 0307 	and.w	r3, r3, #7
 800f566:	2b00      	cmp	r3, #0
 800f568:	d014      	beq.n	800f594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f023 0307 	bic.w	r3, r3, #7
 800f570:	3308      	adds	r3, #8
 800f572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f003 0307 	and.w	r3, r3, #7
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00a      	beq.n	800f594 <pvPortMalloc+0x6c>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	617b      	str	r3, [r7, #20]
}
 800f590:	bf00      	nop
 800f592:	e7fe      	b.n	800f592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d06e      	beq.n	800f678 <pvPortMalloc+0x150>
 800f59a:	4b45      	ldr	r3, [pc, #276]	; (800f6b0 <pvPortMalloc+0x188>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d869      	bhi.n	800f678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f5a4:	4b43      	ldr	r3, [pc, #268]	; (800f6b4 <pvPortMalloc+0x18c>)
 800f5a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f5a8:	4b42      	ldr	r3, [pc, #264]	; (800f6b4 <pvPortMalloc+0x18c>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5ae:	e004      	b.n	800f5ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d903      	bls.n	800f5cc <pvPortMalloc+0xa4>
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1f1      	bne.n	800f5b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5cc:	4b36      	ldr	r3, [pc, #216]	; (800f6a8 <pvPortMalloc+0x180>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d050      	beq.n	800f678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5d6:	6a3b      	ldr	r3, [r7, #32]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2208      	movs	r2, #8
 800f5dc:	4413      	add	r3, r2
 800f5de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	6a3b      	ldr	r3, [r7, #32]
 800f5e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ea:	685a      	ldr	r2, [r3, #4]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	1ad2      	subs	r2, r2, r3
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d91f      	bls.n	800f638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	f003 0307 	and.w	r3, r3, #7
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00a      	beq.n	800f620 <pvPortMalloc+0xf8>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	613b      	str	r3, [r7, #16]
}
 800f61c:	bf00      	nop
 800f61e:	e7fe      	b.n	800f61e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	685a      	ldr	r2, [r3, #4]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	1ad2      	subs	r2, r2, r3
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f632:	69b8      	ldr	r0, [r7, #24]
 800f634:	f000 f908 	bl	800f848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f638:	4b1d      	ldr	r3, [pc, #116]	; (800f6b0 <pvPortMalloc+0x188>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	4a1b      	ldr	r2, [pc, #108]	; (800f6b0 <pvPortMalloc+0x188>)
 800f644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f646:	4b1a      	ldr	r3, [pc, #104]	; (800f6b0 <pvPortMalloc+0x188>)
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	4b1b      	ldr	r3, [pc, #108]	; (800f6b8 <pvPortMalloc+0x190>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d203      	bcs.n	800f65a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f652:	4b17      	ldr	r3, [pc, #92]	; (800f6b0 <pvPortMalloc+0x188>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a18      	ldr	r2, [pc, #96]	; (800f6b8 <pvPortMalloc+0x190>)
 800f658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	4b13      	ldr	r3, [pc, #76]	; (800f6ac <pvPortMalloc+0x184>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	431a      	orrs	r2, r3
 800f664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66a:	2200      	movs	r2, #0
 800f66c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f66e:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <pvPortMalloc+0x194>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3301      	adds	r3, #1
 800f674:	4a11      	ldr	r2, [pc, #68]	; (800f6bc <pvPortMalloc+0x194>)
 800f676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f678:	f7fe fbda 	bl	800de30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	f003 0307 	and.w	r3, r3, #7
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00a      	beq.n	800f69c <pvPortMalloc+0x174>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	60fb      	str	r3, [r7, #12]
}
 800f698:	bf00      	nop
 800f69a:	e7fe      	b.n	800f69a <pvPortMalloc+0x172>
	return pvReturn;
 800f69c:	69fb      	ldr	r3, [r7, #28]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3728      	adds	r7, #40	; 0x28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20004200 	.word	0x20004200
 800f6ac:	20004214 	.word	0x20004214
 800f6b0:	20004204 	.word	0x20004204
 800f6b4:	200041f8 	.word	0x200041f8
 800f6b8:	20004208 	.word	0x20004208
 800f6bc:	2000420c 	.word	0x2000420c

0800f6c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d04d      	beq.n	800f76e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6d2:	2308      	movs	r3, #8
 800f6d4:	425b      	negs	r3, r3
 800f6d6:	697a      	ldr	r2, [r7, #20]
 800f6d8:	4413      	add	r3, r2
 800f6da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	685a      	ldr	r2, [r3, #4]
 800f6e4:	4b24      	ldr	r3, [pc, #144]	; (800f778 <vPortFree+0xb8>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10a      	bne.n	800f704 <vPortFree+0x44>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	60fb      	str	r3, [r7, #12]
}
 800f700:	bf00      	nop
 800f702:	e7fe      	b.n	800f702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00a      	beq.n	800f722 <vPortFree+0x62>
	__asm volatile
 800f70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f710:	f383 8811 	msr	BASEPRI, r3
 800f714:	f3bf 8f6f 	isb	sy
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	60bb      	str	r3, [r7, #8]
}
 800f71e:	bf00      	nop
 800f720:	e7fe      	b.n	800f720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	685a      	ldr	r2, [r3, #4]
 800f726:	4b14      	ldr	r3, [pc, #80]	; (800f778 <vPortFree+0xb8>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4013      	ands	r3, r2
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d01e      	beq.n	800f76e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d11a      	bne.n	800f76e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	4b0e      	ldr	r3, [pc, #56]	; (800f778 <vPortFree+0xb8>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	43db      	mvns	r3, r3
 800f742:	401a      	ands	r2, r3
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f748:	f7fe fb64 	bl	800de14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	685a      	ldr	r2, [r3, #4]
 800f750:	4b0a      	ldr	r3, [pc, #40]	; (800f77c <vPortFree+0xbc>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4413      	add	r3, r2
 800f756:	4a09      	ldr	r2, [pc, #36]	; (800f77c <vPortFree+0xbc>)
 800f758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f75a:	6938      	ldr	r0, [r7, #16]
 800f75c:	f000 f874 	bl	800f848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f760:	4b07      	ldr	r3, [pc, #28]	; (800f780 <vPortFree+0xc0>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	3301      	adds	r3, #1
 800f766:	4a06      	ldr	r2, [pc, #24]	; (800f780 <vPortFree+0xc0>)
 800f768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f76a:	f7fe fb61 	bl	800de30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f76e:	bf00      	nop
 800f770:	3718      	adds	r7, #24
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	20004214 	.word	0x20004214
 800f77c:	20004204 	.word	0x20004204
 800f780:	20004210 	.word	0x20004210

0800f784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f78e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f790:	4b27      	ldr	r3, [pc, #156]	; (800f830 <prvHeapInit+0xac>)
 800f792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f003 0307 	and.w	r3, r3, #7
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00c      	beq.n	800f7b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3307      	adds	r3, #7
 800f7a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f023 0307 	bic.w	r3, r3, #7
 800f7aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	4a1f      	ldr	r2, [pc, #124]	; (800f830 <prvHeapInit+0xac>)
 800f7b4:	4413      	add	r3, r2
 800f7b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7bc:	4a1d      	ldr	r2, [pc, #116]	; (800f834 <prvHeapInit+0xb0>)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7c2:	4b1c      	ldr	r3, [pc, #112]	; (800f834 <prvHeapInit+0xb0>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7d0:	2208      	movs	r2, #8
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	1a9b      	subs	r3, r3, r2
 800f7d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f023 0307 	bic.w	r3, r3, #7
 800f7de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	4a15      	ldr	r2, [pc, #84]	; (800f838 <prvHeapInit+0xb4>)
 800f7e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7e6:	4b14      	ldr	r3, [pc, #80]	; (800f838 <prvHeapInit+0xb4>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7ee:	4b12      	ldr	r3, [pc, #72]	; (800f838 <prvHeapInit+0xb4>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	1ad2      	subs	r2, r2, r3
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f804:	4b0c      	ldr	r3, [pc, #48]	; (800f838 <prvHeapInit+0xb4>)
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	4a0a      	ldr	r2, [pc, #40]	; (800f83c <prvHeapInit+0xb8>)
 800f812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4a09      	ldr	r2, [pc, #36]	; (800f840 <prvHeapInit+0xbc>)
 800f81a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f81c:	4b09      	ldr	r3, [pc, #36]	; (800f844 <prvHeapInit+0xc0>)
 800f81e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f822:	601a      	str	r2, [r3, #0]
}
 800f824:	bf00      	nop
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr
 800f830:	20003df8 	.word	0x20003df8
 800f834:	200041f8 	.word	0x200041f8
 800f838:	20004200 	.word	0x20004200
 800f83c:	20004208 	.word	0x20004208
 800f840:	20004204 	.word	0x20004204
 800f844:	20004214 	.word	0x20004214

0800f848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f850:	4b28      	ldr	r3, [pc, #160]	; (800f8f4 <prvInsertBlockIntoFreeList+0xac>)
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	e002      	b.n	800f85c <prvInsertBlockIntoFreeList+0x14>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	60fb      	str	r3, [r7, #12]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d8f7      	bhi.n	800f856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	68ba      	ldr	r2, [r7, #8]
 800f870:	4413      	add	r3, r2
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	429a      	cmp	r2, r3
 800f876:	d108      	bne.n	800f88a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	441a      	add	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	441a      	add	r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d118      	bne.n	800f8d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	4b15      	ldr	r3, [pc, #84]	; (800f8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d00d      	beq.n	800f8c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685a      	ldr	r2, [r3, #4]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	441a      	add	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	e008      	b.n	800f8d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8c6:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	e003      	b.n	800f8d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8d8:	68fa      	ldr	r2, [r7, #12]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d002      	beq.n	800f8e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8e6:	bf00      	nop
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	200041f8 	.word	0x200041f8
 800f8f8:	20004200 	.word	0x20004200

0800f8fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f900:	2200      	movs	r2, #0
 800f902:	4912      	ldr	r1, [pc, #72]	; (800f94c <MX_USB_Device_Init+0x50>)
 800f904:	4812      	ldr	r0, [pc, #72]	; (800f950 <MX_USB_Device_Init+0x54>)
 800f906:	f7fb f9d5 	bl	800acb4 <USBD_Init>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d001      	beq.n	800f914 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f910:	f7f2 fd82 	bl	8002418 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f914:	490f      	ldr	r1, [pc, #60]	; (800f954 <MX_USB_Device_Init+0x58>)
 800f916:	480e      	ldr	r0, [pc, #56]	; (800f950 <MX_USB_Device_Init+0x54>)
 800f918:	f7fb f9fc 	bl	800ad14 <USBD_RegisterClass>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f922:	f7f2 fd79 	bl	8002418 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f926:	490c      	ldr	r1, [pc, #48]	; (800f958 <MX_USB_Device_Init+0x5c>)
 800f928:	4809      	ldr	r0, [pc, #36]	; (800f950 <MX_USB_Device_Init+0x54>)
 800f92a:	f7fb f91d 	bl	800ab68 <USBD_CDC_RegisterInterface>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d001      	beq.n	800f938 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f934:	f7f2 fd70 	bl	8002418 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f938:	4805      	ldr	r0, [pc, #20]	; (800f950 <MX_USB_Device_Init+0x54>)
 800f93a:	f7fb fa12 	bl	800ad62 <USBD_Start>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f944:	f7f2 fd68 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f948:	bf00      	nop
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	20000134 	.word	0x20000134
 800f950:	20004218 	.word	0x20004218
 800f954:	20000018 	.word	0x20000018
 800f958:	20000120 	.word	0x20000120

0800f95c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f960:	2200      	movs	r2, #0
 800f962:	4905      	ldr	r1, [pc, #20]	; (800f978 <CDC_Init_FS+0x1c>)
 800f964:	4805      	ldr	r0, [pc, #20]	; (800f97c <CDC_Init_FS+0x20>)
 800f966:	f7fb f914 	bl	800ab92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f96a:	4905      	ldr	r1, [pc, #20]	; (800f980 <CDC_Init_FS+0x24>)
 800f96c:	4803      	ldr	r0, [pc, #12]	; (800f97c <CDC_Init_FS+0x20>)
 800f96e:	f7fb f92e 	bl	800abce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f974:	4618      	mov	r0, r3
 800f976:	bd80      	pop	{r7, pc}
 800f978:	20004ce8 	.word	0x20004ce8
 800f97c:	20004218 	.word	0x20004218
 800f980:	200044e8 	.word	0x200044e8

0800f984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f984:	b480      	push	{r7}
 800f986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	6039      	str	r1, [r7, #0]
 800f99e:	71fb      	strb	r3, [r7, #7]
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	2b23      	cmp	r3, #35	; 0x23
 800f9a8:	d84a      	bhi.n	800fa40 <CDC_Control_FS+0xac>
 800f9aa:	a201      	add	r2, pc, #4	; (adr r2, 800f9b0 <CDC_Control_FS+0x1c>)
 800f9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b0:	0800fa41 	.word	0x0800fa41
 800f9b4:	0800fa41 	.word	0x0800fa41
 800f9b8:	0800fa41 	.word	0x0800fa41
 800f9bc:	0800fa41 	.word	0x0800fa41
 800f9c0:	0800fa41 	.word	0x0800fa41
 800f9c4:	0800fa41 	.word	0x0800fa41
 800f9c8:	0800fa41 	.word	0x0800fa41
 800f9cc:	0800fa41 	.word	0x0800fa41
 800f9d0:	0800fa41 	.word	0x0800fa41
 800f9d4:	0800fa41 	.word	0x0800fa41
 800f9d8:	0800fa41 	.word	0x0800fa41
 800f9dc:	0800fa41 	.word	0x0800fa41
 800f9e0:	0800fa41 	.word	0x0800fa41
 800f9e4:	0800fa41 	.word	0x0800fa41
 800f9e8:	0800fa41 	.word	0x0800fa41
 800f9ec:	0800fa41 	.word	0x0800fa41
 800f9f0:	0800fa41 	.word	0x0800fa41
 800f9f4:	0800fa41 	.word	0x0800fa41
 800f9f8:	0800fa41 	.word	0x0800fa41
 800f9fc:	0800fa41 	.word	0x0800fa41
 800fa00:	0800fa41 	.word	0x0800fa41
 800fa04:	0800fa41 	.word	0x0800fa41
 800fa08:	0800fa41 	.word	0x0800fa41
 800fa0c:	0800fa41 	.word	0x0800fa41
 800fa10:	0800fa41 	.word	0x0800fa41
 800fa14:	0800fa41 	.word	0x0800fa41
 800fa18:	0800fa41 	.word	0x0800fa41
 800fa1c:	0800fa41 	.word	0x0800fa41
 800fa20:	0800fa41 	.word	0x0800fa41
 800fa24:	0800fa41 	.word	0x0800fa41
 800fa28:	0800fa41 	.word	0x0800fa41
 800fa2c:	0800fa41 	.word	0x0800fa41
 800fa30:	0800fa41 	.word	0x0800fa41
 800fa34:	0800fa41 	.word	0x0800fa41
 800fa38:	0800fa41 	.word	0x0800fa41
 800fa3c:	0800fa41 	.word	0x0800fa41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fa40:	bf00      	nop
  }

  return (USBD_OK);
 800fa42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fa5a:	6879      	ldr	r1, [r7, #4]
 800fa5c:	4805      	ldr	r0, [pc, #20]	; (800fa74 <CDC_Receive_FS+0x24>)
 800fa5e:	f7fb f8b6 	bl	800abce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa62:	4804      	ldr	r0, [pc, #16]	; (800fa74 <CDC_Receive_FS+0x24>)
 800fa64:	f7fb f8fc 	bl	800ac60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fa68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	20004218 	.word	0x20004218

0800fa78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	460b      	mov	r3, r1
 800fa82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fa88:	4b0d      	ldr	r3, [pc, #52]	; (800fac0 <CDC_Transmit_FS+0x48>)
 800fa8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e00b      	b.n	800fab6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fa9e:	887b      	ldrh	r3, [r7, #2]
 800faa0:	461a      	mov	r2, r3
 800faa2:	6879      	ldr	r1, [r7, #4]
 800faa4:	4806      	ldr	r0, [pc, #24]	; (800fac0 <CDC_Transmit_FS+0x48>)
 800faa6:	f7fb f874 	bl	800ab92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800faaa:	4805      	ldr	r0, [pc, #20]	; (800fac0 <CDC_Transmit_FS+0x48>)
 800faac:	f7fb f8a8 	bl	800ac00 <USBD_CDC_TransmitPacket>
 800fab0:	4603      	mov	r3, r0
 800fab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	20004218 	.word	0x20004218

0800fac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	4613      	mov	r3, r2
 800fad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	371c      	adds	r7, #28
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr
	...

0800fae8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	6039      	str	r1, [r7, #0]
 800faf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	2212      	movs	r2, #18
 800faf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800fafa:	4b03      	ldr	r3, [pc, #12]	; (800fb08 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr
 800fb08:	20000154 	.word	0x20000154

0800fb0c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	4603      	mov	r3, r0
 800fb14:	6039      	str	r1, [r7, #0]
 800fb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	2204      	movs	r2, #4
 800fb1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fb1e:	4b03      	ldr	r3, [pc, #12]	; (800fb2c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	20000168 	.word	0x20000168

0800fb30 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	4603      	mov	r3, r0
 800fb38:	6039      	str	r1, [r7, #0]
 800fb3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb3c:	79fb      	ldrb	r3, [r7, #7]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d105      	bne.n	800fb4e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fb42:	683a      	ldr	r2, [r7, #0]
 800fb44:	4907      	ldr	r1, [pc, #28]	; (800fb64 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fb46:	4808      	ldr	r0, [pc, #32]	; (800fb68 <USBD_CDC_ProductStrDescriptor+0x38>)
 800fb48:	f7fc f8f3 	bl	800bd32 <USBD_GetString>
 800fb4c:	e004      	b.n	800fb58 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	4904      	ldr	r1, [pc, #16]	; (800fb64 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fb52:	4805      	ldr	r0, [pc, #20]	; (800fb68 <USBD_CDC_ProductStrDescriptor+0x38>)
 800fb54:	f7fc f8ed 	bl	800bd32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb58:	4b02      	ldr	r3, [pc, #8]	; (800fb64 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3708      	adds	r7, #8
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	200054e8 	.word	0x200054e8
 800fb68:	08013420 	.word	0x08013420

0800fb6c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	4603      	mov	r3, r0
 800fb74:	6039      	str	r1, [r7, #0]
 800fb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fb78:	683a      	ldr	r2, [r7, #0]
 800fb7a:	4904      	ldr	r1, [pc, #16]	; (800fb8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800fb7c:	4804      	ldr	r0, [pc, #16]	; (800fb90 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800fb7e:	f7fc f8d8 	bl	800bd32 <USBD_GetString>
  return USBD_StrDesc;
 800fb82:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	200054e8 	.word	0x200054e8
 800fb90:	0801343c 	.word	0x0801343c

0800fb94 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	6039      	str	r1, [r7, #0]
 800fb9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	221a      	movs	r2, #26
 800fba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fba6:	f000 f843 	bl	800fc30 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800fbaa:	4b02      	ldr	r3, [pc, #8]	; (800fbb4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	2000016c 	.word	0x2000016c

0800fbb8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	6039      	str	r1, [r7, #0]
 800fbc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d105      	bne.n	800fbd6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	4907      	ldr	r1, [pc, #28]	; (800fbec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fbce:	4808      	ldr	r0, [pc, #32]	; (800fbf0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fbd0:	f7fc f8af 	bl	800bd32 <USBD_GetString>
 800fbd4:	e004      	b.n	800fbe0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fbd6:	683a      	ldr	r2, [r7, #0]
 800fbd8:	4904      	ldr	r1, [pc, #16]	; (800fbec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fbda:	4805      	ldr	r0, [pc, #20]	; (800fbf0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fbdc:	f7fc f8a9 	bl	800bd32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbe0:	4b02      	ldr	r3, [pc, #8]	; (800fbec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	200054e8 	.word	0x200054e8
 800fbf0:	08013450 	.word	0x08013450

0800fbf4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	6039      	str	r1, [r7, #0]
 800fbfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc00:	79fb      	ldrb	r3, [r7, #7]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d105      	bne.n	800fc12 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fc06:	683a      	ldr	r2, [r7, #0]
 800fc08:	4907      	ldr	r1, [pc, #28]	; (800fc28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fc0a:	4808      	ldr	r0, [pc, #32]	; (800fc2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fc0c:	f7fc f891 	bl	800bd32 <USBD_GetString>
 800fc10:	e004      	b.n	800fc1c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fc12:	683a      	ldr	r2, [r7, #0]
 800fc14:	4904      	ldr	r1, [pc, #16]	; (800fc28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fc16:	4805      	ldr	r0, [pc, #20]	; (800fc2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fc18:	f7fc f88b 	bl	800bd32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc1c:	4b02      	ldr	r3, [pc, #8]	; (800fc28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	200054e8 	.word	0x200054e8
 800fc2c:	0801345c 	.word	0x0801345c

0800fc30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fc36:	4b0f      	ldr	r3, [pc, #60]	; (800fc74 <Get_SerialNum+0x44>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fc3c:	4b0e      	ldr	r3, [pc, #56]	; (800fc78 <Get_SerialNum+0x48>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fc42:	4b0e      	ldr	r3, [pc, #56]	; (800fc7c <Get_SerialNum+0x4c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d009      	beq.n	800fc6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fc56:	2208      	movs	r2, #8
 800fc58:	4909      	ldr	r1, [pc, #36]	; (800fc80 <Get_SerialNum+0x50>)
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f000 f814 	bl	800fc88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fc60:	2204      	movs	r2, #4
 800fc62:	4908      	ldr	r1, [pc, #32]	; (800fc84 <Get_SerialNum+0x54>)
 800fc64:	68b8      	ldr	r0, [r7, #8]
 800fc66:	f000 f80f 	bl	800fc88 <IntToUnicode>
  }
}
 800fc6a:	bf00      	nop
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	1fff7590 	.word	0x1fff7590
 800fc78:	1fff7594 	.word	0x1fff7594
 800fc7c:	1fff7598 	.word	0x1fff7598
 800fc80:	2000016e 	.word	0x2000016e
 800fc84:	2000017e 	.word	0x2000017e

0800fc88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b087      	sub	sp, #28
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	4613      	mov	r3, r2
 800fc94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc96:	2300      	movs	r3, #0
 800fc98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	75fb      	strb	r3, [r7, #23]
 800fc9e:	e027      	b.n	800fcf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	0f1b      	lsrs	r3, r3, #28
 800fca4:	2b09      	cmp	r3, #9
 800fca6:	d80b      	bhi.n	800fcc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	0f1b      	lsrs	r3, r3, #28
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	7dfb      	ldrb	r3, [r7, #23]
 800fcb0:	005b      	lsls	r3, r3, #1
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	440b      	add	r3, r1
 800fcb8:	3230      	adds	r2, #48	; 0x30
 800fcba:	b2d2      	uxtb	r2, r2
 800fcbc:	701a      	strb	r2, [r3, #0]
 800fcbe:	e00a      	b.n	800fcd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	0f1b      	lsrs	r3, r3, #28
 800fcc4:	b2da      	uxtb	r2, r3
 800fcc6:	7dfb      	ldrb	r3, [r7, #23]
 800fcc8:	005b      	lsls	r3, r3, #1
 800fcca:	4619      	mov	r1, r3
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	440b      	add	r3, r1
 800fcd0:	3237      	adds	r2, #55	; 0x37
 800fcd2:	b2d2      	uxtb	r2, r2
 800fcd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	011b      	lsls	r3, r3, #4
 800fcda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fcdc:	7dfb      	ldrb	r3, [r7, #23]
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	3301      	adds	r3, #1
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	4413      	add	r3, r2
 800fce6:	2200      	movs	r2, #0
 800fce8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fcea:	7dfb      	ldrb	r3, [r7, #23]
 800fcec:	3301      	adds	r3, #1
 800fcee:	75fb      	strb	r3, [r7, #23]
 800fcf0:	7dfa      	ldrb	r2, [r7, #23]
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d3d3      	bcc.n	800fca0 <IntToUnicode+0x18>
  }
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	371c      	adds	r7, #28
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
	...

0800fd08 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b098      	sub	sp, #96	; 0x60
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fd10:	f107 030c 	add.w	r3, r7, #12
 800fd14:	2254      	movs	r2, #84	; 0x54
 800fd16:	2100      	movs	r1, #0
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f001 f898 	bl	8010e4e <memset>
  if(pcdHandle->Instance==USB)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a15      	ldr	r2, [pc, #84]	; (800fd78 <HAL_PCD_MspInit+0x70>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d122      	bne.n	800fd6e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fd28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fd2c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fd32:	f107 030c 	add.w	r3, r7, #12
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7f5 ff6e 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800fd42:	f7f2 fb69 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800fd46:	4b0d      	ldr	r3, [pc, #52]	; (800fd7c <HAL_PCD_MspInit+0x74>)
 800fd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd4a:	4a0c      	ldr	r2, [pc, #48]	; (800fd7c <HAL_PCD_MspInit+0x74>)
 800fd4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fd50:	6593      	str	r3, [r2, #88]	; 0x58
 800fd52:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <HAL_PCD_MspInit+0x74>)
 800fd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd5a:	60bb      	str	r3, [r7, #8]
 800fd5c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800fd5e:	2200      	movs	r2, #0
 800fd60:	2105      	movs	r1, #5
 800fd62:	2014      	movs	r0, #20
 800fd64:	f7f2 ff42 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800fd68:	2014      	movs	r0, #20
 800fd6a:	f7f2 ff59 	bl	8002c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800fd6e:	bf00      	nop
 800fd70:	3760      	adds	r7, #96	; 0x60
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	40005c00 	.word	0x40005c00
 800fd7c:	40021000 	.word	0x40021000

0800fd80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800fd94:	4619      	mov	r1, r3
 800fd96:	4610      	mov	r0, r2
 800fd98:	f7fb f82e 	bl	800adf8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800fd9c:	bf00      	nop
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	460b      	mov	r3, r1
 800fdae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800fdb6:	78fa      	ldrb	r2, [r7, #3]
 800fdb8:	6879      	ldr	r1, [r7, #4]
 800fdba:	4613      	mov	r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4413      	add	r3, r2
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	440b      	add	r3, r1
 800fdc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	78fb      	ldrb	r3, [r7, #3]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	f7fb f868 	bl	800aea2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800fdd2:	bf00      	nop
 800fdd4:	3708      	adds	r7, #8
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b082      	sub	sp, #8
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
 800fde2:	460b      	mov	r3, r1
 800fde4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800fdec:	78fa      	ldrb	r2, [r7, #3]
 800fdee:	6879      	ldr	r1, [r7, #4]
 800fdf0:	4613      	mov	r3, r2
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	4413      	add	r3, r2
 800fdf6:	00db      	lsls	r3, r3, #3
 800fdf8:	440b      	add	r3, r1
 800fdfa:	3324      	adds	r3, #36	; 0x24
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	78fb      	ldrb	r3, [r7, #3]
 800fe00:	4619      	mov	r1, r3
 800fe02:	f7fb f8b1 	bl	800af68 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800fe06:	bf00      	nop
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b082      	sub	sp, #8
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fb f9c5 	bl	800b1ac <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800fe22:	bf00      	nop
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b084      	sub	sp, #16
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fe32:	2301      	movs	r3, #1
 800fe34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	795b      	ldrb	r3, [r3, #5]
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d001      	beq.n	800fe42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fe3e:	f7f2 faeb 	bl	8002418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fe48:	7bfa      	ldrb	r2, [r7, #15]
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fb f96f 	bl	800b130 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fb f91b 	bl	800b094 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fe5e:	bf00      	nop
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fb f96a 	bl	800b150 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	7a5b      	ldrb	r3, [r3, #9]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d005      	beq.n	800fe90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe84:	4b04      	ldr	r3, [pc, #16]	; (800fe98 <HAL_PCD_SuspendCallback+0x30>)
 800fe86:	691b      	ldr	r3, [r3, #16]
 800fe88:	4a03      	ldr	r2, [pc, #12]	; (800fe98 <HAL_PCD_SuspendCallback+0x30>)
 800fe8a:	f043 0306 	orr.w	r3, r3, #6
 800fe8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fe90:	bf00      	nop
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	e000ed00 	.word	0xe000ed00

0800fe9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	7a5b      	ldrb	r3, [r3, #9]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d007      	beq.n	800febc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800feac:	4b08      	ldr	r3, [pc, #32]	; (800fed0 <HAL_PCD_ResumeCallback+0x34>)
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	4a07      	ldr	r2, [pc, #28]	; (800fed0 <HAL_PCD_ResumeCallback+0x34>)
 800feb2:	f023 0306 	bic.w	r3, r3, #6
 800feb6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800feb8:	f000 f9f8 	bl	80102ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fb f95a 	bl	800b17c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fec8:	bf00      	nop
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	e000ed00 	.word	0xe000ed00

0800fed4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fedc:	4a2b      	ldr	r2, [pc, #172]	; (800ff8c <USBD_LL_Init+0xb8>)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4a29      	ldr	r2, [pc, #164]	; (800ff8c <USBD_LL_Init+0xb8>)
 800fee8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800feec:	4b27      	ldr	r3, [pc, #156]	; (800ff8c <USBD_LL_Init+0xb8>)
 800feee:	4a28      	ldr	r2, [pc, #160]	; (800ff90 <USBD_LL_Init+0xbc>)
 800fef0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fef2:	4b26      	ldr	r3, [pc, #152]	; (800ff8c <USBD_LL_Init+0xb8>)
 800fef4:	2208      	movs	r2, #8
 800fef6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fef8:	4b24      	ldr	r3, [pc, #144]	; (800ff8c <USBD_LL_Init+0xb8>)
 800fefa:	2202      	movs	r2, #2
 800fefc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fefe:	4b23      	ldr	r3, [pc, #140]	; (800ff8c <USBD_LL_Init+0xb8>)
 800ff00:	2202      	movs	r2, #2
 800ff02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ff04:	4b21      	ldr	r3, [pc, #132]	; (800ff8c <USBD_LL_Init+0xb8>)
 800ff06:	2200      	movs	r2, #0
 800ff08:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ff0a:	4b20      	ldr	r3, [pc, #128]	; (800ff8c <USBD_LL_Init+0xb8>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ff10:	4b1e      	ldr	r3, [pc, #120]	; (800ff8c <USBD_LL_Init+0xb8>)
 800ff12:	2200      	movs	r2, #0
 800ff14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ff16:	4b1d      	ldr	r3, [pc, #116]	; (800ff8c <USBD_LL_Init+0xb8>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ff1c:	481b      	ldr	r0, [pc, #108]	; (800ff8c <USBD_LL_Init+0xb8>)
 800ff1e:	f7f3 fb37 	bl	8003590 <HAL_PCD_Init>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ff28:	f7f2 fa76 	bl	8002418 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff32:	2318      	movs	r3, #24
 800ff34:	2200      	movs	r2, #0
 800ff36:	2100      	movs	r1, #0
 800ff38:	f7f4 fff1 	bl	8004f1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff42:	2358      	movs	r3, #88	; 0x58
 800ff44:	2200      	movs	r2, #0
 800ff46:	2180      	movs	r1, #128	; 0x80
 800ff48:	f7f4 ffe9 	bl	8004f1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff52:	23c0      	movs	r3, #192	; 0xc0
 800ff54:	2200      	movs	r2, #0
 800ff56:	2181      	movs	r1, #129	; 0x81
 800ff58:	f7f4 ffe1 	bl	8004f1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff62:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ff66:	2200      	movs	r2, #0
 800ff68:	2101      	movs	r1, #1
 800ff6a:	f7f4 ffd8 	bl	8004f1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff78:	2200      	movs	r2, #0
 800ff7a:	2182      	movs	r1, #130	; 0x82
 800ff7c:	f7f4 ffcf 	bl	8004f1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	200056e8 	.word	0x200056e8
 800ff90:	40005c00 	.word	0x40005c00

0800ff94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7f3 fbbe 	bl	800372c <HAL_PCD_Start>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f000 f97e 	bl	80102b8 <USBD_Get_USB_Status>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	4608      	mov	r0, r1
 800ffd4:	4611      	mov	r1, r2
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	4603      	mov	r3, r0
 800ffda:	70fb      	strb	r3, [r7, #3]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	70bb      	strb	r3, [r7, #2]
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fff2:	78bb      	ldrb	r3, [r7, #2]
 800fff4:	883a      	ldrh	r2, [r7, #0]
 800fff6:	78f9      	ldrb	r1, [r7, #3]
 800fff8:	f7f3 fd05 	bl	8003a06 <HAL_PCD_EP_Open>
 800fffc:	4603      	mov	r3, r0
 800fffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010000:	7bfb      	ldrb	r3, [r7, #15]
 8010002:	4618      	mov	r0, r3
 8010004:	f000 f958 	bl	80102b8 <USBD_Get_USB_Status>
 8010008:	4603      	mov	r3, r0
 801000a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801000c:	7bbb      	ldrb	r3, [r7, #14]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3710      	adds	r7, #16
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010016:	b580      	push	{r7, lr}
 8010018:	b084      	sub	sp, #16
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
 801001e:	460b      	mov	r3, r1
 8010020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010022:	2300      	movs	r3, #0
 8010024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010026:	2300      	movs	r3, #0
 8010028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010030:	78fa      	ldrb	r2, [r7, #3]
 8010032:	4611      	mov	r1, r2
 8010034:	4618      	mov	r0, r3
 8010036:	f7f3 fd43 	bl	8003ac0 <HAL_PCD_EP_Close>
 801003a:	4603      	mov	r3, r0
 801003c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801003e:	7bfb      	ldrb	r3, [r7, #15]
 8010040:	4618      	mov	r0, r3
 8010042:	f000 f939 	bl	80102b8 <USBD_Get_USB_Status>
 8010046:	4603      	mov	r3, r0
 8010048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801004a:	7bbb      	ldrb	r3, [r7, #14]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	460b      	mov	r3, r1
 801005e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010060:	2300      	movs	r3, #0
 8010062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010064:	2300      	movs	r3, #0
 8010066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801006e:	78fa      	ldrb	r2, [r7, #3]
 8010070:	4611      	mov	r1, r2
 8010072:	4618      	mov	r0, r3
 8010074:	f7f3 fdec 	bl	8003c50 <HAL_PCD_EP_SetStall>
 8010078:	4603      	mov	r3, r0
 801007a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801007c:	7bfb      	ldrb	r3, [r7, #15]
 801007e:	4618      	mov	r0, r3
 8010080:	f000 f91a 	bl	80102b8 <USBD_Get_USB_Status>
 8010084:	4603      	mov	r3, r0
 8010086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010088:	7bbb      	ldrb	r3, [r7, #14]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	460b      	mov	r3, r1
 801009c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801009e:	2300      	movs	r3, #0
 80100a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100ac:	78fa      	ldrb	r2, [r7, #3]
 80100ae:	4611      	mov	r1, r2
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7f3 fe1f 	bl	8003cf4 <HAL_PCD_EP_ClrStall>
 80100b6:	4603      	mov	r3, r0
 80100b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100ba:	7bfb      	ldrb	r3, [r7, #15]
 80100bc:	4618      	mov	r0, r3
 80100be:	f000 f8fb 	bl	80102b8 <USBD_Get_USB_Status>
 80100c2:	4603      	mov	r3, r0
 80100c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3710      	adds	r7, #16
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	460b      	mov	r3, r1
 80100da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80100e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	da0b      	bge.n	8010104 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80100ec:	78fb      	ldrb	r3, [r7, #3]
 80100ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80100f2:	68f9      	ldr	r1, [r7, #12]
 80100f4:	4613      	mov	r3, r2
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	4413      	add	r3, r2
 80100fa:	00db      	lsls	r3, r3, #3
 80100fc:	440b      	add	r3, r1
 80100fe:	3312      	adds	r3, #18
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	e00b      	b.n	801011c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801010a:	68f9      	ldr	r1, [r7, #12]
 801010c:	4613      	mov	r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	4413      	add	r3, r2
 8010112:	00db      	lsls	r3, r3, #3
 8010114:	440b      	add	r3, r1
 8010116:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801011a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801011c:	4618      	mov	r0, r3
 801011e:	3714      	adds	r7, #20
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	460b      	mov	r3, r1
 8010132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010138:	2300      	movs	r3, #0
 801013a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010142:	78fa      	ldrb	r2, [r7, #3]
 8010144:	4611      	mov	r1, r2
 8010146:	4618      	mov	r0, r3
 8010148:	f7f3 fc39 	bl	80039be <HAL_PCD_SetAddress>
 801014c:	4603      	mov	r3, r0
 801014e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010150:	7bfb      	ldrb	r3, [r7, #15]
 8010152:	4618      	mov	r0, r3
 8010154:	f000 f8b0 	bl	80102b8 <USBD_Get_USB_Status>
 8010158:	4603      	mov	r3, r0
 801015a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801015c:	7bbb      	ldrb	r3, [r7, #14]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b086      	sub	sp, #24
 801016a:	af00      	add	r7, sp, #0
 801016c:	60f8      	str	r0, [r7, #12]
 801016e:	607a      	str	r2, [r7, #4]
 8010170:	603b      	str	r3, [r7, #0]
 8010172:	460b      	mov	r3, r1
 8010174:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801017a:	2300      	movs	r3, #0
 801017c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010184:	7af9      	ldrb	r1, [r7, #11]
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	f7f3 fd2a 	bl	8003be2 <HAL_PCD_EP_Transmit>
 801018e:	4603      	mov	r3, r0
 8010190:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010192:	7dfb      	ldrb	r3, [r7, #23]
 8010194:	4618      	mov	r0, r3
 8010196:	f000 f88f 	bl	80102b8 <USBD_Get_USB_Status>
 801019a:	4603      	mov	r3, r0
 801019c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801019e:	7dbb      	ldrb	r3, [r7, #22]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3718      	adds	r7, #24
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b086      	sub	sp, #24
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	607a      	str	r2, [r7, #4]
 80101b2:	603b      	str	r3, [r7, #0]
 80101b4:	460b      	mov	r3, r1
 80101b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101b8:	2300      	movs	r3, #0
 80101ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101bc:	2300      	movs	r3, #0
 80101be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80101c6:	7af9      	ldrb	r1, [r7, #11]
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	f7f3 fcc0 	bl	8003b50 <HAL_PCD_EP_Receive>
 80101d0:	4603      	mov	r3, r0
 80101d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101d4:	7dfb      	ldrb	r3, [r7, #23]
 80101d6:	4618      	mov	r0, r3
 80101d8:	f000 f86e 	bl	80102b8 <USBD_Get_USB_Status>
 80101dc:	4603      	mov	r3, r0
 80101de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3718      	adds	r7, #24
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b082      	sub	sp, #8
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	460b      	mov	r3, r1
 80101f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101fc:	78fa      	ldrb	r2, [r7, #3]
 80101fe:	4611      	mov	r1, r2
 8010200:	4618      	mov	r0, r3
 8010202:	f7f3 fcd6 	bl	8003bb2 <HAL_PCD_EP_GetRxCount>
 8010206:	4603      	mov	r3, r0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3708      	adds	r7, #8
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	460b      	mov	r3, r1
 801021a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801021c:	78fb      	ldrb	r3, [r7, #3]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d002      	beq.n	8010228 <HAL_PCDEx_LPM_Callback+0x18>
 8010222:	2b01      	cmp	r3, #1
 8010224:	d013      	beq.n	801024e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010226:	e023      	b.n	8010270 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	7a5b      	ldrb	r3, [r3, #9]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d007      	beq.n	8010240 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010230:	f000 f83c 	bl	80102ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010234:	4b10      	ldr	r3, [pc, #64]	; (8010278 <HAL_PCDEx_LPM_Callback+0x68>)
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	4a0f      	ldr	r2, [pc, #60]	; (8010278 <HAL_PCDEx_LPM_Callback+0x68>)
 801023a:	f023 0306 	bic.w	r3, r3, #6
 801023e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010246:	4618      	mov	r0, r3
 8010248:	f7fa ff98 	bl	800b17c <USBD_LL_Resume>
    break;
 801024c:	e010      	b.n	8010270 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010254:	4618      	mov	r0, r3
 8010256:	f7fa ff7b 	bl	800b150 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	7a5b      	ldrb	r3, [r3, #9]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d005      	beq.n	801026e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010262:	4b05      	ldr	r3, [pc, #20]	; (8010278 <HAL_PCDEx_LPM_Callback+0x68>)
 8010264:	691b      	ldr	r3, [r3, #16]
 8010266:	4a04      	ldr	r2, [pc, #16]	; (8010278 <HAL_PCDEx_LPM_Callback+0x68>)
 8010268:	f043 0306 	orr.w	r3, r3, #6
 801026c:	6113      	str	r3, [r2, #16]
    break;
 801026e:	bf00      	nop
}
 8010270:	bf00      	nop
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	e000ed00 	.word	0xe000ed00

0801027c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010284:	4b03      	ldr	r3, [pc, #12]	; (8010294 <USBD_static_malloc+0x18>)
}
 8010286:	4618      	mov	r0, r3
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	200059c4 	.word	0x200059c4

08010298 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]

}
 80102a0:	bf00      	nop
 80102a2:	370c      	adds	r7, #12
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80102b0:	f7f2 f855 	bl	800235e <SystemClock_Config>
}
 80102b4:	bf00      	nop
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	4603      	mov	r3, r0
 80102c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102c2:	2300      	movs	r3, #0
 80102c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d817      	bhi.n	80102fc <USBD_Get_USB_Status+0x44>
 80102cc:	a201      	add	r2, pc, #4	; (adr r2, 80102d4 <USBD_Get_USB_Status+0x1c>)
 80102ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102d2:	bf00      	nop
 80102d4:	080102e5 	.word	0x080102e5
 80102d8:	080102eb 	.word	0x080102eb
 80102dc:	080102f1 	.word	0x080102f1
 80102e0:	080102f7 	.word	0x080102f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80102e4:	2300      	movs	r3, #0
 80102e6:	73fb      	strb	r3, [r7, #15]
    break;
 80102e8:	e00b      	b.n	8010302 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102ea:	2303      	movs	r3, #3
 80102ec:	73fb      	strb	r3, [r7, #15]
    break;
 80102ee:	e008      	b.n	8010302 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102f0:	2301      	movs	r3, #1
 80102f2:	73fb      	strb	r3, [r7, #15]
    break;
 80102f4:	e005      	b.n	8010302 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102f6:	2303      	movs	r3, #3
 80102f8:	73fb      	strb	r3, [r7, #15]
    break;
 80102fa:	e002      	b.n	8010302 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80102fc:	2303      	movs	r3, #3
 80102fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010300:	bf00      	nop
  }
  return usb_status;
 8010302:	7bfb      	ldrb	r3, [r7, #15]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3714      	adds	r7, #20
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <__cvt>:
 8010310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010314:	ec55 4b10 	vmov	r4, r5, d0
 8010318:	2d00      	cmp	r5, #0
 801031a:	460e      	mov	r6, r1
 801031c:	4619      	mov	r1, r3
 801031e:	462b      	mov	r3, r5
 8010320:	bfbb      	ittet	lt
 8010322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010326:	461d      	movlt	r5, r3
 8010328:	2300      	movge	r3, #0
 801032a:	232d      	movlt	r3, #45	; 0x2d
 801032c:	700b      	strb	r3, [r1, #0]
 801032e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010334:	4691      	mov	r9, r2
 8010336:	f023 0820 	bic.w	r8, r3, #32
 801033a:	bfbc      	itt	lt
 801033c:	4622      	movlt	r2, r4
 801033e:	4614      	movlt	r4, r2
 8010340:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010344:	d005      	beq.n	8010352 <__cvt+0x42>
 8010346:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801034a:	d100      	bne.n	801034e <__cvt+0x3e>
 801034c:	3601      	adds	r6, #1
 801034e:	2102      	movs	r1, #2
 8010350:	e000      	b.n	8010354 <__cvt+0x44>
 8010352:	2103      	movs	r1, #3
 8010354:	ab03      	add	r3, sp, #12
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	ab02      	add	r3, sp, #8
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	ec45 4b10 	vmov	d0, r4, r5
 8010360:	4653      	mov	r3, sl
 8010362:	4632      	mov	r2, r6
 8010364:	f000 fee0 	bl	8011128 <_dtoa_r>
 8010368:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801036c:	4607      	mov	r7, r0
 801036e:	d102      	bne.n	8010376 <__cvt+0x66>
 8010370:	f019 0f01 	tst.w	r9, #1
 8010374:	d022      	beq.n	80103bc <__cvt+0xac>
 8010376:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801037a:	eb07 0906 	add.w	r9, r7, r6
 801037e:	d110      	bne.n	80103a2 <__cvt+0x92>
 8010380:	783b      	ldrb	r3, [r7, #0]
 8010382:	2b30      	cmp	r3, #48	; 0x30
 8010384:	d10a      	bne.n	801039c <__cvt+0x8c>
 8010386:	2200      	movs	r2, #0
 8010388:	2300      	movs	r3, #0
 801038a:	4620      	mov	r0, r4
 801038c:	4629      	mov	r1, r5
 801038e:	f7f0 fbc3 	bl	8000b18 <__aeabi_dcmpeq>
 8010392:	b918      	cbnz	r0, 801039c <__cvt+0x8c>
 8010394:	f1c6 0601 	rsb	r6, r6, #1
 8010398:	f8ca 6000 	str.w	r6, [sl]
 801039c:	f8da 3000 	ldr.w	r3, [sl]
 80103a0:	4499      	add	r9, r3
 80103a2:	2200      	movs	r2, #0
 80103a4:	2300      	movs	r3, #0
 80103a6:	4620      	mov	r0, r4
 80103a8:	4629      	mov	r1, r5
 80103aa:	f7f0 fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 80103ae:	b108      	cbz	r0, 80103b4 <__cvt+0xa4>
 80103b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80103b4:	2230      	movs	r2, #48	; 0x30
 80103b6:	9b03      	ldr	r3, [sp, #12]
 80103b8:	454b      	cmp	r3, r9
 80103ba:	d307      	bcc.n	80103cc <__cvt+0xbc>
 80103bc:	9b03      	ldr	r3, [sp, #12]
 80103be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103c0:	1bdb      	subs	r3, r3, r7
 80103c2:	4638      	mov	r0, r7
 80103c4:	6013      	str	r3, [r2, #0]
 80103c6:	b004      	add	sp, #16
 80103c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103cc:	1c59      	adds	r1, r3, #1
 80103ce:	9103      	str	r1, [sp, #12]
 80103d0:	701a      	strb	r2, [r3, #0]
 80103d2:	e7f0      	b.n	80103b6 <__cvt+0xa6>

080103d4 <__exponent>:
 80103d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103d6:	4603      	mov	r3, r0
 80103d8:	2900      	cmp	r1, #0
 80103da:	bfb8      	it	lt
 80103dc:	4249      	neglt	r1, r1
 80103de:	f803 2b02 	strb.w	r2, [r3], #2
 80103e2:	bfb4      	ite	lt
 80103e4:	222d      	movlt	r2, #45	; 0x2d
 80103e6:	222b      	movge	r2, #43	; 0x2b
 80103e8:	2909      	cmp	r1, #9
 80103ea:	7042      	strb	r2, [r0, #1]
 80103ec:	dd2a      	ble.n	8010444 <__exponent+0x70>
 80103ee:	f10d 0207 	add.w	r2, sp, #7
 80103f2:	4617      	mov	r7, r2
 80103f4:	260a      	movs	r6, #10
 80103f6:	4694      	mov	ip, r2
 80103f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80103fc:	fb06 1415 	mls	r4, r6, r5, r1
 8010400:	3430      	adds	r4, #48	; 0x30
 8010402:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010406:	460c      	mov	r4, r1
 8010408:	2c63      	cmp	r4, #99	; 0x63
 801040a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801040e:	4629      	mov	r1, r5
 8010410:	dcf1      	bgt.n	80103f6 <__exponent+0x22>
 8010412:	3130      	adds	r1, #48	; 0x30
 8010414:	f1ac 0402 	sub.w	r4, ip, #2
 8010418:	f802 1c01 	strb.w	r1, [r2, #-1]
 801041c:	1c41      	adds	r1, r0, #1
 801041e:	4622      	mov	r2, r4
 8010420:	42ba      	cmp	r2, r7
 8010422:	d30a      	bcc.n	801043a <__exponent+0x66>
 8010424:	f10d 0209 	add.w	r2, sp, #9
 8010428:	eba2 020c 	sub.w	r2, r2, ip
 801042c:	42bc      	cmp	r4, r7
 801042e:	bf88      	it	hi
 8010430:	2200      	movhi	r2, #0
 8010432:	4413      	add	r3, r2
 8010434:	1a18      	subs	r0, r3, r0
 8010436:	b003      	add	sp, #12
 8010438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801043a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801043e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010442:	e7ed      	b.n	8010420 <__exponent+0x4c>
 8010444:	2330      	movs	r3, #48	; 0x30
 8010446:	3130      	adds	r1, #48	; 0x30
 8010448:	7083      	strb	r3, [r0, #2]
 801044a:	70c1      	strb	r1, [r0, #3]
 801044c:	1d03      	adds	r3, r0, #4
 801044e:	e7f1      	b.n	8010434 <__exponent+0x60>

08010450 <_printf_float>:
 8010450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010454:	ed2d 8b02 	vpush	{d8}
 8010458:	b08d      	sub	sp, #52	; 0x34
 801045a:	460c      	mov	r4, r1
 801045c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010460:	4616      	mov	r6, r2
 8010462:	461f      	mov	r7, r3
 8010464:	4605      	mov	r5, r0
 8010466:	f000 fcfb 	bl	8010e60 <_localeconv_r>
 801046a:	f8d0 a000 	ldr.w	sl, [r0]
 801046e:	4650      	mov	r0, sl
 8010470:	f7ef ff26 	bl	80002c0 <strlen>
 8010474:	2300      	movs	r3, #0
 8010476:	930a      	str	r3, [sp, #40]	; 0x28
 8010478:	6823      	ldr	r3, [r4, #0]
 801047a:	9305      	str	r3, [sp, #20]
 801047c:	f8d8 3000 	ldr.w	r3, [r8]
 8010480:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010484:	3307      	adds	r3, #7
 8010486:	f023 0307 	bic.w	r3, r3, #7
 801048a:	f103 0208 	add.w	r2, r3, #8
 801048e:	f8c8 2000 	str.w	r2, [r8]
 8010492:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010496:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801049a:	9307      	str	r3, [sp, #28]
 801049c:	f8cd 8018 	str.w	r8, [sp, #24]
 80104a0:	ee08 0a10 	vmov	s16, r0
 80104a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80104a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104ac:	4b9e      	ldr	r3, [pc, #632]	; (8010728 <_printf_float+0x2d8>)
 80104ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104b2:	f7f0 fb63 	bl	8000b7c <__aeabi_dcmpun>
 80104b6:	bb88      	cbnz	r0, 801051c <_printf_float+0xcc>
 80104b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104bc:	4b9a      	ldr	r3, [pc, #616]	; (8010728 <_printf_float+0x2d8>)
 80104be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104c2:	f7f0 fb3d 	bl	8000b40 <__aeabi_dcmple>
 80104c6:	bb48      	cbnz	r0, 801051c <_printf_float+0xcc>
 80104c8:	2200      	movs	r2, #0
 80104ca:	2300      	movs	r3, #0
 80104cc:	4640      	mov	r0, r8
 80104ce:	4649      	mov	r1, r9
 80104d0:	f7f0 fb2c 	bl	8000b2c <__aeabi_dcmplt>
 80104d4:	b110      	cbz	r0, 80104dc <_printf_float+0x8c>
 80104d6:	232d      	movs	r3, #45	; 0x2d
 80104d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104dc:	4a93      	ldr	r2, [pc, #588]	; (801072c <_printf_float+0x2dc>)
 80104de:	4b94      	ldr	r3, [pc, #592]	; (8010730 <_printf_float+0x2e0>)
 80104e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80104e4:	bf94      	ite	ls
 80104e6:	4690      	movls	r8, r2
 80104e8:	4698      	movhi	r8, r3
 80104ea:	2303      	movs	r3, #3
 80104ec:	6123      	str	r3, [r4, #16]
 80104ee:	9b05      	ldr	r3, [sp, #20]
 80104f0:	f023 0304 	bic.w	r3, r3, #4
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	f04f 0900 	mov.w	r9, #0
 80104fa:	9700      	str	r7, [sp, #0]
 80104fc:	4633      	mov	r3, r6
 80104fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8010500:	4621      	mov	r1, r4
 8010502:	4628      	mov	r0, r5
 8010504:	f000 f9da 	bl	80108bc <_printf_common>
 8010508:	3001      	adds	r0, #1
 801050a:	f040 8090 	bne.w	801062e <_printf_float+0x1de>
 801050e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010512:	b00d      	add	sp, #52	; 0x34
 8010514:	ecbd 8b02 	vpop	{d8}
 8010518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051c:	4642      	mov	r2, r8
 801051e:	464b      	mov	r3, r9
 8010520:	4640      	mov	r0, r8
 8010522:	4649      	mov	r1, r9
 8010524:	f7f0 fb2a 	bl	8000b7c <__aeabi_dcmpun>
 8010528:	b140      	cbz	r0, 801053c <_printf_float+0xec>
 801052a:	464b      	mov	r3, r9
 801052c:	2b00      	cmp	r3, #0
 801052e:	bfbc      	itt	lt
 8010530:	232d      	movlt	r3, #45	; 0x2d
 8010532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010536:	4a7f      	ldr	r2, [pc, #508]	; (8010734 <_printf_float+0x2e4>)
 8010538:	4b7f      	ldr	r3, [pc, #508]	; (8010738 <_printf_float+0x2e8>)
 801053a:	e7d1      	b.n	80104e0 <_printf_float+0x90>
 801053c:	6863      	ldr	r3, [r4, #4]
 801053e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010542:	9206      	str	r2, [sp, #24]
 8010544:	1c5a      	adds	r2, r3, #1
 8010546:	d13f      	bne.n	80105c8 <_printf_float+0x178>
 8010548:	2306      	movs	r3, #6
 801054a:	6063      	str	r3, [r4, #4]
 801054c:	9b05      	ldr	r3, [sp, #20]
 801054e:	6861      	ldr	r1, [r4, #4]
 8010550:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010554:	2300      	movs	r3, #0
 8010556:	9303      	str	r3, [sp, #12]
 8010558:	ab0a      	add	r3, sp, #40	; 0x28
 801055a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801055e:	ab09      	add	r3, sp, #36	; 0x24
 8010560:	ec49 8b10 	vmov	d0, r8, r9
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	6022      	str	r2, [r4, #0]
 8010568:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801056c:	4628      	mov	r0, r5
 801056e:	f7ff fecf 	bl	8010310 <__cvt>
 8010572:	9b06      	ldr	r3, [sp, #24]
 8010574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010576:	2b47      	cmp	r3, #71	; 0x47
 8010578:	4680      	mov	r8, r0
 801057a:	d108      	bne.n	801058e <_printf_float+0x13e>
 801057c:	1cc8      	adds	r0, r1, #3
 801057e:	db02      	blt.n	8010586 <_printf_float+0x136>
 8010580:	6863      	ldr	r3, [r4, #4]
 8010582:	4299      	cmp	r1, r3
 8010584:	dd41      	ble.n	801060a <_printf_float+0x1ba>
 8010586:	f1ab 0302 	sub.w	r3, fp, #2
 801058a:	fa5f fb83 	uxtb.w	fp, r3
 801058e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010592:	d820      	bhi.n	80105d6 <_printf_float+0x186>
 8010594:	3901      	subs	r1, #1
 8010596:	465a      	mov	r2, fp
 8010598:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801059c:	9109      	str	r1, [sp, #36]	; 0x24
 801059e:	f7ff ff19 	bl	80103d4 <__exponent>
 80105a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105a4:	1813      	adds	r3, r2, r0
 80105a6:	2a01      	cmp	r2, #1
 80105a8:	4681      	mov	r9, r0
 80105aa:	6123      	str	r3, [r4, #16]
 80105ac:	dc02      	bgt.n	80105b4 <_printf_float+0x164>
 80105ae:	6822      	ldr	r2, [r4, #0]
 80105b0:	07d2      	lsls	r2, r2, #31
 80105b2:	d501      	bpl.n	80105b8 <_printf_float+0x168>
 80105b4:	3301      	adds	r3, #1
 80105b6:	6123      	str	r3, [r4, #16]
 80105b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d09c      	beq.n	80104fa <_printf_float+0xaa>
 80105c0:	232d      	movs	r3, #45	; 0x2d
 80105c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105c6:	e798      	b.n	80104fa <_printf_float+0xaa>
 80105c8:	9a06      	ldr	r2, [sp, #24]
 80105ca:	2a47      	cmp	r2, #71	; 0x47
 80105cc:	d1be      	bne.n	801054c <_printf_float+0xfc>
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1bc      	bne.n	801054c <_printf_float+0xfc>
 80105d2:	2301      	movs	r3, #1
 80105d4:	e7b9      	b.n	801054a <_printf_float+0xfa>
 80105d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80105da:	d118      	bne.n	801060e <_printf_float+0x1be>
 80105dc:	2900      	cmp	r1, #0
 80105de:	6863      	ldr	r3, [r4, #4]
 80105e0:	dd0b      	ble.n	80105fa <_printf_float+0x1aa>
 80105e2:	6121      	str	r1, [r4, #16]
 80105e4:	b913      	cbnz	r3, 80105ec <_printf_float+0x19c>
 80105e6:	6822      	ldr	r2, [r4, #0]
 80105e8:	07d0      	lsls	r0, r2, #31
 80105ea:	d502      	bpl.n	80105f2 <_printf_float+0x1a2>
 80105ec:	3301      	adds	r3, #1
 80105ee:	440b      	add	r3, r1
 80105f0:	6123      	str	r3, [r4, #16]
 80105f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80105f4:	f04f 0900 	mov.w	r9, #0
 80105f8:	e7de      	b.n	80105b8 <_printf_float+0x168>
 80105fa:	b913      	cbnz	r3, 8010602 <_printf_float+0x1b2>
 80105fc:	6822      	ldr	r2, [r4, #0]
 80105fe:	07d2      	lsls	r2, r2, #31
 8010600:	d501      	bpl.n	8010606 <_printf_float+0x1b6>
 8010602:	3302      	adds	r3, #2
 8010604:	e7f4      	b.n	80105f0 <_printf_float+0x1a0>
 8010606:	2301      	movs	r3, #1
 8010608:	e7f2      	b.n	80105f0 <_printf_float+0x1a0>
 801060a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801060e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010610:	4299      	cmp	r1, r3
 8010612:	db05      	blt.n	8010620 <_printf_float+0x1d0>
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	6121      	str	r1, [r4, #16]
 8010618:	07d8      	lsls	r0, r3, #31
 801061a:	d5ea      	bpl.n	80105f2 <_printf_float+0x1a2>
 801061c:	1c4b      	adds	r3, r1, #1
 801061e:	e7e7      	b.n	80105f0 <_printf_float+0x1a0>
 8010620:	2900      	cmp	r1, #0
 8010622:	bfd4      	ite	le
 8010624:	f1c1 0202 	rsble	r2, r1, #2
 8010628:	2201      	movgt	r2, #1
 801062a:	4413      	add	r3, r2
 801062c:	e7e0      	b.n	80105f0 <_printf_float+0x1a0>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	055a      	lsls	r2, r3, #21
 8010632:	d407      	bmi.n	8010644 <_printf_float+0x1f4>
 8010634:	6923      	ldr	r3, [r4, #16]
 8010636:	4642      	mov	r2, r8
 8010638:	4631      	mov	r1, r6
 801063a:	4628      	mov	r0, r5
 801063c:	47b8      	blx	r7
 801063e:	3001      	adds	r0, #1
 8010640:	d12c      	bne.n	801069c <_printf_float+0x24c>
 8010642:	e764      	b.n	801050e <_printf_float+0xbe>
 8010644:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010648:	f240 80e0 	bls.w	801080c <_printf_float+0x3bc>
 801064c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010650:	2200      	movs	r2, #0
 8010652:	2300      	movs	r3, #0
 8010654:	f7f0 fa60 	bl	8000b18 <__aeabi_dcmpeq>
 8010658:	2800      	cmp	r0, #0
 801065a:	d034      	beq.n	80106c6 <_printf_float+0x276>
 801065c:	4a37      	ldr	r2, [pc, #220]	; (801073c <_printf_float+0x2ec>)
 801065e:	2301      	movs	r3, #1
 8010660:	4631      	mov	r1, r6
 8010662:	4628      	mov	r0, r5
 8010664:	47b8      	blx	r7
 8010666:	3001      	adds	r0, #1
 8010668:	f43f af51 	beq.w	801050e <_printf_float+0xbe>
 801066c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010670:	429a      	cmp	r2, r3
 8010672:	db02      	blt.n	801067a <_printf_float+0x22a>
 8010674:	6823      	ldr	r3, [r4, #0]
 8010676:	07d8      	lsls	r0, r3, #31
 8010678:	d510      	bpl.n	801069c <_printf_float+0x24c>
 801067a:	ee18 3a10 	vmov	r3, s16
 801067e:	4652      	mov	r2, sl
 8010680:	4631      	mov	r1, r6
 8010682:	4628      	mov	r0, r5
 8010684:	47b8      	blx	r7
 8010686:	3001      	adds	r0, #1
 8010688:	f43f af41 	beq.w	801050e <_printf_float+0xbe>
 801068c:	f04f 0800 	mov.w	r8, #0
 8010690:	f104 091a 	add.w	r9, r4, #26
 8010694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010696:	3b01      	subs	r3, #1
 8010698:	4543      	cmp	r3, r8
 801069a:	dc09      	bgt.n	80106b0 <_printf_float+0x260>
 801069c:	6823      	ldr	r3, [r4, #0]
 801069e:	079b      	lsls	r3, r3, #30
 80106a0:	f100 8107 	bmi.w	80108b2 <_printf_float+0x462>
 80106a4:	68e0      	ldr	r0, [r4, #12]
 80106a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106a8:	4298      	cmp	r0, r3
 80106aa:	bfb8      	it	lt
 80106ac:	4618      	movlt	r0, r3
 80106ae:	e730      	b.n	8010512 <_printf_float+0xc2>
 80106b0:	2301      	movs	r3, #1
 80106b2:	464a      	mov	r2, r9
 80106b4:	4631      	mov	r1, r6
 80106b6:	4628      	mov	r0, r5
 80106b8:	47b8      	blx	r7
 80106ba:	3001      	adds	r0, #1
 80106bc:	f43f af27 	beq.w	801050e <_printf_float+0xbe>
 80106c0:	f108 0801 	add.w	r8, r8, #1
 80106c4:	e7e6      	b.n	8010694 <_printf_float+0x244>
 80106c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	dc39      	bgt.n	8010740 <_printf_float+0x2f0>
 80106cc:	4a1b      	ldr	r2, [pc, #108]	; (801073c <_printf_float+0x2ec>)
 80106ce:	2301      	movs	r3, #1
 80106d0:	4631      	mov	r1, r6
 80106d2:	4628      	mov	r0, r5
 80106d4:	47b8      	blx	r7
 80106d6:	3001      	adds	r0, #1
 80106d8:	f43f af19 	beq.w	801050e <_printf_float+0xbe>
 80106dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80106e0:	4313      	orrs	r3, r2
 80106e2:	d102      	bne.n	80106ea <_printf_float+0x29a>
 80106e4:	6823      	ldr	r3, [r4, #0]
 80106e6:	07d9      	lsls	r1, r3, #31
 80106e8:	d5d8      	bpl.n	801069c <_printf_float+0x24c>
 80106ea:	ee18 3a10 	vmov	r3, s16
 80106ee:	4652      	mov	r2, sl
 80106f0:	4631      	mov	r1, r6
 80106f2:	4628      	mov	r0, r5
 80106f4:	47b8      	blx	r7
 80106f6:	3001      	adds	r0, #1
 80106f8:	f43f af09 	beq.w	801050e <_printf_float+0xbe>
 80106fc:	f04f 0900 	mov.w	r9, #0
 8010700:	f104 0a1a 	add.w	sl, r4, #26
 8010704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010706:	425b      	negs	r3, r3
 8010708:	454b      	cmp	r3, r9
 801070a:	dc01      	bgt.n	8010710 <_printf_float+0x2c0>
 801070c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801070e:	e792      	b.n	8010636 <_printf_float+0x1e6>
 8010710:	2301      	movs	r3, #1
 8010712:	4652      	mov	r2, sl
 8010714:	4631      	mov	r1, r6
 8010716:	4628      	mov	r0, r5
 8010718:	47b8      	blx	r7
 801071a:	3001      	adds	r0, #1
 801071c:	f43f aef7 	beq.w	801050e <_printf_float+0xbe>
 8010720:	f109 0901 	add.w	r9, r9, #1
 8010724:	e7ee      	b.n	8010704 <_printf_float+0x2b4>
 8010726:	bf00      	nop
 8010728:	7fefffff 	.word	0x7fefffff
 801072c:	0801357c 	.word	0x0801357c
 8010730:	08013580 	.word	0x08013580
 8010734:	08013584 	.word	0x08013584
 8010738:	08013588 	.word	0x08013588
 801073c:	0801358c 	.word	0x0801358c
 8010740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010744:	429a      	cmp	r2, r3
 8010746:	bfa8      	it	ge
 8010748:	461a      	movge	r2, r3
 801074a:	2a00      	cmp	r2, #0
 801074c:	4691      	mov	r9, r2
 801074e:	dc37      	bgt.n	80107c0 <_printf_float+0x370>
 8010750:	f04f 0b00 	mov.w	fp, #0
 8010754:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010758:	f104 021a 	add.w	r2, r4, #26
 801075c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801075e:	9305      	str	r3, [sp, #20]
 8010760:	eba3 0309 	sub.w	r3, r3, r9
 8010764:	455b      	cmp	r3, fp
 8010766:	dc33      	bgt.n	80107d0 <_printf_float+0x380>
 8010768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801076c:	429a      	cmp	r2, r3
 801076e:	db3b      	blt.n	80107e8 <_printf_float+0x398>
 8010770:	6823      	ldr	r3, [r4, #0]
 8010772:	07da      	lsls	r2, r3, #31
 8010774:	d438      	bmi.n	80107e8 <_printf_float+0x398>
 8010776:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801077a:	eba2 0903 	sub.w	r9, r2, r3
 801077e:	9b05      	ldr	r3, [sp, #20]
 8010780:	1ad2      	subs	r2, r2, r3
 8010782:	4591      	cmp	r9, r2
 8010784:	bfa8      	it	ge
 8010786:	4691      	movge	r9, r2
 8010788:	f1b9 0f00 	cmp.w	r9, #0
 801078c:	dc35      	bgt.n	80107fa <_printf_float+0x3aa>
 801078e:	f04f 0800 	mov.w	r8, #0
 8010792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010796:	f104 0a1a 	add.w	sl, r4, #26
 801079a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801079e:	1a9b      	subs	r3, r3, r2
 80107a0:	eba3 0309 	sub.w	r3, r3, r9
 80107a4:	4543      	cmp	r3, r8
 80107a6:	f77f af79 	ble.w	801069c <_printf_float+0x24c>
 80107aa:	2301      	movs	r3, #1
 80107ac:	4652      	mov	r2, sl
 80107ae:	4631      	mov	r1, r6
 80107b0:	4628      	mov	r0, r5
 80107b2:	47b8      	blx	r7
 80107b4:	3001      	adds	r0, #1
 80107b6:	f43f aeaa 	beq.w	801050e <_printf_float+0xbe>
 80107ba:	f108 0801 	add.w	r8, r8, #1
 80107be:	e7ec      	b.n	801079a <_printf_float+0x34a>
 80107c0:	4613      	mov	r3, r2
 80107c2:	4631      	mov	r1, r6
 80107c4:	4642      	mov	r2, r8
 80107c6:	4628      	mov	r0, r5
 80107c8:	47b8      	blx	r7
 80107ca:	3001      	adds	r0, #1
 80107cc:	d1c0      	bne.n	8010750 <_printf_float+0x300>
 80107ce:	e69e      	b.n	801050e <_printf_float+0xbe>
 80107d0:	2301      	movs	r3, #1
 80107d2:	4631      	mov	r1, r6
 80107d4:	4628      	mov	r0, r5
 80107d6:	9205      	str	r2, [sp, #20]
 80107d8:	47b8      	blx	r7
 80107da:	3001      	adds	r0, #1
 80107dc:	f43f ae97 	beq.w	801050e <_printf_float+0xbe>
 80107e0:	9a05      	ldr	r2, [sp, #20]
 80107e2:	f10b 0b01 	add.w	fp, fp, #1
 80107e6:	e7b9      	b.n	801075c <_printf_float+0x30c>
 80107e8:	ee18 3a10 	vmov	r3, s16
 80107ec:	4652      	mov	r2, sl
 80107ee:	4631      	mov	r1, r6
 80107f0:	4628      	mov	r0, r5
 80107f2:	47b8      	blx	r7
 80107f4:	3001      	adds	r0, #1
 80107f6:	d1be      	bne.n	8010776 <_printf_float+0x326>
 80107f8:	e689      	b.n	801050e <_printf_float+0xbe>
 80107fa:	9a05      	ldr	r2, [sp, #20]
 80107fc:	464b      	mov	r3, r9
 80107fe:	4442      	add	r2, r8
 8010800:	4631      	mov	r1, r6
 8010802:	4628      	mov	r0, r5
 8010804:	47b8      	blx	r7
 8010806:	3001      	adds	r0, #1
 8010808:	d1c1      	bne.n	801078e <_printf_float+0x33e>
 801080a:	e680      	b.n	801050e <_printf_float+0xbe>
 801080c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801080e:	2a01      	cmp	r2, #1
 8010810:	dc01      	bgt.n	8010816 <_printf_float+0x3c6>
 8010812:	07db      	lsls	r3, r3, #31
 8010814:	d53a      	bpl.n	801088c <_printf_float+0x43c>
 8010816:	2301      	movs	r3, #1
 8010818:	4642      	mov	r2, r8
 801081a:	4631      	mov	r1, r6
 801081c:	4628      	mov	r0, r5
 801081e:	47b8      	blx	r7
 8010820:	3001      	adds	r0, #1
 8010822:	f43f ae74 	beq.w	801050e <_printf_float+0xbe>
 8010826:	ee18 3a10 	vmov	r3, s16
 801082a:	4652      	mov	r2, sl
 801082c:	4631      	mov	r1, r6
 801082e:	4628      	mov	r0, r5
 8010830:	47b8      	blx	r7
 8010832:	3001      	adds	r0, #1
 8010834:	f43f ae6b 	beq.w	801050e <_printf_float+0xbe>
 8010838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801083c:	2200      	movs	r2, #0
 801083e:	2300      	movs	r3, #0
 8010840:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010844:	f7f0 f968 	bl	8000b18 <__aeabi_dcmpeq>
 8010848:	b9d8      	cbnz	r0, 8010882 <_printf_float+0x432>
 801084a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801084e:	f108 0201 	add.w	r2, r8, #1
 8010852:	4631      	mov	r1, r6
 8010854:	4628      	mov	r0, r5
 8010856:	47b8      	blx	r7
 8010858:	3001      	adds	r0, #1
 801085a:	d10e      	bne.n	801087a <_printf_float+0x42a>
 801085c:	e657      	b.n	801050e <_printf_float+0xbe>
 801085e:	2301      	movs	r3, #1
 8010860:	4652      	mov	r2, sl
 8010862:	4631      	mov	r1, r6
 8010864:	4628      	mov	r0, r5
 8010866:	47b8      	blx	r7
 8010868:	3001      	adds	r0, #1
 801086a:	f43f ae50 	beq.w	801050e <_printf_float+0xbe>
 801086e:	f108 0801 	add.w	r8, r8, #1
 8010872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010874:	3b01      	subs	r3, #1
 8010876:	4543      	cmp	r3, r8
 8010878:	dcf1      	bgt.n	801085e <_printf_float+0x40e>
 801087a:	464b      	mov	r3, r9
 801087c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010880:	e6da      	b.n	8010638 <_printf_float+0x1e8>
 8010882:	f04f 0800 	mov.w	r8, #0
 8010886:	f104 0a1a 	add.w	sl, r4, #26
 801088a:	e7f2      	b.n	8010872 <_printf_float+0x422>
 801088c:	2301      	movs	r3, #1
 801088e:	4642      	mov	r2, r8
 8010890:	e7df      	b.n	8010852 <_printf_float+0x402>
 8010892:	2301      	movs	r3, #1
 8010894:	464a      	mov	r2, r9
 8010896:	4631      	mov	r1, r6
 8010898:	4628      	mov	r0, r5
 801089a:	47b8      	blx	r7
 801089c:	3001      	adds	r0, #1
 801089e:	f43f ae36 	beq.w	801050e <_printf_float+0xbe>
 80108a2:	f108 0801 	add.w	r8, r8, #1
 80108a6:	68e3      	ldr	r3, [r4, #12]
 80108a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80108aa:	1a5b      	subs	r3, r3, r1
 80108ac:	4543      	cmp	r3, r8
 80108ae:	dcf0      	bgt.n	8010892 <_printf_float+0x442>
 80108b0:	e6f8      	b.n	80106a4 <_printf_float+0x254>
 80108b2:	f04f 0800 	mov.w	r8, #0
 80108b6:	f104 0919 	add.w	r9, r4, #25
 80108ba:	e7f4      	b.n	80108a6 <_printf_float+0x456>

080108bc <_printf_common>:
 80108bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c0:	4616      	mov	r6, r2
 80108c2:	4699      	mov	r9, r3
 80108c4:	688a      	ldr	r2, [r1, #8]
 80108c6:	690b      	ldr	r3, [r1, #16]
 80108c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108cc:	4293      	cmp	r3, r2
 80108ce:	bfb8      	it	lt
 80108d0:	4613      	movlt	r3, r2
 80108d2:	6033      	str	r3, [r6, #0]
 80108d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108d8:	4607      	mov	r7, r0
 80108da:	460c      	mov	r4, r1
 80108dc:	b10a      	cbz	r2, 80108e2 <_printf_common+0x26>
 80108de:	3301      	adds	r3, #1
 80108e0:	6033      	str	r3, [r6, #0]
 80108e2:	6823      	ldr	r3, [r4, #0]
 80108e4:	0699      	lsls	r1, r3, #26
 80108e6:	bf42      	ittt	mi
 80108e8:	6833      	ldrmi	r3, [r6, #0]
 80108ea:	3302      	addmi	r3, #2
 80108ec:	6033      	strmi	r3, [r6, #0]
 80108ee:	6825      	ldr	r5, [r4, #0]
 80108f0:	f015 0506 	ands.w	r5, r5, #6
 80108f4:	d106      	bne.n	8010904 <_printf_common+0x48>
 80108f6:	f104 0a19 	add.w	sl, r4, #25
 80108fa:	68e3      	ldr	r3, [r4, #12]
 80108fc:	6832      	ldr	r2, [r6, #0]
 80108fe:	1a9b      	subs	r3, r3, r2
 8010900:	42ab      	cmp	r3, r5
 8010902:	dc26      	bgt.n	8010952 <_printf_common+0x96>
 8010904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010908:	1e13      	subs	r3, r2, #0
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	bf18      	it	ne
 801090e:	2301      	movne	r3, #1
 8010910:	0692      	lsls	r2, r2, #26
 8010912:	d42b      	bmi.n	801096c <_printf_common+0xb0>
 8010914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010918:	4649      	mov	r1, r9
 801091a:	4638      	mov	r0, r7
 801091c:	47c0      	blx	r8
 801091e:	3001      	adds	r0, #1
 8010920:	d01e      	beq.n	8010960 <_printf_common+0xa4>
 8010922:	6823      	ldr	r3, [r4, #0]
 8010924:	6922      	ldr	r2, [r4, #16]
 8010926:	f003 0306 	and.w	r3, r3, #6
 801092a:	2b04      	cmp	r3, #4
 801092c:	bf02      	ittt	eq
 801092e:	68e5      	ldreq	r5, [r4, #12]
 8010930:	6833      	ldreq	r3, [r6, #0]
 8010932:	1aed      	subeq	r5, r5, r3
 8010934:	68a3      	ldr	r3, [r4, #8]
 8010936:	bf0c      	ite	eq
 8010938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801093c:	2500      	movne	r5, #0
 801093e:	4293      	cmp	r3, r2
 8010940:	bfc4      	itt	gt
 8010942:	1a9b      	subgt	r3, r3, r2
 8010944:	18ed      	addgt	r5, r5, r3
 8010946:	2600      	movs	r6, #0
 8010948:	341a      	adds	r4, #26
 801094a:	42b5      	cmp	r5, r6
 801094c:	d11a      	bne.n	8010984 <_printf_common+0xc8>
 801094e:	2000      	movs	r0, #0
 8010950:	e008      	b.n	8010964 <_printf_common+0xa8>
 8010952:	2301      	movs	r3, #1
 8010954:	4652      	mov	r2, sl
 8010956:	4649      	mov	r1, r9
 8010958:	4638      	mov	r0, r7
 801095a:	47c0      	blx	r8
 801095c:	3001      	adds	r0, #1
 801095e:	d103      	bne.n	8010968 <_printf_common+0xac>
 8010960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010968:	3501      	adds	r5, #1
 801096a:	e7c6      	b.n	80108fa <_printf_common+0x3e>
 801096c:	18e1      	adds	r1, r4, r3
 801096e:	1c5a      	adds	r2, r3, #1
 8010970:	2030      	movs	r0, #48	; 0x30
 8010972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010976:	4422      	add	r2, r4
 8010978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801097c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010980:	3302      	adds	r3, #2
 8010982:	e7c7      	b.n	8010914 <_printf_common+0x58>
 8010984:	2301      	movs	r3, #1
 8010986:	4622      	mov	r2, r4
 8010988:	4649      	mov	r1, r9
 801098a:	4638      	mov	r0, r7
 801098c:	47c0      	blx	r8
 801098e:	3001      	adds	r0, #1
 8010990:	d0e6      	beq.n	8010960 <_printf_common+0xa4>
 8010992:	3601      	adds	r6, #1
 8010994:	e7d9      	b.n	801094a <_printf_common+0x8e>
	...

08010998 <_printf_i>:
 8010998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801099c:	7e0f      	ldrb	r7, [r1, #24]
 801099e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80109a0:	2f78      	cmp	r7, #120	; 0x78
 80109a2:	4691      	mov	r9, r2
 80109a4:	4680      	mov	r8, r0
 80109a6:	460c      	mov	r4, r1
 80109a8:	469a      	mov	sl, r3
 80109aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80109ae:	d807      	bhi.n	80109c0 <_printf_i+0x28>
 80109b0:	2f62      	cmp	r7, #98	; 0x62
 80109b2:	d80a      	bhi.n	80109ca <_printf_i+0x32>
 80109b4:	2f00      	cmp	r7, #0
 80109b6:	f000 80d4 	beq.w	8010b62 <_printf_i+0x1ca>
 80109ba:	2f58      	cmp	r7, #88	; 0x58
 80109bc:	f000 80c0 	beq.w	8010b40 <_printf_i+0x1a8>
 80109c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80109c8:	e03a      	b.n	8010a40 <_printf_i+0xa8>
 80109ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80109ce:	2b15      	cmp	r3, #21
 80109d0:	d8f6      	bhi.n	80109c0 <_printf_i+0x28>
 80109d2:	a101      	add	r1, pc, #4	; (adr r1, 80109d8 <_printf_i+0x40>)
 80109d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109d8:	08010a31 	.word	0x08010a31
 80109dc:	08010a45 	.word	0x08010a45
 80109e0:	080109c1 	.word	0x080109c1
 80109e4:	080109c1 	.word	0x080109c1
 80109e8:	080109c1 	.word	0x080109c1
 80109ec:	080109c1 	.word	0x080109c1
 80109f0:	08010a45 	.word	0x08010a45
 80109f4:	080109c1 	.word	0x080109c1
 80109f8:	080109c1 	.word	0x080109c1
 80109fc:	080109c1 	.word	0x080109c1
 8010a00:	080109c1 	.word	0x080109c1
 8010a04:	08010b49 	.word	0x08010b49
 8010a08:	08010a71 	.word	0x08010a71
 8010a0c:	08010b03 	.word	0x08010b03
 8010a10:	080109c1 	.word	0x080109c1
 8010a14:	080109c1 	.word	0x080109c1
 8010a18:	08010b6b 	.word	0x08010b6b
 8010a1c:	080109c1 	.word	0x080109c1
 8010a20:	08010a71 	.word	0x08010a71
 8010a24:	080109c1 	.word	0x080109c1
 8010a28:	080109c1 	.word	0x080109c1
 8010a2c:	08010b0b 	.word	0x08010b0b
 8010a30:	682b      	ldr	r3, [r5, #0]
 8010a32:	1d1a      	adds	r2, r3, #4
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	602a      	str	r2, [r5, #0]
 8010a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a40:	2301      	movs	r3, #1
 8010a42:	e09f      	b.n	8010b84 <_printf_i+0x1ec>
 8010a44:	6820      	ldr	r0, [r4, #0]
 8010a46:	682b      	ldr	r3, [r5, #0]
 8010a48:	0607      	lsls	r7, r0, #24
 8010a4a:	f103 0104 	add.w	r1, r3, #4
 8010a4e:	6029      	str	r1, [r5, #0]
 8010a50:	d501      	bpl.n	8010a56 <_printf_i+0xbe>
 8010a52:	681e      	ldr	r6, [r3, #0]
 8010a54:	e003      	b.n	8010a5e <_printf_i+0xc6>
 8010a56:	0646      	lsls	r6, r0, #25
 8010a58:	d5fb      	bpl.n	8010a52 <_printf_i+0xba>
 8010a5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010a5e:	2e00      	cmp	r6, #0
 8010a60:	da03      	bge.n	8010a6a <_printf_i+0xd2>
 8010a62:	232d      	movs	r3, #45	; 0x2d
 8010a64:	4276      	negs	r6, r6
 8010a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a6a:	485a      	ldr	r0, [pc, #360]	; (8010bd4 <_printf_i+0x23c>)
 8010a6c:	230a      	movs	r3, #10
 8010a6e:	e012      	b.n	8010a96 <_printf_i+0xfe>
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	6820      	ldr	r0, [r4, #0]
 8010a74:	1d19      	adds	r1, r3, #4
 8010a76:	6029      	str	r1, [r5, #0]
 8010a78:	0605      	lsls	r5, r0, #24
 8010a7a:	d501      	bpl.n	8010a80 <_printf_i+0xe8>
 8010a7c:	681e      	ldr	r6, [r3, #0]
 8010a7e:	e002      	b.n	8010a86 <_printf_i+0xee>
 8010a80:	0641      	lsls	r1, r0, #25
 8010a82:	d5fb      	bpl.n	8010a7c <_printf_i+0xe4>
 8010a84:	881e      	ldrh	r6, [r3, #0]
 8010a86:	4853      	ldr	r0, [pc, #332]	; (8010bd4 <_printf_i+0x23c>)
 8010a88:	2f6f      	cmp	r7, #111	; 0x6f
 8010a8a:	bf0c      	ite	eq
 8010a8c:	2308      	moveq	r3, #8
 8010a8e:	230a      	movne	r3, #10
 8010a90:	2100      	movs	r1, #0
 8010a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a96:	6865      	ldr	r5, [r4, #4]
 8010a98:	60a5      	str	r5, [r4, #8]
 8010a9a:	2d00      	cmp	r5, #0
 8010a9c:	bfa2      	ittt	ge
 8010a9e:	6821      	ldrge	r1, [r4, #0]
 8010aa0:	f021 0104 	bicge.w	r1, r1, #4
 8010aa4:	6021      	strge	r1, [r4, #0]
 8010aa6:	b90e      	cbnz	r6, 8010aac <_printf_i+0x114>
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	d04b      	beq.n	8010b44 <_printf_i+0x1ac>
 8010aac:	4615      	mov	r5, r2
 8010aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8010ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8010ab6:	5dc7      	ldrb	r7, [r0, r7]
 8010ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010abc:	4637      	mov	r7, r6
 8010abe:	42bb      	cmp	r3, r7
 8010ac0:	460e      	mov	r6, r1
 8010ac2:	d9f4      	bls.n	8010aae <_printf_i+0x116>
 8010ac4:	2b08      	cmp	r3, #8
 8010ac6:	d10b      	bne.n	8010ae0 <_printf_i+0x148>
 8010ac8:	6823      	ldr	r3, [r4, #0]
 8010aca:	07de      	lsls	r6, r3, #31
 8010acc:	d508      	bpl.n	8010ae0 <_printf_i+0x148>
 8010ace:	6923      	ldr	r3, [r4, #16]
 8010ad0:	6861      	ldr	r1, [r4, #4]
 8010ad2:	4299      	cmp	r1, r3
 8010ad4:	bfde      	ittt	le
 8010ad6:	2330      	movle	r3, #48	; 0x30
 8010ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010adc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010ae0:	1b52      	subs	r2, r2, r5
 8010ae2:	6122      	str	r2, [r4, #16]
 8010ae4:	f8cd a000 	str.w	sl, [sp]
 8010ae8:	464b      	mov	r3, r9
 8010aea:	aa03      	add	r2, sp, #12
 8010aec:	4621      	mov	r1, r4
 8010aee:	4640      	mov	r0, r8
 8010af0:	f7ff fee4 	bl	80108bc <_printf_common>
 8010af4:	3001      	adds	r0, #1
 8010af6:	d14a      	bne.n	8010b8e <_printf_i+0x1f6>
 8010af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010afc:	b004      	add	sp, #16
 8010afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b02:	6823      	ldr	r3, [r4, #0]
 8010b04:	f043 0320 	orr.w	r3, r3, #32
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	4833      	ldr	r0, [pc, #204]	; (8010bd8 <_printf_i+0x240>)
 8010b0c:	2778      	movs	r7, #120	; 0x78
 8010b0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b12:	6823      	ldr	r3, [r4, #0]
 8010b14:	6829      	ldr	r1, [r5, #0]
 8010b16:	061f      	lsls	r7, r3, #24
 8010b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b1c:	d402      	bmi.n	8010b24 <_printf_i+0x18c>
 8010b1e:	065f      	lsls	r7, r3, #25
 8010b20:	bf48      	it	mi
 8010b22:	b2b6      	uxthmi	r6, r6
 8010b24:	07df      	lsls	r7, r3, #31
 8010b26:	bf48      	it	mi
 8010b28:	f043 0320 	orrmi.w	r3, r3, #32
 8010b2c:	6029      	str	r1, [r5, #0]
 8010b2e:	bf48      	it	mi
 8010b30:	6023      	strmi	r3, [r4, #0]
 8010b32:	b91e      	cbnz	r6, 8010b3c <_printf_i+0x1a4>
 8010b34:	6823      	ldr	r3, [r4, #0]
 8010b36:	f023 0320 	bic.w	r3, r3, #32
 8010b3a:	6023      	str	r3, [r4, #0]
 8010b3c:	2310      	movs	r3, #16
 8010b3e:	e7a7      	b.n	8010a90 <_printf_i+0xf8>
 8010b40:	4824      	ldr	r0, [pc, #144]	; (8010bd4 <_printf_i+0x23c>)
 8010b42:	e7e4      	b.n	8010b0e <_printf_i+0x176>
 8010b44:	4615      	mov	r5, r2
 8010b46:	e7bd      	b.n	8010ac4 <_printf_i+0x12c>
 8010b48:	682b      	ldr	r3, [r5, #0]
 8010b4a:	6826      	ldr	r6, [r4, #0]
 8010b4c:	6961      	ldr	r1, [r4, #20]
 8010b4e:	1d18      	adds	r0, r3, #4
 8010b50:	6028      	str	r0, [r5, #0]
 8010b52:	0635      	lsls	r5, r6, #24
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	d501      	bpl.n	8010b5c <_printf_i+0x1c4>
 8010b58:	6019      	str	r1, [r3, #0]
 8010b5a:	e002      	b.n	8010b62 <_printf_i+0x1ca>
 8010b5c:	0670      	lsls	r0, r6, #25
 8010b5e:	d5fb      	bpl.n	8010b58 <_printf_i+0x1c0>
 8010b60:	8019      	strh	r1, [r3, #0]
 8010b62:	2300      	movs	r3, #0
 8010b64:	6123      	str	r3, [r4, #16]
 8010b66:	4615      	mov	r5, r2
 8010b68:	e7bc      	b.n	8010ae4 <_printf_i+0x14c>
 8010b6a:	682b      	ldr	r3, [r5, #0]
 8010b6c:	1d1a      	adds	r2, r3, #4
 8010b6e:	602a      	str	r2, [r5, #0]
 8010b70:	681d      	ldr	r5, [r3, #0]
 8010b72:	6862      	ldr	r2, [r4, #4]
 8010b74:	2100      	movs	r1, #0
 8010b76:	4628      	mov	r0, r5
 8010b78:	f7ef fb52 	bl	8000220 <memchr>
 8010b7c:	b108      	cbz	r0, 8010b82 <_printf_i+0x1ea>
 8010b7e:	1b40      	subs	r0, r0, r5
 8010b80:	6060      	str	r0, [r4, #4]
 8010b82:	6863      	ldr	r3, [r4, #4]
 8010b84:	6123      	str	r3, [r4, #16]
 8010b86:	2300      	movs	r3, #0
 8010b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b8c:	e7aa      	b.n	8010ae4 <_printf_i+0x14c>
 8010b8e:	6923      	ldr	r3, [r4, #16]
 8010b90:	462a      	mov	r2, r5
 8010b92:	4649      	mov	r1, r9
 8010b94:	4640      	mov	r0, r8
 8010b96:	47d0      	blx	sl
 8010b98:	3001      	adds	r0, #1
 8010b9a:	d0ad      	beq.n	8010af8 <_printf_i+0x160>
 8010b9c:	6823      	ldr	r3, [r4, #0]
 8010b9e:	079b      	lsls	r3, r3, #30
 8010ba0:	d413      	bmi.n	8010bca <_printf_i+0x232>
 8010ba2:	68e0      	ldr	r0, [r4, #12]
 8010ba4:	9b03      	ldr	r3, [sp, #12]
 8010ba6:	4298      	cmp	r0, r3
 8010ba8:	bfb8      	it	lt
 8010baa:	4618      	movlt	r0, r3
 8010bac:	e7a6      	b.n	8010afc <_printf_i+0x164>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	4632      	mov	r2, r6
 8010bb2:	4649      	mov	r1, r9
 8010bb4:	4640      	mov	r0, r8
 8010bb6:	47d0      	blx	sl
 8010bb8:	3001      	adds	r0, #1
 8010bba:	d09d      	beq.n	8010af8 <_printf_i+0x160>
 8010bbc:	3501      	adds	r5, #1
 8010bbe:	68e3      	ldr	r3, [r4, #12]
 8010bc0:	9903      	ldr	r1, [sp, #12]
 8010bc2:	1a5b      	subs	r3, r3, r1
 8010bc4:	42ab      	cmp	r3, r5
 8010bc6:	dcf2      	bgt.n	8010bae <_printf_i+0x216>
 8010bc8:	e7eb      	b.n	8010ba2 <_printf_i+0x20a>
 8010bca:	2500      	movs	r5, #0
 8010bcc:	f104 0619 	add.w	r6, r4, #25
 8010bd0:	e7f5      	b.n	8010bbe <_printf_i+0x226>
 8010bd2:	bf00      	nop
 8010bd4:	0801358e 	.word	0x0801358e
 8010bd8:	0801359f 	.word	0x0801359f

08010bdc <std>:
 8010bdc:	2300      	movs	r3, #0
 8010bde:	b510      	push	{r4, lr}
 8010be0:	4604      	mov	r4, r0
 8010be2:	e9c0 3300 	strd	r3, r3, [r0]
 8010be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bea:	6083      	str	r3, [r0, #8]
 8010bec:	8181      	strh	r1, [r0, #12]
 8010bee:	6643      	str	r3, [r0, #100]	; 0x64
 8010bf0:	81c2      	strh	r2, [r0, #14]
 8010bf2:	6183      	str	r3, [r0, #24]
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	2208      	movs	r2, #8
 8010bf8:	305c      	adds	r0, #92	; 0x5c
 8010bfa:	f000 f928 	bl	8010e4e <memset>
 8010bfe:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <std+0x58>)
 8010c00:	6263      	str	r3, [r4, #36]	; 0x24
 8010c02:	4b0d      	ldr	r3, [pc, #52]	; (8010c38 <std+0x5c>)
 8010c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c06:	4b0d      	ldr	r3, [pc, #52]	; (8010c3c <std+0x60>)
 8010c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c0a:	4b0d      	ldr	r3, [pc, #52]	; (8010c40 <std+0x64>)
 8010c0c:	6323      	str	r3, [r4, #48]	; 0x30
 8010c0e:	4b0d      	ldr	r3, [pc, #52]	; (8010c44 <std+0x68>)
 8010c10:	6224      	str	r4, [r4, #32]
 8010c12:	429c      	cmp	r4, r3
 8010c14:	d006      	beq.n	8010c24 <std+0x48>
 8010c16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010c1a:	4294      	cmp	r4, r2
 8010c1c:	d002      	beq.n	8010c24 <std+0x48>
 8010c1e:	33d0      	adds	r3, #208	; 0xd0
 8010c20:	429c      	cmp	r4, r3
 8010c22:	d105      	bne.n	8010c30 <std+0x54>
 8010c24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c2c:	f000 b9e2 	b.w	8010ff4 <__retarget_lock_init_recursive>
 8010c30:	bd10      	pop	{r4, pc}
 8010c32:	bf00      	nop
 8010c34:	08010dc9 	.word	0x08010dc9
 8010c38:	08010deb 	.word	0x08010deb
 8010c3c:	08010e23 	.word	0x08010e23
 8010c40:	08010e47 	.word	0x08010e47
 8010c44:	20005be4 	.word	0x20005be4

08010c48 <stdio_exit_handler>:
 8010c48:	4a02      	ldr	r2, [pc, #8]	; (8010c54 <stdio_exit_handler+0xc>)
 8010c4a:	4903      	ldr	r1, [pc, #12]	; (8010c58 <stdio_exit_handler+0x10>)
 8010c4c:	4803      	ldr	r0, [pc, #12]	; (8010c5c <stdio_exit_handler+0x14>)
 8010c4e:	f000 b869 	b.w	8010d24 <_fwalk_sglue>
 8010c52:	bf00      	nop
 8010c54:	20000188 	.word	0x20000188
 8010c58:	080129c1 	.word	0x080129c1
 8010c5c:	20000194 	.word	0x20000194

08010c60 <cleanup_stdio>:
 8010c60:	6841      	ldr	r1, [r0, #4]
 8010c62:	4b0c      	ldr	r3, [pc, #48]	; (8010c94 <cleanup_stdio+0x34>)
 8010c64:	4299      	cmp	r1, r3
 8010c66:	b510      	push	{r4, lr}
 8010c68:	4604      	mov	r4, r0
 8010c6a:	d001      	beq.n	8010c70 <cleanup_stdio+0x10>
 8010c6c:	f001 fea8 	bl	80129c0 <_fflush_r>
 8010c70:	68a1      	ldr	r1, [r4, #8]
 8010c72:	4b09      	ldr	r3, [pc, #36]	; (8010c98 <cleanup_stdio+0x38>)
 8010c74:	4299      	cmp	r1, r3
 8010c76:	d002      	beq.n	8010c7e <cleanup_stdio+0x1e>
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f001 fea1 	bl	80129c0 <_fflush_r>
 8010c7e:	68e1      	ldr	r1, [r4, #12]
 8010c80:	4b06      	ldr	r3, [pc, #24]	; (8010c9c <cleanup_stdio+0x3c>)
 8010c82:	4299      	cmp	r1, r3
 8010c84:	d004      	beq.n	8010c90 <cleanup_stdio+0x30>
 8010c86:	4620      	mov	r0, r4
 8010c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c8c:	f001 be98 	b.w	80129c0 <_fflush_r>
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	bf00      	nop
 8010c94:	20005be4 	.word	0x20005be4
 8010c98:	20005c4c 	.word	0x20005c4c
 8010c9c:	20005cb4 	.word	0x20005cb4

08010ca0 <global_stdio_init.part.0>:
 8010ca0:	b510      	push	{r4, lr}
 8010ca2:	4b0b      	ldr	r3, [pc, #44]	; (8010cd0 <global_stdio_init.part.0+0x30>)
 8010ca4:	4c0b      	ldr	r4, [pc, #44]	; (8010cd4 <global_stdio_init.part.0+0x34>)
 8010ca6:	4a0c      	ldr	r2, [pc, #48]	; (8010cd8 <global_stdio_init.part.0+0x38>)
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	4620      	mov	r0, r4
 8010cac:	2200      	movs	r2, #0
 8010cae:	2104      	movs	r1, #4
 8010cb0:	f7ff ff94 	bl	8010bdc <std>
 8010cb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010cb8:	2201      	movs	r2, #1
 8010cba:	2109      	movs	r1, #9
 8010cbc:	f7ff ff8e 	bl	8010bdc <std>
 8010cc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010cc4:	2202      	movs	r2, #2
 8010cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cca:	2112      	movs	r1, #18
 8010ccc:	f7ff bf86 	b.w	8010bdc <std>
 8010cd0:	20005d1c 	.word	0x20005d1c
 8010cd4:	20005be4 	.word	0x20005be4
 8010cd8:	08010c49 	.word	0x08010c49

08010cdc <__sfp_lock_acquire>:
 8010cdc:	4801      	ldr	r0, [pc, #4]	; (8010ce4 <__sfp_lock_acquire+0x8>)
 8010cde:	f000 b98a 	b.w	8010ff6 <__retarget_lock_acquire_recursive>
 8010ce2:	bf00      	nop
 8010ce4:	20005d25 	.word	0x20005d25

08010ce8 <__sfp_lock_release>:
 8010ce8:	4801      	ldr	r0, [pc, #4]	; (8010cf0 <__sfp_lock_release+0x8>)
 8010cea:	f000 b985 	b.w	8010ff8 <__retarget_lock_release_recursive>
 8010cee:	bf00      	nop
 8010cf0:	20005d25 	.word	0x20005d25

08010cf4 <__sinit>:
 8010cf4:	b510      	push	{r4, lr}
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	f7ff fff0 	bl	8010cdc <__sfp_lock_acquire>
 8010cfc:	6a23      	ldr	r3, [r4, #32]
 8010cfe:	b11b      	cbz	r3, 8010d08 <__sinit+0x14>
 8010d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d04:	f7ff bff0 	b.w	8010ce8 <__sfp_lock_release>
 8010d08:	4b04      	ldr	r3, [pc, #16]	; (8010d1c <__sinit+0x28>)
 8010d0a:	6223      	str	r3, [r4, #32]
 8010d0c:	4b04      	ldr	r3, [pc, #16]	; (8010d20 <__sinit+0x2c>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1f5      	bne.n	8010d00 <__sinit+0xc>
 8010d14:	f7ff ffc4 	bl	8010ca0 <global_stdio_init.part.0>
 8010d18:	e7f2      	b.n	8010d00 <__sinit+0xc>
 8010d1a:	bf00      	nop
 8010d1c:	08010c61 	.word	0x08010c61
 8010d20:	20005d1c 	.word	0x20005d1c

08010d24 <_fwalk_sglue>:
 8010d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d28:	4607      	mov	r7, r0
 8010d2a:	4688      	mov	r8, r1
 8010d2c:	4614      	mov	r4, r2
 8010d2e:	2600      	movs	r6, #0
 8010d30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d34:	f1b9 0901 	subs.w	r9, r9, #1
 8010d38:	d505      	bpl.n	8010d46 <_fwalk_sglue+0x22>
 8010d3a:	6824      	ldr	r4, [r4, #0]
 8010d3c:	2c00      	cmp	r4, #0
 8010d3e:	d1f7      	bne.n	8010d30 <_fwalk_sglue+0xc>
 8010d40:	4630      	mov	r0, r6
 8010d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d46:	89ab      	ldrh	r3, [r5, #12]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d907      	bls.n	8010d5c <_fwalk_sglue+0x38>
 8010d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d50:	3301      	adds	r3, #1
 8010d52:	d003      	beq.n	8010d5c <_fwalk_sglue+0x38>
 8010d54:	4629      	mov	r1, r5
 8010d56:	4638      	mov	r0, r7
 8010d58:	47c0      	blx	r8
 8010d5a:	4306      	orrs	r6, r0
 8010d5c:	3568      	adds	r5, #104	; 0x68
 8010d5e:	e7e9      	b.n	8010d34 <_fwalk_sglue+0x10>

08010d60 <sniprintf>:
 8010d60:	b40c      	push	{r2, r3}
 8010d62:	b530      	push	{r4, r5, lr}
 8010d64:	4b17      	ldr	r3, [pc, #92]	; (8010dc4 <sniprintf+0x64>)
 8010d66:	1e0c      	subs	r4, r1, #0
 8010d68:	681d      	ldr	r5, [r3, #0]
 8010d6a:	b09d      	sub	sp, #116	; 0x74
 8010d6c:	da08      	bge.n	8010d80 <sniprintf+0x20>
 8010d6e:	238b      	movs	r3, #139	; 0x8b
 8010d70:	602b      	str	r3, [r5, #0]
 8010d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d76:	b01d      	add	sp, #116	; 0x74
 8010d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d7c:	b002      	add	sp, #8
 8010d7e:	4770      	bx	lr
 8010d80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010d84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010d88:	bf14      	ite	ne
 8010d8a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010d8e:	4623      	moveq	r3, r4
 8010d90:	9304      	str	r3, [sp, #16]
 8010d92:	9307      	str	r3, [sp, #28]
 8010d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d98:	9002      	str	r0, [sp, #8]
 8010d9a:	9006      	str	r0, [sp, #24]
 8010d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010da0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010da2:	ab21      	add	r3, sp, #132	; 0x84
 8010da4:	a902      	add	r1, sp, #8
 8010da6:	4628      	mov	r0, r5
 8010da8:	9301      	str	r3, [sp, #4]
 8010daa:	f001 fc85 	bl	80126b8 <_svfiprintf_r>
 8010dae:	1c43      	adds	r3, r0, #1
 8010db0:	bfbc      	itt	lt
 8010db2:	238b      	movlt	r3, #139	; 0x8b
 8010db4:	602b      	strlt	r3, [r5, #0]
 8010db6:	2c00      	cmp	r4, #0
 8010db8:	d0dd      	beq.n	8010d76 <sniprintf+0x16>
 8010dba:	9b02      	ldr	r3, [sp, #8]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	701a      	strb	r2, [r3, #0]
 8010dc0:	e7d9      	b.n	8010d76 <sniprintf+0x16>
 8010dc2:	bf00      	nop
 8010dc4:	200001e0 	.word	0x200001e0

08010dc8 <__sread>:
 8010dc8:	b510      	push	{r4, lr}
 8010dca:	460c      	mov	r4, r1
 8010dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd0:	f000 f8c2 	bl	8010f58 <_read_r>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	bfab      	itete	ge
 8010dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010dda:	89a3      	ldrhlt	r3, [r4, #12]
 8010ddc:	181b      	addge	r3, r3, r0
 8010dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010de2:	bfac      	ite	ge
 8010de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010de6:	81a3      	strhlt	r3, [r4, #12]
 8010de8:	bd10      	pop	{r4, pc}

08010dea <__swrite>:
 8010dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dee:	461f      	mov	r7, r3
 8010df0:	898b      	ldrh	r3, [r1, #12]
 8010df2:	05db      	lsls	r3, r3, #23
 8010df4:	4605      	mov	r5, r0
 8010df6:	460c      	mov	r4, r1
 8010df8:	4616      	mov	r6, r2
 8010dfa:	d505      	bpl.n	8010e08 <__swrite+0x1e>
 8010dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e00:	2302      	movs	r3, #2
 8010e02:	2200      	movs	r2, #0
 8010e04:	f000 f896 	bl	8010f34 <_lseek_r>
 8010e08:	89a3      	ldrh	r3, [r4, #12]
 8010e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e12:	81a3      	strh	r3, [r4, #12]
 8010e14:	4632      	mov	r2, r6
 8010e16:	463b      	mov	r3, r7
 8010e18:	4628      	mov	r0, r5
 8010e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e1e:	f000 b8ad 	b.w	8010f7c <_write_r>

08010e22 <__sseek>:
 8010e22:	b510      	push	{r4, lr}
 8010e24:	460c      	mov	r4, r1
 8010e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e2a:	f000 f883 	bl	8010f34 <_lseek_r>
 8010e2e:	1c43      	adds	r3, r0, #1
 8010e30:	89a3      	ldrh	r3, [r4, #12]
 8010e32:	bf15      	itete	ne
 8010e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e3e:	81a3      	strheq	r3, [r4, #12]
 8010e40:	bf18      	it	ne
 8010e42:	81a3      	strhne	r3, [r4, #12]
 8010e44:	bd10      	pop	{r4, pc}

08010e46 <__sclose>:
 8010e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e4a:	f000 b80d 	b.w	8010e68 <_close_r>

08010e4e <memset>:
 8010e4e:	4402      	add	r2, r0
 8010e50:	4603      	mov	r3, r0
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d100      	bne.n	8010e58 <memset+0xa>
 8010e56:	4770      	bx	lr
 8010e58:	f803 1b01 	strb.w	r1, [r3], #1
 8010e5c:	e7f9      	b.n	8010e52 <memset+0x4>
	...

08010e60 <_localeconv_r>:
 8010e60:	4800      	ldr	r0, [pc, #0]	; (8010e64 <_localeconv_r+0x4>)
 8010e62:	4770      	bx	lr
 8010e64:	200002d4 	.word	0x200002d4

08010e68 <_close_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d06      	ldr	r5, [pc, #24]	; (8010e84 <_close_r+0x1c>)
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	4604      	mov	r4, r0
 8010e70:	4608      	mov	r0, r1
 8010e72:	602b      	str	r3, [r5, #0]
 8010e74:	f7f1 fc81 	bl	800277a <_close>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_close_r+0x1a>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_close_r+0x1a>
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	20005d20 	.word	0x20005d20

08010e88 <_reclaim_reent>:
 8010e88:	4b29      	ldr	r3, [pc, #164]	; (8010f30 <_reclaim_reent+0xa8>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4283      	cmp	r3, r0
 8010e8e:	b570      	push	{r4, r5, r6, lr}
 8010e90:	4604      	mov	r4, r0
 8010e92:	d04b      	beq.n	8010f2c <_reclaim_reent+0xa4>
 8010e94:	69c3      	ldr	r3, [r0, #28]
 8010e96:	b143      	cbz	r3, 8010eaa <_reclaim_reent+0x22>
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d144      	bne.n	8010f28 <_reclaim_reent+0xa0>
 8010e9e:	69e3      	ldr	r3, [r4, #28]
 8010ea0:	6819      	ldr	r1, [r3, #0]
 8010ea2:	b111      	cbz	r1, 8010eaa <_reclaim_reent+0x22>
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f000 ff31 	bl	8011d0c <_free_r>
 8010eaa:	6961      	ldr	r1, [r4, #20]
 8010eac:	b111      	cbz	r1, 8010eb4 <_reclaim_reent+0x2c>
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 ff2c 	bl	8011d0c <_free_r>
 8010eb4:	69e1      	ldr	r1, [r4, #28]
 8010eb6:	b111      	cbz	r1, 8010ebe <_reclaim_reent+0x36>
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f000 ff27 	bl	8011d0c <_free_r>
 8010ebe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010ec0:	b111      	cbz	r1, 8010ec8 <_reclaim_reent+0x40>
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f000 ff22 	bl	8011d0c <_free_r>
 8010ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010eca:	b111      	cbz	r1, 8010ed2 <_reclaim_reent+0x4a>
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f000 ff1d 	bl	8011d0c <_free_r>
 8010ed2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010ed4:	b111      	cbz	r1, 8010edc <_reclaim_reent+0x54>
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f000 ff18 	bl	8011d0c <_free_r>
 8010edc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010ede:	b111      	cbz	r1, 8010ee6 <_reclaim_reent+0x5e>
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f000 ff13 	bl	8011d0c <_free_r>
 8010ee6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010ee8:	b111      	cbz	r1, 8010ef0 <_reclaim_reent+0x68>
 8010eea:	4620      	mov	r0, r4
 8010eec:	f000 ff0e 	bl	8011d0c <_free_r>
 8010ef0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010ef2:	b111      	cbz	r1, 8010efa <_reclaim_reent+0x72>
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f000 ff09 	bl	8011d0c <_free_r>
 8010efa:	6a23      	ldr	r3, [r4, #32]
 8010efc:	b1b3      	cbz	r3, 8010f2c <_reclaim_reent+0xa4>
 8010efe:	4620      	mov	r0, r4
 8010f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f04:	4718      	bx	r3
 8010f06:	5949      	ldr	r1, [r1, r5]
 8010f08:	b941      	cbnz	r1, 8010f1c <_reclaim_reent+0x94>
 8010f0a:	3504      	adds	r5, #4
 8010f0c:	69e3      	ldr	r3, [r4, #28]
 8010f0e:	2d80      	cmp	r5, #128	; 0x80
 8010f10:	68d9      	ldr	r1, [r3, #12]
 8010f12:	d1f8      	bne.n	8010f06 <_reclaim_reent+0x7e>
 8010f14:	4620      	mov	r0, r4
 8010f16:	f000 fef9 	bl	8011d0c <_free_r>
 8010f1a:	e7c0      	b.n	8010e9e <_reclaim_reent+0x16>
 8010f1c:	680e      	ldr	r6, [r1, #0]
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f000 fef4 	bl	8011d0c <_free_r>
 8010f24:	4631      	mov	r1, r6
 8010f26:	e7ef      	b.n	8010f08 <_reclaim_reent+0x80>
 8010f28:	2500      	movs	r5, #0
 8010f2a:	e7ef      	b.n	8010f0c <_reclaim_reent+0x84>
 8010f2c:	bd70      	pop	{r4, r5, r6, pc}
 8010f2e:	bf00      	nop
 8010f30:	200001e0 	.word	0x200001e0

08010f34 <_lseek_r>:
 8010f34:	b538      	push	{r3, r4, r5, lr}
 8010f36:	4d07      	ldr	r5, [pc, #28]	; (8010f54 <_lseek_r+0x20>)
 8010f38:	4604      	mov	r4, r0
 8010f3a:	4608      	mov	r0, r1
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	2200      	movs	r2, #0
 8010f40:	602a      	str	r2, [r5, #0]
 8010f42:	461a      	mov	r2, r3
 8010f44:	f7f1 fc40 	bl	80027c8 <_lseek>
 8010f48:	1c43      	adds	r3, r0, #1
 8010f4a:	d102      	bne.n	8010f52 <_lseek_r+0x1e>
 8010f4c:	682b      	ldr	r3, [r5, #0]
 8010f4e:	b103      	cbz	r3, 8010f52 <_lseek_r+0x1e>
 8010f50:	6023      	str	r3, [r4, #0]
 8010f52:	bd38      	pop	{r3, r4, r5, pc}
 8010f54:	20005d20 	.word	0x20005d20

08010f58 <_read_r>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	4d07      	ldr	r5, [pc, #28]	; (8010f78 <_read_r+0x20>)
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	4608      	mov	r0, r1
 8010f60:	4611      	mov	r1, r2
 8010f62:	2200      	movs	r2, #0
 8010f64:	602a      	str	r2, [r5, #0]
 8010f66:	461a      	mov	r2, r3
 8010f68:	f7f1 fbce 	bl	8002708 <_read>
 8010f6c:	1c43      	adds	r3, r0, #1
 8010f6e:	d102      	bne.n	8010f76 <_read_r+0x1e>
 8010f70:	682b      	ldr	r3, [r5, #0]
 8010f72:	b103      	cbz	r3, 8010f76 <_read_r+0x1e>
 8010f74:	6023      	str	r3, [r4, #0]
 8010f76:	bd38      	pop	{r3, r4, r5, pc}
 8010f78:	20005d20 	.word	0x20005d20

08010f7c <_write_r>:
 8010f7c:	b538      	push	{r3, r4, r5, lr}
 8010f7e:	4d07      	ldr	r5, [pc, #28]	; (8010f9c <_write_r+0x20>)
 8010f80:	4604      	mov	r4, r0
 8010f82:	4608      	mov	r0, r1
 8010f84:	4611      	mov	r1, r2
 8010f86:	2200      	movs	r2, #0
 8010f88:	602a      	str	r2, [r5, #0]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	f7f1 fbd9 	bl	8002742 <_write>
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	d102      	bne.n	8010f9a <_write_r+0x1e>
 8010f94:	682b      	ldr	r3, [r5, #0]
 8010f96:	b103      	cbz	r3, 8010f9a <_write_r+0x1e>
 8010f98:	6023      	str	r3, [r4, #0]
 8010f9a:	bd38      	pop	{r3, r4, r5, pc}
 8010f9c:	20005d20 	.word	0x20005d20

08010fa0 <__errno>:
 8010fa0:	4b01      	ldr	r3, [pc, #4]	; (8010fa8 <__errno+0x8>)
 8010fa2:	6818      	ldr	r0, [r3, #0]
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	200001e0 	.word	0x200001e0

08010fac <__libc_init_array>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	4d0d      	ldr	r5, [pc, #52]	; (8010fe4 <__libc_init_array+0x38>)
 8010fb0:	4c0d      	ldr	r4, [pc, #52]	; (8010fe8 <__libc_init_array+0x3c>)
 8010fb2:	1b64      	subs	r4, r4, r5
 8010fb4:	10a4      	asrs	r4, r4, #2
 8010fb6:	2600      	movs	r6, #0
 8010fb8:	42a6      	cmp	r6, r4
 8010fba:	d109      	bne.n	8010fd0 <__libc_init_array+0x24>
 8010fbc:	4d0b      	ldr	r5, [pc, #44]	; (8010fec <__libc_init_array+0x40>)
 8010fbe:	4c0c      	ldr	r4, [pc, #48]	; (8010ff0 <__libc_init_array+0x44>)
 8010fc0:	f002 f894 	bl	80130ec <_init>
 8010fc4:	1b64      	subs	r4, r4, r5
 8010fc6:	10a4      	asrs	r4, r4, #2
 8010fc8:	2600      	movs	r6, #0
 8010fca:	42a6      	cmp	r6, r4
 8010fcc:	d105      	bne.n	8010fda <__libc_init_array+0x2e>
 8010fce:	bd70      	pop	{r4, r5, r6, pc}
 8010fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fd4:	4798      	blx	r3
 8010fd6:	3601      	adds	r6, #1
 8010fd8:	e7ee      	b.n	8010fb8 <__libc_init_array+0xc>
 8010fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fde:	4798      	blx	r3
 8010fe0:	3601      	adds	r6, #1
 8010fe2:	e7f2      	b.n	8010fca <__libc_init_array+0x1e>
 8010fe4:	080138f4 	.word	0x080138f4
 8010fe8:	080138f4 	.word	0x080138f4
 8010fec:	080138f4 	.word	0x080138f4
 8010ff0:	080138f8 	.word	0x080138f8

08010ff4 <__retarget_lock_init_recursive>:
 8010ff4:	4770      	bx	lr

08010ff6 <__retarget_lock_acquire_recursive>:
 8010ff6:	4770      	bx	lr

08010ff8 <__retarget_lock_release_recursive>:
 8010ff8:	4770      	bx	lr

08010ffa <memcpy>:
 8010ffa:	440a      	add	r2, r1
 8010ffc:	4291      	cmp	r1, r2
 8010ffe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011002:	d100      	bne.n	8011006 <memcpy+0xc>
 8011004:	4770      	bx	lr
 8011006:	b510      	push	{r4, lr}
 8011008:	f811 4b01 	ldrb.w	r4, [r1], #1
 801100c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011010:	4291      	cmp	r1, r2
 8011012:	d1f9      	bne.n	8011008 <memcpy+0xe>
 8011014:	bd10      	pop	{r4, pc}

08011016 <quorem>:
 8011016:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801101a:	6903      	ldr	r3, [r0, #16]
 801101c:	690c      	ldr	r4, [r1, #16]
 801101e:	42a3      	cmp	r3, r4
 8011020:	4607      	mov	r7, r0
 8011022:	db7e      	blt.n	8011122 <quorem+0x10c>
 8011024:	3c01      	subs	r4, #1
 8011026:	f101 0814 	add.w	r8, r1, #20
 801102a:	f100 0514 	add.w	r5, r0, #20
 801102e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011032:	9301      	str	r3, [sp, #4]
 8011034:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801103c:	3301      	adds	r3, #1
 801103e:	429a      	cmp	r2, r3
 8011040:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011044:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011048:	fbb2 f6f3 	udiv	r6, r2, r3
 801104c:	d331      	bcc.n	80110b2 <quorem+0x9c>
 801104e:	f04f 0e00 	mov.w	lr, #0
 8011052:	4640      	mov	r0, r8
 8011054:	46ac      	mov	ip, r5
 8011056:	46f2      	mov	sl, lr
 8011058:	f850 2b04 	ldr.w	r2, [r0], #4
 801105c:	b293      	uxth	r3, r2
 801105e:	fb06 e303 	mla	r3, r6, r3, lr
 8011062:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011066:	0c1a      	lsrs	r2, r3, #16
 8011068:	b29b      	uxth	r3, r3
 801106a:	ebaa 0303 	sub.w	r3, sl, r3
 801106e:	f8dc a000 	ldr.w	sl, [ip]
 8011072:	fa13 f38a 	uxtah	r3, r3, sl
 8011076:	fb06 220e 	mla	r2, r6, lr, r2
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	9b00      	ldr	r3, [sp, #0]
 801107e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011082:	b292      	uxth	r2, r2
 8011084:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801108c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011090:	4581      	cmp	r9, r0
 8011092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011096:	f84c 3b04 	str.w	r3, [ip], #4
 801109a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801109e:	d2db      	bcs.n	8011058 <quorem+0x42>
 80110a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80110a4:	b92b      	cbnz	r3, 80110b2 <quorem+0x9c>
 80110a6:	9b01      	ldr	r3, [sp, #4]
 80110a8:	3b04      	subs	r3, #4
 80110aa:	429d      	cmp	r5, r3
 80110ac:	461a      	mov	r2, r3
 80110ae:	d32c      	bcc.n	801110a <quorem+0xf4>
 80110b0:	613c      	str	r4, [r7, #16]
 80110b2:	4638      	mov	r0, r7
 80110b4:	f001 f9a6 	bl	8012404 <__mcmp>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	db22      	blt.n	8011102 <quorem+0xec>
 80110bc:	3601      	adds	r6, #1
 80110be:	4629      	mov	r1, r5
 80110c0:	2000      	movs	r0, #0
 80110c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80110c6:	f8d1 c000 	ldr.w	ip, [r1]
 80110ca:	b293      	uxth	r3, r2
 80110cc:	1ac3      	subs	r3, r0, r3
 80110ce:	0c12      	lsrs	r2, r2, #16
 80110d0:	fa13 f38c 	uxtah	r3, r3, ip
 80110d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80110d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110dc:	b29b      	uxth	r3, r3
 80110de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110e2:	45c1      	cmp	r9, r8
 80110e4:	f841 3b04 	str.w	r3, [r1], #4
 80110e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80110ec:	d2e9      	bcs.n	80110c2 <quorem+0xac>
 80110ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80110f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80110f6:	b922      	cbnz	r2, 8011102 <quorem+0xec>
 80110f8:	3b04      	subs	r3, #4
 80110fa:	429d      	cmp	r5, r3
 80110fc:	461a      	mov	r2, r3
 80110fe:	d30a      	bcc.n	8011116 <quorem+0x100>
 8011100:	613c      	str	r4, [r7, #16]
 8011102:	4630      	mov	r0, r6
 8011104:	b003      	add	sp, #12
 8011106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801110a:	6812      	ldr	r2, [r2, #0]
 801110c:	3b04      	subs	r3, #4
 801110e:	2a00      	cmp	r2, #0
 8011110:	d1ce      	bne.n	80110b0 <quorem+0x9a>
 8011112:	3c01      	subs	r4, #1
 8011114:	e7c9      	b.n	80110aa <quorem+0x94>
 8011116:	6812      	ldr	r2, [r2, #0]
 8011118:	3b04      	subs	r3, #4
 801111a:	2a00      	cmp	r2, #0
 801111c:	d1f0      	bne.n	8011100 <quorem+0xea>
 801111e:	3c01      	subs	r4, #1
 8011120:	e7eb      	b.n	80110fa <quorem+0xe4>
 8011122:	2000      	movs	r0, #0
 8011124:	e7ee      	b.n	8011104 <quorem+0xee>
	...

08011128 <_dtoa_r>:
 8011128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801112c:	ed2d 8b04 	vpush	{d8-d9}
 8011130:	69c5      	ldr	r5, [r0, #28]
 8011132:	b093      	sub	sp, #76	; 0x4c
 8011134:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011138:	ec57 6b10 	vmov	r6, r7, d0
 801113c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011140:	9107      	str	r1, [sp, #28]
 8011142:	4604      	mov	r4, r0
 8011144:	920a      	str	r2, [sp, #40]	; 0x28
 8011146:	930d      	str	r3, [sp, #52]	; 0x34
 8011148:	b975      	cbnz	r5, 8011168 <_dtoa_r+0x40>
 801114a:	2010      	movs	r0, #16
 801114c:	f000 fe2a 	bl	8011da4 <malloc>
 8011150:	4602      	mov	r2, r0
 8011152:	61e0      	str	r0, [r4, #28]
 8011154:	b920      	cbnz	r0, 8011160 <_dtoa_r+0x38>
 8011156:	4bae      	ldr	r3, [pc, #696]	; (8011410 <_dtoa_r+0x2e8>)
 8011158:	21ef      	movs	r1, #239	; 0xef
 801115a:	48ae      	ldr	r0, [pc, #696]	; (8011414 <_dtoa_r+0x2ec>)
 801115c:	f001 fc82 	bl	8012a64 <__assert_func>
 8011160:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011164:	6005      	str	r5, [r0, #0]
 8011166:	60c5      	str	r5, [r0, #12]
 8011168:	69e3      	ldr	r3, [r4, #28]
 801116a:	6819      	ldr	r1, [r3, #0]
 801116c:	b151      	cbz	r1, 8011184 <_dtoa_r+0x5c>
 801116e:	685a      	ldr	r2, [r3, #4]
 8011170:	604a      	str	r2, [r1, #4]
 8011172:	2301      	movs	r3, #1
 8011174:	4093      	lsls	r3, r2
 8011176:	608b      	str	r3, [r1, #8]
 8011178:	4620      	mov	r0, r4
 801117a:	f000 ff07 	bl	8011f8c <_Bfree>
 801117e:	69e3      	ldr	r3, [r4, #28]
 8011180:	2200      	movs	r2, #0
 8011182:	601a      	str	r2, [r3, #0]
 8011184:	1e3b      	subs	r3, r7, #0
 8011186:	bfbb      	ittet	lt
 8011188:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801118c:	9303      	strlt	r3, [sp, #12]
 801118e:	2300      	movge	r3, #0
 8011190:	2201      	movlt	r2, #1
 8011192:	bfac      	ite	ge
 8011194:	f8c8 3000 	strge.w	r3, [r8]
 8011198:	f8c8 2000 	strlt.w	r2, [r8]
 801119c:	4b9e      	ldr	r3, [pc, #632]	; (8011418 <_dtoa_r+0x2f0>)
 801119e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80111a2:	ea33 0308 	bics.w	r3, r3, r8
 80111a6:	d11b      	bne.n	80111e0 <_dtoa_r+0xb8>
 80111a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80111ae:	6013      	str	r3, [r2, #0]
 80111b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80111b4:	4333      	orrs	r3, r6
 80111b6:	f000 8593 	beq.w	8011ce0 <_dtoa_r+0xbb8>
 80111ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111bc:	b963      	cbnz	r3, 80111d8 <_dtoa_r+0xb0>
 80111be:	4b97      	ldr	r3, [pc, #604]	; (801141c <_dtoa_r+0x2f4>)
 80111c0:	e027      	b.n	8011212 <_dtoa_r+0xea>
 80111c2:	4b97      	ldr	r3, [pc, #604]	; (8011420 <_dtoa_r+0x2f8>)
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	3308      	adds	r3, #8
 80111c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80111ca:	6013      	str	r3, [r2, #0]
 80111cc:	9800      	ldr	r0, [sp, #0]
 80111ce:	b013      	add	sp, #76	; 0x4c
 80111d0:	ecbd 8b04 	vpop	{d8-d9}
 80111d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d8:	4b90      	ldr	r3, [pc, #576]	; (801141c <_dtoa_r+0x2f4>)
 80111da:	9300      	str	r3, [sp, #0]
 80111dc:	3303      	adds	r3, #3
 80111de:	e7f3      	b.n	80111c8 <_dtoa_r+0xa0>
 80111e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111e4:	2200      	movs	r2, #0
 80111e6:	ec51 0b17 	vmov	r0, r1, d7
 80111ea:	eeb0 8a47 	vmov.f32	s16, s14
 80111ee:	eef0 8a67 	vmov.f32	s17, s15
 80111f2:	2300      	movs	r3, #0
 80111f4:	f7ef fc90 	bl	8000b18 <__aeabi_dcmpeq>
 80111f8:	4681      	mov	r9, r0
 80111fa:	b160      	cbz	r0, 8011216 <_dtoa_r+0xee>
 80111fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111fe:	2301      	movs	r3, #1
 8011200:	6013      	str	r3, [r2, #0]
 8011202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 8568 	beq.w	8011cda <_dtoa_r+0xbb2>
 801120a:	4b86      	ldr	r3, [pc, #536]	; (8011424 <_dtoa_r+0x2fc>)
 801120c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801120e:	6013      	str	r3, [r2, #0]
 8011210:	3b01      	subs	r3, #1
 8011212:	9300      	str	r3, [sp, #0]
 8011214:	e7da      	b.n	80111cc <_dtoa_r+0xa4>
 8011216:	aa10      	add	r2, sp, #64	; 0x40
 8011218:	a911      	add	r1, sp, #68	; 0x44
 801121a:	4620      	mov	r0, r4
 801121c:	eeb0 0a48 	vmov.f32	s0, s16
 8011220:	eef0 0a68 	vmov.f32	s1, s17
 8011224:	f001 f994 	bl	8012550 <__d2b>
 8011228:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801122c:	4682      	mov	sl, r0
 801122e:	2d00      	cmp	r5, #0
 8011230:	d07f      	beq.n	8011332 <_dtoa_r+0x20a>
 8011232:	ee18 3a90 	vmov	r3, s17
 8011236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801123a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801123e:	ec51 0b18 	vmov	r0, r1, d8
 8011242:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801124a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801124e:	4619      	mov	r1, r3
 8011250:	2200      	movs	r2, #0
 8011252:	4b75      	ldr	r3, [pc, #468]	; (8011428 <_dtoa_r+0x300>)
 8011254:	f7ef f840 	bl	80002d8 <__aeabi_dsub>
 8011258:	a367      	add	r3, pc, #412	; (adr r3, 80113f8 <_dtoa_r+0x2d0>)
 801125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125e:	f7ef f9f3 	bl	8000648 <__aeabi_dmul>
 8011262:	a367      	add	r3, pc, #412	; (adr r3, 8011400 <_dtoa_r+0x2d8>)
 8011264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011268:	f7ef f838 	bl	80002dc <__adddf3>
 801126c:	4606      	mov	r6, r0
 801126e:	4628      	mov	r0, r5
 8011270:	460f      	mov	r7, r1
 8011272:	f7ef f97f 	bl	8000574 <__aeabi_i2d>
 8011276:	a364      	add	r3, pc, #400	; (adr r3, 8011408 <_dtoa_r+0x2e0>)
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f7ef f9e4 	bl	8000648 <__aeabi_dmul>
 8011280:	4602      	mov	r2, r0
 8011282:	460b      	mov	r3, r1
 8011284:	4630      	mov	r0, r6
 8011286:	4639      	mov	r1, r7
 8011288:	f7ef f828 	bl	80002dc <__adddf3>
 801128c:	4606      	mov	r6, r0
 801128e:	460f      	mov	r7, r1
 8011290:	f7ef fc8a 	bl	8000ba8 <__aeabi_d2iz>
 8011294:	2200      	movs	r2, #0
 8011296:	4683      	mov	fp, r0
 8011298:	2300      	movs	r3, #0
 801129a:	4630      	mov	r0, r6
 801129c:	4639      	mov	r1, r7
 801129e:	f7ef fc45 	bl	8000b2c <__aeabi_dcmplt>
 80112a2:	b148      	cbz	r0, 80112b8 <_dtoa_r+0x190>
 80112a4:	4658      	mov	r0, fp
 80112a6:	f7ef f965 	bl	8000574 <__aeabi_i2d>
 80112aa:	4632      	mov	r2, r6
 80112ac:	463b      	mov	r3, r7
 80112ae:	f7ef fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80112b2:	b908      	cbnz	r0, 80112b8 <_dtoa_r+0x190>
 80112b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80112b8:	f1bb 0f16 	cmp.w	fp, #22
 80112bc:	d857      	bhi.n	801136e <_dtoa_r+0x246>
 80112be:	4b5b      	ldr	r3, [pc, #364]	; (801142c <_dtoa_r+0x304>)
 80112c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80112c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c8:	ec51 0b18 	vmov	r0, r1, d8
 80112cc:	f7ef fc2e 	bl	8000b2c <__aeabi_dcmplt>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	d04e      	beq.n	8011372 <_dtoa_r+0x24a>
 80112d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80112d8:	2300      	movs	r3, #0
 80112da:	930c      	str	r3, [sp, #48]	; 0x30
 80112dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112de:	1b5b      	subs	r3, r3, r5
 80112e0:	1e5a      	subs	r2, r3, #1
 80112e2:	bf45      	ittet	mi
 80112e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80112e8:	9305      	strmi	r3, [sp, #20]
 80112ea:	2300      	movpl	r3, #0
 80112ec:	2300      	movmi	r3, #0
 80112ee:	9206      	str	r2, [sp, #24]
 80112f0:	bf54      	ite	pl
 80112f2:	9305      	strpl	r3, [sp, #20]
 80112f4:	9306      	strmi	r3, [sp, #24]
 80112f6:	f1bb 0f00 	cmp.w	fp, #0
 80112fa:	db3c      	blt.n	8011376 <_dtoa_r+0x24e>
 80112fc:	9b06      	ldr	r3, [sp, #24]
 80112fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011302:	445b      	add	r3, fp
 8011304:	9306      	str	r3, [sp, #24]
 8011306:	2300      	movs	r3, #0
 8011308:	9308      	str	r3, [sp, #32]
 801130a:	9b07      	ldr	r3, [sp, #28]
 801130c:	2b09      	cmp	r3, #9
 801130e:	d868      	bhi.n	80113e2 <_dtoa_r+0x2ba>
 8011310:	2b05      	cmp	r3, #5
 8011312:	bfc4      	itt	gt
 8011314:	3b04      	subgt	r3, #4
 8011316:	9307      	strgt	r3, [sp, #28]
 8011318:	9b07      	ldr	r3, [sp, #28]
 801131a:	f1a3 0302 	sub.w	r3, r3, #2
 801131e:	bfcc      	ite	gt
 8011320:	2500      	movgt	r5, #0
 8011322:	2501      	movle	r5, #1
 8011324:	2b03      	cmp	r3, #3
 8011326:	f200 8085 	bhi.w	8011434 <_dtoa_r+0x30c>
 801132a:	e8df f003 	tbb	[pc, r3]
 801132e:	3b2e      	.short	0x3b2e
 8011330:	5839      	.short	0x5839
 8011332:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011336:	441d      	add	r5, r3
 8011338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801133c:	2b20      	cmp	r3, #32
 801133e:	bfc1      	itttt	gt
 8011340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011344:	fa08 f803 	lslgt.w	r8, r8, r3
 8011348:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801134c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011350:	bfd6      	itet	le
 8011352:	f1c3 0320 	rsble	r3, r3, #32
 8011356:	ea48 0003 	orrgt.w	r0, r8, r3
 801135a:	fa06 f003 	lslle.w	r0, r6, r3
 801135e:	f7ef f8f9 	bl	8000554 <__aeabi_ui2d>
 8011362:	2201      	movs	r2, #1
 8011364:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011368:	3d01      	subs	r5, #1
 801136a:	920e      	str	r2, [sp, #56]	; 0x38
 801136c:	e76f      	b.n	801124e <_dtoa_r+0x126>
 801136e:	2301      	movs	r3, #1
 8011370:	e7b3      	b.n	80112da <_dtoa_r+0x1b2>
 8011372:	900c      	str	r0, [sp, #48]	; 0x30
 8011374:	e7b2      	b.n	80112dc <_dtoa_r+0x1b4>
 8011376:	9b05      	ldr	r3, [sp, #20]
 8011378:	eba3 030b 	sub.w	r3, r3, fp
 801137c:	9305      	str	r3, [sp, #20]
 801137e:	f1cb 0300 	rsb	r3, fp, #0
 8011382:	9308      	str	r3, [sp, #32]
 8011384:	2300      	movs	r3, #0
 8011386:	930b      	str	r3, [sp, #44]	; 0x2c
 8011388:	e7bf      	b.n	801130a <_dtoa_r+0x1e2>
 801138a:	2300      	movs	r3, #0
 801138c:	9309      	str	r3, [sp, #36]	; 0x24
 801138e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011390:	2b00      	cmp	r3, #0
 8011392:	dc52      	bgt.n	801143a <_dtoa_r+0x312>
 8011394:	2301      	movs	r3, #1
 8011396:	9301      	str	r3, [sp, #4]
 8011398:	9304      	str	r3, [sp, #16]
 801139a:	461a      	mov	r2, r3
 801139c:	920a      	str	r2, [sp, #40]	; 0x28
 801139e:	e00b      	b.n	80113b8 <_dtoa_r+0x290>
 80113a0:	2301      	movs	r3, #1
 80113a2:	e7f3      	b.n	801138c <_dtoa_r+0x264>
 80113a4:	2300      	movs	r3, #0
 80113a6:	9309      	str	r3, [sp, #36]	; 0x24
 80113a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113aa:	445b      	add	r3, fp
 80113ac:	9301      	str	r3, [sp, #4]
 80113ae:	3301      	adds	r3, #1
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	9304      	str	r3, [sp, #16]
 80113b4:	bfb8      	it	lt
 80113b6:	2301      	movlt	r3, #1
 80113b8:	69e0      	ldr	r0, [r4, #28]
 80113ba:	2100      	movs	r1, #0
 80113bc:	2204      	movs	r2, #4
 80113be:	f102 0614 	add.w	r6, r2, #20
 80113c2:	429e      	cmp	r6, r3
 80113c4:	d93d      	bls.n	8011442 <_dtoa_r+0x31a>
 80113c6:	6041      	str	r1, [r0, #4]
 80113c8:	4620      	mov	r0, r4
 80113ca:	f000 fd9f 	bl	8011f0c <_Balloc>
 80113ce:	9000      	str	r0, [sp, #0]
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d139      	bne.n	8011448 <_dtoa_r+0x320>
 80113d4:	4b16      	ldr	r3, [pc, #88]	; (8011430 <_dtoa_r+0x308>)
 80113d6:	4602      	mov	r2, r0
 80113d8:	f240 11af 	movw	r1, #431	; 0x1af
 80113dc:	e6bd      	b.n	801115a <_dtoa_r+0x32>
 80113de:	2301      	movs	r3, #1
 80113e0:	e7e1      	b.n	80113a6 <_dtoa_r+0x27e>
 80113e2:	2501      	movs	r5, #1
 80113e4:	2300      	movs	r3, #0
 80113e6:	9307      	str	r3, [sp, #28]
 80113e8:	9509      	str	r5, [sp, #36]	; 0x24
 80113ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ee:	9301      	str	r3, [sp, #4]
 80113f0:	9304      	str	r3, [sp, #16]
 80113f2:	2200      	movs	r2, #0
 80113f4:	2312      	movs	r3, #18
 80113f6:	e7d1      	b.n	801139c <_dtoa_r+0x274>
 80113f8:	636f4361 	.word	0x636f4361
 80113fc:	3fd287a7 	.word	0x3fd287a7
 8011400:	8b60c8b3 	.word	0x8b60c8b3
 8011404:	3fc68a28 	.word	0x3fc68a28
 8011408:	509f79fb 	.word	0x509f79fb
 801140c:	3fd34413 	.word	0x3fd34413
 8011410:	080135bd 	.word	0x080135bd
 8011414:	080135d4 	.word	0x080135d4
 8011418:	7ff00000 	.word	0x7ff00000
 801141c:	080135b9 	.word	0x080135b9
 8011420:	080135b0 	.word	0x080135b0
 8011424:	0801358d 	.word	0x0801358d
 8011428:	3ff80000 	.word	0x3ff80000
 801142c:	080136c0 	.word	0x080136c0
 8011430:	0801362c 	.word	0x0801362c
 8011434:	2301      	movs	r3, #1
 8011436:	9309      	str	r3, [sp, #36]	; 0x24
 8011438:	e7d7      	b.n	80113ea <_dtoa_r+0x2c2>
 801143a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801143c:	9301      	str	r3, [sp, #4]
 801143e:	9304      	str	r3, [sp, #16]
 8011440:	e7ba      	b.n	80113b8 <_dtoa_r+0x290>
 8011442:	3101      	adds	r1, #1
 8011444:	0052      	lsls	r2, r2, #1
 8011446:	e7ba      	b.n	80113be <_dtoa_r+0x296>
 8011448:	69e3      	ldr	r3, [r4, #28]
 801144a:	9a00      	ldr	r2, [sp, #0]
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	2b0e      	cmp	r3, #14
 8011452:	f200 80a8 	bhi.w	80115a6 <_dtoa_r+0x47e>
 8011456:	2d00      	cmp	r5, #0
 8011458:	f000 80a5 	beq.w	80115a6 <_dtoa_r+0x47e>
 801145c:	f1bb 0f00 	cmp.w	fp, #0
 8011460:	dd38      	ble.n	80114d4 <_dtoa_r+0x3ac>
 8011462:	4bc0      	ldr	r3, [pc, #768]	; (8011764 <_dtoa_r+0x63c>)
 8011464:	f00b 020f 	and.w	r2, fp, #15
 8011468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801146c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011470:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011474:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011478:	d019      	beq.n	80114ae <_dtoa_r+0x386>
 801147a:	4bbb      	ldr	r3, [pc, #748]	; (8011768 <_dtoa_r+0x640>)
 801147c:	ec51 0b18 	vmov	r0, r1, d8
 8011480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011484:	f7ef fa0a 	bl	800089c <__aeabi_ddiv>
 8011488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801148c:	f008 080f 	and.w	r8, r8, #15
 8011490:	2503      	movs	r5, #3
 8011492:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011768 <_dtoa_r+0x640>
 8011496:	f1b8 0f00 	cmp.w	r8, #0
 801149a:	d10a      	bne.n	80114b2 <_dtoa_r+0x38a>
 801149c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114a0:	4632      	mov	r2, r6
 80114a2:	463b      	mov	r3, r7
 80114a4:	f7ef f9fa 	bl	800089c <__aeabi_ddiv>
 80114a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114ac:	e02b      	b.n	8011506 <_dtoa_r+0x3de>
 80114ae:	2502      	movs	r5, #2
 80114b0:	e7ef      	b.n	8011492 <_dtoa_r+0x36a>
 80114b2:	f018 0f01 	tst.w	r8, #1
 80114b6:	d008      	beq.n	80114ca <_dtoa_r+0x3a2>
 80114b8:	4630      	mov	r0, r6
 80114ba:	4639      	mov	r1, r7
 80114bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80114c0:	f7ef f8c2 	bl	8000648 <__aeabi_dmul>
 80114c4:	3501      	adds	r5, #1
 80114c6:	4606      	mov	r6, r0
 80114c8:	460f      	mov	r7, r1
 80114ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80114ce:	f109 0908 	add.w	r9, r9, #8
 80114d2:	e7e0      	b.n	8011496 <_dtoa_r+0x36e>
 80114d4:	f000 809f 	beq.w	8011616 <_dtoa_r+0x4ee>
 80114d8:	f1cb 0600 	rsb	r6, fp, #0
 80114dc:	4ba1      	ldr	r3, [pc, #644]	; (8011764 <_dtoa_r+0x63c>)
 80114de:	4fa2      	ldr	r7, [pc, #648]	; (8011768 <_dtoa_r+0x640>)
 80114e0:	f006 020f 	and.w	r2, r6, #15
 80114e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80114e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ec:	ec51 0b18 	vmov	r0, r1, d8
 80114f0:	f7ef f8aa 	bl	8000648 <__aeabi_dmul>
 80114f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114f8:	1136      	asrs	r6, r6, #4
 80114fa:	2300      	movs	r3, #0
 80114fc:	2502      	movs	r5, #2
 80114fe:	2e00      	cmp	r6, #0
 8011500:	d17e      	bne.n	8011600 <_dtoa_r+0x4d8>
 8011502:	2b00      	cmp	r3, #0
 8011504:	d1d0      	bne.n	80114a8 <_dtoa_r+0x380>
 8011506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011508:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801150c:	2b00      	cmp	r3, #0
 801150e:	f000 8084 	beq.w	801161a <_dtoa_r+0x4f2>
 8011512:	4b96      	ldr	r3, [pc, #600]	; (801176c <_dtoa_r+0x644>)
 8011514:	2200      	movs	r2, #0
 8011516:	4640      	mov	r0, r8
 8011518:	4649      	mov	r1, r9
 801151a:	f7ef fb07 	bl	8000b2c <__aeabi_dcmplt>
 801151e:	2800      	cmp	r0, #0
 8011520:	d07b      	beq.n	801161a <_dtoa_r+0x4f2>
 8011522:	9b04      	ldr	r3, [sp, #16]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d078      	beq.n	801161a <_dtoa_r+0x4f2>
 8011528:	9b01      	ldr	r3, [sp, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	dd39      	ble.n	80115a2 <_dtoa_r+0x47a>
 801152e:	4b90      	ldr	r3, [pc, #576]	; (8011770 <_dtoa_r+0x648>)
 8011530:	2200      	movs	r2, #0
 8011532:	4640      	mov	r0, r8
 8011534:	4649      	mov	r1, r9
 8011536:	f7ef f887 	bl	8000648 <__aeabi_dmul>
 801153a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801153e:	9e01      	ldr	r6, [sp, #4]
 8011540:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8011544:	3501      	adds	r5, #1
 8011546:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801154a:	4628      	mov	r0, r5
 801154c:	f7ef f812 	bl	8000574 <__aeabi_i2d>
 8011550:	4642      	mov	r2, r8
 8011552:	464b      	mov	r3, r9
 8011554:	f7ef f878 	bl	8000648 <__aeabi_dmul>
 8011558:	4b86      	ldr	r3, [pc, #536]	; (8011774 <_dtoa_r+0x64c>)
 801155a:	2200      	movs	r2, #0
 801155c:	f7ee febe 	bl	80002dc <__adddf3>
 8011560:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011568:	9303      	str	r3, [sp, #12]
 801156a:	2e00      	cmp	r6, #0
 801156c:	d158      	bne.n	8011620 <_dtoa_r+0x4f8>
 801156e:	4b82      	ldr	r3, [pc, #520]	; (8011778 <_dtoa_r+0x650>)
 8011570:	2200      	movs	r2, #0
 8011572:	4640      	mov	r0, r8
 8011574:	4649      	mov	r1, r9
 8011576:	f7ee feaf 	bl	80002d8 <__aeabi_dsub>
 801157a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801157e:	4680      	mov	r8, r0
 8011580:	4689      	mov	r9, r1
 8011582:	f7ef faf1 	bl	8000b68 <__aeabi_dcmpgt>
 8011586:	2800      	cmp	r0, #0
 8011588:	f040 8296 	bne.w	8011ab8 <_dtoa_r+0x990>
 801158c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011590:	4640      	mov	r0, r8
 8011592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011596:	4649      	mov	r1, r9
 8011598:	f7ef fac8 	bl	8000b2c <__aeabi_dcmplt>
 801159c:	2800      	cmp	r0, #0
 801159e:	f040 8289 	bne.w	8011ab4 <_dtoa_r+0x98c>
 80115a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80115a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f2c0 814e 	blt.w	801184a <_dtoa_r+0x722>
 80115ae:	f1bb 0f0e 	cmp.w	fp, #14
 80115b2:	f300 814a 	bgt.w	801184a <_dtoa_r+0x722>
 80115b6:	4b6b      	ldr	r3, [pc, #428]	; (8011764 <_dtoa_r+0x63c>)
 80115b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80115bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f280 80dc 	bge.w	8011780 <_dtoa_r+0x658>
 80115c8:	9b04      	ldr	r3, [sp, #16]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	f300 80d8 	bgt.w	8011780 <_dtoa_r+0x658>
 80115d0:	f040 826f 	bne.w	8011ab2 <_dtoa_r+0x98a>
 80115d4:	4b68      	ldr	r3, [pc, #416]	; (8011778 <_dtoa_r+0x650>)
 80115d6:	2200      	movs	r2, #0
 80115d8:	4640      	mov	r0, r8
 80115da:	4649      	mov	r1, r9
 80115dc:	f7ef f834 	bl	8000648 <__aeabi_dmul>
 80115e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115e4:	f7ef fab6 	bl	8000b54 <__aeabi_dcmpge>
 80115e8:	9e04      	ldr	r6, [sp, #16]
 80115ea:	4637      	mov	r7, r6
 80115ec:	2800      	cmp	r0, #0
 80115ee:	f040 8245 	bne.w	8011a7c <_dtoa_r+0x954>
 80115f2:	9d00      	ldr	r5, [sp, #0]
 80115f4:	2331      	movs	r3, #49	; 0x31
 80115f6:	f805 3b01 	strb.w	r3, [r5], #1
 80115fa:	f10b 0b01 	add.w	fp, fp, #1
 80115fe:	e241      	b.n	8011a84 <_dtoa_r+0x95c>
 8011600:	07f2      	lsls	r2, r6, #31
 8011602:	d505      	bpl.n	8011610 <_dtoa_r+0x4e8>
 8011604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011608:	f7ef f81e 	bl	8000648 <__aeabi_dmul>
 801160c:	3501      	adds	r5, #1
 801160e:	2301      	movs	r3, #1
 8011610:	1076      	asrs	r6, r6, #1
 8011612:	3708      	adds	r7, #8
 8011614:	e773      	b.n	80114fe <_dtoa_r+0x3d6>
 8011616:	2502      	movs	r5, #2
 8011618:	e775      	b.n	8011506 <_dtoa_r+0x3de>
 801161a:	9e04      	ldr	r6, [sp, #16]
 801161c:	465f      	mov	r7, fp
 801161e:	e792      	b.n	8011546 <_dtoa_r+0x41e>
 8011620:	9900      	ldr	r1, [sp, #0]
 8011622:	4b50      	ldr	r3, [pc, #320]	; (8011764 <_dtoa_r+0x63c>)
 8011624:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011628:	4431      	add	r1, r6
 801162a:	9102      	str	r1, [sp, #8]
 801162c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801162e:	eeb0 9a47 	vmov.f32	s18, s14
 8011632:	eef0 9a67 	vmov.f32	s19, s15
 8011636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801163a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801163e:	2900      	cmp	r1, #0
 8011640:	d044      	beq.n	80116cc <_dtoa_r+0x5a4>
 8011642:	494e      	ldr	r1, [pc, #312]	; (801177c <_dtoa_r+0x654>)
 8011644:	2000      	movs	r0, #0
 8011646:	f7ef f929 	bl	800089c <__aeabi_ddiv>
 801164a:	ec53 2b19 	vmov	r2, r3, d9
 801164e:	f7ee fe43 	bl	80002d8 <__aeabi_dsub>
 8011652:	9d00      	ldr	r5, [sp, #0]
 8011654:	ec41 0b19 	vmov	d9, r0, r1
 8011658:	4649      	mov	r1, r9
 801165a:	4640      	mov	r0, r8
 801165c:	f7ef faa4 	bl	8000ba8 <__aeabi_d2iz>
 8011660:	4606      	mov	r6, r0
 8011662:	f7ee ff87 	bl	8000574 <__aeabi_i2d>
 8011666:	4602      	mov	r2, r0
 8011668:	460b      	mov	r3, r1
 801166a:	4640      	mov	r0, r8
 801166c:	4649      	mov	r1, r9
 801166e:	f7ee fe33 	bl	80002d8 <__aeabi_dsub>
 8011672:	3630      	adds	r6, #48	; 0x30
 8011674:	f805 6b01 	strb.w	r6, [r5], #1
 8011678:	ec53 2b19 	vmov	r2, r3, d9
 801167c:	4680      	mov	r8, r0
 801167e:	4689      	mov	r9, r1
 8011680:	f7ef fa54 	bl	8000b2c <__aeabi_dcmplt>
 8011684:	2800      	cmp	r0, #0
 8011686:	d164      	bne.n	8011752 <_dtoa_r+0x62a>
 8011688:	4642      	mov	r2, r8
 801168a:	464b      	mov	r3, r9
 801168c:	4937      	ldr	r1, [pc, #220]	; (801176c <_dtoa_r+0x644>)
 801168e:	2000      	movs	r0, #0
 8011690:	f7ee fe22 	bl	80002d8 <__aeabi_dsub>
 8011694:	ec53 2b19 	vmov	r2, r3, d9
 8011698:	f7ef fa48 	bl	8000b2c <__aeabi_dcmplt>
 801169c:	2800      	cmp	r0, #0
 801169e:	f040 80b6 	bne.w	801180e <_dtoa_r+0x6e6>
 80116a2:	9b02      	ldr	r3, [sp, #8]
 80116a4:	429d      	cmp	r5, r3
 80116a6:	f43f af7c 	beq.w	80115a2 <_dtoa_r+0x47a>
 80116aa:	4b31      	ldr	r3, [pc, #196]	; (8011770 <_dtoa_r+0x648>)
 80116ac:	ec51 0b19 	vmov	r0, r1, d9
 80116b0:	2200      	movs	r2, #0
 80116b2:	f7ee ffc9 	bl	8000648 <__aeabi_dmul>
 80116b6:	4b2e      	ldr	r3, [pc, #184]	; (8011770 <_dtoa_r+0x648>)
 80116b8:	ec41 0b19 	vmov	d9, r0, r1
 80116bc:	2200      	movs	r2, #0
 80116be:	4640      	mov	r0, r8
 80116c0:	4649      	mov	r1, r9
 80116c2:	f7ee ffc1 	bl	8000648 <__aeabi_dmul>
 80116c6:	4680      	mov	r8, r0
 80116c8:	4689      	mov	r9, r1
 80116ca:	e7c5      	b.n	8011658 <_dtoa_r+0x530>
 80116cc:	ec51 0b17 	vmov	r0, r1, d7
 80116d0:	f7ee ffba 	bl	8000648 <__aeabi_dmul>
 80116d4:	9b02      	ldr	r3, [sp, #8]
 80116d6:	9d00      	ldr	r5, [sp, #0]
 80116d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80116da:	ec41 0b19 	vmov	d9, r0, r1
 80116de:	4649      	mov	r1, r9
 80116e0:	4640      	mov	r0, r8
 80116e2:	f7ef fa61 	bl	8000ba8 <__aeabi_d2iz>
 80116e6:	4606      	mov	r6, r0
 80116e8:	f7ee ff44 	bl	8000574 <__aeabi_i2d>
 80116ec:	3630      	adds	r6, #48	; 0x30
 80116ee:	4602      	mov	r2, r0
 80116f0:	460b      	mov	r3, r1
 80116f2:	4640      	mov	r0, r8
 80116f4:	4649      	mov	r1, r9
 80116f6:	f7ee fdef 	bl	80002d8 <__aeabi_dsub>
 80116fa:	f805 6b01 	strb.w	r6, [r5], #1
 80116fe:	9b02      	ldr	r3, [sp, #8]
 8011700:	429d      	cmp	r5, r3
 8011702:	4680      	mov	r8, r0
 8011704:	4689      	mov	r9, r1
 8011706:	f04f 0200 	mov.w	r2, #0
 801170a:	d124      	bne.n	8011756 <_dtoa_r+0x62e>
 801170c:	4b1b      	ldr	r3, [pc, #108]	; (801177c <_dtoa_r+0x654>)
 801170e:	ec51 0b19 	vmov	r0, r1, d9
 8011712:	f7ee fde3 	bl	80002dc <__adddf3>
 8011716:	4602      	mov	r2, r0
 8011718:	460b      	mov	r3, r1
 801171a:	4640      	mov	r0, r8
 801171c:	4649      	mov	r1, r9
 801171e:	f7ef fa23 	bl	8000b68 <__aeabi_dcmpgt>
 8011722:	2800      	cmp	r0, #0
 8011724:	d173      	bne.n	801180e <_dtoa_r+0x6e6>
 8011726:	ec53 2b19 	vmov	r2, r3, d9
 801172a:	4914      	ldr	r1, [pc, #80]	; (801177c <_dtoa_r+0x654>)
 801172c:	2000      	movs	r0, #0
 801172e:	f7ee fdd3 	bl	80002d8 <__aeabi_dsub>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4640      	mov	r0, r8
 8011738:	4649      	mov	r1, r9
 801173a:	f7ef f9f7 	bl	8000b2c <__aeabi_dcmplt>
 801173e:	2800      	cmp	r0, #0
 8011740:	f43f af2f 	beq.w	80115a2 <_dtoa_r+0x47a>
 8011744:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011746:	1e6b      	subs	r3, r5, #1
 8011748:	930f      	str	r3, [sp, #60]	; 0x3c
 801174a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801174e:	2b30      	cmp	r3, #48	; 0x30
 8011750:	d0f8      	beq.n	8011744 <_dtoa_r+0x61c>
 8011752:	46bb      	mov	fp, r7
 8011754:	e04a      	b.n	80117ec <_dtoa_r+0x6c4>
 8011756:	4b06      	ldr	r3, [pc, #24]	; (8011770 <_dtoa_r+0x648>)
 8011758:	f7ee ff76 	bl	8000648 <__aeabi_dmul>
 801175c:	4680      	mov	r8, r0
 801175e:	4689      	mov	r9, r1
 8011760:	e7bd      	b.n	80116de <_dtoa_r+0x5b6>
 8011762:	bf00      	nop
 8011764:	080136c0 	.word	0x080136c0
 8011768:	08013698 	.word	0x08013698
 801176c:	3ff00000 	.word	0x3ff00000
 8011770:	40240000 	.word	0x40240000
 8011774:	401c0000 	.word	0x401c0000
 8011778:	40140000 	.word	0x40140000
 801177c:	3fe00000 	.word	0x3fe00000
 8011780:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011784:	9d00      	ldr	r5, [sp, #0]
 8011786:	4642      	mov	r2, r8
 8011788:	464b      	mov	r3, r9
 801178a:	4630      	mov	r0, r6
 801178c:	4639      	mov	r1, r7
 801178e:	f7ef f885 	bl	800089c <__aeabi_ddiv>
 8011792:	f7ef fa09 	bl	8000ba8 <__aeabi_d2iz>
 8011796:	9001      	str	r0, [sp, #4]
 8011798:	f7ee feec 	bl	8000574 <__aeabi_i2d>
 801179c:	4642      	mov	r2, r8
 801179e:	464b      	mov	r3, r9
 80117a0:	f7ee ff52 	bl	8000648 <__aeabi_dmul>
 80117a4:	4602      	mov	r2, r0
 80117a6:	460b      	mov	r3, r1
 80117a8:	4630      	mov	r0, r6
 80117aa:	4639      	mov	r1, r7
 80117ac:	f7ee fd94 	bl	80002d8 <__aeabi_dsub>
 80117b0:	9e01      	ldr	r6, [sp, #4]
 80117b2:	9f04      	ldr	r7, [sp, #16]
 80117b4:	3630      	adds	r6, #48	; 0x30
 80117b6:	f805 6b01 	strb.w	r6, [r5], #1
 80117ba:	9e00      	ldr	r6, [sp, #0]
 80117bc:	1bae      	subs	r6, r5, r6
 80117be:	42b7      	cmp	r7, r6
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	d134      	bne.n	8011830 <_dtoa_r+0x708>
 80117c6:	f7ee fd89 	bl	80002dc <__adddf3>
 80117ca:	4642      	mov	r2, r8
 80117cc:	464b      	mov	r3, r9
 80117ce:	4606      	mov	r6, r0
 80117d0:	460f      	mov	r7, r1
 80117d2:	f7ef f9c9 	bl	8000b68 <__aeabi_dcmpgt>
 80117d6:	b9c8      	cbnz	r0, 801180c <_dtoa_r+0x6e4>
 80117d8:	4642      	mov	r2, r8
 80117da:	464b      	mov	r3, r9
 80117dc:	4630      	mov	r0, r6
 80117de:	4639      	mov	r1, r7
 80117e0:	f7ef f99a 	bl	8000b18 <__aeabi_dcmpeq>
 80117e4:	b110      	cbz	r0, 80117ec <_dtoa_r+0x6c4>
 80117e6:	9b01      	ldr	r3, [sp, #4]
 80117e8:	07db      	lsls	r3, r3, #31
 80117ea:	d40f      	bmi.n	801180c <_dtoa_r+0x6e4>
 80117ec:	4651      	mov	r1, sl
 80117ee:	4620      	mov	r0, r4
 80117f0:	f000 fbcc 	bl	8011f8c <_Bfree>
 80117f4:	2300      	movs	r3, #0
 80117f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117f8:	702b      	strb	r3, [r5, #0]
 80117fa:	f10b 0301 	add.w	r3, fp, #1
 80117fe:	6013      	str	r3, [r2, #0]
 8011800:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011802:	2b00      	cmp	r3, #0
 8011804:	f43f ace2 	beq.w	80111cc <_dtoa_r+0xa4>
 8011808:	601d      	str	r5, [r3, #0]
 801180a:	e4df      	b.n	80111cc <_dtoa_r+0xa4>
 801180c:	465f      	mov	r7, fp
 801180e:	462b      	mov	r3, r5
 8011810:	461d      	mov	r5, r3
 8011812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011816:	2a39      	cmp	r2, #57	; 0x39
 8011818:	d106      	bne.n	8011828 <_dtoa_r+0x700>
 801181a:	9a00      	ldr	r2, [sp, #0]
 801181c:	429a      	cmp	r2, r3
 801181e:	d1f7      	bne.n	8011810 <_dtoa_r+0x6e8>
 8011820:	9900      	ldr	r1, [sp, #0]
 8011822:	2230      	movs	r2, #48	; 0x30
 8011824:	3701      	adds	r7, #1
 8011826:	700a      	strb	r2, [r1, #0]
 8011828:	781a      	ldrb	r2, [r3, #0]
 801182a:	3201      	adds	r2, #1
 801182c:	701a      	strb	r2, [r3, #0]
 801182e:	e790      	b.n	8011752 <_dtoa_r+0x62a>
 8011830:	4ba3      	ldr	r3, [pc, #652]	; (8011ac0 <_dtoa_r+0x998>)
 8011832:	2200      	movs	r2, #0
 8011834:	f7ee ff08 	bl	8000648 <__aeabi_dmul>
 8011838:	2200      	movs	r2, #0
 801183a:	2300      	movs	r3, #0
 801183c:	4606      	mov	r6, r0
 801183e:	460f      	mov	r7, r1
 8011840:	f7ef f96a 	bl	8000b18 <__aeabi_dcmpeq>
 8011844:	2800      	cmp	r0, #0
 8011846:	d09e      	beq.n	8011786 <_dtoa_r+0x65e>
 8011848:	e7d0      	b.n	80117ec <_dtoa_r+0x6c4>
 801184a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801184c:	2a00      	cmp	r2, #0
 801184e:	f000 80ca 	beq.w	80119e6 <_dtoa_r+0x8be>
 8011852:	9a07      	ldr	r2, [sp, #28]
 8011854:	2a01      	cmp	r2, #1
 8011856:	f300 80ad 	bgt.w	80119b4 <_dtoa_r+0x88c>
 801185a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801185c:	2a00      	cmp	r2, #0
 801185e:	f000 80a5 	beq.w	80119ac <_dtoa_r+0x884>
 8011862:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011866:	9e08      	ldr	r6, [sp, #32]
 8011868:	9d05      	ldr	r5, [sp, #20]
 801186a:	9a05      	ldr	r2, [sp, #20]
 801186c:	441a      	add	r2, r3
 801186e:	9205      	str	r2, [sp, #20]
 8011870:	9a06      	ldr	r2, [sp, #24]
 8011872:	2101      	movs	r1, #1
 8011874:	441a      	add	r2, r3
 8011876:	4620      	mov	r0, r4
 8011878:	9206      	str	r2, [sp, #24]
 801187a:	f000 fc3d 	bl	80120f8 <__i2b>
 801187e:	4607      	mov	r7, r0
 8011880:	b165      	cbz	r5, 801189c <_dtoa_r+0x774>
 8011882:	9b06      	ldr	r3, [sp, #24]
 8011884:	2b00      	cmp	r3, #0
 8011886:	dd09      	ble.n	801189c <_dtoa_r+0x774>
 8011888:	42ab      	cmp	r3, r5
 801188a:	9a05      	ldr	r2, [sp, #20]
 801188c:	bfa8      	it	ge
 801188e:	462b      	movge	r3, r5
 8011890:	1ad2      	subs	r2, r2, r3
 8011892:	9205      	str	r2, [sp, #20]
 8011894:	9a06      	ldr	r2, [sp, #24]
 8011896:	1aed      	subs	r5, r5, r3
 8011898:	1ad3      	subs	r3, r2, r3
 801189a:	9306      	str	r3, [sp, #24]
 801189c:	9b08      	ldr	r3, [sp, #32]
 801189e:	b1f3      	cbz	r3, 80118de <_dtoa_r+0x7b6>
 80118a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f000 80a3 	beq.w	80119ee <_dtoa_r+0x8c6>
 80118a8:	2e00      	cmp	r6, #0
 80118aa:	dd10      	ble.n	80118ce <_dtoa_r+0x7a6>
 80118ac:	4639      	mov	r1, r7
 80118ae:	4632      	mov	r2, r6
 80118b0:	4620      	mov	r0, r4
 80118b2:	f000 fce1 	bl	8012278 <__pow5mult>
 80118b6:	4652      	mov	r2, sl
 80118b8:	4601      	mov	r1, r0
 80118ba:	4607      	mov	r7, r0
 80118bc:	4620      	mov	r0, r4
 80118be:	f000 fc31 	bl	8012124 <__multiply>
 80118c2:	4651      	mov	r1, sl
 80118c4:	4680      	mov	r8, r0
 80118c6:	4620      	mov	r0, r4
 80118c8:	f000 fb60 	bl	8011f8c <_Bfree>
 80118cc:	46c2      	mov	sl, r8
 80118ce:	9b08      	ldr	r3, [sp, #32]
 80118d0:	1b9a      	subs	r2, r3, r6
 80118d2:	d004      	beq.n	80118de <_dtoa_r+0x7b6>
 80118d4:	4651      	mov	r1, sl
 80118d6:	4620      	mov	r0, r4
 80118d8:	f000 fcce 	bl	8012278 <__pow5mult>
 80118dc:	4682      	mov	sl, r0
 80118de:	2101      	movs	r1, #1
 80118e0:	4620      	mov	r0, r4
 80118e2:	f000 fc09 	bl	80120f8 <__i2b>
 80118e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	4606      	mov	r6, r0
 80118ec:	f340 8081 	ble.w	80119f2 <_dtoa_r+0x8ca>
 80118f0:	461a      	mov	r2, r3
 80118f2:	4601      	mov	r1, r0
 80118f4:	4620      	mov	r0, r4
 80118f6:	f000 fcbf 	bl	8012278 <__pow5mult>
 80118fa:	9b07      	ldr	r3, [sp, #28]
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	4606      	mov	r6, r0
 8011900:	dd7a      	ble.n	80119f8 <_dtoa_r+0x8d0>
 8011902:	f04f 0800 	mov.w	r8, #0
 8011906:	6933      	ldr	r3, [r6, #16]
 8011908:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801190c:	6918      	ldr	r0, [r3, #16]
 801190e:	f000 fba5 	bl	801205c <__hi0bits>
 8011912:	f1c0 0020 	rsb	r0, r0, #32
 8011916:	9b06      	ldr	r3, [sp, #24]
 8011918:	4418      	add	r0, r3
 801191a:	f010 001f 	ands.w	r0, r0, #31
 801191e:	f000 8094 	beq.w	8011a4a <_dtoa_r+0x922>
 8011922:	f1c0 0320 	rsb	r3, r0, #32
 8011926:	2b04      	cmp	r3, #4
 8011928:	f340 8085 	ble.w	8011a36 <_dtoa_r+0x90e>
 801192c:	9b05      	ldr	r3, [sp, #20]
 801192e:	f1c0 001c 	rsb	r0, r0, #28
 8011932:	4403      	add	r3, r0
 8011934:	9305      	str	r3, [sp, #20]
 8011936:	9b06      	ldr	r3, [sp, #24]
 8011938:	4403      	add	r3, r0
 801193a:	4405      	add	r5, r0
 801193c:	9306      	str	r3, [sp, #24]
 801193e:	9b05      	ldr	r3, [sp, #20]
 8011940:	2b00      	cmp	r3, #0
 8011942:	dd05      	ble.n	8011950 <_dtoa_r+0x828>
 8011944:	4651      	mov	r1, sl
 8011946:	461a      	mov	r2, r3
 8011948:	4620      	mov	r0, r4
 801194a:	f000 fcef 	bl	801232c <__lshift>
 801194e:	4682      	mov	sl, r0
 8011950:	9b06      	ldr	r3, [sp, #24]
 8011952:	2b00      	cmp	r3, #0
 8011954:	dd05      	ble.n	8011962 <_dtoa_r+0x83a>
 8011956:	4631      	mov	r1, r6
 8011958:	461a      	mov	r2, r3
 801195a:	4620      	mov	r0, r4
 801195c:	f000 fce6 	bl	801232c <__lshift>
 8011960:	4606      	mov	r6, r0
 8011962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011964:	2b00      	cmp	r3, #0
 8011966:	d072      	beq.n	8011a4e <_dtoa_r+0x926>
 8011968:	4631      	mov	r1, r6
 801196a:	4650      	mov	r0, sl
 801196c:	f000 fd4a 	bl	8012404 <__mcmp>
 8011970:	2800      	cmp	r0, #0
 8011972:	da6c      	bge.n	8011a4e <_dtoa_r+0x926>
 8011974:	2300      	movs	r3, #0
 8011976:	4651      	mov	r1, sl
 8011978:	220a      	movs	r2, #10
 801197a:	4620      	mov	r0, r4
 801197c:	f000 fb28 	bl	8011fd0 <__multadd>
 8011980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011982:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011986:	4682      	mov	sl, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 81b0 	beq.w	8011cee <_dtoa_r+0xbc6>
 801198e:	2300      	movs	r3, #0
 8011990:	4639      	mov	r1, r7
 8011992:	220a      	movs	r2, #10
 8011994:	4620      	mov	r0, r4
 8011996:	f000 fb1b 	bl	8011fd0 <__multadd>
 801199a:	9b01      	ldr	r3, [sp, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	4607      	mov	r7, r0
 80119a0:	f300 8096 	bgt.w	8011ad0 <_dtoa_r+0x9a8>
 80119a4:	9b07      	ldr	r3, [sp, #28]
 80119a6:	2b02      	cmp	r3, #2
 80119a8:	dc59      	bgt.n	8011a5e <_dtoa_r+0x936>
 80119aa:	e091      	b.n	8011ad0 <_dtoa_r+0x9a8>
 80119ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80119b2:	e758      	b.n	8011866 <_dtoa_r+0x73e>
 80119b4:	9b04      	ldr	r3, [sp, #16]
 80119b6:	1e5e      	subs	r6, r3, #1
 80119b8:	9b08      	ldr	r3, [sp, #32]
 80119ba:	42b3      	cmp	r3, r6
 80119bc:	bfbf      	itttt	lt
 80119be:	9b08      	ldrlt	r3, [sp, #32]
 80119c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80119c2:	9608      	strlt	r6, [sp, #32]
 80119c4:	1af3      	sublt	r3, r6, r3
 80119c6:	bfb4      	ite	lt
 80119c8:	18d2      	addlt	r2, r2, r3
 80119ca:	1b9e      	subge	r6, r3, r6
 80119cc:	9b04      	ldr	r3, [sp, #16]
 80119ce:	bfbc      	itt	lt
 80119d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80119d2:	2600      	movlt	r6, #0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	bfb7      	itett	lt
 80119d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80119dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80119e0:	1a9d      	sublt	r5, r3, r2
 80119e2:	2300      	movlt	r3, #0
 80119e4:	e741      	b.n	801186a <_dtoa_r+0x742>
 80119e6:	9e08      	ldr	r6, [sp, #32]
 80119e8:	9d05      	ldr	r5, [sp, #20]
 80119ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80119ec:	e748      	b.n	8011880 <_dtoa_r+0x758>
 80119ee:	9a08      	ldr	r2, [sp, #32]
 80119f0:	e770      	b.n	80118d4 <_dtoa_r+0x7ac>
 80119f2:	9b07      	ldr	r3, [sp, #28]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	dc19      	bgt.n	8011a2c <_dtoa_r+0x904>
 80119f8:	9b02      	ldr	r3, [sp, #8]
 80119fa:	b9bb      	cbnz	r3, 8011a2c <_dtoa_r+0x904>
 80119fc:	9b03      	ldr	r3, [sp, #12]
 80119fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a02:	b99b      	cbnz	r3, 8011a2c <_dtoa_r+0x904>
 8011a04:	9b03      	ldr	r3, [sp, #12]
 8011a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a0a:	0d1b      	lsrs	r3, r3, #20
 8011a0c:	051b      	lsls	r3, r3, #20
 8011a0e:	b183      	cbz	r3, 8011a32 <_dtoa_r+0x90a>
 8011a10:	9b05      	ldr	r3, [sp, #20]
 8011a12:	3301      	adds	r3, #1
 8011a14:	9305      	str	r3, [sp, #20]
 8011a16:	9b06      	ldr	r3, [sp, #24]
 8011a18:	3301      	adds	r3, #1
 8011a1a:	9306      	str	r3, [sp, #24]
 8011a1c:	f04f 0801 	mov.w	r8, #1
 8011a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f47f af6f 	bne.w	8011906 <_dtoa_r+0x7de>
 8011a28:	2001      	movs	r0, #1
 8011a2a:	e774      	b.n	8011916 <_dtoa_r+0x7ee>
 8011a2c:	f04f 0800 	mov.w	r8, #0
 8011a30:	e7f6      	b.n	8011a20 <_dtoa_r+0x8f8>
 8011a32:	4698      	mov	r8, r3
 8011a34:	e7f4      	b.n	8011a20 <_dtoa_r+0x8f8>
 8011a36:	d082      	beq.n	801193e <_dtoa_r+0x816>
 8011a38:	9a05      	ldr	r2, [sp, #20]
 8011a3a:	331c      	adds	r3, #28
 8011a3c:	441a      	add	r2, r3
 8011a3e:	9205      	str	r2, [sp, #20]
 8011a40:	9a06      	ldr	r2, [sp, #24]
 8011a42:	441a      	add	r2, r3
 8011a44:	441d      	add	r5, r3
 8011a46:	9206      	str	r2, [sp, #24]
 8011a48:	e779      	b.n	801193e <_dtoa_r+0x816>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	e7f4      	b.n	8011a38 <_dtoa_r+0x910>
 8011a4e:	9b04      	ldr	r3, [sp, #16]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dc37      	bgt.n	8011ac4 <_dtoa_r+0x99c>
 8011a54:	9b07      	ldr	r3, [sp, #28]
 8011a56:	2b02      	cmp	r3, #2
 8011a58:	dd34      	ble.n	8011ac4 <_dtoa_r+0x99c>
 8011a5a:	9b04      	ldr	r3, [sp, #16]
 8011a5c:	9301      	str	r3, [sp, #4]
 8011a5e:	9b01      	ldr	r3, [sp, #4]
 8011a60:	b963      	cbnz	r3, 8011a7c <_dtoa_r+0x954>
 8011a62:	4631      	mov	r1, r6
 8011a64:	2205      	movs	r2, #5
 8011a66:	4620      	mov	r0, r4
 8011a68:	f000 fab2 	bl	8011fd0 <__multadd>
 8011a6c:	4601      	mov	r1, r0
 8011a6e:	4606      	mov	r6, r0
 8011a70:	4650      	mov	r0, sl
 8011a72:	f000 fcc7 	bl	8012404 <__mcmp>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	f73f adbb 	bgt.w	80115f2 <_dtoa_r+0x4ca>
 8011a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a7e:	9d00      	ldr	r5, [sp, #0]
 8011a80:	ea6f 0b03 	mvn.w	fp, r3
 8011a84:	f04f 0800 	mov.w	r8, #0
 8011a88:	4631      	mov	r1, r6
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f000 fa7e 	bl	8011f8c <_Bfree>
 8011a90:	2f00      	cmp	r7, #0
 8011a92:	f43f aeab 	beq.w	80117ec <_dtoa_r+0x6c4>
 8011a96:	f1b8 0f00 	cmp.w	r8, #0
 8011a9a:	d005      	beq.n	8011aa8 <_dtoa_r+0x980>
 8011a9c:	45b8      	cmp	r8, r7
 8011a9e:	d003      	beq.n	8011aa8 <_dtoa_r+0x980>
 8011aa0:	4641      	mov	r1, r8
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	f000 fa72 	bl	8011f8c <_Bfree>
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f000 fa6e 	bl	8011f8c <_Bfree>
 8011ab0:	e69c      	b.n	80117ec <_dtoa_r+0x6c4>
 8011ab2:	2600      	movs	r6, #0
 8011ab4:	4637      	mov	r7, r6
 8011ab6:	e7e1      	b.n	8011a7c <_dtoa_r+0x954>
 8011ab8:	46bb      	mov	fp, r7
 8011aba:	4637      	mov	r7, r6
 8011abc:	e599      	b.n	80115f2 <_dtoa_r+0x4ca>
 8011abe:	bf00      	nop
 8011ac0:	40240000 	.word	0x40240000
 8011ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	f000 80c8 	beq.w	8011c5c <_dtoa_r+0xb34>
 8011acc:	9b04      	ldr	r3, [sp, #16]
 8011ace:	9301      	str	r3, [sp, #4]
 8011ad0:	2d00      	cmp	r5, #0
 8011ad2:	dd05      	ble.n	8011ae0 <_dtoa_r+0x9b8>
 8011ad4:	4639      	mov	r1, r7
 8011ad6:	462a      	mov	r2, r5
 8011ad8:	4620      	mov	r0, r4
 8011ada:	f000 fc27 	bl	801232c <__lshift>
 8011ade:	4607      	mov	r7, r0
 8011ae0:	f1b8 0f00 	cmp.w	r8, #0
 8011ae4:	d05b      	beq.n	8011b9e <_dtoa_r+0xa76>
 8011ae6:	6879      	ldr	r1, [r7, #4]
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f000 fa0f 	bl	8011f0c <_Balloc>
 8011aee:	4605      	mov	r5, r0
 8011af0:	b928      	cbnz	r0, 8011afe <_dtoa_r+0x9d6>
 8011af2:	4b83      	ldr	r3, [pc, #524]	; (8011d00 <_dtoa_r+0xbd8>)
 8011af4:	4602      	mov	r2, r0
 8011af6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011afa:	f7ff bb2e 	b.w	801115a <_dtoa_r+0x32>
 8011afe:	693a      	ldr	r2, [r7, #16]
 8011b00:	3202      	adds	r2, #2
 8011b02:	0092      	lsls	r2, r2, #2
 8011b04:	f107 010c 	add.w	r1, r7, #12
 8011b08:	300c      	adds	r0, #12
 8011b0a:	f7ff fa76 	bl	8010ffa <memcpy>
 8011b0e:	2201      	movs	r2, #1
 8011b10:	4629      	mov	r1, r5
 8011b12:	4620      	mov	r0, r4
 8011b14:	f000 fc0a 	bl	801232c <__lshift>
 8011b18:	9b00      	ldr	r3, [sp, #0]
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	9304      	str	r3, [sp, #16]
 8011b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b22:	4413      	add	r3, r2
 8011b24:	9308      	str	r3, [sp, #32]
 8011b26:	9b02      	ldr	r3, [sp, #8]
 8011b28:	f003 0301 	and.w	r3, r3, #1
 8011b2c:	46b8      	mov	r8, r7
 8011b2e:	9306      	str	r3, [sp, #24]
 8011b30:	4607      	mov	r7, r0
 8011b32:	9b04      	ldr	r3, [sp, #16]
 8011b34:	4631      	mov	r1, r6
 8011b36:	3b01      	subs	r3, #1
 8011b38:	4650      	mov	r0, sl
 8011b3a:	9301      	str	r3, [sp, #4]
 8011b3c:	f7ff fa6b 	bl	8011016 <quorem>
 8011b40:	4641      	mov	r1, r8
 8011b42:	9002      	str	r0, [sp, #8]
 8011b44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011b48:	4650      	mov	r0, sl
 8011b4a:	f000 fc5b 	bl	8012404 <__mcmp>
 8011b4e:	463a      	mov	r2, r7
 8011b50:	9005      	str	r0, [sp, #20]
 8011b52:	4631      	mov	r1, r6
 8011b54:	4620      	mov	r0, r4
 8011b56:	f000 fc71 	bl	801243c <__mdiff>
 8011b5a:	68c2      	ldr	r2, [r0, #12]
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	bb02      	cbnz	r2, 8011ba2 <_dtoa_r+0xa7a>
 8011b60:	4601      	mov	r1, r0
 8011b62:	4650      	mov	r0, sl
 8011b64:	f000 fc4e 	bl	8012404 <__mcmp>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	4629      	mov	r1, r5
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8011b70:	f000 fa0c 	bl	8011f8c <_Bfree>
 8011b74:	9b07      	ldr	r3, [sp, #28]
 8011b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b78:	9d04      	ldr	r5, [sp, #16]
 8011b7a:	ea43 0102 	orr.w	r1, r3, r2
 8011b7e:	9b06      	ldr	r3, [sp, #24]
 8011b80:	4319      	orrs	r1, r3
 8011b82:	d110      	bne.n	8011ba6 <_dtoa_r+0xa7e>
 8011b84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011b88:	d029      	beq.n	8011bde <_dtoa_r+0xab6>
 8011b8a:	9b05      	ldr	r3, [sp, #20]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	dd02      	ble.n	8011b96 <_dtoa_r+0xa6e>
 8011b90:	9b02      	ldr	r3, [sp, #8]
 8011b92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011b96:	9b01      	ldr	r3, [sp, #4]
 8011b98:	f883 9000 	strb.w	r9, [r3]
 8011b9c:	e774      	b.n	8011a88 <_dtoa_r+0x960>
 8011b9e:	4638      	mov	r0, r7
 8011ba0:	e7ba      	b.n	8011b18 <_dtoa_r+0x9f0>
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	e7e1      	b.n	8011b6a <_dtoa_r+0xa42>
 8011ba6:	9b05      	ldr	r3, [sp, #20]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	db04      	blt.n	8011bb6 <_dtoa_r+0xa8e>
 8011bac:	9907      	ldr	r1, [sp, #28]
 8011bae:	430b      	orrs	r3, r1
 8011bb0:	9906      	ldr	r1, [sp, #24]
 8011bb2:	430b      	orrs	r3, r1
 8011bb4:	d120      	bne.n	8011bf8 <_dtoa_r+0xad0>
 8011bb6:	2a00      	cmp	r2, #0
 8011bb8:	dded      	ble.n	8011b96 <_dtoa_r+0xa6e>
 8011bba:	4651      	mov	r1, sl
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f000 fbb4 	bl	801232c <__lshift>
 8011bc4:	4631      	mov	r1, r6
 8011bc6:	4682      	mov	sl, r0
 8011bc8:	f000 fc1c 	bl	8012404 <__mcmp>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	dc03      	bgt.n	8011bd8 <_dtoa_r+0xab0>
 8011bd0:	d1e1      	bne.n	8011b96 <_dtoa_r+0xa6e>
 8011bd2:	f019 0f01 	tst.w	r9, #1
 8011bd6:	d0de      	beq.n	8011b96 <_dtoa_r+0xa6e>
 8011bd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011bdc:	d1d8      	bne.n	8011b90 <_dtoa_r+0xa68>
 8011bde:	9a01      	ldr	r2, [sp, #4]
 8011be0:	2339      	movs	r3, #57	; 0x39
 8011be2:	7013      	strb	r3, [r2, #0]
 8011be4:	462b      	mov	r3, r5
 8011be6:	461d      	mov	r5, r3
 8011be8:	3b01      	subs	r3, #1
 8011bea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011bee:	2a39      	cmp	r2, #57	; 0x39
 8011bf0:	d06c      	beq.n	8011ccc <_dtoa_r+0xba4>
 8011bf2:	3201      	adds	r2, #1
 8011bf4:	701a      	strb	r2, [r3, #0]
 8011bf6:	e747      	b.n	8011a88 <_dtoa_r+0x960>
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	dd07      	ble.n	8011c0c <_dtoa_r+0xae4>
 8011bfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011c00:	d0ed      	beq.n	8011bde <_dtoa_r+0xab6>
 8011c02:	9a01      	ldr	r2, [sp, #4]
 8011c04:	f109 0301 	add.w	r3, r9, #1
 8011c08:	7013      	strb	r3, [r2, #0]
 8011c0a:	e73d      	b.n	8011a88 <_dtoa_r+0x960>
 8011c0c:	9b04      	ldr	r3, [sp, #16]
 8011c0e:	9a08      	ldr	r2, [sp, #32]
 8011c10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011c14:	4293      	cmp	r3, r2
 8011c16:	d043      	beq.n	8011ca0 <_dtoa_r+0xb78>
 8011c18:	4651      	mov	r1, sl
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	220a      	movs	r2, #10
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f000 f9d6 	bl	8011fd0 <__multadd>
 8011c24:	45b8      	cmp	r8, r7
 8011c26:	4682      	mov	sl, r0
 8011c28:	f04f 0300 	mov.w	r3, #0
 8011c2c:	f04f 020a 	mov.w	r2, #10
 8011c30:	4641      	mov	r1, r8
 8011c32:	4620      	mov	r0, r4
 8011c34:	d107      	bne.n	8011c46 <_dtoa_r+0xb1e>
 8011c36:	f000 f9cb 	bl	8011fd0 <__multadd>
 8011c3a:	4680      	mov	r8, r0
 8011c3c:	4607      	mov	r7, r0
 8011c3e:	9b04      	ldr	r3, [sp, #16]
 8011c40:	3301      	adds	r3, #1
 8011c42:	9304      	str	r3, [sp, #16]
 8011c44:	e775      	b.n	8011b32 <_dtoa_r+0xa0a>
 8011c46:	f000 f9c3 	bl	8011fd0 <__multadd>
 8011c4a:	4639      	mov	r1, r7
 8011c4c:	4680      	mov	r8, r0
 8011c4e:	2300      	movs	r3, #0
 8011c50:	220a      	movs	r2, #10
 8011c52:	4620      	mov	r0, r4
 8011c54:	f000 f9bc 	bl	8011fd0 <__multadd>
 8011c58:	4607      	mov	r7, r0
 8011c5a:	e7f0      	b.n	8011c3e <_dtoa_r+0xb16>
 8011c5c:	9b04      	ldr	r3, [sp, #16]
 8011c5e:	9301      	str	r3, [sp, #4]
 8011c60:	9d00      	ldr	r5, [sp, #0]
 8011c62:	4631      	mov	r1, r6
 8011c64:	4650      	mov	r0, sl
 8011c66:	f7ff f9d6 	bl	8011016 <quorem>
 8011c6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011c6e:	9b00      	ldr	r3, [sp, #0]
 8011c70:	f805 9b01 	strb.w	r9, [r5], #1
 8011c74:	1aea      	subs	r2, r5, r3
 8011c76:	9b01      	ldr	r3, [sp, #4]
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	dd07      	ble.n	8011c8c <_dtoa_r+0xb64>
 8011c7c:	4651      	mov	r1, sl
 8011c7e:	2300      	movs	r3, #0
 8011c80:	220a      	movs	r2, #10
 8011c82:	4620      	mov	r0, r4
 8011c84:	f000 f9a4 	bl	8011fd0 <__multadd>
 8011c88:	4682      	mov	sl, r0
 8011c8a:	e7ea      	b.n	8011c62 <_dtoa_r+0xb3a>
 8011c8c:	9b01      	ldr	r3, [sp, #4]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	bfc8      	it	gt
 8011c92:	461d      	movgt	r5, r3
 8011c94:	9b00      	ldr	r3, [sp, #0]
 8011c96:	bfd8      	it	le
 8011c98:	2501      	movle	r5, #1
 8011c9a:	441d      	add	r5, r3
 8011c9c:	f04f 0800 	mov.w	r8, #0
 8011ca0:	4651      	mov	r1, sl
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f000 fb41 	bl	801232c <__lshift>
 8011caa:	4631      	mov	r1, r6
 8011cac:	4682      	mov	sl, r0
 8011cae:	f000 fba9 	bl	8012404 <__mcmp>
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	dc96      	bgt.n	8011be4 <_dtoa_r+0xabc>
 8011cb6:	d102      	bne.n	8011cbe <_dtoa_r+0xb96>
 8011cb8:	f019 0f01 	tst.w	r9, #1
 8011cbc:	d192      	bne.n	8011be4 <_dtoa_r+0xabc>
 8011cbe:	462b      	mov	r3, r5
 8011cc0:	461d      	mov	r5, r3
 8011cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cc6:	2a30      	cmp	r2, #48	; 0x30
 8011cc8:	d0fa      	beq.n	8011cc0 <_dtoa_r+0xb98>
 8011cca:	e6dd      	b.n	8011a88 <_dtoa_r+0x960>
 8011ccc:	9a00      	ldr	r2, [sp, #0]
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d189      	bne.n	8011be6 <_dtoa_r+0xabe>
 8011cd2:	f10b 0b01 	add.w	fp, fp, #1
 8011cd6:	2331      	movs	r3, #49	; 0x31
 8011cd8:	e796      	b.n	8011c08 <_dtoa_r+0xae0>
 8011cda:	4b0a      	ldr	r3, [pc, #40]	; (8011d04 <_dtoa_r+0xbdc>)
 8011cdc:	f7ff ba99 	b.w	8011212 <_dtoa_r+0xea>
 8011ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f47f aa6d 	bne.w	80111c2 <_dtoa_r+0x9a>
 8011ce8:	4b07      	ldr	r3, [pc, #28]	; (8011d08 <_dtoa_r+0xbe0>)
 8011cea:	f7ff ba92 	b.w	8011212 <_dtoa_r+0xea>
 8011cee:	9b01      	ldr	r3, [sp, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	dcb5      	bgt.n	8011c60 <_dtoa_r+0xb38>
 8011cf4:	9b07      	ldr	r3, [sp, #28]
 8011cf6:	2b02      	cmp	r3, #2
 8011cf8:	f73f aeb1 	bgt.w	8011a5e <_dtoa_r+0x936>
 8011cfc:	e7b0      	b.n	8011c60 <_dtoa_r+0xb38>
 8011cfe:	bf00      	nop
 8011d00:	0801362c 	.word	0x0801362c
 8011d04:	0801358c 	.word	0x0801358c
 8011d08:	080135b0 	.word	0x080135b0

08011d0c <_free_r>:
 8011d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d0e:	2900      	cmp	r1, #0
 8011d10:	d044      	beq.n	8011d9c <_free_r+0x90>
 8011d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d16:	9001      	str	r0, [sp, #4]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8011d1e:	bfb8      	it	lt
 8011d20:	18e4      	addlt	r4, r4, r3
 8011d22:	f000 f8e7 	bl	8011ef4 <__malloc_lock>
 8011d26:	4a1e      	ldr	r2, [pc, #120]	; (8011da0 <_free_r+0x94>)
 8011d28:	9801      	ldr	r0, [sp, #4]
 8011d2a:	6813      	ldr	r3, [r2, #0]
 8011d2c:	b933      	cbnz	r3, 8011d3c <_free_r+0x30>
 8011d2e:	6063      	str	r3, [r4, #4]
 8011d30:	6014      	str	r4, [r2, #0]
 8011d32:	b003      	add	sp, #12
 8011d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d38:	f000 b8e2 	b.w	8011f00 <__malloc_unlock>
 8011d3c:	42a3      	cmp	r3, r4
 8011d3e:	d908      	bls.n	8011d52 <_free_r+0x46>
 8011d40:	6825      	ldr	r5, [r4, #0]
 8011d42:	1961      	adds	r1, r4, r5
 8011d44:	428b      	cmp	r3, r1
 8011d46:	bf01      	itttt	eq
 8011d48:	6819      	ldreq	r1, [r3, #0]
 8011d4a:	685b      	ldreq	r3, [r3, #4]
 8011d4c:	1949      	addeq	r1, r1, r5
 8011d4e:	6021      	streq	r1, [r4, #0]
 8011d50:	e7ed      	b.n	8011d2e <_free_r+0x22>
 8011d52:	461a      	mov	r2, r3
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	b10b      	cbz	r3, 8011d5c <_free_r+0x50>
 8011d58:	42a3      	cmp	r3, r4
 8011d5a:	d9fa      	bls.n	8011d52 <_free_r+0x46>
 8011d5c:	6811      	ldr	r1, [r2, #0]
 8011d5e:	1855      	adds	r5, r2, r1
 8011d60:	42a5      	cmp	r5, r4
 8011d62:	d10b      	bne.n	8011d7c <_free_r+0x70>
 8011d64:	6824      	ldr	r4, [r4, #0]
 8011d66:	4421      	add	r1, r4
 8011d68:	1854      	adds	r4, r2, r1
 8011d6a:	42a3      	cmp	r3, r4
 8011d6c:	6011      	str	r1, [r2, #0]
 8011d6e:	d1e0      	bne.n	8011d32 <_free_r+0x26>
 8011d70:	681c      	ldr	r4, [r3, #0]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	6053      	str	r3, [r2, #4]
 8011d76:	440c      	add	r4, r1
 8011d78:	6014      	str	r4, [r2, #0]
 8011d7a:	e7da      	b.n	8011d32 <_free_r+0x26>
 8011d7c:	d902      	bls.n	8011d84 <_free_r+0x78>
 8011d7e:	230c      	movs	r3, #12
 8011d80:	6003      	str	r3, [r0, #0]
 8011d82:	e7d6      	b.n	8011d32 <_free_r+0x26>
 8011d84:	6825      	ldr	r5, [r4, #0]
 8011d86:	1961      	adds	r1, r4, r5
 8011d88:	428b      	cmp	r3, r1
 8011d8a:	bf04      	itt	eq
 8011d8c:	6819      	ldreq	r1, [r3, #0]
 8011d8e:	685b      	ldreq	r3, [r3, #4]
 8011d90:	6063      	str	r3, [r4, #4]
 8011d92:	bf04      	itt	eq
 8011d94:	1949      	addeq	r1, r1, r5
 8011d96:	6021      	streq	r1, [r4, #0]
 8011d98:	6054      	str	r4, [r2, #4]
 8011d9a:	e7ca      	b.n	8011d32 <_free_r+0x26>
 8011d9c:	b003      	add	sp, #12
 8011d9e:	bd30      	pop	{r4, r5, pc}
 8011da0:	20005d28 	.word	0x20005d28

08011da4 <malloc>:
 8011da4:	4b02      	ldr	r3, [pc, #8]	; (8011db0 <malloc+0xc>)
 8011da6:	4601      	mov	r1, r0
 8011da8:	6818      	ldr	r0, [r3, #0]
 8011daa:	f000 b823 	b.w	8011df4 <_malloc_r>
 8011dae:	bf00      	nop
 8011db0:	200001e0 	.word	0x200001e0

08011db4 <sbrk_aligned>:
 8011db4:	b570      	push	{r4, r5, r6, lr}
 8011db6:	4e0e      	ldr	r6, [pc, #56]	; (8011df0 <sbrk_aligned+0x3c>)
 8011db8:	460c      	mov	r4, r1
 8011dba:	6831      	ldr	r1, [r6, #0]
 8011dbc:	4605      	mov	r5, r0
 8011dbe:	b911      	cbnz	r1, 8011dc6 <sbrk_aligned+0x12>
 8011dc0:	f000 fe40 	bl	8012a44 <_sbrk_r>
 8011dc4:	6030      	str	r0, [r6, #0]
 8011dc6:	4621      	mov	r1, r4
 8011dc8:	4628      	mov	r0, r5
 8011dca:	f000 fe3b 	bl	8012a44 <_sbrk_r>
 8011dce:	1c43      	adds	r3, r0, #1
 8011dd0:	d00a      	beq.n	8011de8 <sbrk_aligned+0x34>
 8011dd2:	1cc4      	adds	r4, r0, #3
 8011dd4:	f024 0403 	bic.w	r4, r4, #3
 8011dd8:	42a0      	cmp	r0, r4
 8011dda:	d007      	beq.n	8011dec <sbrk_aligned+0x38>
 8011ddc:	1a21      	subs	r1, r4, r0
 8011dde:	4628      	mov	r0, r5
 8011de0:	f000 fe30 	bl	8012a44 <_sbrk_r>
 8011de4:	3001      	adds	r0, #1
 8011de6:	d101      	bne.n	8011dec <sbrk_aligned+0x38>
 8011de8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011dec:	4620      	mov	r0, r4
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	20005d2c 	.word	0x20005d2c

08011df4 <_malloc_r>:
 8011df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011df8:	1ccd      	adds	r5, r1, #3
 8011dfa:	f025 0503 	bic.w	r5, r5, #3
 8011dfe:	3508      	adds	r5, #8
 8011e00:	2d0c      	cmp	r5, #12
 8011e02:	bf38      	it	cc
 8011e04:	250c      	movcc	r5, #12
 8011e06:	2d00      	cmp	r5, #0
 8011e08:	4607      	mov	r7, r0
 8011e0a:	db01      	blt.n	8011e10 <_malloc_r+0x1c>
 8011e0c:	42a9      	cmp	r1, r5
 8011e0e:	d905      	bls.n	8011e1c <_malloc_r+0x28>
 8011e10:	230c      	movs	r3, #12
 8011e12:	603b      	str	r3, [r7, #0]
 8011e14:	2600      	movs	r6, #0
 8011e16:	4630      	mov	r0, r6
 8011e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011ef0 <_malloc_r+0xfc>
 8011e20:	f000 f868 	bl	8011ef4 <__malloc_lock>
 8011e24:	f8d8 3000 	ldr.w	r3, [r8]
 8011e28:	461c      	mov	r4, r3
 8011e2a:	bb5c      	cbnz	r4, 8011e84 <_malloc_r+0x90>
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	4638      	mov	r0, r7
 8011e30:	f7ff ffc0 	bl	8011db4 <sbrk_aligned>
 8011e34:	1c43      	adds	r3, r0, #1
 8011e36:	4604      	mov	r4, r0
 8011e38:	d155      	bne.n	8011ee6 <_malloc_r+0xf2>
 8011e3a:	f8d8 4000 	ldr.w	r4, [r8]
 8011e3e:	4626      	mov	r6, r4
 8011e40:	2e00      	cmp	r6, #0
 8011e42:	d145      	bne.n	8011ed0 <_malloc_r+0xdc>
 8011e44:	2c00      	cmp	r4, #0
 8011e46:	d048      	beq.n	8011eda <_malloc_r+0xe6>
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	4631      	mov	r1, r6
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	eb04 0903 	add.w	r9, r4, r3
 8011e52:	f000 fdf7 	bl	8012a44 <_sbrk_r>
 8011e56:	4581      	cmp	r9, r0
 8011e58:	d13f      	bne.n	8011eda <_malloc_r+0xe6>
 8011e5a:	6821      	ldr	r1, [r4, #0]
 8011e5c:	1a6d      	subs	r5, r5, r1
 8011e5e:	4629      	mov	r1, r5
 8011e60:	4638      	mov	r0, r7
 8011e62:	f7ff ffa7 	bl	8011db4 <sbrk_aligned>
 8011e66:	3001      	adds	r0, #1
 8011e68:	d037      	beq.n	8011eda <_malloc_r+0xe6>
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	442b      	add	r3, r5
 8011e6e:	6023      	str	r3, [r4, #0]
 8011e70:	f8d8 3000 	ldr.w	r3, [r8]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d038      	beq.n	8011eea <_malloc_r+0xf6>
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	42a2      	cmp	r2, r4
 8011e7c:	d12b      	bne.n	8011ed6 <_malloc_r+0xe2>
 8011e7e:	2200      	movs	r2, #0
 8011e80:	605a      	str	r2, [r3, #4]
 8011e82:	e00f      	b.n	8011ea4 <_malloc_r+0xb0>
 8011e84:	6822      	ldr	r2, [r4, #0]
 8011e86:	1b52      	subs	r2, r2, r5
 8011e88:	d41f      	bmi.n	8011eca <_malloc_r+0xd6>
 8011e8a:	2a0b      	cmp	r2, #11
 8011e8c:	d917      	bls.n	8011ebe <_malloc_r+0xca>
 8011e8e:	1961      	adds	r1, r4, r5
 8011e90:	42a3      	cmp	r3, r4
 8011e92:	6025      	str	r5, [r4, #0]
 8011e94:	bf18      	it	ne
 8011e96:	6059      	strne	r1, [r3, #4]
 8011e98:	6863      	ldr	r3, [r4, #4]
 8011e9a:	bf08      	it	eq
 8011e9c:	f8c8 1000 	streq.w	r1, [r8]
 8011ea0:	5162      	str	r2, [r4, r5]
 8011ea2:	604b      	str	r3, [r1, #4]
 8011ea4:	4638      	mov	r0, r7
 8011ea6:	f104 060b 	add.w	r6, r4, #11
 8011eaa:	f000 f829 	bl	8011f00 <__malloc_unlock>
 8011eae:	f026 0607 	bic.w	r6, r6, #7
 8011eb2:	1d23      	adds	r3, r4, #4
 8011eb4:	1af2      	subs	r2, r6, r3
 8011eb6:	d0ae      	beq.n	8011e16 <_malloc_r+0x22>
 8011eb8:	1b9b      	subs	r3, r3, r6
 8011eba:	50a3      	str	r3, [r4, r2]
 8011ebc:	e7ab      	b.n	8011e16 <_malloc_r+0x22>
 8011ebe:	42a3      	cmp	r3, r4
 8011ec0:	6862      	ldr	r2, [r4, #4]
 8011ec2:	d1dd      	bne.n	8011e80 <_malloc_r+0x8c>
 8011ec4:	f8c8 2000 	str.w	r2, [r8]
 8011ec8:	e7ec      	b.n	8011ea4 <_malloc_r+0xb0>
 8011eca:	4623      	mov	r3, r4
 8011ecc:	6864      	ldr	r4, [r4, #4]
 8011ece:	e7ac      	b.n	8011e2a <_malloc_r+0x36>
 8011ed0:	4634      	mov	r4, r6
 8011ed2:	6876      	ldr	r6, [r6, #4]
 8011ed4:	e7b4      	b.n	8011e40 <_malloc_r+0x4c>
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	e7cc      	b.n	8011e74 <_malloc_r+0x80>
 8011eda:	230c      	movs	r3, #12
 8011edc:	603b      	str	r3, [r7, #0]
 8011ede:	4638      	mov	r0, r7
 8011ee0:	f000 f80e 	bl	8011f00 <__malloc_unlock>
 8011ee4:	e797      	b.n	8011e16 <_malloc_r+0x22>
 8011ee6:	6025      	str	r5, [r4, #0]
 8011ee8:	e7dc      	b.n	8011ea4 <_malloc_r+0xb0>
 8011eea:	605b      	str	r3, [r3, #4]
 8011eec:	deff      	udf	#255	; 0xff
 8011eee:	bf00      	nop
 8011ef0:	20005d28 	.word	0x20005d28

08011ef4 <__malloc_lock>:
 8011ef4:	4801      	ldr	r0, [pc, #4]	; (8011efc <__malloc_lock+0x8>)
 8011ef6:	f7ff b87e 	b.w	8010ff6 <__retarget_lock_acquire_recursive>
 8011efa:	bf00      	nop
 8011efc:	20005d24 	.word	0x20005d24

08011f00 <__malloc_unlock>:
 8011f00:	4801      	ldr	r0, [pc, #4]	; (8011f08 <__malloc_unlock+0x8>)
 8011f02:	f7ff b879 	b.w	8010ff8 <__retarget_lock_release_recursive>
 8011f06:	bf00      	nop
 8011f08:	20005d24 	.word	0x20005d24

08011f0c <_Balloc>:
 8011f0c:	b570      	push	{r4, r5, r6, lr}
 8011f0e:	69c6      	ldr	r6, [r0, #28]
 8011f10:	4604      	mov	r4, r0
 8011f12:	460d      	mov	r5, r1
 8011f14:	b976      	cbnz	r6, 8011f34 <_Balloc+0x28>
 8011f16:	2010      	movs	r0, #16
 8011f18:	f7ff ff44 	bl	8011da4 <malloc>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	61e0      	str	r0, [r4, #28]
 8011f20:	b920      	cbnz	r0, 8011f2c <_Balloc+0x20>
 8011f22:	4b18      	ldr	r3, [pc, #96]	; (8011f84 <_Balloc+0x78>)
 8011f24:	4818      	ldr	r0, [pc, #96]	; (8011f88 <_Balloc+0x7c>)
 8011f26:	216b      	movs	r1, #107	; 0x6b
 8011f28:	f000 fd9c 	bl	8012a64 <__assert_func>
 8011f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f30:	6006      	str	r6, [r0, #0]
 8011f32:	60c6      	str	r6, [r0, #12]
 8011f34:	69e6      	ldr	r6, [r4, #28]
 8011f36:	68f3      	ldr	r3, [r6, #12]
 8011f38:	b183      	cbz	r3, 8011f5c <_Balloc+0x50>
 8011f3a:	69e3      	ldr	r3, [r4, #28]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f42:	b9b8      	cbnz	r0, 8011f74 <_Balloc+0x68>
 8011f44:	2101      	movs	r1, #1
 8011f46:	fa01 f605 	lsl.w	r6, r1, r5
 8011f4a:	1d72      	adds	r2, r6, #5
 8011f4c:	0092      	lsls	r2, r2, #2
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 fda6 	bl	8012aa0 <_calloc_r>
 8011f54:	b160      	cbz	r0, 8011f70 <_Balloc+0x64>
 8011f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011f5a:	e00e      	b.n	8011f7a <_Balloc+0x6e>
 8011f5c:	2221      	movs	r2, #33	; 0x21
 8011f5e:	2104      	movs	r1, #4
 8011f60:	4620      	mov	r0, r4
 8011f62:	f000 fd9d 	bl	8012aa0 <_calloc_r>
 8011f66:	69e3      	ldr	r3, [r4, #28]
 8011f68:	60f0      	str	r0, [r6, #12]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1e4      	bne.n	8011f3a <_Balloc+0x2e>
 8011f70:	2000      	movs	r0, #0
 8011f72:	bd70      	pop	{r4, r5, r6, pc}
 8011f74:	6802      	ldr	r2, [r0, #0]
 8011f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f80:	e7f7      	b.n	8011f72 <_Balloc+0x66>
 8011f82:	bf00      	nop
 8011f84:	080135bd 	.word	0x080135bd
 8011f88:	0801363d 	.word	0x0801363d

08011f8c <_Bfree>:
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	69c6      	ldr	r6, [r0, #28]
 8011f90:	4605      	mov	r5, r0
 8011f92:	460c      	mov	r4, r1
 8011f94:	b976      	cbnz	r6, 8011fb4 <_Bfree+0x28>
 8011f96:	2010      	movs	r0, #16
 8011f98:	f7ff ff04 	bl	8011da4 <malloc>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	61e8      	str	r0, [r5, #28]
 8011fa0:	b920      	cbnz	r0, 8011fac <_Bfree+0x20>
 8011fa2:	4b09      	ldr	r3, [pc, #36]	; (8011fc8 <_Bfree+0x3c>)
 8011fa4:	4809      	ldr	r0, [pc, #36]	; (8011fcc <_Bfree+0x40>)
 8011fa6:	218f      	movs	r1, #143	; 0x8f
 8011fa8:	f000 fd5c 	bl	8012a64 <__assert_func>
 8011fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fb0:	6006      	str	r6, [r0, #0]
 8011fb2:	60c6      	str	r6, [r0, #12]
 8011fb4:	b13c      	cbz	r4, 8011fc6 <_Bfree+0x3a>
 8011fb6:	69eb      	ldr	r3, [r5, #28]
 8011fb8:	6862      	ldr	r2, [r4, #4]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011fc0:	6021      	str	r1, [r4, #0]
 8011fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}
 8011fc8:	080135bd 	.word	0x080135bd
 8011fcc:	0801363d 	.word	0x0801363d

08011fd0 <__multadd>:
 8011fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd4:	690d      	ldr	r5, [r1, #16]
 8011fd6:	4607      	mov	r7, r0
 8011fd8:	460c      	mov	r4, r1
 8011fda:	461e      	mov	r6, r3
 8011fdc:	f101 0c14 	add.w	ip, r1, #20
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8011fe6:	b299      	uxth	r1, r3
 8011fe8:	fb02 6101 	mla	r1, r2, r1, r6
 8011fec:	0c1e      	lsrs	r6, r3, #16
 8011fee:	0c0b      	lsrs	r3, r1, #16
 8011ff0:	fb02 3306 	mla	r3, r2, r6, r3
 8011ff4:	b289      	uxth	r1, r1
 8011ff6:	3001      	adds	r0, #1
 8011ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ffc:	4285      	cmp	r5, r0
 8011ffe:	f84c 1b04 	str.w	r1, [ip], #4
 8012002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012006:	dcec      	bgt.n	8011fe2 <__multadd+0x12>
 8012008:	b30e      	cbz	r6, 801204e <__multadd+0x7e>
 801200a:	68a3      	ldr	r3, [r4, #8]
 801200c:	42ab      	cmp	r3, r5
 801200e:	dc19      	bgt.n	8012044 <__multadd+0x74>
 8012010:	6861      	ldr	r1, [r4, #4]
 8012012:	4638      	mov	r0, r7
 8012014:	3101      	adds	r1, #1
 8012016:	f7ff ff79 	bl	8011f0c <_Balloc>
 801201a:	4680      	mov	r8, r0
 801201c:	b928      	cbnz	r0, 801202a <__multadd+0x5a>
 801201e:	4602      	mov	r2, r0
 8012020:	4b0c      	ldr	r3, [pc, #48]	; (8012054 <__multadd+0x84>)
 8012022:	480d      	ldr	r0, [pc, #52]	; (8012058 <__multadd+0x88>)
 8012024:	21ba      	movs	r1, #186	; 0xba
 8012026:	f000 fd1d 	bl	8012a64 <__assert_func>
 801202a:	6922      	ldr	r2, [r4, #16]
 801202c:	3202      	adds	r2, #2
 801202e:	f104 010c 	add.w	r1, r4, #12
 8012032:	0092      	lsls	r2, r2, #2
 8012034:	300c      	adds	r0, #12
 8012036:	f7fe ffe0 	bl	8010ffa <memcpy>
 801203a:	4621      	mov	r1, r4
 801203c:	4638      	mov	r0, r7
 801203e:	f7ff ffa5 	bl	8011f8c <_Bfree>
 8012042:	4644      	mov	r4, r8
 8012044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012048:	3501      	adds	r5, #1
 801204a:	615e      	str	r6, [r3, #20]
 801204c:	6125      	str	r5, [r4, #16]
 801204e:	4620      	mov	r0, r4
 8012050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012054:	0801362c 	.word	0x0801362c
 8012058:	0801363d 	.word	0x0801363d

0801205c <__hi0bits>:
 801205c:	0c03      	lsrs	r3, r0, #16
 801205e:	041b      	lsls	r3, r3, #16
 8012060:	b9d3      	cbnz	r3, 8012098 <__hi0bits+0x3c>
 8012062:	0400      	lsls	r0, r0, #16
 8012064:	2310      	movs	r3, #16
 8012066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801206a:	bf04      	itt	eq
 801206c:	0200      	lsleq	r0, r0, #8
 801206e:	3308      	addeq	r3, #8
 8012070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012074:	bf04      	itt	eq
 8012076:	0100      	lsleq	r0, r0, #4
 8012078:	3304      	addeq	r3, #4
 801207a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801207e:	bf04      	itt	eq
 8012080:	0080      	lsleq	r0, r0, #2
 8012082:	3302      	addeq	r3, #2
 8012084:	2800      	cmp	r0, #0
 8012086:	db05      	blt.n	8012094 <__hi0bits+0x38>
 8012088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801208c:	f103 0301 	add.w	r3, r3, #1
 8012090:	bf08      	it	eq
 8012092:	2320      	moveq	r3, #32
 8012094:	4618      	mov	r0, r3
 8012096:	4770      	bx	lr
 8012098:	2300      	movs	r3, #0
 801209a:	e7e4      	b.n	8012066 <__hi0bits+0xa>

0801209c <__lo0bits>:
 801209c:	6803      	ldr	r3, [r0, #0]
 801209e:	f013 0207 	ands.w	r2, r3, #7
 80120a2:	d00c      	beq.n	80120be <__lo0bits+0x22>
 80120a4:	07d9      	lsls	r1, r3, #31
 80120a6:	d422      	bmi.n	80120ee <__lo0bits+0x52>
 80120a8:	079a      	lsls	r2, r3, #30
 80120aa:	bf49      	itett	mi
 80120ac:	085b      	lsrmi	r3, r3, #1
 80120ae:	089b      	lsrpl	r3, r3, #2
 80120b0:	6003      	strmi	r3, [r0, #0]
 80120b2:	2201      	movmi	r2, #1
 80120b4:	bf5c      	itt	pl
 80120b6:	6003      	strpl	r3, [r0, #0]
 80120b8:	2202      	movpl	r2, #2
 80120ba:	4610      	mov	r0, r2
 80120bc:	4770      	bx	lr
 80120be:	b299      	uxth	r1, r3
 80120c0:	b909      	cbnz	r1, 80120c6 <__lo0bits+0x2a>
 80120c2:	0c1b      	lsrs	r3, r3, #16
 80120c4:	2210      	movs	r2, #16
 80120c6:	b2d9      	uxtb	r1, r3
 80120c8:	b909      	cbnz	r1, 80120ce <__lo0bits+0x32>
 80120ca:	3208      	adds	r2, #8
 80120cc:	0a1b      	lsrs	r3, r3, #8
 80120ce:	0719      	lsls	r1, r3, #28
 80120d0:	bf04      	itt	eq
 80120d2:	091b      	lsreq	r3, r3, #4
 80120d4:	3204      	addeq	r2, #4
 80120d6:	0799      	lsls	r1, r3, #30
 80120d8:	bf04      	itt	eq
 80120da:	089b      	lsreq	r3, r3, #2
 80120dc:	3202      	addeq	r2, #2
 80120de:	07d9      	lsls	r1, r3, #31
 80120e0:	d403      	bmi.n	80120ea <__lo0bits+0x4e>
 80120e2:	085b      	lsrs	r3, r3, #1
 80120e4:	f102 0201 	add.w	r2, r2, #1
 80120e8:	d003      	beq.n	80120f2 <__lo0bits+0x56>
 80120ea:	6003      	str	r3, [r0, #0]
 80120ec:	e7e5      	b.n	80120ba <__lo0bits+0x1e>
 80120ee:	2200      	movs	r2, #0
 80120f0:	e7e3      	b.n	80120ba <__lo0bits+0x1e>
 80120f2:	2220      	movs	r2, #32
 80120f4:	e7e1      	b.n	80120ba <__lo0bits+0x1e>
	...

080120f8 <__i2b>:
 80120f8:	b510      	push	{r4, lr}
 80120fa:	460c      	mov	r4, r1
 80120fc:	2101      	movs	r1, #1
 80120fe:	f7ff ff05 	bl	8011f0c <_Balloc>
 8012102:	4602      	mov	r2, r0
 8012104:	b928      	cbnz	r0, 8012112 <__i2b+0x1a>
 8012106:	4b05      	ldr	r3, [pc, #20]	; (801211c <__i2b+0x24>)
 8012108:	4805      	ldr	r0, [pc, #20]	; (8012120 <__i2b+0x28>)
 801210a:	f240 1145 	movw	r1, #325	; 0x145
 801210e:	f000 fca9 	bl	8012a64 <__assert_func>
 8012112:	2301      	movs	r3, #1
 8012114:	6144      	str	r4, [r0, #20]
 8012116:	6103      	str	r3, [r0, #16]
 8012118:	bd10      	pop	{r4, pc}
 801211a:	bf00      	nop
 801211c:	0801362c 	.word	0x0801362c
 8012120:	0801363d 	.word	0x0801363d

08012124 <__multiply>:
 8012124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012128:	4691      	mov	r9, r2
 801212a:	690a      	ldr	r2, [r1, #16]
 801212c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012130:	429a      	cmp	r2, r3
 8012132:	bfb8      	it	lt
 8012134:	460b      	movlt	r3, r1
 8012136:	460c      	mov	r4, r1
 8012138:	bfbc      	itt	lt
 801213a:	464c      	movlt	r4, r9
 801213c:	4699      	movlt	r9, r3
 801213e:	6927      	ldr	r7, [r4, #16]
 8012140:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012144:	68a3      	ldr	r3, [r4, #8]
 8012146:	6861      	ldr	r1, [r4, #4]
 8012148:	eb07 060a 	add.w	r6, r7, sl
 801214c:	42b3      	cmp	r3, r6
 801214e:	b085      	sub	sp, #20
 8012150:	bfb8      	it	lt
 8012152:	3101      	addlt	r1, #1
 8012154:	f7ff feda 	bl	8011f0c <_Balloc>
 8012158:	b930      	cbnz	r0, 8012168 <__multiply+0x44>
 801215a:	4602      	mov	r2, r0
 801215c:	4b44      	ldr	r3, [pc, #272]	; (8012270 <__multiply+0x14c>)
 801215e:	4845      	ldr	r0, [pc, #276]	; (8012274 <__multiply+0x150>)
 8012160:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012164:	f000 fc7e 	bl	8012a64 <__assert_func>
 8012168:	f100 0514 	add.w	r5, r0, #20
 801216c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012170:	462b      	mov	r3, r5
 8012172:	2200      	movs	r2, #0
 8012174:	4543      	cmp	r3, r8
 8012176:	d321      	bcc.n	80121bc <__multiply+0x98>
 8012178:	f104 0314 	add.w	r3, r4, #20
 801217c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012180:	f109 0314 	add.w	r3, r9, #20
 8012184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012188:	9202      	str	r2, [sp, #8]
 801218a:	1b3a      	subs	r2, r7, r4
 801218c:	3a15      	subs	r2, #21
 801218e:	f022 0203 	bic.w	r2, r2, #3
 8012192:	3204      	adds	r2, #4
 8012194:	f104 0115 	add.w	r1, r4, #21
 8012198:	428f      	cmp	r7, r1
 801219a:	bf38      	it	cc
 801219c:	2204      	movcc	r2, #4
 801219e:	9201      	str	r2, [sp, #4]
 80121a0:	9a02      	ldr	r2, [sp, #8]
 80121a2:	9303      	str	r3, [sp, #12]
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d80c      	bhi.n	80121c2 <__multiply+0x9e>
 80121a8:	2e00      	cmp	r6, #0
 80121aa:	dd03      	ble.n	80121b4 <__multiply+0x90>
 80121ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d05b      	beq.n	801226c <__multiply+0x148>
 80121b4:	6106      	str	r6, [r0, #16]
 80121b6:	b005      	add	sp, #20
 80121b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121bc:	f843 2b04 	str.w	r2, [r3], #4
 80121c0:	e7d8      	b.n	8012174 <__multiply+0x50>
 80121c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80121c6:	f1ba 0f00 	cmp.w	sl, #0
 80121ca:	d024      	beq.n	8012216 <__multiply+0xf2>
 80121cc:	f104 0e14 	add.w	lr, r4, #20
 80121d0:	46a9      	mov	r9, r5
 80121d2:	f04f 0c00 	mov.w	ip, #0
 80121d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80121da:	f8d9 1000 	ldr.w	r1, [r9]
 80121de:	fa1f fb82 	uxth.w	fp, r2
 80121e2:	b289      	uxth	r1, r1
 80121e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80121e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80121ec:	f8d9 2000 	ldr.w	r2, [r9]
 80121f0:	4461      	add	r1, ip
 80121f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80121f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80121fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80121fe:	b289      	uxth	r1, r1
 8012200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012204:	4577      	cmp	r7, lr
 8012206:	f849 1b04 	str.w	r1, [r9], #4
 801220a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801220e:	d8e2      	bhi.n	80121d6 <__multiply+0xb2>
 8012210:	9a01      	ldr	r2, [sp, #4]
 8012212:	f845 c002 	str.w	ip, [r5, r2]
 8012216:	9a03      	ldr	r2, [sp, #12]
 8012218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801221c:	3304      	adds	r3, #4
 801221e:	f1b9 0f00 	cmp.w	r9, #0
 8012222:	d021      	beq.n	8012268 <__multiply+0x144>
 8012224:	6829      	ldr	r1, [r5, #0]
 8012226:	f104 0c14 	add.w	ip, r4, #20
 801222a:	46ae      	mov	lr, r5
 801222c:	f04f 0a00 	mov.w	sl, #0
 8012230:	f8bc b000 	ldrh.w	fp, [ip]
 8012234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012238:	fb09 220b 	mla	r2, r9, fp, r2
 801223c:	4452      	add	r2, sl
 801223e:	b289      	uxth	r1, r1
 8012240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012244:	f84e 1b04 	str.w	r1, [lr], #4
 8012248:	f85c 1b04 	ldr.w	r1, [ip], #4
 801224c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012250:	f8be 1000 	ldrh.w	r1, [lr]
 8012254:	fb09 110a 	mla	r1, r9, sl, r1
 8012258:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801225c:	4567      	cmp	r7, ip
 801225e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012262:	d8e5      	bhi.n	8012230 <__multiply+0x10c>
 8012264:	9a01      	ldr	r2, [sp, #4]
 8012266:	50a9      	str	r1, [r5, r2]
 8012268:	3504      	adds	r5, #4
 801226a:	e799      	b.n	80121a0 <__multiply+0x7c>
 801226c:	3e01      	subs	r6, #1
 801226e:	e79b      	b.n	80121a8 <__multiply+0x84>
 8012270:	0801362c 	.word	0x0801362c
 8012274:	0801363d 	.word	0x0801363d

08012278 <__pow5mult>:
 8012278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801227c:	4615      	mov	r5, r2
 801227e:	f012 0203 	ands.w	r2, r2, #3
 8012282:	4606      	mov	r6, r0
 8012284:	460f      	mov	r7, r1
 8012286:	d007      	beq.n	8012298 <__pow5mult+0x20>
 8012288:	4c25      	ldr	r4, [pc, #148]	; (8012320 <__pow5mult+0xa8>)
 801228a:	3a01      	subs	r2, #1
 801228c:	2300      	movs	r3, #0
 801228e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012292:	f7ff fe9d 	bl	8011fd0 <__multadd>
 8012296:	4607      	mov	r7, r0
 8012298:	10ad      	asrs	r5, r5, #2
 801229a:	d03d      	beq.n	8012318 <__pow5mult+0xa0>
 801229c:	69f4      	ldr	r4, [r6, #28]
 801229e:	b97c      	cbnz	r4, 80122c0 <__pow5mult+0x48>
 80122a0:	2010      	movs	r0, #16
 80122a2:	f7ff fd7f 	bl	8011da4 <malloc>
 80122a6:	4602      	mov	r2, r0
 80122a8:	61f0      	str	r0, [r6, #28]
 80122aa:	b928      	cbnz	r0, 80122b8 <__pow5mult+0x40>
 80122ac:	4b1d      	ldr	r3, [pc, #116]	; (8012324 <__pow5mult+0xac>)
 80122ae:	481e      	ldr	r0, [pc, #120]	; (8012328 <__pow5mult+0xb0>)
 80122b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80122b4:	f000 fbd6 	bl	8012a64 <__assert_func>
 80122b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80122bc:	6004      	str	r4, [r0, #0]
 80122be:	60c4      	str	r4, [r0, #12]
 80122c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80122c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80122c8:	b94c      	cbnz	r4, 80122de <__pow5mult+0x66>
 80122ca:	f240 2171 	movw	r1, #625	; 0x271
 80122ce:	4630      	mov	r0, r6
 80122d0:	f7ff ff12 	bl	80120f8 <__i2b>
 80122d4:	2300      	movs	r3, #0
 80122d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80122da:	4604      	mov	r4, r0
 80122dc:	6003      	str	r3, [r0, #0]
 80122de:	f04f 0900 	mov.w	r9, #0
 80122e2:	07eb      	lsls	r3, r5, #31
 80122e4:	d50a      	bpl.n	80122fc <__pow5mult+0x84>
 80122e6:	4639      	mov	r1, r7
 80122e8:	4622      	mov	r2, r4
 80122ea:	4630      	mov	r0, r6
 80122ec:	f7ff ff1a 	bl	8012124 <__multiply>
 80122f0:	4639      	mov	r1, r7
 80122f2:	4680      	mov	r8, r0
 80122f4:	4630      	mov	r0, r6
 80122f6:	f7ff fe49 	bl	8011f8c <_Bfree>
 80122fa:	4647      	mov	r7, r8
 80122fc:	106d      	asrs	r5, r5, #1
 80122fe:	d00b      	beq.n	8012318 <__pow5mult+0xa0>
 8012300:	6820      	ldr	r0, [r4, #0]
 8012302:	b938      	cbnz	r0, 8012314 <__pow5mult+0x9c>
 8012304:	4622      	mov	r2, r4
 8012306:	4621      	mov	r1, r4
 8012308:	4630      	mov	r0, r6
 801230a:	f7ff ff0b 	bl	8012124 <__multiply>
 801230e:	6020      	str	r0, [r4, #0]
 8012310:	f8c0 9000 	str.w	r9, [r0]
 8012314:	4604      	mov	r4, r0
 8012316:	e7e4      	b.n	80122e2 <__pow5mult+0x6a>
 8012318:	4638      	mov	r0, r7
 801231a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801231e:	bf00      	nop
 8012320:	08013788 	.word	0x08013788
 8012324:	080135bd 	.word	0x080135bd
 8012328:	0801363d 	.word	0x0801363d

0801232c <__lshift>:
 801232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012330:	460c      	mov	r4, r1
 8012332:	6849      	ldr	r1, [r1, #4]
 8012334:	6923      	ldr	r3, [r4, #16]
 8012336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801233a:	68a3      	ldr	r3, [r4, #8]
 801233c:	4607      	mov	r7, r0
 801233e:	4691      	mov	r9, r2
 8012340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012344:	f108 0601 	add.w	r6, r8, #1
 8012348:	42b3      	cmp	r3, r6
 801234a:	db0b      	blt.n	8012364 <__lshift+0x38>
 801234c:	4638      	mov	r0, r7
 801234e:	f7ff fddd 	bl	8011f0c <_Balloc>
 8012352:	4605      	mov	r5, r0
 8012354:	b948      	cbnz	r0, 801236a <__lshift+0x3e>
 8012356:	4602      	mov	r2, r0
 8012358:	4b28      	ldr	r3, [pc, #160]	; (80123fc <__lshift+0xd0>)
 801235a:	4829      	ldr	r0, [pc, #164]	; (8012400 <__lshift+0xd4>)
 801235c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012360:	f000 fb80 	bl	8012a64 <__assert_func>
 8012364:	3101      	adds	r1, #1
 8012366:	005b      	lsls	r3, r3, #1
 8012368:	e7ee      	b.n	8012348 <__lshift+0x1c>
 801236a:	2300      	movs	r3, #0
 801236c:	f100 0114 	add.w	r1, r0, #20
 8012370:	f100 0210 	add.w	r2, r0, #16
 8012374:	4618      	mov	r0, r3
 8012376:	4553      	cmp	r3, sl
 8012378:	db33      	blt.n	80123e2 <__lshift+0xb6>
 801237a:	6920      	ldr	r0, [r4, #16]
 801237c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012380:	f104 0314 	add.w	r3, r4, #20
 8012384:	f019 091f 	ands.w	r9, r9, #31
 8012388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801238c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012390:	d02b      	beq.n	80123ea <__lshift+0xbe>
 8012392:	f1c9 0e20 	rsb	lr, r9, #32
 8012396:	468a      	mov	sl, r1
 8012398:	2200      	movs	r2, #0
 801239a:	6818      	ldr	r0, [r3, #0]
 801239c:	fa00 f009 	lsl.w	r0, r0, r9
 80123a0:	4310      	orrs	r0, r2
 80123a2:	f84a 0b04 	str.w	r0, [sl], #4
 80123a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80123aa:	459c      	cmp	ip, r3
 80123ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80123b0:	d8f3      	bhi.n	801239a <__lshift+0x6e>
 80123b2:	ebac 0304 	sub.w	r3, ip, r4
 80123b6:	3b15      	subs	r3, #21
 80123b8:	f023 0303 	bic.w	r3, r3, #3
 80123bc:	3304      	adds	r3, #4
 80123be:	f104 0015 	add.w	r0, r4, #21
 80123c2:	4584      	cmp	ip, r0
 80123c4:	bf38      	it	cc
 80123c6:	2304      	movcc	r3, #4
 80123c8:	50ca      	str	r2, [r1, r3]
 80123ca:	b10a      	cbz	r2, 80123d0 <__lshift+0xa4>
 80123cc:	f108 0602 	add.w	r6, r8, #2
 80123d0:	3e01      	subs	r6, #1
 80123d2:	4638      	mov	r0, r7
 80123d4:	612e      	str	r6, [r5, #16]
 80123d6:	4621      	mov	r1, r4
 80123d8:	f7ff fdd8 	bl	8011f8c <_Bfree>
 80123dc:	4628      	mov	r0, r5
 80123de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80123e6:	3301      	adds	r3, #1
 80123e8:	e7c5      	b.n	8012376 <__lshift+0x4a>
 80123ea:	3904      	subs	r1, #4
 80123ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80123f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80123f4:	459c      	cmp	ip, r3
 80123f6:	d8f9      	bhi.n	80123ec <__lshift+0xc0>
 80123f8:	e7ea      	b.n	80123d0 <__lshift+0xa4>
 80123fa:	bf00      	nop
 80123fc:	0801362c 	.word	0x0801362c
 8012400:	0801363d 	.word	0x0801363d

08012404 <__mcmp>:
 8012404:	b530      	push	{r4, r5, lr}
 8012406:	6902      	ldr	r2, [r0, #16]
 8012408:	690c      	ldr	r4, [r1, #16]
 801240a:	1b12      	subs	r2, r2, r4
 801240c:	d10e      	bne.n	801242c <__mcmp+0x28>
 801240e:	f100 0314 	add.w	r3, r0, #20
 8012412:	3114      	adds	r1, #20
 8012414:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012418:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801241c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012420:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012424:	42a5      	cmp	r5, r4
 8012426:	d003      	beq.n	8012430 <__mcmp+0x2c>
 8012428:	d305      	bcc.n	8012436 <__mcmp+0x32>
 801242a:	2201      	movs	r2, #1
 801242c:	4610      	mov	r0, r2
 801242e:	bd30      	pop	{r4, r5, pc}
 8012430:	4283      	cmp	r3, r0
 8012432:	d3f3      	bcc.n	801241c <__mcmp+0x18>
 8012434:	e7fa      	b.n	801242c <__mcmp+0x28>
 8012436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801243a:	e7f7      	b.n	801242c <__mcmp+0x28>

0801243c <__mdiff>:
 801243c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012440:	460c      	mov	r4, r1
 8012442:	4606      	mov	r6, r0
 8012444:	4611      	mov	r1, r2
 8012446:	4620      	mov	r0, r4
 8012448:	4690      	mov	r8, r2
 801244a:	f7ff ffdb 	bl	8012404 <__mcmp>
 801244e:	1e05      	subs	r5, r0, #0
 8012450:	d110      	bne.n	8012474 <__mdiff+0x38>
 8012452:	4629      	mov	r1, r5
 8012454:	4630      	mov	r0, r6
 8012456:	f7ff fd59 	bl	8011f0c <_Balloc>
 801245a:	b930      	cbnz	r0, 801246a <__mdiff+0x2e>
 801245c:	4b3a      	ldr	r3, [pc, #232]	; (8012548 <__mdiff+0x10c>)
 801245e:	4602      	mov	r2, r0
 8012460:	f240 2137 	movw	r1, #567	; 0x237
 8012464:	4839      	ldr	r0, [pc, #228]	; (801254c <__mdiff+0x110>)
 8012466:	f000 fafd 	bl	8012a64 <__assert_func>
 801246a:	2301      	movs	r3, #1
 801246c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012474:	bfa4      	itt	ge
 8012476:	4643      	movge	r3, r8
 8012478:	46a0      	movge	r8, r4
 801247a:	4630      	mov	r0, r6
 801247c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012480:	bfa6      	itte	ge
 8012482:	461c      	movge	r4, r3
 8012484:	2500      	movge	r5, #0
 8012486:	2501      	movlt	r5, #1
 8012488:	f7ff fd40 	bl	8011f0c <_Balloc>
 801248c:	b920      	cbnz	r0, 8012498 <__mdiff+0x5c>
 801248e:	4b2e      	ldr	r3, [pc, #184]	; (8012548 <__mdiff+0x10c>)
 8012490:	4602      	mov	r2, r0
 8012492:	f240 2145 	movw	r1, #581	; 0x245
 8012496:	e7e5      	b.n	8012464 <__mdiff+0x28>
 8012498:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801249c:	6926      	ldr	r6, [r4, #16]
 801249e:	60c5      	str	r5, [r0, #12]
 80124a0:	f104 0914 	add.w	r9, r4, #20
 80124a4:	f108 0514 	add.w	r5, r8, #20
 80124a8:	f100 0e14 	add.w	lr, r0, #20
 80124ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80124b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80124b4:	f108 0210 	add.w	r2, r8, #16
 80124b8:	46f2      	mov	sl, lr
 80124ba:	2100      	movs	r1, #0
 80124bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80124c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80124c4:	fa11 f88b 	uxtah	r8, r1, fp
 80124c8:	b299      	uxth	r1, r3
 80124ca:	0c1b      	lsrs	r3, r3, #16
 80124cc:	eba8 0801 	sub.w	r8, r8, r1
 80124d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80124d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80124d8:	fa1f f888 	uxth.w	r8, r8
 80124dc:	1419      	asrs	r1, r3, #16
 80124de:	454e      	cmp	r6, r9
 80124e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80124e4:	f84a 3b04 	str.w	r3, [sl], #4
 80124e8:	d8e8      	bhi.n	80124bc <__mdiff+0x80>
 80124ea:	1b33      	subs	r3, r6, r4
 80124ec:	3b15      	subs	r3, #21
 80124ee:	f023 0303 	bic.w	r3, r3, #3
 80124f2:	3304      	adds	r3, #4
 80124f4:	3415      	adds	r4, #21
 80124f6:	42a6      	cmp	r6, r4
 80124f8:	bf38      	it	cc
 80124fa:	2304      	movcc	r3, #4
 80124fc:	441d      	add	r5, r3
 80124fe:	4473      	add	r3, lr
 8012500:	469e      	mov	lr, r3
 8012502:	462e      	mov	r6, r5
 8012504:	4566      	cmp	r6, ip
 8012506:	d30e      	bcc.n	8012526 <__mdiff+0xea>
 8012508:	f10c 0203 	add.w	r2, ip, #3
 801250c:	1b52      	subs	r2, r2, r5
 801250e:	f022 0203 	bic.w	r2, r2, #3
 8012512:	3d03      	subs	r5, #3
 8012514:	45ac      	cmp	ip, r5
 8012516:	bf38      	it	cc
 8012518:	2200      	movcc	r2, #0
 801251a:	4413      	add	r3, r2
 801251c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012520:	b17a      	cbz	r2, 8012542 <__mdiff+0x106>
 8012522:	6107      	str	r7, [r0, #16]
 8012524:	e7a4      	b.n	8012470 <__mdiff+0x34>
 8012526:	f856 8b04 	ldr.w	r8, [r6], #4
 801252a:	fa11 f288 	uxtah	r2, r1, r8
 801252e:	1414      	asrs	r4, r2, #16
 8012530:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012534:	b292      	uxth	r2, r2
 8012536:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801253a:	f84e 2b04 	str.w	r2, [lr], #4
 801253e:	1421      	asrs	r1, r4, #16
 8012540:	e7e0      	b.n	8012504 <__mdiff+0xc8>
 8012542:	3f01      	subs	r7, #1
 8012544:	e7ea      	b.n	801251c <__mdiff+0xe0>
 8012546:	bf00      	nop
 8012548:	0801362c 	.word	0x0801362c
 801254c:	0801363d 	.word	0x0801363d

08012550 <__d2b>:
 8012550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012554:	460f      	mov	r7, r1
 8012556:	2101      	movs	r1, #1
 8012558:	ec59 8b10 	vmov	r8, r9, d0
 801255c:	4616      	mov	r6, r2
 801255e:	f7ff fcd5 	bl	8011f0c <_Balloc>
 8012562:	4604      	mov	r4, r0
 8012564:	b930      	cbnz	r0, 8012574 <__d2b+0x24>
 8012566:	4602      	mov	r2, r0
 8012568:	4b24      	ldr	r3, [pc, #144]	; (80125fc <__d2b+0xac>)
 801256a:	4825      	ldr	r0, [pc, #148]	; (8012600 <__d2b+0xb0>)
 801256c:	f240 310f 	movw	r1, #783	; 0x30f
 8012570:	f000 fa78 	bl	8012a64 <__assert_func>
 8012574:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801257c:	bb2d      	cbnz	r5, 80125ca <__d2b+0x7a>
 801257e:	9301      	str	r3, [sp, #4]
 8012580:	f1b8 0300 	subs.w	r3, r8, #0
 8012584:	d026      	beq.n	80125d4 <__d2b+0x84>
 8012586:	4668      	mov	r0, sp
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	f7ff fd87 	bl	801209c <__lo0bits>
 801258e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012592:	b1e8      	cbz	r0, 80125d0 <__d2b+0x80>
 8012594:	f1c0 0320 	rsb	r3, r0, #32
 8012598:	fa02 f303 	lsl.w	r3, r2, r3
 801259c:	430b      	orrs	r3, r1
 801259e:	40c2      	lsrs	r2, r0
 80125a0:	6163      	str	r3, [r4, #20]
 80125a2:	9201      	str	r2, [sp, #4]
 80125a4:	9b01      	ldr	r3, [sp, #4]
 80125a6:	61a3      	str	r3, [r4, #24]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	bf14      	ite	ne
 80125ac:	2202      	movne	r2, #2
 80125ae:	2201      	moveq	r2, #1
 80125b0:	6122      	str	r2, [r4, #16]
 80125b2:	b1bd      	cbz	r5, 80125e4 <__d2b+0x94>
 80125b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80125b8:	4405      	add	r5, r0
 80125ba:	603d      	str	r5, [r7, #0]
 80125bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80125c0:	6030      	str	r0, [r6, #0]
 80125c2:	4620      	mov	r0, r4
 80125c4:	b003      	add	sp, #12
 80125c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125ce:	e7d6      	b.n	801257e <__d2b+0x2e>
 80125d0:	6161      	str	r1, [r4, #20]
 80125d2:	e7e7      	b.n	80125a4 <__d2b+0x54>
 80125d4:	a801      	add	r0, sp, #4
 80125d6:	f7ff fd61 	bl	801209c <__lo0bits>
 80125da:	9b01      	ldr	r3, [sp, #4]
 80125dc:	6163      	str	r3, [r4, #20]
 80125de:	3020      	adds	r0, #32
 80125e0:	2201      	movs	r2, #1
 80125e2:	e7e5      	b.n	80125b0 <__d2b+0x60>
 80125e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80125e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80125ec:	6038      	str	r0, [r7, #0]
 80125ee:	6918      	ldr	r0, [r3, #16]
 80125f0:	f7ff fd34 	bl	801205c <__hi0bits>
 80125f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80125f8:	e7e2      	b.n	80125c0 <__d2b+0x70>
 80125fa:	bf00      	nop
 80125fc:	0801362c 	.word	0x0801362c
 8012600:	0801363d 	.word	0x0801363d

08012604 <__ssputs_r>:
 8012604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012608:	688e      	ldr	r6, [r1, #8]
 801260a:	461f      	mov	r7, r3
 801260c:	42be      	cmp	r6, r7
 801260e:	680b      	ldr	r3, [r1, #0]
 8012610:	4682      	mov	sl, r0
 8012612:	460c      	mov	r4, r1
 8012614:	4690      	mov	r8, r2
 8012616:	d82c      	bhi.n	8012672 <__ssputs_r+0x6e>
 8012618:	898a      	ldrh	r2, [r1, #12]
 801261a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801261e:	d026      	beq.n	801266e <__ssputs_r+0x6a>
 8012620:	6965      	ldr	r5, [r4, #20]
 8012622:	6909      	ldr	r1, [r1, #16]
 8012624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012628:	eba3 0901 	sub.w	r9, r3, r1
 801262c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012630:	1c7b      	adds	r3, r7, #1
 8012632:	444b      	add	r3, r9
 8012634:	106d      	asrs	r5, r5, #1
 8012636:	429d      	cmp	r5, r3
 8012638:	bf38      	it	cc
 801263a:	461d      	movcc	r5, r3
 801263c:	0553      	lsls	r3, r2, #21
 801263e:	d527      	bpl.n	8012690 <__ssputs_r+0x8c>
 8012640:	4629      	mov	r1, r5
 8012642:	f7ff fbd7 	bl	8011df4 <_malloc_r>
 8012646:	4606      	mov	r6, r0
 8012648:	b360      	cbz	r0, 80126a4 <__ssputs_r+0xa0>
 801264a:	6921      	ldr	r1, [r4, #16]
 801264c:	464a      	mov	r2, r9
 801264e:	f7fe fcd4 	bl	8010ffa <memcpy>
 8012652:	89a3      	ldrh	r3, [r4, #12]
 8012654:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801265c:	81a3      	strh	r3, [r4, #12]
 801265e:	6126      	str	r6, [r4, #16]
 8012660:	6165      	str	r5, [r4, #20]
 8012662:	444e      	add	r6, r9
 8012664:	eba5 0509 	sub.w	r5, r5, r9
 8012668:	6026      	str	r6, [r4, #0]
 801266a:	60a5      	str	r5, [r4, #8]
 801266c:	463e      	mov	r6, r7
 801266e:	42be      	cmp	r6, r7
 8012670:	d900      	bls.n	8012674 <__ssputs_r+0x70>
 8012672:	463e      	mov	r6, r7
 8012674:	6820      	ldr	r0, [r4, #0]
 8012676:	4632      	mov	r2, r6
 8012678:	4641      	mov	r1, r8
 801267a:	f000 f9c9 	bl	8012a10 <memmove>
 801267e:	68a3      	ldr	r3, [r4, #8]
 8012680:	1b9b      	subs	r3, r3, r6
 8012682:	60a3      	str	r3, [r4, #8]
 8012684:	6823      	ldr	r3, [r4, #0]
 8012686:	4433      	add	r3, r6
 8012688:	6023      	str	r3, [r4, #0]
 801268a:	2000      	movs	r0, #0
 801268c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012690:	462a      	mov	r2, r5
 8012692:	f000 fa2d 	bl	8012af0 <_realloc_r>
 8012696:	4606      	mov	r6, r0
 8012698:	2800      	cmp	r0, #0
 801269a:	d1e0      	bne.n	801265e <__ssputs_r+0x5a>
 801269c:	6921      	ldr	r1, [r4, #16]
 801269e:	4650      	mov	r0, sl
 80126a0:	f7ff fb34 	bl	8011d0c <_free_r>
 80126a4:	230c      	movs	r3, #12
 80126a6:	f8ca 3000 	str.w	r3, [sl]
 80126aa:	89a3      	ldrh	r3, [r4, #12]
 80126ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126b0:	81a3      	strh	r3, [r4, #12]
 80126b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126b6:	e7e9      	b.n	801268c <__ssputs_r+0x88>

080126b8 <_svfiprintf_r>:
 80126b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126bc:	4698      	mov	r8, r3
 80126be:	898b      	ldrh	r3, [r1, #12]
 80126c0:	061b      	lsls	r3, r3, #24
 80126c2:	b09d      	sub	sp, #116	; 0x74
 80126c4:	4607      	mov	r7, r0
 80126c6:	460d      	mov	r5, r1
 80126c8:	4614      	mov	r4, r2
 80126ca:	d50e      	bpl.n	80126ea <_svfiprintf_r+0x32>
 80126cc:	690b      	ldr	r3, [r1, #16]
 80126ce:	b963      	cbnz	r3, 80126ea <_svfiprintf_r+0x32>
 80126d0:	2140      	movs	r1, #64	; 0x40
 80126d2:	f7ff fb8f 	bl	8011df4 <_malloc_r>
 80126d6:	6028      	str	r0, [r5, #0]
 80126d8:	6128      	str	r0, [r5, #16]
 80126da:	b920      	cbnz	r0, 80126e6 <_svfiprintf_r+0x2e>
 80126dc:	230c      	movs	r3, #12
 80126de:	603b      	str	r3, [r7, #0]
 80126e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126e4:	e0d0      	b.n	8012888 <_svfiprintf_r+0x1d0>
 80126e6:	2340      	movs	r3, #64	; 0x40
 80126e8:	616b      	str	r3, [r5, #20]
 80126ea:	2300      	movs	r3, #0
 80126ec:	9309      	str	r3, [sp, #36]	; 0x24
 80126ee:	2320      	movs	r3, #32
 80126f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80126f8:	2330      	movs	r3, #48	; 0x30
 80126fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80128a0 <_svfiprintf_r+0x1e8>
 80126fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012702:	f04f 0901 	mov.w	r9, #1
 8012706:	4623      	mov	r3, r4
 8012708:	469a      	mov	sl, r3
 801270a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801270e:	b10a      	cbz	r2, 8012714 <_svfiprintf_r+0x5c>
 8012710:	2a25      	cmp	r2, #37	; 0x25
 8012712:	d1f9      	bne.n	8012708 <_svfiprintf_r+0x50>
 8012714:	ebba 0b04 	subs.w	fp, sl, r4
 8012718:	d00b      	beq.n	8012732 <_svfiprintf_r+0x7a>
 801271a:	465b      	mov	r3, fp
 801271c:	4622      	mov	r2, r4
 801271e:	4629      	mov	r1, r5
 8012720:	4638      	mov	r0, r7
 8012722:	f7ff ff6f 	bl	8012604 <__ssputs_r>
 8012726:	3001      	adds	r0, #1
 8012728:	f000 80a9 	beq.w	801287e <_svfiprintf_r+0x1c6>
 801272c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801272e:	445a      	add	r2, fp
 8012730:	9209      	str	r2, [sp, #36]	; 0x24
 8012732:	f89a 3000 	ldrb.w	r3, [sl]
 8012736:	2b00      	cmp	r3, #0
 8012738:	f000 80a1 	beq.w	801287e <_svfiprintf_r+0x1c6>
 801273c:	2300      	movs	r3, #0
 801273e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012746:	f10a 0a01 	add.w	sl, sl, #1
 801274a:	9304      	str	r3, [sp, #16]
 801274c:	9307      	str	r3, [sp, #28]
 801274e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012752:	931a      	str	r3, [sp, #104]	; 0x68
 8012754:	4654      	mov	r4, sl
 8012756:	2205      	movs	r2, #5
 8012758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801275c:	4850      	ldr	r0, [pc, #320]	; (80128a0 <_svfiprintf_r+0x1e8>)
 801275e:	f7ed fd5f 	bl	8000220 <memchr>
 8012762:	9a04      	ldr	r2, [sp, #16]
 8012764:	b9d8      	cbnz	r0, 801279e <_svfiprintf_r+0xe6>
 8012766:	06d0      	lsls	r0, r2, #27
 8012768:	bf44      	itt	mi
 801276a:	2320      	movmi	r3, #32
 801276c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012770:	0711      	lsls	r1, r2, #28
 8012772:	bf44      	itt	mi
 8012774:	232b      	movmi	r3, #43	; 0x2b
 8012776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801277a:	f89a 3000 	ldrb.w	r3, [sl]
 801277e:	2b2a      	cmp	r3, #42	; 0x2a
 8012780:	d015      	beq.n	80127ae <_svfiprintf_r+0xf6>
 8012782:	9a07      	ldr	r2, [sp, #28]
 8012784:	4654      	mov	r4, sl
 8012786:	2000      	movs	r0, #0
 8012788:	f04f 0c0a 	mov.w	ip, #10
 801278c:	4621      	mov	r1, r4
 801278e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012792:	3b30      	subs	r3, #48	; 0x30
 8012794:	2b09      	cmp	r3, #9
 8012796:	d94d      	bls.n	8012834 <_svfiprintf_r+0x17c>
 8012798:	b1b0      	cbz	r0, 80127c8 <_svfiprintf_r+0x110>
 801279a:	9207      	str	r2, [sp, #28]
 801279c:	e014      	b.n	80127c8 <_svfiprintf_r+0x110>
 801279e:	eba0 0308 	sub.w	r3, r0, r8
 80127a2:	fa09 f303 	lsl.w	r3, r9, r3
 80127a6:	4313      	orrs	r3, r2
 80127a8:	9304      	str	r3, [sp, #16]
 80127aa:	46a2      	mov	sl, r4
 80127ac:	e7d2      	b.n	8012754 <_svfiprintf_r+0x9c>
 80127ae:	9b03      	ldr	r3, [sp, #12]
 80127b0:	1d19      	adds	r1, r3, #4
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	9103      	str	r1, [sp, #12]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	bfbb      	ittet	lt
 80127ba:	425b      	neglt	r3, r3
 80127bc:	f042 0202 	orrlt.w	r2, r2, #2
 80127c0:	9307      	strge	r3, [sp, #28]
 80127c2:	9307      	strlt	r3, [sp, #28]
 80127c4:	bfb8      	it	lt
 80127c6:	9204      	strlt	r2, [sp, #16]
 80127c8:	7823      	ldrb	r3, [r4, #0]
 80127ca:	2b2e      	cmp	r3, #46	; 0x2e
 80127cc:	d10c      	bne.n	80127e8 <_svfiprintf_r+0x130>
 80127ce:	7863      	ldrb	r3, [r4, #1]
 80127d0:	2b2a      	cmp	r3, #42	; 0x2a
 80127d2:	d134      	bne.n	801283e <_svfiprintf_r+0x186>
 80127d4:	9b03      	ldr	r3, [sp, #12]
 80127d6:	1d1a      	adds	r2, r3, #4
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	9203      	str	r2, [sp, #12]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	bfb8      	it	lt
 80127e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80127e4:	3402      	adds	r4, #2
 80127e6:	9305      	str	r3, [sp, #20]
 80127e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80128b0 <_svfiprintf_r+0x1f8>
 80127ec:	7821      	ldrb	r1, [r4, #0]
 80127ee:	2203      	movs	r2, #3
 80127f0:	4650      	mov	r0, sl
 80127f2:	f7ed fd15 	bl	8000220 <memchr>
 80127f6:	b138      	cbz	r0, 8012808 <_svfiprintf_r+0x150>
 80127f8:	9b04      	ldr	r3, [sp, #16]
 80127fa:	eba0 000a 	sub.w	r0, r0, sl
 80127fe:	2240      	movs	r2, #64	; 0x40
 8012800:	4082      	lsls	r2, r0
 8012802:	4313      	orrs	r3, r2
 8012804:	3401      	adds	r4, #1
 8012806:	9304      	str	r3, [sp, #16]
 8012808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801280c:	4825      	ldr	r0, [pc, #148]	; (80128a4 <_svfiprintf_r+0x1ec>)
 801280e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012812:	2206      	movs	r2, #6
 8012814:	f7ed fd04 	bl	8000220 <memchr>
 8012818:	2800      	cmp	r0, #0
 801281a:	d038      	beq.n	801288e <_svfiprintf_r+0x1d6>
 801281c:	4b22      	ldr	r3, [pc, #136]	; (80128a8 <_svfiprintf_r+0x1f0>)
 801281e:	bb1b      	cbnz	r3, 8012868 <_svfiprintf_r+0x1b0>
 8012820:	9b03      	ldr	r3, [sp, #12]
 8012822:	3307      	adds	r3, #7
 8012824:	f023 0307 	bic.w	r3, r3, #7
 8012828:	3308      	adds	r3, #8
 801282a:	9303      	str	r3, [sp, #12]
 801282c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801282e:	4433      	add	r3, r6
 8012830:	9309      	str	r3, [sp, #36]	; 0x24
 8012832:	e768      	b.n	8012706 <_svfiprintf_r+0x4e>
 8012834:	fb0c 3202 	mla	r2, ip, r2, r3
 8012838:	460c      	mov	r4, r1
 801283a:	2001      	movs	r0, #1
 801283c:	e7a6      	b.n	801278c <_svfiprintf_r+0xd4>
 801283e:	2300      	movs	r3, #0
 8012840:	3401      	adds	r4, #1
 8012842:	9305      	str	r3, [sp, #20]
 8012844:	4619      	mov	r1, r3
 8012846:	f04f 0c0a 	mov.w	ip, #10
 801284a:	4620      	mov	r0, r4
 801284c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012850:	3a30      	subs	r2, #48	; 0x30
 8012852:	2a09      	cmp	r2, #9
 8012854:	d903      	bls.n	801285e <_svfiprintf_r+0x1a6>
 8012856:	2b00      	cmp	r3, #0
 8012858:	d0c6      	beq.n	80127e8 <_svfiprintf_r+0x130>
 801285a:	9105      	str	r1, [sp, #20]
 801285c:	e7c4      	b.n	80127e8 <_svfiprintf_r+0x130>
 801285e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012862:	4604      	mov	r4, r0
 8012864:	2301      	movs	r3, #1
 8012866:	e7f0      	b.n	801284a <_svfiprintf_r+0x192>
 8012868:	ab03      	add	r3, sp, #12
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	462a      	mov	r2, r5
 801286e:	4b0f      	ldr	r3, [pc, #60]	; (80128ac <_svfiprintf_r+0x1f4>)
 8012870:	a904      	add	r1, sp, #16
 8012872:	4638      	mov	r0, r7
 8012874:	f7fd fdec 	bl	8010450 <_printf_float>
 8012878:	1c42      	adds	r2, r0, #1
 801287a:	4606      	mov	r6, r0
 801287c:	d1d6      	bne.n	801282c <_svfiprintf_r+0x174>
 801287e:	89ab      	ldrh	r3, [r5, #12]
 8012880:	065b      	lsls	r3, r3, #25
 8012882:	f53f af2d 	bmi.w	80126e0 <_svfiprintf_r+0x28>
 8012886:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012888:	b01d      	add	sp, #116	; 0x74
 801288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801288e:	ab03      	add	r3, sp, #12
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	462a      	mov	r2, r5
 8012894:	4b05      	ldr	r3, [pc, #20]	; (80128ac <_svfiprintf_r+0x1f4>)
 8012896:	a904      	add	r1, sp, #16
 8012898:	4638      	mov	r0, r7
 801289a:	f7fe f87d 	bl	8010998 <_printf_i>
 801289e:	e7eb      	b.n	8012878 <_svfiprintf_r+0x1c0>
 80128a0:	08013794 	.word	0x08013794
 80128a4:	0801379e 	.word	0x0801379e
 80128a8:	08010451 	.word	0x08010451
 80128ac:	08012605 	.word	0x08012605
 80128b0:	0801379a 	.word	0x0801379a

080128b4 <__sflush_r>:
 80128b4:	898a      	ldrh	r2, [r1, #12]
 80128b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ba:	4605      	mov	r5, r0
 80128bc:	0710      	lsls	r0, r2, #28
 80128be:	460c      	mov	r4, r1
 80128c0:	d458      	bmi.n	8012974 <__sflush_r+0xc0>
 80128c2:	684b      	ldr	r3, [r1, #4]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	dc05      	bgt.n	80128d4 <__sflush_r+0x20>
 80128c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	dc02      	bgt.n	80128d4 <__sflush_r+0x20>
 80128ce:	2000      	movs	r0, #0
 80128d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128d6:	2e00      	cmp	r6, #0
 80128d8:	d0f9      	beq.n	80128ce <__sflush_r+0x1a>
 80128da:	2300      	movs	r3, #0
 80128dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128e0:	682f      	ldr	r7, [r5, #0]
 80128e2:	6a21      	ldr	r1, [r4, #32]
 80128e4:	602b      	str	r3, [r5, #0]
 80128e6:	d032      	beq.n	801294e <__sflush_r+0x9a>
 80128e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128ea:	89a3      	ldrh	r3, [r4, #12]
 80128ec:	075a      	lsls	r2, r3, #29
 80128ee:	d505      	bpl.n	80128fc <__sflush_r+0x48>
 80128f0:	6863      	ldr	r3, [r4, #4]
 80128f2:	1ac0      	subs	r0, r0, r3
 80128f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128f6:	b10b      	cbz	r3, 80128fc <__sflush_r+0x48>
 80128f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128fa:	1ac0      	subs	r0, r0, r3
 80128fc:	2300      	movs	r3, #0
 80128fe:	4602      	mov	r2, r0
 8012900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012902:	6a21      	ldr	r1, [r4, #32]
 8012904:	4628      	mov	r0, r5
 8012906:	47b0      	blx	r6
 8012908:	1c43      	adds	r3, r0, #1
 801290a:	89a3      	ldrh	r3, [r4, #12]
 801290c:	d106      	bne.n	801291c <__sflush_r+0x68>
 801290e:	6829      	ldr	r1, [r5, #0]
 8012910:	291d      	cmp	r1, #29
 8012912:	d82b      	bhi.n	801296c <__sflush_r+0xb8>
 8012914:	4a29      	ldr	r2, [pc, #164]	; (80129bc <__sflush_r+0x108>)
 8012916:	410a      	asrs	r2, r1
 8012918:	07d6      	lsls	r6, r2, #31
 801291a:	d427      	bmi.n	801296c <__sflush_r+0xb8>
 801291c:	2200      	movs	r2, #0
 801291e:	6062      	str	r2, [r4, #4]
 8012920:	04d9      	lsls	r1, r3, #19
 8012922:	6922      	ldr	r2, [r4, #16]
 8012924:	6022      	str	r2, [r4, #0]
 8012926:	d504      	bpl.n	8012932 <__sflush_r+0x7e>
 8012928:	1c42      	adds	r2, r0, #1
 801292a:	d101      	bne.n	8012930 <__sflush_r+0x7c>
 801292c:	682b      	ldr	r3, [r5, #0]
 801292e:	b903      	cbnz	r3, 8012932 <__sflush_r+0x7e>
 8012930:	6560      	str	r0, [r4, #84]	; 0x54
 8012932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012934:	602f      	str	r7, [r5, #0]
 8012936:	2900      	cmp	r1, #0
 8012938:	d0c9      	beq.n	80128ce <__sflush_r+0x1a>
 801293a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801293e:	4299      	cmp	r1, r3
 8012940:	d002      	beq.n	8012948 <__sflush_r+0x94>
 8012942:	4628      	mov	r0, r5
 8012944:	f7ff f9e2 	bl	8011d0c <_free_r>
 8012948:	2000      	movs	r0, #0
 801294a:	6360      	str	r0, [r4, #52]	; 0x34
 801294c:	e7c0      	b.n	80128d0 <__sflush_r+0x1c>
 801294e:	2301      	movs	r3, #1
 8012950:	4628      	mov	r0, r5
 8012952:	47b0      	blx	r6
 8012954:	1c41      	adds	r1, r0, #1
 8012956:	d1c8      	bne.n	80128ea <__sflush_r+0x36>
 8012958:	682b      	ldr	r3, [r5, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d0c5      	beq.n	80128ea <__sflush_r+0x36>
 801295e:	2b1d      	cmp	r3, #29
 8012960:	d001      	beq.n	8012966 <__sflush_r+0xb2>
 8012962:	2b16      	cmp	r3, #22
 8012964:	d101      	bne.n	801296a <__sflush_r+0xb6>
 8012966:	602f      	str	r7, [r5, #0]
 8012968:	e7b1      	b.n	80128ce <__sflush_r+0x1a>
 801296a:	89a3      	ldrh	r3, [r4, #12]
 801296c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012970:	81a3      	strh	r3, [r4, #12]
 8012972:	e7ad      	b.n	80128d0 <__sflush_r+0x1c>
 8012974:	690f      	ldr	r7, [r1, #16]
 8012976:	2f00      	cmp	r7, #0
 8012978:	d0a9      	beq.n	80128ce <__sflush_r+0x1a>
 801297a:	0793      	lsls	r3, r2, #30
 801297c:	680e      	ldr	r6, [r1, #0]
 801297e:	bf08      	it	eq
 8012980:	694b      	ldreq	r3, [r1, #20]
 8012982:	600f      	str	r7, [r1, #0]
 8012984:	bf18      	it	ne
 8012986:	2300      	movne	r3, #0
 8012988:	eba6 0807 	sub.w	r8, r6, r7
 801298c:	608b      	str	r3, [r1, #8]
 801298e:	f1b8 0f00 	cmp.w	r8, #0
 8012992:	dd9c      	ble.n	80128ce <__sflush_r+0x1a>
 8012994:	6a21      	ldr	r1, [r4, #32]
 8012996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012998:	4643      	mov	r3, r8
 801299a:	463a      	mov	r2, r7
 801299c:	4628      	mov	r0, r5
 801299e:	47b0      	blx	r6
 80129a0:	2800      	cmp	r0, #0
 80129a2:	dc06      	bgt.n	80129b2 <__sflush_r+0xfe>
 80129a4:	89a3      	ldrh	r3, [r4, #12]
 80129a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129aa:	81a3      	strh	r3, [r4, #12]
 80129ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129b0:	e78e      	b.n	80128d0 <__sflush_r+0x1c>
 80129b2:	4407      	add	r7, r0
 80129b4:	eba8 0800 	sub.w	r8, r8, r0
 80129b8:	e7e9      	b.n	801298e <__sflush_r+0xda>
 80129ba:	bf00      	nop
 80129bc:	dfbffffe 	.word	0xdfbffffe

080129c0 <_fflush_r>:
 80129c0:	b538      	push	{r3, r4, r5, lr}
 80129c2:	690b      	ldr	r3, [r1, #16]
 80129c4:	4605      	mov	r5, r0
 80129c6:	460c      	mov	r4, r1
 80129c8:	b913      	cbnz	r3, 80129d0 <_fflush_r+0x10>
 80129ca:	2500      	movs	r5, #0
 80129cc:	4628      	mov	r0, r5
 80129ce:	bd38      	pop	{r3, r4, r5, pc}
 80129d0:	b118      	cbz	r0, 80129da <_fflush_r+0x1a>
 80129d2:	6a03      	ldr	r3, [r0, #32]
 80129d4:	b90b      	cbnz	r3, 80129da <_fflush_r+0x1a>
 80129d6:	f7fe f98d 	bl	8010cf4 <__sinit>
 80129da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d0f3      	beq.n	80129ca <_fflush_r+0xa>
 80129e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129e4:	07d0      	lsls	r0, r2, #31
 80129e6:	d404      	bmi.n	80129f2 <_fflush_r+0x32>
 80129e8:	0599      	lsls	r1, r3, #22
 80129ea:	d402      	bmi.n	80129f2 <_fflush_r+0x32>
 80129ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129ee:	f7fe fb02 	bl	8010ff6 <__retarget_lock_acquire_recursive>
 80129f2:	4628      	mov	r0, r5
 80129f4:	4621      	mov	r1, r4
 80129f6:	f7ff ff5d 	bl	80128b4 <__sflush_r>
 80129fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129fc:	07da      	lsls	r2, r3, #31
 80129fe:	4605      	mov	r5, r0
 8012a00:	d4e4      	bmi.n	80129cc <_fflush_r+0xc>
 8012a02:	89a3      	ldrh	r3, [r4, #12]
 8012a04:	059b      	lsls	r3, r3, #22
 8012a06:	d4e1      	bmi.n	80129cc <_fflush_r+0xc>
 8012a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a0a:	f7fe faf5 	bl	8010ff8 <__retarget_lock_release_recursive>
 8012a0e:	e7dd      	b.n	80129cc <_fflush_r+0xc>

08012a10 <memmove>:
 8012a10:	4288      	cmp	r0, r1
 8012a12:	b510      	push	{r4, lr}
 8012a14:	eb01 0402 	add.w	r4, r1, r2
 8012a18:	d902      	bls.n	8012a20 <memmove+0x10>
 8012a1a:	4284      	cmp	r4, r0
 8012a1c:	4623      	mov	r3, r4
 8012a1e:	d807      	bhi.n	8012a30 <memmove+0x20>
 8012a20:	1e43      	subs	r3, r0, #1
 8012a22:	42a1      	cmp	r1, r4
 8012a24:	d008      	beq.n	8012a38 <memmove+0x28>
 8012a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a2e:	e7f8      	b.n	8012a22 <memmove+0x12>
 8012a30:	4402      	add	r2, r0
 8012a32:	4601      	mov	r1, r0
 8012a34:	428a      	cmp	r2, r1
 8012a36:	d100      	bne.n	8012a3a <memmove+0x2a>
 8012a38:	bd10      	pop	{r4, pc}
 8012a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a42:	e7f7      	b.n	8012a34 <memmove+0x24>

08012a44 <_sbrk_r>:
 8012a44:	b538      	push	{r3, r4, r5, lr}
 8012a46:	4d06      	ldr	r5, [pc, #24]	; (8012a60 <_sbrk_r+0x1c>)
 8012a48:	2300      	movs	r3, #0
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	4608      	mov	r0, r1
 8012a4e:	602b      	str	r3, [r5, #0]
 8012a50:	f7ef fec8 	bl	80027e4 <_sbrk>
 8012a54:	1c43      	adds	r3, r0, #1
 8012a56:	d102      	bne.n	8012a5e <_sbrk_r+0x1a>
 8012a58:	682b      	ldr	r3, [r5, #0]
 8012a5a:	b103      	cbz	r3, 8012a5e <_sbrk_r+0x1a>
 8012a5c:	6023      	str	r3, [r4, #0]
 8012a5e:	bd38      	pop	{r3, r4, r5, pc}
 8012a60:	20005d20 	.word	0x20005d20

08012a64 <__assert_func>:
 8012a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a66:	4614      	mov	r4, r2
 8012a68:	461a      	mov	r2, r3
 8012a6a:	4b09      	ldr	r3, [pc, #36]	; (8012a90 <__assert_func+0x2c>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4605      	mov	r5, r0
 8012a70:	68d8      	ldr	r0, [r3, #12]
 8012a72:	b14c      	cbz	r4, 8012a88 <__assert_func+0x24>
 8012a74:	4b07      	ldr	r3, [pc, #28]	; (8012a94 <__assert_func+0x30>)
 8012a76:	9100      	str	r1, [sp, #0]
 8012a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a7c:	4906      	ldr	r1, [pc, #24]	; (8012a98 <__assert_func+0x34>)
 8012a7e:	462b      	mov	r3, r5
 8012a80:	f000 f872 	bl	8012b68 <fiprintf>
 8012a84:	f000 f882 	bl	8012b8c <abort>
 8012a88:	4b04      	ldr	r3, [pc, #16]	; (8012a9c <__assert_func+0x38>)
 8012a8a:	461c      	mov	r4, r3
 8012a8c:	e7f3      	b.n	8012a76 <__assert_func+0x12>
 8012a8e:	bf00      	nop
 8012a90:	200001e0 	.word	0x200001e0
 8012a94:	080137af 	.word	0x080137af
 8012a98:	080137bc 	.word	0x080137bc
 8012a9c:	080137ea 	.word	0x080137ea

08012aa0 <_calloc_r>:
 8012aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012aa2:	fba1 2402 	umull	r2, r4, r1, r2
 8012aa6:	b94c      	cbnz	r4, 8012abc <_calloc_r+0x1c>
 8012aa8:	4611      	mov	r1, r2
 8012aaa:	9201      	str	r2, [sp, #4]
 8012aac:	f7ff f9a2 	bl	8011df4 <_malloc_r>
 8012ab0:	9a01      	ldr	r2, [sp, #4]
 8012ab2:	4605      	mov	r5, r0
 8012ab4:	b930      	cbnz	r0, 8012ac4 <_calloc_r+0x24>
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	b003      	add	sp, #12
 8012aba:	bd30      	pop	{r4, r5, pc}
 8012abc:	220c      	movs	r2, #12
 8012abe:	6002      	str	r2, [r0, #0]
 8012ac0:	2500      	movs	r5, #0
 8012ac2:	e7f8      	b.n	8012ab6 <_calloc_r+0x16>
 8012ac4:	4621      	mov	r1, r4
 8012ac6:	f7fe f9c2 	bl	8010e4e <memset>
 8012aca:	e7f4      	b.n	8012ab6 <_calloc_r+0x16>

08012acc <__ascii_mbtowc>:
 8012acc:	b082      	sub	sp, #8
 8012ace:	b901      	cbnz	r1, 8012ad2 <__ascii_mbtowc+0x6>
 8012ad0:	a901      	add	r1, sp, #4
 8012ad2:	b142      	cbz	r2, 8012ae6 <__ascii_mbtowc+0x1a>
 8012ad4:	b14b      	cbz	r3, 8012aea <__ascii_mbtowc+0x1e>
 8012ad6:	7813      	ldrb	r3, [r2, #0]
 8012ad8:	600b      	str	r3, [r1, #0]
 8012ada:	7812      	ldrb	r2, [r2, #0]
 8012adc:	1e10      	subs	r0, r2, #0
 8012ade:	bf18      	it	ne
 8012ae0:	2001      	movne	r0, #1
 8012ae2:	b002      	add	sp, #8
 8012ae4:	4770      	bx	lr
 8012ae6:	4610      	mov	r0, r2
 8012ae8:	e7fb      	b.n	8012ae2 <__ascii_mbtowc+0x16>
 8012aea:	f06f 0001 	mvn.w	r0, #1
 8012aee:	e7f8      	b.n	8012ae2 <__ascii_mbtowc+0x16>

08012af0 <_realloc_r>:
 8012af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af4:	4680      	mov	r8, r0
 8012af6:	4614      	mov	r4, r2
 8012af8:	460e      	mov	r6, r1
 8012afa:	b921      	cbnz	r1, 8012b06 <_realloc_r+0x16>
 8012afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b00:	4611      	mov	r1, r2
 8012b02:	f7ff b977 	b.w	8011df4 <_malloc_r>
 8012b06:	b92a      	cbnz	r2, 8012b14 <_realloc_r+0x24>
 8012b08:	f7ff f900 	bl	8011d0c <_free_r>
 8012b0c:	4625      	mov	r5, r4
 8012b0e:	4628      	mov	r0, r5
 8012b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b14:	f000 f841 	bl	8012b9a <_malloc_usable_size_r>
 8012b18:	4284      	cmp	r4, r0
 8012b1a:	4607      	mov	r7, r0
 8012b1c:	d802      	bhi.n	8012b24 <_realloc_r+0x34>
 8012b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012b22:	d812      	bhi.n	8012b4a <_realloc_r+0x5a>
 8012b24:	4621      	mov	r1, r4
 8012b26:	4640      	mov	r0, r8
 8012b28:	f7ff f964 	bl	8011df4 <_malloc_r>
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	d0ed      	beq.n	8012b0e <_realloc_r+0x1e>
 8012b32:	42bc      	cmp	r4, r7
 8012b34:	4622      	mov	r2, r4
 8012b36:	4631      	mov	r1, r6
 8012b38:	bf28      	it	cs
 8012b3a:	463a      	movcs	r2, r7
 8012b3c:	f7fe fa5d 	bl	8010ffa <memcpy>
 8012b40:	4631      	mov	r1, r6
 8012b42:	4640      	mov	r0, r8
 8012b44:	f7ff f8e2 	bl	8011d0c <_free_r>
 8012b48:	e7e1      	b.n	8012b0e <_realloc_r+0x1e>
 8012b4a:	4635      	mov	r5, r6
 8012b4c:	e7df      	b.n	8012b0e <_realloc_r+0x1e>

08012b4e <__ascii_wctomb>:
 8012b4e:	b149      	cbz	r1, 8012b64 <__ascii_wctomb+0x16>
 8012b50:	2aff      	cmp	r2, #255	; 0xff
 8012b52:	bf85      	ittet	hi
 8012b54:	238a      	movhi	r3, #138	; 0x8a
 8012b56:	6003      	strhi	r3, [r0, #0]
 8012b58:	700a      	strbls	r2, [r1, #0]
 8012b5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012b5e:	bf98      	it	ls
 8012b60:	2001      	movls	r0, #1
 8012b62:	4770      	bx	lr
 8012b64:	4608      	mov	r0, r1
 8012b66:	4770      	bx	lr

08012b68 <fiprintf>:
 8012b68:	b40e      	push	{r1, r2, r3}
 8012b6a:	b503      	push	{r0, r1, lr}
 8012b6c:	4601      	mov	r1, r0
 8012b6e:	ab03      	add	r3, sp, #12
 8012b70:	4805      	ldr	r0, [pc, #20]	; (8012b88 <fiprintf+0x20>)
 8012b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b76:	6800      	ldr	r0, [r0, #0]
 8012b78:	9301      	str	r3, [sp, #4]
 8012b7a:	f000 f83f 	bl	8012bfc <_vfiprintf_r>
 8012b7e:	b002      	add	sp, #8
 8012b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b84:	b003      	add	sp, #12
 8012b86:	4770      	bx	lr
 8012b88:	200001e0 	.word	0x200001e0

08012b8c <abort>:
 8012b8c:	b508      	push	{r3, lr}
 8012b8e:	2006      	movs	r0, #6
 8012b90:	f000 fa0c 	bl	8012fac <raise>
 8012b94:	2001      	movs	r0, #1
 8012b96:	f7ef fdad 	bl	80026f4 <_exit>

08012b9a <_malloc_usable_size_r>:
 8012b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b9e:	1f18      	subs	r0, r3, #4
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	bfbc      	itt	lt
 8012ba4:	580b      	ldrlt	r3, [r1, r0]
 8012ba6:	18c0      	addlt	r0, r0, r3
 8012ba8:	4770      	bx	lr

08012baa <__sfputc_r>:
 8012baa:	6893      	ldr	r3, [r2, #8]
 8012bac:	3b01      	subs	r3, #1
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	b410      	push	{r4}
 8012bb2:	6093      	str	r3, [r2, #8]
 8012bb4:	da08      	bge.n	8012bc8 <__sfputc_r+0x1e>
 8012bb6:	6994      	ldr	r4, [r2, #24]
 8012bb8:	42a3      	cmp	r3, r4
 8012bba:	db01      	blt.n	8012bc0 <__sfputc_r+0x16>
 8012bbc:	290a      	cmp	r1, #10
 8012bbe:	d103      	bne.n	8012bc8 <__sfputc_r+0x1e>
 8012bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bc4:	f000 b934 	b.w	8012e30 <__swbuf_r>
 8012bc8:	6813      	ldr	r3, [r2, #0]
 8012bca:	1c58      	adds	r0, r3, #1
 8012bcc:	6010      	str	r0, [r2, #0]
 8012bce:	7019      	strb	r1, [r3, #0]
 8012bd0:	4608      	mov	r0, r1
 8012bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <__sfputs_r>:
 8012bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bda:	4606      	mov	r6, r0
 8012bdc:	460f      	mov	r7, r1
 8012bde:	4614      	mov	r4, r2
 8012be0:	18d5      	adds	r5, r2, r3
 8012be2:	42ac      	cmp	r4, r5
 8012be4:	d101      	bne.n	8012bea <__sfputs_r+0x12>
 8012be6:	2000      	movs	r0, #0
 8012be8:	e007      	b.n	8012bfa <__sfputs_r+0x22>
 8012bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bee:	463a      	mov	r2, r7
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	f7ff ffda 	bl	8012baa <__sfputc_r>
 8012bf6:	1c43      	adds	r3, r0, #1
 8012bf8:	d1f3      	bne.n	8012be2 <__sfputs_r+0xa>
 8012bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bfc <_vfiprintf_r>:
 8012bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c00:	460d      	mov	r5, r1
 8012c02:	b09d      	sub	sp, #116	; 0x74
 8012c04:	4614      	mov	r4, r2
 8012c06:	4698      	mov	r8, r3
 8012c08:	4606      	mov	r6, r0
 8012c0a:	b118      	cbz	r0, 8012c14 <_vfiprintf_r+0x18>
 8012c0c:	6a03      	ldr	r3, [r0, #32]
 8012c0e:	b90b      	cbnz	r3, 8012c14 <_vfiprintf_r+0x18>
 8012c10:	f7fe f870 	bl	8010cf4 <__sinit>
 8012c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c16:	07d9      	lsls	r1, r3, #31
 8012c18:	d405      	bmi.n	8012c26 <_vfiprintf_r+0x2a>
 8012c1a:	89ab      	ldrh	r3, [r5, #12]
 8012c1c:	059a      	lsls	r2, r3, #22
 8012c1e:	d402      	bmi.n	8012c26 <_vfiprintf_r+0x2a>
 8012c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c22:	f7fe f9e8 	bl	8010ff6 <__retarget_lock_acquire_recursive>
 8012c26:	89ab      	ldrh	r3, [r5, #12]
 8012c28:	071b      	lsls	r3, r3, #28
 8012c2a:	d501      	bpl.n	8012c30 <_vfiprintf_r+0x34>
 8012c2c:	692b      	ldr	r3, [r5, #16]
 8012c2e:	b99b      	cbnz	r3, 8012c58 <_vfiprintf_r+0x5c>
 8012c30:	4629      	mov	r1, r5
 8012c32:	4630      	mov	r0, r6
 8012c34:	f000 f93a 	bl	8012eac <__swsetup_r>
 8012c38:	b170      	cbz	r0, 8012c58 <_vfiprintf_r+0x5c>
 8012c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c3c:	07dc      	lsls	r4, r3, #31
 8012c3e:	d504      	bpl.n	8012c4a <_vfiprintf_r+0x4e>
 8012c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c44:	b01d      	add	sp, #116	; 0x74
 8012c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c4a:	89ab      	ldrh	r3, [r5, #12]
 8012c4c:	0598      	lsls	r0, r3, #22
 8012c4e:	d4f7      	bmi.n	8012c40 <_vfiprintf_r+0x44>
 8012c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c52:	f7fe f9d1 	bl	8010ff8 <__retarget_lock_release_recursive>
 8012c56:	e7f3      	b.n	8012c40 <_vfiprintf_r+0x44>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c5c:	2320      	movs	r3, #32
 8012c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c66:	2330      	movs	r3, #48	; 0x30
 8012c68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012e1c <_vfiprintf_r+0x220>
 8012c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c70:	f04f 0901 	mov.w	r9, #1
 8012c74:	4623      	mov	r3, r4
 8012c76:	469a      	mov	sl, r3
 8012c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c7c:	b10a      	cbz	r2, 8012c82 <_vfiprintf_r+0x86>
 8012c7e:	2a25      	cmp	r2, #37	; 0x25
 8012c80:	d1f9      	bne.n	8012c76 <_vfiprintf_r+0x7a>
 8012c82:	ebba 0b04 	subs.w	fp, sl, r4
 8012c86:	d00b      	beq.n	8012ca0 <_vfiprintf_r+0xa4>
 8012c88:	465b      	mov	r3, fp
 8012c8a:	4622      	mov	r2, r4
 8012c8c:	4629      	mov	r1, r5
 8012c8e:	4630      	mov	r0, r6
 8012c90:	f7ff ffa2 	bl	8012bd8 <__sfputs_r>
 8012c94:	3001      	adds	r0, #1
 8012c96:	f000 80a9 	beq.w	8012dec <_vfiprintf_r+0x1f0>
 8012c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c9c:	445a      	add	r2, fp
 8012c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8012ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f000 80a1 	beq.w	8012dec <_vfiprintf_r+0x1f0>
 8012caa:	2300      	movs	r3, #0
 8012cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cb4:	f10a 0a01 	add.w	sl, sl, #1
 8012cb8:	9304      	str	r3, [sp, #16]
 8012cba:	9307      	str	r3, [sp, #28]
 8012cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8012cc2:	4654      	mov	r4, sl
 8012cc4:	2205      	movs	r2, #5
 8012cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cca:	4854      	ldr	r0, [pc, #336]	; (8012e1c <_vfiprintf_r+0x220>)
 8012ccc:	f7ed faa8 	bl	8000220 <memchr>
 8012cd0:	9a04      	ldr	r2, [sp, #16]
 8012cd2:	b9d8      	cbnz	r0, 8012d0c <_vfiprintf_r+0x110>
 8012cd4:	06d1      	lsls	r1, r2, #27
 8012cd6:	bf44      	itt	mi
 8012cd8:	2320      	movmi	r3, #32
 8012cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cde:	0713      	lsls	r3, r2, #28
 8012ce0:	bf44      	itt	mi
 8012ce2:	232b      	movmi	r3, #43	; 0x2b
 8012ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8012cec:	2b2a      	cmp	r3, #42	; 0x2a
 8012cee:	d015      	beq.n	8012d1c <_vfiprintf_r+0x120>
 8012cf0:	9a07      	ldr	r2, [sp, #28]
 8012cf2:	4654      	mov	r4, sl
 8012cf4:	2000      	movs	r0, #0
 8012cf6:	f04f 0c0a 	mov.w	ip, #10
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d00:	3b30      	subs	r3, #48	; 0x30
 8012d02:	2b09      	cmp	r3, #9
 8012d04:	d94d      	bls.n	8012da2 <_vfiprintf_r+0x1a6>
 8012d06:	b1b0      	cbz	r0, 8012d36 <_vfiprintf_r+0x13a>
 8012d08:	9207      	str	r2, [sp, #28]
 8012d0a:	e014      	b.n	8012d36 <_vfiprintf_r+0x13a>
 8012d0c:	eba0 0308 	sub.w	r3, r0, r8
 8012d10:	fa09 f303 	lsl.w	r3, r9, r3
 8012d14:	4313      	orrs	r3, r2
 8012d16:	9304      	str	r3, [sp, #16]
 8012d18:	46a2      	mov	sl, r4
 8012d1a:	e7d2      	b.n	8012cc2 <_vfiprintf_r+0xc6>
 8012d1c:	9b03      	ldr	r3, [sp, #12]
 8012d1e:	1d19      	adds	r1, r3, #4
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	9103      	str	r1, [sp, #12]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	bfbb      	ittet	lt
 8012d28:	425b      	neglt	r3, r3
 8012d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8012d2e:	9307      	strge	r3, [sp, #28]
 8012d30:	9307      	strlt	r3, [sp, #28]
 8012d32:	bfb8      	it	lt
 8012d34:	9204      	strlt	r2, [sp, #16]
 8012d36:	7823      	ldrb	r3, [r4, #0]
 8012d38:	2b2e      	cmp	r3, #46	; 0x2e
 8012d3a:	d10c      	bne.n	8012d56 <_vfiprintf_r+0x15a>
 8012d3c:	7863      	ldrb	r3, [r4, #1]
 8012d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8012d40:	d134      	bne.n	8012dac <_vfiprintf_r+0x1b0>
 8012d42:	9b03      	ldr	r3, [sp, #12]
 8012d44:	1d1a      	adds	r2, r3, #4
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	9203      	str	r2, [sp, #12]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	bfb8      	it	lt
 8012d4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d52:	3402      	adds	r4, #2
 8012d54:	9305      	str	r3, [sp, #20]
 8012d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012e2c <_vfiprintf_r+0x230>
 8012d5a:	7821      	ldrb	r1, [r4, #0]
 8012d5c:	2203      	movs	r2, #3
 8012d5e:	4650      	mov	r0, sl
 8012d60:	f7ed fa5e 	bl	8000220 <memchr>
 8012d64:	b138      	cbz	r0, 8012d76 <_vfiprintf_r+0x17a>
 8012d66:	9b04      	ldr	r3, [sp, #16]
 8012d68:	eba0 000a 	sub.w	r0, r0, sl
 8012d6c:	2240      	movs	r2, #64	; 0x40
 8012d6e:	4082      	lsls	r2, r0
 8012d70:	4313      	orrs	r3, r2
 8012d72:	3401      	adds	r4, #1
 8012d74:	9304      	str	r3, [sp, #16]
 8012d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d7a:	4829      	ldr	r0, [pc, #164]	; (8012e20 <_vfiprintf_r+0x224>)
 8012d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d80:	2206      	movs	r2, #6
 8012d82:	f7ed fa4d 	bl	8000220 <memchr>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	d03f      	beq.n	8012e0a <_vfiprintf_r+0x20e>
 8012d8a:	4b26      	ldr	r3, [pc, #152]	; (8012e24 <_vfiprintf_r+0x228>)
 8012d8c:	bb1b      	cbnz	r3, 8012dd6 <_vfiprintf_r+0x1da>
 8012d8e:	9b03      	ldr	r3, [sp, #12]
 8012d90:	3307      	adds	r3, #7
 8012d92:	f023 0307 	bic.w	r3, r3, #7
 8012d96:	3308      	adds	r3, #8
 8012d98:	9303      	str	r3, [sp, #12]
 8012d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d9c:	443b      	add	r3, r7
 8012d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8012da0:	e768      	b.n	8012c74 <_vfiprintf_r+0x78>
 8012da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012da6:	460c      	mov	r4, r1
 8012da8:	2001      	movs	r0, #1
 8012daa:	e7a6      	b.n	8012cfa <_vfiprintf_r+0xfe>
 8012dac:	2300      	movs	r3, #0
 8012dae:	3401      	adds	r4, #1
 8012db0:	9305      	str	r3, [sp, #20]
 8012db2:	4619      	mov	r1, r3
 8012db4:	f04f 0c0a 	mov.w	ip, #10
 8012db8:	4620      	mov	r0, r4
 8012dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dbe:	3a30      	subs	r2, #48	; 0x30
 8012dc0:	2a09      	cmp	r2, #9
 8012dc2:	d903      	bls.n	8012dcc <_vfiprintf_r+0x1d0>
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d0c6      	beq.n	8012d56 <_vfiprintf_r+0x15a>
 8012dc8:	9105      	str	r1, [sp, #20]
 8012dca:	e7c4      	b.n	8012d56 <_vfiprintf_r+0x15a>
 8012dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e7f0      	b.n	8012db8 <_vfiprintf_r+0x1bc>
 8012dd6:	ab03      	add	r3, sp, #12
 8012dd8:	9300      	str	r3, [sp, #0]
 8012dda:	462a      	mov	r2, r5
 8012ddc:	4b12      	ldr	r3, [pc, #72]	; (8012e28 <_vfiprintf_r+0x22c>)
 8012dde:	a904      	add	r1, sp, #16
 8012de0:	4630      	mov	r0, r6
 8012de2:	f7fd fb35 	bl	8010450 <_printf_float>
 8012de6:	4607      	mov	r7, r0
 8012de8:	1c78      	adds	r0, r7, #1
 8012dea:	d1d6      	bne.n	8012d9a <_vfiprintf_r+0x19e>
 8012dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dee:	07d9      	lsls	r1, r3, #31
 8012df0:	d405      	bmi.n	8012dfe <_vfiprintf_r+0x202>
 8012df2:	89ab      	ldrh	r3, [r5, #12]
 8012df4:	059a      	lsls	r2, r3, #22
 8012df6:	d402      	bmi.n	8012dfe <_vfiprintf_r+0x202>
 8012df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dfa:	f7fe f8fd 	bl	8010ff8 <__retarget_lock_release_recursive>
 8012dfe:	89ab      	ldrh	r3, [r5, #12]
 8012e00:	065b      	lsls	r3, r3, #25
 8012e02:	f53f af1d 	bmi.w	8012c40 <_vfiprintf_r+0x44>
 8012e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e08:	e71c      	b.n	8012c44 <_vfiprintf_r+0x48>
 8012e0a:	ab03      	add	r3, sp, #12
 8012e0c:	9300      	str	r3, [sp, #0]
 8012e0e:	462a      	mov	r2, r5
 8012e10:	4b05      	ldr	r3, [pc, #20]	; (8012e28 <_vfiprintf_r+0x22c>)
 8012e12:	a904      	add	r1, sp, #16
 8012e14:	4630      	mov	r0, r6
 8012e16:	f7fd fdbf 	bl	8010998 <_printf_i>
 8012e1a:	e7e4      	b.n	8012de6 <_vfiprintf_r+0x1ea>
 8012e1c:	08013794 	.word	0x08013794
 8012e20:	0801379e 	.word	0x0801379e
 8012e24:	08010451 	.word	0x08010451
 8012e28:	08012bd9 	.word	0x08012bd9
 8012e2c:	0801379a 	.word	0x0801379a

08012e30 <__swbuf_r>:
 8012e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e32:	460e      	mov	r6, r1
 8012e34:	4614      	mov	r4, r2
 8012e36:	4605      	mov	r5, r0
 8012e38:	b118      	cbz	r0, 8012e42 <__swbuf_r+0x12>
 8012e3a:	6a03      	ldr	r3, [r0, #32]
 8012e3c:	b90b      	cbnz	r3, 8012e42 <__swbuf_r+0x12>
 8012e3e:	f7fd ff59 	bl	8010cf4 <__sinit>
 8012e42:	69a3      	ldr	r3, [r4, #24]
 8012e44:	60a3      	str	r3, [r4, #8]
 8012e46:	89a3      	ldrh	r3, [r4, #12]
 8012e48:	071a      	lsls	r2, r3, #28
 8012e4a:	d525      	bpl.n	8012e98 <__swbuf_r+0x68>
 8012e4c:	6923      	ldr	r3, [r4, #16]
 8012e4e:	b31b      	cbz	r3, 8012e98 <__swbuf_r+0x68>
 8012e50:	6823      	ldr	r3, [r4, #0]
 8012e52:	6922      	ldr	r2, [r4, #16]
 8012e54:	1a98      	subs	r0, r3, r2
 8012e56:	6963      	ldr	r3, [r4, #20]
 8012e58:	b2f6      	uxtb	r6, r6
 8012e5a:	4283      	cmp	r3, r0
 8012e5c:	4637      	mov	r7, r6
 8012e5e:	dc04      	bgt.n	8012e6a <__swbuf_r+0x3a>
 8012e60:	4621      	mov	r1, r4
 8012e62:	4628      	mov	r0, r5
 8012e64:	f7ff fdac 	bl	80129c0 <_fflush_r>
 8012e68:	b9e0      	cbnz	r0, 8012ea4 <__swbuf_r+0x74>
 8012e6a:	68a3      	ldr	r3, [r4, #8]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	60a3      	str	r3, [r4, #8]
 8012e70:	6823      	ldr	r3, [r4, #0]
 8012e72:	1c5a      	adds	r2, r3, #1
 8012e74:	6022      	str	r2, [r4, #0]
 8012e76:	701e      	strb	r6, [r3, #0]
 8012e78:	6962      	ldr	r2, [r4, #20]
 8012e7a:	1c43      	adds	r3, r0, #1
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d004      	beq.n	8012e8a <__swbuf_r+0x5a>
 8012e80:	89a3      	ldrh	r3, [r4, #12]
 8012e82:	07db      	lsls	r3, r3, #31
 8012e84:	d506      	bpl.n	8012e94 <__swbuf_r+0x64>
 8012e86:	2e0a      	cmp	r6, #10
 8012e88:	d104      	bne.n	8012e94 <__swbuf_r+0x64>
 8012e8a:	4621      	mov	r1, r4
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	f7ff fd97 	bl	80129c0 <_fflush_r>
 8012e92:	b938      	cbnz	r0, 8012ea4 <__swbuf_r+0x74>
 8012e94:	4638      	mov	r0, r7
 8012e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e98:	4621      	mov	r1, r4
 8012e9a:	4628      	mov	r0, r5
 8012e9c:	f000 f806 	bl	8012eac <__swsetup_r>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d0d5      	beq.n	8012e50 <__swbuf_r+0x20>
 8012ea4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012ea8:	e7f4      	b.n	8012e94 <__swbuf_r+0x64>
	...

08012eac <__swsetup_r>:
 8012eac:	b538      	push	{r3, r4, r5, lr}
 8012eae:	4b2a      	ldr	r3, [pc, #168]	; (8012f58 <__swsetup_r+0xac>)
 8012eb0:	4605      	mov	r5, r0
 8012eb2:	6818      	ldr	r0, [r3, #0]
 8012eb4:	460c      	mov	r4, r1
 8012eb6:	b118      	cbz	r0, 8012ec0 <__swsetup_r+0x14>
 8012eb8:	6a03      	ldr	r3, [r0, #32]
 8012eba:	b90b      	cbnz	r3, 8012ec0 <__swsetup_r+0x14>
 8012ebc:	f7fd ff1a 	bl	8010cf4 <__sinit>
 8012ec0:	89a3      	ldrh	r3, [r4, #12]
 8012ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ec6:	0718      	lsls	r0, r3, #28
 8012ec8:	d422      	bmi.n	8012f10 <__swsetup_r+0x64>
 8012eca:	06d9      	lsls	r1, r3, #27
 8012ecc:	d407      	bmi.n	8012ede <__swsetup_r+0x32>
 8012ece:	2309      	movs	r3, #9
 8012ed0:	602b      	str	r3, [r5, #0]
 8012ed2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012ed6:	81a3      	strh	r3, [r4, #12]
 8012ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012edc:	e034      	b.n	8012f48 <__swsetup_r+0x9c>
 8012ede:	0758      	lsls	r0, r3, #29
 8012ee0:	d512      	bpl.n	8012f08 <__swsetup_r+0x5c>
 8012ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ee4:	b141      	cbz	r1, 8012ef8 <__swsetup_r+0x4c>
 8012ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eea:	4299      	cmp	r1, r3
 8012eec:	d002      	beq.n	8012ef4 <__swsetup_r+0x48>
 8012eee:	4628      	mov	r0, r5
 8012ef0:	f7fe ff0c 	bl	8011d0c <_free_r>
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	6363      	str	r3, [r4, #52]	; 0x34
 8012ef8:	89a3      	ldrh	r3, [r4, #12]
 8012efa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012efe:	81a3      	strh	r3, [r4, #12]
 8012f00:	2300      	movs	r3, #0
 8012f02:	6063      	str	r3, [r4, #4]
 8012f04:	6923      	ldr	r3, [r4, #16]
 8012f06:	6023      	str	r3, [r4, #0]
 8012f08:	89a3      	ldrh	r3, [r4, #12]
 8012f0a:	f043 0308 	orr.w	r3, r3, #8
 8012f0e:	81a3      	strh	r3, [r4, #12]
 8012f10:	6923      	ldr	r3, [r4, #16]
 8012f12:	b94b      	cbnz	r3, 8012f28 <__swsetup_r+0x7c>
 8012f14:	89a3      	ldrh	r3, [r4, #12]
 8012f16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f1e:	d003      	beq.n	8012f28 <__swsetup_r+0x7c>
 8012f20:	4621      	mov	r1, r4
 8012f22:	4628      	mov	r0, r5
 8012f24:	f000 f884 	bl	8013030 <__smakebuf_r>
 8012f28:	89a0      	ldrh	r0, [r4, #12]
 8012f2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f2e:	f010 0301 	ands.w	r3, r0, #1
 8012f32:	d00a      	beq.n	8012f4a <__swsetup_r+0x9e>
 8012f34:	2300      	movs	r3, #0
 8012f36:	60a3      	str	r3, [r4, #8]
 8012f38:	6963      	ldr	r3, [r4, #20]
 8012f3a:	425b      	negs	r3, r3
 8012f3c:	61a3      	str	r3, [r4, #24]
 8012f3e:	6923      	ldr	r3, [r4, #16]
 8012f40:	b943      	cbnz	r3, 8012f54 <__swsetup_r+0xa8>
 8012f42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012f46:	d1c4      	bne.n	8012ed2 <__swsetup_r+0x26>
 8012f48:	bd38      	pop	{r3, r4, r5, pc}
 8012f4a:	0781      	lsls	r1, r0, #30
 8012f4c:	bf58      	it	pl
 8012f4e:	6963      	ldrpl	r3, [r4, #20]
 8012f50:	60a3      	str	r3, [r4, #8]
 8012f52:	e7f4      	b.n	8012f3e <__swsetup_r+0x92>
 8012f54:	2000      	movs	r0, #0
 8012f56:	e7f7      	b.n	8012f48 <__swsetup_r+0x9c>
 8012f58:	200001e0 	.word	0x200001e0

08012f5c <_raise_r>:
 8012f5c:	291f      	cmp	r1, #31
 8012f5e:	b538      	push	{r3, r4, r5, lr}
 8012f60:	4604      	mov	r4, r0
 8012f62:	460d      	mov	r5, r1
 8012f64:	d904      	bls.n	8012f70 <_raise_r+0x14>
 8012f66:	2316      	movs	r3, #22
 8012f68:	6003      	str	r3, [r0, #0]
 8012f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012f72:	b112      	cbz	r2, 8012f7a <_raise_r+0x1e>
 8012f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f78:	b94b      	cbnz	r3, 8012f8e <_raise_r+0x32>
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	f000 f830 	bl	8012fe0 <_getpid_r>
 8012f80:	462a      	mov	r2, r5
 8012f82:	4601      	mov	r1, r0
 8012f84:	4620      	mov	r0, r4
 8012f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f8a:	f000 b817 	b.w	8012fbc <_kill_r>
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d00a      	beq.n	8012fa8 <_raise_r+0x4c>
 8012f92:	1c59      	adds	r1, r3, #1
 8012f94:	d103      	bne.n	8012f9e <_raise_r+0x42>
 8012f96:	2316      	movs	r3, #22
 8012f98:	6003      	str	r3, [r0, #0]
 8012f9a:	2001      	movs	r0, #1
 8012f9c:	e7e7      	b.n	8012f6e <_raise_r+0x12>
 8012f9e:	2400      	movs	r4, #0
 8012fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	4798      	blx	r3
 8012fa8:	2000      	movs	r0, #0
 8012faa:	e7e0      	b.n	8012f6e <_raise_r+0x12>

08012fac <raise>:
 8012fac:	4b02      	ldr	r3, [pc, #8]	; (8012fb8 <raise+0xc>)
 8012fae:	4601      	mov	r1, r0
 8012fb0:	6818      	ldr	r0, [r3, #0]
 8012fb2:	f7ff bfd3 	b.w	8012f5c <_raise_r>
 8012fb6:	bf00      	nop
 8012fb8:	200001e0 	.word	0x200001e0

08012fbc <_kill_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4d07      	ldr	r5, [pc, #28]	; (8012fdc <_kill_r+0x20>)
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4608      	mov	r0, r1
 8012fc6:	4611      	mov	r1, r2
 8012fc8:	602b      	str	r3, [r5, #0]
 8012fca:	f7ef fb83 	bl	80026d4 <_kill>
 8012fce:	1c43      	adds	r3, r0, #1
 8012fd0:	d102      	bne.n	8012fd8 <_kill_r+0x1c>
 8012fd2:	682b      	ldr	r3, [r5, #0]
 8012fd4:	b103      	cbz	r3, 8012fd8 <_kill_r+0x1c>
 8012fd6:	6023      	str	r3, [r4, #0]
 8012fd8:	bd38      	pop	{r3, r4, r5, pc}
 8012fda:	bf00      	nop
 8012fdc:	20005d20 	.word	0x20005d20

08012fe0 <_getpid_r>:
 8012fe0:	f7ef bb70 	b.w	80026c4 <_getpid>

08012fe4 <__swhatbuf_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	460c      	mov	r4, r1
 8012fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fec:	2900      	cmp	r1, #0
 8012fee:	b096      	sub	sp, #88	; 0x58
 8012ff0:	4615      	mov	r5, r2
 8012ff2:	461e      	mov	r6, r3
 8012ff4:	da0d      	bge.n	8013012 <__swhatbuf_r+0x2e>
 8012ff6:	89a3      	ldrh	r3, [r4, #12]
 8012ff8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012ffc:	f04f 0100 	mov.w	r1, #0
 8013000:	bf0c      	ite	eq
 8013002:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013006:	2340      	movne	r3, #64	; 0x40
 8013008:	2000      	movs	r0, #0
 801300a:	6031      	str	r1, [r6, #0]
 801300c:	602b      	str	r3, [r5, #0]
 801300e:	b016      	add	sp, #88	; 0x58
 8013010:	bd70      	pop	{r4, r5, r6, pc}
 8013012:	466a      	mov	r2, sp
 8013014:	f000 f848 	bl	80130a8 <_fstat_r>
 8013018:	2800      	cmp	r0, #0
 801301a:	dbec      	blt.n	8012ff6 <__swhatbuf_r+0x12>
 801301c:	9901      	ldr	r1, [sp, #4]
 801301e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013022:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013026:	4259      	negs	r1, r3
 8013028:	4159      	adcs	r1, r3
 801302a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801302e:	e7eb      	b.n	8013008 <__swhatbuf_r+0x24>

08013030 <__smakebuf_r>:
 8013030:	898b      	ldrh	r3, [r1, #12]
 8013032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013034:	079d      	lsls	r5, r3, #30
 8013036:	4606      	mov	r6, r0
 8013038:	460c      	mov	r4, r1
 801303a:	d507      	bpl.n	801304c <__smakebuf_r+0x1c>
 801303c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013040:	6023      	str	r3, [r4, #0]
 8013042:	6123      	str	r3, [r4, #16]
 8013044:	2301      	movs	r3, #1
 8013046:	6163      	str	r3, [r4, #20]
 8013048:	b002      	add	sp, #8
 801304a:	bd70      	pop	{r4, r5, r6, pc}
 801304c:	ab01      	add	r3, sp, #4
 801304e:	466a      	mov	r2, sp
 8013050:	f7ff ffc8 	bl	8012fe4 <__swhatbuf_r>
 8013054:	9900      	ldr	r1, [sp, #0]
 8013056:	4605      	mov	r5, r0
 8013058:	4630      	mov	r0, r6
 801305a:	f7fe fecb 	bl	8011df4 <_malloc_r>
 801305e:	b948      	cbnz	r0, 8013074 <__smakebuf_r+0x44>
 8013060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013064:	059a      	lsls	r2, r3, #22
 8013066:	d4ef      	bmi.n	8013048 <__smakebuf_r+0x18>
 8013068:	f023 0303 	bic.w	r3, r3, #3
 801306c:	f043 0302 	orr.w	r3, r3, #2
 8013070:	81a3      	strh	r3, [r4, #12]
 8013072:	e7e3      	b.n	801303c <__smakebuf_r+0xc>
 8013074:	89a3      	ldrh	r3, [r4, #12]
 8013076:	6020      	str	r0, [r4, #0]
 8013078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801307c:	81a3      	strh	r3, [r4, #12]
 801307e:	9b00      	ldr	r3, [sp, #0]
 8013080:	6163      	str	r3, [r4, #20]
 8013082:	9b01      	ldr	r3, [sp, #4]
 8013084:	6120      	str	r0, [r4, #16]
 8013086:	b15b      	cbz	r3, 80130a0 <__smakebuf_r+0x70>
 8013088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801308c:	4630      	mov	r0, r6
 801308e:	f000 f81d 	bl	80130cc <_isatty_r>
 8013092:	b128      	cbz	r0, 80130a0 <__smakebuf_r+0x70>
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	f023 0303 	bic.w	r3, r3, #3
 801309a:	f043 0301 	orr.w	r3, r3, #1
 801309e:	81a3      	strh	r3, [r4, #12]
 80130a0:	89a3      	ldrh	r3, [r4, #12]
 80130a2:	431d      	orrs	r5, r3
 80130a4:	81a5      	strh	r5, [r4, #12]
 80130a6:	e7cf      	b.n	8013048 <__smakebuf_r+0x18>

080130a8 <_fstat_r>:
 80130a8:	b538      	push	{r3, r4, r5, lr}
 80130aa:	4d07      	ldr	r5, [pc, #28]	; (80130c8 <_fstat_r+0x20>)
 80130ac:	2300      	movs	r3, #0
 80130ae:	4604      	mov	r4, r0
 80130b0:	4608      	mov	r0, r1
 80130b2:	4611      	mov	r1, r2
 80130b4:	602b      	str	r3, [r5, #0]
 80130b6:	f7ef fb6c 	bl	8002792 <_fstat>
 80130ba:	1c43      	adds	r3, r0, #1
 80130bc:	d102      	bne.n	80130c4 <_fstat_r+0x1c>
 80130be:	682b      	ldr	r3, [r5, #0]
 80130c0:	b103      	cbz	r3, 80130c4 <_fstat_r+0x1c>
 80130c2:	6023      	str	r3, [r4, #0]
 80130c4:	bd38      	pop	{r3, r4, r5, pc}
 80130c6:	bf00      	nop
 80130c8:	20005d20 	.word	0x20005d20

080130cc <_isatty_r>:
 80130cc:	b538      	push	{r3, r4, r5, lr}
 80130ce:	4d06      	ldr	r5, [pc, #24]	; (80130e8 <_isatty_r+0x1c>)
 80130d0:	2300      	movs	r3, #0
 80130d2:	4604      	mov	r4, r0
 80130d4:	4608      	mov	r0, r1
 80130d6:	602b      	str	r3, [r5, #0]
 80130d8:	f7ef fb6b 	bl	80027b2 <_isatty>
 80130dc:	1c43      	adds	r3, r0, #1
 80130de:	d102      	bne.n	80130e6 <_isatty_r+0x1a>
 80130e0:	682b      	ldr	r3, [r5, #0]
 80130e2:	b103      	cbz	r3, 80130e6 <_isatty_r+0x1a>
 80130e4:	6023      	str	r3, [r4, #0]
 80130e6:	bd38      	pop	{r3, r4, r5, pc}
 80130e8:	20005d20 	.word	0x20005d20

080130ec <_init>:
 80130ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ee:	bf00      	nop
 80130f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130f2:	bc08      	pop	{r3}
 80130f4:	469e      	mov	lr, r3
 80130f6:	4770      	bx	lr

080130f8 <_fini>:
 80130f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130fa:	bf00      	nop
 80130fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130fe:	bc08      	pop	{r3}
 8013100:	469e      	mov	lr, r3
 8013102:	4770      	bx	lr
