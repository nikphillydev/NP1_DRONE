
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cc4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  08015ea8  08015ea8  00016ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016aa0  08016aa0  00018350  2**0
                  CONTENTS
  4 .ARM          00000008  08016aa0  08016aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016aa8  08016aa8  00018350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016aa8  08016aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08016ab0  08016ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08016ab8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014e9c  20000350  08016e08  00018350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200151ec  08016e08  000191ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004512e  00000000  00000000  00018380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000917a  00000000  00000000  0005d4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cc0  00000000  00000000  00066628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000224f  00000000  00000000  000692e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035250  00000000  00000000  0006b537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b29d  00000000  00000000  000a0787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125731  00000000  00000000  000dba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00201155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d168  00000000  00000000  00201198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0020e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015e8c 	.word	0x08015e8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08015e8c 	.word	0x08015e8c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f805 	bl	8000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>:
      constexpr _Tuple_impl()
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f809 	bl	8000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f81c 	bl	8000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>:
      _Tuple_impl()
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f805 	bl	8000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>:
      constexpr _Head_base()
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>:
      constexpr _Head_base()
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN2np10lock_guardC1ERPv>:
{
	/*
	 * Class to implement mutex RAII for CMSIS-V2
	 */
public:
	lock_guard(osMutexId_t& mutex) : mutex(mutex) { osMutexAcquire(this->mutex, osWaitForever); }
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001026:	4618      	mov	r0, r3
 8001028:	f00d fa12 	bl	800e450 <osMutexAcquire>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_ZN2np10lock_guardD1Ev>:
	~lock_guard() { osMutexRelease(mutex); }
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f00d fa4e 	bl	800e4e6 <osMutexRelease>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>:
#include "Drivers/BMI088.hpp"
#include "Drivers/usb.hpp"
#include "Utility/lock_guard.hpp"
#include <cstdio>

BMI088::BMI088(SPI_HandleTypeDef& spi_handle, osMutexId_t& spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port, 
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
			uint16_t acc_cs_pin, uint16_t gyro_cs_pin, osMutexId_t& accel_data_mutex, osMutexId_t& gyro_data_mutex)
	: spi_handle(spi_handle),
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	601a      	str	r2, [r3, #0]
	  spi_mutex(spi_mutex),
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
	  acc_cs_port(acc_cs_port),
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	609a      	str	r2, [r3, #8]
	  gyro_cs_port(gyro_cs_port),
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
	  acc_cs_pin(acc_cs_pin),
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8bba      	ldrh	r2, [r7, #28]
 800107e:	821a      	strh	r2, [r3, #16]
	  gyro_cs_pin(gyro_cs_pin),
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8c3a      	ldrh	r2, [r7, #32]
 8001084:	825a      	strh	r2, [r3, #18]
	  accel_data_mutex(accel_data_mutex),
	  gyro_data_mutex(gyro_data_mutex) {}
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x88>)
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x8c>)
 8001090:	61da      	str	r2, [r3, #28]
	  accel_data_mutex(accel_data_mutex),
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001096:	621a      	str	r2, [r3, #32]
	  gyro_data_mutex(gyro_data_mutex) {}
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3328      	adds	r3, #40	@ 0x28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3334      	adds	r3, #52	@ 0x34
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3344      	adds	r3, #68	@ 0x44
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3350      	adds	r3, #80	@ 0x50
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	3a6b5c0f 	.word	0x3a6b5c0f
 80010e0:	398ba058 	.word	0x398ba058

080010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 f801 	bl	80020fc <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffe5 	bl	80010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN6BMI0884initEv>:

bool BMI088::init()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	bool status = false;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6898      	ldr	r0, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	f004 f9c7 	bl	80054d0 <HAL_GPIO_WritePin>
	osDelay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f00d f8e3 	bl	800e30e <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	8a1b      	ldrh	r3, [r3, #16]
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	f004 f9bc 	bl	80054d0 <HAL_GPIO_WritePin>
	osDelay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f00d f8d8 	bl	800e30e <osDelay>
	
	// Perform soft-reset of accelerometer
	tx_data[0] = 0xB6;
 800115e:	23b6      	movs	r3, #182	@ 0xb6
 8001160:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_SOFTRESET, tx_data, 1);
 8001164:	f107 0220 	add.w	r2, r7, #32
 8001168:	2301      	movs	r3, #1
 800116a:	217e      	movs	r1, #126	@ 0x7e
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fe3b 	bl	8001de8 <_ZN6BMI08820write_accel_registerEhPht>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001178:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800117c:	f083 0301 	eor.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <_ZN6BMI0884initEv+0x68>
 8001186:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800118a:	e20d      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f00d f8be 	bl	800e30e <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 8001192:	23b6      	movs	r3, #182	@ 0xb6
 8001194:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_SOFTRESET, tx_data, 1);
 8001198:	f107 0220 	add.w	r2, r7, #32
 800119c:	2301      	movs	r3, #1
 800119e:	2114      	movs	r1, #20
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 feb3 	bl	8001f0c <_ZN6BMI08819write_gyro_registerEhPht>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <_ZN6BMI0884initEv+0x9c>
 80011ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011be:	e1f3      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f00d f8a4 	bl	800e30e <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6898      	ldr	r0, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	8a1b      	ldrh	r3, [r3, #16]
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	f004 f97d 	bl	80054d0 <HAL_GPIO_WritePin>
	osDelay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f00d f899 	bl	800e30e <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6898      	ldr	r0, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8a1b      	ldrh	r3, [r3, #16]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	f004 f972 	bl	80054d0 <HAL_GPIO_WritePin>
	osDelay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f00d f88e 	bl	800e30e <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	773b      	strb	r3, [r7, #28]
	status = read_accel_register(REG_ACC_CHIP_ID, rx_data, 1);
 80011f6:	f107 021c 	add.w	r2, r7, #28
 80011fa:	2301      	movs	r3, #1
 80011fc:	2100      	movs	r1, #0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fc4e 	bl	8001aa0 <_ZN6BMI08819read_accel_registerEhPht>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x1E)
 800120a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01e      	beq.n	8001250 <_ZN6BMI0884initEv+0x12c>
 8001212:	7f3b      	ldrb	r3, [r7, #28]
 8001214:	2b1e      	cmp	r3, #30
 8001216:	d11b      	bne.n	8001250 <_ZN6BMI0884initEv+0x12c>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", CRITICAL);
 8001218:	2101      	movs	r1, #1
 800121a:	48c9      	ldr	r0, [pc, #804]	@ (8001540 <_ZN6BMI0884initEv+0x41c>)
 800121c:	f002 fa4c 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8001220:	200a      	movs	r0, #10
 8001222:	f00d f874 	bl	800e30e <osDelay>

	// Set 400Hz ODR, no over-sampling (145Hz BW)
	tx_data[0] = 0xAA;
 8001226:	23aa      	movs	r3, #170	@ 0xaa
 8001228:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_CONF, tx_data, 1);
 800122c:	f107 0220 	add.w	r2, r7, #32
 8001230:	2301      	movs	r3, #1
 8001232:	2140      	movs	r1, #64	@ 0x40
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fdd7 	bl	8001de8 <_ZN6BMI08820write_accel_registerEhPht>
 800123a:	4603      	mov	r3, r0
 800123c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <_ZN6BMI0884initEv+0x138>
 800124e:	e008      	b.n	8001262 <_ZN6BMI0884initEv+0x13e>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 8001250:	2102      	movs	r1, #2
 8001252:	48bc      	ldr	r0, [pc, #752]	@ (8001544 <_ZN6BMI0884initEv+0x420>)
 8001254:	f002 fa30 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
		return false;
 8001258:	2300      	movs	r3, #0
 800125a:	e1a5      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	if (!status) return status;
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001260:	e1a2      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f00d f853 	bl	800e30e <osDelay>

	// Initilize accelerometer IIR Filters
	float ACCEL_ODR = 400;		// Hz
 8001268:	4bb7      	ldr	r3, [pc, #732]	@ (8001548 <_ZN6BMI0884initEv+0x424>)
 800126a:	61bb      	str	r3, [r7, #24]
	float ACCEL_CUTOFF = 10;	// Hz
 800126c:	4bb7      	ldr	r3, [pc, #732]	@ (800154c <_ZN6BMI0884initEv+0x428>)
 800126e:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < accel_filters.size(); i++)
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
 8001274:	e01d      	b.n	80012b2 <_ZN6BMI0884initEv+0x18e>
	{
		accel_filters[i] = std::make_unique<IIRFilter>(ACCEL_CUTOFF, ACCEL_ODR);
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	f107 0218 	add.w	r2, r7, #24
 800127e:	f107 0114 	add.w	r1, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f000 ff10 	bl	80020a8 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3344      	adds	r3, #68	@ 0x44
 800128c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fefb 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001294:	4602      	mov	r2, r0
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f7ff ff31 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fec2 	bl	8002030 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < accel_filters.size(); i++)
 80012ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ae:	3301      	adds	r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3344      	adds	r3, #68	@ 0x44
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fedc 	bl	8002074 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80012bc:	4602      	mov	r2, r0
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d3d8      	bcc.n	8001276 <_ZN6BMI0884initEv+0x152>
	}

	// Set +-3g range (10920 LSB/g)
	tx_data[0] = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_RANGE, tx_data, 1);
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2301      	movs	r3, #1
 80012d0:	2141      	movs	r1, #65	@ 0x41
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fd88 	bl	8001de8 <_ZN6BMI08820write_accel_registerEhPht>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80012de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <_ZN6BMI0884initEv+0x1ce>
 80012ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f0:	e15a      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f00d f80b 	bl	800e30e <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 80012f8:	230a      	movs	r3, #10
 80012fa:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT1_IO_CTRL, tx_data, 1);
 80012fe:	f107 0220 	add.w	r2, r7, #32
 8001302:	2301      	movs	r3, #1
 8001304:	2153      	movs	r1, #83	@ 0x53
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fd6e 	bl	8001de8 <_ZN6BMI08820write_accel_registerEhPht>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <_ZN6BMI0884initEv+0x202>
 8001320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001324:	e140      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f00c fff1 	bl	800e30e <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 800132c:	2304      	movs	r3, #4
 800132e:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT_MAP_DATA, tx_data, 1);
 8001332:	f107 0220 	add.w	r2, r7, #32
 8001336:	2301      	movs	r3, #1
 8001338:	2158      	movs	r1, #88	@ 0x58
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fd54 	bl	8001de8 <_ZN6BMI08820write_accel_registerEhPht>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <_ZN6BMI0884initEv+0x236>
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001358:	e126      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f00c ffd7 	bl	800e30e <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CONF, tx_data, 1);
 8001366:	f107 0220 	add.w	r2, r7, #32
 800136a:	2301      	movs	r3, #1
 800136c:	217c      	movs	r1, #124	@ 0x7c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fd3a 	bl	8001de8 <_ZN6BMI08820write_accel_registerEhPht>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800137a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <_ZN6BMI0884initEv+0x26a>
 8001388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800138c:	e10c      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f00c ffbd 	bl	800e30e <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 8001394:	2304      	movs	r3, #4
 8001396:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CTRL, tx_data, 1);
 800139a:	f107 0220 	add.w	r2, r7, #32
 800139e:	2301      	movs	r3, #1
 80013a0:	217d      	movs	r1, #125	@ 0x7d
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fd20 	bl	8001de8 <_ZN6BMI08820write_accel_registerEhPht>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80013ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b2:	f083 0301 	eor.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <_ZN6BMI0884initEv+0x29e>
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c0:	e0f2      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f00c ffa3 	bl	800e30e <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", CRITICAL);
 80013c8:	2101      	movs	r1, #1
 80013ca:	4861      	ldr	r0, [pc, #388]	@ (8001550 <_ZN6BMI0884initEv+0x42c>)
 80013cc:	f002 f974 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80013d0:	2064      	movs	r0, #100	@ 0x64
 80013d2:	f00c ff9c 	bl	800e30e <osDelay>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	773b      	strb	r3, [r7, #28]
	status = read_gyro_register(REG_GYRO_CHIP_ID, rx_data, 1);
 80013da:	f107 021c 	add.w	r2, r7, #28
 80013de:	2301      	movs	r3, #1
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fc2e 	bl	8001c44 <_ZN6BMI08818read_gyro_registerEhPht>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x0F)
 80013ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01e      	beq.n	8001434 <_ZN6BMI0884initEv+0x310>
 80013f6:	7f3b      	ldrb	r3, [r7, #28]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d11b      	bne.n	8001434 <_ZN6BMI0884initEv+0x310>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", CRITICAL);
 80013fc:	2101      	movs	r1, #1
 80013fe:	4855      	ldr	r0, [pc, #340]	@ (8001554 <_ZN6BMI0884initEv+0x430>)
 8001400:	f002 f95a 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8001404:	200a      	movs	r0, #10
 8001406:	f00c ff82 	bl	800e30e <osDelay>

	// Set 400Hz ODR (47Hz BW)
	tx_data[0] = 0x03;
 800140a:	2303      	movs	r3, #3
 800140c:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_BANDWIDTH, tx_data, 1);
 8001410:	f107 0220 	add.w	r2, r7, #32
 8001414:	2301      	movs	r3, #1
 8001416:	2110      	movs	r1, #16
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fd77 	bl	8001f0c <_ZN6BMI08819write_gyro_registerEhPht>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <_ZN6BMI0884initEv+0x31c>
 8001432:	e008      	b.n	8001446 <_ZN6BMI0884initEv+0x322>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 8001434:	2102      	movs	r1, #2
 8001436:	4848      	ldr	r0, [pc, #288]	@ (8001558 <_ZN6BMI0884initEv+0x434>)
 8001438:	f002 f93e 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
		return false;
 800143c:	2300      	movs	r3, #0
 800143e:	e0b3      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	if (!status) return status;
 8001440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001444:	e0b0      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f00c ff61 	bl	800e30e <osDelay>

	// Initilize gyroscope IIR Filters
	float GYRO_ODR = 400;		// Hz
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <_ZN6BMI0884initEv+0x424>)
 800144e:	613b      	str	r3, [r7, #16]
	float GYRO_CUTOFF = 10;		// Hz
 8001450:	4b3e      	ldr	r3, [pc, #248]	@ (800154c <_ZN6BMI0884initEv+0x428>)
 8001452:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < gyro_filters.size(); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	@ 0x30
 8001458:	e01d      	b.n	8001496 <_ZN6BMI0884initEv+0x372>
	{
		gyro_filters[i] = std::make_unique<IIRFilter>(GYRO_CUTOFF, GYRO_ODR);
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	f107 0210 	add.w	r2, r7, #16
 8001462:	f107 010c 	add.w	r1, r7, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fe1e 	bl	80020a8 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3350      	adds	r3, #80	@ 0x50
 8001470:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fe09 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001478:	4602      	mov	r2, r0
 800147a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff fe3f 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fdd0 	bl	8002030 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < gyro_filters.size(); i++)
 8001490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001492:	3301      	adds	r3, #1
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3350      	adds	r3, #80	@ 0x50
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fdea 	bl	8002074 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d3d8      	bcc.n	800145a <_ZN6BMI0884initEv+0x336>
	}

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_RANGE, tx_data, 1);
 80014ae:	f107 0220 	add.w	r2, r7, #32
 80014b2:	2301      	movs	r3, #1
 80014b4:	210f      	movs	r1, #15
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fd28 	bl	8001f0c <_ZN6BMI08819write_gyro_registerEhPht>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80014c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c6:	f083 0301 	eor.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <_ZN6BMI0884initEv+0x3b2>
 80014d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014d4:	e068      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f00c ff19 	bl	800e30e <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 80014dc:	2301      	movs	r3, #1
 80014de:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_CONF, tx_data, 1);
 80014e2:	f107 0220 	add.w	r2, r7, #32
 80014e6:	2301      	movs	r3, #1
 80014e8:	2116      	movs	r1, #22
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fd0e 	bl	8001f0c <_ZN6BMI08819write_gyro_registerEhPht>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80014f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <_ZN6BMI0884initEv+0x3e6>
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001508:	e04e      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 800150a:	200a      	movs	r0, #10
 800150c:	f00c feff 	bl	800e30e <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_MAP, tx_data, 1);
 8001516:	f107 0220 	add.w	r2, r7, #32
 800151a:	2301      	movs	r3, #1
 800151c:	2118      	movs	r1, #24
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fcf4 	bl	8001f0c <_ZN6BMI08819write_gyro_registerEhPht>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800152a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800152e:	f083 0301 	eor.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d011      	beq.n	800155c <_ZN6BMI0884initEv+0x438>
 8001538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800153c:	e034      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
 800153e:	bf00      	nop
 8001540:	08015ea8 	.word	0x08015ea8
 8001544:	08015ee0 	.word	0x08015ee0
 8001548:	43c80000 	.word	0x43c80000
 800154c:	41200000 	.word	0x41200000
 8001550:	08015f1c 	.word	0x08015f1c
 8001554:	08015f44 	.word	0x08015f44
 8001558:	08015f78 	.word	0x08015f78
	osDelay(10);
 800155c:	200a      	movs	r0, #10
 800155e:	f00c fed6 	bl	800e30e <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 8001562:	2380      	movs	r3, #128	@ 0x80
 8001564:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_INT_CTRL, tx_data, 1);
 8001568:	f107 0220 	add.w	r2, r7, #32
 800156c:	2301      	movs	r3, #1
 800156e:	2115      	movs	r1, #21
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fccb 	bl	8001f0c <_ZN6BMI08819write_gyro_registerEhPht>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800157c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <_ZN6BMI0884initEv+0x46c>
 800158a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158e:	e00b      	b.n	80015a8 <_ZN6BMI0884initEv+0x484>
	osDelay(10);
 8001590:	200a      	movs	r0, #10
 8001592:	f00c febc 	bl	800e30e <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", CRITICAL);
 8001596:	2101      	movs	r1, #1
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <_ZN6BMI0884initEv+0x48c>)
 800159a:	f002 f88d 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f00c feb5 	bl	800e30e <osDelay>

	return status;
 80015a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3738      	adds	r7, #56	@ 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08015fb0 	.word	0x08015fb0

080015b4 <_ZN6BMI08825service_irq_accelerometerEv>:

bool BMI088::service_irq_accelerometer()
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b08b      	sub	sp, #44	@ 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	bool status = read_accel_register(REG_ACC_X_LSB, rx_data, sizeof(rx_data));
 80015bc:	f107 020c 	add.w	r2, r7, #12
 80015c0:	2306      	movs	r3, #6
 80015c2:	2112      	movs	r1, #18
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fa6b 	bl	8001aa0 <_ZN6BMI08819read_accel_registerEhPht>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80aa 	beq.w	800172e <_ZN6BMI08825service_irq_accelerometerEv+0x17a>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 80015da:	7b7b      	ldrb	r3, [r7, #13]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 80015f6:	7c7b      	ldrb	r3, [r7, #17]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	7c3b      	ldrb	r3, [r7, #16]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	843b      	strh	r3, [r7, #32]
		
		float bmi_x = accel_filters[0]->update(accel_x_int16 * acc_conversion);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3344      	adds	r3, #68	@ 0x44
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd3d 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fd8e 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001618:	4602      	mov	r2, r0
 800161a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edd3 7a06 	vldr	s15, [r3, #24]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	4610      	mov	r0, r2
 8001636:	f002 fab9 	bl	8003bac <_ZN9IIRFilter6updateEf>
 800163a:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = accel_filters[1]->update(accel_y_int16 * acc_conversion);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3344      	adds	r3, #68	@ 0x44
 8001642:	2101      	movs	r1, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fd20 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 800164a:	4603      	mov	r3, r0
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fd71 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001652:	4602      	mov	r2, r0
 8001654:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	edd3 7a06 	vldr	s15, [r3, #24]
 8001666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	4610      	mov	r0, r2
 8001670:	f002 fa9c 	bl	8003bac <_ZN9IIRFilter6updateEf>
 8001674:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = accel_filters[2]->update(accel_z_int16 * acc_conversion);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3344      	adds	r3, #68	@ 0x44
 800167c:	2102      	movs	r1, #2
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fd03 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001684:	4603      	mov	r3, r0
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fd54 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 800168c:	4602      	mov	r2, r0
 800168e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	edd3 7a06 	vldr	s15, [r3, #24]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	eeb0 0a67 	vmov.f32	s0, s15
 80016a8:	4610      	mov	r0, r2
 80016aa:	f002 fa7f 	bl	8003bac <_ZN9IIRFilter6updateEf>
 80016ae:	ed87 0a05 	vstr	s0, [r7, #20]

		{
			np::lock_guard lock(accel_data_mutex);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1a      	ldr	r2, [r3, #32]
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fca5 	bl	800100c <_ZN2np10lock_guardC1ERPv>

			// Apply translation to match drone body's ENU orientation
			linear_accelerations[0] = bmi_y;
 80016c2:	69be      	ldr	r6, [r7, #24]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3328      	adds	r3, #40	@ 0x28
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd3e 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80016d0:	4603      	mov	r3, r0
 80016d2:	601e      	str	r6, [r3, #0]
			linear_accelerations[1] = -1.0 * bmi_x;
 80016d4:	69f8      	ldr	r0, [r7, #28]
 80016d6:	f7fe ff5f 	bl	8000598 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4614      	mov	r4, r2
 80016e0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7ff fa86 	bl	8000bf8 <__aeabi_d2f>
 80016ec:	4604      	mov	r4, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3328      	adds	r3, #40	@ 0x28
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fd29 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80016fa:	4603      	mov	r3, r0
 80016fc:	601c      	str	r4, [r3, #0]
			linear_accelerations[2] = bmi_z;
 80016fe:	697c      	ldr	r4, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3328      	adds	r3, #40	@ 0x28
 8001704:	2102      	movs	r1, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fd20 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 800170c:	4603      	mov	r3, r0
 800170e:	601c      	str	r4, [r3, #0]
		}
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fc8e 	bl	8001036 <_ZN2np10lock_guardD1Ev>

		// Clear data ready interrupt
		bool temp = read_accel_register(REG_ACC_INT_STAT_1, rx_data, 1);
 800171a:	f107 020c 	add.w	r2, r7, #12
 800171e:	2301      	movs	r3, #1
 8001720:	211d      	movs	r1, #29
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f9bc 	bl	8001aa0 <_ZN6BMI08819read_accel_registerEhPht>
 8001728:	4603      	mov	r3, r0
 800172a:	74fb      	strb	r3, [r7, #19]
 800172c:	e003      	b.n	8001736 <_ZN6BMI08825service_irq_accelerometerEv+0x182>
		(void)temp;
	}
	else
	{
		USB_Log("ERROR reading BMI088 accelerometer data.", ERR);
 800172e:	2102      	movs	r1, #2
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <_ZN6BMI08825service_irq_accelerometerEv+0x190>)
 8001732:	f001 ffc1 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8001736:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800173a:	4618      	mov	r0, r3
 800173c:	372c      	adds	r7, #44	@ 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001742:	bf00      	nop
 8001744:	08015fd4 	.word	0x08015fd4

08001748 <_ZN6BMI08821service_irq_gyroscopeEv>:

bool BMI088::service_irq_gyroscope()
{
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	b08b      	sub	sp, #44	@ 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	bool status = read_gyro_register(REG_RATE_X_LSB, rx_data, sizeof(rx_data));
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	2306      	movs	r3, #6
 8001756:	2102      	movs	r1, #2
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fa73 	bl	8001c44 <_ZN6BMI08818read_gyro_registerEhPht>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 8001764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a1 	beq.w	80018b0 <_ZN6BMI08821service_irq_gyroscopeEv+0x168>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 800178a:	7c7b      	ldrb	r3, [r7, #17]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21a      	sxth	r2, r3
 8001790:	7c3b      	ldrb	r3, [r7, #16]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	843b      	strh	r3, [r7, #32]

		float bmi_x = gyro_filters[0]->update(rate_x_int16 * gyro_conversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3350      	adds	r3, #80	@ 0x50
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fc73 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fcc4 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80017c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	4610      	mov	r0, r2
 80017ca:	f002 f9ef 	bl	8003bac <_ZN9IIRFilter6updateEf>
 80017ce:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = gyro_filters[1]->update(rate_y_int16 * gyro_conversion);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3350      	adds	r3, #80	@ 0x50
 80017d6:	2101      	movs	r1, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fc56 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80017de:	4603      	mov	r3, r0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fca7 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	4610      	mov	r0, r2
 8001804:	f002 f9d2 	bl	8003bac <_ZN9IIRFilter6updateEf>
 8001808:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = gyro_filters[2]->update(rate_z_int16 * gyro_conversion);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3350      	adds	r3, #80	@ 0x50
 8001810:	2102      	movs	r1, #2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fc39 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fc8a 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001820:	4602      	mov	r2, r0
 8001822:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edd3 7a07 	vldr	s15, [r3, #28]
 8001834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	4610      	mov	r0, r2
 800183e:	f002 f9b5 	bl	8003bac <_ZN9IIRFilter6updateEf>
 8001842:	ed87 0a05 	vstr	s0, [r7, #20]

		np::lock_guard lock(gyro_data_mutex);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fbdb 	bl	800100c <_ZN2np10lock_guardC1ERPv>

		// Apply translation to match drone body's ENU orientation
		angular_velocities[0] = bmi_y;
 8001856:	69be      	ldr	r6, [r7, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3334      	adds	r3, #52	@ 0x34
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fc74 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 8001864:	4603      	mov	r3, r0
 8001866:	601e      	str	r6, [r3, #0]
		angular_velocities[1] = -1.0 * bmi_x;
 8001868:	69f8      	ldr	r0, [r7, #28]
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4614      	mov	r4, r2
 8001874:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7ff f9bc 	bl	8000bf8 <__aeabi_d2f>
 8001880:	4604      	mov	r4, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3334      	adds	r3, #52	@ 0x34
 8001886:	2101      	movs	r1, #1
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fc5f 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 800188e:	4603      	mov	r3, r0
 8001890:	601c      	str	r4, [r3, #0]
		angular_velocities[2] = bmi_z;
 8001892:	697c      	ldr	r4, [r7, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3334      	adds	r3, #52	@ 0x34
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fc56 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80018a0:	4603      	mov	r3, r0
 80018a2:	601c      	str	r4, [r3, #0]

		// Interrupt cleared automatically after 280-400us
	}
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fbc4 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 80018ae:	e003      	b.n	80018b8 <_ZN6BMI08821service_irq_gyroscopeEv+0x170>
	else
	{
		USB_Log("ERROR reading BMI088 gyroscope data.", ERR);
 80018b0:	2102      	movs	r1, #2
 80018b2:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <_ZN6BMI08821service_irq_gyroscopeEv+0x17c>)
 80018b4:	f001 ff00 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80018b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018bc:	4618      	mov	r0, r3
 80018be:	372c      	adds	r7, #44	@ 0x2c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	08016000 	.word	0x08016000

080018c8 <_ZN6BMI08823service_irq_temperatureEv>:

bool BMI088::service_irq_temperature()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	bool status = read_accel_register(REG_TEMP_MSB, rx_data, sizeof(rx_data));
 80018d0:	f107 0210 	add.w	r2, r7, #16
 80018d4:	2302      	movs	r3, #2
 80018d6:	2122      	movs	r1, #34	@ 0x22
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f8e1 	bl	8001aa0 <_ZN6BMI08819read_accel_registerEhPht>
 80018de:	4603      	mov	r3, r0
 80018e0:	757b      	strb	r3, [r7, #21]

	if (status)
 80018e2:	7d7b      	ldrb	r3, [r7, #21]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d036      	beq.n	8001956 <_ZN6BMI08823service_irq_temperatureEv+0x8e>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 80018e8:	7c3b      	ldrb	r3, [r7, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	7c7b      	ldrb	r3, [r7, #17]
 80018f0:	095b      	lsrs	r3, r3, #5
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	827b      	strh	r3, [r7, #18]
		int16_t temp_int11 = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	82fb      	strh	r3, [r7, #22]
		if (temp_uint11 > 1023)
 8001900:	8a7b      	ldrh	r3, [r7, #18]
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001906:	d305      	bcc.n	8001914 <_ZN6BMI08823service_irq_temperatureEv+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 8001908:	8a7b      	ldrh	r3, [r7, #18]
 800190a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800190e:	b29b      	uxth	r3, r3
 8001910:	82fb      	strh	r3, [r7, #22]
 8001912:	e001      	b.n	8001918 <_ZN6BMI08823service_irq_temperatureEv+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 8001914:	8a7b      	ldrh	r3, [r7, #18]
 8001916:	82fb      	strh	r3, [r7, #22]
		}
		np::lock_guard lock(accel_data_mutex);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fb72 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_int11 * 0.125f + 23.0f;
 8001928:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	}
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fb71 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001954:	e003      	b.n	800195e <_ZN6BMI08823service_irq_temperatureEv+0x96>
	else
	{
		USB_Log("ERROR reading BMI088 temperature data.", ERR);
 8001956:	2102      	movs	r1, #2
 8001958:	4803      	ldr	r0, [pc, #12]	@ (8001968 <_ZN6BMI08823service_irq_temperatureEv+0xa0>)
 800195a:	f001 fead 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800195e:	7d7b      	ldrb	r3, [r7, #21]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08016028 	.word	0x08016028

0800196c <_ZN6BMI08815log_data_to_gcsEv>:

void BMI088::log_data_to_gcs()
{
 800196c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001970:	b0b8      	sub	sp, #224	@ 0xe0
 8001972:	af0e      	add	r7, sp, #56	@ 0x38
 8001974:	61f8      	str	r0, [r7, #28]
	char string[128];
	{
		np::lock_guard lock1(accel_data_mutex);
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	6a1a      	ldr	r2, [r3, #32]
 800197a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fb43 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		np::lock_guard lock2(gyro_data_mutex);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fb3b 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
				linear_accelerations[0],
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3328      	adds	r3, #40	@ 0x28
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fbd5 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80019a2:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdf6 	bl	8000598 <__aeabi_f2d>
 80019ac:	4680      	mov	r8, r0
 80019ae:	4689      	mov	r9, r1
				linear_accelerations[1],
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	3328      	adds	r3, #40	@ 0x28
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fbc8 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80019bc:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fde9 	bl	8000598 <__aeabi_f2d>
 80019c6:	4682      	mov	sl, r0
 80019c8:	468b      	mov	fp, r1
				linear_accelerations[2],
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3328      	adds	r3, #40	@ 0x28
 80019ce:	2102      	movs	r1, #2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fbbb 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80019d6:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fddc 	bl	8000598 <__aeabi_f2d>
 80019e0:	e9c7 0104 	strd	r0, r1, [r7, #16]
				angular_velocities[0],
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3334      	adds	r3, #52	@ 0x34
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fbae 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80019f0:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdcf 	bl	8000598 <__aeabi_f2d>
 80019fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_velocities[1],
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3334      	adds	r3, #52	@ 0x34
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fba1 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 8001a0a:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fdc2 	bl	8000598 <__aeabi_f2d>
 8001a14:	e9c7 0100 	strd	r0, r1, [r7]
				angular_velocities[2],
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	3334      	adds	r3, #52	@ 0x34
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fb94 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 8001a24:	4603      	mov	r3, r0
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fdb5 	bl	8000598 <__aeabi_f2d>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	460d      	mov	r5, r1
				temperature);
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		snprintf(string, 128, "BMI088 %.2f %.2f %.2f %.2f %.2f %.2f %.2f",
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fdae 	bl	8000598 <__aeabi_f2d>
 8001a3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a40:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8001a44:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8001a48:	ed97 7b00 	vldr	d7, [r7]
 8001a4c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a50:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a58:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a60:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001a64:	e9cd 8900 	strd	r8, r9, [sp]
 8001a68:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <_ZN6BMI08815log_data_to_gcsEv+0x130>)
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f012 f931 	bl	8013cd4 <sniprintf>
	}
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fadd 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fad8 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 8001a86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fe13 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
}
 8001a92:	bf00      	nop
 8001a94:	37a8      	adds	r7, #168	@ 0xa8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9c:	08016050 	.word	0x08016050

08001aa0 <_ZN6BMI08819read_accel_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMI088::read_accel_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa4:	b091      	sub	sp, #68	@ 0x44
 8001aa6:	af02      	add	r7, sp, #8
 8001aa8:	6178      	str	r0, [r7, #20]
 8001aaa:	60fa      	str	r2, [r7, #12]
 8001aac:	461a      	mov	r2, r3
 8001aae:	460b      	mov	r3, r1
 8001ab0:	74fb      	strb	r3, [r7, #19]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
	}

	return status;
}
 8001ab6:	466b      	mov	r3, sp
 8001ab8:	461e      	mov	r6, r3
	bool status = false;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t num_bytes = data_len + 2;
 8001ac0:	8a3b      	ldrh	r3, [r7, #16]
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t tx_buffer[num_bytes];
 8001ac6:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001ac8:	460b      	mov	r3, r1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ace:	b28b      	uxth	r3, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	00c3      	lsls	r3, r0, #3
 8001ae2:	6838      	ldr	r0, [r7, #0]
 8001ae4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	00c2      	lsls	r2, r0, #3
 8001aec:	b28b      	uxth	r3, r1
 8001aee:	2200      	movs	r2, #0
 8001af0:	469a      	mov	sl, r3
 8001af2:	4693      	mov	fp, r2
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b08:	460b      	mov	r3, r1
 8001b0a:	3307      	adds	r3, #7
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	ebad 0d03 	sub.w	sp, sp, r3
 8001b14:	ab02      	add	r3, sp, #8
 8001b16:	3300      	adds	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t rx_buffer[num_bytes];
 8001b1a:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	b28b      	uxth	r3, r1
 8001b24:	2200      	movs	r2, #0
 8001b26:	4698      	mov	r8, r3
 8001b28:	4691      	mov	r9, r2
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3e:	b28b      	uxth	r3, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	461c      	mov	r4, r3
 8001b44:	4615      	mov	r5, r2
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	00eb      	lsls	r3, r5, #3
 8001b50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b54:	00e2      	lsls	r2, r4, #3
 8001b56:	460b      	mov	r3, r1
 8001b58:	3307      	adds	r3, #7
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	ebad 0d03 	sub.w	sp, sp, r3
 8001b62:	ab02      	add	r3, sp, #8
 8001b64:	3300      	adds	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < num_bytes; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b6c:	e00c      	b.n	8001b88 <_ZN6BMI08819read_accel_registerEhPht+0xe8>
		tx_buffer[i] = 0;
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b72:	4413      	add	r3, r2
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b7c:	4413      	add	r3, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b84:	3301      	adds	r3, #1
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b88:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001b8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbee      	blt.n	8001b6e <_ZN6BMI08819read_accel_registerEhPht+0xce>
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001b90:	7cfb      	ldrb	r3, [r7, #19]
 8001b92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fa30 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	6898      	ldr	r0, [r3, #8]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	8a1b      	ldrh	r3, [r3, #16]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f003 fc8a 	bl	80054d0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(&spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001bc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bcc:	f007 fa53 	bl	8009076 <HAL_SPI_TransmitReceive>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	6898      	ldr	r0, [r3, #8]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	8a1b      	ldrh	r3, [r3, #16]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	f003 fc71 	bl	80054d0 <HAL_GPIO_WritePin>
	}
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa1f 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <_ZN6BMI08819read_accel_registerEhPht+0x188>
		for (int i = 2; i < num_bytes; i++)
 8001c00:	2302      	movs	r3, #2
 8001c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c04:	e00b      	b.n	8001c1e <_ZN6BMI08819read_accel_registerEhPht+0x17e>
			rx_data[i - 2] = rx_buffer[i];
 8001c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c08:	3b02      	subs	r3, #2
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	69f9      	ldr	r1, [r7, #28]
 8001c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c12:	440a      	add	r2, r1
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 8001c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbef      	blt.n	8001c06 <_ZN6BMI08819read_accel_registerEhPht+0x166>
 8001c26:	e003      	b.n	8001c30 <_ZN6BMI08819read_accel_registerEhPht+0x190>
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <_ZN6BMI08819read_accel_registerEhPht+0x1a0>)
 8001c2c:	f001 fd44 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c34:	46b5      	mov	sp, r6
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	373c      	adds	r7, #60	@ 0x3c
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c40:	0801607c 	.word	0x0801607c

08001c44 <_ZN6BMI08818read_gyro_registerEhPht>:

bool BMI088::read_gyro_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c48:	b091      	sub	sp, #68	@ 0x44
 8001c4a:	af02      	add	r7, sp, #8
 8001c4c:	6178      	str	r0, [r7, #20]
 8001c4e:	60fa      	str	r2, [r7, #12]
 8001c50:	461a      	mov	r2, r3
 8001c52:	460b      	mov	r3, r1
 8001c54:	74fb      	strb	r3, [r7, #19]
 8001c56:	4613      	mov	r3, r2
 8001c58:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
	}

	return status;
}
 8001c5a:	466b      	mov	r3, sp
 8001c5c:	461e      	mov	r6, r3
	bool status = false;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint16_t num_bytes = data_len + 1;
 8001c64:	8a3b      	ldrh	r3, [r7, #16]
 8001c66:	3301      	adds	r3, #1
 8001c68:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t tx_buffer[num_bytes];
 8001c6a:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c72:	b28b      	uxth	r3, r1
 8001c74:	2200      	movs	r2, #0
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	00c3      	lsls	r3, r0, #3
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	00c2      	lsls	r2, r0, #3
 8001c90:	b28b      	uxth	r3, r1
 8001c92:	2200      	movs	r2, #0
 8001c94:	469a      	mov	sl, r3
 8001c96:	4693      	mov	fp, r2
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ca4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cac:	460b      	mov	r3, r1
 8001cae:	3307      	adds	r3, #7
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	ebad 0d03 	sub.w	sp, sp, r3
 8001cb8:	ab02      	add	r3, sp, #8
 8001cba:	3300      	adds	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t rx_buffer[num_bytes];
 8001cbe:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	b28b      	uxth	r3, r1
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4698      	mov	r8, r3
 8001ccc:	4691      	mov	r9, r2
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ce2:	b28b      	uxth	r3, r1
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	461c      	mov	r4, r3
 8001ce8:	4615      	mov	r5, r2
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	00eb      	lsls	r3, r5, #3
 8001cf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf8:	00e2      	lsls	r2, r4, #3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	ebad 0d03 	sub.w	sp, sp, r3
 8001d06:	ab02      	add	r3, sp, #8
 8001d08:	3300      	adds	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < num_bytes; i++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d10:	e00c      	b.n	8001d2c <_ZN6BMI08818read_gyro_registerEhPht+0xe8>
		tx_buffer[i] = 0;
 8001d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d16:	4413      	add	r3, r2
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d20:	4413      	add	r3, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d28:	3301      	adds	r3, #1
 8001d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbee      	blt.n	8001d12 <_ZN6BMI08818read_gyro_registerEhPht+0xce>
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f95e 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	68d8      	ldr	r0, [r3, #12]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	8a5b      	ldrh	r3, [r3, #18]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f003 fbb8 	bl	80054d0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(&spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d70:	f007 f981 	bl	8009076 <HAL_SPI_TransmitReceive>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf0c      	ite	eq
 8001d7a:	2301      	moveq	r3, #1
 8001d7c:	2300      	movne	r3, #0
 8001d7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	68d8      	ldr	r0, [r3, #12]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	8a5b      	ldrh	r3, [r3, #18]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f003 fb9f 	bl	80054d0 <HAL_GPIO_WritePin>
	}
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f94d 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <_ZN6BMI08818read_gyro_registerEhPht+0x188>
		for (int i = 1; i < num_bytes; i++)
 8001da4:	2301      	movs	r3, #1
 8001da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001da8:	e00b      	b.n	8001dc2 <_ZN6BMI08818read_gyro_registerEhPht+0x17e>
			rx_data[i - 1] = rx_buffer[i];
 8001daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dac:	3b01      	subs	r3, #1
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	69f9      	ldr	r1, [r7, #28]
 8001db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db6:	440a      	add	r2, r1
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbef      	blt.n	8001daa <_ZN6BMI08818read_gyro_registerEhPht+0x166>
 8001dca:	e003      	b.n	8001dd4 <_ZN6BMI08818read_gyro_registerEhPht+0x190>
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <_ZN6BMI08818read_gyro_registerEhPht+0x1a0>)
 8001dd0:	f001 fc72 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dd8:	46b5      	mov	sp, r6
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	373c      	adds	r7, #60	@ 0x3c
 8001dde:	46bd      	mov	sp, r7
 8001de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001de4:	080160a8 	.word	0x080160a8

08001de8 <_ZN6BMI08820write_accel_registerEhPht>:

bool BMI088::write_accel_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dec:	b08b      	sub	sp, #44	@ 0x2c
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	461a      	mov	r2, r3
 8001df6:	460b      	mov	r3, r1
 8001df8:	72fb      	strb	r3, [r7, #11]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
	}

	return status;
}
 8001dfe:	466b      	mov	r3, sp
 8001e00:	461e      	mov	r6, r3
	bool status = false;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001e08:	893b      	ldrh	r3, [r7, #8]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001e0e:	8c39      	ldrh	r1, [r7, #32]
 8001e10:	460b      	mov	r3, r1
 8001e12:	3b01      	subs	r3, #1
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	b28b      	uxth	r3, r1
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	4691      	mov	r9, r2
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e32:	b28b      	uxth	r3, r1
 8001e34:	2200      	movs	r2, #0
 8001e36:	461c      	mov	r4, r3
 8001e38:	4615      	mov	r5, r2
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	00eb      	lsls	r3, r5, #3
 8001e44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e48:	00e2      	lsls	r2, r4, #3
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	3307      	adds	r3, #7
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	ebad 0d03 	sub.w	sp, sp, r3
 8001e56:	466b      	mov	r3, sp
 8001e58:	3300      	adds	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
	tx_buffer[0] = reg_addr;	// Write operation
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	7afa      	ldrb	r2, [r7, #11]
 8001e60:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e66:	e00c      	b.n	8001e82 <_ZN6BMI08820write_accel_registerEhPht+0x9a>
		tx_buffer[i] = tx_data[i - 1];
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	7819      	ldrb	r1, [r3, #0]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	4413      	add	r3, r2
 8001e78:	460a      	mov	r2, r1
 8001e7a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	3301      	adds	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e82:	8c3b      	ldrh	r3, [r7, #32]
 8001e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbee      	blt.n	8001e68 <_ZN6BMI08820write_accel_registerEhPht+0x80>
		np::lock_guard lock(spi_mutex);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f8b9 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6898      	ldr	r0, [r3, #8]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8a1b      	ldrh	r3, [r3, #16]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f003 fb13 	bl	80054d0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(&spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	8c3a      	ldrh	r2, [r7, #32]
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eb4:	69b9      	ldr	r1, [r7, #24]
 8001eb6:	f006 ff68 	bl	8008d8a <HAL_SPI_Transmit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6898      	ldr	r0, [r3, #8]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8a1b      	ldrh	r3, [r3, #16]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f003 fafc 	bl	80054d0 <HAL_GPIO_WritePin>
	}
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f8aa 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8001ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <_ZN6BMI08820write_accel_registerEhPht+0x110>
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <_ZN6BMI08820write_accel_registerEhPht+0x120>)
 8001ef4:	f001 fbe0 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001efc:	46b5      	mov	sp, r6
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	372c      	adds	r7, #44	@ 0x2c
 8001f02:	46bd      	mov	sp, r7
 8001f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f08:	080160d0 	.word	0x080160d0

08001f0c <_ZN6BMI08819write_gyro_registerEhPht>:

bool BMI088::write_gyro_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f10:	b08b      	sub	sp, #44	@ 0x2c
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	72fb      	strb	r3, [r7, #11]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
	}

	return status;
}
 8001f22:	466b      	mov	r3, sp
 8001f24:	461e      	mov	r6, r3
	bool status = false;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001f2c:	893b      	ldrh	r3, [r7, #8]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001f32:	8c39      	ldrh	r1, [r7, #32]
 8001f34:	460b      	mov	r3, r1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	b28b      	uxth	r3, r1
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4698      	mov	r8, r3
 8001f40:	4691      	mov	r9, r2
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f56:	b28b      	uxth	r3, r1
 8001f58:	2200      	movs	r2, #0
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	4615      	mov	r5, r2
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	00eb      	lsls	r3, r5, #3
 8001f68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f6c:	00e2      	lsls	r2, r4, #3
 8001f6e:	460b      	mov	r3, r1
 8001f70:	3307      	adds	r3, #7
 8001f72:	08db      	lsrs	r3, r3, #3
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	ebad 0d03 	sub.w	sp, sp, r3
 8001f7a:	466b      	mov	r3, sp
 8001f7c:	3300      	adds	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
	tx_buffer[0] = reg_addr;	// Write operation
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	7afa      	ldrb	r2, [r7, #11]
 8001f84:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001f86:	2301      	movs	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8a:	e00c      	b.n	8001fa6 <_ZN6BMI08819write_gyro_registerEhPht+0x9a>
		tx_buffer[i] = tx_data[i - 1];
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	7819      	ldrb	r1, [r3, #0]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	4413      	add	r3, r2
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa6:	8c3b      	ldrh	r3, [r7, #32]
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbee      	blt.n	8001f8c <_ZN6BMI08819write_gyro_registerEhPht+0x80>
		np::lock_guard lock(spi_mutex);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f827 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	68d8      	ldr	r0, [r3, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8a5b      	ldrh	r3, [r3, #18]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f003 fa81 	bl	80054d0 <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(&spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	8c3a      	ldrh	r2, [r7, #32]
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fd8:	69b9      	ldr	r1, [r7, #24]
 8001fda:	f006 fed6 	bl	8008d8a <HAL_SPI_Transmit>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68d8      	ldr	r0, [r3, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8a5b      	ldrh	r3, [r3, #18]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f003 fa6a 	bl	80054d0 <HAL_GPIO_WritePin>
	}
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f818 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8002006:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <_ZN6BMI08819write_gyro_registerEhPht+0x110>
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 8002014:	2102      	movs	r1, #2
 8002016:	4805      	ldr	r0, [pc, #20]	@ (800202c <_ZN6BMI08819write_gyro_registerEhPht+0x120>)
 8002018:	f001 fb4e 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	return status;
 800201c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002020:	46b5      	mov	sp, r6
}
 8002022:	4618      	mov	r0, r3
 8002024:	372c      	adds	r7, #44	@ 0x2c
 8002026:	46bd      	mov	sp, r7
 8002028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800202c:	08016100 	.word	0x08016100

08002030 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f895 	bl	800216a <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002040:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f89a 	bl	8002184 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>
 8002050:	4604      	mov	r4, r0
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f8a3 	bl	800219e <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>
 8002058:	4603      	mov	r3, r0
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	4620      	mov	r0, r4
 8002060:	f000 f8a8 	bl	80021b4 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
	__ptr = pointer();
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
      }
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}

08002074 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // Capacity.
      [[__gnu__::__const__, __nodiscard__]]
      constexpr size_type
      size() const noexcept { return _Nm; }
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	2303      	movs	r3, #3
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>:
      empty() const noexcept { return size() == 0; }

      // Element access.
      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f89b 	bl	80021d4 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>
 800209e:	4603      	mov	r3, r0
      }
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	ed2d 8b02 	vpush	{d8}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80020b8:	2014      	movs	r0, #20
 80020ba:	f010 fad1 	bl	8012660 <_Znwj>
 80020be:	4603      	mov	r3, r0
 80020c0:	461c      	mov	r4, r3
 80020c2:	68b8      	ldr	r0, [r7, #8]
 80020c4:	f000 f895 	bl	80021f2 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80020c8:	4603      	mov	r3, r0
 80020ca:	ed93 8a00 	vldr	s16, [r3]
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f88f 	bl	80021f2 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80020d4:	4603      	mov	r3, r0
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	eef0 0a67 	vmov.f32	s1, s15
 80020de:	eeb0 0a48 	vmov.f32	s0, s16
 80020e2:	4620      	mov	r0, r4
 80020e4:	f001 fcf8 	bl	8003ad8 <_ZN9IIRFilterC1Eff>
 80020e8:	4621      	mov	r1, r4
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f89c 	bl	8002228 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	ecbd 8b02 	vpop	{d8}
 80020fa:	bd90      	pop	{r4, r7, pc}

080020fc <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8002106:	6838      	ldr	r0, [r7, #0]
 8002108:	f000 f8bd 	bl	8002286 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>
 800210c:	4603      	mov	r3, r0
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f898 	bl	8002246 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8002116:	6838      	ldr	r0, [r7, #0]
 8002118:	f000 f8ca 	bl	80022b0 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 800211c:	4603      	mov	r3, r0
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f8d3 	bl	80022ca <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8c3 	bl	80022b0 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800212a:	687b      	ldr	r3, [r7, #4]
      }
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	return get();
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f8cf 	bl	80022e0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>
 8002142:	4603      	mov	r3, r0
      }
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZNSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) noexcept
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f8cd 	bl	80022fa <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 8002160:	4603      	mov	r3, r0
      }
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f8cf 	bl	8002318 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800217a:	4603      	mov	r3, r0
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f88e 	bl	80022b0 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 8002194:	4603      	mov	r3, r0
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>:
      operator()(_Tp* __ptr) const
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <_ZNKSt14default_deleteI9IIRFilterEclEPS0_+0x18>
 80021c4:	2114      	movs	r1, #20
 80021c6:	4618      	mov	r0, r3
 80021c8:	f010 fa48 	bl	801265c <_ZdlPvj>
      }
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f88a 	bl	8002332 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffe6 	bl	8002208 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff8a 	bl	800216a <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002256:	4603      	mov	r3, r0
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800225c:	683c      	ldr	r4, [r7, #0]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff83 	bl	800216a <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002264:	4603      	mov	r3, r0
 8002266:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f81e 	bl	80022b0 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 8002274:	4603      	mov	r3, r0
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff9b 	bl	80021b4 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
      }
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bd90      	pop	{r4, r7, pc}

08002286 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff6b 	bl	800216a <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8002294:	4603      	mov	r3, r0
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff65 	bl	800216a <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
	return __p;
 80022a6:	68fb      	ldr	r3, [r7, #12]
      }
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f84d 	bl	800235a <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f841 	bl	8002372 <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f833 	bl	800238e <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002328:	4603      	mov	r3, r0
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002332:	b590      	push	{r4, r7, lr}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fe22 	bl	8000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8002344:	683c      	ldr	r4, [r7, #0]
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff0f 	bl	800216a <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 800234c:	4603      	mov	r3, r0
 800234e:	601c      	str	r4, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bd90      	pop	{r4, r7, pc}

0800235a <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f81f 	bl	80023a6 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002368:	4603      	mov	r3, r0
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f81e 	bl	80023be <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8002382:	4603      	mov	r3, r0
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f81e 	bl	80023d8 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>
 800239c:	4603      	mov	r3, r0
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f81f 	bl	80023f2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f81e 	bl	800240a <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f81d 	bl	8002422 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f81c 	bl	8002438 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>
 8002400:	4603      	mov	r3, r0
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f81b 	bl	800244e <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f805 	bl	8002468 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>
 800245e:	4603      	mov	r3, r0
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_ZN6BMP388C1ER19__I2C_HandleTypeDefRPvS3_>:
#include "Drivers/usb.hpp"
#include "Utility/lock_guard.hpp"
#include <cmath>
#include <cstdio>

BMP388::BMP388(I2C_HandleTypeDef& i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& baro_data_mutex)
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	605a      	str	r2, [r3, #4]
	 baro_data_mutex(baro_data_mutex) {}
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2276      	movs	r2, #118	@ 0x76
 800249c:	721a      	strb	r2, [r3, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <_ZN6BMP3884initEv>:

bool BMP388::init()
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	bool status = false;
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 80024c0:	2300      	movs	r3, #0
 80024c2:	733b      	strb	r3, [r7, #12]
	status = read_register(REG_CHIP_ID, rx_data, 1);
 80024c4:	f107 020c 	add.w	r2, r7, #12
 80024c8:	2301      	movs	r3, #1
 80024ca:	2100      	movs	r1, #0
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fd35 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 80024d2:	4603      	mov	r3, r0
 80024d4:	75fb      	strb	r3, [r7, #23]
	if (status && rx_data[0] == 0x50)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <_ZN6BMP3884initEv+0x60>
 80024dc:	7b3b      	ldrb	r3, [r7, #12]
 80024de:	2b50      	cmp	r3, #80	@ 0x50
 80024e0:	d118      	bne.n	8002514 <_ZN6BMP3884initEv+0x60>
	{
		USB_Log("Found BMP388, starting initialization.", CRITICAL);
 80024e2:	2101      	movs	r1, #1
 80024e4:	485b      	ldr	r0, [pc, #364]	@ (8002654 <_ZN6BMP3884initEv+0x1a0>)
 80024e6:	f001 f8e7 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 80024ea:	200a      	movs	r0, #10
 80024ec:	f00b ff0f 	bl	800e30e <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0xB6;
 80024f0:	23b6      	movs	r3, #182	@ 0xb6
 80024f2:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CMD, tx_data, 1);
 80024f4:	f107 0210 	add.w	r2, r7, #16
 80024f8:	2301      	movs	r3, #1
 80024fa:	217e      	movs	r1, #126	@ 0x7e
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fd5f 	bl	8002fc0 <_ZN6BMP38814write_registerEhPht>
 8002502:	4603      	mov	r3, r0
 8002504:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <_ZN6BMP3884initEv+0x6c>
 8002512:	e007      	b.n	8002524 <_ZN6BMP3884initEv+0x70>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8002514:	2102      	movs	r1, #2
 8002516:	4850      	ldr	r0, [pc, #320]	@ (8002658 <_ZN6BMP3884initEv+0x1a4>)
 8002518:	f001 f8ce 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
		return false;
 800251c:	2300      	movs	r3, #0
 800251e:	e094      	b.n	800264a <_ZN6BMP3884initEv+0x196>
	if (!status) return status;
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	e092      	b.n	800264a <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002524:	200a      	movs	r0, #10
 8002526:	f00b fef2 	bl	800e30e <osDelay>

	// Read, calculate, and store calibration coefficients
	status = read_calibration_nvm();
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa66 	bl	80029fc <_ZN6BMP38820read_calibration_nvmEv>
 8002530:	4603      	mov	r3, r0
 8002532:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	f083 0301 	eor.w	r3, r3, #1
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <_ZN6BMP3884initEv+0x90>
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	e082      	b.n	800264a <_ZN6BMP3884initEv+0x196>

	// Set pressure measurement to ultra-high resolution (x16 over-sampling, 20 bit / 0.17 Pa),
	// set temperature measurement to low power (x2 over-sampling, 17 bit / 0.0025 degC)
	tx_data[0] = 0x0C;
 8002544:	230c      	movs	r3, #12
 8002546:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_OSR, tx_data, 1);
 8002548:	f107 0210 	add.w	r2, r7, #16
 800254c:	2301      	movs	r3, #1
 800254e:	211c      	movs	r1, #28
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fd35 	bl	8002fc0 <_ZN6BMP38814write_registerEhPht>
 8002556:	4603      	mov	r3, r0
 8002558:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <_ZN6BMP3884initEv+0xb6>
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	e06f      	b.n	800264a <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 800256a:	200a      	movs	r0, #10
 800256c:	f00b fecf 	bl	800e30e <osDelay>

	// Set 25Hz ODR
	tx_data[0] = 0x03;
 8002570:	2303      	movs	r3, #3
 8002572:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_ODR, tx_data, 1);
 8002574:	f107 0210 	add.w	r2, r7, #16
 8002578:	2301      	movs	r3, #1
 800257a:	211d      	movs	r1, #29
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fd1f 	bl	8002fc0 <_ZN6BMP38814write_registerEhPht>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <_ZN6BMP3884initEv+0xe2>
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	e059      	b.n	800264a <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002596:	200a      	movs	r0, #10
 8002598:	f00b feb9 	bl	800e30e <osDelay>

	// Set IIR filter coefficient to 15
	tx_data[0] = 0x04;
 800259c:	2304      	movs	r3, #4
 800259e:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CONFIG, tx_data, 1);
 80025a0:	f107 0210 	add.w	r2, r7, #16
 80025a4:	2301      	movs	r3, #1
 80025a6:	211f      	movs	r1, #31
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fd09 	bl	8002fc0 <_ZN6BMP38814write_registerEhPht>
 80025ae:	4603      	mov	r3, r0
 80025b0:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	f083 0301 	eor.w	r3, r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <_ZN6BMP3884initEv+0x10e>
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	e043      	b.n	800264a <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 80025c2:	200a      	movs	r0, #10
 80025c4:	f00b fea3 	bl	800e30e <osDelay>

	// Compute startup pressure for initial altitude reference
	status = compute_startup_pressure();
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fc53 	bl	8002e74 <_ZN6BMP38824compute_startup_pressureEv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	f083 0301 	eor.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <_ZN6BMP3884initEv+0x12e>
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	e033      	b.n	800264a <_ZN6BMP3884initEv+0x196>

	// Switch device into normal mode and enable pressure, temperature sensor
	tx_data[0] = 0x33;
 80025e2:	2333      	movs	r3, #51	@ 0x33
 80025e4:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_PWR_CTRL, tx_data, 1);
 80025e6:	f107 0210 	add.w	r2, r7, #16
 80025ea:	2301      	movs	r3, #1
 80025ec:	211b      	movs	r1, #27
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fce6 	bl	8002fc0 <_ZN6BMP38814write_registerEhPht>
 80025f4:	4603      	mov	r3, r0
 80025f6:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	f083 0301 	eor.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <_ZN6BMP3884initEv+0x154>
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	e020      	b.n	800264a <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002608:	200a      	movs	r0, #10
 800260a:	f00b fe80 	bl	800e30e <osDelay>

	// Enable data ready interrupt (temperature and pressure) and configure INT pin (active high, push-pull)
	tx_data[0] = 0x42;
 800260e:	2342      	movs	r3, #66	@ 0x42
 8002610:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_INT_CTRL, tx_data, 1);
 8002612:	f107 0210 	add.w	r2, r7, #16
 8002616:	2301      	movs	r3, #1
 8002618:	2119      	movs	r1, #25
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fcd0 	bl	8002fc0 <_ZN6BMP38814write_registerEhPht>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	f083 0301 	eor.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <_ZN6BMP3884initEv+0x180>
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	e00a      	b.n	800264a <_ZN6BMP3884initEv+0x196>
	osDelay(10);
 8002634:	200a      	movs	r0, #10
 8002636:	f00b fe6a 	bl	800e30e <osDelay>

	USB_Log("BMP388 initialized OK.", CRITICAL);
 800263a:	2101      	movs	r1, #1
 800263c:	4807      	ldr	r0, [pc, #28]	@ (800265c <_ZN6BMP3884initEv+0x1a8>)
 800263e:	f001 f83b 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 8002642:	2064      	movs	r0, #100	@ 0x64
 8002644:	f00b fe63 	bl	800e30e <osDelay>

	return status;
 8002648:	7dfb      	ldrb	r3, [r7, #23]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	0801612c 	.word	0x0801612c
 8002658:	08016154 	.word	0x08016154
 800265c:	08016184 	.word	0x08016184

08002660 <_ZN6BMP38811service_irqEv>:

bool BMP388::service_irq()
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b092      	sub	sp, #72	@ 0x48
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	// Compute compensated temperature

	uint8_t rx_temp_data[3];
	bool status_temp = read_register(REG_DATA_3, rx_temp_data, sizeof(rx_temp_data));
 8002668:	f107 0214 	add.w	r2, r7, #20
 800266c:	2303      	movs	r3, #3
 800266e:	2107      	movs	r1, #7
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fc63 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (status_temp)
 800267c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002680:	2b00      	cmp	r3, #0
 8002682:	d039      	beq.n	80026f8 <_ZN6BMP38811service_irqEv+0x98>
	{
		uint32_t temp_raw = (rx_temp_data[2] << 16) | (rx_temp_data[1] << 8) | rx_temp_data[0];
 8002684:	7dbb      	ldrb	r3, [r7, #22]
 8002686:	041a      	lsls	r2, r3, #16
 8002688:	7d7b      	ldrb	r3, [r7, #21]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	4313      	orrs	r3, r2
 800268e:	7d3a      	ldrb	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	643b      	str	r3, [r7, #64]	@ 0x40

		float temp_partial_data1 = (float)temp_raw - calib_data.par_t1;
 8002694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80026a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float temp_partial_data2 = temp_partial_data1 * calib_data.par_t2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80026b2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		np::lock_guard lock(baro_data_mutex);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fc9f 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_partial_data2 + (temp_partial_data1 * temp_partial_data1) * calib_data.par_t3;
 80026ce:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80026d2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80026dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	}
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fc9f 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	// Compute compensated pressure

	uint8_t rx_press_data[3];
	bool status_pressure = read_register(REG_DATA_0, rx_press_data, sizeof(rx_press_data));
 80026f8:	f107 0210 	add.w	r2, r7, #16
 80026fc:	2303      	movs	r3, #3
 80026fe:	2104      	movs	r1, #4
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fc1b 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	
	if (status_temp && status_pressure)
 800270c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8119 	beq.w	8002948 <_ZN6BMP38811service_irqEv+0x2e8>
 8002716:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8114 	beq.w	8002948 <_ZN6BMP38811service_irqEv+0x2e8>
	{
		uint32_t press_raw = (rx_press_data[2] << 16) | (rx_press_data[1] << 8) | rx_press_data[0];
 8002720:	7cbb      	ldrb	r3, [r7, #18]
 8002722:	041a      	lsls	r2, r3, #16
 8002724:	7c7b      	ldrb	r3, [r7, #17]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	4313      	orrs	r3, r2
 800272a:	7c3a      	ldrb	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	633b      	str	r3, [r7, #48]	@ 0x30

		np::lock_guard lock(baro_data_mutex);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fc66 	bl	800100c <_ZN2np10lock_guardC1ERPv>

		float press_partial_data1 = calib_data.par_p6 * temperature;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800274c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002750:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float press_partial_data2 = calib_data.par_p7 * (temperature * temperature);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		float press_partial_data3 = calib_data.par_p8 * (temperature * temperature * temperature);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800278e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002796:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out1 = calib_data.par_p5 + press_partial_data1 + press_partial_data2 + press_partial_data3;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80027a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80027a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80027ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80027b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b8:	edc7 7a08 	vstr	s15, [r7, #32]

		press_partial_data1 = calib_data.par_p2 * temperature;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	ed93 7a07 	vldr	s14, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p3 * (temperature * temperature);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	ed93 7a08 	vldr	s14, [r3, #32]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = calib_data.par_p4 * (temperature * temperature * temperature);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002800:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800280a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out2 = (float)press_raw * (calib_data.par_p1 + press_partial_data1 + press_partial_data2 + press_partial_data3);
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	edd3 6a06 	vldr	s13, [r3, #24]
 8002826:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800282a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800282e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002832:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002836:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800283a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	edc7 7a07 	vstr	s15, [r7, #28]

		press_partial_data1 = (float)press_raw * (float)press_raw;
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p9 + calib_data.par_p10 * temperature;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = press_partial_data1 *	press_partial_data2;
 8002880:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002884:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out3 = press_partial_data3 + ((float)press_raw * (float)press_raw * (float)press_raw) * calib_data.par_p11;
 8002890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80028bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80028c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c8:	edc7 7a06 	vstr	s15, [r7, #24]

		pressure = press_partial_out1 + press_partial_out2 + press_partial_out3;
 80028cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80028d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80028d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80028dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

		// Compute altitude

		if (pressure && startup_pressure)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80028ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	d022      	beq.n	800293c <_ZN6BMP38811service_irqEv+0x2dc>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80028fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d01a      	beq.n	800293c <_ZN6BMP38811service_irqEv+0x2dc>
		{
			altitude = 44330 * (1 - powf(pressure / startup_pressure, 1.0 / 5.25579));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002912:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002916:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002970 <_ZN6BMP38811service_irqEv+0x310>
 800291a:	eeb0 0a66 	vmov.f32	s0, s13
 800291e:	f00f febd 	bl	801269c <powf>
 8002922:	eef0 7a40 	vmov.f32	s15, s0
 8002926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002974 <_ZN6BMP38811service_irqEv+0x314>
 8002932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		}

		// Data ready INT cleared automatically 2.5 ms after the interrupt assertion
	}
 800293c:	f107 0308 	add.w	r3, r7, #8
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fb78 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8002946:	e003      	b.n	8002950 <_ZN6BMP38811service_irqEv+0x2f0>
	else
	{
		USB_Log("ERROR reading BMP388 data.", ERR);
 8002948:	2102      	movs	r1, #2
 800294a:	480b      	ldr	r0, [pc, #44]	@ (8002978 <_ZN6BMP38811service_irqEv+0x318>)
 800294c:	f000 feb4 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status_temp && status_pressure;
 8002950:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <_ZN6BMP38811service_irqEv+0x304>
 8002958:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <_ZN6BMP38811service_irqEv+0x304>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <_ZN6BMP38811service_irqEv+0x306>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3748      	adds	r7, #72	@ 0x48
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	3e42d52f 	.word	0x3e42d52f
 8002974:	472d2a00 	.word	0x472d2a00
 8002978:	0801619c 	.word	0x0801619c

0800297c <_ZN6BMP38815log_data_to_gcsEv>:

void BMP388::log_data_to_gcs()
{
 800297c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002980:	b0aa      	sub	sp, #168	@ 0xa8
 8002982:	af06      	add	r7, sp, #24
 8002984:	6078      	str	r0, [r7, #4]
	char string[128];
	{
		np::lock_guard lock(baro_data_mutex);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fb3b 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "BMP388 %.2f %.2f %.2f", pressure, altitude, temperature);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdfc 	bl	8000598 <__aeabi_f2d>
 80029a0:	4604      	mov	r4, r0
 80029a2:	460d      	mov	r5, r1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdf5 	bl	8000598 <__aeabi_f2d>
 80029ae:	4680      	mov	r8, r0
 80029b0:	4689      	mov	r9, r1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fdee 	bl	8000598 <__aeabi_f2d>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	f107 0010 	add.w	r0, r7, #16
 80029c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80029c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80029cc:	e9cd 4500 	strd	r4, r5, [sp]
 80029d0:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <_ZN6BMP38815log_data_to_gcsEv+0x7c>)
 80029d2:	2180      	movs	r1, #128	@ 0x80
 80029d4:	f011 f97e 	bl	8013cd4 <sniprintf>
	}
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fb2a 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	2103      	movs	r1, #3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fe65 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
}
 80029ee:	bf00      	nop
 80029f0:	3790      	adds	r7, #144	@ 0x90
 80029f2:	46bd      	mov	sp, r7
 80029f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029f8:	080161b8 	.word	0x080161b8

080029fc <_ZN6BMP38820read_calibration_nvmEv>:
	np::lock_guard lock(baro_data_mutex);
	return temperature;
}

bool BMP388::read_calibration_nvm()
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	@ 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	bool status = false;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t rx_data[2];

	// PAR T1
	status = read_register(REG_NVM_PAR_T1_LSB, rx_data, 2);
 8002a0a:	f107 020c 	add.w	r2, r7, #12
 8002a0e:	2302      	movs	r3, #2
 8002a10:	2131      	movs	r1, #49	@ 0x31
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa92 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a22:	f083 0301 	eor.w	r3, r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <_ZN6BMP38820read_calibration_nvmEv+0x36>
 8002a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a30:	e21b      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t1_raw = (rx_data[1] << 8) | rx_data[0];
 8002a32:	7b7b      	ldrb	r3, [r7, #13]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	7b3b      	ldrb	r3, [r7, #12]
 8002a3a:	b21b      	sxth	r3, r3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	84bb      	strh	r3, [r7, #36]	@ 0x24
	calib_data.par_t1 = (float)par_t1_raw / powf(2, -8);
 8002a42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a4c:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002d3c <_ZN6BMP38820read_calibration_nvmEv+0x340>
 8002a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	edc3 7a03 	vstr	s15, [r3, #12]

	// PAR T2
	status = read_register(REG_NVM_PAR_T2_LSB, rx_data, 2);
 8002a5a:	f107 020c 	add.w	r2, r7, #12
 8002a5e:	2302      	movs	r3, #2
 8002a60:	2133      	movs	r1, #51	@ 0x33
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa6a 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a72:	f083 0301 	eor.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <_ZN6BMP38820read_calibration_nvmEv+0x86>
 8002a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a80:	e1f3      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t2_raw = (rx_data[1] << 8) | rx_data[0];
 8002a82:	7b7b      	ldrb	r3, [r7, #13]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b21a      	sxth	r2, r3
 8002a88:	7b3b      	ldrb	r3, [r7, #12]
 8002a8a:	b21b      	sxth	r3, r3
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b21b      	sxth	r3, r3
 8002a90:	847b      	strh	r3, [r7, #34]	@ 0x22
	calib_data.par_t2 = (float)par_t2_raw / powf(2, 30);
 8002a92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a9c:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002d40 <_ZN6BMP38820read_calibration_nvmEv+0x344>
 8002aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	edc3 7a04 	vstr	s15, [r3, #16]

	// PAR T3
	status = read_register(REG_NVM_PAR_T3, rx_data, 1);
 8002aaa:	f107 020c 	add.w	r2, r7, #12
 8002aae:	2301      	movs	r3, #1
 8002ab0:	2135      	movs	r1, #53	@ 0x35
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa42 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ac2:	f083 0301 	eor.w	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <_ZN6BMP38820read_calibration_nvmEv+0xd6>
 8002acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ad0:	e1cb      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_t3_raw = rx_data[0];
 8002ad2:	7b3b      	ldrb	r3, [r7, #12]
 8002ad4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	calib_data.par_t3 = (float)par_t3_raw / powf(2, 48);
 8002ad8:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae4:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8002d64 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002ae8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	edc3 7a05 	vstr	s15, [r3, #20]

	// PAR P1
	status = read_register(REG_NVM_PAR_P1_LSB, rx_data, 2);
 8002af2:	f107 020c 	add.w	r2, r7, #12
 8002af6:	2302      	movs	r3, #2
 8002af8:	2136      	movs	r1, #54	@ 0x36
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa1e 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <_ZN6BMP38820read_calibration_nvmEv+0x11e>
 8002b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b18:	e1a7      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p1_raw = (rx_data[1] << 8) | rx_data[0];
 8002b1a:	7b7b      	ldrb	r3, [r7, #13]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	b21a      	sxth	r2, r3
 8002b20:	7b3b      	ldrb	r3, [r7, #12]
 8002b22:	b21b      	sxth	r3, r3
 8002b24:	4313      	orrs	r3, r2
 8002b26:	83fb      	strh	r3, [r7, #30]
	calib_data.par_p1 = ((float)par_p1_raw - powf(2, 14)) / powf(2, 20);
 8002b28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b34:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002d44 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002b38:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b3c:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8002d48 <_ZN6BMP38820read_calibration_nvmEv+0x34c>
 8002b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	edc3 7a06 	vstr	s15, [r3, #24]

	// PAR P2
	status = read_register(REG_NVM_PAR_P2_LSB, rx_data, 2);
 8002b4a:	f107 020c 	add.w	r2, r7, #12
 8002b4e:	2302      	movs	r3, #2
 8002b50:	2138      	movs	r1, #56	@ 0x38
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9f2 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b62:	f083 0301 	eor.w	r3, r3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <_ZN6BMP38820read_calibration_nvmEv+0x176>
 8002b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b70:	e17b      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p2_raw = (rx_data[1] << 8) | rx_data[0];
 8002b72:	7b7b      	ldrb	r3, [r7, #13]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	7b3b      	ldrb	r3, [r7, #12]
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	83bb      	strh	r3, [r7, #28]
	calib_data.par_p2 = ((float)par_p2_raw - powf(2, 14)) / powf(2, 29);
 8002b80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8c:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002d44 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002b90:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b94:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002d4c <_ZN6BMP38820read_calibration_nvmEv+0x350>
 8002b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	edc3 7a07 	vstr	s15, [r3, #28]

	// PAR P3
	status = read_register(REG_NVM_PAR_P3, rx_data, 1);
 8002ba2:	f107 020c 	add.w	r2, r7, #12
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	213a      	movs	r1, #58	@ 0x3a
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9c6 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <_ZN6BMP38820read_calibration_nvmEv+0x1ce>
 8002bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bc8:	e14f      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p3_raw = rx_data[0];
 8002bca:	7b3b      	ldrb	r3, [r7, #12]
 8002bcc:	76fb      	strb	r3, [r7, #27]
	calib_data.par_p3 = (float)par_p3_raw / powf(2, 32);
 8002bce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bda:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002d50 <_ZN6BMP38820read_calibration_nvmEv+0x354>
 8002bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edc3 7a08 	vstr	s15, [r3, #32]

	// PAR P4
	status = read_register(REG_NVM_PAR_P4, rx_data, 1);
 8002be8:	f107 020c 	add.w	r2, r7, #12
 8002bec:	2301      	movs	r3, #1
 8002bee:	213b      	movs	r1, #59	@ 0x3b
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f9a3 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c00:	f083 0301 	eor.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <_ZN6BMP38820read_calibration_nvmEv+0x214>
 8002c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c0e:	e12c      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p4_raw = rx_data[0];
 8002c10:	7b3b      	ldrb	r3, [r7, #12]
 8002c12:	76bb      	strb	r3, [r7, #26]
	calib_data.par_p4 = (float)par_p4_raw / powf(2, 37);
 8002c14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c20:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002d54 <_ZN6BMP38820read_calibration_nvmEv+0x358>
 8002c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// PAR P5
	status = read_register(REG_NVM_PAR_P5_LSB, rx_data, 2);
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	2302      	movs	r3, #2
 8002c34:	213c      	movs	r1, #60	@ 0x3c
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f980 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <_ZN6BMP38820read_calibration_nvmEv+0x25a>
 8002c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c54:	e109      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p5_raw = (rx_data[1] << 8) | rx_data[0];
 8002c56:	7b7b      	ldrb	r3, [r7, #13]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	b21a      	sxth	r2, r3
 8002c5c:	7b3b      	ldrb	r3, [r7, #12]
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	833b      	strh	r3, [r7, #24]
	calib_data.par_p5 = (float)par_p5_raw / powf(2, -3);
 8002c66:	8b3b      	ldrh	r3, [r7, #24]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c70:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8002c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// PAR P6
	status = read_register(REG_NVM_PAR_P6_LSB, rx_data, 2);
 8002c7e:	f107 020c 	add.w	r2, r7, #12
 8002c82:	2302      	movs	r3, #2
 8002c84:	213e      	movs	r1, #62	@ 0x3e
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f958 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c96:	f083 0301 	eor.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <_ZN6BMP38820read_calibration_nvmEv+0x2aa>
 8002ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca4:	e0e1      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p6_raw = (rx_data[1] << 8) | rx_data[0];
 8002ca6:	7b7b      	ldrb	r3, [r7, #13]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	7b3b      	ldrb	r3, [r7, #12]
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	82fb      	strh	r3, [r7, #22]
	calib_data.par_p6 = (float)par_p6_raw / powf(2, 6);
 8002cb6:	8afb      	ldrh	r3, [r7, #22]
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002d58 <_ZN6BMP38820read_calibration_nvmEv+0x35c>
 8002cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// PAR P7
	status = read_register(REG_NVM_PAR_P7, rx_data, 1);
 8002cce:	f107 020c 	add.w	r2, r7, #12
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	2140      	movs	r1, #64	@ 0x40
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f930 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <_ZN6BMP38820read_calibration_nvmEv+0x2fa>
 8002cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf4:	e0b9      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p7_raw = rx_data[0];
 8002cf6:	7b3b      	ldrb	r3, [r7, #12]
 8002cf8:	757b      	strb	r3, [r7, #21]
	calib_data.par_p7 = (float)par_p7_raw / powf(2, 8);
 8002cfa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d06:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002d5c <_ZN6BMP38820read_calibration_nvmEv+0x360>
 8002d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// PAR P8
	status = read_register(REG_NVM_PAR_P8, rx_data, 1);
 8002d14:	f107 020c 	add.w	r2, r7, #12
 8002d18:	2301      	movs	r3, #1
 8002d1a:	2141      	movs	r1, #65	@ 0x41
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f90d 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01a      	beq.n	8002d6c <_ZN6BMP38820read_calibration_nvmEv+0x370>
 8002d36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d3a:	e096      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
 8002d3c:	3b800000 	.word	0x3b800000
 8002d40:	4e800000 	.word	0x4e800000
 8002d44:	46800000 	.word	0x46800000
 8002d48:	49800000 	.word	0x49800000
 8002d4c:	4e000000 	.word	0x4e000000
 8002d50:	4f800000 	.word	0x4f800000
 8002d54:	52000000 	.word	0x52000000
 8002d58:	42800000 	.word	0x42800000
 8002d5c:	43800000 	.word	0x43800000
 8002d60:	47000000 	.word	0x47000000
 8002d64:	57800000 	.word	0x57800000
 8002d68:	60000000 	.word	0x60000000
	int8_t par_p8_raw = rx_data[0];
 8002d6c:	7b3b      	ldrb	r3, [r7, #12]
 8002d6e:	753b      	strb	r3, [r7, #20]
	calib_data.par_p8 = (float)par_p8_raw / powf(2, 15);
 8002d70:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d7c:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8002d60 <_ZN6BMP38820read_calibration_nvmEv+0x364>
 8002d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	// PAR P9
	status = read_register(REG_NVM_PAR_P9_LSB, rx_data, 2);
 8002d8a:	f107 020c 	add.w	r2, r7, #12
 8002d8e:	2302      	movs	r3, #2
 8002d90:	2142      	movs	r1, #66	@ 0x42
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8d2 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da2:	f083 0301 	eor.w	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <_ZN6BMP38820read_calibration_nvmEv+0x3b6>
 8002dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002db0:	e05b      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p9_raw = (rx_data[1] << 8) | rx_data[0];
 8002db2:	7b7b      	ldrb	r3, [r7, #13]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	b21a      	sxth	r2, r3
 8002db8:	7b3b      	ldrb	r3, [r7, #12]
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	827b      	strh	r3, [r7, #18]
	calib_data.par_p9 = (float)par_p9_raw / powf(2, 48);
 8002dc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dcc:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8002d64 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// PAR P10
	status = read_register(REG_NVM_PAR_P10, rx_data, 1);
 8002dda:	f107 020c 	add.w	r2, r7, #12
 8002dde:	2301      	movs	r3, #1
 8002de0:	2144      	movs	r1, #68	@ 0x44
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8aa 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002dee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <_ZN6BMP38820read_calibration_nvmEv+0x406>
 8002dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e00:	e033      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p10_raw = rx_data[0];
 8002e02:	7b3b      	ldrb	r3, [r7, #12]
 8002e04:	747b      	strb	r3, [r7, #17]
	calib_data.par_p10 = (float)par_p10_raw / powf(2, 48);
 8002e06:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e12:	ed5f 6a2c 	vldr	s13, [pc, #-176]	@ 8002d64 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	// PAR P11
	status = read_register(REG_NVM_PAR_P11, rx_data, 1);
 8002e20:	f107 020c 	add.w	r2, r7, #12
 8002e24:	2301      	movs	r3, #1
 8002e26:	2145      	movs	r1, #69	@ 0x45
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f887 	bl	8002f3c <_ZN6BMP38813read_registerEhPht>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e38:	f083 0301 	eor.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <_ZN6BMP38820read_calibration_nvmEv+0x44c>
 8002e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e46:	e010      	b.n	8002e6a <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p11_raw = rx_data[0];
 8002e48:	7b3b      	ldrb	r3, [r7, #12]
 8002e4a:	743b      	strb	r3, [r7, #16]
	calib_data.par_p11 = (float)par_p11_raw / powf(2, 65);
 8002e4c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e58:	ed5f 6a3d 	vldr	s13, [pc, #-244]	@ 8002d68 <_ZN6BMP38820read_calibration_nvmEv+0x36c>
 8002e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	return status;
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3728      	adds	r7, #40	@ 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop

08002e74 <_ZN6BMP38824compute_startup_pressureEv>:

bool BMP388::compute_startup_pressure()
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	/* Compute the average current pressure (for initial altitude reference) */
	bool status = false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	77fb      	strb	r3, [r7, #31]
	uint8_t tx_data[2];
	uint8_t sample_num = 50;
 8002e80:	2332      	movs	r3, #50	@ 0x32
 8002e82:	74fb      	strb	r3, [r7, #19]
	float running_pressure = 0;
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < sample_num; i++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e031      	b.n	8002ef4 <_ZN6BMP38824compute_startup_pressureEv+0x80>
	{
		// Switch sensor into forced mode (take one reading, return to sleep)
		tx_data[0] = 0x13;
 8002e90:	2313      	movs	r3, #19
 8002e92:	743b      	strb	r3, [r7, #16]
		status = write_register(REG_PWR_CTRL, tx_data, 1);
 8002e94:	f107 0210 	add.w	r2, r7, #16
 8002e98:	2301      	movs	r3, #1
 8002e9a:	211b      	movs	r1, #27
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f88f 	bl	8002fc0 <_ZN6BMP38814write_registerEhPht>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	77fb      	strb	r3, [r7, #31]
		if (!status) return status;
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	f083 0301 	eor.w	r3, r3, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <_ZN6BMP38824compute_startup_pressureEv+0x42>
 8002eb2:	7ffc      	ldrb	r4, [r7, #31]
 8002eb4:	e03c      	b.n	8002f30 <_ZN6BMP38824compute_startup_pressureEv+0xbc>
		osDelay(40);
 8002eb6:	2028      	movs	r0, #40	@ 0x28
 8002eb8:	f00b fa29 	bl	800e30e <osDelay>
		service_irq();
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fbcf 	bl	8002660 <_ZN6BMP38811service_irqEv>
		np::lock_guard lock(baro_data_mutex);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe f89d 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		running_pressure += pressure;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002ed8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee0:	edc7 7a06 	vstr	s15, [r7, #24]
	}
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe f8a4 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	for (int i = 0; i < sample_num; i++)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	dbc9      	blt.n	8002e90 <_ZN6BMP38824compute_startup_pressureEv+0x1c>
	np::lock_guard lock(baro_data_mutex);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f880 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	startup_pressure = running_pressure / sample_num;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f16:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	return status;
 8002f24:	7ffc      	ldrb	r4, [r7, #31]
}
 8002f26:	f107 030c 	add.w	r3, r7, #12
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f883 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8002f30:	4623      	mov	r3, r4
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	@ 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}
	...

08002f3c <_ZN6BMP38813read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMP388::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	@ 0x28
 8002f40:	af04      	add	r7, sp, #16
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	461a      	mov	r2, r3
 8002f48:	460b      	mov	r3, r1
 8002f4a:	72fb      	strb	r3, [r7, #11]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8002f50:	2300      	movs	r3, #0
 8002f52:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe f854 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(&i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	7a1b      	ldrb	r3, [r3, #8]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	b299      	uxth	r1, r3
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f78:	9302      	str	r3, [sp, #8]
 8002f7a:	893b      	ldrh	r3, [r7, #8]
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2301      	movs	r3, #1
 8002f84:	f002 fc84 	bl	8005890 <HAL_I2C_Mem_Read>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]
	}
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe f84c 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	f083 0301 	eor.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <_ZN6BMP38813read_registerEhPht+0x76>
	{
		USB_Log("BMP388 register read failed.\n", ERR);
 8002faa:	2102      	movs	r1, #2
 8002fac:	4803      	ldr	r0, [pc, #12]	@ (8002fbc <_ZN6BMP38813read_registerEhPht+0x80>)
 8002fae:	f000 fb83 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	080161d0 	.word	0x080161d0

08002fc0 <_ZN6BMP38814write_registerEhPht>:

bool BMP388::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af04      	add	r7, sp, #16
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	72fb      	strb	r3, [r7, #11]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f812 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(&i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	7a1b      	ldrb	r3, [r3, #8]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	b299      	uxth	r1, r3
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ffc:	9302      	str	r3, [sp, #8]
 8002ffe:	893b      	ldrh	r3, [r7, #8]
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2301      	movs	r3, #1
 8003008:	f002 fb2e 	bl	8005668 <HAL_I2C_Mem_Write>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	75fb      	strb	r3, [r7, #23]
	}
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe f80a 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <_ZN6BMP38814write_registerEhPht+0x76>
	{
		USB_Log("BMP388 register write failed.\n", ERR);
 800302e:	2102      	movs	r1, #2
 8003030:	4803      	ldr	r0, [pc, #12]	@ (8003040 <_ZN6BMP38814write_registerEhPht+0x80>)
 8003032:	f000 fb41 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8003036:	7dfb      	ldrb	r3, [r7, #23]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	080161f0 	.word	0x080161f0

08003044 <_ZN23LIS3MDL_CalibrationDataC1Ev>:
#define REG_INT_SRC					0x31
#define REG_INT_THS_L				0x32
#define REG_INT_THS_H				0x33


struct LIS3MDL_CalibrationData
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a09      	ldr	r2, [pc, #36]	@ (8003074 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x30>)
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a08      	ldr	r2, [pc, #32]	@ (8003078 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x34>)
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a08      	ldr	r2, [pc, #32]	@ (800307c <_ZN23LIS3MDL_CalibrationDataC1Ev+0x38>)
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a07      	ldr	r2, [pc, #28]	@ (8003080 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x3c>)
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	be9ff2e5 	.word	0xbe9ff2e5
 8003078:	be8b020c 	.word	0xbe8b020c
 800307c:	bdbc6a7f 	.word	0xbdbc6a7f
 8003080:	415bbb99 	.word	0x415bbb99

08003084 <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_>:
#include "Utility/lock_guard.hpp"
#include <cmath>
#include <cstdio>


LIS3MDL::LIS3MDL(I2C_HandleTypeDef& i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& mag_data_mutex)
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	605a      	str	r2, [r3, #4]
	 mag_data_mutex(mag_data_mutex) {}
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	221c      	movs	r2, #28
 80030a2:	721a      	strb	r2, [r3, #8]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	330c      	adds	r3, #12
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ffcb 	bl	8003044 <_ZN23LIS3MDL_CalibrationDataC1Ev>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_+0x58>)
 80030b2:	61da      	str	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	621a      	str	r2, [r3, #32]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3324      	adds	r3, #36	@ 0x24
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3334      	adds	r3, #52	@ 0x34
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	45d5d000 	.word	0x45d5d000

080030e0 <_ZN7LIS3MDL4initEv>:

bool LIS3MDL::init()
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	@ 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	bool status = false;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 80030ee:	2300      	movs	r3, #0
 80030f0:	753b      	strb	r3, [r7, #20]
	status = read_register(REG_WHO_AM_I, rx_data, 1);
 80030f2:	f107 0214 	add.w	r2, r7, #20
 80030f6:	2301      	movs	r3, #1
 80030f8:	210f      	movs	r1, #15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa50 	bl	80035a0 <_ZN7LIS3MDL13read_registerEhPht>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (status && rx_data[0] == 0x3D)
 8003106:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01d      	beq.n	800314a <_ZN7LIS3MDL4initEv+0x6a>
 800310e:	7d3b      	ldrb	r3, [r7, #20]
 8003110:	2b3d      	cmp	r3, #61	@ 0x3d
 8003112:	d11a      	bne.n	800314a <_ZN7LIS3MDL4initEv+0x6a>
	{
		USB_Log("Found LIS3MDL, starting initialization.", CRITICAL);
 8003114:	2101      	movs	r1, #1
 8003116:	4864      	ldr	r0, [pc, #400]	@ (80032a8 <_ZN7LIS3MDL4initEv+0x1c8>)
 8003118:	f000 face 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 800311c:	200a      	movs	r0, #10
 800311e:	f00b f8f6 	bl	800e30e <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0x04;
 8003122:	2304      	movs	r3, #4
 8003124:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 8003126:	f107 0218 	add.w	r2, r7, #24
 800312a:	2301      	movs	r3, #1
 800312c:	2121      	movs	r1, #33	@ 0x21
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa80 	bl	8003634 <_ZN7LIS3MDL14write_registerEhPht>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800313a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <_ZN7LIS3MDL4initEv+0x76>
 8003148:	e008      	b.n	800315c <_ZN7LIS3MDL4initEv+0x7c>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 800314a:	2102      	movs	r1, #2
 800314c:	4857      	ldr	r0, [pc, #348]	@ (80032ac <_ZN7LIS3MDL4initEv+0x1cc>)
 800314e:	f000 fab3 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
		return false;
 8003152:	2300      	movs	r3, #0
 8003154:	e0a3      	b.n	800329e <_ZN7LIS3MDL4initEv+0x1be>
	if (!status) return status;
 8003156:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800315a:	e0a0      	b.n	800329e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 800315c:	200a      	movs	r0, #10
 800315e:	f00b f8d6 	bl	800e30e <osDelay>

	// Set +-4G range
	tx_data[0] = 0x00;
 8003162:	2300      	movs	r3, #0
 8003164:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 8003166:	f107 0218 	add.w	r2, r7, #24
 800316a:	2301      	movs	r3, #1
 800316c:	2121      	movs	r1, #33	@ 0x21
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa60 	bl	8003634 <_ZN7LIS3MDL14write_registerEhPht>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800317a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800317e:	f083 0301 	eor.w	r3, r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <_ZN7LIS3MDL4initEv+0xae>
 8003188:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800318c:	e087      	b.n	800329e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 800318e:	200a      	movs	r0, #10
 8003190:	f00b f8bd 	bl	800e30e <osDelay>

	// Set X,Y axes ultra-high performance mode, 40Hz ODR, enable temperature sensor
	tx_data[0] = 0xF8;
 8003194:	23f8      	movs	r3, #248	@ 0xf8
 8003196:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG1, tx_data, 1);
 8003198:	f107 0218 	add.w	r2, r7, #24
 800319c:	2301      	movs	r3, #1
 800319e:	2120      	movs	r1, #32
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fa47 	bl	8003634 <_ZN7LIS3MDL14write_registerEhPht>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80031ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <_ZN7LIS3MDL4initEv+0xe0>
 80031ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031be:	e06e      	b.n	800329e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80031c0:	200a      	movs	r0, #10
 80031c2:	f00b f8a4 	bl	800e30e <osDelay>

	// Set Z axis ultra-high performance mode
	tx_data[0] = 0x0C;
 80031c6:	230c      	movs	r3, #12
 80031c8:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG4, tx_data, 1);
 80031ca:	f107 0218 	add.w	r2, r7, #24
 80031ce:	2301      	movs	r3, #1
 80031d0:	2123      	movs	r1, #35	@ 0x23
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fa2e 	bl	8003634 <_ZN7LIS3MDL14write_registerEhPht>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80031de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <_ZN7LIS3MDL4initEv+0x112>
 80031ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031f0:	e055      	b.n	800329e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 80031f2:	200a      	movs	r0, #10
 80031f4:	f00b f88b 	bl	800e30e <osDelay>

	// Initilize IIR Filters
	float ODR = 40;				// Hz
 80031f8:	4b2d      	ldr	r3, [pc, #180]	@ (80032b0 <_ZN7LIS3MDL4initEv+0x1d0>)
 80031fa:	613b      	str	r3, [r7, #16]
	float CUTOFF = 10;			// Hz
 80031fc:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <_ZN7LIS3MDL4initEv+0x1d4>)
 80031fe:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < filters.size(); i++)
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
 8003204:	e01d      	b.n	8003242 <_ZN7LIS3MDL4initEv+0x162>
	{
		filters[i] = std::make_unique<IIRFilter>(CUTOFF, ODR);
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	f107 0210 	add.w	r2, r7, #16
 800320e:	f107 010c 	add.w	r1, r7, #12
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe ff48 	bl	80020a8 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3334      	adds	r3, #52	@ 0x34
 800321c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe ff33 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003224:	4602      	mov	r2, r0
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f7fd ff69 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fefa 	bl	8002030 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < filters.size(); i++)
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	3301      	adds	r3, #1
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3334      	adds	r3, #52	@ 0x34
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe ff14 	bl	8002074 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	4293      	cmp	r3, r2
 8003252:	d3d8      	bcc.n	8003206 <_ZN7LIS3MDL4initEv+0x126>
	}

	// Switch to continuous-conversion mode
	tx_data[0] = 0x00;
 8003254:	2300      	movs	r3, #0
 8003256:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG3, tx_data, 1);
 8003258:	f107 0218 	add.w	r2, r7, #24
 800325c:	2301      	movs	r3, #1
 800325e:	2122      	movs	r1, #34	@ 0x22
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f9e7 	bl	8003634 <_ZN7LIS3MDL14write_registerEhPht>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 800326c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003270:	f083 0301 	eor.w	r3, r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <_ZN7LIS3MDL4initEv+0x1a0>
 800327a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800327e:	e00e      	b.n	800329e <_ZN7LIS3MDL4initEv+0x1be>
	osDelay(10);
 8003280:	200a      	movs	r0, #10
 8003282:	f00b f844 	bl	800e30e <osDelay>

	// Read data to clear DRDY interrupt
	service_irq();
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f81a 	bl	80032c0 <_ZN7LIS3MDL11service_irqEv>

	USB_Log("LIS3MDL initialized OK.", CRITICAL);
 800328c:	2101      	movs	r1, #1
 800328e:	480a      	ldr	r0, [pc, #40]	@ (80032b8 <_ZN7LIS3MDL4initEv+0x1d8>)
 8003290:	f000 fa12 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 8003294:	2064      	movs	r0, #100	@ 0x64
 8003296:	f00b f83a 	bl	800e30e <osDelay>

	return status;
 800329a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3728      	adds	r7, #40	@ 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	08016210 	.word	0x08016210
 80032ac:	08016238 	.word	0x08016238
 80032b0:	42200000 	.word	0x42200000
 80032b4:	41200000 	.word	0x41200000
 80032b8:	08016268 	.word	0x08016268
 80032bc:	00000000 	.word	0x00000000

080032c0 <_ZN7LIS3MDL11service_irqEv>:

bool LIS3MDL::service_irq()
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	ed2d 8b02 	vpush	{d8}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[6];
	bool status = read_register(REG_OUT_X_L, raw_data, sizeof(raw_data));
 80032cc:	f107 0210 	add.w	r2, r7, #16
 80032d0:	2306      	movs	r3, #6
 80032d2:	2128      	movs	r1, #40	@ 0x28
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f963 	bl	80035a0 <_ZN7LIS3MDL13read_registerEhPht>
 80032da:	4603      	mov	r3, r0
 80032dc:	77fb      	strb	r3, [r7, #31]

	if (status)
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80ec 	beq.w	80034be <_ZN7LIS3MDL11service_irqEv+0x1fe>
	{
		int16_t raw_x_int16 = (raw_data[1] << 8) | raw_data[0];
 80032e6:	7c7b      	ldrb	r3, [r7, #17]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	b21a      	sxth	r2, r3
 80032ec:	7c3b      	ldrb	r3, [r7, #16]
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	4313      	orrs	r3, r2
 80032f2:	83bb      	strh	r3, [r7, #28]
		int16_t raw_y_int16 = (raw_data[3] << 8) | raw_data[2];
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	b21a      	sxth	r2, r3
 80032fa:	7cbb      	ldrb	r3, [r7, #18]
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	4313      	orrs	r3, r2
 8003300:	837b      	strh	r3, [r7, #26]
		int16_t raw_z_int16 = (raw_data[5] << 8) | raw_data[4];
 8003302:	7d7b      	ldrb	r3, [r7, #21]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	b21a      	sxth	r2, r3
 8003308:	7d3b      	ldrb	r3, [r7, #20]
 800330a:	b21b      	sxth	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	833b      	strh	r3, [r7, #24]

		np::lock_guard lock(mag_data_mutex);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fe76 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		axis_intensities[0] = filters[0]->update((float)raw_x_int16 / LSB_per_gauss - calib_data.x_offset);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3334      	adds	r3, #52	@ 0x34
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe feaf 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 800332c:	4603      	mov	r3, r0
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe ff00 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8003334:	4602      	mov	r2, r0
 8003336:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	edd3 7a07 	vldr	s15, [r3, #28]
 8003348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003356:	eeb0 0a67 	vmov.f32	s0, s15
 800335a:	4610      	mov	r0, r2
 800335c:	f000 fc26 	bl	8003bac <_ZN9IIRFilter6updateEf>
 8003360:	eeb0 8a40 	vmov.f32	s16, s0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3324      	adds	r3, #36	@ 0x24
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe feee 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 8003370:	4603      	mov	r3, r0
 8003372:	ed83 8a00 	vstr	s16, [r3]
		axis_intensities[1] = filters[1]->update((float)raw_y_int16 / LSB_per_gauss - calib_data.y_offset);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3334      	adds	r3, #52	@ 0x34
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fe84 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003382:	4603      	mov	r3, r0
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fed5 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 800338a:	4602      	mov	r2, r0
 800338c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	edd3 7a07 	vldr	s15, [r3, #28]
 800339e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80033a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ac:	eeb0 0a67 	vmov.f32	s0, s15
 80033b0:	4610      	mov	r0, r2
 80033b2:	f000 fbfb 	bl	8003bac <_ZN9IIRFilter6updateEf>
 80033b6:	eeb0 8a40 	vmov.f32	s16, s0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3324      	adds	r3, #36	@ 0x24
 80033be:	2101      	movs	r1, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fec3 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 80033c6:	4603      	mov	r3, r0
 80033c8:	ed83 8a00 	vstr	s16, [r3]
		axis_intensities[2] = filters[2]->update((float)raw_z_int16 / LSB_per_gauss - calib_data.z_offset);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3334      	adds	r3, #52	@ 0x34
 80033d0:	2102      	movs	r1, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fe59 	bl	800208a <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80033d8:	4603      	mov	r3, r0
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe feaa 	bl	8002134 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80033e0:	4602      	mov	r2, r0
 80033e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80033f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80033fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003402:	eeb0 0a67 	vmov.f32	s0, s15
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fbd0 	bl	8003bac <_ZN9IIRFilter6updateEf>
 800340c:	eeb0 8a40 	vmov.f32	s16, s0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3324      	adds	r3, #36	@ 0x24
 8003414:	2102      	movs	r1, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fe98 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 800341c:	4603      	mov	r3, r0
 800341e:	ed83 8a00 	vstr	s16, [r3]

		heading = atan2f(axis_intensities[1], axis_intensities[0]) * (180.0 / M_PI);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3324      	adds	r3, #36	@ 0x24
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fe8f 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 800342e:	4603      	mov	r3, r0
 8003430:	ed93 8a00 	vldr	s16, [r3]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3324      	adds	r3, #36	@ 0x24
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fe86 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 8003440:	4603      	mov	r3, r0
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eef0 0a67 	vmov.f32	s1, s15
 800344a:	eeb0 0a48 	vmov.f32	s0, s16
 800344e:	f00f f923 	bl	8012698 <atan2f>
 8003452:	ee10 3a10 	vmov	r3, s0
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f89e 	bl	8000598 <__aeabi_f2d>
 800345c:	a320      	add	r3, pc, #128	@ (adr r3, 80034e0 <_ZN7LIS3MDL11service_irqEv+0x220>)
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f7fd f8f1 	bl	8000648 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fd fbc3 	bl	8000bf8 <__aeabi_d2f>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
		heading += calib_data.declination;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	edd3 7a06 	vldr	s15, [r3, #24]
 8003484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		if (heading < 0)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349c:	d509      	bpl.n	80034b2 <_ZN7LIS3MDL11service_irqEv+0x1f2>
		{
			heading += 360;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80034a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80034d8 <_ZN7LIS3MDL11service_irqEv+0x218>
 80034a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		}

		// DRDY interrupt cleared automatically after read
	}
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fdbd 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 80034bc:	e003      	b.n	80034c6 <_ZN7LIS3MDL11service_irqEv+0x206>
	else
	{
		USB_Log("ERR reading LIS3MDL data.", ERR);
 80034be:	2102      	movs	r1, #2
 80034c0:	4806      	ldr	r0, [pc, #24]	@ (80034dc <_ZN7LIS3MDL11service_irqEv+0x21c>)
 80034c2:	f000 f8f9 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80034c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	ecbd 8b02 	vpop	{d8}
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	f3af 8000 	nop.w
 80034d8:	43b40000 	.word	0x43b40000
 80034dc:	08016280 	.word	0x08016280
 80034e0:	1a63c1f8 	.word	0x1a63c1f8
 80034e4:	404ca5dc 	.word	0x404ca5dc

080034e8 <_ZN7LIS3MDL15log_data_to_gcsEv>:

void LIS3MDL::log_data_to_gcs()
{
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b0ac      	sub	sp, #176	@ 0xb0
 80034ee:	af08      	add	r7, sp, #32
 80034f0:	6078      	str	r0, [r7, #4]
	char string[128];
	{
		np::lock_guard lock(mag_data_mutex);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd fd85 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		snprintf(string, 128, "LIS3MDL %.2f %.2f %.2f %.2f", axis_intensities[0], axis_intensities[1], axis_intensities[2], heading);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3324      	adds	r3, #36	@ 0x24
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fe1f 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 800350e:	4603      	mov	r3, r0
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f840 	bl	8000598 <__aeabi_f2d>
 8003518:	4604      	mov	r4, r0
 800351a:	460d      	mov	r5, r1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3324      	adds	r3, #36	@ 0x24
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fe12 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 8003528:	4603      	mov	r3, r0
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f833 	bl	8000598 <__aeabi_f2d>
 8003532:	4680      	mov	r8, r0
 8003534:	4689      	mov	r9, r1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3324      	adds	r3, #36	@ 0x24
 800353a:	2102      	movs	r1, #2
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fe05 	bl	800214c <_ZNSt5arrayIfLj3EEixEj>
 8003542:	4603      	mov	r3, r0
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd f826 	bl	8000598 <__aeabi_f2d>
 800354c:	4682      	mov	sl, r0
 800354e:	468b      	mov	fp, r1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd f81f 	bl	8000598 <__aeabi_f2d>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	f107 0010 	add.w	r0, r7, #16
 8003562:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003566:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800356a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800356e:	e9cd 4500 	strd	r4, r5, [sp]
 8003572:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <_ZN7LIS3MDL15log_data_to_gcsEv+0xb4>)
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	f010 fbad 	bl	8013cd4 <sniprintf>
	}
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fd59 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	USB_Log(string, SENSOR);
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	2103      	movs	r1, #3
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f894 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
}
 8003590:	bf00      	nop
 8003592:	3790      	adds	r7, #144	@ 0x90
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	0801629c 	.word	0x0801629c

080035a0 <_ZN7LIS3MDL13read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool LIS3MDL::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	@ 0x28
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	460b      	mov	r3, r1
 80035ae:	72fb      	strb	r3, [r7, #11]
 80035b0:	4613      	mov	r3, r2
 80035b2:	813b      	strh	r3, [r7, #8]
	bool status = false;
 80035b4:	2300      	movs	r3, #0
 80035b6:	75fb      	strb	r3, [r7, #23]

	if (data_len > 1)
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d903      	bls.n	80035c6 <_ZN7LIS3MDL13read_registerEhPht+0x26>
	{
		// In order to read multiple bytes, it is necessary to assert the most significant bit of the address field
		reg_addr |= 0x80;
 80035be:	7afb      	ldrb	r3, [r7, #11]
 80035c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035c4:	72fb      	strb	r3, [r7, #11]
	}

	{
		np::lock_guard lock(i2c_mutex);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fd1b 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(&i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	7a1b      	ldrb	r3, [r3, #8]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	b299      	uxth	r1, r3
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035ea:	9302      	str	r3, [sp, #8]
 80035ec:	893b      	ldrh	r3, [r7, #8]
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2301      	movs	r3, #1
 80035f6:	f002 f94b 	bl	8005890 <HAL_I2C_Mem_Read>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]
	}
 8003606:	f107 0310 	add.w	r3, r7, #16
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fd13 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	f083 0301 	eor.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <_ZN7LIS3MDL13read_registerEhPht+0x84>
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
 800361c:	2102      	movs	r1, #2
 800361e:	4804      	ldr	r0, [pc, #16]	@ (8003630 <_ZN7LIS3MDL13read_registerEhPht+0x90>)
 8003620:	f000 f84a 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	080162b8 	.word	0x080162b8

08003634 <_ZN7LIS3MDL14write_registerEhPht>:

bool LIS3MDL::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	@ 0x28
 8003638:	af04      	add	r7, sp, #16
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	461a      	mov	r2, r3
 8003640:	460b      	mov	r3, r1
 8003642:	72fb      	strb	r3, [r7, #11]
 8003644:	4613      	mov	r3, r2
 8003646:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	f107 0310 	add.w	r3, r7, #16
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fcd8 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(&i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	7a1b      	ldrb	r3, [r3, #8]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	b299      	uxth	r1, r3
 8003668:	7afb      	ldrb	r3, [r7, #11]
 800366a:	b29a      	uxth	r2, r3
 800366c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003670:	9302      	str	r3, [sp, #8]
 8003672:	893b      	ldrh	r3, [r7, #8]
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2301      	movs	r3, #1
 800367c:	f001 fff4 	bl	8005668 <HAL_I2C_Mem_Write>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
	}
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fcd0 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	f083 0301 	eor.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <_ZN7LIS3MDL14write_registerEhPht+0x76>
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
 80036a2:	2102      	movs	r1, #2
 80036a4:	4803      	ldr	r0, [pc, #12]	@ (80036b4 <_ZN7LIS3MDL14write_registerEhPht+0x80>)
 80036a6:	f000 f807 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	080162d8 	.word	0x080162d8

080036b8 <_Z7USB_LogPKc9Log_Level>:
#include "usbd_cdc_if.h"
#include "usbd_def.h"
#include <cstdio>

void USB_Log(const char* string, Log_Level level)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	ed2d 8b02 	vpush	{d8}
 80036be:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80036c2:	af04      	add	r7, sp, #16
 80036c4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036c8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80036cc:	6018      	str	r0, [r3, #0]
 80036ce:	460a      	mov	r2, r1
 80036d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036d4:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80036d8:	701a      	strb	r2, [r3, #0]
	char str[512];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 80036da:	f00a fd67 	bl	800e1ac <osKernelGetTickCount>
 80036de:	ee07 0a90 	vmov	s15, r0
 80036e2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80036e6:	f00a fd76 	bl	800e1d6 <osKernelGetTickFreq>
 80036ea:	ee07 0a90 	vmov	s15, r0
 80036ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036f2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80036f6:	edc7 7a84 	vstr	s15, [r7, #528]	@ 0x210

	switch (level) {
 80036fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036fe:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d872      	bhi.n	80037ee <_Z7USB_LogPKc9Log_Level+0x136>
 8003708:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <_Z7USB_LogPKc9Log_Level+0x58>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003725 	.word	0x08003725
 8003714:	08003751 	.word	0x08003751
 8003718:	0800377d 	.word	0x0800377d
 800371c:	080037a9 	.word	0x080037a9
 8003720:	080037d5 	.word	0x080037d5
		case INFO:
			snprintf(str, 512, "LOG %.2f INFO %s\n", seconds, string);
 8003724:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003728:	f7fc ff36 	bl	8000598 <__aeabi_f2d>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	f107 0010 	add.w	r0, r7, #16
 8003734:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003738:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 800373c:	6809      	ldr	r1, [r1, #0]
 800373e:	9102      	str	r1, [sp, #8]
 8003740:	e9cd 2300 	strd	r2, r3, [sp]
 8003744:	4a52      	ldr	r2, [pc, #328]	@ (8003890 <_Z7USB_LogPKc9Log_Level+0x1d8>)
 8003746:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800374a:	f010 fac3 	bl	8013cd4 <sniprintf>
			break;
 800374e:	e064      	b.n	800381a <_Z7USB_LogPKc9Log_Level+0x162>
		case CRITICAL:
			snprintf(str, 512, "LOG %.2f CRIT %s\n", seconds, string);
 8003750:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003754:	f7fc ff20 	bl	8000598 <__aeabi_f2d>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	f107 0010 	add.w	r0, r7, #16
 8003760:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003764:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003768:	6809      	ldr	r1, [r1, #0]
 800376a:	9102      	str	r1, [sp, #8]
 800376c:	e9cd 2300 	strd	r2, r3, [sp]
 8003770:	4a48      	ldr	r2, [pc, #288]	@ (8003894 <_Z7USB_LogPKc9Log_Level+0x1dc>)
 8003772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003776:	f010 faad 	bl	8013cd4 <sniprintf>
			break;
 800377a:	e04e      	b.n	800381a <_Z7USB_LogPKc9Log_Level+0x162>
		case ERR:
			snprintf(str, 512, "LOG %.2f ERR %s\n", seconds, string);
 800377c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8003780:	f7fc ff0a 	bl	8000598 <__aeabi_f2d>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	f107 0010 	add.w	r0, r7, #16
 800378c:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003790:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003794:	6809      	ldr	r1, [r1, #0]
 8003796:	9102      	str	r1, [sp, #8]
 8003798:	e9cd 2300 	strd	r2, r3, [sp]
 800379c:	4a3e      	ldr	r2, [pc, #248]	@ (8003898 <_Z7USB_LogPKc9Log_Level+0x1e0>)
 800379e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037a2:	f010 fa97 	bl	8013cd4 <sniprintf>
			break;
 80037a6:	e038      	b.n	800381a <_Z7USB_LogPKc9Log_Level+0x162>
		case SENSOR:
			snprintf(str, 512, "SENSOR %.2f %s\n", seconds, string);
 80037a8:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80037ac:	f7fc fef4 	bl	8000598 <__aeabi_f2d>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	f107 0010 	add.w	r0, r7, #16
 80037b8:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80037bc:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 80037c0:	6809      	ldr	r1, [r1, #0]
 80037c2:	9102      	str	r1, [sp, #8]
 80037c4:	e9cd 2300 	strd	r2, r3, [sp]
 80037c8:	4a34      	ldr	r2, [pc, #208]	@ (800389c <_Z7USB_LogPKc9Log_Level+0x1e4>)
 80037ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037ce:	f010 fa81 	bl	8013cd4 <sniprintf>
			break;
 80037d2:	e022      	b.n	800381a <_Z7USB_LogPKc9Log_Level+0x162>
		case RAW:
			snprintf(str, 512, "%s\n", string);
 80037d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037dc:	f107 0010 	add.w	r0, r7, #16
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2f      	ldr	r2, [pc, #188]	@ (80038a0 <_Z7USB_LogPKc9Log_Level+0x1e8>)
 80037e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037e8:	f010 fa74 	bl	8013cd4 <sniprintf>
			break;
 80037ec:	e015      	b.n	800381a <_Z7USB_LogPKc9Log_Level+0x162>
		default:
			snprintf(str, 512, "LOG %.2f ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 80037ee:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80037f2:	f7fc fed1 	bl	8000598 <__aeabi_f2d>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	f107 0010 	add.w	r0, r7, #16
 80037fe:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8003802:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8003806:	6809      	ldr	r1, [r1, #0]
 8003808:	9102      	str	r1, [sp, #8]
 800380a:	e9cd 2300 	strd	r2, r3, [sp]
 800380e:	4a25      	ldr	r2, [pc, #148]	@ (80038a4 <_Z7USB_LogPKc9Log_Level+0x1ec>)
 8003810:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003814:	f010 fa5e 	bl	8013cd4 <sniprintf>
			break;
 8003818:	bf00      	nop
	}


	np::lock_guard lock(usbMutexHandle);
 800381a:	f107 030c 	add.w	r3, r7, #12
 800381e:	4922      	ldr	r1, [pc, #136]	@ (80038a8 <_Z7USB_LogPKc9Log_Level+0x1f0>)
 8003820:	4618      	mov	r0, r3
 8003822:	f7fd fbf3 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8003826:	f107 0310 	add.w	r3, r7, #16
 800382a:	4618      	mov	r0, r3
 800382c:	f7fc fd48 	bl	80002c0 <strlen>
 8003830:	4603      	mov	r3, r0
 8003832:	b29a      	uxth	r2, r3
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f00e fac2 	bl	8011dc4 <CDC_Transmit_FS>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 8003846:	e012      	b.n	800386e <_Z7USB_LogPKc9Log_Level+0x1b6>
	{
		osDelay(1);
 8003848:	2001      	movs	r0, #1
 800384a:	f00a fd60 	bl	800e30e <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 800384e:	f107 0310 	add.w	r3, r7, #16
 8003852:	4618      	mov	r0, r3
 8003854:	f7fc fd34 	bl	80002c0 <strlen>
 8003858:	4603      	mov	r3, r0
 800385a:	b29a      	uxth	r2, r3
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f00e faae 	bl	8011dc4 <CDC_Transmit_FS>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 800386e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8003872:	2b01      	cmp	r3, #1
 8003874:	d0e8      	beq.n	8003848 <_Z7USB_LogPKc9Log_Level+0x190>
	np::lock_guard lock(usbMutexHandle);
 8003876:	f107 030c 	add.w	r3, r7, #12
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fbdb 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	}
}
 8003880:	bf00      	nop
 8003882:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003886:	46bd      	mov	sp, r7
 8003888:	ecbd 8b02 	vpop	{d8}
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	080162f8 	.word	0x080162f8
 8003894:	0801630c 	.word	0x0801630c
 8003898:	08016320 	.word	0x08016320
 800389c:	08016334 	.word	0x08016334
 80038a0:	08016344 	.word	0x08016344
 80038a4:	08016348 	.word	0x08016348
 80038a8:	20001fe8 	.word	0x20001fe8

080038ac <sensor_fusion_thread>:

/*
 * THREADS
 */
void sensor_fusion_thread()
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
	osDelay(400);
 80038b2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80038b6:	f00a fd2a 	bl	800e30e <osDelay>
	USB_Log("------------ APPLICATION STARTING ------------", CRITICAL);
 80038ba:	2101      	movs	r1, #1
 80038bc:	481e      	ldr	r0, [pc, #120]	@ (8003938 <sensor_fusion_thread+0x8c>)
 80038be:	f7ff fefb 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80038c2:	2064      	movs	r0, #100	@ 0x64
 80038c4:	f00a fd23 	bl	800e30e <osDelay>

	bool imu_init = imu.init();
 80038c8:	481c      	ldr	r0, [pc, #112]	@ (800393c <sensor_fusion_thread+0x90>)
 80038ca:	f7fd fc2b 	bl	8001124 <_ZN6BMI0884initEv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
	bool baro_init = barometer.init();
 80038d2:	481b      	ldr	r0, [pc, #108]	@ (8003940 <sensor_fusion_thread+0x94>)
 80038d4:	f7fe fdee 	bl	80024b4 <_ZN6BMP3884initEv>
 80038d8:	4603      	mov	r3, r0
 80038da:	71bb      	strb	r3, [r7, #6]
	bool mag_init = magnetometer.init();
 80038dc:	4819      	ldr	r0, [pc, #100]	@ (8003944 <sensor_fusion_thread+0x98>)
 80038de:	f7ff fbff 	bl	80030e0 <_ZN7LIS3MDL4initEv>
 80038e2:	4603      	mov	r3, r0
 80038e4:	717b      	strb	r3, [r7, #5]

	if (imu_init && baro_init && mag_init)
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01d      	beq.n	8003928 <sensor_fusion_thread+0x7c>
 80038ec:	79bb      	ldrb	r3, [r7, #6]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01a      	beq.n	8003928 <sensor_fusion_thread+0x7c>
 80038f2:	797b      	ldrb	r3, [r7, #5]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d017      	beq.n	8003928 <sensor_fusion_thread+0x7c>
	{
		USB_Log("ALL SENSORS INITIALIZED", CRITICAL);
 80038f8:	2101      	movs	r1, #1
 80038fa:	4813      	ldr	r0, [pc, #76]	@ (8003948 <sensor_fusion_thread+0x9c>)
 80038fc:	f7ff fedc 	bl	80036b8 <_Z7USB_LogPKc9Log_Level>

		while (1)
		{
			imu.log_data_to_gcs();
 8003900:	480e      	ldr	r0, [pc, #56]	@ (800393c <sensor_fusion_thread+0x90>)
 8003902:	f7fe f833 	bl	800196c <_ZN6BMI08815log_data_to_gcsEv>
			osDelay(3);
 8003906:	2003      	movs	r0, #3
 8003908:	f00a fd01 	bl	800e30e <osDelay>
			barometer.log_data_to_gcs();
 800390c:	480c      	ldr	r0, [pc, #48]	@ (8003940 <sensor_fusion_thread+0x94>)
 800390e:	f7ff f835 	bl	800297c <_ZN6BMP38815log_data_to_gcsEv>
			osDelay(3);
 8003912:	2003      	movs	r0, #3
 8003914:	f00a fcfb 	bl	800e30e <osDelay>
			magnetometer.log_data_to_gcs();
 8003918:	480a      	ldr	r0, [pc, #40]	@ (8003944 <sensor_fusion_thread+0x98>)
 800391a:	f7ff fde5 	bl	80034e8 <_ZN7LIS3MDL15log_data_to_gcsEv>
			osDelay(3);
 800391e:	2003      	movs	r0, #3
 8003920:	f00a fcf5 	bl	800e30e <osDelay>
			imu.log_data_to_gcs();
 8003924:	bf00      	nop
 8003926:	e7eb      	b.n	8003900 <sensor_fusion_thread+0x54>
//			int z = static_cast<int>(mag_data[2] * 1000.0);
//			snprintf(str, 256, "Raw:0,0,0,0,0,0,%d,%d,%d\r", x,y,z);
//			USB_Log(str, RAW);
		}
	}
	vTaskDelete( NULL );
 8003928:	2000      	movs	r0, #0
 800392a:	f00c fac5 	bl	800feb8 <vTaskDelete>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	08016374 	.word	0x08016374
 800393c:	2000036c 	.word	0x2000036c
 8003940:	200003c8 	.word	0x200003c8
 8003944:	20000420 	.word	0x20000420
 8003948:	080163a4 	.word	0x080163a4

0800394c <service_BMI088_Accel>:

/*
 * FUNCTIONS
 */
void service_BMI088_Accel(){ imu.service_irq_accelerometer(); imu.service_irq_temperature(); }
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
 8003950:	4803      	ldr	r0, [pc, #12]	@ (8003960 <service_BMI088_Accel+0x14>)
 8003952:	f7fd fe2f 	bl	80015b4 <_ZN6BMI08825service_irq_accelerometerEv>
 8003956:	4802      	ldr	r0, [pc, #8]	@ (8003960 <service_BMI088_Accel+0x14>)
 8003958:	f7fd ffb6 	bl	80018c8 <_ZN6BMI08823service_irq_temperatureEv>
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	2000036c 	.word	0x2000036c

08003964 <service_BMI088_Gyro>:
void service_BMI088_Gyro() { imu.service_irq_gyroscope(); }
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
 8003968:	4802      	ldr	r0, [pc, #8]	@ (8003974 <service_BMI088_Gyro+0x10>)
 800396a:	f7fd feed 	bl	8001748 <_ZN6BMI08821service_irq_gyroscopeEv>
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	2000036c 	.word	0x2000036c

08003978 <service_BMP388>:
void service_BMP388() { barometer.service_irq(); }
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
 800397c:	4802      	ldr	r0, [pc, #8]	@ (8003988 <service_BMP388+0x10>)
 800397e:	f7fe fe6f 	bl	8002660 <_ZN6BMP38811service_irqEv>
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200003c8 	.word	0x200003c8

0800398c <service_LIS3MDL>:
void service_LIS3MDL() { magnetometer.service_irq(); }
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
 8003990:	4802      	ldr	r0, [pc, #8]	@ (800399c <service_LIS3MDL+0x10>)
 8003992:	f7ff fc95 	bl	80032c0 <_ZN7LIS3MDL11service_irqEv>
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000420 	.word	0x20000420

080039a0 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>:
    struct array
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f103 040c 	add.w	r4, r3, #12
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	429c      	cmp	r4, r3
 80039b8:	d004      	beq.n	80039c4 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 80039ba:	3c04      	subs	r4, #4
 80039bc:	4620      	mov	r0, r4
 80039be:	f7fe fb37 	bl	8002030 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
 80039c2:	e7f7      	b.n	80039b4 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x14>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}

080039ce <_ZN7LIS3MDLD1Ev>:
	/* GEOGRAPHIC DECLINATION */
	const float declination = 13.7333;	// Based on Medicine Hat, Alberta
};


class LIS3MDL
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3334      	adds	r3, #52	@ 0x34
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ffe0 	bl	80039a0 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_ZN6BMI088D1Ev>:
#define REG_GYRO_FIFO_CONFIG_0	0x3D
#define	REG_GYRO_FIFO_CONFIG_1  0x3E
#define	REG_GYRO_FIFO_DATA		0x3F


class BMI088
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3350      	adds	r3, #80	@ 0x50
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ffd2 	bl	80039a0 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3344      	adds	r3, #68	@ 0x44
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ffcd 	bl	80039a0 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_Z41__static_initialization_and_destruction_0ii>:
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af06      	add	r7, sp, #24
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d122      	bne.n	8003a66 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d11d      	bne.n	8003a66 <_Z41__static_initialization_and_destruction_0ii+0x56>
		GYRO_CS_Pin, accelDataMutexHandle, gyroDataMutexHandle);
 8003a2a:	4b18      	ldr	r3, [pc, #96]	@ (8003a8c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003a2c:	9304      	str	r3, [sp, #16]
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003a30:	9303      	str	r3, [sp, #12]
 8003a32:	2301      	movs	r3, #1
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	2310      	movs	r3, #16
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a44:	4a13      	ldr	r2, [pc, #76]	@ (8003a94 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003a46:	4914      	ldr	r1, [pc, #80]	@ (8003a98 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003a48:	4814      	ldr	r0, [pc, #80]	@ (8003a9c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003a4a:	f7fd fb03 	bl	8001054 <_ZN6BMI088C1ER19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>
BMP388 barometer(hi2c2, i2c2MutexHandle, baroDataMutexHandle);
 8003a4e:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003a50:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003a52:	4915      	ldr	r1, [pc, #84]	@ (8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003a54:	4815      	ldr	r0, [pc, #84]	@ (8003aac <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003a56:	f7fe fd12 	bl	800247e <_ZN6BMP388C1ER19__I2C_HandleTypeDefRPvS3_>
LIS3MDL magnetometer(hi2c2, i2c2MutexHandle, magDataMutexHandle);
 8003a5a:	4b15      	ldr	r3, [pc, #84]	@ (8003ab0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003a5c:	4a11      	ldr	r2, [pc, #68]	@ (8003aa4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003a5e:	4912      	ldr	r1, [pc, #72]	@ (8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003a60:	4814      	ldr	r0, [pc, #80]	@ (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003a62:	f7ff fb0f 	bl	8003084 <_ZN7LIS3MDLC1ER19__I2C_HandleTypeDefRPvS3_>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d105      	bne.n	8003a82 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003a76:	480f      	ldr	r0, [pc, #60]	@ (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003a78:	f7ff ffa9 	bl	80039ce <_ZN7LIS3MDLD1Ev>
BMI088 imu(hspi1, spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin,
 8003a7c:	4807      	ldr	r0, [pc, #28]	@ (8003a9c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003a7e:	f7ff ffb4 	bl	80039ea <_ZN6BMI088D1Ev>
void service_LIS3MDL() { magnetometer.service_irq(); }
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20001ff4 	.word	0x20001ff4
 8003a90:	20001ff0 	.word	0x20001ff0
 8003a94:	20001fe4 	.word	0x20001fe4
 8003a98:	20002134 	.word	0x20002134
 8003a9c:	2000036c 	.word	0x2000036c
 8003aa0:	20001ff8 	.word	0x20001ff8
 8003aa4:	20001fec 	.word	0x20001fec
 8003aa8:	200020dc 	.word	0x200020dc
 8003aac:	200003c8 	.word	0x200003c8
 8003ab0:	20001ffc 	.word	0x20001ffc
 8003ab4:	20000420 	.word	0x20000420

08003ab8 <_GLOBAL__sub_I_imu>:
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f7ff ffa5 	bl	8003a10 <_Z41__static_initialization_and_destruction_0ii>
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_GLOBAL__sub_D_imu>:
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7ff ff9d 	bl	8003a10 <_Z41__static_initialization_and_destruction_0ii>
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_ZN9IIRFilterC1Eff>:
 */
#include "Utility/IIRFilter.hpp"
#include <cmath>


IIRFilter::IIRFilter(float cutoff_frequency, float sampling_frequency)
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ae4:	edc7 0a01 	vstr	s1, [r7, #4]
	: cutoff_frequency{cutoff_frequency},
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	601a      	str	r2, [r3, #0]
	  sampling_frequency{sampling_frequency}
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	605a      	str	r2, [r3, #4]
{
	if (cutoff_frequency > sampling_frequency / 2.0f)
 8003af4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003af8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b00:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	dd07      	ble.n	8003b1e <_ZN9IIRFilterC1Eff+0x46>
	{
		// Ensure Nyquist frequency limit is satisfied
		cutoff_frequency = sampling_frequency / 2.0f;
 8003b0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b12:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b1a:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	float sampling_period = 1.0f / sampling_frequency;
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b22:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b2a:	edc7 7a05 	vstr	s15, [r7, #20]
	float time_constant = 1.0f / (2 * M_PI * cutoff_frequency);
 8003b2e:	68b8      	ldr	r0, [r7, #8]
 8003b30:	f7fc fd32 	bl	8000598 <__aeabi_f2d>
 8003b34:	a31b      	add	r3, pc, #108	@ (adr r3, 8003ba4 <_ZN9IIRFilterC1Eff+0xcc>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f7fc fd85 	bl	8000648 <__aeabi_dmul>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	4916      	ldr	r1, [pc, #88]	@ (8003ba0 <_ZN9IIRFilterC1Eff+0xc8>)
 8003b48:	f7fc fea8 	bl	800089c <__aeabi_ddiv>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	f7fd f850 	bl	8000bf8 <__aeabi_d2f>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	613b      	str	r3, [r7, #16]

	a0 = sampling_period / (sampling_period + time_constant);
 8003b5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b60:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b68:	edd7 6a05 	vldr	s13, [r7, #20]
 8003b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	edc3 7a02 	vstr	s15, [r3, #8]
	b1 = time_constant / (sampling_period + time_constant);
 8003b76:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b82:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w
 8003ba0:	3ff00000 	.word	0x3ff00000
 8003ba4:	54442d18 	.word	0x54442d18
 8003ba8:	401921fb 	.word	0x401921fb

08003bac <_ZN9IIRFilter6updateEf>:

float IIRFilter::update(float input)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	ed87 0a00 	vstr	s0, [r7]
	output = a0 * input + b1 * output;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bbe:	edd7 7a00 	vldr	s15, [r7]
 8003bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	edd3 6a03 	vldr	s13, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	edc3 7a04 	vstr	s15, [r3, #16]
	return output;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	ee07 3a90 	vmov	s15, r3
}
 8003be8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 8003bfc:	4839      	ldr	r0, [pc, #228]	@ (8003ce4 <MX_FREERTOS_Init+0xec>)
 8003bfe:	f00a fba1 	bl	800e344 <osMutexNew>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <MX_FREERTOS_Init+0xf0>)
 8003c06:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 8003c08:	4838      	ldr	r0, [pc, #224]	@ (8003cec <MX_FREERTOS_Init+0xf4>)
 8003c0a:	f00a fb9b 	bl	800e344 <osMutexNew>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4a37      	ldr	r2, [pc, #220]	@ (8003cf0 <MX_FREERTOS_Init+0xf8>)
 8003c12:	6013      	str	r3, [r2, #0]

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);
 8003c14:	4837      	ldr	r0, [pc, #220]	@ (8003cf4 <MX_FREERTOS_Init+0xfc>)
 8003c16:	f00a fb95 	bl	800e344 <osMutexNew>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4a36      	ldr	r2, [pc, #216]	@ (8003cf8 <MX_FREERTOS_Init+0x100>)
 8003c1e:	6013      	str	r3, [r2, #0]

  /* creation of accelDataMutex */
  accelDataMutexHandle = osMutexNew(&accelDataMutex_attributes);
 8003c20:	4836      	ldr	r0, [pc, #216]	@ (8003cfc <MX_FREERTOS_Init+0x104>)
 8003c22:	f00a fb8f 	bl	800e344 <osMutexNew>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4a35      	ldr	r2, [pc, #212]	@ (8003d00 <MX_FREERTOS_Init+0x108>)
 8003c2a:	6013      	str	r3, [r2, #0]

  /* creation of gyroDataMutex */
  gyroDataMutexHandle = osMutexNew(&gyroDataMutex_attributes);
 8003c2c:	4835      	ldr	r0, [pc, #212]	@ (8003d04 <MX_FREERTOS_Init+0x10c>)
 8003c2e:	f00a fb89 	bl	800e344 <osMutexNew>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <MX_FREERTOS_Init+0x110>)
 8003c36:	6013      	str	r3, [r2, #0]

  /* creation of baroDataMutex */
  baroDataMutexHandle = osMutexNew(&baroDataMutex_attributes);
 8003c38:	4834      	ldr	r0, [pc, #208]	@ (8003d0c <MX_FREERTOS_Init+0x114>)
 8003c3a:	f00a fb83 	bl	800e344 <osMutexNew>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4a33      	ldr	r2, [pc, #204]	@ (8003d10 <MX_FREERTOS_Init+0x118>)
 8003c42:	6013      	str	r3, [r2, #0]

  /* creation of magDataMutex */
  magDataMutexHandle = osMutexNew(&magDataMutex_attributes);
 8003c44:	4833      	ldr	r0, [pc, #204]	@ (8003d14 <MX_FREERTOS_Init+0x11c>)
 8003c46:	f00a fb7d 	bl	800e344 <osMutexNew>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <MX_FREERTOS_Init+0x120>)
 8003c4e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of accIRQSemaphore */
  accIRQSemaphoreHandle = osSemaphoreNew(64, 0, &accIRQSemaphore_attributes);
 8003c50:	4a32      	ldr	r2, [pc, #200]	@ (8003d1c <MX_FREERTOS_Init+0x124>)
 8003c52:	2100      	movs	r1, #0
 8003c54:	2040      	movs	r0, #64	@ 0x40
 8003c56:	f00a fc83 	bl	800e560 <osSemaphoreNew>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4a30      	ldr	r2, [pc, #192]	@ (8003d20 <MX_FREERTOS_Init+0x128>)
 8003c5e:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQSemaphore */
  gyroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &gyroIRQSemaphore_attributes);
 8003c60:	4a30      	ldr	r2, [pc, #192]	@ (8003d24 <MX_FREERTOS_Init+0x12c>)
 8003c62:	2100      	movs	r1, #0
 8003c64:	2040      	movs	r0, #64	@ 0x40
 8003c66:	f00a fc7b 	bl	800e560 <osSemaphoreNew>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d28 <MX_FREERTOS_Init+0x130>)
 8003c6e:	6013      	str	r3, [r2, #0]

  /* creation of baroIRQSemaphore */
  baroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &baroIRQSemaphore_attributes);
 8003c70:	4a2e      	ldr	r2, [pc, #184]	@ (8003d2c <MX_FREERTOS_Init+0x134>)
 8003c72:	2100      	movs	r1, #0
 8003c74:	2040      	movs	r0, #64	@ 0x40
 8003c76:	f00a fc73 	bl	800e560 <osSemaphoreNew>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d30 <MX_FREERTOS_Init+0x138>)
 8003c7e:	6013      	str	r3, [r2, #0]

  /* creation of magIRQSemaphore */
  magIRQSemaphoreHandle = osSemaphoreNew(64, 0, &magIRQSemaphore_attributes);
 8003c80:	4a2c      	ldr	r2, [pc, #176]	@ (8003d34 <MX_FREERTOS_Init+0x13c>)
 8003c82:	2100      	movs	r1, #0
 8003c84:	2040      	movs	r0, #64	@ 0x40
 8003c86:	f00a fc6b 	bl	800e560 <osSemaphoreNew>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d38 <MX_FREERTOS_Init+0x140>)
 8003c8e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorFusionTask */
  sensorFusionTaskHandle = osThreadNew(start_sensor_fusion_task, NULL, &sensorFusionTask_attributes);
 8003c90:	4a2a      	ldr	r2, [pc, #168]	@ (8003d3c <MX_FREERTOS_Init+0x144>)
 8003c92:	2100      	movs	r1, #0
 8003c94:	482a      	ldr	r0, [pc, #168]	@ (8003d40 <MX_FREERTOS_Init+0x148>)
 8003c96:	f00a faa7 	bl	800e1e8 <osThreadNew>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4a29      	ldr	r2, [pc, #164]	@ (8003d44 <MX_FREERTOS_Init+0x14c>)
 8003c9e:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 8003ca0:	4a29      	ldr	r2, [pc, #164]	@ (8003d48 <MX_FREERTOS_Init+0x150>)
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4829      	ldr	r0, [pc, #164]	@ (8003d4c <MX_FREERTOS_Init+0x154>)
 8003ca6:	f00a fa9f 	bl	800e1e8 <osThreadNew>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4a28      	ldr	r2, [pc, #160]	@ (8003d50 <MX_FREERTOS_Init+0x158>)
 8003cae:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 8003cb0:	4a28      	ldr	r2, [pc, #160]	@ (8003d54 <MX_FREERTOS_Init+0x15c>)
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4828      	ldr	r0, [pc, #160]	@ (8003d58 <MX_FREERTOS_Init+0x160>)
 8003cb6:	f00a fa97 	bl	800e1e8 <osThreadNew>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a27      	ldr	r2, [pc, #156]	@ (8003d5c <MX_FREERTOS_Init+0x164>)
 8003cbe:	6013      	str	r3, [r2, #0]

  /* creation of baroIRQTask */
  baroIRQTaskHandle = osThreadNew(start_baro_irq_task, NULL, &baroIRQTask_attributes);
 8003cc0:	4a27      	ldr	r2, [pc, #156]	@ (8003d60 <MX_FREERTOS_Init+0x168>)
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4827      	ldr	r0, [pc, #156]	@ (8003d64 <MX_FREERTOS_Init+0x16c>)
 8003cc6:	f00a fa8f 	bl	800e1e8 <osThreadNew>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4a26      	ldr	r2, [pc, #152]	@ (8003d68 <MX_FREERTOS_Init+0x170>)
 8003cce:	6013      	str	r3, [r2, #0]

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);
 8003cd0:	4a26      	ldr	r2, [pc, #152]	@ (8003d6c <MX_FREERTOS_Init+0x174>)
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4826      	ldr	r0, [pc, #152]	@ (8003d70 <MX_FREERTOS_Init+0x178>)
 8003cd6:	f00a fa87 	bl	800e1e8 <osThreadNew>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4a25      	ldr	r2, [pc, #148]	@ (8003d74 <MX_FREERTOS_Init+0x17c>)
 8003cde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	080165ec 	.word	0x080165ec
 8003ce8:	20001fe4 	.word	0x20001fe4
 8003cec:	080165fc 	.word	0x080165fc
 8003cf0:	20001fe8 	.word	0x20001fe8
 8003cf4:	0801660c 	.word	0x0801660c
 8003cf8:	20001fec 	.word	0x20001fec
 8003cfc:	0801661c 	.word	0x0801661c
 8003d00:	20001ff0 	.word	0x20001ff0
 8003d04:	0801662c 	.word	0x0801662c
 8003d08:	20001ff4 	.word	0x20001ff4
 8003d0c:	0801663c 	.word	0x0801663c
 8003d10:	20001ff8 	.word	0x20001ff8
 8003d14:	0801664c 	.word	0x0801664c
 8003d18:	20001ffc 	.word	0x20001ffc
 8003d1c:	0801665c 	.word	0x0801665c
 8003d20:	20002000 	.word	0x20002000
 8003d24:	0801666c 	.word	0x0801666c
 8003d28:	20002004 	.word	0x20002004
 8003d2c:	0801667c 	.word	0x0801667c
 8003d30:	20002008 	.word	0x20002008
 8003d34:	0801668c 	.word	0x0801668c
 8003d38:	2000200c 	.word	0x2000200c
 8003d3c:	08016538 	.word	0x08016538
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	20000460 	.word	0x20000460
 8003d48:	0801655c 	.word	0x0801655c
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	20000d14 	.word	0x20000d14
 8003d54:	08016580 	.word	0x08016580
 8003d58:	08003db1 	.word	0x08003db1
 8003d5c:	200011c8 	.word	0x200011c8
 8003d60:	080165a4 	.word	0x080165a4
 8003d64:	08003dd5 	.word	0x08003dd5
 8003d68:	2000167c 	.word	0x2000167c
 8003d6c:	080165c8 	.word	0x080165c8
 8003d70:	08003df9 	.word	0x08003df9
 8003d74:	20001b30 	.word	0x20001b30

08003d78 <start_sensor_fusion_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_fusion_task */
void start_sensor_fusion_task(void *argument)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_sensor_fusion_task */
  /* Infinite loop */
  sensor_fusion_thread();
 8003d80:	f7ff fd94 	bl	80038ac <sensor_fusion_thread>
  /* USER CODE END start_sensor_fusion_task */
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <start_acc_irq_task+0x20>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f00a fc69 	bl	800e674 <osSemaphoreAcquire>
		service_BMI088_Accel();
 8003da2:	f7ff fdd3 	bl	800394c <service_BMI088_Accel>
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 8003da6:	bf00      	nop
 8003da8:	e7f4      	b.n	8003d94 <start_acc_irq_task+0x8>
 8003daa:	bf00      	nop
 8003dac:	20002000 	.word	0x20002000

08003db0 <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <start_gyro_irq_task+0x20>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f00a fc57 	bl	800e674 <osSemaphoreAcquire>
		service_BMI088_Gyro();
 8003dc6:	f7ff fdcd 	bl	8003964 <service_BMI088_Gyro>
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 8003dca:	bf00      	nop
 8003dcc:	e7f4      	b.n	8003db8 <start_gyro_irq_task+0x8>
 8003dce:	bf00      	nop
 8003dd0:	20002004 	.word	0x20002004

08003dd4 <start_baro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_baro_irq_task */
void start_baro_irq_task(void *argument)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_baro_irq_task */
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(baroIRQSemaphoreHandle, osWaitForever);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <start_baro_irq_task+0x20>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003de4:	4618      	mov	r0, r3
 8003de6:	f00a fc45 	bl	800e674 <osSemaphoreAcquire>
		service_BMP388();
 8003dea:	f7ff fdc5 	bl	8003978 <service_BMP388>
		osSemaphoreAcquire(baroIRQSemaphoreHandle, osWaitForever);
 8003dee:	bf00      	nop
 8003df0:	e7f4      	b.n	8003ddc <start_baro_irq_task+0x8>
 8003df2:	bf00      	nop
 8003df4:	20002008 	.word	0x20002008

08003df8 <start_mag_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8003e00:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <start_mag_irq_task+0x20>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00a fc33 	bl	800e674 <osSemaphoreAcquire>
		service_LIS3MDL();
 8003e0e:	f7ff fdbd 	bl	800398c <service_LIS3MDL>
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8003e12:	bf00      	nop
 8003e14:	e7f4      	b.n	8003e00 <start_mag_irq_task+0x8>
 8003e16:	bf00      	nop
 8003e18:	2000200c 	.word	0x2000200c

08003e1c <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ACCEL_INT_Pin)
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2c:	d105      	bne.n	8003e3a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		osSemaphoreRelease(accIRQSemaphoreHandle);
 8003e2e:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <HAL_GPIO_EXTI_Callback+0x60>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f00a fc70 	bl	800e718 <osSemaphoreRelease>
	}
	else if (GPIO_Pin == MAG_DRDY_Pin)
	{
		osSemaphoreRelease(magIRQSemaphoreHandle);
	}
}
 8003e38:	e01b      	b.n	8003e72 <HAL_GPIO_EXTI_Callback+0x56>
	else if (GPIO_Pin == GYRO_INT_Pin)
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d105      	bne.n	8003e4c <HAL_GPIO_EXTI_Callback+0x30>
		osSemaphoreRelease(gyroIRQSemaphoreHandle);
 8003e40:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <HAL_GPIO_EXTI_Callback+0x64>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00a fc67 	bl	800e718 <osSemaphoreRelease>
}
 8003e4a:	e012      	b.n	8003e72 <HAL_GPIO_EXTI_Callback+0x56>
	else if (GPIO_Pin == BMP_INT_Pin)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e52:	d105      	bne.n	8003e60 <HAL_GPIO_EXTI_Callback+0x44>
		osSemaphoreRelease(baroIRQSemaphoreHandle);
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_GPIO_EXTI_Callback+0x68>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f00a fc5d 	bl	800e718 <osSemaphoreRelease>
}
 8003e5e:	e008      	b.n	8003e72 <HAL_GPIO_EXTI_Callback+0x56>
	else if (GPIO_Pin == MAG_DRDY_Pin)
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e66:	d104      	bne.n	8003e72 <HAL_GPIO_EXTI_Callback+0x56>
		osSemaphoreRelease(magIRQSemaphoreHandle);
 8003e68:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f00a fc53 	bl	800e718 <osSemaphoreRelease>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20002000 	.word	0x20002000
 8003e80:	20002004 	.word	0x20002004
 8003e84:	20002008 	.word	0x20002008
 8003e88:	2000200c 	.word	0x2000200c

08003e8c <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003e90:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003e92:	4a20      	ldr	r2, [pc, #128]	@ (8003f14 <MX_FDCAN1_Init+0x88>)
 8003e94:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003e96:	4b1e      	ldr	r3, [pc, #120]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8003eae:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003eba:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003ec0:	4b13      	ldr	r3, [pc, #76]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8003ecc:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003ede:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003eea:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003ef0:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003efc:	4804      	ldr	r0, [pc, #16]	@ (8003f10 <MX_FDCAN1_Init+0x84>)
 8003efe:	f000 ff9f 	bl	8004e40 <HAL_FDCAN_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003f08:	f000 fb20 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20002010 	.word	0x20002010
 8003f14:	40006400 	.word	0x40006400

08003f18 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f1e:	4a20      	ldr	r2, [pc, #128]	@ (8003fa0 <MX_FDCAN2_Init+0x88>)
 8003f20:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003f28:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003f34:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8003f3a:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003f40:	4b16      	ldr	r3, [pc, #88]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f48:	2210      	movs	r2, #16
 8003f4a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8003f52:	4b12      	ldr	r3, [pc, #72]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8003f58:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003f64:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003f76:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003f7c:	4b07      	ldr	r3, [pc, #28]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003f82:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003f88:	4804      	ldr	r0, [pc, #16]	@ (8003f9c <MX_FDCAN2_Init+0x84>)
 8003f8a:	f000 ff59 	bl	8004e40 <HAL_FDCAN_Init>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8003f94:	f000 fada 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20002074 	.word	0x20002074
 8003fa0:	40006800 	.word	0x40006800

08003fa4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b0a0      	sub	sp, #128	@ 0x80
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fbc:	f107 0318 	add.w	r3, r7, #24
 8003fc0:	2254      	movs	r2, #84	@ 0x54
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00f fefc 	bl	8013dc2 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a48      	ldr	r2, [pc, #288]	@ (80040f0 <HAL_FDCAN_MspInit+0x14c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d142      	bne.n	800405a <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fde:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fe0:	f107 0318 	add.w	r3, r7, #24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 fbd7 	bl	8008798 <HAL_RCCEx_PeriphCLKConfig>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003ff0:	f000 faac 	bl	800454c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80040f4 <HAL_FDCAN_MspInit+0x150>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80040f4 <HAL_FDCAN_MspInit+0x150>)
 8003ffc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80040f4 <HAL_FDCAN_MspInit+0x150>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10b      	bne.n	800401e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004006:	4b3c      	ldr	r3, [pc, #240]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	4a3b      	ldr	r2, [pc, #236]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 800400c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004010:	6593      	str	r3, [r2, #88]	@ 0x58
 8004012:	4b39      	ldr	r3, [pc, #228]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800401e:	4b36      	ldr	r3, [pc, #216]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004022:	4a35      	ldr	r2, [pc, #212]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800402a:	4b33      	ldr	r3, [pc, #204]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004036:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800403a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403c:	2302      	movs	r3, #2
 800403e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004040:	2300      	movs	r3, #0
 8004042:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004044:	2300      	movs	r3, #0
 8004046:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004048:	2309      	movs	r3, #9
 800404a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004050:	4619      	mov	r1, r3
 8004052:	482a      	ldr	r0, [pc, #168]	@ (80040fc <HAL_FDCAN_MspInit+0x158>)
 8004054:	f001 f8ba 	bl	80051cc <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8004058:	e045      	b.n	80040e6 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a28      	ldr	r2, [pc, #160]	@ (8004100 <HAL_FDCAN_MspInit+0x15c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d140      	bne.n	80040e6 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004068:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800406a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800406e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004070:	f107 0318 	add.w	r3, r7, #24
 8004074:	4618      	mov	r0, r3
 8004076:	f004 fb8f 	bl	8008798 <HAL_RCCEx_PeriphCLKConfig>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8004080:	f000 fa64 	bl	800454c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <HAL_FDCAN_MspInit+0x150>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	4a1a      	ldr	r2, [pc, #104]	@ (80040f4 <HAL_FDCAN_MspInit+0x150>)
 800408c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800408e:	4b19      	ldr	r3, [pc, #100]	@ (80040f4 <HAL_FDCAN_MspInit+0x150>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d10b      	bne.n	80040ae <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004096:	4b18      	ldr	r3, [pc, #96]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409a:	4a17      	ldr	r2, [pc, #92]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 800409c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040a2:	4b15      	ldr	r3, [pc, #84]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	4b12      	ldr	r3, [pc, #72]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 80040b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b2:	4a11      	ldr	r2, [pc, #68]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040ba:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <HAL_FDCAN_MspInit+0x154>)
 80040bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80040c6:	2360      	movs	r3, #96	@ 0x60
 80040c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d2:	2300      	movs	r3, #0
 80040d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80040d6:	2309      	movs	r3, #9
 80040d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80040de:	4619      	mov	r1, r3
 80040e0:	4806      	ldr	r0, [pc, #24]	@ (80040fc <HAL_FDCAN_MspInit+0x158>)
 80040e2:	f001 f873 	bl	80051cc <HAL_GPIO_Init>
}
 80040e6:	bf00      	nop
 80040e8:	3780      	adds	r7, #128	@ 0x80
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40006400 	.word	0x40006400
 80040f4:	200020d8 	.word	0x200020d8
 80040f8:	40021000 	.word	0x40021000
 80040fc:	48000400 	.word	0x48000400
 8004100:	40006800 	.word	0x40006800

08004104 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	@ 0x28
 8004108:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800411a:	4b72      	ldr	r3, [pc, #456]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	4a71      	ldr	r2, [pc, #452]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004126:	4b6f      	ldr	r3, [pc, #444]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004132:	4b6c      	ldr	r3, [pc, #432]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	4a6b      	ldr	r2, [pc, #428]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004138:	f043 0320 	orr.w	r3, r3, #32
 800413c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800413e:	4b69      	ldr	r3, [pc, #420]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800414a:	4b66      	ldr	r3, [pc, #408]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	4a65      	ldr	r2, [pc, #404]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004156:	4b63      	ldr	r3, [pc, #396]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004162:	4b60      	ldr	r3, [pc, #384]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004166:	4a5f      	ldr	r2, [pc, #380]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800416e:	4b5d      	ldr	r3, [pc, #372]	@ (80042e4 <MX_GPIO_Init+0x1e0>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8004180:	4859      	ldr	r0, [pc, #356]	@ (80042e8 <MX_GPIO_Init+0x1e4>)
 8004182:	f001 f9a5 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 8004186:	2201      	movs	r2, #1
 8004188:	2111      	movs	r1, #17
 800418a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800418e:	f001 f99f 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 8004192:	2201      	movs	r2, #1
 8004194:	2102      	movs	r1, #2
 8004196:	4855      	ldr	r0, [pc, #340]	@ (80042ec <MX_GPIO_Init+0x1e8>)
 8004198:	f001 f99a 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 800419c:	2200      	movs	r2, #0
 800419e:	f648 4190 	movw	r1, #35984	@ 0x8c90
 80041a2:	4852      	ldr	r0, [pc, #328]	@ (80042ec <MX_GPIO_Init+0x1e8>)
 80041a4:	f001 f994 	bl	80054d0 <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 80041a8:	2200      	movs	r2, #0
 80041aa:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 80041ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041b2:	f001 f98d 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO2_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 80041b6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80041ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041bc:	2301      	movs	r3, #1
 80041be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	4619      	mov	r1, r3
 80041ce:	4846      	ldr	r0, [pc, #280]	@ (80042e8 <MX_GPIO_Init+0x1e4>)
 80041d0:	f000 fffc 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 80041d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80041de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041e0:	2302      	movs	r3, #2
 80041e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	4619      	mov	r1, r3
 80041ea:	483f      	ldr	r0, [pc, #252]	@ (80042e8 <MX_GPIO_Init+0x1e4>)
 80041ec:	f000 ffee 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 80041f0:	2311      	movs	r3, #17
 80041f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041f4:	2301      	movs	r3, #1
 80041f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041f8:	2301      	movs	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fc:	2300      	movs	r3, #0
 80041fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4619      	mov	r1, r3
 8004206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800420a:	f000 ffdf 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 800420e:	2302      	movs	r3, #2
 8004210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004212:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004218:	2302      	movs	r3, #2
 800421a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 800421c:	f107 0314 	add.w	r3, r7, #20
 8004220:	4619      	mov	r1, r3
 8004222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004226:	f000 ffd1 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CC2500_GDO0_Pin CC2500_GDO2_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_INT_Pin;
 800422a:	f242 0305 	movw	r3, #8197	@ 0x2005
 800422e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4619      	mov	r1, r3
 800423e:	482b      	ldr	r0, [pc, #172]	@ (80042ec <MX_GPIO_Init+0x1e8>)
 8004240:	f000 ffc4 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2500_CS_Pin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 8004244:	2302      	movs	r3, #2
 8004246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004248:	2301      	movs	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800424c:	2301      	movs	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4619      	mov	r1, r3
 800425a:	4824      	ldr	r0, [pc, #144]	@ (80042ec <MX_GPIO_Init+0x1e8>)
 800425c:	f000 ffb6 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8_Pin GPIO9_Pin GPIO7_Pin GPIO4_Pin
                           GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8004260:	f648 4390 	movw	r3, #35984	@ 0x8c90
 8004264:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	4619      	mov	r1, r3
 8004278:	481c      	ldr	r0, [pc, #112]	@ (80042ec <MX_GPIO_Init+0x1e8>)
 800427a:	f000 ffa7 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_DRDY_Pin BMP_INT_Pin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|BMP_INT_Pin;
 800427e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004284:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800428a:	2302      	movs	r3, #2
 800428c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428e:	f107 0314 	add.w	r3, r7, #20
 8004292:	4619      	mov	r1, r3
 8004294:	4815      	ldr	r0, [pc, #84]	@ (80042ec <MX_GPIO_Init+0x1e8>)
 8004296:	f000 ff99 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO6_Pin GPIO5_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 800429a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800429e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a0:	2301      	movs	r3, #1
 80042a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a8:	2300      	movs	r3, #0
 80042aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4619      	mov	r1, r3
 80042b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042b6:	f000 ff89 	bl	80051cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2105      	movs	r1, #5
 80042be:	2007      	movs	r0, #7
 80042c0:	f000 fd96 	bl	8004df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80042c4:	2007      	movs	r0, #7
 80042c6:	f000 fdad 	bl	8004e24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2105      	movs	r1, #5
 80042ce:	2028      	movs	r0, #40	@ 0x28
 80042d0:	f000 fd8e 	bl	8004df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80042d4:	2028      	movs	r0, #40	@ 0x28
 80042d6:	f000 fda5 	bl	8004e24 <HAL_NVIC_EnableIRQ>

}
 80042da:	bf00      	nop
 80042dc:	3728      	adds	r7, #40	@ 0x28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	48000800 	.word	0x48000800
 80042ec:	48000400 	.word	0x48000400

080042f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80042f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <MX_I2C2_Init+0x74>)
 80042f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004368 <MX_I2C2_Init+0x78>)
 80042f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40621236;
 80042fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <MX_I2C2_Init+0x74>)
 80042fc:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <MX_I2C2_Init+0x7c>)
 80042fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004300:	4b18      	ldr	r3, [pc, #96]	@ (8004364 <MX_I2C2_Init+0x74>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004306:	4b17      	ldr	r3, [pc, #92]	@ (8004364 <MX_I2C2_Init+0x74>)
 8004308:	2201      	movs	r2, #1
 800430a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800430c:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <MX_I2C2_Init+0x74>)
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004312:	4b14      	ldr	r3, [pc, #80]	@ (8004364 <MX_I2C2_Init+0x74>)
 8004314:	2200      	movs	r2, #0
 8004316:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <MX_I2C2_Init+0x74>)
 800431a:	2200      	movs	r2, #0
 800431c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800431e:	4b11      	ldr	r3, [pc, #68]	@ (8004364 <MX_I2C2_Init+0x74>)
 8004320:	2200      	movs	r2, #0
 8004322:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004324:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <MX_I2C2_Init+0x74>)
 8004326:	2200      	movs	r2, #0
 8004328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800432a:	480e      	ldr	r0, [pc, #56]	@ (8004364 <MX_I2C2_Init+0x74>)
 800432c:	f001 f900 	bl	8005530 <HAL_I2C_Init>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004336:	f000 f909 	bl	800454c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800433a:	2100      	movs	r1, #0
 800433c:	4809      	ldr	r0, [pc, #36]	@ (8004364 <MX_I2C2_Init+0x74>)
 800433e:	f001 fe83 	bl	8006048 <HAL_I2CEx_ConfigAnalogFilter>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004348:	f000 f900 	bl	800454c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800434c:	2100      	movs	r1, #0
 800434e:	4805      	ldr	r0, [pc, #20]	@ (8004364 <MX_I2C2_Init+0x74>)
 8004350:	f001 fec5 	bl	80060de <HAL_I2CEx_ConfigDigitalFilter>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800435a:	f000 f8f7 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200020dc 	.word	0x200020dc
 8004368:	40005800 	.word	0x40005800
 800436c:	40621236 	.word	0x40621236

08004370 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b09e      	sub	sp, #120	@ 0x78
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004378:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004388:	f107 0310 	add.w	r3, r7, #16
 800438c:	2254      	movs	r2, #84	@ 0x54
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f00f fd16 	bl	8013dc2 <memset>
  if(i2cHandle->Instance==I2C2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1f      	ldr	r2, [pc, #124]	@ (8004418 <HAL_I2C_MspInit+0xa8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d137      	bne.n	8004410 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80043a0:	2380      	movs	r3, #128	@ 0x80
 80043a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80043a4:	2300      	movs	r3, #0
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043a8:	f107 0310 	add.w	r3, r7, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	f004 f9f3 	bl	8008798 <HAL_RCCEx_PeriphCLKConfig>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80043b8:	f000 f8c8 	bl	800454c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <HAL_I2C_MspInit+0xac>)
 80043be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c0:	4a16      	ldr	r2, [pc, #88]	@ (800441c <HAL_I2C_MspInit+0xac>)
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043c8:	4b14      	ldr	r3, [pc, #80]	@ (800441c <HAL_I2C_MspInit+0xac>)
 80043ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80043d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043da:	2312      	movs	r3, #18
 80043dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e2:	2300      	movs	r3, #0
 80043e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043e6:	2304      	movs	r3, #4
 80043e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043ee:	4619      	mov	r1, r3
 80043f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043f4:	f000 feea 	bl	80051cc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043f8:	4b08      	ldr	r3, [pc, #32]	@ (800441c <HAL_I2C_MspInit+0xac>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	4a07      	ldr	r2, [pc, #28]	@ (800441c <HAL_I2C_MspInit+0xac>)
 80043fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004402:	6593      	str	r3, [r2, #88]	@ 0x58
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_I2C_MspInit+0xac>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004410:	bf00      	nop
 8004412:	3778      	adds	r7, #120	@ 0x78
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40005800 	.word	0x40005800
 800441c:	40021000 	.word	0x40021000

08004420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004424:	f000 fbf5 	bl	8004c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004428:	f000 f818 	bl	800445c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800442c:	f7ff fe6a 	bl	8004104 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8004430:	f7ff fd2c 	bl	8003e8c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8004434:	f7ff fd70 	bl	8003f18 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8004438:	f7ff ff5a 	bl	80042f0 <MX_I2C2_Init>
  MX_SPI1_Init();
 800443c:	f000 f88c 	bl	8004558 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004440:	f000 fb1a 	bl	8004a78 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8004444:	f000 facc 	bl	80049e0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8004448:	f00d fbfe 	bl	8011c48 <MX_USB_Device_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800444c:	f009 fe64 	bl	800e118 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004450:	f7ff fbd2 	bl	8003bf8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004454:	f009 fe84 	bl	800e160 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <main+0x38>

0800445c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b094      	sub	sp, #80	@ 0x50
 8004460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004462:	f107 0318 	add.w	r3, r7, #24
 8004466:	2238      	movs	r2, #56	@ 0x38
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f00f fca9 	bl	8013dc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800447e:	2000      	movs	r0, #0
 8004480:	f003 fb7a 	bl	8007b78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8004484:	2321      	movs	r3, #33	@ 0x21
 8004486:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800448c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800448e:	2301      	movs	r3, #1
 8004490:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004492:	2302      	movs	r3, #2
 8004494:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004496:	2303      	movs	r3, #3
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800449a:	2304      	movs	r3, #4
 800449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800449e:	2355      	movs	r3, #85	@ 0x55
 80044a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044a2:	2302      	movs	r3, #2
 80044a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80044a6:	2308      	movs	r3, #8
 80044a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80044aa:	2302      	movs	r3, #2
 80044ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ae:	f107 0318 	add.w	r3, r7, #24
 80044b2:	4618      	mov	r0, r3
 80044b4:	f003 fc14 	bl	8007ce0 <HAL_RCC_OscConfig>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80044be:	f000 f845 	bl	800454c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044c2:	230f      	movs	r3, #15
 80044c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044c6:	2303      	movs	r3, #3
 80044c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	2104      	movs	r1, #4
 80044da:	4618      	mov	r0, r3
 80044dc:	f003 ff12 	bl	8008304 <HAL_RCC_ClockConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80044e6:	f000 f831 	bl	800454c <Error_Handler>
  }
}
 80044ea:	bf00      	nop
 80044ec:	3750      	adds	r7, #80	@ 0x50
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */

void configureTimerForRunTimeStats(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80044f8:	4b03      	ldr	r3, [pc, #12]	@ (8004508 <configureTimerForRunTimeStats+0x14>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim16);
 80044fe:	4803      	ldr	r0, [pc, #12]	@ (800450c <configureTimerForRunTimeStats+0x18>)
 8004500:	f005 f994 	bl	800982c <HAL_TIM_Base_Start_IT>
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20002130 	.word	0x20002130
 800450c:	200021e8 	.word	0x200021e8

08004510 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8004514:	4b03      	ldr	r3, [pc, #12]	@ (8004524 <getRunTimeCounterValue+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20002130 	.word	0x20002130

08004528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a04      	ldr	r2, [pc, #16]	@ (8004548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800453a:	f000 fb83 	bl	8004c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40001000 	.word	0x40001000

0800454c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004550:	b672      	cpsid	i
}
 8004552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <Error_Handler+0x8>

08004558 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800455c:	4b1b      	ldr	r3, [pc, #108]	@ (80045cc <MX_SPI1_Init+0x74>)
 800455e:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <MX_SPI1_Init+0x78>)
 8004560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004562:	4b1a      	ldr	r3, [pc, #104]	@ (80045cc <MX_SPI1_Init+0x74>)
 8004564:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800456a:	4b18      	ldr	r3, [pc, #96]	@ (80045cc <MX_SPI1_Init+0x74>)
 800456c:	2200      	movs	r2, #0
 800456e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004570:	4b16      	ldr	r3, [pc, #88]	@ (80045cc <MX_SPI1_Init+0x74>)
 8004572:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004576:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004578:	4b14      	ldr	r3, [pc, #80]	@ (80045cc <MX_SPI1_Init+0x74>)
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800457e:	4b13      	ldr	r3, [pc, #76]	@ (80045cc <MX_SPI1_Init+0x74>)
 8004580:	2200      	movs	r2, #0
 8004582:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <MX_SPI1_Init+0x74>)
 8004586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800458a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800458c:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <MX_SPI1_Init+0x74>)
 800458e:	2218      	movs	r2, #24
 8004590:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004592:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <MX_SPI1_Init+0x74>)
 8004594:	2200      	movs	r2, #0
 8004596:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004598:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <MX_SPI1_Init+0x74>)
 800459a:	2200      	movs	r2, #0
 800459c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800459e:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <MX_SPI1_Init+0x74>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80045a4:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <MX_SPI1_Init+0x74>)
 80045a6:	2207      	movs	r2, #7
 80045a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80045aa:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <MX_SPI1_Init+0x74>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80045b0:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <MX_SPI1_Init+0x74>)
 80045b2:	2208      	movs	r2, #8
 80045b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045b6:	4805      	ldr	r0, [pc, #20]	@ (80045cc <MX_SPI1_Init+0x74>)
 80045b8:	f004 fb3c 	bl	8008c34 <HAL_SPI_Init>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80045c2:	f7ff ffc3 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20002134 	.word	0x20002134
 80045d0:	40013000 	.word	0x40013000

080045d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <HAL_SPI_MspInit+0x7c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d128      	bne.n	8004648 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045f6:	4b17      	ldr	r3, [pc, #92]	@ (8004654 <HAL_SPI_MspInit+0x80>)
 80045f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fa:	4a16      	ldr	r2, [pc, #88]	@ (8004654 <HAL_SPI_MspInit+0x80>)
 80045fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004600:	6613      	str	r3, [r2, #96]	@ 0x60
 8004602:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <HAL_SPI_MspInit+0x80>)
 8004604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800460e:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_SPI_MspInit+0x80>)
 8004610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004612:	4a10      	ldr	r2, [pc, #64]	@ (8004654 <HAL_SPI_MspInit+0x80>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800461a:	4b0e      	ldr	r3, [pc, #56]	@ (8004654 <HAL_SPI_MspInit+0x80>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004626:	23e0      	movs	r3, #224	@ 0xe0
 8004628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462a:	2302      	movs	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004632:	2300      	movs	r3, #0
 8004634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004636:	2305      	movs	r3, #5
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800463a:	f107 0314 	add.w	r3, r7, #20
 800463e:	4619      	mov	r1, r3
 8004640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004644:	f000 fdc2 	bl	80051cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004648:	bf00      	nop
 800464a:	3728      	adds	r7, #40	@ 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40013000 	.word	0x40013000
 8004654:	40021000 	.word	0x40021000

08004658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465e:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_MspInit+0x50>)
 8004660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004662:	4a11      	ldr	r2, [pc, #68]	@ (80046a8 <HAL_MspInit+0x50>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6613      	str	r3, [r2, #96]	@ 0x60
 800466a:	4b0f      	ldr	r3, [pc, #60]	@ (80046a8 <HAL_MspInit+0x50>)
 800466c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <HAL_MspInit+0x50>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	4a0b      	ldr	r2, [pc, #44]	@ (80046a8 <HAL_MspInit+0x50>)
 800467c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004680:	6593      	str	r3, [r2, #88]	@ 0x58
 8004682:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <HAL_MspInit+0x50>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	210f      	movs	r1, #15
 8004692:	f06f 0001 	mvn.w	r0, #1
 8004696:	f000 fbab 	bl	8004df0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800469a:	f003 fb11 	bl	8007cc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000

080046ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	@ 0x30
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80046bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004770 <HAL_InitTick+0xc4>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004770 <HAL_InitTick+0xc4>)
 80046c2:	f043 0310 	orr.w	r3, r3, #16
 80046c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c8:	4b29      	ldr	r3, [pc, #164]	@ (8004770 <HAL_InitTick+0xc4>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046d4:	f107 020c 	add.w	r2, r7, #12
 80046d8:	f107 0310 	add.w	r3, r7, #16
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f003 ffe4 	bl	80086ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80046e4:	f003 ffb6 	bl	8008654 <HAL_RCC_GetPCLK1Freq>
 80046e8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	4a21      	ldr	r2, [pc, #132]	@ (8004774 <HAL_InitTick+0xc8>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	0c9b      	lsrs	r3, r3, #18
 80046f4:	3b01      	subs	r3, #1
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80046f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004778 <HAL_InitTick+0xcc>)
 80046fa:	4a20      	ldr	r2, [pc, #128]	@ (800477c <HAL_InitTick+0xd0>)
 80046fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80046fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004778 <HAL_InitTick+0xcc>)
 8004700:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004704:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004706:	4a1c      	ldr	r2, [pc, #112]	@ (8004778 <HAL_InitTick+0xcc>)
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800470c:	4b1a      	ldr	r3, [pc, #104]	@ (8004778 <HAL_InitTick+0xcc>)
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004712:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <HAL_InitTick+0xcc>)
 8004714:	2200      	movs	r2, #0
 8004716:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8004718:	4817      	ldr	r0, [pc, #92]	@ (8004778 <HAL_InitTick+0xcc>)
 800471a:	f005 f82f 	bl	800977c <HAL_TIM_Base_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004724:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11b      	bne.n	8004764 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800472c:	4812      	ldr	r0, [pc, #72]	@ (8004778 <HAL_InitTick+0xcc>)
 800472e:	f005 f87d 	bl	800982c <HAL_TIM_Base_Start_IT>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004738:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800473c:	2b00      	cmp	r3, #0
 800473e:	d111      	bne.n	8004764 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004740:	2036      	movs	r0, #54	@ 0x36
 8004742:	f000 fb6f 	bl	8004e24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d808      	bhi.n	800475e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800474c:	2200      	movs	r2, #0
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	2036      	movs	r0, #54	@ 0x36
 8004752:	f000 fb4d 	bl	8004df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004756:	4a0a      	ldr	r2, [pc, #40]	@ (8004780 <HAL_InitTick+0xd4>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e002      	b.n	8004764 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004768:	4618      	mov	r0, r3
 800476a:	3730      	adds	r7, #48	@ 0x30
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000
 8004774:	431bde83 	.word	0x431bde83
 8004778:	20002198 	.word	0x20002198
 800477c:	40001000 	.word	0x40001000
 8004780:	20000004 	.word	0x20000004

08004784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <NMI_Handler+0x4>

0800478c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <HardFault_Handler+0x4>

08004794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <MemManage_Handler+0x4>

0800479c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <BusFault_Handler+0x4>

080047a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <UsageFault_Handler+0x4>

080047ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 80047be:	2002      	movs	r0, #2
 80047c0:	f000 fe9e 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80047cc:	4802      	ldr	r0, [pc, #8]	@ (80047d8 <USB_LP_IRQHandler+0x10>)
 80047ce:	f001 fdc2 	bl	8006356 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20014ba0 	.word	0x20014ba0

080047dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  ++ulHighFrequencyTimerTicks;		// Needed for FREERTOS stats
 80047e0:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a03      	ldr	r2, [pc, #12]	@ (80047f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80047ea:	4803      	ldr	r0, [pc, #12]	@ (80047f8 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80047ec:	f005 f896 	bl	800991c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20002130 	.word	0x20002130
 80047f8:	200021e8 	.word	0x200021e8

080047fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 8004800:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004804:	f000 fe7c 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BMP_INT_Pin);
 8004808:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800480c:	f000 fe78 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 8004810:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004814:	f000 fe74 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004818:	bf00      	nop
 800481a:	bd80      	pop	{r7, pc}

0800481c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004820:	4802      	ldr	r0, [pc, #8]	@ (800482c <TIM6_DAC_IRQHandler+0x10>)
 8004822:	f005 f87b 	bl	800991c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20002198 	.word	0x20002198

08004830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return 1;
 8004834:	2301      	movs	r3, #1
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_kill>:

int _kill(int pid, int sig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800484a:	f00f fbb7 	bl	8013fbc <__errno>
 800484e:	4603      	mov	r3, r0
 8004850:	2216      	movs	r2, #22
 8004852:	601a      	str	r2, [r3, #0]
  return -1;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_exit>:

void _exit (int status)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004868:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ffe7 	bl	8004840 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004872:	bf00      	nop
 8004874:	e7fd      	b.n	8004872 <_exit+0x12>

08004876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e00a      	b.n	800489e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004888:	f3af 8000 	nop.w
 800488c:	4601      	mov	r1, r0
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	60ba      	str	r2, [r7, #8]
 8004894:	b2ca      	uxtb	r2, r1
 8004896:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3301      	adds	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	dbf0      	blt.n	8004888 <_read+0x12>
  }

  return len;
 80048a6:	687b      	ldr	r3, [r7, #4]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e009      	b.n	80048d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	60ba      	str	r2, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3301      	adds	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	dbf1      	blt.n	80048c2 <_write+0x12>
  }
  return len;
 80048de:	687b      	ldr	r3, [r7, #4]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <_close>:

int _close(int file)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004910:	605a      	str	r2, [r3, #4]
  return 0;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_isatty>:

int _isatty(int file)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004928:	2301      	movs	r3, #1
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004958:	4a14      	ldr	r2, [pc, #80]	@ (80049ac <_sbrk+0x5c>)
 800495a:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <_sbrk+0x60>)
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004964:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <_sbrk+0x64>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <_sbrk+0x64>)
 800496e:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <_sbrk+0x68>)
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004972:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <_sbrk+0x64>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	429a      	cmp	r2, r3
 800497e:	d207      	bcs.n	8004990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004980:	f00f fb1c 	bl	8013fbc <__errno>
 8004984:	4603      	mov	r3, r0
 8004986:	220c      	movs	r2, #12
 8004988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800498a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800498e:	e009      	b.n	80049a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004990:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <_sbrk+0x64>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004996:	4b07      	ldr	r3, [pc, #28]	@ (80049b4 <_sbrk+0x64>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4413      	add	r3, r2
 800499e:	4a05      	ldr	r2, [pc, #20]	@ (80049b4 <_sbrk+0x64>)
 80049a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20020000 	.word	0x20020000
 80049b0:	00000400 	.word	0x00000400
 80049b4:	200021e4 	.word	0x200021e4
 80049b8:	200151f0 	.word	0x200151f0

080049bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <SystemInit+0x20>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	4a05      	ldr	r2, [pc, #20]	@ (80049dc <SystemInit+0x20>)
 80049c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80049e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <MX_TIM16_Init+0x44>)
 80049e6:	4a10      	ldr	r2, [pc, #64]	@ (8004a28 <MX_TIM16_Init+0x48>)
 80049e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80049ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <MX_TIM16_Init+0x44>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <MX_TIM16_Init+0x44>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1699;
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <MX_TIM16_Init+0x44>)
 80049f8:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80049fc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049fe:	4b09      	ldr	r3, [pc, #36]	@ (8004a24 <MX_TIM16_Init+0x44>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004a04:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <MX_TIM16_Init+0x44>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <MX_TIM16_Init+0x44>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004a10:	4804      	ldr	r0, [pc, #16]	@ (8004a24 <MX_TIM16_Init+0x44>)
 8004a12:	f004 feb3 	bl	800977c <HAL_TIM_Base_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004a1c:	f7ff fd96 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	200021e8 	.word	0x200021e8
 8004a28:	40014400 	.word	0x40014400

08004a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a0d      	ldr	r2, [pc, #52]	@ (8004a70 <HAL_TIM_Base_MspInit+0x44>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d113      	bne.n	8004a66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <HAL_TIM_Base_MspInit+0x48>)
 8004a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a42:	4a0c      	ldr	r2, [pc, #48]	@ (8004a74 <HAL_TIM_Base_MspInit+0x48>)
 8004a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a48:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <HAL_TIM_Base_MspInit+0x48>)
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8004a56:	2200      	movs	r2, #0
 8004a58:	2105      	movs	r1, #5
 8004a5a:	2019      	movs	r0, #25
 8004a5c:	f000 f9c8 	bl	8004df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004a60:	2019      	movs	r0, #25
 8004a62:	f000 f9df 	bl	8004e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40021000 	.word	0x40021000

08004a78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a7c:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004a7e:	4a23      	ldr	r2, [pc, #140]	@ (8004b0c <MX_USART2_UART_Init+0x94>)
 8004a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a82:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a90:	4b1d      	ldr	r3, [pc, #116]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a96:	4b1c      	ldr	r3, [pc, #112]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004a9e:	220c      	movs	r2, #12
 8004aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aa2:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aa8:	4b17      	ldr	r3, [pc, #92]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004aae:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aba:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ac0:	4811      	ldr	r0, [pc, #68]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004ac2:	f005 f99d 	bl	8009e00 <HAL_UART_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004acc:	f7ff fd3e 	bl	800454c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	480d      	ldr	r0, [pc, #52]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004ad4:	f005 ff38 	bl	800a948 <HAL_UARTEx_SetTxFifoThreshold>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004ade:	f7ff fd35 	bl	800454c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4808      	ldr	r0, [pc, #32]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004ae6:	f005 ff6d 	bl	800a9c4 <HAL_UARTEx_SetRxFifoThreshold>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004af0:	f7ff fd2c 	bl	800454c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004af4:	4804      	ldr	r0, [pc, #16]	@ (8004b08 <MX_USART2_UART_Init+0x90>)
 8004af6:	f005 feee 	bl	800a8d6 <HAL_UARTEx_DisableFifoMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b00:	f7ff fd24 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b04:	bf00      	nop
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20002234 	.word	0x20002234
 8004b0c:	40004400 	.word	0x40004400

08004b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b09e      	sub	sp, #120	@ 0x78
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	2254      	movs	r2, #84	@ 0x54
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f00f f946 	bl	8013dc2 <memset>
  if(uartHandle->Instance==USART2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb8 <HAL_UART_MspInit+0xa8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d136      	bne.n	8004bae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b40:	2302      	movs	r3, #2
 8004b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b48:	f107 0310 	add.w	r3, r7, #16
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f003 fe23 	bl	8008798 <HAL_RCCEx_PeriphCLKConfig>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004b58:	f7ff fcf8 	bl	800454c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <HAL_UART_MspInit+0xac>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <HAL_UART_MspInit+0xac>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b68:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <HAL_UART_MspInit+0xac>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b74:	4b11      	ldr	r3, [pc, #68]	@ (8004bbc <HAL_UART_MspInit+0xac>)
 8004b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b78:	4a10      	ldr	r2, [pc, #64]	@ (8004bbc <HAL_UART_MspInit+0xac>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <HAL_UART_MspInit+0xac>)
 8004b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b90:	2302      	movs	r3, #2
 8004b92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004baa:	f000 fb0f 	bl	80051cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3778      	adds	r7, #120	@ 0x78
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40004400 	.word	0x40004400
 8004bbc:	40021000 	.word	0x40021000

08004bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bc0:	480d      	ldr	r0, [pc, #52]	@ (8004bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bc4:	f7ff fefa 	bl	80049bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bc8:	480c      	ldr	r0, [pc, #48]	@ (8004bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8004bca:	490d      	ldr	r1, [pc, #52]	@ (8004c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <LoopForever+0xe>)
  movs r3, #0
 8004bce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004bd0:	e002      	b.n	8004bd8 <LoopCopyDataInit>

08004bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bd6:	3304      	adds	r3, #4

08004bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bdc:	d3f9      	bcc.n	8004bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004be0:	4c0a      	ldr	r4, [pc, #40]	@ (8004c0c <LoopForever+0x16>)
  movs r3, #0
 8004be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004be4:	e001      	b.n	8004bea <LoopFillZerobss>

08004be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004be8:	3204      	adds	r2, #4

08004bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bec:	d3fb      	bcc.n	8004be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bee:	f00f f9eb 	bl	8013fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bf2:	f7ff fc15 	bl	8004420 <main>

08004bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8004bf6:	e7fe      	b.n	8004bf6 <LoopForever>
  ldr   r0, =_estack
 8004bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c00:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8004c04:	08016ab8 	.word	0x08016ab8
  ldr r2, =_sbss
 8004c08:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8004c0c:	200151ec 	.word	0x200151ec

08004c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c10:	e7fe      	b.n	8004c10 <ADC1_2_IRQHandler>

08004c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c1c:	2003      	movs	r0, #3
 8004c1e:	f000 f8dc 	bl	8004dda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c22:	200f      	movs	r0, #15
 8004c24:	f7ff fd42 	bl	80046ac <HAL_InitTick>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	71fb      	strb	r3, [r7, #7]
 8004c32:	e001      	b.n	8004c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c34:	f7ff fd10 	bl	8004658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c38:	79fb      	ldrb	r3, [r7, #7]

}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <HAL_IncTick+0x1c>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <HAL_IncTick+0x20>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4413      	add	r3, r2
 8004c52:	4a03      	ldr	r2, [pc, #12]	@ (8004c60 <HAL_IncTick+0x1c>)
 8004c54:	6013      	str	r3, [r2, #0]
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	200022c8 	.word	0x200022c8
 8004c64:	20000008 	.word	0x20000008

08004c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	@ (8004c7c <HAL_GetTick+0x14>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	200022c8 	.word	0x200022c8

08004c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c90:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	60d3      	str	r3, [r2, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f003 0307 	and.w	r3, r3, #7
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000ed00 	.word	0xe000ed00

08004ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	db0b      	blt.n	8004d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	4907      	ldr	r1, [pc, #28]	@ (8004d1c <__NVIC_EnableIRQ+0x38>)
 8004cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2001      	movs	r0, #1
 8004d06:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	e000e100 	.word	0xe000e100

08004d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db0a      	blt.n	8004d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	490c      	ldr	r1, [pc, #48]	@ (8004d6c <__NVIC_SetPriority+0x4c>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	440b      	add	r3, r1
 8004d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d48:	e00a      	b.n	8004d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4908      	ldr	r1, [pc, #32]	@ (8004d70 <__NVIC_SetPriority+0x50>)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3b04      	subs	r3, #4
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	761a      	strb	r2, [r3, #24]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000e100 	.word	0xe000e100
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	@ 0x24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f1c3 0307 	rsb	r3, r3, #7
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	bf28      	it	cs
 8004d92:	2304      	movcs	r3, #4
 8004d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d902      	bls.n	8004da4 <NVIC_EncodePriority+0x30>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3b03      	subs	r3, #3
 8004da2:	e000      	b.n	8004da6 <NVIC_EncodePriority+0x32>
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	401a      	ands	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	43d9      	mvns	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dcc:	4313      	orrs	r3, r2
         );
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3724      	adds	r7, #36	@ 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ff4c 	bl	8004c80 <__NVIC_SetPriorityGrouping>
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dfe:	f7ff ff63 	bl	8004cc8 <__NVIC_GetPriorityGrouping>
 8004e02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f7ff ffb3 	bl	8004d74 <NVIC_EncodePriority>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff82 	bl	8004d20 <__NVIC_SetPriority>
}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ff56 	bl	8004ce4 <__NVIC_EnableIRQ>
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e147      	b.n	80050e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff f89c 	bl	8003fa4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0210 	bic.w	r2, r2, #16
 8004e7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e7c:	f7ff fef4 	bl	8004c68 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e82:	e012      	b.n	8004eaa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e84:	f7ff fef0 	bl	8004c68 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b0a      	cmp	r3, #10
 8004e90:	d90b      	bls.n	8004eaa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e11b      	b.n	80050e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d0e5      	beq.n	8004e84 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec8:	f7ff fece 	bl	8004c68 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004ece:	e012      	b.n	8004ef6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ed0:	f7ff feca 	bl	8004c68 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b0a      	cmp	r3, #10
 8004edc:	d90b      	bls.n	8004ef6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2203      	movs	r2, #3
 8004eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0f5      	b.n	80050e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0e5      	beq.n	8004ed0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0202 	orr.w	r2, r2, #2
 8004f12:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a74      	ldr	r2, [pc, #464]	@ (80050ec <HAL_FDCAN_Init+0x2ac>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d103      	bne.n	8004f26 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004f1e:	4a74      	ldr	r2, [pc, #464]	@ (80050f0 <HAL_FDCAN_Init+0x2b0>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7c1b      	ldrb	r3, [r3, #16]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d108      	bne.n	8004f40 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f3c:	619a      	str	r2, [r3, #24]
 8004f3e:	e007      	b.n	8004f50 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f4e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7c5b      	ldrb	r3, [r3, #17]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d108      	bne.n	8004f6a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f66:	619a      	str	r2, [r3, #24]
 8004f68:	e007      	b.n	8004f7a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f78:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	7c9b      	ldrb	r3, [r3, #18]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d108      	bne.n	8004f94 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f90:	619a      	str	r2, [r3, #24]
 8004f92:	e007      	b.n	8004fa4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fa2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004fc8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0210 	bic.w	r2, r2, #16
 8004fd8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d108      	bne.n	8004ff4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0204 	orr.w	r2, r2, #4
 8004ff0:	619a      	str	r2, [r3, #24]
 8004ff2:	e02c      	b.n	800504e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d028      	beq.n	800504e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d01c      	beq.n	800503e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005012:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0210 	orr.w	r2, r2, #16
 8005022:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d110      	bne.n	800504e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0220 	orr.w	r2, r2, #32
 800503a:	619a      	str	r2, [r3, #24]
 800503c:	e007      	b.n	800504e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0220 	orr.w	r2, r2, #32
 800504c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	3b01      	subs	r3, #1
 8005054:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	3b01      	subs	r3, #1
 800505c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800505e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005066:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	3b01      	subs	r3, #1
 8005070:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005076:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005078:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005082:	d115      	bne.n	80050b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	3b01      	subs	r3, #1
 8005090:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005092:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	3b01      	subs	r3, #1
 800509a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800509c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	3b01      	subs	r3, #1
 80050a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80050ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f814 	bl	80050f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40006400 	.word	0x40006400
 80050f0:	40006500 	.word	0x40006500

080050f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80050fc:	4b30      	ldr	r3, [pc, #192]	@ (80051c0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80050fe:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2f      	ldr	r2, [pc, #188]	@ (80051c4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d103      	bne.n	8005112 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005110:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2c      	ldr	r2, [pc, #176]	@ (80051c8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005122:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005132:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513a:	041a      	lsls	r2, r3, #16
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005158:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005160:	061a      	lsls	r2, r3, #24
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e005      	b.n	80051a6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3304      	adds	r3, #4
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d3f3      	bcc.n	800519a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	4000a400 	.word	0x4000a400
 80051c4:	40006800 	.word	0x40006800
 80051c8:	40006c00 	.word	0x40006c00

080051cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051da:	e15a      	b.n	8005492 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2101      	movs	r1, #1
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 814c 	beq.w	800548c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d005      	beq.n	800520c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005208:	2b02      	cmp	r3, #2
 800520a:	d130      	bne.n	800526e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2203      	movs	r2, #3
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4013      	ands	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005242:	2201      	movs	r2, #1
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	f003 0201 	and.w	r2, r3, #1
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b03      	cmp	r3, #3
 8005278:	d017      	beq.n	80052aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d123      	bne.n	80052fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	08da      	lsrs	r2, r3, #3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3208      	adds	r2, #8
 80052be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	220f      	movs	r2, #15
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4013      	ands	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	08da      	lsrs	r2, r3, #3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3208      	adds	r2, #8
 80052f8:	6939      	ldr	r1, [r7, #16]
 80052fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	2203      	movs	r2, #3
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4013      	ands	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0203 	and.w	r2, r3, #3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80a6 	beq.w	800548c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005340:	4b5b      	ldr	r3, [pc, #364]	@ (80054b0 <HAL_GPIO_Init+0x2e4>)
 8005342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005344:	4a5a      	ldr	r2, [pc, #360]	@ (80054b0 <HAL_GPIO_Init+0x2e4>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6613      	str	r3, [r2, #96]	@ 0x60
 800534c:	4b58      	ldr	r3, [pc, #352]	@ (80054b0 <HAL_GPIO_Init+0x2e4>)
 800534e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005358:	4a56      	ldr	r2, [pc, #344]	@ (80054b4 <HAL_GPIO_Init+0x2e8>)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	3302      	adds	r3, #2
 8005360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	220f      	movs	r2, #15
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005382:	d01f      	beq.n	80053c4 <HAL_GPIO_Init+0x1f8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a4c      	ldr	r2, [pc, #304]	@ (80054b8 <HAL_GPIO_Init+0x2ec>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d019      	beq.n	80053c0 <HAL_GPIO_Init+0x1f4>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a4b      	ldr	r2, [pc, #300]	@ (80054bc <HAL_GPIO_Init+0x2f0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <HAL_GPIO_Init+0x1f0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a4a      	ldr	r2, [pc, #296]	@ (80054c0 <HAL_GPIO_Init+0x2f4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00d      	beq.n	80053b8 <HAL_GPIO_Init+0x1ec>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a49      	ldr	r2, [pc, #292]	@ (80054c4 <HAL_GPIO_Init+0x2f8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <HAL_GPIO_Init+0x1e8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a48      	ldr	r2, [pc, #288]	@ (80054c8 <HAL_GPIO_Init+0x2fc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d101      	bne.n	80053b0 <HAL_GPIO_Init+0x1e4>
 80053ac:	2305      	movs	r3, #5
 80053ae:	e00a      	b.n	80053c6 <HAL_GPIO_Init+0x1fa>
 80053b0:	2306      	movs	r3, #6
 80053b2:	e008      	b.n	80053c6 <HAL_GPIO_Init+0x1fa>
 80053b4:	2304      	movs	r3, #4
 80053b6:	e006      	b.n	80053c6 <HAL_GPIO_Init+0x1fa>
 80053b8:	2303      	movs	r3, #3
 80053ba:	e004      	b.n	80053c6 <HAL_GPIO_Init+0x1fa>
 80053bc:	2302      	movs	r3, #2
 80053be:	e002      	b.n	80053c6 <HAL_GPIO_Init+0x1fa>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <HAL_GPIO_Init+0x1fa>
 80053c4:	2300      	movs	r3, #0
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	f002 0203 	and.w	r2, r2, #3
 80053cc:	0092      	lsls	r2, r2, #2
 80053ce:	4093      	lsls	r3, r2
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053d6:	4937      	ldr	r1, [pc, #220]	@ (80054b4 <HAL_GPIO_Init+0x2e8>)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	3302      	adds	r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053e4:	4b39      	ldr	r3, [pc, #228]	@ (80054cc <HAL_GPIO_Init+0x300>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4013      	ands	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005408:	4a30      	ldr	r2, [pc, #192]	@ (80054cc <HAL_GPIO_Init+0x300>)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800540e:	4b2f      	ldr	r3, [pc, #188]	@ (80054cc <HAL_GPIO_Init+0x300>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	43db      	mvns	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4013      	ands	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005432:	4a26      	ldr	r2, [pc, #152]	@ (80054cc <HAL_GPIO_Init+0x300>)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005438:	4b24      	ldr	r3, [pc, #144]	@ (80054cc <HAL_GPIO_Init+0x300>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	43db      	mvns	r3, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800545c:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <HAL_GPIO_Init+0x300>)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005462:	4b1a      	ldr	r3, [pc, #104]	@ (80054cc <HAL_GPIO_Init+0x300>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	43db      	mvns	r3, r3
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005486:	4a11      	ldr	r2, [pc, #68]	@ (80054cc <HAL_GPIO_Init+0x300>)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3301      	adds	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f ae9d 	bne.w	80051dc <HAL_GPIO_Init+0x10>
  }
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40010000 	.word	0x40010000
 80054b8:	48000400 	.word	0x48000400
 80054bc:	48000800 	.word	0x48000800
 80054c0:	48000c00 	.word	0x48000c00
 80054c4:	48001000 	.word	0x48001000
 80054c8:	48001400 	.word	0x48001400
 80054cc:	40010400 	.word	0x40010400

080054d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	807b      	strh	r3, [r7, #2]
 80054dc:	4613      	mov	r3, r2
 80054de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054e0:	787b      	ldrb	r3, [r7, #1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054ec:	e002      	b.n	80054f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054ee:	887a      	ldrh	r2, [r7, #2]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800550a:	4b08      	ldr	r3, [pc, #32]	@ (800552c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d006      	beq.n	8005524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005516:	4a05      	ldr	r2, [pc, #20]	@ (800552c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fc7c 	bl	8003e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40010400 	.word	0x40010400

08005530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e08d      	b.n	800565e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fe ff0a 	bl	8004370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2224      	movs	r2, #36	@ 0x24
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005580:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005590:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	e006      	b.n	80055b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80055b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d108      	bne.n	80055d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	e007      	b.n	80055e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005604:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69d9      	ldr	r1, [r3, #28]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4603      	mov	r3, r0
 8005678:	817b      	strh	r3, [r7, #10]
 800567a:	460b      	mov	r3, r1
 800567c:	813b      	strh	r3, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	f040 80f9 	bne.w	8005882 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_I2C_Mem_Write+0x34>
 8005696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0ed      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_I2C_Mem_Write+0x4e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0e6      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056be:	f7ff fad3 	bl	8004c68 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2319      	movs	r3, #25
 80056ca:	2201      	movs	r2, #1
 80056cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fac3 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0d1      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2221      	movs	r2, #33	@ 0x21
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2240      	movs	r2, #64	@ 0x40
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005708:	88f8      	ldrh	r0, [r7, #6]
 800570a:	893a      	ldrh	r2, [r7, #8]
 800570c:	8979      	ldrh	r1, [r7, #10]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4603      	mov	r3, r0
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f9d3 	bl	8005ac4 <I2C_RequestMemoryWrite>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0a9      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2bff      	cmp	r3, #255	@ 0xff
 8005738:	d90e      	bls.n	8005758 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	22ff      	movs	r2, #255	@ 0xff
 800573e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005744:	b2da      	uxtb	r2, r3
 8005746:	8979      	ldrh	r1, [r7, #10]
 8005748:	2300      	movs	r3, #0
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fc47 	bl	8005fe4 <I2C_TransferConfig>
 8005756:	e00f      	b.n	8005778 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005766:	b2da      	uxtb	r2, r3
 8005768:	8979      	ldrh	r1, [r7, #10]
 800576a:	2300      	movs	r3, #0
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fc36 	bl	8005fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fac6 	bl	8005d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e07b      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d034      	beq.n	8005830 <HAL_I2C_Mem_Write+0x1c8>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d130      	bne.n	8005830 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	2200      	movs	r2, #0
 80057d6:	2180      	movs	r1, #128	@ 0x80
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fa3f 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e04d      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2bff      	cmp	r3, #255	@ 0xff
 80057f0:	d90e      	bls.n	8005810 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	22ff      	movs	r2, #255	@ 0xff
 80057f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	8979      	ldrh	r1, [r7, #10]
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fbeb 	bl	8005fe4 <I2C_TransferConfig>
 800580e:	e00f      	b.n	8005830 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	8979      	ldrh	r1, [r7, #10]
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fbda 	bl	8005fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d19e      	bne.n	8005778 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 faac 	bl	8005d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e01a      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2220      	movs	r2, #32
 8005854:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6859      	ldr	r1, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <HAL_I2C_Mem_Write+0x224>)
 8005862:	400b      	ands	r3, r1
 8005864:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	fe00e800 	.word	0xfe00e800

08005890 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	461a      	mov	r2, r3
 800589e:	4603      	mov	r3, r0
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	460b      	mov	r3, r1
 80058a4:	813b      	strh	r3, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	f040 80fd 	bne.w	8005ab2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_I2C_Mem_Read+0x34>
 80058be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0f1      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_I2C_Mem_Read+0x4e>
 80058da:	2302      	movs	r3, #2
 80058dc:	e0ea      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058e6:	f7ff f9bf 	bl	8004c68 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	2319      	movs	r3, #25
 80058f2:	2201      	movs	r2, #1
 80058f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f9af 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0d5      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2222      	movs	r2, #34	@ 0x22
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2240      	movs	r2, #64	@ 0x40
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005928:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005930:	88f8      	ldrh	r0, [r7, #6]
 8005932:	893a      	ldrh	r2, [r7, #8]
 8005934:	8979      	ldrh	r1, [r7, #10]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	4603      	mov	r3, r0
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f913 	bl	8005b6c <I2C_RequestMemoryRead>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0ad      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	2bff      	cmp	r3, #255	@ 0xff
 8005960:	d90e      	bls.n	8005980 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	22ff      	movs	r2, #255	@ 0xff
 8005966:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596c:	b2da      	uxtb	r2, r3
 800596e:	8979      	ldrh	r1, [r7, #10]
 8005970:	4b52      	ldr	r3, [pc, #328]	@ (8005abc <HAL_I2C_Mem_Read+0x22c>)
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb33 	bl	8005fe4 <I2C_TransferConfig>
 800597e:	e00f      	b.n	80059a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598e:	b2da      	uxtb	r2, r3
 8005990:	8979      	ldrh	r1, [r7, #10]
 8005992:	4b4a      	ldr	r3, [pc, #296]	@ (8005abc <HAL_I2C_Mem_Read+0x22c>)
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fb22 	bl	8005fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	2200      	movs	r2, #0
 80059a8:	2104      	movs	r1, #4
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f956 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e07c      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d034      	beq.n	8005a60 <HAL_I2C_Mem_Read+0x1d0>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d130      	bne.n	8005a60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	2200      	movs	r2, #0
 8005a06:	2180      	movs	r1, #128	@ 0x80
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f927 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e04d      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2bff      	cmp	r3, #255	@ 0xff
 8005a20:	d90e      	bls.n	8005a40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	22ff      	movs	r2, #255	@ 0xff
 8005a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	8979      	ldrh	r1, [r7, #10]
 8005a30:	2300      	movs	r3, #0
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fad3 	bl	8005fe4 <I2C_TransferConfig>
 8005a3e:	e00f      	b.n	8005a60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	8979      	ldrh	r1, [r7, #10]
 8005a52:	2300      	movs	r3, #0
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fac2 	bl	8005fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d19a      	bne.n	80059a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f994 	bl	8005d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e01a      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2220      	movs	r2, #32
 8005a84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <HAL_I2C_Mem_Read+0x230>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	80002400 	.word	0x80002400
 8005ac0:	fe00e800 	.word	0xfe00e800

08005ac4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	817b      	strh	r3, [r7, #10]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	813b      	strh	r3, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	8979      	ldrh	r1, [r7, #10]
 8005ae4:	4b20      	ldr	r3, [pc, #128]	@ (8005b68 <I2C_RequestMemoryWrite+0xa4>)
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fa79 	bl	8005fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f909 	bl	8005d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e02c      	b.n	8005b60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0c:	893b      	ldrh	r3, [r7, #8]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b16:	e015      	b.n	8005b44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f8ef 	bl	8005d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e012      	b.n	8005b60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3a:	893b      	ldrh	r3, [r7, #8]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	@ 0x80
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f884 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	80002000 	.word	0x80002000

08005b6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	817b      	strh	r3, [r7, #10]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	813b      	strh	r3, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	8979      	ldrh	r1, [r7, #10]
 8005b8c:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <I2C_RequestMemoryRead+0xa4>)
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	2300      	movs	r3, #0
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fa26 	bl	8005fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	69b9      	ldr	r1, [r7, #24]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f8b6 	bl	8005d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e02c      	b.n	8005c06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb2:	893b      	ldrh	r3, [r7, #8]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bbc:	e015      	b.n	8005bea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bbe:	893b      	ldrh	r3, [r7, #8]
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	69b9      	ldr	r1, [r7, #24]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f89c 	bl	8005d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e012      	b.n	8005c06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005be0:	893b      	ldrh	r3, [r7, #8]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2140      	movs	r1, #64	@ 0x40
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f831 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	80002000 	.word	0x80002000

08005c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d103      	bne.n	8005c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d007      	beq.n	8005c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	619a      	str	r2, [r3, #24]
  }
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c6c:	e03b      	b.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f8d6 	bl	8005e24 <I2C_IsErrorOccurred>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e041      	b.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c88:	d02d      	beq.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8a:	f7fe ffed 	bl	8004c68 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d302      	bcc.n	8005ca0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d122      	bne.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d113      	bne.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc2:	f043 0220 	orr.w	r2, r3, #32
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e00f      	b.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	bf0c      	ite	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	2300      	movne	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d0b4      	beq.n	8005c6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d1a:	e033      	b.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f87f 	bl	8005e24 <I2C_IsErrorOccurred>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e031      	b.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d36:	d025      	beq.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d38:	f7fe ff96 	bl	8004c68 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d302      	bcc.n	8005d4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11a      	bne.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d013      	beq.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e007      	b.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d1c4      	bne.n	8005d1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005da8:	e02f      	b.n	8005e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f838 	bl	8005e24 <I2C_IsErrorOccurred>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e02d      	b.n	8005e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dbe:	f7fe ff53 	bl	8004c68 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d302      	bcc.n	8005dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11a      	bne.n	8005e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d013      	beq.n	8005e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e007      	b.n	8005e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d1c8      	bne.n	8005daa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	@ 0x28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d068      	beq.n	8005f22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2210      	movs	r2, #16
 8005e56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e58:	e049      	b.n	8005eee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e60:	d045      	beq.n	8005eee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fe ff01 	bl	8004c68 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <I2C_IsErrorOccurred+0x54>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d13a      	bne.n	8005eee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e9a:	d121      	bne.n	8005ee0 <I2C_IsErrorOccurred+0xbc>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea2:	d01d      	beq.n	8005ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d01a      	beq.n	8005ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005eba:	f7fe fed5 	bl	8004c68 <HAL_GetTick>
 8005ebe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec0:	e00e      	b.n	8005ee0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ec2:	f7fe fed1 	bl	8004c68 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b19      	cmp	r3, #25
 8005ece:	d907      	bls.n	8005ee0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	f043 0320 	orr.w	r3, r3, #32
 8005ed6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005ede:	e006      	b.n	8005eee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d1e9      	bne.n	8005ec2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d003      	beq.n	8005f04 <I2C_IsErrorOccurred+0xe0>
 8005efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0aa      	beq.n	8005e5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d103      	bne.n	8005f14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2220      	movs	r2, #32
 8005f12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f043 0304 	orr.w	r3, r3, #4
 8005f1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	f043 0302 	orr.w	r3, r3, #2
 8005f7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01c      	beq.n	8005fd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fe3b 	bl	8005c14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <I2C_IsErrorOccurred+0x1bc>)
 8005faa:	400b      	ands	r3, r1
 8005fac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3728      	adds	r7, #40	@ 0x28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	fe00e800 	.word	0xfe00e800

08005fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	817b      	strh	r3, [r7, #10]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ff6:	897b      	ldrh	r3, [r7, #10]
 8005ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ffc:	7a7b      	ldrb	r3, [r7, #9]
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006004:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	4313      	orrs	r3, r2
 800600e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006012:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	0d5b      	lsrs	r3, r3, #21
 800601e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006022:	4b08      	ldr	r3, [pc, #32]	@ (8006044 <I2C_TransferConfig+0x60>)
 8006024:	430b      	orrs	r3, r1
 8006026:	43db      	mvns	r3, r3
 8006028:	ea02 0103 	and.w	r1, r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	03ff63ff 	.word	0x03ff63ff

08006048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b20      	cmp	r3, #32
 800605c:	d138      	bne.n	80060d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006068:	2302      	movs	r3, #2
 800606a:	e032      	b.n	80060d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	@ 0x24
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800609a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e000      	b.n	80060d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
  }
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d139      	bne.n	8006168 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060fe:	2302      	movs	r3, #2
 8006100:	e033      	b.n	800616a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	@ 0x24
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006130:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0c0      	b.n	800630a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f00b ff59 	bl	8012054 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2203      	movs	r2, #3
 80061a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f004 fcab 	bl	800ab0a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	73fb      	strb	r3, [r7, #15]
 80061b8:	e03e      	b.n	8006238 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	440b      	add	r3, r1
 80061c8:	3311      	adds	r3, #17
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061ce:	7bfa      	ldrb	r2, [r7, #15]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	440b      	add	r3, r1
 80061dc:	3310      	adds	r3, #16
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061e2:	7bfa      	ldrb	r2, [r7, #15]
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	440b      	add	r3, r1
 80061f0:	3313      	adds	r3, #19
 80061f2:	2200      	movs	r2, #0
 80061f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061f6:	7bfa      	ldrb	r2, [r7, #15]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	440b      	add	r3, r1
 8006204:	3320      	adds	r3, #32
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800620a:	7bfa      	ldrb	r2, [r7, #15]
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	440b      	add	r3, r1
 8006218:	3324      	adds	r3, #36	@ 0x24
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	440b      	add	r3, r1
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	3301      	adds	r3, #1
 8006236:	73fb      	strb	r3, [r7, #15]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	7bfa      	ldrb	r2, [r7, #15]
 800623e:	429a      	cmp	r2, r3
 8006240:	d3bb      	bcc.n	80061ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]
 8006246:	e044      	b.n	80062d2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006248:	7bfa      	ldrb	r2, [r7, #15]
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	440b      	add	r3, r1
 8006256:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800625e:	7bfa      	ldrb	r2, [r7, #15]
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	440b      	add	r3, r1
 800626c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006270:	7bfa      	ldrb	r2, [r7, #15]
 8006272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006274:	7bfa      	ldrb	r2, [r7, #15]
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	440b      	add	r3, r1
 8006282:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	440b      	add	r3, r1
 8006298:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	440b      	add	r3, r1
 80062ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062b6:	7bfa      	ldrb	r2, [r7, #15]
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	440b      	add	r3, r1
 80062c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	3301      	adds	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	7bfa      	ldrb	r2, [r7, #15]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3b5      	bcc.n	8006248 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80062e8:	f004 fc2a 	bl	800ab40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	7a9b      	ldrb	r3, [r3, #10]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d102      	bne.n	8006308 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fc0e 	bl	8007b24 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_PCD_Start+0x16>
 8006324:	2302      	movs	r3, #2
 8006326:	e012      	b.n	800634e <HAL_PCD_Start+0x3c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f004 fbd1 	bl	800aadc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f006 f9ae 	bl	800c6a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f006 f9b3 	bl	800c6ce <USB_ReadInterrupts>
 8006368:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fb06 	bl	8006986 <PCD_EP_ISR_Handler>

    return;
 800637a:	e110      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006382:	2b00      	cmp	r3, #0
 8006384:	d013      	beq.n	80063ae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006398:	b292      	uxth	r2, r2
 800639a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f00b fee9 	bl	8012176 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8fc 	bl	80065a4 <HAL_PCD_SetAddress>

    return;
 80063ac:	e0f7      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063ca:	b292      	uxth	r2, r2
 80063cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80063d0:	e0e5      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063ee:	b292      	uxth	r2, r2
 80063f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80063f4:	e0d3      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d034      	beq.n	800646a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0204 	bic.w	r2, r2, #4
 8006412:	b292      	uxth	r2, r2
 8006414:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0208 	bic.w	r2, r2, #8
 800642a:	b292      	uxth	r2, r2
 800642c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006442:	2100      	movs	r1, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f00c f889 	bl	801255c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f00b fecc 	bl	80121e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006462:	b292      	uxth	r2, r2
 8006464:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006468:	e099      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006470:	2b00      	cmp	r3, #0
 8006472:	d027      	beq.n	80064c4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0208 	orr.w	r2, r2, #8
 8006486:	b292      	uxth	r2, r2
 8006488:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800649e:	b292      	uxth	r2, r2
 80064a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0204 	orr.w	r2, r2, #4
 80064b6:	b292      	uxth	r2, r2
 80064b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f00b fe79 	bl	80121b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80064c2:	e06c      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d040      	beq.n	8006550 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064e0:	b292      	uxth	r2, r2
 80064e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d12b      	bne.n	8006548 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0204 	orr.w	r2, r2, #4
 8006502:	b292      	uxth	r2, r2
 8006504:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006510:	b29a      	uxth	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0208 	orr.w	r2, r2, #8
 800651a:	b292      	uxth	r2, r2
 800651c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006530:	b29b      	uxth	r3, r3
 8006532:	089b      	lsrs	r3, r3, #2
 8006534:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800653e:	2101      	movs	r1, #1
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f00c f80b 	bl	801255c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006546:	e02a      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f00b fe33 	bl	80121b4 <HAL_PCD_SuspendCallback>
    return;
 800654e:	e026      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006562:	b29a      	uxth	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800656c:	b292      	uxth	r2, r2
 800656e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f00b fdf1 	bl	801215a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006578:	e011      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00c      	beq.n	800659e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006596:	b292      	uxth	r2, r2
 8006598:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800659c:	bf00      	nop
  }
}
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_PCD_SetAddress+0x1a>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e012      	b.n	80065e4 <HAL_PCD_SetAddress+0x40>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	78fa      	ldrb	r2, [r7, #3]
 80065ca:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f006 f84f 	bl	800c678 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	70fb      	strb	r3, [r7, #3]
 80065fe:	460b      	mov	r3, r1
 8006600:	803b      	strh	r3, [r7, #0]
 8006602:	4613      	mov	r3, r2
 8006604:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800660a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800660e:	2b00      	cmp	r3, #0
 8006610:	da0e      	bge.n	8006630 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	f003 0207 	and.w	r2, r3, #7
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	3310      	adds	r3, #16
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	705a      	strb	r2, [r3, #1]
 800662e:	e00e      	b.n	800664e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 0207 	and.w	r2, r3, #7
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800665a:	883b      	ldrh	r3, [r7, #0]
 800665c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	78ba      	ldrb	r2, [r7, #2]
 8006668:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800666a:	78bb      	ldrb	r3, [r7, #2]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d102      	bne.n	8006676 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_PCD_EP_Open+0x98>
 8006680:	2302      	movs	r3, #2
 8006682:	e00e      	b.n	80066a2 <HAL_PCD_EP_Open+0xb6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68f9      	ldr	r1, [r7, #12]
 8006692:	4618      	mov	r0, r3
 8006694:	f004 fa72 	bl	800ab7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80066a0:	7afb      	ldrb	r3, [r7, #11]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da0e      	bge.n	80066dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	f003 0207 	and.w	r2, r3, #7
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	3310      	adds	r3, #16
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	705a      	strb	r2, [r3, #1]
 80066da:	e00e      	b.n	80066fa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 0207 	and.w	r2, r3, #7
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	b2da      	uxtb	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_PCD_EP_Close+0x6a>
 8006710:	2302      	movs	r3, #2
 8006712:	e00e      	b.n	8006732 <HAL_PCD_EP_Close+0x88>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	4618      	mov	r0, r3
 8006724:	f004 ff12 	bl	800b54c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b086      	sub	sp, #24
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	460b      	mov	r3, r1
 8006748:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	f003 0207 	and.w	r2, r3, #7
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2200      	movs	r2, #0
 8006778:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800677a:	7afb      	ldrb	r3, [r7, #11]
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	b2da      	uxtb	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	4618      	mov	r0, r3
 800678e:	f005 f8ca 	bl	800b926 <USB_EPStartXfer>

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 0207 	and.w	r2, r3, #7
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	440b      	add	r3, r1
 80067ba:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80067be:	681b      	ldr	r3, [r3, #0]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	460b      	mov	r3, r1
 80067da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	f003 0207 	and.w	r2, r3, #7
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	3310      	adds	r3, #16
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2201      	movs	r2, #1
 8006816:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006818:	7afb      	ldrb	r3, [r7, #11]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	b2da      	uxtb	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6979      	ldr	r1, [r7, #20]
 800682a:	4618      	mov	r0, r3
 800682c:	f005 f87b 	bl	800b926 <USB_EPStartXfer>

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	7912      	ldrb	r2, [r2, #4]
 8006850:	4293      	cmp	r3, r2
 8006852:	d901      	bls.n	8006858 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e03e      	b.n	80068d6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800685c:	2b00      	cmp	r3, #0
 800685e:	da0e      	bge.n	800687e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	f003 0207 	and.w	r2, r3, #7
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	3310      	adds	r3, #16
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	705a      	strb	r2, [r3, #1]
 800687c:	e00c      	b.n	8006898 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_PCD_EP_SetStall+0x7e>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e00e      	b.n	80068d6 <HAL_PCD_EP_SetStall+0x9c>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68f9      	ldr	r1, [r7, #12]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f005 fddc 	bl	800c484 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	7912      	ldrb	r2, [r2, #4]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d901      	bls.n	80068fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e040      	b.n	800697e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006900:	2b00      	cmp	r3, #0
 8006902:	da0e      	bge.n	8006922 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	f003 0207 	and.w	r2, r3, #7
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	3310      	adds	r3, #16
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4413      	add	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	705a      	strb	r2, [r3, #1]
 8006920:	e00e      	b.n	8006940 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	f003 0207 	and.w	r2, r3, #7
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	4413      	add	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	b2da      	uxtb	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_PCD_EP_ClrStall+0x82>
 800695c:	2302      	movs	r3, #2
 800695e:	e00e      	b.n	800697e <HAL_PCD_EP_ClrStall+0xa0>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	4618      	mov	r0, r3
 8006970:	f005 fdd9 	bl	800c526 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b092      	sub	sp, #72	@ 0x48
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800698e:	e333      	b.n	8006ff8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006998:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800699a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80069a6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 8108 	bne.w	8006bc0 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80069b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d14c      	bne.n	8006a54 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	813b      	strh	r3, [r7, #8]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	893b      	ldrh	r3, [r7, #8]
 80069d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3310      	adds	r3, #16
 80069e2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4413      	add	r3, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	4413      	add	r3, r2
 80069fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	441a      	add	r2, r3
 8006a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a18:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f00b fb82 	bl	8012126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7b1b      	ldrb	r3, [r3, #12]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 82e5 	beq.w	8006ff8 <PCD_EP_ISR_Handler+0x672>
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 82e0 	bne.w	8006ff8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7b1b      	ldrb	r3, [r3, #12]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	731a      	strb	r2, [r3, #12]
 8006a52:	e2d1      	b.n	8006ff8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a5a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006a64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d032      	beq.n	8006ad4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	4413      	add	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	4413      	add	r3, r2
 8006a88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a94:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f005 fe62 	bl	800c772 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006aba:	4013      	ands	r3, r2
 8006abc:	817b      	strh	r3, [r7, #10]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	897a      	ldrh	r2, [r7, #10]
 8006ac4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ac8:	b292      	uxth	r2, r2
 8006aca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f00b fafd 	bl	80120cc <HAL_PCD_SetupStageCallback>
 8006ad2:	e291      	b.n	8006ff8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ad4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f280 828d 	bge.w	8006ff8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006aea:	4013      	ands	r3, r2
 8006aec:	81fb      	strh	r3, [r7, #14]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	89fa      	ldrh	r2, [r7, #14]
 8006af4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006af8:	b292      	uxth	r2, r2
 8006afa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b22:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d019      	beq.n	8006b60 <PCD_EP_ISR_Handler+0x1da>
 8006b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d015      	beq.n	8006b60 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b3a:	6959      	ldr	r1, [r3, #20]
 8006b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b3e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b42:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f005 fe14 	bl	800c772 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	441a      	add	r2, r3
 8006b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b56:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f00b fac8 	bl	80120f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006b68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 8242 	bne.w	8006ff8 <PCD_EP_ISR_Handler+0x672>
 8006b74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006b7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b7e:	f000 823b 	beq.w	8006ff8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b92:	81bb      	strh	r3, [r7, #12]
 8006b94:	89bb      	ldrh	r3, [r7, #12]
 8006b96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b9a:	81bb      	strh	r3, [r7, #12]
 8006b9c:	89bb      	ldrh	r3, [r7, #12]
 8006b9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ba2:	81bb      	strh	r3, [r7, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	89bb      	ldrh	r3, [r7, #12]
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]
 8006bbe:	e21b      	b.n	8006ff8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bd2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f280 80f1 	bge.w	8006dbe <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006c06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c0a:	b292      	uxth	r2, r2
 8006c0c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006c0e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	4413      	add	r3, r2
 8006c22:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c26:	7b1b      	ldrb	r3, [r3, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d123      	bne.n	8006c74 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4413      	add	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c50:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006c54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 808b 	beq.w	8006d74 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c64:	6959      	ldr	r1, [r3, #20]
 8006c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c68:	88da      	ldrh	r2, [r3, #6]
 8006c6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c6e:	f005 fd80 	bl	800c772 <USB_ReadPMA>
 8006c72:	e07f      	b.n	8006d74 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c76:	78db      	ldrb	r3, [r3, #3]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d109      	bne.n	8006c90 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9c6 	bl	8007014 <HAL_PCD_EP_DB_Receive>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c8e:	e071      	b.n	8006d74 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006caa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	441a      	add	r2, r3
 8006cba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006cbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d022      	beq.n	8006d30 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	4413      	add	r3, r2
 8006d04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006d12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d02c      	beq.n	8006d74 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d20:	6959      	ldr	r1, [r3, #20]
 8006d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d24:	891a      	ldrh	r2, [r3, #8]
 8006d26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d2a:	f005 fd22 	bl	800c772 <USB_ReadPMA>
 8006d2e:	e021      	b.n	8006d74 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4413      	add	r3, r2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d54:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006d58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d66:	6959      	ldr	r1, [r3, #20]
 8006d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d6a:	895a      	ldrh	r2, [r3, #10]
 8006d6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d70:	f005 fcff 	bl	800c772 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d7c:	441a      	add	r2, r3
 8006d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d84:	695a      	ldr	r2, [r3, #20]
 8006d86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d8a:	441a      	add	r2, r3
 8006d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <PCD_EP_ISR_Handler+0x41e>
 8006d98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d206      	bcs.n	8006db2 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f00b f9a0 	bl	80120f0 <HAL_PCD_DataOutStageCallback>
 8006db0:	e005      	b.n	8006dbe <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006db8:	4618      	mov	r0, r3
 8006dba:	f004 fdb4 	bl	800b926 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8117 	beq.w	8006ff8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dca:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	3310      	adds	r3, #16
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e18:	78db      	ldrb	r3, [r3, #3]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	f040 80a1 	bne.w	8006f62 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e22:	2200      	movs	r2, #0
 8006e24:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e28:	7b1b      	ldrb	r3, [r3, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 8092 	beq.w	8006f54 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d046      	beq.n	8006ec8 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d126      	bne.n	8006e90 <PCD_EP_ISR_Handler+0x50a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	4413      	add	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	00da      	lsls	r2, r3, #3
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e061      	b.n	8006f54 <PCD_EP_ISR_Handler+0x5ce>
 8006e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d15d      	bne.n	8006f54 <PCD_EP_ISR_Handler+0x5ce>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	61fb      	str	r3, [r7, #28]
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	00da      	lsls	r2, r3, #3
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ebe:	61bb      	str	r3, [r7, #24]
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	e045      	b.n	8006f54 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d126      	bne.n	8006f24 <PCD_EP_ISR_Handler+0x59e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	4413      	add	r3, r2
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	00da      	lsls	r2, r3, #3
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006efc:	623b      	str	r3, [r7, #32]
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e017      	b.n	8006f54 <PCD_EP_ISR_Handler+0x5ce>
 8006f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d113      	bne.n	8006f54 <PCD_EP_ISR_Handler+0x5ce>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3a:	4413      	add	r3, r2
 8006f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	00da      	lsls	r2, r3, #3
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	4413      	add	r3, r2
 8006f48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f50:	2200      	movs	r2, #0
 8006f52:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f00b f8e3 	bl	8012126 <HAL_PCD_DataInStageCallback>
 8006f60:	e04a      	b.n	8006ff8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d13f      	bne.n	8006fec <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	4413      	add	r3, r2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f90:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d906      	bls.n	8006faa <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fa6:	619a      	str	r2, [r3, #24]
 8006fa8:	e002      	b.n	8006fb0 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fac:	2200      	movs	r2, #0
 8006fae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f00b f8b1 	bl	8012126 <HAL_PCD_DataInStageCallback>
 8006fc4:	e018      	b.n	8006ff8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006fcc:	441a      	add	r2, r3
 8006fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd4:	69da      	ldr	r2, [r3, #28]
 8006fd6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006fd8:	441a      	add	r2, r3
 8006fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fdc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f004 fc9e 	bl	800b926 <USB_EPStartXfer>
 8006fea:	e005      	b.n	8006ff8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006fec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f917 	bl	8007226 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007000:	b29b      	uxth	r3, r3
 8007002:	b21b      	sxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	f6ff acc3 	blt.w	8006990 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3748      	adds	r7, #72	@ 0x48
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007022:	88fb      	ldrh	r3, [r7, #6]
 8007024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d07c      	beq.n	8007126 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007034:	b29b      	uxth	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	4413      	add	r3, r2
 8007046:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007050:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	8b7b      	ldrh	r3, [r7, #26]
 8007058:	429a      	cmp	r2, r3
 800705a:	d306      	bcc.n	800706a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	8b7b      	ldrh	r3, [r7, #26]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	619a      	str	r2, [r3, #24]
 8007068:	e002      	b.n	8007070 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d123      	bne.n	80070c0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800708e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007092:	833b      	strh	r3, [r7, #24]
 8007094:	8b3b      	ldrh	r3, [r7, #24]
 8007096:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800709a:	833b      	strh	r3, [r7, #24]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	441a      	add	r2, r3
 80070aa:	8b3b      	ldrh	r3, [r7, #24]
 80070ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01f      	beq.n	800710a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e4:	82fb      	strh	r3, [r7, #22]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	8afb      	ldrh	r3, [r7, #22]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007102:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800710a:	8b7b      	ldrh	r3, [r7, #26]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8085 	beq.w	800721c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6959      	ldr	r1, [r3, #20]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	891a      	ldrh	r2, [r3, #8]
 800711e:	8b7b      	ldrh	r3, [r7, #26]
 8007120:	f005 fb27 	bl	800c772 <USB_ReadPMA>
 8007124:	e07a      	b.n	800721c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4413      	add	r3, r2
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	4413      	add	r3, r2
 8007140:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800714a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	8b7b      	ldrh	r3, [r7, #26]
 8007152:	429a      	cmp	r2, r3
 8007154:	d306      	bcc.n	8007164 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	8b7b      	ldrh	r3, [r7, #26]
 800715c:	1ad2      	subs	r2, r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	619a      	str	r2, [r3, #24]
 8007162:	e002      	b.n	800716a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2200      	movs	r2, #0
 8007168:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d123      	bne.n	80071ba <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718c:	83fb      	strh	r3, [r7, #30]
 800718e:	8bfb      	ldrh	r3, [r7, #30]
 8007190:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007194:	83fb      	strh	r3, [r7, #30]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	441a      	add	r2, r3
 80071a4:	8bfb      	ldrh	r3, [r7, #30]
 80071a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d11f      	bne.n	8007204 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071de:	83bb      	strh	r3, [r7, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	8bbb      	ldrh	r3, [r7, #28]
 80071f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007200:	b29b      	uxth	r3, r3
 8007202:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007204:	8b7b      	ldrh	r3, [r7, #26]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d008      	beq.n	800721c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6959      	ldr	r1, [r3, #20]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	895a      	ldrh	r2, [r3, #10]
 8007216:	8b7b      	ldrh	r3, [r7, #26]
 8007218:	f005 faab 	bl	800c772 <USB_ReadPMA>
    }
  }

  return count;
 800721c:	8b7b      	ldrh	r3, [r7, #26]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b0a6      	sub	sp, #152	@ 0x98
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	4613      	mov	r3, r2
 8007232:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 81f7 	beq.w	800762e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007248:	b29b      	uxth	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	4413      	add	r3, r2
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	4413      	add	r3, r2
 800725a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007264:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007270:	429a      	cmp	r2, r3
 8007272:	d907      	bls.n	8007284 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	699a      	ldr	r2, [r3, #24]
 8007278:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800727c:	1ad2      	subs	r2, r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	619a      	str	r2, [r3, #24]
 8007282:	e002      	b.n	800728a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f040 80e1 	bne.w	8007456 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d126      	bne.n	80072ea <HAL_PCD_EP_DB_Transmit+0xc4>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	4413      	add	r3, r2
 80072b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	00da      	lsls	r2, r3, #3
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	4413      	add	r3, r2
 80072be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e01a      	b.n	8007320 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d116      	bne.n	8007320 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007300:	b29b      	uxth	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007306:	4413      	add	r3, r2
 8007308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	00da      	lsls	r2, r3, #3
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	4413      	add	r3, r2
 8007314:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	2200      	movs	r2, #0
 800731e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d126      	bne.n	800737c <HAL_PCD_EP_DB_Transmit+0x156>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	4413      	add	r3, r2
 8007344:	623b      	str	r3, [r7, #32]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	00da      	lsls	r2, r3, #3
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	4413      	add	r3, r2
 8007350:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007360:	b29a      	uxth	r2, r3
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007374:	b29a      	uxth	r2, r3
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	801a      	strh	r2, [r3, #0]
 800737a:	e017      	b.n	80073ac <HAL_PCD_EP_DB_Transmit+0x186>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d113      	bne.n	80073ac <HAL_PCD_EP_DB_Transmit+0x186>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	4413      	add	r3, r2
 8007394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	00da      	lsls	r2, r3, #3
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	4413      	add	r3, r2
 80073a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	78db      	ldrb	r3, [r3, #3]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d123      	bne.n	80073fc <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ce:	837b      	strh	r3, [r7, #26]
 80073d0:	8b7b      	ldrh	r3, [r7, #26]
 80073d2:	f083 0320 	eor.w	r3, r3, #32
 80073d6:	837b      	strh	r3, [r7, #26]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	441a      	add	r2, r3
 80073e6:	8b7b      	ldrh	r3, [r7, #26]
 80073e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	4619      	mov	r1, r3
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f00a fe8f 	bl	8012126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01f      	beq.n	8007452 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800742c:	833b      	strh	r3, [r7, #24]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	8b3b      	ldrh	r3, [r7, #24]
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800744a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	e31f      	b.n	8007a96 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d021      	beq.n	80074a4 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800749c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	f040 82ca 	bne.w	8007a44 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	695a      	ldr	r2, [r3, #20]
 80074b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074b8:	441a      	add	r2, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	69da      	ldr	r2, [r3, #28]
 80074c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074c6:	441a      	add	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d309      	bcc.n	80074ec <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	621a      	str	r2, [r3, #32]
 80074ea:	e015      	b.n	8007518 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d107      	bne.n	8007504 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80074f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074f8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007502:	e009      	b.n	8007518 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d15f      	bne.n	80075e0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	643b      	str	r3, [r7, #64]	@ 0x40
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800752e:	b29b      	uxth	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007534:	4413      	add	r3, r2
 8007536:	643b      	str	r3, [r7, #64]	@ 0x40
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	00da      	lsls	r2, r3, #3
 800753e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007540:	4413      	add	r3, r2
 8007542:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007552:	b29a      	uxth	r2, r3
 8007554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <HAL_PCD_EP_DB_Transmit+0x34e>
 800755e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756c:	b29a      	uxth	r2, r3
 800756e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007570:	801a      	strh	r2, [r3, #0]
 8007572:	e051      	b.n	8007618 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007576:	2b3e      	cmp	r3, #62	@ 0x3e
 8007578:	d816      	bhi.n	80075a8 <HAL_PCD_EP_DB_Transmit+0x382>
 800757a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800757c:	085b      	lsrs	r3, r3, #1
 800757e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_PCD_EP_DB_Transmit+0x36a>
 800758a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800758c:	3301      	adds	r3, #1
 800758e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29a      	uxth	r2, r3
 8007596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007598:	b29b      	uxth	r3, r3
 800759a:	029b      	lsls	r3, r3, #10
 800759c:	b29b      	uxth	r3, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	e037      	b.n	8007618 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80075a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80075ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <HAL_PCD_EP_DB_Transmit+0x398>
 80075b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ba:	3b01      	subs	r3, #1
 80075bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80075be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	e01b      	b.n	8007618 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d117      	bne.n	8007618 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075fc:	4413      	add	r3, r2
 80075fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	00da      	lsls	r2, r3, #3
 8007606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007608:	4413      	add	r3, r2
 800760a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800760e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007612:	b29a      	uxth	r2, r3
 8007614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007616:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	6959      	ldr	r1, [r3, #20]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	891a      	ldrh	r2, [r3, #8]
 8007624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007626:	b29b      	uxth	r3, r3
 8007628:	f005 f861 	bl	800c6ee <USB_WritePMA>
 800762c:	e20a      	b.n	8007a44 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4413      	add	r3, r2
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	4413      	add	r3, r2
 8007648:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007652:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800765e:	429a      	cmp	r2, r3
 8007660:	d307      	bcc.n	8007672 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800766a:	1ad2      	subs	r2, r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	619a      	str	r2, [r3, #24]
 8007670:	e002      	b.n	8007678 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2200      	movs	r2, #0
 8007676:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f040 80f6 	bne.w	800786e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d126      	bne.n	80076d8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007698:	b29b      	uxth	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800769e:	4413      	add	r3, r2
 80076a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	00da      	lsls	r2, r3, #3
 80076a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076aa:	4413      	add	r3, r2
 80076ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80076b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	e01a      	b.n	800770e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d116      	bne.n	800770e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076f4:	4413      	add	r3, r2
 80076f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	00da      	lsls	r2, r3, #3
 80076fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007700:	4413      	add	r3, r2
 8007702:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007706:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800770a:	2200      	movs	r2, #0
 800770c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d12f      	bne.n	800777e <HAL_PCD_EP_DB_Transmit+0x558>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800772e:	b29b      	uxth	r3, r3
 8007730:	461a      	mov	r2, r3
 8007732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007736:	4413      	add	r3, r2
 8007738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	00da      	lsls	r2, r3, #3
 8007742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007746:	4413      	add	r3, r2
 8007748:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800774c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b29b      	uxth	r3, r3
 8007758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800775c:	b29a      	uxth	r2, r3
 800775e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007774:	b29a      	uxth	r2, r3
 8007776:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	e01c      	b.n	80077b8 <HAL_PCD_EP_DB_Transmit+0x592>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d118      	bne.n	80077b8 <HAL_PCD_EP_DB_Transmit+0x592>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007796:	4413      	add	r3, r2
 8007798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	00da      	lsls	r2, r3, #3
 80077a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077a6:	4413      	add	r3, r2
 80077a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077b4:	2200      	movs	r2, #0
 80077b6:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	78db      	ldrb	r3, [r3, #3]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d127      	bne.n	8007810 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077da:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80077de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80077e2:	f083 0320 	eor.w	r3, r3, #32
 80077e6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	441a      	add	r2, r3
 80077f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80077fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	4619      	mov	r1, r3
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f00a fc85 	bl	8012126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d121      	bne.n	800786a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800783c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007840:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	441a      	add	r2, r3
 8007852:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800785a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800785e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007866:	b29b      	uxth	r3, r3
 8007868:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	e113      	b.n	8007a96 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d121      	bne.n	80078bc <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800788e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007892:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	441a      	add	r2, r3
 80078a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80078a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	f040 80be 	bne.w	8007a44 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	695a      	ldr	r2, [r3, #20]
 80078cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078d0:	441a      	add	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	69da      	ldr	r2, [r3, #28]
 80078da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078de:	441a      	add	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6a1a      	ldr	r2, [r3, #32]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d309      	bcc.n	8007904 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078fc:	1ad2      	subs	r2, r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	621a      	str	r2, [r3, #32]
 8007902:	e015      	b.n	8007930 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d107      	bne.n	800791c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800790c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007910:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800791a:	e009      	b.n	8007930 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2200      	movs	r2, #0
 8007926:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d15f      	bne.n	80079fe <HAL_PCD_EP_DB_Transmit+0x7d8>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007952:	4413      	add	r3, r2
 8007954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	00da      	lsls	r2, r3, #3
 800795c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800795e:	4413      	add	r3, r2
 8007960:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007964:	667b      	str	r3, [r7, #100]	@ 0x64
 8007966:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007970:	b29a      	uxth	r2, r3
 8007972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <HAL_PCD_EP_DB_Transmit+0x76c>
 800797c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798a:	b29a      	uxth	r2, r3
 800798c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	e04e      	b.n	8007a30 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007994:	2b3e      	cmp	r3, #62	@ 0x3e
 8007996:	d816      	bhi.n	80079c6 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007998:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	663b      	str	r3, [r7, #96]	@ 0x60
 800799e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_PCD_EP_DB_Transmit+0x788>
 80079a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079aa:	3301      	adds	r3, #1
 80079ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80079ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	029b      	lsls	r3, r3, #10
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	e034      	b.n	8007a30 <HAL_PCD_EP_DB_Transmit+0x80a>
 80079c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80079cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d102      	bne.n	80079dc <HAL_PCD_EP_DB_Transmit+0x7b6>
 80079d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079d8:	3b01      	subs	r3, #1
 80079da:	663b      	str	r3, [r7, #96]	@ 0x60
 80079dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e018      	b.n	8007a30 <HAL_PCD_EP_DB_Transmit+0x80a>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d114      	bne.n	8007a30 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a14:	4413      	add	r3, r2
 8007a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	00da      	lsls	r2, r3, #3
 8007a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a20:	4413      	add	r3, r2
 8007a22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	6959      	ldr	r1, [r3, #20]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	895a      	ldrh	r2, [r3, #10]
 8007a3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f004 fe55 	bl	800c6ee <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a5e:	82fb      	strh	r3, [r7, #22]
 8007a60:	8afb      	ldrh	r3, [r7, #22]
 8007a62:	f083 0310 	eor.w	r3, r3, #16
 8007a66:	82fb      	strh	r3, [r7, #22]
 8007a68:	8afb      	ldrh	r3, [r7, #22]
 8007a6a:	f083 0320 	eor.w	r3, r3, #32
 8007a6e:	82fb      	strh	r3, [r7, #22]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	8afb      	ldrh	r3, [r7, #22]
 8007a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3798      	adds	r7, #152	@ 0x98
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	607b      	str	r3, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	817b      	strh	r3, [r7, #10]
 8007aac:	4613      	mov	r3, r2
 8007aae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007ab0:	897b      	ldrh	r3, [r7, #10]
 8007ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007abc:	897b      	ldrh	r3, [r7, #10]
 8007abe:	f003 0207 	and.w	r2, r3, #7
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	3310      	adds	r3, #16
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e009      	b.n	8007ae8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ad4:	897a      	ldrh	r2, [r7, #10]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007ae8:	893b      	ldrh	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d107      	bne.n	8007afe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2200      	movs	r2, #0
 8007af2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	80da      	strh	r2, [r3, #6]
 8007afc:	e00b      	b.n	8007b16 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2201      	movs	r2, #1
 8007b02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f043 0302 	orr.w	r3, r3, #2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d141      	bne.n	8007c0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b86:	4b4b      	ldr	r3, [pc, #300]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b92:	d131      	bne.n	8007bf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b94:	4b47      	ldr	r3, [pc, #284]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b9a:	4a46      	ldr	r2, [pc, #280]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ba4:	4b43      	ldr	r3, [pc, #268]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bac:	4a41      	ldr	r2, [pc, #260]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bb4:	4b40      	ldr	r3, [pc, #256]	@ (8007cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2232      	movs	r2, #50	@ 0x32
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
 8007bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8007cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc4:	0c9b      	lsrs	r3, r3, #18
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bca:	e002      	b.n	8007bd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bd2:	4b38      	ldr	r3, [pc, #224]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bde:	d102      	bne.n	8007be6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f2      	bne.n	8007bcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007be6:	4b33      	ldr	r3, [pc, #204]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf2:	d158      	bne.n	8007ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e057      	b.n	8007ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c08:	e04d      	b.n	8007ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c10:	d141      	bne.n	8007c96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c12:	4b28      	ldr	r3, [pc, #160]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c1e:	d131      	bne.n	8007c84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c20:	4b24      	ldr	r3, [pc, #144]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c26:	4a23      	ldr	r2, [pc, #140]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c30:	4b20      	ldr	r3, [pc, #128]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c38:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c40:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2232      	movs	r2, #50	@ 0x32
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	0c9b      	lsrs	r3, r3, #18
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c56:	e002      	b.n	8007c5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c5e:	4b15      	ldr	r3, [pc, #84]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c6a:	d102      	bne.n	8007c72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1f2      	bne.n	8007c58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c72:	4b10      	ldr	r3, [pc, #64]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c7e:	d112      	bne.n	8007ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e011      	b.n	8007ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c84:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c94:	e007      	b.n	8007ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c96:	4b07      	ldr	r3, [pc, #28]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c9e:	4a05      	ldr	r2, [pc, #20]	@ (8007cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ca0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007ca4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40007000 	.word	0x40007000
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	431bde83 	.word	0x431bde83

08007cc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007cc4:	4b05      	ldr	r3, [pc, #20]	@ (8007cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	4a04      	ldr	r2, [pc, #16]	@ (8007cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cce:	6093      	str	r3, [r2, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40007000 	.word	0x40007000

08007ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e2fe      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d075      	beq.n	8007dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cfe:	4b97      	ldr	r3, [pc, #604]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d08:	4b94      	ldr	r3, [pc, #592]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	2b0c      	cmp	r3, #12
 8007d16:	d102      	bne.n	8007d1e <HAL_RCC_OscConfig+0x3e>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d002      	beq.n	8007d24 <HAL_RCC_OscConfig+0x44>
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d10b      	bne.n	8007d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d24:	4b8d      	ldr	r3, [pc, #564]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d05b      	beq.n	8007de8 <HAL_RCC_OscConfig+0x108>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d157      	bne.n	8007de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e2d9      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d44:	d106      	bne.n	8007d54 <HAL_RCC_OscConfig+0x74>
 8007d46:	4b85      	ldr	r3, [pc, #532]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a84      	ldr	r2, [pc, #528]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	e01d      	b.n	8007d90 <HAL_RCC_OscConfig+0xb0>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d5c:	d10c      	bne.n	8007d78 <HAL_RCC_OscConfig+0x98>
 8007d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a7e      	ldr	r2, [pc, #504]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	e00b      	b.n	8007d90 <HAL_RCC_OscConfig+0xb0>
 8007d78:	4b78      	ldr	r3, [pc, #480]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a77      	ldr	r2, [pc, #476]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4b75      	ldr	r3, [pc, #468]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a74      	ldr	r2, [pc, #464]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d013      	beq.n	8007dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7fc ff66 	bl	8004c68 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007da0:	f7fc ff62 	bl	8004c68 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b64      	cmp	r3, #100	@ 0x64
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e29e      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007db2:	4b6a      	ldr	r3, [pc, #424]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <HAL_RCC_OscConfig+0xc0>
 8007dbe:	e014      	b.n	8007dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fc ff52 	bl	8004c68 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dc8:	f7fc ff4e 	bl	8004c68 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b64      	cmp	r3, #100	@ 0x64
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e28a      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dda:	4b60      	ldr	r3, [pc, #384]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f0      	bne.n	8007dc8 <HAL_RCC_OscConfig+0xe8>
 8007de6:	e000      	b.n	8007dea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d075      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007df6:	4b59      	ldr	r3, [pc, #356]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e00:	4b56      	ldr	r3, [pc, #344]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	2b0c      	cmp	r3, #12
 8007e0e:	d102      	bne.n	8007e16 <HAL_RCC_OscConfig+0x136>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d002      	beq.n	8007e1c <HAL_RCC_OscConfig+0x13c>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d11f      	bne.n	8007e5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <HAL_RCC_OscConfig+0x154>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e25d      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e34:	4b49      	ldr	r3, [pc, #292]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	4946      	ldr	r1, [pc, #280]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e48:	4b45      	ldr	r3, [pc, #276]	@ (8007f60 <HAL_RCC_OscConfig+0x280>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fc fc2d 	bl	80046ac <HAL_InitTick>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d043      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e249      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d023      	beq.n	8007eac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e64:	4b3d      	ldr	r3, [pc, #244]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a3c      	ldr	r2, [pc, #240]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e70:	f7fc fefa 	bl	8004c68 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e78:	f7fc fef6 	bl	8004c68 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e232      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e8a:	4b34      	ldr	r3, [pc, #208]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0f0      	beq.n	8007e78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e96:	4b31      	ldr	r3, [pc, #196]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	061b      	lsls	r3, r3, #24
 8007ea4:	492d      	ldr	r1, [pc, #180]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	604b      	str	r3, [r1, #4]
 8007eaa:	e01a      	b.n	8007ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eac:	4b2b      	ldr	r3, [pc, #172]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007eb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fc fed6 	bl	8004c68 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ec0:	f7fc fed2 	bl	8004c68 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e20e      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ed2:	4b22      	ldr	r3, [pc, #136]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f0      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x1e0>
 8007ede:	e000      	b.n	8007ee2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d041      	beq.n	8007f72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d01c      	beq.n	8007f30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ef6:	4b19      	ldr	r3, [pc, #100]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007efc:	4a17      	ldr	r2, [pc, #92]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f06:	f7fc feaf 	bl	8004c68 <HAL_GetTick>
 8007f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f0c:	e008      	b.n	8007f20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f0e:	f7fc feab 	bl	8004c68 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e1e7      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f20:	4b0e      	ldr	r3, [pc, #56]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0ef      	beq.n	8007f0e <HAL_RCC_OscConfig+0x22e>
 8007f2e:	e020      	b.n	8007f72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f36:	4a09      	ldr	r2, [pc, #36]	@ (8007f5c <HAL_RCC_OscConfig+0x27c>)
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f40:	f7fc fe92 	bl	8004c68 <HAL_GetTick>
 8007f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f46:	e00d      	b.n	8007f64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f48:	f7fc fe8e 	bl	8004c68 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d906      	bls.n	8007f64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e1ca      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
 8007f5a:	bf00      	nop
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f64:	4b8c      	ldr	r3, [pc, #560]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8007f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1ea      	bne.n	8007f48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 80a6 	beq.w	80080cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f80:	2300      	movs	r3, #0
 8007f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f84:	4b84      	ldr	r3, [pc, #528]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8007f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_RCC_OscConfig+0x2b4>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <HAL_RCC_OscConfig+0x2b6>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00d      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8007fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8007fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fb6:	4b79      	ldr	r3, [pc, #484]	@ (800819c <HAL_RCC_OscConfig+0x4bc>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d118      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fc2:	4b76      	ldr	r3, [pc, #472]	@ (800819c <HAL_RCC_OscConfig+0x4bc>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a75      	ldr	r2, [pc, #468]	@ (800819c <HAL_RCC_OscConfig+0x4bc>)
 8007fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fce:	f7fc fe4b 	bl	8004c68 <HAL_GetTick>
 8007fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fd6:	f7fc fe47 	bl	8004c68 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e183      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800819c <HAL_RCC_OscConfig+0x4bc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0f0      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d108      	bne.n	800800e <HAL_RCC_OscConfig+0x32e>
 8007ffc:	4b66      	ldr	r3, [pc, #408]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8007ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008002:	4a65      	ldr	r2, [pc, #404]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800800c:	e024      	b.n	8008058 <HAL_RCC_OscConfig+0x378>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b05      	cmp	r3, #5
 8008014:	d110      	bne.n	8008038 <HAL_RCC_OscConfig+0x358>
 8008016:	4b60      	ldr	r3, [pc, #384]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801c:	4a5e      	ldr	r2, [pc, #376]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 800801e:	f043 0304 	orr.w	r3, r3, #4
 8008022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008026:	4b5c      	ldr	r3, [pc, #368]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802c:	4a5a      	ldr	r2, [pc, #360]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008036:	e00f      	b.n	8008058 <HAL_RCC_OscConfig+0x378>
 8008038:	4b57      	ldr	r3, [pc, #348]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800803e:	4a56      	ldr	r2, [pc, #344]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008048:	4b53      	ldr	r3, [pc, #332]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 800804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800804e:	4a52      	ldr	r2, [pc, #328]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008050:	f023 0304 	bic.w	r3, r3, #4
 8008054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d016      	beq.n	800808e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008060:	f7fc fe02 	bl	8004c68 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008066:	e00a      	b.n	800807e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008068:	f7fc fdfe 	bl	8004c68 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008076:	4293      	cmp	r3, r2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e138      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800807e:	4b46      	ldr	r3, [pc, #280]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0ed      	beq.n	8008068 <HAL_RCC_OscConfig+0x388>
 800808c:	e015      	b.n	80080ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808e:	f7fc fdeb 	bl	8004c68 <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008094:	e00a      	b.n	80080ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008096:	f7fc fde7 	bl	8004c68 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e121      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080ac:	4b3a      	ldr	r3, [pc, #232]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1ed      	bne.n	8008096 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80080ba:	7ffb      	ldrb	r3, [r7, #31]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d105      	bne.n	80080cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080c0:	4b35      	ldr	r3, [pc, #212]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 80080c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c4:	4a34      	ldr	r2, [pc, #208]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 80080c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d03c      	beq.n	8008152 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01c      	beq.n	800811a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 80080e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f0:	f7fc fdba 	bl	8004c68 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080f8:	f7fc fdb6 	bl	8004c68 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e0f2      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800810a:	4b23      	ldr	r3, [pc, #140]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 800810c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0ef      	beq.n	80080f8 <HAL_RCC_OscConfig+0x418>
 8008118:	e01b      	b.n	8008152 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800811a:	4b1f      	ldr	r3, [pc, #124]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 800811c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008120:	4a1d      	ldr	r2, [pc, #116]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008122:	f023 0301 	bic.w	r3, r3, #1
 8008126:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812a:	f7fc fd9d 	bl	8004c68 <HAL_GetTick>
 800812e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008130:	e008      	b.n	8008144 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008132:	f7fc fd99 	bl	8004c68 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e0d5      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008144:	4b14      	ldr	r3, [pc, #80]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1ef      	bne.n	8008132 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 80c9 	beq.w	80082ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800815c:	4b0e      	ldr	r3, [pc, #56]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 030c 	and.w	r3, r3, #12
 8008164:	2b0c      	cmp	r3, #12
 8008166:	f000 8083 	beq.w	8008270 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d15e      	bne.n	8008230 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008172:	4b09      	ldr	r3, [pc, #36]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a08      	ldr	r2, [pc, #32]	@ (8008198 <HAL_RCC_OscConfig+0x4b8>)
 8008178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800817c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800817e:	f7fc fd73 	bl	8004c68 <HAL_GetTick>
 8008182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008184:	e00c      	b.n	80081a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008186:	f7fc fd6f 	bl	8004c68 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d905      	bls.n	80081a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e0ab      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
 8008198:	40021000 	.word	0x40021000
 800819c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081a0:	4b55      	ldr	r3, [pc, #340]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1ec      	bne.n	8008186 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081ac:	4b52      	ldr	r3, [pc, #328]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	4b52      	ldr	r3, [pc, #328]	@ (80082fc <HAL_RCC_OscConfig+0x61c>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6a11      	ldr	r1, [r2, #32]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081bc:	3a01      	subs	r2, #1
 80081be:	0112      	lsls	r2, r2, #4
 80081c0:	4311      	orrs	r1, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80081c6:	0212      	lsls	r2, r2, #8
 80081c8:	4311      	orrs	r1, r2
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80081ce:	0852      	lsrs	r2, r2, #1
 80081d0:	3a01      	subs	r2, #1
 80081d2:	0552      	lsls	r2, r2, #21
 80081d4:	4311      	orrs	r1, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80081da:	0852      	lsrs	r2, r2, #1
 80081dc:	3a01      	subs	r2, #1
 80081de:	0652      	lsls	r2, r2, #25
 80081e0:	4311      	orrs	r1, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80081e6:	06d2      	lsls	r2, r2, #27
 80081e8:	430a      	orrs	r2, r1
 80081ea:	4943      	ldr	r1, [pc, #268]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081f0:	4b41      	ldr	r3, [pc, #260]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a40      	ldr	r2, [pc, #256]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081fc:	4b3e      	ldr	r3, [pc, #248]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4a3d      	ldr	r2, [pc, #244]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008206:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008208:	f7fc fd2e 	bl	8004c68 <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008210:	f7fc fd2a 	bl	8004c68 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e066      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008222:	4b35      	ldr	r3, [pc, #212]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0f0      	beq.n	8008210 <HAL_RCC_OscConfig+0x530>
 800822e:	e05e      	b.n	80082ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008230:	4b31      	ldr	r3, [pc, #196]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a30      	ldr	r2, [pc, #192]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800823a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823c:	f7fc fd14 	bl	8004c68 <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008244:	f7fc fd10 	bl	8004c68 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e04c      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008256:	4b28      	ldr	r3, [pc, #160]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008262:	4b25      	ldr	r3, [pc, #148]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	4924      	ldr	r1, [pc, #144]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 8008268:	4b25      	ldr	r3, [pc, #148]	@ (8008300 <HAL_RCC_OscConfig+0x620>)
 800826a:	4013      	ands	r3, r2
 800826c:	60cb      	str	r3, [r1, #12]
 800826e:	e03e      	b.n	80082ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e039      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800827c:	4b1e      	ldr	r3, [pc, #120]	@ (80082f8 <HAL_RCC_OscConfig+0x618>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f003 0203 	and.w	r2, r3, #3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	429a      	cmp	r2, r3
 800828e:	d12c      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829a:	3b01      	subs	r3, #1
 800829c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800829e:	429a      	cmp	r2, r3
 80082a0:	d123      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d11b      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80082be:	429a      	cmp	r2, r3
 80082c0:	d113      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082cc:	085b      	lsrs	r3, r3, #1
 80082ce:	3b01      	subs	r3, #1
 80082d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d109      	bne.n	80082ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e0:	085b      	lsrs	r3, r3, #1
 80082e2:	3b01      	subs	r3, #1
 80082e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d001      	beq.n	80082ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3720      	adds	r7, #32
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40021000 	.word	0x40021000
 80082fc:	019f800c 	.word	0x019f800c
 8008300:	feeefffc 	.word	0xfeeefffc

08008304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e11e      	b.n	800855a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800831c:	4b91      	ldr	r3, [pc, #580]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d910      	bls.n	800834c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800832a:	4b8e      	ldr	r3, [pc, #568]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f023 020f 	bic.w	r2, r3, #15
 8008332:	498c      	ldr	r1, [pc, #560]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	4313      	orrs	r3, r2
 8008338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800833a:	4b8a      	ldr	r3, [pc, #552]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 030f 	and.w	r3, r3, #15
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d001      	beq.n	800834c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e106      	b.n	800855a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d073      	beq.n	8008440 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d129      	bne.n	80083b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008360:	4b81      	ldr	r3, [pc, #516]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e0f4      	b.n	800855a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008370:	f000 f9ce 	bl	8008710 <RCC_GetSysClockFreqFromPLLSource>
 8008374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4a7c      	ldr	r2, [pc, #496]	@ (800856c <HAL_RCC_ClockConfig+0x268>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d93f      	bls.n	80083fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800837e:	4b7a      	ldr	r3, [pc, #488]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008392:	2b00      	cmp	r3, #0
 8008394:	d033      	beq.n	80083fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800839a:	2b00      	cmp	r3, #0
 800839c:	d12f      	bne.n	80083fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800839e:	4b72      	ldr	r3, [pc, #456]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083a6:	4a70      	ldr	r2, [pc, #448]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80083a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80083ae:	2380      	movs	r3, #128	@ 0x80
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	e024      	b.n	80083fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d107      	bne.n	80083cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083bc:	4b6a      	ldr	r3, [pc, #424]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d109      	bne.n	80083dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e0c6      	b.n	800855a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083cc:	4b66      	ldr	r3, [pc, #408]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0be      	b.n	800855a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80083dc:	f000 f8ce 	bl	800857c <HAL_RCC_GetSysClockFreq>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4a61      	ldr	r2, [pc, #388]	@ (800856c <HAL_RCC_ClockConfig+0x268>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d909      	bls.n	80083fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083f2:	4a5d      	ldr	r2, [pc, #372]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80083f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80083fa:	2380      	movs	r3, #128	@ 0x80
 80083fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083fe:	4b5a      	ldr	r3, [pc, #360]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f023 0203 	bic.w	r2, r3, #3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4957      	ldr	r1, [pc, #348]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800840c:	4313      	orrs	r3, r2
 800840e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008410:	f7fc fc2a 	bl	8004c68 <HAL_GetTick>
 8008414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008416:	e00a      	b.n	800842e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008418:	f7fc fc26 	bl	8004c68 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008426:	4293      	cmp	r3, r2
 8008428:	d901      	bls.n	800842e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e095      	b.n	800855a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800842e:	4b4e      	ldr	r3, [pc, #312]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 020c 	and.w	r2, r3, #12
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	429a      	cmp	r2, r3
 800843e:	d1eb      	bne.n	8008418 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d023      	beq.n	8008494 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d005      	beq.n	8008464 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008458:	4b43      	ldr	r3, [pc, #268]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	4a42      	ldr	r2, [pc, #264]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800845e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008462:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b00      	cmp	r3, #0
 800846e:	d007      	beq.n	8008480 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008470:	4b3d      	ldr	r3, [pc, #244]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008478:	4a3b      	ldr	r2, [pc, #236]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800847a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800847e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008480:	4b39      	ldr	r3, [pc, #228]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	4936      	ldr	r1, [pc, #216]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800848e:	4313      	orrs	r3, r2
 8008490:	608b      	str	r3, [r1, #8]
 8008492:	e008      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2b80      	cmp	r3, #128	@ 0x80
 8008498:	d105      	bne.n	80084a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800849a:	4b33      	ldr	r3, [pc, #204]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	4a32      	ldr	r2, [pc, #200]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80084a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 030f 	and.w	r3, r3, #15
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d21d      	bcs.n	80084f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f023 020f 	bic.w	r2, r3, #15
 80084bc:	4929      	ldr	r1, [pc, #164]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084c4:	f7fc fbd0 	bl	8004c68 <HAL_GetTick>
 80084c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ca:	e00a      	b.n	80084e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084cc:	f7fc fbcc 	bl	8004c68 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e03b      	b.n	800855a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084e2:	4b20      	ldr	r3, [pc, #128]	@ (8008564 <HAL_RCC_ClockConfig+0x260>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d1ed      	bne.n	80084cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4917      	ldr	r1, [pc, #92]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800850a:	4313      	orrs	r3, r2
 800850c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800851a:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	490f      	ldr	r1, [pc, #60]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 800852a:	4313      	orrs	r3, r2
 800852c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800852e:	f000 f825 	bl	800857c <HAL_RCC_GetSysClockFreq>
 8008532:	4602      	mov	r2, r0
 8008534:	4b0c      	ldr	r3, [pc, #48]	@ (8008568 <HAL_RCC_ClockConfig+0x264>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	490c      	ldr	r1, [pc, #48]	@ (8008570 <HAL_RCC_ClockConfig+0x26c>)
 8008540:	5ccb      	ldrb	r3, [r1, r3]
 8008542:	f003 031f 	and.w	r3, r3, #31
 8008546:	fa22 f303 	lsr.w	r3, r2, r3
 800854a:	4a0a      	ldr	r2, [pc, #40]	@ (8008574 <HAL_RCC_ClockConfig+0x270>)
 800854c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800854e:	4b0a      	ldr	r3, [pc, #40]	@ (8008578 <HAL_RCC_ClockConfig+0x274>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f7fc f8aa 	bl	80046ac <HAL_InitTick>
 8008558:	4603      	mov	r3, r0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	40022000 	.word	0x40022000
 8008568:	40021000 	.word	0x40021000
 800856c:	04c4b400 	.word	0x04c4b400
 8008570:	0801669c 	.word	0x0801669c
 8008574:	20000000 	.word	0x20000000
 8008578:	20000004 	.word	0x20000004

0800857c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008582:	4b2c      	ldr	r3, [pc, #176]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 030c 	and.w	r3, r3, #12
 800858a:	2b04      	cmp	r3, #4
 800858c:	d102      	bne.n	8008594 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800858e:	4b2a      	ldr	r3, [pc, #168]	@ (8008638 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	e047      	b.n	8008624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008594:	4b27      	ldr	r3, [pc, #156]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 030c 	and.w	r3, r3, #12
 800859c:	2b08      	cmp	r3, #8
 800859e:	d102      	bne.n	80085a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085a0:	4b25      	ldr	r3, [pc, #148]	@ (8008638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	e03e      	b.n	8008624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80085a6:	4b23      	ldr	r3, [pc, #140]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f003 030c 	and.w	r3, r3, #12
 80085ae:	2b0c      	cmp	r3, #12
 80085b0:	d136      	bne.n	8008620 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085b2:	4b20      	ldr	r3, [pc, #128]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	091b      	lsrs	r3, r3, #4
 80085c2:	f003 030f 	and.w	r3, r3, #15
 80085c6:	3301      	adds	r3, #1
 80085c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d10c      	bne.n	80085ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085d0:	4a19      	ldr	r2, [pc, #100]	@ (8008638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d8:	4a16      	ldr	r2, [pc, #88]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085da:	68d2      	ldr	r2, [r2, #12]
 80085dc:	0a12      	lsrs	r2, r2, #8
 80085de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
 80085e6:	617b      	str	r3, [r7, #20]
      break;
 80085e8:	e00c      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085ea:	4a13      	ldr	r2, [pc, #76]	@ (8008638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f2:	4a10      	ldr	r2, [pc, #64]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085f4:	68d2      	ldr	r2, [r2, #12]
 80085f6:	0a12      	lsrs	r2, r2, #8
 80085f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085fc:	fb02 f303 	mul.w	r3, r2, r3
 8008600:	617b      	str	r3, [r7, #20]
      break;
 8008602:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008604:	4b0b      	ldr	r3, [pc, #44]	@ (8008634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	0e5b      	lsrs	r3, r3, #25
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	3301      	adds	r3, #1
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	fbb2 f3f3 	udiv	r3, r2, r3
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	e001      	b.n	8008624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008624:	693b      	ldr	r3, [r7, #16]
}
 8008626:	4618      	mov	r0, r3
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	40021000 	.word	0x40021000
 8008638:	00f42400 	.word	0x00f42400

0800863c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008640:	4b03      	ldr	r3, [pc, #12]	@ (8008650 <HAL_RCC_GetHCLKFreq+0x14>)
 8008642:	681b      	ldr	r3, [r3, #0]
}
 8008644:	4618      	mov	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000000 	.word	0x20000000

08008654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008658:	f7ff fff0 	bl	800863c <HAL_RCC_GetHCLKFreq>
 800865c:	4602      	mov	r2, r0
 800865e:	4b06      	ldr	r3, [pc, #24]	@ (8008678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	0a1b      	lsrs	r3, r3, #8
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	4904      	ldr	r1, [pc, #16]	@ (800867c <HAL_RCC_GetPCLK1Freq+0x28>)
 800866a:	5ccb      	ldrb	r3, [r1, r3]
 800866c:	f003 031f 	and.w	r3, r3, #31
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008674:	4618      	mov	r0, r3
 8008676:	bd80      	pop	{r7, pc}
 8008678:	40021000 	.word	0x40021000
 800867c:	080166ac 	.word	0x080166ac

08008680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008684:	f7ff ffda 	bl	800863c <HAL_RCC_GetHCLKFreq>
 8008688:	4602      	mov	r2, r0
 800868a:	4b06      	ldr	r3, [pc, #24]	@ (80086a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	0adb      	lsrs	r3, r3, #11
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	4904      	ldr	r1, [pc, #16]	@ (80086a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008696:	5ccb      	ldrb	r3, [r1, r3]
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	40021000 	.word	0x40021000
 80086a8:	080166ac 	.word	0x080166ac

080086ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	220f      	movs	r2, #15
 80086ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80086bc:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <HAL_RCC_GetClockConfig+0x5c>)
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f003 0203 	and.w	r2, r3, #3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80086c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008708 <HAL_RCC_GetClockConfig+0x5c>)
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80086d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008708 <HAL_RCC_GetClockConfig+0x5c>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80086e0:	4b09      	ldr	r3, [pc, #36]	@ (8008708 <HAL_RCC_GetClockConfig+0x5c>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	08db      	lsrs	r3, r3, #3
 80086e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80086ee:	4b07      	ldr	r3, [pc, #28]	@ (800870c <HAL_RCC_GetClockConfig+0x60>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 020f 	and.w	r2, r3, #15
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	601a      	str	r2, [r3, #0]
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40021000 	.word	0x40021000
 800870c:	40022000 	.word	0x40022000

08008710 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008716:	4b1e      	ldr	r3, [pc, #120]	@ (8008790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008720:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	091b      	lsrs	r3, r3, #4
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	3301      	adds	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b03      	cmp	r3, #3
 8008732:	d10c      	bne.n	800874e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008734:	4a17      	ldr	r2, [pc, #92]	@ (8008794 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	fbb2 f3f3 	udiv	r3, r2, r3
 800873c:	4a14      	ldr	r2, [pc, #80]	@ (8008790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800873e:	68d2      	ldr	r2, [r2, #12]
 8008740:	0a12      	lsrs	r2, r2, #8
 8008742:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	617b      	str	r3, [r7, #20]
    break;
 800874c:	e00c      	b.n	8008768 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800874e:	4a11      	ldr	r2, [pc, #68]	@ (8008794 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	fbb2 f3f3 	udiv	r3, r2, r3
 8008756:	4a0e      	ldr	r2, [pc, #56]	@ (8008790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008758:	68d2      	ldr	r2, [r2, #12]
 800875a:	0a12      	lsrs	r2, r2, #8
 800875c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008760:	fb02 f303 	mul.w	r3, r2, r3
 8008764:	617b      	str	r3, [r7, #20]
    break;
 8008766:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008768:	4b09      	ldr	r3, [pc, #36]	@ (8008790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	0e5b      	lsrs	r3, r3, #25
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	3301      	adds	r3, #1
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008780:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008782:	687b      	ldr	r3, [r7, #4]
}
 8008784:	4618      	mov	r0, r3
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	40021000 	.word	0x40021000
 8008794:	00f42400 	.word	0x00f42400

08008798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087a0:	2300      	movs	r3, #0
 80087a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087a4:	2300      	movs	r3, #0
 80087a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8098 	beq.w	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087b6:	2300      	movs	r3, #0
 80087b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087ba:	4b43      	ldr	r3, [pc, #268]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10d      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087c6:	4b40      	ldr	r3, [pc, #256]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ca:	4a3f      	ldr	r2, [pc, #252]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80087d2:	4b3d      	ldr	r3, [pc, #244]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087de:	2301      	movs	r3, #1
 80087e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087e2:	4b3a      	ldr	r3, [pc, #232]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a39      	ldr	r2, [pc, #228]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087ee:	f7fc fa3b 	bl	8004c68 <HAL_GetTick>
 80087f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087f4:	e009      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f6:	f7fc fa37 	bl	8004c68 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d902      	bls.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	74fb      	strb	r3, [r7, #19]
        break;
 8008808:	e005      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800880a:	4b30      	ldr	r3, [pc, #192]	@ (80088cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0ef      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008816:	7cfb      	ldrb	r3, [r7, #19]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d159      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800881c:	4b2a      	ldr	r3, [pc, #168]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800881e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008826:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01e      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	429a      	cmp	r2, r3
 8008836:	d019      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008838:	4b23      	ldr	r3, [pc, #140]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800883e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008842:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008844:	4b20      	ldr	r3, [pc, #128]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884a:	4a1f      	ldr	r2, [pc, #124]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800884c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008854:	4b1c      	ldr	r3, [pc, #112]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800885a:	4a1b      	ldr	r2, [pc, #108]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800885c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008864:	4a18      	ldr	r2, [pc, #96]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d016      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008876:	f7fc f9f7 	bl	8004c68 <HAL_GetTick>
 800887a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800887c:	e00b      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800887e:	f7fc f9f3 	bl	8004c68 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800888c:	4293      	cmp	r3, r2
 800888e:	d902      	bls.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	74fb      	strb	r3, [r7, #19]
            break;
 8008894:	e006      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008896:	4b0c      	ldr	r3, [pc, #48]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0ec      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80088a4:	7cfb      	ldrb	r3, [r7, #19]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10b      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088aa:	4b07      	ldr	r3, [pc, #28]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b8:	4903      	ldr	r1, [pc, #12]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80088c0:	e008      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088c2:	7cfb      	ldrb	r3, [r7, #19]
 80088c4:	74bb      	strb	r3, [r7, #18]
 80088c6:	e005      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80088c8:	40021000 	.word	0x40021000
 80088cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d0:	7cfb      	ldrb	r3, [r7, #19]
 80088d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088d4:	7c7b      	ldrb	r3, [r7, #17]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d105      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088da:	4ba7      	ldr	r3, [pc, #668]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	4aa6      	ldr	r2, [pc, #664]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088f2:	4ba1      	ldr	r3, [pc, #644]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f8:	f023 0203 	bic.w	r2, r3, #3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	499d      	ldr	r1, [pc, #628]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008902:	4313      	orrs	r3, r2
 8008904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008914:	4b98      	ldr	r3, [pc, #608]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891a:	f023 020c 	bic.w	r2, r3, #12
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	4995      	ldr	r1, [pc, #596]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008924:	4313      	orrs	r3, r2
 8008926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008936:	4b90      	ldr	r3, [pc, #576]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800893c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	498c      	ldr	r1, [pc, #560]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0308 	and.w	r3, r3, #8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008958:	4b87      	ldr	r3, [pc, #540]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	4984      	ldr	r1, [pc, #528]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008968:	4313      	orrs	r3, r2
 800896a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0310 	and.w	r3, r3, #16
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800897a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800897c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	497b      	ldr	r1, [pc, #492]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800898a:	4313      	orrs	r3, r2
 800898c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800899c:	4b76      	ldr	r3, [pc, #472]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	4973      	ldr	r1, [pc, #460]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089be:	4b6e      	ldr	r3, [pc, #440]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	496a      	ldr	r1, [pc, #424]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80089e0:	4b65      	ldr	r3, [pc, #404]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	4962      	ldr	r1, [pc, #392]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00a      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a02:	4b5d      	ldr	r3, [pc, #372]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a10:	4959      	ldr	r1, [pc, #356]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00a      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a24:	4b54      	ldr	r3, [pc, #336]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a2a:	f023 0203 	bic.w	r2, r3, #3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a32:	4951      	ldr	r1, [pc, #324]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a46:	4b4c      	ldr	r3, [pc, #304]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	4948      	ldr	r1, [pc, #288]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d015      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a68:	4b43      	ldr	r3, [pc, #268]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a76:	4940      	ldr	r1, [pc, #256]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a86:	d105      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a88:	4b3b      	ldr	r3, [pc, #236]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	4a3a      	ldr	r2, [pc, #232]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a92:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d015      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008aa0:	4b35      	ldr	r3, [pc, #212]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aae:	4932      	ldr	r1, [pc, #200]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008abe:	d105      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d015      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ad8:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ade:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae6:	4924      	ldr	r1, [pc, #144]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008af6:	d105      	bne.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008af8:	4b1f      	ldr	r3, [pc, #124]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	4a1e      	ldr	r2, [pc, #120]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d015      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b10:	4b19      	ldr	r3, [pc, #100]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1e:	4916      	ldr	r1, [pc, #88]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b2e:	d105      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b30:	4b11      	ldr	r3, [pc, #68]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	4a10      	ldr	r2, [pc, #64]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d019      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b48:	4b0b      	ldr	r3, [pc, #44]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	4908      	ldr	r1, [pc, #32]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b66:	d109      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b68:	4b03      	ldr	r3, [pc, #12]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	4a02      	ldr	r2, [pc, #8]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b72:	60d3      	str	r3, [r2, #12]
 8008b74:	e002      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008b76:	bf00      	nop
 8008b78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d015      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008b88:	4b29      	ldr	r3, [pc, #164]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b96:	4926      	ldr	r1, [pc, #152]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ba6:	d105      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ba8:	4b21      	ldr	r3, [pc, #132]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	4a20      	ldr	r2, [pc, #128]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bb2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d015      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bce:	4918      	ldr	r1, [pc, #96]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bde:	d105      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008be0:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	4a12      	ldr	r2, [pc, #72]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d015      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c06:	490a      	ldr	r1, [pc, #40]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c16:	d105      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c18:	4b05      	ldr	r3, [pc, #20]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	4a04      	ldr	r2, [pc, #16]	@ (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008c24:	7cbb      	ldrb	r3, [r7, #18]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	40021000 	.word	0x40021000

08008c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e09d      	b.n	8008d82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d108      	bne.n	8008c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c56:	d009      	beq.n	8008c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	61da      	str	r2, [r3, #28]
 8008c5e:	e005      	b.n	8008c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7fb fca4 	bl	80045d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008cac:	d902      	bls.n	8008cb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	e002      	b.n	8008cba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008cb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008cc2:	d007      	beq.n	8008cd4 <HAL_SPI_Init+0xa0>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ccc:	d002      	beq.n	8008cd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d16:	ea42 0103 	orr.w	r1, r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	0c1b      	lsrs	r3, r3, #16
 8008d30:	f003 0204 	and.w	r2, r3, #4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	431a      	orrs	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008d50:	ea42 0103 	orr.w	r1, r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69da      	ldr	r2, [r3, #28]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b088      	sub	sp, #32
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	603b      	str	r3, [r7, #0]
 8008d96:	4613      	mov	r3, r2
 8008d98:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d9a:	f7fb ff65 	bl	8004c68 <HAL_GetTick>
 8008d9e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d001      	beq.n	8008db4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008db0:	2302      	movs	r3, #2
 8008db2:	e15c      	b.n	800906e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <HAL_SPI_Transmit+0x36>
 8008dba:	88fb      	ldrh	r3, [r7, #6]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e154      	b.n	800906e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_SPI_Transmit+0x48>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e14d      	b.n	800906e <HAL_SPI_Transmit+0x2e4>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2203      	movs	r2, #3
 8008dde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	88fa      	ldrh	r2, [r7, #6]
 8008df8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e24:	d10f      	bne.n	8008e46 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b40      	cmp	r3, #64	@ 0x40
 8008e52:	d007      	beq.n	8008e64 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e6c:	d952      	bls.n	8008f14 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <HAL_SPI_Transmit+0xf2>
 8008e76:	8b7b      	ldrh	r3, [r7, #26]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d145      	bne.n	8008f08 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e80:	881a      	ldrh	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	1c9a      	adds	r2, r3, #2
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008ea0:	e032      	b.n	8008f08 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d112      	bne.n	8008ed6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb4:	881a      	ldrh	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec0:	1c9a      	adds	r2, r3, #2
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ed4:	e018      	b.n	8008f08 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ed6:	f7fb fec7 	bl	8004c68 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d803      	bhi.n	8008eee <HAL_SPI_Transmit+0x164>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008eec:	d102      	bne.n	8008ef4 <HAL_SPI_Transmit+0x16a>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e0b2      	b.n	800906e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1c7      	bne.n	8008ea2 <HAL_SPI_Transmit+0x118>
 8008f12:	e083      	b.n	800901c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <HAL_SPI_Transmit+0x198>
 8008f1c:	8b7b      	ldrh	r3, [r7, #26]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d177      	bne.n	8009012 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d912      	bls.n	8008f52 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f30:	881a      	ldrh	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3c:	1c9a      	adds	r2, r3, #2
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b02      	subs	r3, #2
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f50:	e05f      	b.n	8009012 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	330c      	adds	r3, #12
 8008f5c:	7812      	ldrb	r2, [r2, #0]
 8008f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	3b01      	subs	r3, #1
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008f78:	e04b      	b.n	8009012 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d12b      	bne.n	8008fe0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d912      	bls.n	8008fb8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f96:	881a      	ldrh	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa2:	1c9a      	adds	r2, r3, #2
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b02      	subs	r3, #2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fb6:	e02c      	b.n	8009012 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fde:	e018      	b.n	8009012 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fe0:	f7fb fe42 	bl	8004c68 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d803      	bhi.n	8008ff8 <HAL_SPI_Transmit+0x26e>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ff6:	d102      	bne.n	8008ffe <HAL_SPI_Transmit+0x274>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d109      	bne.n	8009012 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e02d      	b.n	800906e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1ae      	bne.n	8008f7a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 fb65 	bl	80096f0 <SPI_EndRxTxTransaction>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800906c:	2300      	movs	r3, #0
  }
}
 800906e:	4618      	mov	r0, r3
 8009070:	3720      	adds	r7, #32
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b08a      	sub	sp, #40	@ 0x28
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	607a      	str	r2, [r7, #4]
 8009082:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009084:	2301      	movs	r3, #1
 8009086:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009088:	f7fb fdee 	bl	8004c68 <HAL_GetTick>
 800908c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009094:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800909c:	887b      	ldrh	r3, [r7, #2]
 800909e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80090a0:	887b      	ldrh	r3, [r7, #2]
 80090a2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80090a4:	7ffb      	ldrb	r3, [r7, #31]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d00c      	beq.n	80090c4 <HAL_SPI_TransmitReceive+0x4e>
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090b0:	d106      	bne.n	80090c0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d102      	bne.n	80090c0 <HAL_SPI_TransmitReceive+0x4a>
 80090ba:	7ffb      	ldrb	r3, [r7, #31]
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d001      	beq.n	80090c4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80090c0:	2302      	movs	r3, #2
 80090c2:	e1f3      	b.n	80094ac <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_SPI_TransmitReceive+0x60>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_SPI_TransmitReceive+0x60>
 80090d0:	887b      	ldrh	r3, [r7, #2]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e1e8      	b.n	80094ac <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_SPI_TransmitReceive+0x72>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e1e1      	b.n	80094ac <HAL_SPI_TransmitReceive+0x436>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d003      	beq.n	8009104 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2205      	movs	r2, #5
 8009100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	887a      	ldrh	r2, [r7, #2]
 8009114:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	887a      	ldrh	r2, [r7, #2]
 800911c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	887a      	ldrh	r2, [r7, #2]
 800912a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	887a      	ldrh	r2, [r7, #2]
 8009130:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009146:	d802      	bhi.n	800914e <HAL_SPI_TransmitReceive+0xd8>
 8009148:	8abb      	ldrh	r3, [r7, #20]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d908      	bls.n	8009160 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	e007      	b.n	8009170 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800916e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917a:	2b40      	cmp	r3, #64	@ 0x40
 800917c:	d007      	beq.n	800918e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800918c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009196:	f240 8083 	bls.w	80092a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <HAL_SPI_TransmitReceive+0x132>
 80091a2:	8afb      	ldrh	r3, [r7, #22]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d16f      	bne.n	8009288 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091cc:	e05c      	b.n	8009288 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d11b      	bne.n	8009214 <HAL_SPI_TransmitReceive+0x19e>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d016      	beq.n	8009214 <HAL_SPI_TransmitReceive+0x19e>
 80091e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d113      	bne.n	8009214 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f0:	881a      	ldrh	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fc:	1c9a      	adds	r2, r3, #2
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b01      	cmp	r3, #1
 8009220:	d11c      	bne.n	800925c <HAL_SPI_TransmitReceive+0x1e6>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d016      	beq.n	800925c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009238:	b292      	uxth	r2, r2
 800923a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009240:	1c9a      	adds	r2, r3, #2
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009258:	2301      	movs	r3, #1
 800925a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800925c:	f7fb fd04 	bl	8004c68 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009268:	429a      	cmp	r2, r3
 800926a:	d80d      	bhi.n	8009288 <HAL_SPI_TransmitReceive+0x212>
 800926c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009272:	d009      	beq.n	8009288 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e111      	b.n	80094ac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800928c:	b29b      	uxth	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d19d      	bne.n	80091ce <HAL_SPI_TransmitReceive+0x158>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d197      	bne.n	80091ce <HAL_SPI_TransmitReceive+0x158>
 800929e:	e0e5      	b.n	800946c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_SPI_TransmitReceive+0x23a>
 80092a8:	8afb      	ldrh	r3, [r7, #22]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	f040 80d1 	bne.w	8009452 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d912      	bls.n	80092e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092be:	881a      	ldrh	r2, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ca:	1c9a      	adds	r2, r3, #2
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b02      	subs	r3, #2
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092de:	e0b8      	b.n	8009452 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	330c      	adds	r3, #12
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009306:	e0a4      	b.n	8009452 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b02      	cmp	r3, #2
 8009314:	d134      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x30a>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800931a:	b29b      	uxth	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d02f      	beq.n	8009380 <HAL_SPI_TransmitReceive+0x30a>
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	2b01      	cmp	r3, #1
 8009324:	d12c      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800932a:	b29b      	uxth	r3, r3
 800932c:	2b01      	cmp	r3, #1
 800932e:	d912      	bls.n	8009356 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009334:	881a      	ldrh	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009340:	1c9a      	adds	r2, r3, #2
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800934a:	b29b      	uxth	r3, r3
 800934c:	3b02      	subs	r3, #2
 800934e:	b29a      	uxth	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009354:	e012      	b.n	800937c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	330c      	adds	r3, #12
 8009360:	7812      	ldrb	r2, [r2, #0]
 8009362:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	d148      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x3aa>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d042      	beq.n	8009420 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d923      	bls.n	80093ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68da      	ldr	r2, [r3, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b0:	b292      	uxth	r2, r2
 80093b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b8:	1c9a      	adds	r2, r3, #2
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b02      	subs	r3, #2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d81f      	bhi.n	800941c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80093ea:	605a      	str	r2, [r3, #4]
 80093ec:	e016      	b.n	800941c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f103 020c 	add.w	r2, r3, #12
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fa:	7812      	ldrb	r2, [r2, #0]
 80093fc:	b2d2      	uxtb	r2, r2
 80093fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009410:	b29b      	uxth	r3, r3
 8009412:	3b01      	subs	r3, #1
 8009414:	b29a      	uxth	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800941c:	2301      	movs	r3, #1
 800941e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009420:	f7fb fc22 	bl	8004c68 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800942c:	429a      	cmp	r2, r3
 800942e:	d803      	bhi.n	8009438 <HAL_SPI_TransmitReceive+0x3c2>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009436:	d102      	bne.n	800943e <HAL_SPI_TransmitReceive+0x3c8>
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e02c      	b.n	80094ac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009456:	b29b      	uxth	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	f47f af55 	bne.w	8009308 <HAL_SPI_TransmitReceive+0x292>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	f47f af4e 	bne.w	8009308 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800946c:	6a3a      	ldr	r2, [r7, #32]
 800946e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f93d 	bl	80096f0 <SPI_EndRxTxTransaction>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d008      	beq.n	800948e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2220      	movs	r2, #32
 8009480:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e00e      	b.n	80094ac <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80094aa:	2300      	movs	r3, #0
  }
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3728      	adds	r7, #40	@ 0x28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	4613      	mov	r3, r2
 80094c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094c4:	f7fb fbd0 	bl	8004c68 <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	1a9b      	subs	r3, r3, r2
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4413      	add	r3, r2
 80094d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094d4:	f7fb fbc8 	bl	8004c68 <HAL_GetTick>
 80094d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094da:	4b39      	ldr	r3, [pc, #228]	@ (80095c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	015b      	lsls	r3, r3, #5
 80094e0:	0d1b      	lsrs	r3, r3, #20
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	fb02 f303 	mul.w	r3, r2, r3
 80094e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094ea:	e054      	b.n	8009596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094f2:	d050      	beq.n	8009596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094f4:	f7fb fbb8 	bl	8004c68 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	69fa      	ldr	r2, [r7, #28]
 8009500:	429a      	cmp	r2, r3
 8009502:	d902      	bls.n	800950a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d13d      	bne.n	8009586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009522:	d111      	bne.n	8009548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800952c:	d004      	beq.n	8009538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009536:	d107      	bne.n	8009548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009550:	d10f      	bne.n	8009572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e017      	b.n	80095b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3b01      	subs	r3, #1
 8009594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4013      	ands	r3, r2
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	bf0c      	ite	eq
 80095a6:	2301      	moveq	r3, #1
 80095a8:	2300      	movne	r3, #0
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	79fb      	ldrb	r3, [r7, #7]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d19b      	bne.n	80094ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3720      	adds	r7, #32
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000000 	.word	0x20000000

080095c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08a      	sub	sp, #40	@ 0x28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80095d6:	f7fb fb47 	bl	8004c68 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	1a9b      	subs	r3, r3, r2
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	4413      	add	r3, r2
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80095e6:	f7fb fb3f 	bl	8004c68 <HAL_GetTick>
 80095ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	330c      	adds	r3, #12
 80095f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095f4:	4b3d      	ldr	r3, [pc, #244]	@ (80096ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	00da      	lsls	r2, r3, #3
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	0d1b      	lsrs	r3, r3, #20
 8009604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009606:	fb02 f303 	mul.w	r3, r2, r3
 800960a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800960c:	e060      	b.n	80096d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009614:	d107      	bne.n	8009626 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009624:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800962c:	d050      	beq.n	80096d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800962e:	f7fb fb1b 	bl	8004c68 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800963a:	429a      	cmp	r2, r3
 800963c:	d902      	bls.n	8009644 <SPI_WaitFifoStateUntilTimeout+0x80>
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d13d      	bne.n	80096c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009652:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800965c:	d111      	bne.n	8009682 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009666:	d004      	beq.n	8009672 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009670:	d107      	bne.n	8009682 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009680:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800968a:	d10f      	bne.n	80096ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e010      	b.n	80096e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4013      	ands	r3, r2
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d196      	bne.n	800960e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3728      	adds	r7, #40	@ 0x28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000000 	.word	0x20000000

080096f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2200      	movs	r2, #0
 8009704:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7ff ff5b 	bl	80095c4 <SPI_WaitFifoStateUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009718:	f043 0220 	orr.w	r2, r3, #32
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e027      	b.n	8009774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2200      	movs	r2, #0
 800972c:	2180      	movs	r1, #128	@ 0x80
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f7ff fec0 	bl	80094b4 <SPI_WaitFlagStateUntilTimeout>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d007      	beq.n	800974a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800973e:	f043 0220 	orr.w	r2, r3, #32
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e014      	b.n	8009774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2200      	movs	r2, #0
 8009752:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f7ff ff34 	bl	80095c4 <SPI_WaitFifoStateUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009766:	f043 0220 	orr.w	r2, r3, #32
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e000      	b.n	8009774 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e049      	b.n	8009822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fb f942 	bl	8004a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f000 fa26 	bl	8009c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b01      	cmp	r3, #1
 800983e:	d001      	beq.n	8009844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e054      	b.n	80098ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0201 	orr.w	r2, r2, #1
 800985a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a26      	ldr	r2, [pc, #152]	@ (80098fc <HAL_TIM_Base_Start_IT+0xd0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d022      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0x80>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800986e:	d01d      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0x80>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a22      	ldr	r2, [pc, #136]	@ (8009900 <HAL_TIM_Base_Start_IT+0xd4>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d018      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0x80>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a21      	ldr	r2, [pc, #132]	@ (8009904 <HAL_TIM_Base_Start_IT+0xd8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d013      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0x80>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a1f      	ldr	r2, [pc, #124]	@ (8009908 <HAL_TIM_Base_Start_IT+0xdc>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00e      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0x80>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a1e      	ldr	r2, [pc, #120]	@ (800990c <HAL_TIM_Base_Start_IT+0xe0>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d009      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0x80>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a1c      	ldr	r2, [pc, #112]	@ (8009910 <HAL_TIM_Base_Start_IT+0xe4>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d004      	beq.n	80098ac <HAL_TIM_Base_Start_IT+0x80>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a1b      	ldr	r2, [pc, #108]	@ (8009914 <HAL_TIM_Base_Start_IT+0xe8>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d115      	bne.n	80098d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	4b19      	ldr	r3, [pc, #100]	@ (8009918 <HAL_TIM_Base_Start_IT+0xec>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b06      	cmp	r3, #6
 80098bc:	d015      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0xbe>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098c4:	d011      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0201 	orr.w	r2, r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d6:	e008      	b.n	80098ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	e000      	b.n	80098ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	40012c00 	.word	0x40012c00
 8009900:	40000400 	.word	0x40000400
 8009904:	40000800 	.word	0x40000800
 8009908:	40000c00 	.word	0x40000c00
 800990c:	40013400 	.word	0x40013400
 8009910:	40014000 	.word	0x40014000
 8009914:	40015000 	.word	0x40015000
 8009918:	00010007 	.word	0x00010007

0800991c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d020      	beq.n	8009980 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f003 0302 	and.w	r3, r3, #2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01b      	beq.n	8009980 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f06f 0202 	mvn.w	r2, #2
 8009950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f931 	bl	8009bce <HAL_TIM_IC_CaptureCallback>
 800996c:	e005      	b.n	800997a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f923 	bl	8009bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f934 	bl	8009be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f003 0304 	and.w	r3, r3, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	d020      	beq.n	80099cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01b      	beq.n	80099cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f06f 0204 	mvn.w	r2, #4
 800999c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f90b 	bl	8009bce <HAL_TIM_IC_CaptureCallback>
 80099b8:	e005      	b.n	80099c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f8fd 	bl	8009bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f90e 	bl	8009be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f003 0308 	and.w	r3, r3, #8
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d020      	beq.n	8009a18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01b      	beq.n	8009a18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f06f 0208 	mvn.w	r2, #8
 80099e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2204      	movs	r2, #4
 80099ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f8e5 	bl	8009bce <HAL_TIM_IC_CaptureCallback>
 8009a04:	e005      	b.n	8009a12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f8d7 	bl	8009bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f8e8 	bl	8009be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f003 0310 	and.w	r3, r3, #16
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d020      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01b      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0210 	mvn.w	r2, #16
 8009a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2208      	movs	r2, #8
 8009a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f8bf 	bl	8009bce <HAL_TIM_IC_CaptureCallback>
 8009a50:	e005      	b.n	8009a5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f8b1 	bl	8009bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f8c2 	bl	8009be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00c      	beq.n	8009a88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d007      	beq.n	8009a88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f06f 0201 	mvn.w	r2, #1
 8009a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7fa fd50 	bl	8004528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d104      	bne.n	8009a9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f969 	bl	8009d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00c      	beq.n	8009ada <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f961 	bl	8009d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00c      	beq.n	8009afe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d007      	beq.n	8009afe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f87c 	bl	8009bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00c      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f003 0320 	and.w	r3, r3, #32
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f06f 0220 	mvn.w	r2, #32
 8009b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f929 	bl	8009d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00c      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f935 	bl	8009db0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00c      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f92d 	bl	8009dc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f925 	bl	8009dd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00c      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d007      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f91d 	bl	8009dec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b083      	sub	sp, #12
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bea:	bf00      	nop
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
	...

08009c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8009d50 <TIM_Base_SetConfig+0x144>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d017      	beq.n	8009c54 <TIM_Base_SetConfig+0x48>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c2a:	d013      	beq.n	8009c54 <TIM_Base_SetConfig+0x48>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a49      	ldr	r2, [pc, #292]	@ (8009d54 <TIM_Base_SetConfig+0x148>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d00f      	beq.n	8009c54 <TIM_Base_SetConfig+0x48>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a48      	ldr	r2, [pc, #288]	@ (8009d58 <TIM_Base_SetConfig+0x14c>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d00b      	beq.n	8009c54 <TIM_Base_SetConfig+0x48>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a47      	ldr	r2, [pc, #284]	@ (8009d5c <TIM_Base_SetConfig+0x150>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d007      	beq.n	8009c54 <TIM_Base_SetConfig+0x48>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a46      	ldr	r2, [pc, #280]	@ (8009d60 <TIM_Base_SetConfig+0x154>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d003      	beq.n	8009c54 <TIM_Base_SetConfig+0x48>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a45      	ldr	r2, [pc, #276]	@ (8009d64 <TIM_Base_SetConfig+0x158>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d108      	bne.n	8009c66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a39      	ldr	r2, [pc, #228]	@ (8009d50 <TIM_Base_SetConfig+0x144>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d023      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c74:	d01f      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a36      	ldr	r2, [pc, #216]	@ (8009d54 <TIM_Base_SetConfig+0x148>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d01b      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a35      	ldr	r2, [pc, #212]	@ (8009d58 <TIM_Base_SetConfig+0x14c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d017      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a34      	ldr	r2, [pc, #208]	@ (8009d5c <TIM_Base_SetConfig+0x150>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d013      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a33      	ldr	r2, [pc, #204]	@ (8009d60 <TIM_Base_SetConfig+0x154>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00f      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a33      	ldr	r2, [pc, #204]	@ (8009d68 <TIM_Base_SetConfig+0x15c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00b      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a32      	ldr	r2, [pc, #200]	@ (8009d6c <TIM_Base_SetConfig+0x160>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d007      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a31      	ldr	r2, [pc, #196]	@ (8009d70 <TIM_Base_SetConfig+0x164>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <TIM_Base_SetConfig+0xaa>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8009d64 <TIM_Base_SetConfig+0x158>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d108      	bne.n	8009cc8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a18      	ldr	r2, [pc, #96]	@ (8009d50 <TIM_Base_SetConfig+0x144>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d013      	beq.n	8009d1c <TIM_Base_SetConfig+0x110>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8009d60 <TIM_Base_SetConfig+0x154>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d00f      	beq.n	8009d1c <TIM_Base_SetConfig+0x110>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8009d68 <TIM_Base_SetConfig+0x15c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00b      	beq.n	8009d1c <TIM_Base_SetConfig+0x110>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a19      	ldr	r2, [pc, #100]	@ (8009d6c <TIM_Base_SetConfig+0x160>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d007      	beq.n	8009d1c <TIM_Base_SetConfig+0x110>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a18      	ldr	r2, [pc, #96]	@ (8009d70 <TIM_Base_SetConfig+0x164>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d003      	beq.n	8009d1c <TIM_Base_SetConfig+0x110>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a13      	ldr	r2, [pc, #76]	@ (8009d64 <TIM_Base_SetConfig+0x158>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d103      	bne.n	8009d24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d105      	bne.n	8009d42 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f023 0201 	bic.w	r2, r3, #1
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	611a      	str	r2, [r3, #16]
  }
}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40012c00 	.word	0x40012c00
 8009d54:	40000400 	.word	0x40000400
 8009d58:	40000800 	.word	0x40000800
 8009d5c:	40000c00 	.word	0x40000c00
 8009d60:	40013400 	.word	0x40013400
 8009d64:	40015000 	.word	0x40015000
 8009d68:	40014000 	.word	0x40014000
 8009d6c:	40014400 	.word	0x40014400
 8009d70:	40014800 	.word	0x40014800

08009d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e042      	b.n	8009e98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d106      	bne.n	8009e2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7fa fe73 	bl	8004b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2224      	movs	r2, #36	@ 0x24
 8009e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 0201 	bic.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fb24 	bl	800a498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f825 	bl	8009ea0 <UART_SetConfig>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e01b      	b.n	8009e98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 0201 	orr.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fba3 	bl	800a5dc <UART_CheckIdleState>
 8009e96:	4603      	mov	r3, r0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ea4:	b08c      	sub	sp, #48	@ 0x30
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4baa      	ldr	r3, [pc, #680]	@ (800a178 <UART_SetConfig+0x2d8>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	6812      	ldr	r2, [r2, #0]
 8009ed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ed8:	430b      	orrs	r3, r1
 8009eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a9f      	ldr	r2, [pc, #636]	@ (800a17c <UART_SetConfig+0x2dc>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d004      	beq.n	8009f0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f20:	430b      	orrs	r3, r1
 8009f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2a:	f023 010f 	bic.w	r1, r3, #15
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a90      	ldr	r2, [pc, #576]	@ (800a180 <UART_SetConfig+0x2e0>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d125      	bne.n	8009f90 <UART_SetConfig+0xf0>
 8009f44:	4b8f      	ldr	r3, [pc, #572]	@ (800a184 <UART_SetConfig+0x2e4>)
 8009f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d81a      	bhi.n	8009f88 <UART_SetConfig+0xe8>
 8009f52:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <UART_SetConfig+0xb8>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f79 	.word	0x08009f79
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6e:	e116      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009f70:	2302      	movs	r3, #2
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e112      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009f78:	2304      	movs	r3, #4
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e10e      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009f80:	2308      	movs	r3, #8
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f86:	e10a      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009f88:	2310      	movs	r3, #16
 8009f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8e:	e106      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a7c      	ldr	r2, [pc, #496]	@ (800a188 <UART_SetConfig+0x2e8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d138      	bne.n	800a00c <UART_SetConfig+0x16c>
 8009f9a:	4b7a      	ldr	r3, [pc, #488]	@ (800a184 <UART_SetConfig+0x2e4>)
 8009f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa0:	f003 030c 	and.w	r3, r3, #12
 8009fa4:	2b0c      	cmp	r3, #12
 8009fa6:	d82d      	bhi.n	800a004 <UART_SetConfig+0x164>
 8009fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <UART_SetConfig+0x110>)
 8009faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fae:	bf00      	nop
 8009fb0:	08009fe5 	.word	0x08009fe5
 8009fb4:	0800a005 	.word	0x0800a005
 8009fb8:	0800a005 	.word	0x0800a005
 8009fbc:	0800a005 	.word	0x0800a005
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	0800a005 	.word	0x0800a005
 8009fc8:	0800a005 	.word	0x0800a005
 8009fcc:	0800a005 	.word	0x0800a005
 8009fd0:	08009fed 	.word	0x08009fed
 8009fd4:	0800a005 	.word	0x0800a005
 8009fd8:	0800a005 	.word	0x0800a005
 8009fdc:	0800a005 	.word	0x0800a005
 8009fe0:	08009ffd 	.word	0x08009ffd
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fea:	e0d8      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009fec:	2302      	movs	r3, #2
 8009fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff2:	e0d4      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ffa:	e0d0      	b.n	800a19e <UART_SetConfig+0x2fe>
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a002:	e0cc      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a004:	2310      	movs	r3, #16
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00a:	e0c8      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a5e      	ldr	r2, [pc, #376]	@ (800a18c <UART_SetConfig+0x2ec>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d125      	bne.n	800a062 <UART_SetConfig+0x1c2>
 800a016:	4b5b      	ldr	r3, [pc, #364]	@ (800a184 <UART_SetConfig+0x2e4>)
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a01c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a020:	2b30      	cmp	r3, #48	@ 0x30
 800a022:	d016      	beq.n	800a052 <UART_SetConfig+0x1b2>
 800a024:	2b30      	cmp	r3, #48	@ 0x30
 800a026:	d818      	bhi.n	800a05a <UART_SetConfig+0x1ba>
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d00a      	beq.n	800a042 <UART_SetConfig+0x1a2>
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d814      	bhi.n	800a05a <UART_SetConfig+0x1ba>
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <UART_SetConfig+0x19a>
 800a034:	2b10      	cmp	r3, #16
 800a036:	d008      	beq.n	800a04a <UART_SetConfig+0x1aa>
 800a038:	e00f      	b.n	800a05a <UART_SetConfig+0x1ba>
 800a03a:	2300      	movs	r3, #0
 800a03c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a040:	e0ad      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a042:	2302      	movs	r3, #2
 800a044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a048:	e0a9      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a04a:	2304      	movs	r3, #4
 800a04c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a050:	e0a5      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a052:	2308      	movs	r3, #8
 800a054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a058:	e0a1      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a05a:	2310      	movs	r3, #16
 800a05c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a060:	e09d      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a4a      	ldr	r2, [pc, #296]	@ (800a190 <UART_SetConfig+0x2f0>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d125      	bne.n	800a0b8 <UART_SetConfig+0x218>
 800a06c:	4b45      	ldr	r3, [pc, #276]	@ (800a184 <UART_SetConfig+0x2e4>)
 800a06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a072:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a076:	2bc0      	cmp	r3, #192	@ 0xc0
 800a078:	d016      	beq.n	800a0a8 <UART_SetConfig+0x208>
 800a07a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a07c:	d818      	bhi.n	800a0b0 <UART_SetConfig+0x210>
 800a07e:	2b80      	cmp	r3, #128	@ 0x80
 800a080:	d00a      	beq.n	800a098 <UART_SetConfig+0x1f8>
 800a082:	2b80      	cmp	r3, #128	@ 0x80
 800a084:	d814      	bhi.n	800a0b0 <UART_SetConfig+0x210>
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <UART_SetConfig+0x1f0>
 800a08a:	2b40      	cmp	r3, #64	@ 0x40
 800a08c:	d008      	beq.n	800a0a0 <UART_SetConfig+0x200>
 800a08e:	e00f      	b.n	800a0b0 <UART_SetConfig+0x210>
 800a090:	2300      	movs	r3, #0
 800a092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a096:	e082      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a098:	2302      	movs	r3, #2
 800a09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09e:	e07e      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a6:	e07a      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a0a8:	2308      	movs	r3, #8
 800a0aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ae:	e076      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b6:	e072      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a35      	ldr	r2, [pc, #212]	@ (800a194 <UART_SetConfig+0x2f4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d12a      	bne.n	800a118 <UART_SetConfig+0x278>
 800a0c2:	4b30      	ldr	r3, [pc, #192]	@ (800a184 <UART_SetConfig+0x2e4>)
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0d0:	d01a      	beq.n	800a108 <UART_SetConfig+0x268>
 800a0d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0d6:	d81b      	bhi.n	800a110 <UART_SetConfig+0x270>
 800a0d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0dc:	d00c      	beq.n	800a0f8 <UART_SetConfig+0x258>
 800a0de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e2:	d815      	bhi.n	800a110 <UART_SetConfig+0x270>
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d003      	beq.n	800a0f0 <UART_SetConfig+0x250>
 800a0e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0ec:	d008      	beq.n	800a100 <UART_SetConfig+0x260>
 800a0ee:	e00f      	b.n	800a110 <UART_SetConfig+0x270>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f6:	e052      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0fe:	e04e      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a100:	2304      	movs	r3, #4
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a106:	e04a      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a108:	2308      	movs	r3, #8
 800a10a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a10e:	e046      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a110:	2310      	movs	r3, #16
 800a112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a116:	e042      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a17      	ldr	r2, [pc, #92]	@ (800a17c <UART_SetConfig+0x2dc>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d13a      	bne.n	800a198 <UART_SetConfig+0x2f8>
 800a122:	4b18      	ldr	r3, [pc, #96]	@ (800a184 <UART_SetConfig+0x2e4>)
 800a124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a12c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a130:	d01a      	beq.n	800a168 <UART_SetConfig+0x2c8>
 800a132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a136:	d81b      	bhi.n	800a170 <UART_SetConfig+0x2d0>
 800a138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a13c:	d00c      	beq.n	800a158 <UART_SetConfig+0x2b8>
 800a13e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a142:	d815      	bhi.n	800a170 <UART_SetConfig+0x2d0>
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <UART_SetConfig+0x2b0>
 800a148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a14c:	d008      	beq.n	800a160 <UART_SetConfig+0x2c0>
 800a14e:	e00f      	b.n	800a170 <UART_SetConfig+0x2d0>
 800a150:	2300      	movs	r3, #0
 800a152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a156:	e022      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a158:	2302      	movs	r3, #2
 800a15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15e:	e01e      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a166:	e01a      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16e:	e016      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a176:	e012      	b.n	800a19e <UART_SetConfig+0x2fe>
 800a178:	cfff69f3 	.word	0xcfff69f3
 800a17c:	40008000 	.word	0x40008000
 800a180:	40013800 	.word	0x40013800
 800a184:	40021000 	.word	0x40021000
 800a188:	40004400 	.word	0x40004400
 800a18c:	40004800 	.word	0x40004800
 800a190:	40004c00 	.word	0x40004c00
 800a194:	40005000 	.word	0x40005000
 800a198:	2310      	movs	r3, #16
 800a19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4aae      	ldr	r2, [pc, #696]	@ (800a45c <UART_SetConfig+0x5bc>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	f040 8097 	bne.w	800a2d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1ae:	2b08      	cmp	r3, #8
 800a1b0:	d823      	bhi.n	800a1fa <UART_SetConfig+0x35a>
 800a1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b8 <UART_SetConfig+0x318>)
 800a1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a1fb 	.word	0x0800a1fb
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a1fb 	.word	0x0800a1fb
 800a1c8:	0800a1eb 	.word	0x0800a1eb
 800a1cc:	0800a1fb 	.word	0x0800a1fb
 800a1d0:	0800a1fb 	.word	0x0800a1fb
 800a1d4:	0800a1fb 	.word	0x0800a1fb
 800a1d8:	0800a1f3 	.word	0x0800a1f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1dc:	f7fe fa3a 	bl	8008654 <HAL_RCC_GetPCLK1Freq>
 800a1e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1e2:	e010      	b.n	800a206 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1e4:	4b9e      	ldr	r3, [pc, #632]	@ (800a460 <UART_SetConfig+0x5c0>)
 800a1e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1e8:	e00d      	b.n	800a206 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1ea:	f7fe f9c7 	bl	800857c <HAL_RCC_GetSysClockFreq>
 800a1ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1f0:	e009      	b.n	800a206 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1f8:	e005      	b.n	800a206 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 8130 	beq.w	800a46e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a212:	4a94      	ldr	r2, [pc, #592]	@ (800a464 <UART_SetConfig+0x5c4>)
 800a214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a218:	461a      	mov	r2, r3
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a220:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	4613      	mov	r3, r2
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	4413      	add	r3, r2
 800a22c:	69ba      	ldr	r2, [r7, #24]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d305      	bcc.n	800a23e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d903      	bls.n	800a246 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a244:	e113      	b.n	800a46e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	2200      	movs	r2, #0
 800a24a:	60bb      	str	r3, [r7, #8]
 800a24c:	60fa      	str	r2, [r7, #12]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a252:	4a84      	ldr	r2, [pc, #528]	@ (800a464 <UART_SetConfig+0x5c4>)
 800a254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	2200      	movs	r2, #0
 800a25c:	603b      	str	r3, [r7, #0]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a264:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a268:	f7f6 fd16 	bl	8000c98 <__aeabi_uldivmod>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4610      	mov	r0, r2
 800a272:	4619      	mov	r1, r3
 800a274:	f04f 0200 	mov.w	r2, #0
 800a278:	f04f 0300 	mov.w	r3, #0
 800a27c:	020b      	lsls	r3, r1, #8
 800a27e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a282:	0202      	lsls	r2, r0, #8
 800a284:	6979      	ldr	r1, [r7, #20]
 800a286:	6849      	ldr	r1, [r1, #4]
 800a288:	0849      	lsrs	r1, r1, #1
 800a28a:	2000      	movs	r0, #0
 800a28c:	460c      	mov	r4, r1
 800a28e:	4605      	mov	r5, r0
 800a290:	eb12 0804 	adds.w	r8, r2, r4
 800a294:	eb43 0905 	adc.w	r9, r3, r5
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	469a      	mov	sl, r3
 800a2a0:	4693      	mov	fp, r2
 800a2a2:	4652      	mov	r2, sl
 800a2a4:	465b      	mov	r3, fp
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	f7f6 fcf5 	bl	8000c98 <__aeabi_uldivmod>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2bc:	d308      	bcc.n	800a2d0 <UART_SetConfig+0x430>
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2c4:	d204      	bcs.n	800a2d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6a3a      	ldr	r2, [r7, #32]
 800a2cc:	60da      	str	r2, [r3, #12]
 800a2ce:	e0ce      	b.n	800a46e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2d6:	e0ca      	b.n	800a46e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	69db      	ldr	r3, [r3, #28]
 800a2dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2e0:	d166      	bne.n	800a3b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a2e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2e6:	2b08      	cmp	r3, #8
 800a2e8:	d827      	bhi.n	800a33a <UART_SetConfig+0x49a>
 800a2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f0 <UART_SetConfig+0x450>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a315 	.word	0x0800a315
 800a2f4:	0800a31d 	.word	0x0800a31d
 800a2f8:	0800a325 	.word	0x0800a325
 800a2fc:	0800a33b 	.word	0x0800a33b
 800a300:	0800a32b 	.word	0x0800a32b
 800a304:	0800a33b 	.word	0x0800a33b
 800a308:	0800a33b 	.word	0x0800a33b
 800a30c:	0800a33b 	.word	0x0800a33b
 800a310:	0800a333 	.word	0x0800a333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a314:	f7fe f99e 	bl	8008654 <HAL_RCC_GetPCLK1Freq>
 800a318:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a31a:	e014      	b.n	800a346 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a31c:	f7fe f9b0 	bl	8008680 <HAL_RCC_GetPCLK2Freq>
 800a320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a322:	e010      	b.n	800a346 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a324:	4b4e      	ldr	r3, [pc, #312]	@ (800a460 <UART_SetConfig+0x5c0>)
 800a326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a328:	e00d      	b.n	800a346 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a32a:	f7fe f927 	bl	800857c <HAL_RCC_GetSysClockFreq>
 800a32e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a330:	e009      	b.n	800a346 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a338:	e005      	b.n	800a346 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a33a:	2300      	movs	r3, #0
 800a33c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 8090 	beq.w	800a46e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a352:	4a44      	ldr	r2, [pc, #272]	@ (800a464 <UART_SetConfig+0x5c4>)
 800a354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a358:	461a      	mov	r2, r3
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a360:	005a      	lsls	r2, r3, #1
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	441a      	add	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a372:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d916      	bls.n	800a3a8 <UART_SetConfig+0x508>
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a380:	d212      	bcs.n	800a3a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f023 030f 	bic.w	r3, r3, #15
 800a38a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	b29b      	uxth	r3, r3
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	b29a      	uxth	r2, r3
 800a398:	8bfb      	ldrh	r3, [r7, #30]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	8bfa      	ldrh	r2, [r7, #30]
 800a3a4:	60da      	str	r2, [r3, #12]
 800a3a6:	e062      	b.n	800a46e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a3ae:	e05e      	b.n	800a46e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3b4:	2b08      	cmp	r3, #8
 800a3b6:	d828      	bhi.n	800a40a <UART_SetConfig+0x56a>
 800a3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c0 <UART_SetConfig+0x520>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3f5 	.word	0x0800a3f5
 800a3cc:	0800a40b 	.word	0x0800a40b
 800a3d0:	0800a3fb 	.word	0x0800a3fb
 800a3d4:	0800a40b 	.word	0x0800a40b
 800a3d8:	0800a40b 	.word	0x0800a40b
 800a3dc:	0800a40b 	.word	0x0800a40b
 800a3e0:	0800a403 	.word	0x0800a403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3e4:	f7fe f936 	bl	8008654 <HAL_RCC_GetPCLK1Freq>
 800a3e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ea:	e014      	b.n	800a416 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ec:	f7fe f948 	bl	8008680 <HAL_RCC_GetPCLK2Freq>
 800a3f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3f2:	e010      	b.n	800a416 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a460 <UART_SetConfig+0x5c0>)
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3f8:	e00d      	b.n	800a416 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3fa:	f7fe f8bf 	bl	800857c <HAL_RCC_GetSysClockFreq>
 800a3fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a400:	e009      	b.n	800a416 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a408:	e005      	b.n	800a416 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a414:	bf00      	nop
    }

    if (pclk != 0U)
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d028      	beq.n	800a46e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a420:	4a10      	ldr	r2, [pc, #64]	@ (800a464 <UART_SetConfig+0x5c4>)
 800a422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a426:	461a      	mov	r2, r3
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	085b      	lsrs	r3, r3, #1
 800a434:	441a      	add	r2, r3
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	2b0f      	cmp	r3, #15
 800a444:	d910      	bls.n	800a468 <UART_SetConfig+0x5c8>
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a44c:	d20c      	bcs.n	800a468 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	b29a      	uxth	r2, r3
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	60da      	str	r2, [r3, #12]
 800a458:	e009      	b.n	800a46e <UART_SetConfig+0x5ce>
 800a45a:	bf00      	nop
 800a45c:	40008000 	.word	0x40008000
 800a460:	00f42400 	.word	0x00f42400
 800a464:	080166b4 	.word	0x080166b4
      }
      else
      {
        ret = HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2201      	movs	r2, #1
 800a472:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2201      	movs	r2, #1
 800a47a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2200      	movs	r2, #0
 800a482:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2200      	movs	r2, #0
 800a488:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a48a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3730      	adds	r7, #48	@ 0x30
 800a492:	46bd      	mov	sp, r7
 800a494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a4:	f003 0308 	and.w	r3, r3, #8
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e8:	f003 0302 	and.w	r3, r3, #2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00a      	beq.n	800a54a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d01a      	beq.n	800a5ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a596:	d10a      	bne.n	800a5ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	605a      	str	r2, [r3, #4]
  }
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b098      	sub	sp, #96	@ 0x60
 800a5e0:	af02      	add	r7, sp, #8
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5ec:	f7fa fb3c 	bl	8004c68 <HAL_GetTick>
 800a5f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0308 	and.w	r3, r3, #8
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	d12f      	bne.n	800a660 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f88e 	bl	800a730 <UART_WaitOnFlagUntilTimeout>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d022      	beq.n	800a660 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a62a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a62e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a638:	647b      	str	r3, [r7, #68]	@ 0x44
 800a63a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a63e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e6      	bne.n	800a61a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2220      	movs	r2, #32
 800a650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e063      	b.n	800a728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d149      	bne.n	800a702 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a66e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a676:	2200      	movs	r2, #0
 800a678:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f857 	bl	800a730 <UART_WaitOnFlagUntilTimeout>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d03c      	beq.n	800a702 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	623b      	str	r3, [r7, #32]
   return(result);
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a69c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e6      	bne.n	800a688 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f023 0301 	bic.w	r3, r3, #1
 800a6d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6da:	61fa      	str	r2, [r7, #28]
 800a6dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	69b9      	ldr	r1, [r7, #24]
 800a6e0:	69fa      	ldr	r2, [r7, #28]
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e5      	bne.n	800a6ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e012      	b.n	800a728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2220      	movs	r2, #32
 800a706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3758      	adds	r7, #88	@ 0x58
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	4613      	mov	r3, r2
 800a73e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a740:	e04f      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a748:	d04b      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a74a:	f7fa fa8d 	bl	8004c68 <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	429a      	cmp	r2, r3
 800a758:	d302      	bcc.n	800a760 <UART_WaitOnFlagUntilTimeout+0x30>
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e04e      	b.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d037      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b80      	cmp	r3, #128	@ 0x80
 800a776:	d034      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2b40      	cmp	r3, #64	@ 0x40
 800a77c:	d031      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	69db      	ldr	r3, [r3, #28]
 800a784:	f003 0308 	and.w	r3, r3, #8
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d110      	bne.n	800a7ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2208      	movs	r2, #8
 800a792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 f838 	bl	800a80a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2208      	movs	r2, #8
 800a79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e029      	b.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7bc:	d111      	bne.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f81e 	bl	800a80a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e00f      	b.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69da      	ldr	r2, [r3, #28]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	bf0c      	ite	eq
 800a7f2:	2301      	moveq	r3, #1
 800a7f4:	2300      	movne	r3, #0
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d0a0      	beq.n	800a742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b095      	sub	sp, #84	@ 0x54
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81a:	e853 3f00 	ldrex	r3, [r3]
 800a81e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	461a      	mov	r2, r3
 800a82e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a830:	643b      	str	r3, [r7, #64]	@ 0x40
 800a832:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a836:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a838:	e841 2300 	strex	r3, r2, [r1]
 800a83c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1e6      	bne.n	800a812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3308      	adds	r3, #8
 800a84a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	e853 3f00 	ldrex	r3, [r3]
 800a852:	61fb      	str	r3, [r7, #28]
   return(result);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a85a:	f023 0301 	bic.w	r3, r3, #1
 800a85e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3308      	adds	r3, #8
 800a866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a86a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a86e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a870:	e841 2300 	strex	r3, r2, [r1]
 800a874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e3      	bne.n	800a844 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a880:	2b01      	cmp	r3, #1
 800a882:	d118      	bne.n	800a8b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	60bb      	str	r3, [r7, #8]
   return(result);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f023 0310 	bic.w	r3, r3, #16
 800a898:	647b      	str	r3, [r7, #68]	@ 0x44
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6979      	ldr	r1, [r7, #20]
 800a8a8:	69ba      	ldr	r2, [r7, #24]
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e6      	bne.n	800a884 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8ca:	bf00      	nop
 800a8cc:	3754      	adds	r7, #84	@ 0x54
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_UARTEx_DisableFifoMode+0x16>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e027      	b.n	800a93c <HAL_UARTEx_DisableFifoMode+0x66>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	@ 0x24
 800a8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a91a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d101      	bne.n	800a960 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a95c:	2302      	movs	r3, #2
 800a95e:	e02d      	b.n	800a9bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2224      	movs	r2, #36	@ 0x24
 800a96c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 0201 	bic.w	r2, r2, #1
 800a986:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f84f 	bl	800aa40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e02d      	b.n	800aa38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2224      	movs	r2, #36	@ 0x24
 800a9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0201 	bic.w	r2, r2, #1
 800aa02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f811 	bl	800aa40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d108      	bne.n	800aa62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa60:	e031      	b.n	800aac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa62:	2308      	movs	r3, #8
 800aa64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa66:	2308      	movs	r3, #8
 800aa68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	0e5b      	lsrs	r3, r3, #25
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	0f5b      	lsrs	r3, r3, #29
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0307 	and.w	r3, r3, #7
 800aa88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	7b3a      	ldrb	r2, [r7, #12]
 800aa8e:	4911      	ldr	r1, [pc, #68]	@ (800aad4 <UARTEx_SetNbDataToProcess+0x94>)
 800aa90:	5c8a      	ldrb	r2, [r1, r2]
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa96:	7b3a      	ldrb	r2, [r7, #12]
 800aa98:	490f      	ldr	r1, [pc, #60]	@ (800aad8 <UARTEx_SetNbDataToProcess+0x98>)
 800aa9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	7b7a      	ldrb	r2, [r7, #13]
 800aaac:	4909      	ldr	r1, [pc, #36]	@ (800aad4 <UARTEx_SetNbDataToProcess+0x94>)
 800aaae:	5c8a      	ldrb	r2, [r1, r2]
 800aab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aab4:	7b7a      	ldrb	r2, [r7, #13]
 800aab6:	4908      	ldr	r1, [pc, #32]	@ (800aad8 <UARTEx_SetNbDataToProcess+0x98>)
 800aab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaba:	fb93 f3f2 	sdiv	r3, r3, r2
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aac6:	bf00      	nop
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	080166cc 	.word	0x080166cc
 800aad8:	080166d4 	.word	0x080166d4

0800aadc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aaec:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800aaf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ab12:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ab16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	43db      	mvns	r3, r3
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	4013      	ands	r3, r2
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	1d3b      	adds	r3, r7, #4
 800ab4a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b0a7      	sub	sp, #156	@ 0x9c
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800ab9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	78db      	ldrb	r3, [r3, #3]
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d81f      	bhi.n	800abee <USB_ActivateEndpoint+0x72>
 800abae:	a201      	add	r2, pc, #4	@ (adr r2, 800abb4 <USB_ActivateEndpoint+0x38>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800abc5 	.word	0x0800abc5
 800abb8:	0800abe1 	.word	0x0800abe1
 800abbc:	0800abf7 	.word	0x0800abf7
 800abc0:	0800abd3 	.word	0x0800abd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800abc4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800abc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800abcc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800abd0:	e012      	b.n	800abf8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800abd2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800abd6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800abda:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800abde:	e00b      	b.n	800abf8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800abe0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800abe4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800abe8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800abec:	e004      	b.n	800abf8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800abf4:	e000      	b.n	800abf8 <USB_ActivateEndpoint+0x7c>
      break;
 800abf6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	441a      	add	r2, r3
 800ac02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ac06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	b21b      	sxth	r3, r3
 800ac2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac32:	b21a      	sxth	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	b21b      	sxth	r3, r3
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	b21b      	sxth	r3, r3
 800ac3e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	441a      	add	r2, r3
 800ac4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800ac50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	7b1b      	ldrb	r3, [r3, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f040 8180 	bne.w	800af6e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	785b      	ldrb	r3, [r3, #1]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 8084 	beq.w	800ad80 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	61bb      	str	r3, [r7, #24]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	4413      	add	r3, r2
 800ac8a:	61bb      	str	r3, [r7, #24]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	00da      	lsls	r2, r3, #3
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	4413      	add	r3, r2
 800ac96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	88db      	ldrh	r3, [r3, #6]
 800aca0:	085b      	lsrs	r3, r3, #1
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	827b      	strh	r3, [r7, #18]
 800acba:	8a7b      	ldrh	r3, [r7, #18]
 800acbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01b      	beq.n	800acfc <USB_ActivateEndpoint+0x180>
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acda:	823b      	strh	r3, [r7, #16]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	441a      	add	r2, r3
 800ace6:	8a3b      	ldrh	r3, [r7, #16]
 800ace8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acf4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	78db      	ldrb	r3, [r3, #3]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d020      	beq.n	800ad46 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad1a:	81bb      	strh	r3, [r7, #12]
 800ad1c:	89bb      	ldrh	r3, [r7, #12]
 800ad1e:	f083 0320 	eor.w	r3, r3, #32
 800ad22:	81bb      	strh	r3, [r7, #12]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	441a      	add	r2, r3
 800ad2e:	89bb      	ldrh	r3, [r7, #12]
 800ad30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	8013      	strh	r3, [r2, #0]
 800ad44:	e3f9      	b.n	800b53a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad5c:	81fb      	strh	r3, [r7, #14]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	441a      	add	r2, r3
 800ad68:	89fb      	ldrh	r3, [r7, #14]
 800ad6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	8013      	strh	r3, [r2, #0]
 800ad7e:	e3dc      	b.n	800b53a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad90:	4413      	add	r3, r2
 800ad92:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	00da      	lsls	r2, r3, #3
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ada2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	88db      	ldrh	r3, [r3, #6]
 800ada8:	085b      	lsrs	r3, r3, #1
 800adaa:	b29b      	uxth	r3, r3
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	b29a      	uxth	r2, r3
 800adb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	461a      	mov	r2, r3
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	4413      	add	r3, r2
 800adc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	00da      	lsls	r2, r3, #3
 800adce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add0:	4413      	add	r3, r2
 800add2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800add6:	627b      	str	r3, [r7, #36]	@ 0x24
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29b      	uxth	r3, r3
 800adde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	801a      	strh	r2, [r3, #0]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10a      	bne.n	800ae06 <USB_ActivateEndpoint+0x28a>
 800adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae02:	801a      	strh	r2, [r3, #0]
 800ae04:	e041      	b.n	800ae8a <USB_ActivateEndpoint+0x30e>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae0c:	d81c      	bhi.n	800ae48 <USB_ActivateEndpoint+0x2cc>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	085b      	lsrs	r3, r3, #1
 800ae14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d004      	beq.n	800ae2e <USB_ActivateEndpoint+0x2b2>
 800ae24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ae28:	3301      	adds	r3, #1
 800ae2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	029b      	lsls	r3, r3, #10
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	801a      	strh	r2, [r3, #0]
 800ae46:	e020      	b.n	800ae8a <USB_ActivateEndpoint+0x30e>
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	095b      	lsrs	r3, r3, #5
 800ae4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	f003 031f 	and.w	r3, r3, #31
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d104      	bne.n	800ae68 <USB_ActivateEndpoint+0x2ec>
 800ae5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ae62:	3b01      	subs	r3, #1
 800ae64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	029b      	lsls	r3, r3, #10
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ae98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01b      	beq.n	800aeda <USB_ActivateEndpoint+0x35e>
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeb8:	843b      	strh	r3, [r7, #32]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	441a      	add	r2, r3
 800aec4:	8c3b      	ldrh	r3, [r7, #32]
 800aec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aece:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d124      	bne.n	800af2c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef8:	83bb      	strh	r3, [r7, #28]
 800aefa:	8bbb      	ldrh	r3, [r7, #28]
 800aefc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af00:	83bb      	strh	r3, [r7, #28]
 800af02:	8bbb      	ldrh	r3, [r7, #28]
 800af04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af08:	83bb      	strh	r3, [r7, #28]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	441a      	add	r2, r3
 800af14:	8bbb      	ldrh	r3, [r7, #28]
 800af16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af26:	b29b      	uxth	r3, r3
 800af28:	8013      	strh	r3, [r2, #0]
 800af2a:	e306      	b.n	800b53a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af42:	83fb      	strh	r3, [r7, #30]
 800af44:	8bfb      	ldrh	r3, [r7, #30]
 800af46:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af4a:	83fb      	strh	r3, [r7, #30]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	441a      	add	r2, r3
 800af56:	8bfb      	ldrh	r3, [r7, #30]
 800af58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af68:	b29b      	uxth	r3, r3
 800af6a:	8013      	strh	r3, [r2, #0]
 800af6c:	e2e5      	b.n	800b53a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	78db      	ldrb	r3, [r3, #3]
 800af72:	2b02      	cmp	r3, #2
 800af74:	d11e      	bne.n	800afb4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	b29b      	uxth	r3, r3
 800af84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af8c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	441a      	add	r2, r3
 800af9a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800af9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afa6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800afaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afae:	b29b      	uxth	r3, r3
 800afb0:	8013      	strh	r3, [r2, #0]
 800afb2:	e01d      	b.n	800aff0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800afc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afca:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	441a      	add	r2, r3
 800afd8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800afdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afec:	b29b      	uxth	r3, r3
 800afee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800affa:	b29b      	uxth	r3, r3
 800affc:	461a      	mov	r2, r3
 800affe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b000:	4413      	add	r3, r2
 800b002:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	00da      	lsls	r2, r3, #3
 800b00a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b00c:	4413      	add	r3, r2
 800b00e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b012:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	891b      	ldrh	r3, [r3, #8]
 800b018:	085b      	lsrs	r3, r3, #1
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b022:	801a      	strh	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	677b      	str	r3, [r7, #116]	@ 0x74
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b02e:	b29b      	uxth	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b034:	4413      	add	r3, r2
 800b036:	677b      	str	r3, [r7, #116]	@ 0x74
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	00da      	lsls	r2, r3, #3
 800b03e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b040:	4413      	add	r3, r2
 800b042:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b046:	673b      	str	r3, [r7, #112]	@ 0x70
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	895b      	ldrh	r3, [r3, #10]
 800b04c:	085b      	lsrs	r3, r3, #1
 800b04e:	b29b      	uxth	r3, r3
 800b050:	005b      	lsls	r3, r3, #1
 800b052:	b29a      	uxth	r2, r3
 800b054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b056:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f040 81af 	bne.w	800b3c0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800b072:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800b076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d01d      	beq.n	800b0ba <USB_ActivateEndpoint+0x53e>
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b094:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	441a      	add	r2, r3
 800b0a2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800b0a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800b0ca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d01d      	beq.n	800b112 <USB_ActivateEndpoint+0x596>
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0ec:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	441a      	add	r2, r3
 800b0fa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800b0fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b10a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b10e:	b29b      	uxth	r3, r3
 800b110:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d16b      	bne.n	800b1f2 <USB_ActivateEndpoint+0x676>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b124:	b29b      	uxth	r3, r3
 800b126:	461a      	mov	r2, r3
 800b128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b12a:	4413      	add	r3, r2
 800b12c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	00da      	lsls	r2, r3, #3
 800b134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b136:	4413      	add	r3, r2
 800b138:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b13c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b13e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b148:	b29a      	uxth	r2, r3
 800b14a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b14c:	801a      	strh	r2, [r3, #0]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10a      	bne.n	800b16c <USB_ActivateEndpoint+0x5f0>
 800b156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b164:	b29a      	uxth	r2, r3
 800b166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b168:	801a      	strh	r2, [r3, #0]
 800b16a:	e05d      	b.n	800b228 <USB_ActivateEndpoint+0x6ac>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	2b3e      	cmp	r3, #62	@ 0x3e
 800b172:	d81c      	bhi.n	800b1ae <USB_ActivateEndpoint+0x632>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	085b      	lsrs	r3, r3, #1
 800b17a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <USB_ActivateEndpoint+0x618>
 800b18a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b18e:	3301      	adds	r3, #1
 800b190:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	b29a      	uxth	r2, r3
 800b19a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	029b      	lsls	r3, r3, #10
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1aa:	801a      	strh	r2, [r3, #0]
 800b1ac:	e03c      	b.n	800b228 <USB_ActivateEndpoint+0x6ac>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	095b      	lsrs	r3, r3, #5
 800b1b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	f003 031f 	and.w	r3, r3, #31
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d104      	bne.n	800b1ce <USB_ActivateEndpoint+0x652>
 800b1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	029b      	lsls	r3, r3, #10
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1ee:	801a      	strh	r2, [r3, #0]
 800b1f0:	e01a      	b.n	800b228 <USB_ActivateEndpoint+0x6ac>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	785b      	ldrb	r3, [r3, #1]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d116      	bne.n	800b228 <USB_ActivateEndpoint+0x6ac>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b204:	b29b      	uxth	r3, r3
 800b206:	461a      	mov	r2, r3
 800b208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b20a:	4413      	add	r3, r2
 800b20c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	00da      	lsls	r2, r3, #3
 800b214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b216:	4413      	add	r3, r2
 800b218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b21c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	b29a      	uxth	r2, r3
 800b224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b226:	801a      	strh	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	785b      	ldrb	r3, [r3, #1]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d16b      	bne.n	800b30c <USB_ActivateEndpoint+0x790>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b23e:	b29b      	uxth	r3, r3
 800b240:	461a      	mov	r2, r3
 800b242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b244:	4413      	add	r3, r2
 800b246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	00da      	lsls	r2, r3, #3
 800b24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b250:	4413      	add	r3, r2
 800b252:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b256:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b262:	b29a      	uxth	r2, r3
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	801a      	strh	r2, [r3, #0]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10a      	bne.n	800b286 <USB_ActivateEndpoint+0x70a>
 800b270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	b29b      	uxth	r3, r3
 800b276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b27a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b27e:	b29a      	uxth	r2, r3
 800b280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b282:	801a      	strh	r2, [r3, #0]
 800b284:	e05b      	b.n	800b33e <USB_ActivateEndpoint+0x7c2>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b28c:	d81c      	bhi.n	800b2c8 <USB_ActivateEndpoint+0x74c>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	085b      	lsrs	r3, r3, #1
 800b294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	f003 0301 	and.w	r3, r3, #1
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d004      	beq.n	800b2ae <USB_ActivateEndpoint+0x732>
 800b2a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	029b      	lsls	r3, r3, #10
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c4:	801a      	strh	r2, [r3, #0]
 800b2c6:	e03a      	b.n	800b33e <USB_ActivateEndpoint+0x7c2>
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	f003 031f 	and.w	r3, r3, #31
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d104      	bne.n	800b2e8 <USB_ActivateEndpoint+0x76c>
 800b2de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	029b      	lsls	r3, r3, #10
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b304:	b29a      	uxth	r2, r3
 800b306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b308:	801a      	strh	r2, [r3, #0]
 800b30a:	e018      	b.n	800b33e <USB_ActivateEndpoint+0x7c2>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d114      	bne.n	800b33e <USB_ActivateEndpoint+0x7c2>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	461a      	mov	r2, r3
 800b31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b320:	4413      	add	r3, r2
 800b322:	647b      	str	r3, [r7, #68]	@ 0x44
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	00da      	lsls	r2, r3, #3
 800b32a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b32c:	4413      	add	r3, r2
 800b32e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b332:	643b      	str	r3, [r7, #64]	@ 0x40
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	b29a      	uxth	r2, r3
 800b33a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b33c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b354:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b356:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b358:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b35c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b35e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b360:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b364:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	441a      	add	r2, r3
 800b370:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b37a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b382:	b29b      	uxth	r3, r3
 800b384:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	b29b      	uxth	r3, r3
 800b394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b39c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	441a      	add	r2, r3
 800b3a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b3aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	8013      	strh	r3, [r2, #0]
 800b3be:	e0bc      	b.n	800b53a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800b3d0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b3d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01d      	beq.n	800b418 <USB_ActivateEndpoint+0x89c>
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3f2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	441a      	add	r2, r3
 800b400:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b40c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b414:	b29b      	uxth	r3, r3
 800b416:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800b428:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800b42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d01d      	beq.n	800b470 <USB_ActivateEndpoint+0x8f4>
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	b29b      	uxth	r3, r3
 800b442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b44a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	441a      	add	r2, r3
 800b458:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800b45c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b468:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	78db      	ldrb	r3, [r3, #3]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d024      	beq.n	800b4c2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	b29b      	uxth	r3, r3
 800b486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b48a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b48e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b492:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b496:	f083 0320 	eor.w	r3, r3, #32
 800b49a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	441a      	add	r2, r3
 800b4a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b4ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	8013      	strh	r3, [r2, #0]
 800b4c0:	e01d      	b.n	800b4fe <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4d8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	441a      	add	r2, r3
 800b4e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b4ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b514:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	441a      	add	r2, r3
 800b522:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b52a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b52e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b536:	b29b      	uxth	r3, r3
 800b538:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b53a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800b53e:	4618      	mov	r0, r3
 800b540:	379c      	adds	r7, #156	@ 0x9c
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop

0800b54c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b08d      	sub	sp, #52	@ 0x34
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	7b1b      	ldrb	r3, [r3, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 808e 	bne.w	800b67c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d044      	beq.n	800b5f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	81bb      	strh	r3, [r7, #12]
 800b576:	89bb      	ldrh	r3, [r7, #12]
 800b578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01b      	beq.n	800b5b8 <USB_DeactivateEndpoint+0x6c>
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b596:	817b      	strh	r3, [r7, #10]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	441a      	add	r2, r3
 800b5a2:	897b      	ldrh	r3, [r7, #10]
 800b5a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5ce:	813b      	strh	r3, [r7, #8]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	441a      	add	r2, r3
 800b5da:	893b      	ldrh	r3, [r7, #8]
 800b5dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	8013      	strh	r3, [r2, #0]
 800b5f0:	e192      	b.n	800b918 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	827b      	strh	r3, [r7, #18]
 800b600:	8a7b      	ldrh	r3, [r7, #18]
 800b602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01b      	beq.n	800b642 <USB_DeactivateEndpoint+0xf6>
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	b29b      	uxth	r3, r3
 800b618:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b61c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b620:	823b      	strh	r3, [r7, #16]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	441a      	add	r2, r3
 800b62c:	8a3b      	ldrh	r3, [r7, #16]
 800b62e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b63e:	b29b      	uxth	r3, r3
 800b640:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b658:	81fb      	strh	r3, [r7, #14]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	441a      	add	r2, r3
 800b664:	89fb      	ldrh	r3, [r7, #14]
 800b666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b66a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b66e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b676:	b29b      	uxth	r3, r3
 800b678:	8013      	strh	r3, [r2, #0]
 800b67a:	e14d      	b.n	800b918 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f040 80a5 	bne.w	800b7d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	843b      	strh	r3, [r7, #32]
 800b694:	8c3b      	ldrh	r3, [r7, #32]
 800b696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d01b      	beq.n	800b6d6 <USB_DeactivateEndpoint+0x18a>
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b4:	83fb      	strh	r3, [r7, #30]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	441a      	add	r2, r3
 800b6c0:	8bfb      	ldrh	r3, [r7, #30]
 800b6c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b6ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	83bb      	strh	r3, [r7, #28]
 800b6e4:	8bbb      	ldrh	r3, [r7, #28]
 800b6e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d01b      	beq.n	800b726 <USB_DeactivateEndpoint+0x1da>
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b704:	837b      	strh	r3, [r7, #26]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	441a      	add	r2, r3
 800b710:	8b7b      	ldrh	r3, [r7, #26]
 800b712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b71a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b71e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b722:	b29b      	uxth	r3, r3
 800b724:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	881b      	ldrh	r3, [r3, #0]
 800b732:	b29b      	uxth	r3, r3
 800b734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b73c:	833b      	strh	r3, [r7, #24]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	441a      	add	r2, r3
 800b748:	8b3b      	ldrh	r3, [r7, #24]
 800b74a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b74e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b756:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	881b      	ldrh	r3, [r3, #0]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b774:	82fb      	strh	r3, [r7, #22]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	441a      	add	r2, r3
 800b780:	8afb      	ldrh	r3, [r7, #22]
 800b782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b78a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b792:	b29b      	uxth	r3, r3
 800b794:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	881b      	ldrh	r3, [r3, #0]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7ac:	82bb      	strh	r3, [r7, #20]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	441a      	add	r2, r3
 800b7b8:	8abb      	ldrh	r3, [r7, #20]
 800b7ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	8013      	strh	r3, [r2, #0]
 800b7ce:	e0a3      	b.n	800b918 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b7de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b7e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d01b      	beq.n	800b820 <USB_DeactivateEndpoint+0x2d4>
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	441a      	add	r2, r3
 800b80a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b80c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b82e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b834:	2b00      	cmp	r3, #0
 800b836:	d01b      	beq.n	800b870 <USB_DeactivateEndpoint+0x324>
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	b29b      	uxth	r3, r3
 800b846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b84a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b84e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	441a      	add	r2, r3
 800b85a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b85c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b868:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b886:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	441a      	add	r2, r3
 800b892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b89c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	441a      	add	r2, r3
 800b8ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	441a      	add	r2, r3
 800b902:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b90c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b914:	b29b      	uxth	r3, r3
 800b916:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3734      	adds	r7, #52	@ 0x34
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b0ac      	sub	sp, #176	@ 0xb0
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	785b      	ldrb	r3, [r3, #1]
 800b934:	2b01      	cmp	r3, #1
 800b936:	f040 84ca 	bne.w	800c2ce <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	699a      	ldr	r2, [r3, #24]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	429a      	cmp	r2, r3
 800b944:	d904      	bls.n	800b950 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b94e:	e003      	b.n	800b958 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	7b1b      	ldrb	r3, [r3, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d122      	bne.n	800b9a6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	6959      	ldr	r1, [r3, #20]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	88da      	ldrh	r2, [r3, #6]
 800b968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 febd 	bl	800c6ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	613b      	str	r3, [r7, #16]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b97e:	b29b      	uxth	r3, r3
 800b980:	461a      	mov	r2, r3
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	4413      	add	r3, r2
 800b986:	613b      	str	r3, [r7, #16]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	00da      	lsls	r2, r3, #3
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	4413      	add	r3, r2
 800b992:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b996:	60fb      	str	r3, [r7, #12]
 800b998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	801a      	strh	r2, [r3, #0]
 800b9a2:	f000 bc6f 	b.w	800c284 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	78db      	ldrb	r3, [r3, #3]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	f040 831e 	bne.w	800bfec <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	6a1a      	ldr	r2, [r3, #32]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	f240 82cf 	bls.w	800bf5c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	441a      	add	r2, r3
 800b9e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b9e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	6a1a      	ldr	r2, [r3, #32]
 800b9fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba02:	1ad2      	subs	r2, r2, r3
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 814f 	beq.w	800bcbe <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	785b      	ldrb	r3, [r3, #1]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d16b      	bne.n	800bb04 <USB_EPStartXfer+0x1de>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	461a      	mov	r2, r3
 800ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3c:	4413      	add	r3, r2
 800ba3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	00da      	lsls	r2, r3, #3
 800ba46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba48:	4413      	add	r3, r2
 800ba4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	801a      	strh	r2, [r3, #0]
 800ba60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10a      	bne.n	800ba7e <USB_EPStartXfer+0x158>
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7a:	801a      	strh	r2, [r3, #0]
 800ba7c:	e05b      	b.n	800bb36 <USB_EPStartXfer+0x210>
 800ba7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba82:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba84:	d81c      	bhi.n	800bac0 <USB_EPStartXfer+0x19a>
 800ba86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba8a:	085b      	lsrs	r3, r3, #1
 800ba8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d004      	beq.n	800baa6 <USB_EPStartXfer+0x180>
 800ba9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800baa0:	3301      	adds	r3, #1
 800baa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800baa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	b29a      	uxth	r2, r3
 800baac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	029b      	lsls	r3, r3, #10
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	4313      	orrs	r3, r2
 800bab8:	b29a      	uxth	r2, r3
 800baba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800babc:	801a      	strh	r2, [r3, #0]
 800babe:	e03a      	b.n	800bb36 <USB_EPStartXfer+0x210>
 800bac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bac4:	095b      	lsrs	r3, r3, #5
 800bac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800baca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bace:	f003 031f 	and.w	r3, r3, #31
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d104      	bne.n	800bae0 <USB_EPStartXfer+0x1ba>
 800bad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bada:	3b01      	subs	r3, #1
 800badc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800baea:	b29b      	uxth	r3, r3
 800baec:	029b      	lsls	r3, r3, #10
 800baee:	b29b      	uxth	r3, r3
 800baf0:	4313      	orrs	r3, r2
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb00:	801a      	strh	r2, [r3, #0]
 800bb02:	e018      	b.n	800bb36 <USB_EPStartXfer+0x210>
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	785b      	ldrb	r3, [r3, #1]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d114      	bne.n	800bb36 <USB_EPStartXfer+0x210>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	461a      	mov	r2, r3
 800bb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb18:	4413      	add	r3, r2
 800bb1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	00da      	lsls	r2, r3, #3
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	4413      	add	r3, r2
 800bb26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	895b      	ldrh	r3, [r3, #10]
 800bb3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	6959      	ldr	r1, [r3, #20]
 800bb42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fdce 	bl	800c6ee <USB_WritePMA>
            ep->xfer_buff += len;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	695a      	ldr	r2, [r3, #20]
 800bb56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb5a:	441a      	add	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	6a1a      	ldr	r2, [r3, #32]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d907      	bls.n	800bb7c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	6a1a      	ldr	r2, [r3, #32]
 800bb70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb74:	1ad2      	subs	r2, r2, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	621a      	str	r2, [r3, #32]
 800bb7a:	e006      	b.n	800bb8a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2200      	movs	r2, #0
 800bb88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d16b      	bne.n	800bc6a <USB_EPStartXfer+0x344>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	61bb      	str	r3, [r7, #24]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	461a      	mov	r2, r3
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	4413      	add	r3, r2
 800bba4:	61bb      	str	r3, [r7, #24]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	00da      	lsls	r2, r3, #3
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bbb4:	617b      	str	r3, [r7, #20]
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	881b      	ldrh	r3, [r3, #0]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	801a      	strh	r2, [r3, #0]
 800bbc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10a      	bne.n	800bbe4 <USB_EPStartXfer+0x2be>
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	881b      	ldrh	r3, [r3, #0]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	801a      	strh	r2, [r3, #0]
 800bbe2:	e05d      	b.n	800bca0 <USB_EPStartXfer+0x37a>
 800bbe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbe8:	2b3e      	cmp	r3, #62	@ 0x3e
 800bbea:	d81c      	bhi.n	800bc26 <USB_EPStartXfer+0x300>
 800bbec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbf0:	085b      	lsrs	r3, r3, #1
 800bbf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bbf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d004      	beq.n	800bc0c <USB_EPStartXfer+0x2e6>
 800bc02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc06:	3301      	adds	r3, #1
 800bc08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	029b      	lsls	r3, r3, #10
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	801a      	strh	r2, [r3, #0]
 800bc24:	e03c      	b.n	800bca0 <USB_EPStartXfer+0x37a>
 800bc26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc2a:	095b      	lsrs	r3, r3, #5
 800bc2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc34:	f003 031f 	and.w	r3, r3, #31
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d104      	bne.n	800bc46 <USB_EPStartXfer+0x320>
 800bc3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc40:	3b01      	subs	r3, #1
 800bc42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	029b      	lsls	r3, r3, #10
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	4313      	orrs	r3, r2
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	801a      	strh	r2, [r3, #0]
 800bc68:	e01a      	b.n	800bca0 <USB_EPStartXfer+0x37a>
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	785b      	ldrb	r3, [r3, #1]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d116      	bne.n	800bca0 <USB_EPStartXfer+0x37a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	623b      	str	r3, [r7, #32]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	4413      	add	r3, r2
 800bc84:	623b      	str	r3, [r7, #32]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	00da      	lsls	r2, r3, #3
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc94:	61fb      	str	r3, [r7, #28]
 800bc96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	891b      	ldrh	r3, [r3, #8]
 800bca4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	6959      	ldr	r1, [r3, #20]
 800bcac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fd19 	bl	800c6ee <USB_WritePMA>
 800bcbc:	e2e2      	b.n	800c284 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	785b      	ldrb	r3, [r3, #1]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d16b      	bne.n	800bd9e <USB_EPStartXfer+0x478>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcd6:	4413      	add	r3, r2
 800bcd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	00da      	lsls	r2, r3, #3
 800bce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bce2:	4413      	add	r3, r2
 800bce4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bce8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcf8:	801a      	strh	r2, [r3, #0]
 800bcfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10a      	bne.n	800bd18 <USB_EPStartXfer+0x3f2>
 800bd02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd14:	801a      	strh	r2, [r3, #0]
 800bd16:	e05d      	b.n	800bdd4 <USB_EPStartXfer+0x4ae>
 800bd18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd1c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd1e:	d81c      	bhi.n	800bd5a <USB_EPStartXfer+0x434>
 800bd20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd24:	085b      	lsrs	r3, r3, #1
 800bd26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bd2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <USB_EPStartXfer+0x41a>
 800bd36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bd40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	029b      	lsls	r3, r3, #10
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	4313      	orrs	r3, r2
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd56:	801a      	strh	r2, [r3, #0]
 800bd58:	e03c      	b.n	800bdd4 <USB_EPStartXfer+0x4ae>
 800bd5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bd64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd68:	f003 031f 	and.w	r3, r3, #31
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d104      	bne.n	800bd7a <USB_EPStartXfer+0x454>
 800bd70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd74:	3b01      	subs	r3, #1
 800bd76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bd7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	029b      	lsls	r3, r3, #10
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd9a:	801a      	strh	r2, [r3, #0]
 800bd9c:	e01a      	b.n	800bdd4 <USB_EPStartXfer+0x4ae>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	785b      	ldrb	r3, [r3, #1]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d116      	bne.n	800bdd4 <USB_EPStartXfer+0x4ae>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdb6:	4413      	add	r3, r2
 800bdb8:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	00da      	lsls	r2, r3, #3
 800bdc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	891b      	ldrh	r3, [r3, #8]
 800bdd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	6959      	ldr	r1, [r3, #20]
 800bde0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fc7f 	bl	800c6ee <USB_WritePMA>
            ep->xfer_buff += len;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	695a      	ldr	r2, [r3, #20]
 800bdf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdf8:	441a      	add	r2, r3
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	6a1a      	ldr	r2, [r3, #32]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	429a      	cmp	r2, r3
 800be08:	d907      	bls.n	800be1a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	6a1a      	ldr	r2, [r3, #32]
 800be0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	621a      	str	r2, [r3, #32]
 800be18:	e006      	b.n	800be28 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2200      	movs	r2, #0
 800be26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	785b      	ldrb	r3, [r3, #1]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d16b      	bne.n	800bf0c <USB_EPStartXfer+0x5e6>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be3e:	b29b      	uxth	r3, r3
 800be40:	461a      	mov	r2, r3
 800be42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be44:	4413      	add	r3, r2
 800be46:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	00da      	lsls	r2, r3, #3
 800be4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be50:	4413      	add	r3, r2
 800be52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be56:	637b      	str	r3, [r7, #52]	@ 0x34
 800be58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be62:	b29a      	uxth	r2, r3
 800be64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be66:	801a      	strh	r2, [r3, #0]
 800be68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10a      	bne.n	800be86 <USB_EPStartXfer+0x560>
 800be70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	b29b      	uxth	r3, r3
 800be76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be7e:	b29a      	uxth	r2, r3
 800be80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be82:	801a      	strh	r2, [r3, #0]
 800be84:	e05b      	b.n	800bf3e <USB_EPStartXfer+0x618>
 800be86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be8a:	2b3e      	cmp	r3, #62	@ 0x3e
 800be8c:	d81c      	bhi.n	800bec8 <USB_EPStartXfer+0x5a2>
 800be8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d004      	beq.n	800beae <USB_EPStartXfer+0x588>
 800bea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bea8:	3301      	adds	r3, #1
 800beaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800beae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800beb8:	b29b      	uxth	r3, r3
 800beba:	029b      	lsls	r3, r3, #10
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	4313      	orrs	r3, r2
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec4:	801a      	strh	r2, [r3, #0]
 800bec6:	e03a      	b.n	800bf3e <USB_EPStartXfer+0x618>
 800bec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800becc:	095b      	lsrs	r3, r3, #5
 800bece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bed6:	f003 031f 	and.w	r3, r3, #31
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d104      	bne.n	800bee8 <USB_EPStartXfer+0x5c2>
 800bede:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bee2:	3b01      	subs	r3, #1
 800bee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	b29a      	uxth	r2, r3
 800beee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	029b      	lsls	r3, r3, #10
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	4313      	orrs	r3, r2
 800befa:	b29b      	uxth	r3, r3
 800befc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf08:	801a      	strh	r2, [r3, #0]
 800bf0a:	e018      	b.n	800bf3e <USB_EPStartXfer+0x618>
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	785b      	ldrb	r3, [r3, #1]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d114      	bne.n	800bf3e <USB_EPStartXfer+0x618>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf20:	4413      	add	r3, r2
 800bf22:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	00da      	lsls	r2, r3, #3
 800bf2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	895b      	ldrh	r3, [r3, #10]
 800bf42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	6959      	ldr	r1, [r3, #20]
 800bf4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fbca 	bl	800c6ee <USB_WritePMA>
 800bf5a:	e193      	b.n	800c284 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	6a1b      	ldr	r3, [r3, #32]
 800bf60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bf76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf7a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	441a      	add	r2, r3
 800bf88:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bf8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	461a      	mov	r2, r3
 800bfae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfb0:	4413      	add	r3, r2
 800bfb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	00da      	lsls	r2, r3, #3
 800bfba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bfc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	891b      	ldrh	r3, [r3, #8]
 800bfd2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	6959      	ldr	r1, [r3, #20]
 800bfda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fb82 	bl	800c6ee <USB_WritePMA>
 800bfea:	e14b      	b.n	800c284 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	6a1a      	ldr	r2, [r3, #32]
 800bff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bff4:	1ad2      	subs	r2, r2, r3
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	b29b      	uxth	r3, r3
 800c008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 809a 	beq.w	800c146 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	673b      	str	r3, [r7, #112]	@ 0x70
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d16b      	bne.n	800c0f6 <USB_EPStartXfer+0x7d0>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c028:	b29b      	uxth	r3, r3
 800c02a:	461a      	mov	r2, r3
 800c02c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c02e:	4413      	add	r3, r2
 800c030:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	00da      	lsls	r2, r3, #3
 800c038:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c03a:	4413      	add	r3, r2
 800c03c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c040:	667b      	str	r3, [r7, #100]	@ 0x64
 800c042:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	b29b      	uxth	r3, r3
 800c048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c050:	801a      	strh	r2, [r3, #0]
 800c052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <USB_EPStartXfer+0x74a>
 800c05a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	b29b      	uxth	r3, r3
 800c060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c068:	b29a      	uxth	r2, r3
 800c06a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c06c:	801a      	strh	r2, [r3, #0]
 800c06e:	e05b      	b.n	800c128 <USB_EPStartXfer+0x802>
 800c070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c074:	2b3e      	cmp	r3, #62	@ 0x3e
 800c076:	d81c      	bhi.n	800c0b2 <USB_EPStartXfer+0x78c>
 800c078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c07c:	085b      	lsrs	r3, r3, #1
 800c07e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c086:	f003 0301 	and.w	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d004      	beq.n	800c098 <USB_EPStartXfer+0x772>
 800c08e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c092:	3301      	adds	r3, #1
 800c094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	029b      	lsls	r3, r3, #10
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0ae:	801a      	strh	r2, [r3, #0]
 800c0b0:	e03a      	b.n	800c128 <USB_EPStartXfer+0x802>
 800c0b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0b6:	095b      	lsrs	r3, r3, #5
 800c0b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0c0:	f003 031f 	and.w	r3, r3, #31
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <USB_EPStartXfer+0x7ac>
 800c0c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c0d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	029b      	lsls	r3, r3, #10
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0f2:	801a      	strh	r2, [r3, #0]
 800c0f4:	e018      	b.n	800c128 <USB_EPStartXfer+0x802>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	785b      	ldrb	r3, [r3, #1]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d114      	bne.n	800c128 <USB_EPStartXfer+0x802>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c104:	b29b      	uxth	r3, r3
 800c106:	461a      	mov	r2, r3
 800c108:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c10a:	4413      	add	r3, r2
 800c10c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	00da      	lsls	r2, r3, #3
 800c114:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c116:	4413      	add	r3, r2
 800c118:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c11c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c122:	b29a      	uxth	r2, r3
 800c124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c126:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	895b      	ldrh	r3, [r3, #10]
 800c12c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	6959      	ldr	r1, [r3, #20]
 800c134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c138:	b29b      	uxth	r3, r3
 800c13a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 fad5 	bl	800c6ee <USB_WritePMA>
 800c144:	e09e      	b.n	800c284 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	785b      	ldrb	r3, [r3, #1]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d16b      	bne.n	800c226 <USB_EPStartXfer+0x900>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c158:	b29b      	uxth	r3, r3
 800c15a:	461a      	mov	r2, r3
 800c15c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c15e:	4413      	add	r3, r2
 800c160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	00da      	lsls	r2, r3, #3
 800c168:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c16a:	4413      	add	r3, r2
 800c16c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c170:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c172:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	b29b      	uxth	r3, r3
 800c178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c180:	801a      	strh	r2, [r3, #0]
 800c182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10a      	bne.n	800c1a0 <USB_EPStartXfer+0x87a>
 800c18a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c198:	b29a      	uxth	r2, r3
 800c19a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c19c:	801a      	strh	r2, [r3, #0]
 800c19e:	e063      	b.n	800c268 <USB_EPStartXfer+0x942>
 800c1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1a6:	d81c      	bhi.n	800c1e2 <USB_EPStartXfer+0x8bc>
 800c1a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1ac:	085b      	lsrs	r3, r3, #1
 800c1ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c1b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d004      	beq.n	800c1c8 <USB_EPStartXfer+0x8a2>
 800c1be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c1c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1ca:	881b      	ldrh	r3, [r3, #0]
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	029b      	lsls	r3, r3, #10
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1de:	801a      	strh	r2, [r3, #0]
 800c1e0:	e042      	b.n	800c268 <USB_EPStartXfer+0x942>
 800c1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1e6:	095b      	lsrs	r3, r3, #5
 800c1e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c1ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1f0:	f003 031f 	and.w	r3, r3, #31
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d104      	bne.n	800c202 <USB_EPStartXfer+0x8dc>
 800c1f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	b29a      	uxth	r2, r3
 800c208:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	029b      	lsls	r3, r3, #10
 800c210:	b29b      	uxth	r3, r3
 800c212:	4313      	orrs	r3, r2
 800c214:	b29b      	uxth	r3, r3
 800c216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c21a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c21e:	b29a      	uxth	r2, r3
 800c220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c222:	801a      	strh	r2, [r3, #0]
 800c224:	e020      	b.n	800c268 <USB_EPStartXfer+0x942>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	785b      	ldrb	r3, [r3, #1]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d11c      	bne.n	800c268 <USB_EPStartXfer+0x942>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	461a      	mov	r2, r3
 800c23e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c242:	4413      	add	r3, r2
 800c244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	00da      	lsls	r2, r3, #3
 800c24e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c252:	4413      	add	r3, r2
 800c254:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c258:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c260:	b29a      	uxth	r2, r3
 800c262:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c266:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	891b      	ldrh	r3, [r3, #8]
 800c26c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	6959      	ldr	r1, [r3, #20]
 800c274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c278:	b29b      	uxth	r3, r3
 800c27a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fa35 	bl	800c6ee <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	b29b      	uxth	r3, r3
 800c292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c29a:	817b      	strh	r3, [r7, #10]
 800c29c:	897b      	ldrh	r3, [r7, #10]
 800c29e:	f083 0310 	eor.w	r3, r3, #16
 800c2a2:	817b      	strh	r3, [r7, #10]
 800c2a4:	897b      	ldrh	r3, [r7, #10]
 800c2a6:	f083 0320 	eor.w	r3, r3, #32
 800c2aa:	817b      	strh	r3, [r7, #10]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	441a      	add	r2, r3
 800c2b6:	897b      	ldrh	r3, [r7, #10]
 800c2b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	8013      	strh	r3, [r2, #0]
 800c2cc:	e0d5      	b.n	800c47a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	7b1b      	ldrb	r3, [r3, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d156      	bne.n	800c384 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d122      	bne.n	800c324 <USB_EPStartXfer+0x9fe>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	78db      	ldrb	r3, [r3, #3]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d11e      	bne.n	800c324 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4413      	add	r3, r2
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2fc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	441a      	add	r2, r3
 800c30a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c30e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c316:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31e:	b29b      	uxth	r3, r3
 800c320:	8013      	strh	r3, [r2, #0]
 800c322:	e01d      	b.n	800c360 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	b29b      	uxth	r3, r3
 800c332:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c33a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	441a      	add	r2, r3
 800c348:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800c34c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	699a      	ldr	r2, [r3, #24]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d907      	bls.n	800c37c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	699a      	ldr	r2, [r3, #24]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	1ad2      	subs	r2, r2, r3
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	619a      	str	r2, [r3, #24]
 800c37a:	e054      	b.n	800c426 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2200      	movs	r2, #0
 800c380:	619a      	str	r2, [r3, #24]
 800c382:	e050      	b.n	800c426 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	78db      	ldrb	r3, [r3, #3]
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d142      	bne.n	800c412 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	69db      	ldr	r3, [r3, #28]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d048      	beq.n	800c426 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c3a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c3a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d005      	beq.n	800c3bc <USB_EPStartXfer+0xa96>
 800c3b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10b      	bne.n	800c3d4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c3bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c3c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d12e      	bne.n	800c426 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c3c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c3cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d128      	bne.n	800c426 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ea:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	441a      	add	r2, r3
 800c3f8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800c3fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c408:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	8013      	strh	r3, [r2, #0]
 800c410:	e009      	b.n	800c426 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	78db      	ldrb	r3, [r3, #3]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d103      	bne.n	800c422 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2200      	movs	r2, #0
 800c41e:	619a      	str	r2, [r3, #24]
 800c420:	e001      	b.n	800c426 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	e02a      	b.n	800c47c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	b29b      	uxth	r3, r3
 800c434:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c43c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c440:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c444:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c448:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c44c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c450:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c454:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	441a      	add	r2, r3
 800c462:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c46a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c46e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c476:	b29b      	uxth	r3, r3
 800c478:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	37b0      	adds	r7, #176	@ 0xb0
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	785b      	ldrb	r3, [r3, #1]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d020      	beq.n	800c4d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4ac:	81bb      	strh	r3, [r7, #12]
 800c4ae:	89bb      	ldrh	r3, [r7, #12]
 800c4b0:	f083 0310 	eor.w	r3, r3, #16
 800c4b4:	81bb      	strh	r3, [r7, #12]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	441a      	add	r2, r3
 800c4c0:	89bb      	ldrh	r3, [r7, #12]
 800c4c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	8013      	strh	r3, [r2, #0]
 800c4d6:	e01f      	b.n	800c518 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4ee:	81fb      	strh	r3, [r7, #14]
 800c4f0:	89fb      	ldrh	r3, [r7, #14]
 800c4f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4f6:	81fb      	strh	r3, [r7, #14]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	441a      	add	r2, r3
 800c502:	89fb      	ldrh	r3, [r7, #14]
 800c504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c50c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c514:	b29b      	uxth	r3, r3
 800c516:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c526:	b480      	push	{r7}
 800c528:	b087      	sub	sp, #28
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	785b      	ldrb	r3, [r3, #1]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d04c      	beq.n	800c5d2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	823b      	strh	r3, [r7, #16]
 800c546:	8a3b      	ldrh	r3, [r7, #16]
 800c548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d01b      	beq.n	800c588 <USB_EPClearStall+0x62>
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c566:	81fb      	strh	r3, [r7, #14]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	441a      	add	r2, r3
 800c572:	89fb      	ldrh	r3, [r7, #14]
 800c574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c57c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c580:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c584:	b29b      	uxth	r3, r3
 800c586:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	78db      	ldrb	r3, [r3, #3]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d06c      	beq.n	800c66a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	881b      	ldrh	r3, [r3, #0]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5a6:	81bb      	strh	r3, [r7, #12]
 800c5a8:	89bb      	ldrh	r3, [r7, #12]
 800c5aa:	f083 0320 	eor.w	r3, r3, #32
 800c5ae:	81bb      	strh	r3, [r7, #12]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	441a      	add	r2, r3
 800c5ba:	89bb      	ldrh	r3, [r7, #12]
 800c5bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	8013      	strh	r3, [r2, #0]
 800c5d0:	e04b      	b.n	800c66a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	82fb      	strh	r3, [r7, #22]
 800c5e0:	8afb      	ldrh	r3, [r7, #22]
 800c5e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d01b      	beq.n	800c622 <USB_EPClearStall+0xfc>
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c600:	82bb      	strh	r3, [r7, #20]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	441a      	add	r2, r3
 800c60c:	8abb      	ldrh	r3, [r7, #20]
 800c60e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c61e:	b29b      	uxth	r3, r3
 800c620:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	b29b      	uxth	r3, r3
 800c630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c638:	827b      	strh	r3, [r7, #18]
 800c63a:	8a7b      	ldrh	r3, [r7, #18]
 800c63c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c640:	827b      	strh	r3, [r7, #18]
 800c642:	8a7b      	ldrh	r3, [r7, #18]
 800c644:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c648:	827b      	strh	r3, [r7, #18]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	441a      	add	r2, r3
 800c654:	8a7b      	ldrh	r3, [r7, #18]
 800c656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c65a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c65e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c666:	b29b      	uxth	r3, r3
 800c668:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	371c      	adds	r7, #28
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c684:	78fb      	ldrb	r3, [r7, #3]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d103      	bne.n	800c692 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2280      	movs	r2, #128	@ 0x80
 800c68e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3714      	adds	r7, #20
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	b08b      	sub	sp, #44	@ 0x2c
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	60f8      	str	r0, [r7, #12]
 800c6f6:	60b9      	str	r1, [r7, #8]
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	80fb      	strh	r3, [r7, #6]
 800c700:	4613      	mov	r3, r2
 800c702:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c704:	88bb      	ldrh	r3, [r7, #4]
 800c706:	3301      	adds	r3, #1
 800c708:	085b      	lsrs	r3, r3, #1
 800c70a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c714:	88fa      	ldrh	r2, [r7, #6]
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	4413      	add	r3, r2
 800c71a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c71e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	627b      	str	r3, [r7, #36]	@ 0x24
 800c724:	e01b      	b.n	800c75e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	3301      	adds	r3, #1
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	021b      	lsls	r3, r3, #8
 800c734:	b21a      	sxth	r2, r3
 800c736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	b21b      	sxth	r3, r3
 800c73e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	8a7a      	ldrh	r2, [r7, #18]
 800c744:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	3302      	adds	r3, #2
 800c74a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	3301      	adds	r3, #1
 800c750:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	3301      	adds	r3, #1
 800c756:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	3b01      	subs	r3, #1
 800c75c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e0      	bne.n	800c726 <USB_WritePMA+0x38>
  }
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	372c      	adds	r7, #44	@ 0x2c
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c772:	b480      	push	{r7}
 800c774:	b08b      	sub	sp, #44	@ 0x2c
 800c776:	af00      	add	r7, sp, #0
 800c778:	60f8      	str	r0, [r7, #12]
 800c77a:	60b9      	str	r1, [r7, #8]
 800c77c:	4611      	mov	r1, r2
 800c77e:	461a      	mov	r2, r3
 800c780:	460b      	mov	r3, r1
 800c782:	80fb      	strh	r3, [r7, #6]
 800c784:	4613      	mov	r3, r2
 800c786:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c788:	88bb      	ldrh	r3, [r7, #4]
 800c78a:	085b      	lsrs	r3, r3, #1
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c798:	88fa      	ldrh	r2, [r7, #6]
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c7a2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7a8:	e018      	b.n	800c7dc <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	3302      	adds	r3, #2
 800c7b6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	0a1b      	lsrs	r3, r3, #8
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1e3      	bne.n	800c7aa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c7e2:	88bb      	ldrh	r3, [r7, #4]
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d007      	beq.n	800c7fe <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	701a      	strb	r2, [r3, #0]
  }
}
 800c7fe:	bf00      	nop
 800c800:	372c      	adds	r7, #44	@ 0x2c
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	460b      	mov	r3, r1
 800c814:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c816:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c81a:	f005 fed5 	bl	80125c8 <USBD_static_malloc>
 800c81e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d105      	bne.n	800c832 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c82e:	2302      	movs	r3, #2
 800c830:	e066      	b.n	800c900 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	7c1b      	ldrb	r3, [r3, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d119      	bne.n	800c876 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c842:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c846:	2202      	movs	r2, #2
 800c848:	2181      	movs	r1, #129	@ 0x81
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f005 fd63 	bl	8012316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c85a:	2202      	movs	r2, #2
 800c85c:	2101      	movs	r1, #1
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f005 fd59 	bl	8012316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2210      	movs	r2, #16
 800c870:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800c874:	e016      	b.n	800c8a4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c876:	2340      	movs	r3, #64	@ 0x40
 800c878:	2202      	movs	r2, #2
 800c87a:	2181      	movs	r1, #129	@ 0x81
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f005 fd4a 	bl	8012316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c888:	2340      	movs	r3, #64	@ 0x40
 800c88a:	2202      	movs	r2, #2
 800c88c:	2101      	movs	r1, #1
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f005 fd41 	bl	8012316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2210      	movs	r2, #16
 800c8a0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c8a4:	2308      	movs	r3, #8
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	2182      	movs	r1, #130	@ 0x82
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f005 fd33 	bl	8012316 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	7c1b      	ldrb	r3, [r3, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d109      	bne.n	800c8ee <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f005 fe04 	bl	80124f4 <USBD_LL_PrepareReceive>
 800c8ec:	e007      	b.n	800c8fe <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8f4:	2340      	movs	r3, #64	@ 0x40
 800c8f6:	2101      	movs	r1, #1
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f005 fdfb 	bl	80124f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c914:	2181      	movs	r1, #129	@ 0x81
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f005 fd23 	bl	8012362 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c922:	2101      	movs	r1, #1
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f005 fd1c 	bl	8012362 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c932:	2182      	movs	r1, #130	@ 0x82
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f005 fd14 	bl	8012362 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00e      	beq.n	800c972 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c964:	4618      	mov	r0, r3
 800c966:	f005 fe3d 	bl	80125e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c98c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c992:	2300      	movs	r3, #0
 800c994:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e0af      	b.n	800cb04 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d03f      	beq.n	800ca30 <USBD_CDC_Setup+0xb4>
 800c9b0:	2b20      	cmp	r3, #32
 800c9b2:	f040 809f 	bne.w	800caf4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	88db      	ldrh	r3, [r3, #6]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d02e      	beq.n	800ca1c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	b25b      	sxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	da16      	bge.n	800c9f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	683a      	ldr	r2, [r7, #0]
 800c9d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c9d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	88d2      	ldrh	r2, [r2, #6]
 800c9da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	88db      	ldrh	r3, [r3, #6]
 800c9e0:	2b07      	cmp	r3, #7
 800c9e2:	bf28      	it	cs
 800c9e4:	2307      	movcs	r3, #7
 800c9e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	89fa      	ldrh	r2, [r7, #14]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f001 facd 	bl	800df8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c9f4:	e085      	b.n	800cb02 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	785a      	ldrb	r2, [r3, #1]
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	88db      	ldrh	r3, [r3, #6]
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ca0c:	6939      	ldr	r1, [r7, #16]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	88db      	ldrh	r3, [r3, #6]
 800ca12:	461a      	mov	r2, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f001 fae6 	bl	800dfe6 <USBD_CtlPrepareRx>
      break;
 800ca1a:	e072      	b.n	800cb02 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	7850      	ldrb	r0, [r2, #1]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	4798      	blx	r3
      break;
 800ca2e:	e068      	b.n	800cb02 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	785b      	ldrb	r3, [r3, #1]
 800ca34:	2b0b      	cmp	r3, #11
 800ca36:	d852      	bhi.n	800cade <USBD_CDC_Setup+0x162>
 800ca38:	a201      	add	r2, pc, #4	@ (adr r2, 800ca40 <USBD_CDC_Setup+0xc4>)
 800ca3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3e:	bf00      	nop
 800ca40:	0800ca71 	.word	0x0800ca71
 800ca44:	0800caed 	.word	0x0800caed
 800ca48:	0800cadf 	.word	0x0800cadf
 800ca4c:	0800cadf 	.word	0x0800cadf
 800ca50:	0800cadf 	.word	0x0800cadf
 800ca54:	0800cadf 	.word	0x0800cadf
 800ca58:	0800cadf 	.word	0x0800cadf
 800ca5c:	0800cadf 	.word	0x0800cadf
 800ca60:	0800cadf 	.word	0x0800cadf
 800ca64:	0800cadf 	.word	0x0800cadf
 800ca68:	0800ca9b 	.word	0x0800ca9b
 800ca6c:	0800cac5 	.word	0x0800cac5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	2b03      	cmp	r3, #3
 800ca7a:	d107      	bne.n	800ca8c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ca7c:	f107 030a 	add.w	r3, r7, #10
 800ca80:	2202      	movs	r2, #2
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f001 fa82 	bl	800df8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca8a:	e032      	b.n	800caf2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 fa0c 	bl	800deac <USBD_CtlError>
            ret = USBD_FAIL;
 800ca94:	2303      	movs	r3, #3
 800ca96:	75fb      	strb	r3, [r7, #23]
          break;
 800ca98:	e02b      	b.n	800caf2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b03      	cmp	r3, #3
 800caa4:	d107      	bne.n	800cab6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800caa6:	f107 030d 	add.w	r3, r7, #13
 800caaa:	2201      	movs	r2, #1
 800caac:	4619      	mov	r1, r3
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f001 fa6d 	bl	800df8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cab4:	e01d      	b.n	800caf2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f001 f9f7 	bl	800deac <USBD_CtlError>
            ret = USBD_FAIL;
 800cabe:	2303      	movs	r3, #3
 800cac0:	75fb      	strb	r3, [r7, #23]
          break;
 800cac2:	e016      	b.n	800caf2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d00f      	beq.n	800caf0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f001 f9ea 	bl	800deac <USBD_CtlError>
            ret = USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cadc:	e008      	b.n	800caf0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cade:	6839      	ldr	r1, [r7, #0]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 f9e3 	bl	800deac <USBD_CtlError>
          ret = USBD_FAIL;
 800cae6:	2303      	movs	r3, #3
 800cae8:	75fb      	strb	r3, [r7, #23]
          break;
 800caea:	e002      	b.n	800caf2 <USBD_CDC_Setup+0x176>
          break;
 800caec:	bf00      	nop
 800caee:	e008      	b.n	800cb02 <USBD_CDC_Setup+0x186>
          break;
 800caf0:	bf00      	nop
      }
      break;
 800caf2:	e006      	b.n	800cb02 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f001 f9d8 	bl	800deac <USBD_CtlError>
      ret = USBD_FAIL;
 800cafc:	2303      	movs	r3, #3
 800cafe:	75fb      	strb	r3, [r7, #23]
      break;
 800cb00:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb02:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d101      	bne.n	800cb2e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb2a:	2303      	movs	r3, #3
 800cb2c:	e04f      	b.n	800cbce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb36:	78fa      	ldrb	r2, [r7, #3]
 800cb38:	6879      	ldr	r1, [r7, #4]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	440b      	add	r3, r1
 800cb44:	3318      	adds	r3, #24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d029      	beq.n	800cba0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cb4c:	78fa      	ldrb	r2, [r7, #3]
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	4613      	mov	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	3318      	adds	r3, #24
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	78f9      	ldrb	r1, [r7, #3]
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	460b      	mov	r3, r1
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	440b      	add	r3, r1
 800cb68:	00db      	lsls	r3, r3, #3
 800cb6a:	4403      	add	r3, r0
 800cb6c:	3320      	adds	r3, #32
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb74:	fb01 f303 	mul.w	r3, r1, r3
 800cb78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d110      	bne.n	800cba0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cb7e:	78fa      	ldrb	r2, [r7, #3]
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	4613      	mov	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	440b      	add	r3, r1
 800cb8c:	3318      	adds	r3, #24
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cb92:	78f9      	ldrb	r1, [r7, #3]
 800cb94:	2300      	movs	r3, #0
 800cb96:	2200      	movs	r2, #0
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f005 fc8a 	bl	80124b2 <USBD_LL_Transmit>
 800cb9e:	e015      	b.n	800cbcc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00b      	beq.n	800cbcc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cbc8:	78fa      	ldrb	r2, [r7, #3]
 800cbca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b084      	sub	sp, #16
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cbe8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e015      	b.n	800cc24 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cbf8:	78fb      	ldrb	r3, [r7, #3]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f005 fc9a 	bl	8012536 <USBD_LL_GetRxDataSize>
 800cc02:	4602      	mov	r2, r0
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cc1e:	4611      	mov	r1, r2
 800cc20:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cc3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e01a      	b.n	800cc7c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d014      	beq.n	800cc7a <USBD_CDC_EP0_RxReady+0x4e>
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cc56:	2bff      	cmp	r3, #255	@ 0xff
 800cc58:	d00f      	beq.n	800cc7a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800cc68:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	22ff      	movs	r2, #255	@ 0xff
 800cc76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2243      	movs	r2, #67	@ 0x43
 800cc90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cc92:	4b03      	ldr	r3, [pc, #12]	@ (800cca0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	20000094 	.word	0x20000094

0800cca4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2243      	movs	r2, #67	@ 0x43
 800ccb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ccb2:	4b03      	ldr	r3, [pc, #12]	@ (800ccc0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	20000050 	.word	0x20000050

0800ccc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2243      	movs	r2, #67	@ 0x43
 800ccd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ccd2:	4b03      	ldr	r3, [pc, #12]	@ (800cce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	200000d8 	.word	0x200000d8

0800cce4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	220a      	movs	r2, #10
 800ccf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ccf2:	4b03      	ldr	r3, [pc, #12]	@ (800cd00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	2000000c 	.word	0x2000000c

0800cd04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd14:	2303      	movs	r3, #3
 800cd16:	e004      	b.n	800cd22 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b087      	sub	sp, #28
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	60f8      	str	r0, [r7, #12]
 800cd36:	60b9      	str	r1, [r7, #8]
 800cd38:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd40:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e008      	b.n	800cd5e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	371c      	adds	r7, #28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b085      	sub	sp, #20
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e004      	b.n	800cd90 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdaa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cdac:	2301      	movs	r3, #1
 800cdae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d101      	bne.n	800cdbe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e01a      	b.n	800cdf4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d114      	bne.n	800cdf2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cde6:	2181      	movs	r1, #129	@ 0x81
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f005 fb62 	bl	80124b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ce0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d101      	bne.n	800ce1a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e016      	b.n	800ce48 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	7c1b      	ldrb	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d109      	bne.n	800ce36 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce2c:	2101      	movs	r1, #1
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f005 fb60 	bl	80124f4 <USBD_LL_PrepareReceive>
 800ce34:	e007      	b.n	800ce46 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce3c:	2340      	movs	r3, #64	@ 0x40
 800ce3e:	2101      	movs	r1, #1
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f005 fb57 	bl	80124f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d101      	bne.n	800ce68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e01f      	b.n	800cea8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	79fa      	ldrb	r2, [r7, #7]
 800ce9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f005 f9bf 	bl	8012220 <USBD_LL_Init>
 800cea2:	4603      	mov	r3, r0
 800cea4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3718      	adds	r7, #24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ceba:	2300      	movs	r3, #0
 800cebc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d101      	bne.n	800cec8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e016      	b.n	800cef6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ced6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee4:	f107 020e 	add.w	r2, r7, #14
 800cee8:	4610      	mov	r0, r2
 800ceea:	4798      	blx	r3
 800ceec:	4602      	mov	r2, r0
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f005 f9ea 	bl	80122e0 <USBD_LL_Start>
 800cf0c:	4603      	mov	r3, r0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d009      	beq.n	800cf5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	78fa      	ldrb	r2, [r7, #3]
 800cf50:	4611      	mov	r1, r2
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	4798      	blx	r3
 800cf56:	4603      	mov	r3, r0
 800cf58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d007      	beq.n	800cf8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	78fa      	ldrb	r2, [r7, #3]
 800cf84:	4611      	mov	r1, r2
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	4798      	blx	r3
  }

  return USBD_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 ff46 	bl	800de38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cfba:	461a      	mov	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cfc8:	f003 031f 	and.w	r3, r3, #31
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d01a      	beq.n	800d006 <USBD_LL_SetupStage+0x72>
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d822      	bhi.n	800d01a <USBD_LL_SetupStage+0x86>
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <USBD_LL_SetupStage+0x4a>
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d00a      	beq.n	800cff2 <USBD_LL_SetupStage+0x5e>
 800cfdc:	e01d      	b.n	800d01a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f9ee 	bl	800d3c8 <USBD_StdDevReq>
 800cfec:	4603      	mov	r3, r0
 800cfee:	73fb      	strb	r3, [r7, #15]
      break;
 800cff0:	e020      	b.n	800d034 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fa52 	bl	800d4a4 <USBD_StdItfReq>
 800d000:	4603      	mov	r3, r0
 800d002:	73fb      	strb	r3, [r7, #15]
      break;
 800d004:	e016      	b.n	800d034 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d00c:	4619      	mov	r1, r3
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fa91 	bl	800d536 <USBD_StdEPReq>
 800d014:	4603      	mov	r3, r0
 800d016:	73fb      	strb	r3, [r7, #15]
      break;
 800d018:	e00c      	b.n	800d034 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d020:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d024:	b2db      	uxtb	r3, r3
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f005 f9b9 	bl	80123a0 <USBD_LL_StallEP>
 800d02e:	4603      	mov	r3, r0
 800d030:	73fb      	strb	r3, [r7, #15]
      break;
 800d032:	bf00      	nop
  }

  return ret;
 800d034:	7bfb      	ldrb	r3, [r7, #15]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b086      	sub	sp, #24
 800d042:	af00      	add	r7, sp, #0
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	460b      	mov	r3, r1
 800d048:	607a      	str	r2, [r7, #4]
 800d04a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d04c:	7afb      	ldrb	r3, [r7, #11]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d138      	bne.n	800d0c4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d058:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d060:	2b03      	cmp	r3, #3
 800d062:	d14a      	bne.n	800d0fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	689a      	ldr	r2, [r3, #8]
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d913      	bls.n	800d098 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	689a      	ldr	r2, [r3, #8]
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	1ad2      	subs	r2, r2, r3
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	68da      	ldr	r2, [r3, #12]
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	4293      	cmp	r3, r2
 800d088:	bf28      	it	cs
 800d08a:	4613      	movcs	r3, r2
 800d08c:	461a      	mov	r2, r3
 800d08e:	6879      	ldr	r1, [r7, #4]
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 ffc5 	bl	800e020 <USBD_CtlContinueRx>
 800d096:	e030      	b.n	800d0fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b03      	cmp	r3, #3
 800d0a2:	d10b      	bne.n	800d0bc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d005      	beq.n	800d0bc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f000 ffc0 	bl	800e042 <USBD_CtlSendStatus>
 800d0c2:	e01a      	b.n	800d0fa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d114      	bne.n	800d0fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0d6:	699b      	ldr	r3, [r3, #24]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00e      	beq.n	800d0fa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	7afa      	ldrb	r2, [r7, #11]
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	4798      	blx	r3
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
 800d0f8:	e000      	b.n	800d0fc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b086      	sub	sp, #24
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	460b      	mov	r3, r1
 800d10e:	607a      	str	r2, [r7, #4]
 800d110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d16b      	bne.n	800d1f0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3314      	adds	r3, #20
 800d11c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d124:	2b02      	cmp	r3, #2
 800d126:	d156      	bne.n	800d1d6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	689a      	ldr	r2, [r3, #8]
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	429a      	cmp	r2, r3
 800d132:	d914      	bls.n	800d15e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	1ad2      	subs	r2, r2, r3
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	461a      	mov	r2, r3
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f000 ff3a 	bl	800dfc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d150:	2300      	movs	r3, #0
 800d152:	2200      	movs	r2, #0
 800d154:	2100      	movs	r1, #0
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f005 f9cc 	bl	80124f4 <USBD_LL_PrepareReceive>
 800d15c:	e03b      	b.n	800d1d6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	68da      	ldr	r2, [r3, #12]
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	429a      	cmp	r2, r3
 800d168:	d11c      	bne.n	800d1a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d172:	429a      	cmp	r2, r3
 800d174:	d316      	bcc.n	800d1a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	685a      	ldr	r2, [r3, #4]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d180:	429a      	cmp	r2, r3
 800d182:	d20f      	bcs.n	800d1a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d184:	2200      	movs	r2, #0
 800d186:	2100      	movs	r1, #0
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 ff1b 	bl	800dfc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d196:	2300      	movs	r3, #0
 800d198:	2200      	movs	r2, #0
 800d19a:	2100      	movs	r1, #0
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f005 f9a9 	bl	80124f4 <USBD_LL_PrepareReceive>
 800d1a2:	e018      	b.n	800d1d6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	d10b      	bne.n	800d1c8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d005      	beq.n	800d1c8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1c8:	2180      	movs	r1, #128	@ 0x80
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f005 f8e8 	bl	80123a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 ff49 	bl	800e068 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d122      	bne.n	800d226 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7ff fe98 	bl	800cf16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d1ee:	e01a      	b.n	800d226 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b03      	cmp	r3, #3
 800d1fa:	d114      	bne.n	800d226 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00e      	beq.n	800d226 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d20e:	695b      	ldr	r3, [r3, #20]
 800d210:	7afa      	ldrb	r2, [r7, #11]
 800d212:	4611      	mov	r1, r2
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	4798      	blx	r3
 800d218:	4603      	mov	r3, r0
 800d21a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d21c:	7dfb      	ldrb	r3, [r7, #23]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d222:	7dfb      	ldrb	r3, [r7, #23]
 800d224:	e000      	b.n	800d228 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3718      	adds	r7, #24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d260:	2303      	movs	r3, #3
 800d262:	e02f      	b.n	800d2c4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00f      	beq.n	800d28e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d009      	beq.n	800d28e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	6852      	ldr	r2, [r2, #4]
 800d286:	b2d2      	uxtb	r2, r2
 800d288:	4611      	mov	r1, r2
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d28e:	2340      	movs	r3, #64	@ 0x40
 800d290:	2200      	movs	r2, #0
 800d292:	2100      	movs	r1, #0
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f005 f83e 	bl	8012316 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2240      	movs	r2, #64	@ 0x40
 800d2a6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2aa:	2340      	movs	r3, #64	@ 0x40
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	2180      	movs	r1, #128	@ 0x80
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f005 f830 	bl	8012316 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2240      	movs	r2, #64	@ 0x40
 800d2c0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	78fa      	ldrb	r2, [r7, #3]
 800d2dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2204      	movs	r2, #4
 800d306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d326:	b2db      	uxtb	r3, r3
 800d328:	2b04      	cmp	r3, #4
 800d32a:	d106      	bne.n	800d33a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d332:	b2da      	uxtb	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e012      	b.n	800d384 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b03      	cmp	r3, #3
 800d368:	d10b      	bne.n	800d382 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d005      	beq.n	800d382 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d3aa:	8a3b      	ldrh	r3, [r7, #16]
 800d3ac:	021b      	lsls	r3, r3, #8
 800d3ae:	b21a      	sxth	r2, r3
 800d3b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	b21b      	sxth	r3, r3
 800d3b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d3ba:	89fb      	ldrh	r3, [r7, #14]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	371c      	adds	r7, #28
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d3de:	2b40      	cmp	r3, #64	@ 0x40
 800d3e0:	d005      	beq.n	800d3ee <USBD_StdDevReq+0x26>
 800d3e2:	2b40      	cmp	r3, #64	@ 0x40
 800d3e4:	d853      	bhi.n	800d48e <USBD_StdDevReq+0xc6>
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00b      	beq.n	800d402 <USBD_StdDevReq+0x3a>
 800d3ea:	2b20      	cmp	r3, #32
 800d3ec:	d14f      	bne.n	800d48e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	6839      	ldr	r1, [r7, #0]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	4798      	blx	r3
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800d400:	e04a      	b.n	800d498 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	785b      	ldrb	r3, [r3, #1]
 800d406:	2b09      	cmp	r3, #9
 800d408:	d83b      	bhi.n	800d482 <USBD_StdDevReq+0xba>
 800d40a:	a201      	add	r2, pc, #4	@ (adr r2, 800d410 <USBD_StdDevReq+0x48>)
 800d40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d410:	0800d465 	.word	0x0800d465
 800d414:	0800d479 	.word	0x0800d479
 800d418:	0800d483 	.word	0x0800d483
 800d41c:	0800d46f 	.word	0x0800d46f
 800d420:	0800d483 	.word	0x0800d483
 800d424:	0800d443 	.word	0x0800d443
 800d428:	0800d439 	.word	0x0800d439
 800d42c:	0800d483 	.word	0x0800d483
 800d430:	0800d45b 	.word	0x0800d45b
 800d434:	0800d44d 	.word	0x0800d44d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f9de 	bl	800d7fc <USBD_GetDescriptor>
          break;
 800d440:	e024      	b.n	800d48c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 fb6d 	bl	800db24 <USBD_SetAddress>
          break;
 800d44a:	e01f      	b.n	800d48c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d44c:	6839      	ldr	r1, [r7, #0]
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fbac 	bl	800dbac <USBD_SetConfig>
 800d454:	4603      	mov	r3, r0
 800d456:	73fb      	strb	r3, [r7, #15]
          break;
 800d458:	e018      	b.n	800d48c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d45a:	6839      	ldr	r1, [r7, #0]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fc4b 	bl	800dcf8 <USBD_GetConfig>
          break;
 800d462:	e013      	b.n	800d48c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d464:	6839      	ldr	r1, [r7, #0]
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fc7c 	bl	800dd64 <USBD_GetStatus>
          break;
 800d46c:	e00e      	b.n	800d48c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fcab 	bl	800ddcc <USBD_SetFeature>
          break;
 800d476:	e009      	b.n	800d48c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fcba 	bl	800ddf4 <USBD_ClrFeature>
          break;
 800d480:	e004      	b.n	800d48c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fd11 	bl	800deac <USBD_CtlError>
          break;
 800d48a:	bf00      	nop
      }
      break;
 800d48c:	e004      	b.n	800d498 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fd0b 	bl	800deac <USBD_CtlError>
      break;
 800d496:	bf00      	nop
  }

  return ret;
 800d498:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop

0800d4a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d4ba:	2b40      	cmp	r3, #64	@ 0x40
 800d4bc:	d005      	beq.n	800d4ca <USBD_StdItfReq+0x26>
 800d4be:	2b40      	cmp	r3, #64	@ 0x40
 800d4c0:	d82f      	bhi.n	800d522 <USBD_StdItfReq+0x7e>
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <USBD_StdItfReq+0x26>
 800d4c6:	2b20      	cmp	r3, #32
 800d4c8:	d12b      	bne.n	800d522 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d81d      	bhi.n	800d514 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	889b      	ldrh	r3, [r3, #4]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d813      	bhi.n	800d50a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	4798      	blx	r3
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	88db      	ldrh	r3, [r3, #6]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d110      	bne.n	800d51e <USBD_StdItfReq+0x7a>
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10d      	bne.n	800d51e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fd9d 	bl	800e042 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d508:	e009      	b.n	800d51e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fccd 	bl	800deac <USBD_CtlError>
          break;
 800d512:	e004      	b.n	800d51e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d514:	6839      	ldr	r1, [r7, #0]
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 fcc8 	bl	800deac <USBD_CtlError>
          break;
 800d51c:	e000      	b.n	800d520 <USBD_StdItfReq+0x7c>
          break;
 800d51e:	bf00      	nop
      }
      break;
 800d520:	e004      	b.n	800d52c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fcc1 	bl	800deac <USBD_CtlError>
      break;
 800d52a:	bf00      	nop
  }

  return ret;
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b084      	sub	sp, #16
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	889b      	ldrh	r3, [r3, #4]
 800d548:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d552:	2b40      	cmp	r3, #64	@ 0x40
 800d554:	d007      	beq.n	800d566 <USBD_StdEPReq+0x30>
 800d556:	2b40      	cmp	r3, #64	@ 0x40
 800d558:	f200 8145 	bhi.w	800d7e6 <USBD_StdEPReq+0x2b0>
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00c      	beq.n	800d57a <USBD_StdEPReq+0x44>
 800d560:	2b20      	cmp	r3, #32
 800d562:	f040 8140 	bne.w	800d7e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	4798      	blx	r3
 800d574:	4603      	mov	r3, r0
 800d576:	73fb      	strb	r3, [r7, #15]
      break;
 800d578:	e13a      	b.n	800d7f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	785b      	ldrb	r3, [r3, #1]
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d007      	beq.n	800d592 <USBD_StdEPReq+0x5c>
 800d582:	2b03      	cmp	r3, #3
 800d584:	f300 8129 	bgt.w	800d7da <USBD_StdEPReq+0x2a4>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d07f      	beq.n	800d68c <USBD_StdEPReq+0x156>
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d03c      	beq.n	800d60a <USBD_StdEPReq+0xd4>
 800d590:	e123      	b.n	800d7da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d002      	beq.n	800d5a4 <USBD_StdEPReq+0x6e>
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d016      	beq.n	800d5d0 <USBD_StdEPReq+0x9a>
 800d5a2:	e02c      	b.n	800d5fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5a4:	7bbb      	ldrb	r3, [r7, #14]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00d      	beq.n	800d5c6 <USBD_StdEPReq+0x90>
 800d5aa:	7bbb      	ldrb	r3, [r7, #14]
 800d5ac:	2b80      	cmp	r3, #128	@ 0x80
 800d5ae:	d00a      	beq.n	800d5c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5b0:	7bbb      	ldrb	r3, [r7, #14]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f004 fef3 	bl	80123a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5ba:	2180      	movs	r1, #128	@ 0x80
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f004 feef 	bl	80123a0 <USBD_LL_StallEP>
 800d5c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5c4:	e020      	b.n	800d608 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fc6f 	bl	800deac <USBD_CtlError>
              break;
 800d5ce:	e01b      	b.n	800d608 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	885b      	ldrh	r3, [r3, #2]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10e      	bne.n	800d5f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00b      	beq.n	800d5f6 <USBD_StdEPReq+0xc0>
 800d5de:	7bbb      	ldrb	r3, [r7, #14]
 800d5e0:	2b80      	cmp	r3, #128	@ 0x80
 800d5e2:	d008      	beq.n	800d5f6 <USBD_StdEPReq+0xc0>
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	88db      	ldrh	r3, [r3, #6]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d104      	bne.n	800d5f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f004 fed5 	bl	80123a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fd23 	bl	800e042 <USBD_CtlSendStatus>

              break;
 800d5fc:	e004      	b.n	800d608 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fc53 	bl	800deac <USBD_CtlError>
              break;
 800d606:	bf00      	nop
          }
          break;
 800d608:	e0ec      	b.n	800d7e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b02      	cmp	r3, #2
 800d614:	d002      	beq.n	800d61c <USBD_StdEPReq+0xe6>
 800d616:	2b03      	cmp	r3, #3
 800d618:	d016      	beq.n	800d648 <USBD_StdEPReq+0x112>
 800d61a:	e030      	b.n	800d67e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00d      	beq.n	800d63e <USBD_StdEPReq+0x108>
 800d622:	7bbb      	ldrb	r3, [r7, #14]
 800d624:	2b80      	cmp	r3, #128	@ 0x80
 800d626:	d00a      	beq.n	800d63e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f004 feb7 	bl	80123a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d632:	2180      	movs	r1, #128	@ 0x80
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f004 feb3 	bl	80123a0 <USBD_LL_StallEP>
 800d63a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d63c:	e025      	b.n	800d68a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fc33 	bl	800deac <USBD_CtlError>
              break;
 800d646:	e020      	b.n	800d68a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	885b      	ldrh	r3, [r3, #2]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d11b      	bne.n	800d688 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d650:	7bbb      	ldrb	r3, [r7, #14]
 800d652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d656:	2b00      	cmp	r3, #0
 800d658:	d004      	beq.n	800d664 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d65a:	7bbb      	ldrb	r3, [r7, #14]
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f004 febd 	bl	80123de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fcec 	bl	800e042 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	4798      	blx	r3
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d67c:	e004      	b.n	800d688 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fc13 	bl	800deac <USBD_CtlError>
              break;
 800d686:	e000      	b.n	800d68a <USBD_StdEPReq+0x154>
              break;
 800d688:	bf00      	nop
          }
          break;
 800d68a:	e0ab      	b.n	800d7e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d692:	b2db      	uxtb	r3, r3
 800d694:	2b02      	cmp	r3, #2
 800d696:	d002      	beq.n	800d69e <USBD_StdEPReq+0x168>
 800d698:	2b03      	cmp	r3, #3
 800d69a:	d032      	beq.n	800d702 <USBD_StdEPReq+0x1cc>
 800d69c:	e097      	b.n	800d7ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d69e:	7bbb      	ldrb	r3, [r7, #14]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d007      	beq.n	800d6b4 <USBD_StdEPReq+0x17e>
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
 800d6a6:	2b80      	cmp	r3, #128	@ 0x80
 800d6a8:	d004      	beq.n	800d6b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fbfd 	bl	800deac <USBD_CtlError>
                break;
 800d6b2:	e091      	b.n	800d7d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	da0b      	bge.n	800d6d4 <USBD_StdEPReq+0x19e>
 800d6bc:	7bbb      	ldrb	r3, [r7, #14]
 800d6be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	3310      	adds	r3, #16
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	e00b      	b.n	800d6ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
 800d6d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6da:	4613      	mov	r3, r2
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	4413      	add	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fc47 	bl	800df8e <USBD_CtlSendData>
              break;
 800d700:	e06a      	b.n	800d7d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d706:	2b00      	cmp	r3, #0
 800d708:	da11      	bge.n	800d72e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
 800d70c:	f003 020f 	and.w	r2, r3, #15
 800d710:	6879      	ldr	r1, [r7, #4]
 800d712:	4613      	mov	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	440b      	add	r3, r1
 800d71c:	3324      	adds	r3, #36	@ 0x24
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d117      	bne.n	800d754 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d724:	6839      	ldr	r1, [r7, #0]
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fbc0 	bl	800deac <USBD_CtlError>
                  break;
 800d72c:	e054      	b.n	800d7d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d72e:	7bbb      	ldrb	r3, [r7, #14]
 800d730:	f003 020f 	and.w	r2, r3, #15
 800d734:	6879      	ldr	r1, [r7, #4]
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	440b      	add	r3, r1
 800d740:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d744:	881b      	ldrh	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d104      	bne.n	800d754 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d74a:	6839      	ldr	r1, [r7, #0]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fbad 	bl	800deac <USBD_CtlError>
                  break;
 800d752:	e041      	b.n	800d7d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	da0b      	bge.n	800d774 <USBD_StdEPReq+0x23e>
 800d75c:	7bbb      	ldrb	r3, [r7, #14]
 800d75e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d762:	4613      	mov	r3, r2
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	4413      	add	r3, r2
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	3310      	adds	r3, #16
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	4413      	add	r3, r2
 800d770:	3304      	adds	r3, #4
 800d772:	e00b      	b.n	800d78c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d774:	7bbb      	ldrb	r3, [r7, #14]
 800d776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d77a:	4613      	mov	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	4413      	add	r3, r2
 800d78a:	3304      	adds	r3, #4
 800d78c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d78e:	7bbb      	ldrb	r3, [r7, #14]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <USBD_StdEPReq+0x264>
 800d794:	7bbb      	ldrb	r3, [r7, #14]
 800d796:	2b80      	cmp	r3, #128	@ 0x80
 800d798:	d103      	bne.n	800d7a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2200      	movs	r2, #0
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	e00e      	b.n	800d7c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d7a2:	7bbb      	ldrb	r3, [r7, #14]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f004 fe38 	bl	801241c <USBD_LL_IsStallEP>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	e002      	b.n	800d7c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2202      	movs	r2, #2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fbe1 	bl	800df8e <USBD_CtlSendData>
              break;
 800d7cc:	e004      	b.n	800d7d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fb6b 	bl	800deac <USBD_CtlError>
              break;
 800d7d6:	bf00      	nop
          }
          break;
 800d7d8:	e004      	b.n	800d7e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d7da:	6839      	ldr	r1, [r7, #0]
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fb65 	bl	800deac <USBD_CtlError>
          break;
 800d7e2:	bf00      	nop
      }
      break;
 800d7e4:	e004      	b.n	800d7f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fb5f 	bl	800deac <USBD_CtlError>
      break;
 800d7ee:	bf00      	nop
  }

  return ret;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
	...

0800d7fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d80a:	2300      	movs	r3, #0
 800d80c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d80e:	2300      	movs	r3, #0
 800d810:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	885b      	ldrh	r3, [r3, #2]
 800d816:	0a1b      	lsrs	r3, r3, #8
 800d818:	b29b      	uxth	r3, r3
 800d81a:	3b01      	subs	r3, #1
 800d81c:	2b0e      	cmp	r3, #14
 800d81e:	f200 8152 	bhi.w	800dac6 <USBD_GetDescriptor+0x2ca>
 800d822:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <USBD_GetDescriptor+0x2c>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d899 	.word	0x0800d899
 800d82c:	0800d8b1 	.word	0x0800d8b1
 800d830:	0800d8f1 	.word	0x0800d8f1
 800d834:	0800dac7 	.word	0x0800dac7
 800d838:	0800dac7 	.word	0x0800dac7
 800d83c:	0800da67 	.word	0x0800da67
 800d840:	0800da93 	.word	0x0800da93
 800d844:	0800dac7 	.word	0x0800dac7
 800d848:	0800dac7 	.word	0x0800dac7
 800d84c:	0800dac7 	.word	0x0800dac7
 800d850:	0800dac7 	.word	0x0800dac7
 800d854:	0800dac7 	.word	0x0800dac7
 800d858:	0800dac7 	.word	0x0800dac7
 800d85c:	0800dac7 	.word	0x0800dac7
 800d860:	0800d865 	.word	0x0800d865
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d86a:	69db      	ldr	r3, [r3, #28]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00b      	beq.n	800d888 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d876:	69db      	ldr	r3, [r3, #28]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	7c12      	ldrb	r2, [r2, #16]
 800d87c:	f107 0108 	add.w	r1, r7, #8
 800d880:	4610      	mov	r0, r2
 800d882:	4798      	blx	r3
 800d884:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d886:	e126      	b.n	800dad6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d888:	6839      	ldr	r1, [r7, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fb0e 	bl	800deac <USBD_CtlError>
        err++;
 800d890:	7afb      	ldrb	r3, [r7, #11]
 800d892:	3301      	adds	r3, #1
 800d894:	72fb      	strb	r3, [r7, #11]
      break;
 800d896:	e11e      	b.n	800dad6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	7c12      	ldrb	r2, [r2, #16]
 800d8a4:	f107 0108 	add.w	r1, r7, #8
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	4798      	blx	r3
 800d8ac:	60f8      	str	r0, [r7, #12]
      break;
 800d8ae:	e112      	b.n	800dad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	7c1b      	ldrb	r3, [r3, #16]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10d      	bne.n	800d8d4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c0:	f107 0208 	add.w	r2, r7, #8
 800d8c4:	4610      	mov	r0, r2
 800d8c6:	4798      	blx	r3
 800d8c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d8d2:	e100      	b.n	800dad6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8dc:	f107 0208 	add.w	r2, r7, #8
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
 800d8e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	701a      	strb	r2, [r3, #0]
      break;
 800d8ee:	e0f2      	b.n	800dad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	885b      	ldrh	r3, [r3, #2]
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	f200 80ac 	bhi.w	800da54 <USBD_GetDescriptor+0x258>
 800d8fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d904 <USBD_GetDescriptor+0x108>)
 800d8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d902:	bf00      	nop
 800d904:	0800d91d 	.word	0x0800d91d
 800d908:	0800d951 	.word	0x0800d951
 800d90c:	0800d985 	.word	0x0800d985
 800d910:	0800d9b9 	.word	0x0800d9b9
 800d914:	0800d9ed 	.word	0x0800d9ed
 800d918:	0800da21 	.word	0x0800da21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00b      	beq.n	800d940 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	7c12      	ldrb	r2, [r2, #16]
 800d934:	f107 0108 	add.w	r1, r7, #8
 800d938:	4610      	mov	r0, r2
 800d93a:	4798      	blx	r3
 800d93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d93e:	e091      	b.n	800da64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fab2 	bl	800deac <USBD_CtlError>
            err++;
 800d948:	7afb      	ldrb	r3, [r7, #11]
 800d94a:	3301      	adds	r3, #1
 800d94c:	72fb      	strb	r3, [r7, #11]
          break;
 800d94e:	e089      	b.n	800da64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00b      	beq.n	800d974 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	7c12      	ldrb	r2, [r2, #16]
 800d968:	f107 0108 	add.w	r1, r7, #8
 800d96c:	4610      	mov	r0, r2
 800d96e:	4798      	blx	r3
 800d970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d972:	e077      	b.n	800da64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 fa98 	bl	800deac <USBD_CtlError>
            err++;
 800d97c:	7afb      	ldrb	r3, [r7, #11]
 800d97e:	3301      	adds	r3, #1
 800d980:	72fb      	strb	r3, [r7, #11]
          break;
 800d982:	e06f      	b.n	800da64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00b      	beq.n	800d9a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	7c12      	ldrb	r2, [r2, #16]
 800d99c:	f107 0108 	add.w	r1, r7, #8
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	4798      	blx	r3
 800d9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9a6:	e05d      	b.n	800da64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fa7e 	bl	800deac <USBD_CtlError>
            err++;
 800d9b0:	7afb      	ldrb	r3, [r7, #11]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d9b6:	e055      	b.n	800da64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00b      	beq.n	800d9dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	7c12      	ldrb	r2, [r2, #16]
 800d9d0:	f107 0108 	add.w	r1, r7, #8
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	4798      	blx	r3
 800d9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9da:	e043      	b.n	800da64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fa64 	bl	800deac <USBD_CtlError>
            err++;
 800d9e4:	7afb      	ldrb	r3, [r7, #11]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d9ea:	e03b      	b.n	800da64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9f2:	695b      	ldr	r3, [r3, #20]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00b      	beq.n	800da10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9fe:	695b      	ldr	r3, [r3, #20]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	7c12      	ldrb	r2, [r2, #16]
 800da04:	f107 0108 	add.w	r1, r7, #8
 800da08:	4610      	mov	r0, r2
 800da0a:	4798      	blx	r3
 800da0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da0e:	e029      	b.n	800da64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 fa4a 	bl	800deac <USBD_CtlError>
            err++;
 800da18:	7afb      	ldrb	r3, [r7, #11]
 800da1a:	3301      	adds	r3, #1
 800da1c:	72fb      	strb	r3, [r7, #11]
          break;
 800da1e:	e021      	b.n	800da64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00b      	beq.n	800da44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	7c12      	ldrb	r2, [r2, #16]
 800da38:	f107 0108 	add.w	r1, r7, #8
 800da3c:	4610      	mov	r0, r2
 800da3e:	4798      	blx	r3
 800da40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da42:	e00f      	b.n	800da64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da44:	6839      	ldr	r1, [r7, #0]
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 fa30 	bl	800deac <USBD_CtlError>
            err++;
 800da4c:	7afb      	ldrb	r3, [r7, #11]
 800da4e:	3301      	adds	r3, #1
 800da50:	72fb      	strb	r3, [r7, #11]
          break;
 800da52:	e007      	b.n	800da64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da54:	6839      	ldr	r1, [r7, #0]
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 fa28 	bl	800deac <USBD_CtlError>
          err++;
 800da5c:	7afb      	ldrb	r3, [r7, #11]
 800da5e:	3301      	adds	r3, #1
 800da60:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da62:	bf00      	nop
      }
      break;
 800da64:	e037      	b.n	800dad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7c1b      	ldrb	r3, [r3, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d109      	bne.n	800da82 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da76:	f107 0208 	add.w	r2, r7, #8
 800da7a:	4610      	mov	r0, r2
 800da7c:	4798      	blx	r3
 800da7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da80:	e029      	b.n	800dad6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fa11 	bl	800deac <USBD_CtlError>
        err++;
 800da8a:	7afb      	ldrb	r3, [r7, #11]
 800da8c:	3301      	adds	r3, #1
 800da8e:	72fb      	strb	r3, [r7, #11]
      break;
 800da90:	e021      	b.n	800dad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	7c1b      	ldrb	r3, [r3, #16]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10d      	bne.n	800dab6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daa2:	f107 0208 	add.w	r2, r7, #8
 800daa6:	4610      	mov	r0, r2
 800daa8:	4798      	blx	r3
 800daaa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3301      	adds	r3, #1
 800dab0:	2207      	movs	r2, #7
 800dab2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dab4:	e00f      	b.n	800dad6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f9f7 	bl	800deac <USBD_CtlError>
        err++;
 800dabe:	7afb      	ldrb	r3, [r7, #11]
 800dac0:	3301      	adds	r3, #1
 800dac2:	72fb      	strb	r3, [r7, #11]
      break;
 800dac4:	e007      	b.n	800dad6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dac6:	6839      	ldr	r1, [r7, #0]
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f9ef 	bl	800deac <USBD_CtlError>
      err++;
 800dace:	7afb      	ldrb	r3, [r7, #11]
 800dad0:	3301      	adds	r3, #1
 800dad2:	72fb      	strb	r3, [r7, #11]
      break;
 800dad4:	bf00      	nop
  }

  if (err != 0U)
 800dad6:	7afb      	ldrb	r3, [r7, #11]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d11e      	bne.n	800db1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	88db      	ldrh	r3, [r3, #6]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d016      	beq.n	800db12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dae4:	893b      	ldrh	r3, [r7, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00e      	beq.n	800db08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	88da      	ldrh	r2, [r3, #6]
 800daee:	893b      	ldrh	r3, [r7, #8]
 800daf0:	4293      	cmp	r3, r2
 800daf2:	bf28      	it	cs
 800daf4:	4613      	movcs	r3, r2
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dafa:	893b      	ldrh	r3, [r7, #8]
 800dafc:	461a      	mov	r2, r3
 800dafe:	68f9      	ldr	r1, [r7, #12]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fa44 	bl	800df8e <USBD_CtlSendData>
 800db06:	e009      	b.n	800db1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db08:	6839      	ldr	r1, [r7, #0]
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 f9ce 	bl	800deac <USBD_CtlError>
 800db10:	e004      	b.n	800db1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fa95 	bl	800e042 <USBD_CtlSendStatus>
 800db18:	e000      	b.n	800db1c <USBD_GetDescriptor+0x320>
    return;
 800db1a:	bf00      	nop
  }
}
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop

0800db24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	889b      	ldrh	r3, [r3, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d131      	bne.n	800db9a <USBD_SetAddress+0x76>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	88db      	ldrh	r3, [r3, #6]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d12d      	bne.n	800db9a <USBD_SetAddress+0x76>
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	885b      	ldrh	r3, [r3, #2]
 800db42:	2b7f      	cmp	r3, #127	@ 0x7f
 800db44:	d829      	bhi.n	800db9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	885b      	ldrh	r3, [r3, #2]
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b03      	cmp	r3, #3
 800db5c:	d104      	bne.n	800db68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f9a3 	bl	800deac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db66:	e01d      	b.n	800dba4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7bfa      	ldrb	r2, [r7, #15]
 800db6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db70:	7bfb      	ldrb	r3, [r7, #15]
 800db72:	4619      	mov	r1, r3
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f004 fc7d 	bl	8012474 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fa61 	bl	800e042 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800db80:	7bfb      	ldrb	r3, [r7, #15]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d004      	beq.n	800db90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2202      	movs	r2, #2
 800db8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db8e:	e009      	b.n	800dba4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db98:	e004      	b.n	800dba4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f985 	bl	800deac <USBD_CtlError>
  }
}
 800dba2:	bf00      	nop
 800dba4:	bf00      	nop
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	885b      	ldrh	r3, [r3, #2]
 800dbbe:	b2da      	uxtb	r2, r3
 800dbc0:	4b4c      	ldr	r3, [pc, #304]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dbc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbc4:	4b4b      	ldr	r3, [pc, #300]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d905      	bls.n	800dbd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f96c 	bl	800deac <USBD_CtlError>
    return USBD_FAIL;
 800dbd4:	2303      	movs	r3, #3
 800dbd6:	e088      	b.n	800dcea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d002      	beq.n	800dbea <USBD_SetConfig+0x3e>
 800dbe4:	2b03      	cmp	r3, #3
 800dbe6:	d025      	beq.n	800dc34 <USBD_SetConfig+0x88>
 800dbe8:	e071      	b.n	800dcce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dbea:	4b42      	ldr	r3, [pc, #264]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d01c      	beq.n	800dc2c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dbf2:	4b40      	ldr	r3, [pc, #256]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbfc:	4b3d      	ldr	r3, [pc, #244]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff f992 	bl	800cf2c <USBD_SetClassConfig>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d004      	beq.n	800dc1c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f949 	bl	800deac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc1a:	e065      	b.n	800dce8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fa10 	bl	800e042 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2203      	movs	r2, #3
 800dc26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dc2a:	e05d      	b.n	800dce8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fa08 	bl	800e042 <USBD_CtlSendStatus>
      break;
 800dc32:	e059      	b.n	800dce8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc34:	4b2f      	ldr	r3, [pc, #188]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d112      	bne.n	800dc62 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dc44:	4b2b      	ldr	r3, [pc, #172]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc4e:	4b29      	ldr	r3, [pc, #164]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	4619      	mov	r1, r3
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7ff f985 	bl	800cf64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f9f1 	bl	800e042 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc60:	e042      	b.n	800dce8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc62:	4b24      	ldr	r3, [pc, #144]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	461a      	mov	r2, r3
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d02a      	beq.n	800dcc6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	4619      	mov	r1, r3
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff f973 	bl	800cf64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	461a      	mov	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc88:	4b1a      	ldr	r3, [pc, #104]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7ff f94c 	bl	800cf2c <USBD_SetClassConfig>
 800dc94:	4603      	mov	r3, r0
 800dc96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00f      	beq.n	800dcbe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dc9e:	6839      	ldr	r1, [r7, #0]
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f903 	bl	800deac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff f958 	bl	800cf64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dcbc:	e014      	b.n	800dce8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f9bf 	bl	800e042 <USBD_CtlSendStatus>
      break;
 800dcc4:	e010      	b.n	800dce8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 f9bb 	bl	800e042 <USBD_CtlSendStatus>
      break;
 800dccc:	e00c      	b.n	800dce8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 f8eb 	bl	800deac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dcd6:	4b07      	ldr	r3, [pc, #28]	@ (800dcf4 <USBD_SetConfig+0x148>)
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7ff f941 	bl	800cf64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dce2:	2303      	movs	r3, #3
 800dce4:	73fb      	strb	r3, [r7, #15]
      break;
 800dce6:	bf00      	nop
  }

  return ret;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200022cc 	.word	0x200022cc

0800dcf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	88db      	ldrh	r3, [r3, #6]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d004      	beq.n	800dd14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 f8cd 	bl	800deac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd12:	e023      	b.n	800dd5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	dc02      	bgt.n	800dd26 <USBD_GetConfig+0x2e>
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dc03      	bgt.n	800dd2c <USBD_GetConfig+0x34>
 800dd24:	e015      	b.n	800dd52 <USBD_GetConfig+0x5a>
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d00b      	beq.n	800dd42 <USBD_GetConfig+0x4a>
 800dd2a:	e012      	b.n	800dd52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	3308      	adds	r3, #8
 800dd36:	2201      	movs	r2, #1
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f927 	bl	800df8e <USBD_CtlSendData>
        break;
 800dd40:	e00c      	b.n	800dd5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3304      	adds	r3, #4
 800dd46:	2201      	movs	r2, #1
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f91f 	bl	800df8e <USBD_CtlSendData>
        break;
 800dd50:	e004      	b.n	800dd5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f8a9 	bl	800deac <USBD_CtlError>
        break;
 800dd5a:	bf00      	nop
}
 800dd5c:	bf00      	nop
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	3b01      	subs	r3, #1
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d81e      	bhi.n	800ddba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	88db      	ldrh	r3, [r3, #6]
 800dd80:	2b02      	cmp	r3, #2
 800dd82:	d004      	beq.n	800dd8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f890 	bl	800deac <USBD_CtlError>
        break;
 800dd8c:	e01a      	b.n	800ddc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d005      	beq.n	800ddaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	f043 0202 	orr.w	r2, r3, #2
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	330c      	adds	r3, #12
 800ddae:	2202      	movs	r2, #2
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f8eb 	bl	800df8e <USBD_CtlSendData>
      break;
 800ddb8:	e004      	b.n	800ddc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f875 	bl	800deac <USBD_CtlError>
      break;
 800ddc2:	bf00      	nop
  }
}
 800ddc4:	bf00      	nop
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	885b      	ldrh	r3, [r3, #2]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d106      	bne.n	800ddec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2201      	movs	r2, #1
 800dde2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 f92b 	bl	800e042 <USBD_CtlSendStatus>
  }
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de04:	b2db      	uxtb	r3, r3
 800de06:	3b01      	subs	r3, #1
 800de08:	2b02      	cmp	r3, #2
 800de0a:	d80b      	bhi.n	800de24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	885b      	ldrh	r3, [r3, #2]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d10c      	bne.n	800de2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f910 	bl	800e042 <USBD_CtlSendStatus>
      }
      break;
 800de22:	e004      	b.n	800de2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f840 	bl	800deac <USBD_CtlError>
      break;
 800de2c:	e000      	b.n	800de30 <USBD_ClrFeature+0x3c>
      break;
 800de2e:	bf00      	nop
  }
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	781a      	ldrb	r2, [r3, #0]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3301      	adds	r3, #1
 800de52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	781a      	ldrb	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	3301      	adds	r3, #1
 800de60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f7ff fa92 	bl	800d38c <SWAPBYTE>
 800de68:	4603      	mov	r3, r0
 800de6a:	461a      	mov	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	3301      	adds	r3, #1
 800de74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3301      	adds	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7ff fa85 	bl	800d38c <SWAPBYTE>
 800de82:	4603      	mov	r3, r0
 800de84:	461a      	mov	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3301      	adds	r3, #1
 800de8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff fa78 	bl	800d38c <SWAPBYTE>
 800de9c:	4603      	mov	r3, r0
 800de9e:	461a      	mov	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	80da      	strh	r2, [r3, #6]
}
 800dea4:	bf00      	nop
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800deb6:	2180      	movs	r1, #128	@ 0x80
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f004 fa71 	bl	80123a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800debe:	2100      	movs	r1, #0
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f004 fa6d 	bl	80123a0 <USBD_LL_StallEP>
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b086      	sub	sp, #24
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	60f8      	str	r0, [r7, #12]
 800ded6:	60b9      	str	r1, [r7, #8]
 800ded8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800deda:	2300      	movs	r3, #0
 800dedc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d036      	beq.n	800df52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dee8:	6938      	ldr	r0, [r7, #16]
 800deea:	f000 f836 	bl	800df5a <USBD_GetLen>
 800deee:	4603      	mov	r3, r0
 800def0:	3301      	adds	r3, #1
 800def2:	b29b      	uxth	r3, r3
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	b29a      	uxth	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800defc:	7dfb      	ldrb	r3, [r7, #23]
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	4413      	add	r3, r2
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	7812      	ldrb	r2, [r2, #0]
 800df06:	701a      	strb	r2, [r3, #0]
  idx++;
 800df08:	7dfb      	ldrb	r3, [r7, #23]
 800df0a:	3301      	adds	r3, #1
 800df0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	4413      	add	r3, r2
 800df14:	2203      	movs	r2, #3
 800df16:	701a      	strb	r2, [r3, #0]
  idx++;
 800df18:	7dfb      	ldrb	r3, [r7, #23]
 800df1a:	3301      	adds	r3, #1
 800df1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df1e:	e013      	b.n	800df48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df20:	7dfb      	ldrb	r3, [r7, #23]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	4413      	add	r3, r2
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	7812      	ldrb	r2, [r2, #0]
 800df2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	3301      	adds	r3, #1
 800df30:	613b      	str	r3, [r7, #16]
    idx++;
 800df32:	7dfb      	ldrb	r3, [r7, #23]
 800df34:	3301      	adds	r3, #1
 800df36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df38:	7dfb      	ldrb	r3, [r7, #23]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	4413      	add	r3, r2
 800df3e:	2200      	movs	r2, #0
 800df40:	701a      	strb	r2, [r3, #0]
    idx++;
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	3301      	adds	r3, #1
 800df46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1e7      	bne.n	800df20 <USBD_GetString+0x52>
 800df50:	e000      	b.n	800df54 <USBD_GetString+0x86>
    return;
 800df52:	bf00      	nop
  }
}
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df5a:	b480      	push	{r7}
 800df5c:	b085      	sub	sp, #20
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df62:	2300      	movs	r3, #0
 800df64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df6a:	e005      	b.n	800df78 <USBD_GetLen+0x1e>
  {
    len++;
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
 800df6e:	3301      	adds	r3, #1
 800df70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	3301      	adds	r3, #1
 800df76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1f5      	bne.n	800df6c <USBD_GetLen+0x12>
  }

  return len;
 800df80:	7bfb      	ldrb	r3, [r7, #15]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3714      	adds	r7, #20
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b084      	sub	sp, #16
 800df92:	af00      	add	r7, sp, #0
 800df94:	60f8      	str	r0, [r7, #12]
 800df96:	60b9      	str	r1, [r7, #8]
 800df98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2202      	movs	r2, #2
 800df9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f004 fa7c 	bl	80124b2 <USBD_LL_Transmit>

  return USBD_OK;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f004 fa6b 	bl	80124b2 <USBD_LL_Transmit>

  return USBD_OK;
 800dfdc:	2300      	movs	r3, #0
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b084      	sub	sp, #16
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	60f8      	str	r0, [r7, #12]
 800dfee:	60b9      	str	r1, [r7, #8]
 800dff0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2203      	movs	r2, #3
 800dff6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	2100      	movs	r1, #0
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f004 fa6f 	bl	80124f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	2100      	movs	r1, #0
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f004 fa5e 	bl	80124f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b082      	sub	sp, #8
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2204      	movs	r2, #4
 800e04e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e052:	2300      	movs	r3, #0
 800e054:	2200      	movs	r2, #0
 800e056:	2100      	movs	r1, #0
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f004 fa2a 	bl	80124b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e05e:	2300      	movs	r3, #0
}
 800e060:	4618      	mov	r0, r3
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2205      	movs	r2, #5
 800e074:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e078:	2300      	movs	r3, #0
 800e07a:	2200      	movs	r2, #0
 800e07c:	2100      	movs	r1, #0
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f004 fa38 	bl	80124f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
	...

0800e090 <__NVIC_SetPriority>:
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	6039      	str	r1, [r7, #0]
 800e09a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e09c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	db0a      	blt.n	800e0ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	490c      	ldr	r1, [pc, #48]	@ (800e0dc <__NVIC_SetPriority+0x4c>)
 800e0aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0ae:	0112      	lsls	r2, r2, #4
 800e0b0:	b2d2      	uxtb	r2, r2
 800e0b2:	440b      	add	r3, r1
 800e0b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e0b8:	e00a      	b.n	800e0d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	4908      	ldr	r1, [pc, #32]	@ (800e0e0 <__NVIC_SetPriority+0x50>)
 800e0c0:	79fb      	ldrb	r3, [r7, #7]
 800e0c2:	f003 030f 	and.w	r3, r3, #15
 800e0c6:	3b04      	subs	r3, #4
 800e0c8:	0112      	lsls	r2, r2, #4
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	440b      	add	r3, r1
 800e0ce:	761a      	strb	r2, [r3, #24]
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr
 800e0dc:	e000e100 	.word	0xe000e100
 800e0e0:	e000ed00 	.word	0xe000ed00

0800e0e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e0e8:	4b05      	ldr	r3, [pc, #20]	@ (800e100 <SysTick_Handler+0x1c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e0ec:	f002 fc30 	bl	8010950 <xTaskGetSchedulerState>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d001      	beq.n	800e0fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e0f6:	f003 fb27 	bl	8011748 <xPortSysTickHandler>
  }
}
 800e0fa:	bf00      	nop
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	e000e010 	.word	0xe000e010

0800e104 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e108:	2100      	movs	r1, #0
 800e10a:	f06f 0004 	mvn.w	r0, #4
 800e10e:	f7ff ffbf 	bl	800e090 <__NVIC_SetPriority>
#endif
}
 800e112:	bf00      	nop
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e11e:	f3ef 8305 	mrs	r3, IPSR
 800e122:	603b      	str	r3, [r7, #0]
  return(result);
 800e124:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e126:	2b00      	cmp	r3, #0
 800e128:	d003      	beq.n	800e132 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e12a:	f06f 0305 	mvn.w	r3, #5
 800e12e:	607b      	str	r3, [r7, #4]
 800e130:	e00c      	b.n	800e14c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e132:	4b0a      	ldr	r3, [pc, #40]	@ (800e15c <osKernelInitialize+0x44>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d105      	bne.n	800e146 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e13a:	4b08      	ldr	r3, [pc, #32]	@ (800e15c <osKernelInitialize+0x44>)
 800e13c:	2201      	movs	r2, #1
 800e13e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e140:	2300      	movs	r3, #0
 800e142:	607b      	str	r3, [r7, #4]
 800e144:	e002      	b.n	800e14c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e14a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e14c:	687b      	ldr	r3, [r7, #4]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	370c      	adds	r7, #12
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	200022d0 	.word	0x200022d0

0800e160 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e166:	f3ef 8305 	mrs	r3, IPSR
 800e16a:	603b      	str	r3, [r7, #0]
  return(result);
 800e16c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d003      	beq.n	800e17a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e172:	f06f 0305 	mvn.w	r3, #5
 800e176:	607b      	str	r3, [r7, #4]
 800e178:	e010      	b.n	800e19c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e17a:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a8 <osKernelStart+0x48>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d109      	bne.n	800e196 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e182:	f7ff ffbf 	bl	800e104 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e186:	4b08      	ldr	r3, [pc, #32]	@ (800e1a8 <osKernelStart+0x48>)
 800e188:	2202      	movs	r2, #2
 800e18a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e18c:	f001 ff3e 	bl	801000c <vTaskStartScheduler>
      stat = osOK;
 800e190:	2300      	movs	r3, #0
 800e192:	607b      	str	r3, [r7, #4]
 800e194:	e002      	b.n	800e19c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e19a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e19c:	687b      	ldr	r3, [r7, #4]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	200022d0 	.word	0x200022d0

0800e1ac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1b2:	f3ef 8305 	mrs	r3, IPSR
 800e1b6:	603b      	str	r3, [r7, #0]
  return(result);
 800e1b8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e1be:	f002 f853 	bl	8010268 <xTaskGetTickCountFromISR>
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	e002      	b.n	800e1cc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e1c6:	f002 f83f 	bl	8010248 <xTaskGetTickCount>
 800e1ca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e1cc:	687b      	ldr	r3, [r7, #4]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800e1d6:	b480      	push	{r7}
 800e1d8:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800e1da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08e      	sub	sp, #56	@ 0x38
 800e1ec:	af04      	add	r7, sp, #16
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1f8:	f3ef 8305 	mrs	r3, IPSR
 800e1fc:	617b      	str	r3, [r7, #20]
  return(result);
 800e1fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e200:	2b00      	cmp	r3, #0
 800e202:	d17f      	bne.n	800e304 <osThreadNew+0x11c>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d07c      	beq.n	800e304 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800e20a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e20e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e210:	2318      	movs	r3, #24
 800e212:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e214:	2300      	movs	r3, #0
 800e216:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e21c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d045      	beq.n	800e2b0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <osThreadNew+0x4a>
        name = attr->name;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	699b      	ldr	r3, [r3, #24]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d002      	beq.n	800e240 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d008      	beq.n	800e258 <osThreadNew+0x70>
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	2b38      	cmp	r3, #56	@ 0x38
 800e24a:	d805      	bhi.n	800e258 <osThreadNew+0x70>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	f003 0301 	and.w	r3, r3, #1
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <osThreadNew+0x74>
        return (NULL);
 800e258:	2300      	movs	r3, #0
 800e25a:	e054      	b.n	800e306 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	695b      	ldr	r3, [r3, #20]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d003      	beq.n	800e26c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	695b      	ldr	r3, [r3, #20]
 800e268:	089b      	lsrs	r3, r3, #2
 800e26a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00e      	beq.n	800e292 <osThreadNew+0xaa>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	2baf      	cmp	r3, #175	@ 0xaf
 800e27a:	d90a      	bls.n	800e292 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e280:	2b00      	cmp	r3, #0
 800e282:	d006      	beq.n	800e292 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <osThreadNew+0xaa>
        mem = 1;
 800e28c:	2301      	movs	r3, #1
 800e28e:	61bb      	str	r3, [r7, #24]
 800e290:	e010      	b.n	800e2b4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10c      	bne.n	800e2b4 <osThreadNew+0xcc>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d108      	bne.n	800e2b4 <osThreadNew+0xcc>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	691b      	ldr	r3, [r3, #16]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d104      	bne.n	800e2b4 <osThreadNew+0xcc>
          mem = 0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	61bb      	str	r3, [r7, #24]
 800e2ae:	e001      	b.n	800e2b4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d110      	bne.n	800e2dc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e2c2:	9202      	str	r2, [sp, #8]
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	6a3a      	ldr	r2, [r7, #32]
 800e2ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f001 fc31 	bl	800fb38 <xTaskCreateStatic>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	613b      	str	r3, [r7, #16]
 800e2da:	e013      	b.n	800e304 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d110      	bne.n	800e304 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	f107 0310 	add.w	r3, r7, #16
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f001 fc7f 	bl	800fbf8 <xTaskCreate>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d001      	beq.n	800e304 <osThreadNew+0x11c>
            hTask = NULL;
 800e300:	2300      	movs	r3, #0
 800e302:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e304:	693b      	ldr	r3, [r7, #16]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3728      	adds	r7, #40	@ 0x28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e30e:	b580      	push	{r7, lr}
 800e310:	b084      	sub	sp, #16
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e316:	f3ef 8305 	mrs	r3, IPSR
 800e31a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e31c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d003      	beq.n	800e32a <osDelay+0x1c>
    stat = osErrorISR;
 800e322:	f06f 0305 	mvn.w	r3, #5
 800e326:	60fb      	str	r3, [r7, #12]
 800e328:	e007      	b.n	800e33a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <osDelay+0x2c>
      vTaskDelay(ticks);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f001 fe33 	bl	800ffa0 <vTaskDelay>
    }
  }

  return (stat);
 800e33a:	68fb      	ldr	r3, [r7, #12]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3710      	adds	r7, #16
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e344:	b580      	push	{r7, lr}
 800e346:	b088      	sub	sp, #32
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e350:	f3ef 8305 	mrs	r3, IPSR
 800e354:	60bb      	str	r3, [r7, #8]
  return(result);
 800e356:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d174      	bne.n	800e446 <osMutexNew+0x102>
    if (attr != NULL) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <osMutexNew+0x26>
      type = attr->attr_bits;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	61bb      	str	r3, [r7, #24]
 800e368:	e001      	b.n	800e36e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e36a:	2300      	movs	r3, #0
 800e36c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	f003 0301 	and.w	r3, r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <osMutexNew+0x3a>
      rmtx = 1U;
 800e378:	2301      	movs	r3, #1
 800e37a:	617b      	str	r3, [r7, #20]
 800e37c:	e001      	b.n	800e382 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e37e:	2300      	movs	r3, #0
 800e380:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	f003 0308 	and.w	r3, r3, #8
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d15c      	bne.n	800e446 <osMutexNew+0x102>
      mem = -1;
 800e38c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e390:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d015      	beq.n	800e3c4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	689b      	ldr	r3, [r3, #8]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d006      	beq.n	800e3ae <osMutexNew+0x6a>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	2b4f      	cmp	r3, #79	@ 0x4f
 800e3a6:	d902      	bls.n	800e3ae <osMutexNew+0x6a>
          mem = 1;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	613b      	str	r3, [r7, #16]
 800e3ac:	e00c      	b.n	800e3c8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d108      	bne.n	800e3c8 <osMutexNew+0x84>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d104      	bne.n	800e3c8 <osMutexNew+0x84>
            mem = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	613b      	str	r3, [r7, #16]
 800e3c2:	e001      	b.n	800e3c8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d112      	bne.n	800e3f4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d007      	beq.n	800e3e4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	4619      	mov	r1, r3
 800e3da:	2004      	movs	r0, #4
 800e3dc:	f000 fc3f 	bl	800ec5e <xQueueCreateMutexStatic>
 800e3e0:	61f8      	str	r0, [r7, #28]
 800e3e2:	e016      	b.n	800e412 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	f000 fc37 	bl	800ec5e <xQueueCreateMutexStatic>
 800e3f0:	61f8      	str	r0, [r7, #28]
 800e3f2:	e00e      	b.n	800e412 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10b      	bne.n	800e412 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e400:	2004      	movs	r0, #4
 800e402:	f000 fc14 	bl	800ec2e <xQueueCreateMutex>
 800e406:	61f8      	str	r0, [r7, #28]
 800e408:	e003      	b.n	800e412 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e40a:	2001      	movs	r0, #1
 800e40c:	f000 fc0f 	bl	800ec2e <xQueueCreateMutex>
 800e410:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00c      	beq.n	800e432 <osMutexNew+0xee>
        if (attr != NULL) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d003      	beq.n	800e426 <osMutexNew+0xe2>
          name = attr->name;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	e001      	b.n	800e42a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e426:	2300      	movs	r3, #0
 800e428:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e42a:	68f9      	ldr	r1, [r7, #12]
 800e42c:	69f8      	ldr	r0, [r7, #28]
 800e42e:	f001 fafb 	bl	800fa28 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d006      	beq.n	800e446 <osMutexNew+0x102>
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	f043 0301 	orr.w	r3, r3, #1
 800e444:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e446:	69fb      	ldr	r3, [r7, #28]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3720      	adds	r7, #32
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f023 0301 	bic.w	r3, r3, #1
 800e460:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e46e:	f3ef 8305 	mrs	r3, IPSR
 800e472:	60bb      	str	r3, [r7, #8]
  return(result);
 800e474:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e476:	2b00      	cmp	r3, #0
 800e478:	d003      	beq.n	800e482 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e47a:	f06f 0305 	mvn.w	r3, #5
 800e47e:	617b      	str	r3, [r7, #20]
 800e480:	e02c      	b.n	800e4dc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d103      	bne.n	800e490 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e488:	f06f 0303 	mvn.w	r3, #3
 800e48c:	617b      	str	r3, [r7, #20]
 800e48e:	e025      	b.n	800e4dc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d011      	beq.n	800e4ba <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e496:	6839      	ldr	r1, [r7, #0]
 800e498:	6938      	ldr	r0, [r7, #16]
 800e49a:	f000 fc30 	bl	800ecfe <xQueueTakeMutexRecursive>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d01b      	beq.n	800e4dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d003      	beq.n	800e4b2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e4aa:	f06f 0301 	mvn.w	r3, #1
 800e4ae:	617b      	str	r3, [r7, #20]
 800e4b0:	e014      	b.n	800e4dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e4b2:	f06f 0302 	mvn.w	r3, #2
 800e4b6:	617b      	str	r3, [r7, #20]
 800e4b8:	e010      	b.n	800e4dc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e4ba:	6839      	ldr	r1, [r7, #0]
 800e4bc:	6938      	ldr	r0, [r7, #16]
 800e4be:	f000 ffd5 	bl	800f46c <xQueueSemaphoreTake>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d009      	beq.n	800e4dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e4ce:	f06f 0301 	mvn.w	r3, #1
 800e4d2:	617b      	str	r3, [r7, #20]
 800e4d4:	e002      	b.n	800e4dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e4d6:	f06f 0302 	mvn.w	r3, #2
 800e4da:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e4dc:	697b      	ldr	r3, [r7, #20]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3718      	adds	r7, #24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b086      	sub	sp, #24
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f023 0301 	bic.w	r3, r3, #1
 800e4f4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f003 0301 	and.w	r3, r3, #1
 800e4fc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e502:	f3ef 8305 	mrs	r3, IPSR
 800e506:	60bb      	str	r3, [r7, #8]
  return(result);
 800e508:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d003      	beq.n	800e516 <osMutexRelease+0x30>
    stat = osErrorISR;
 800e50e:	f06f 0305 	mvn.w	r3, #5
 800e512:	617b      	str	r3, [r7, #20]
 800e514:	e01f      	b.n	800e556 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d103      	bne.n	800e524 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e51c:	f06f 0303 	mvn.w	r3, #3
 800e520:	617b      	str	r3, [r7, #20]
 800e522:	e018      	b.n	800e556 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d009      	beq.n	800e53e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e52a:	6938      	ldr	r0, [r7, #16]
 800e52c:	f000 fbb2 	bl	800ec94 <xQueueGiveMutexRecursive>
 800e530:	4603      	mov	r3, r0
 800e532:	2b01      	cmp	r3, #1
 800e534:	d00f      	beq.n	800e556 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e536:	f06f 0302 	mvn.w	r3, #2
 800e53a:	617b      	str	r3, [r7, #20]
 800e53c:	e00b      	b.n	800e556 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e53e:	2300      	movs	r3, #0
 800e540:	2200      	movs	r2, #0
 800e542:	2100      	movs	r1, #0
 800e544:	6938      	ldr	r0, [r7, #16]
 800e546:	f000 fc7f 	bl	800ee48 <xQueueGenericSend>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d002      	beq.n	800e556 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e550:	f06f 0302 	mvn.w	r3, #2
 800e554:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e556:	697b      	ldr	r3, [r7, #20]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3718      	adds	r7, #24
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e560:	b580      	push	{r7, lr}
 800e562:	b08a      	sub	sp, #40	@ 0x28
 800e564:	af02      	add	r7, sp, #8
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e56c:	2300      	movs	r3, #0
 800e56e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e570:	f3ef 8305 	mrs	r3, IPSR
 800e574:	613b      	str	r3, [r7, #16]
  return(result);
 800e576:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d175      	bne.n	800e668 <osSemaphoreNew+0x108>
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d072      	beq.n	800e668 <osSemaphoreNew+0x108>
 800e582:	68ba      	ldr	r2, [r7, #8]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	429a      	cmp	r2, r3
 800e588:	d86e      	bhi.n	800e668 <osSemaphoreNew+0x108>
    mem = -1;
 800e58a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e58e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d015      	beq.n	800e5c2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d006      	beq.n	800e5ac <osSemaphoreNew+0x4c>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	2b4f      	cmp	r3, #79	@ 0x4f
 800e5a4:	d902      	bls.n	800e5ac <osSemaphoreNew+0x4c>
        mem = 1;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	61bb      	str	r3, [r7, #24]
 800e5aa:	e00c      	b.n	800e5c6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d108      	bne.n	800e5c6 <osSemaphoreNew+0x66>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d104      	bne.n	800e5c6 <osSemaphoreNew+0x66>
          mem = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	61bb      	str	r3, [r7, #24]
 800e5c0:	e001      	b.n	800e5c6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5cc:	d04c      	beq.n	800e668 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d128      	bne.n	800e626 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d10a      	bne.n	800e5f0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	2203      	movs	r2, #3
 800e5e0:	9200      	str	r2, [sp, #0]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	f000 fa2c 	bl	800ea44 <xQueueGenericCreateStatic>
 800e5ec:	61f8      	str	r0, [r7, #28]
 800e5ee:	e005      	b.n	800e5fc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e5f0:	2203      	movs	r2, #3
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	f000 faa2 	bl	800eb3e <xQueueGenericCreate>
 800e5fa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d022      	beq.n	800e648 <osSemaphoreNew+0xe8>
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d01f      	beq.n	800e648 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e608:	2300      	movs	r3, #0
 800e60a:	2200      	movs	r2, #0
 800e60c:	2100      	movs	r1, #0
 800e60e:	69f8      	ldr	r0, [r7, #28]
 800e610:	f000 fc1a 	bl	800ee48 <xQueueGenericSend>
 800e614:	4603      	mov	r3, r0
 800e616:	2b01      	cmp	r3, #1
 800e618:	d016      	beq.n	800e648 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e61a:	69f8      	ldr	r0, [r7, #28]
 800e61c:	f001 f8b8 	bl	800f790 <vQueueDelete>
            hSemaphore = NULL;
 800e620:	2300      	movs	r3, #0
 800e622:	61fb      	str	r3, [r7, #28]
 800e624:	e010      	b.n	800e648 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d108      	bne.n	800e63e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	461a      	mov	r2, r3
 800e632:	68b9      	ldr	r1, [r7, #8]
 800e634:	68f8      	ldr	r0, [r7, #12]
 800e636:	f000 fb99 	bl	800ed6c <xQueueCreateCountingSemaphoreStatic>
 800e63a:	61f8      	str	r0, [r7, #28]
 800e63c:	e004      	b.n	800e648 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e63e:	68b9      	ldr	r1, [r7, #8]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 fbcc 	bl	800edde <xQueueCreateCountingSemaphore>
 800e646:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00c      	beq.n	800e668 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d003      	beq.n	800e65c <osSemaphoreNew+0xfc>
          name = attr->name;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	617b      	str	r3, [r7, #20]
 800e65a:	e001      	b.n	800e660 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e65c:	2300      	movs	r3, #0
 800e65e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e660:	6979      	ldr	r1, [r7, #20]
 800e662:	69f8      	ldr	r0, [r7, #28]
 800e664:	f001 f9e0 	bl	800fa28 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e668:	69fb      	ldr	r3, [r7, #28]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3720      	adds	r7, #32
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
	...

0800e674 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e674:	b580      	push	{r7, lr}
 800e676:	b086      	sub	sp, #24
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e682:	2300      	movs	r3, #0
 800e684:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d103      	bne.n	800e694 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e68c:	f06f 0303 	mvn.w	r3, #3
 800e690:	617b      	str	r3, [r7, #20]
 800e692:	e039      	b.n	800e708 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e694:	f3ef 8305 	mrs	r3, IPSR
 800e698:	60fb      	str	r3, [r7, #12]
  return(result);
 800e69a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d022      	beq.n	800e6e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e6a6:	f06f 0303 	mvn.w	r3, #3
 800e6aa:	617b      	str	r3, [r7, #20]
 800e6ac:	e02c      	b.n	800e708 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e6b2:	f107 0308 	add.w	r3, r7, #8
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	6938      	ldr	r0, [r7, #16]
 800e6bc:	f000 ffe6 	bl	800f68c <xQueueReceiveFromISR>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d003      	beq.n	800e6ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e6c6:	f06f 0302 	mvn.w	r3, #2
 800e6ca:	617b      	str	r3, [r7, #20]
 800e6cc:	e01c      	b.n	800e708 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d019      	beq.n	800e708 <osSemaphoreAcquire+0x94>
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	@ (800e714 <osSemaphoreAcquire+0xa0>)
 800e6d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	e010      	b.n	800e708 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e6e6:	6839      	ldr	r1, [r7, #0]
 800e6e8:	6938      	ldr	r0, [r7, #16]
 800e6ea:	f000 febf 	bl	800f46c <xQueueSemaphoreTake>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d009      	beq.n	800e708 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d003      	beq.n	800e702 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e6fa:	f06f 0301 	mvn.w	r3, #1
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	e002      	b.n	800e708 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e702:	f06f 0302 	mvn.w	r3, #2
 800e706:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e708:	697b      	ldr	r3, [r7, #20]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3718      	adds	r7, #24
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	e000ed04 	.word	0xe000ed04

0800e718 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e724:	2300      	movs	r3, #0
 800e726:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d103      	bne.n	800e736 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e72e:	f06f 0303 	mvn.w	r3, #3
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	e02c      	b.n	800e790 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e736:	f3ef 8305 	mrs	r3, IPSR
 800e73a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e73c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d01a      	beq.n	800e778 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e742:	2300      	movs	r3, #0
 800e744:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e746:	f107 0308 	add.w	r3, r7, #8
 800e74a:	4619      	mov	r1, r3
 800e74c:	6938      	ldr	r0, [r7, #16]
 800e74e:	f000 fd1b 	bl	800f188 <xQueueGiveFromISR>
 800e752:	4603      	mov	r3, r0
 800e754:	2b01      	cmp	r3, #1
 800e756:	d003      	beq.n	800e760 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e758:	f06f 0302 	mvn.w	r3, #2
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	e017      	b.n	800e790 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d014      	beq.n	800e790 <osSemaphoreRelease+0x78>
 800e766:	4b0d      	ldr	r3, [pc, #52]	@ (800e79c <osSemaphoreRelease+0x84>)
 800e768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	e00b      	b.n	800e790 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e778:	2300      	movs	r3, #0
 800e77a:	2200      	movs	r2, #0
 800e77c:	2100      	movs	r1, #0
 800e77e:	6938      	ldr	r0, [r7, #16]
 800e780:	f000 fb62 	bl	800ee48 <xQueueGenericSend>
 800e784:	4603      	mov	r3, r0
 800e786:	2b01      	cmp	r3, #1
 800e788:	d002      	beq.n	800e790 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e78a:	f06f 0302 	mvn.w	r3, #2
 800e78e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e790:	697b      	ldr	r3, [r7, #20]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	e000ed04 	.word	0xe000ed04

0800e7a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e7a0:	b480      	push	{r7}
 800e7a2:	b085      	sub	sp, #20
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4a07      	ldr	r2, [pc, #28]	@ (800e7cc <vApplicationGetIdleTaskMemory+0x2c>)
 800e7b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	4a06      	ldr	r2, [pc, #24]	@ (800e7d0 <vApplicationGetIdleTaskMemory+0x30>)
 800e7b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e7be:	601a      	str	r2, [r3, #0]
}
 800e7c0:	bf00      	nop
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	200022d4 	.word	0x200022d4
 800e7d0:	20002384 	.word	0x20002384

0800e7d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	4a07      	ldr	r2, [pc, #28]	@ (800e800 <vApplicationGetTimerTaskMemory+0x2c>)
 800e7e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	4a06      	ldr	r2, [pc, #24]	@ (800e804 <vApplicationGetTimerTaskMemory+0x30>)
 800e7ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7f2:	601a      	str	r2, [r3, #0]
}
 800e7f4:	bf00      	nop
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	20002784 	.word	0x20002784
 800e804:	20002834 	.word	0x20002834

0800e808 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f103 0208 	add.w	r2, r3, #8
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e820:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f103 0208 	add.w	r2, r3, #8
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f103 0208 	add.w	r2, r3, #8
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e856:	bf00      	nop
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e862:	b480      	push	{r7}
 800e864:	b085      	sub	sp, #20
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	689a      	ldr	r2, [r3, #8]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	683a      	ldr	r2, [r7, #0]
 800e886:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	1c5a      	adds	r2, r3, #1
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	601a      	str	r2, [r3, #0]
}
 800e89e:	bf00      	nop
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b085      	sub	sp, #20
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8c0:	d103      	bne.n	800e8ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	60fb      	str	r3, [r7, #12]
 800e8c8:	e00c      	b.n	800e8e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3308      	adds	r3, #8
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	e002      	b.n	800e8d8 <vListInsert+0x2e>
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	60fb      	str	r3, [r7, #12]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68ba      	ldr	r2, [r7, #8]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d2f6      	bcs.n	800e8d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	683a      	ldr	r2, [r7, #0]
 800e8f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	1c5a      	adds	r2, r3, #1
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	601a      	str	r2, [r3, #0]
}
 800e910:	bf00      	nop
 800e912:	3714      	adds	r7, #20
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	691b      	ldr	r3, [r3, #16]
 800e928:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	6892      	ldr	r2, [r2, #8]
 800e932:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	6852      	ldr	r2, [r2, #4]
 800e93c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	429a      	cmp	r2, r3
 800e946:	d103      	bne.n	800e950 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	689a      	ldr	r2, [r3, #8]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	1e5a      	subs	r2, r3, #1
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3714      	adds	r7, #20
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d10b      	bne.n	800e99c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e988:	f383 8811 	msr	BASEPRI, r3
 800e98c:	f3bf 8f6f 	isb	sy
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e996:	bf00      	nop
 800e998:	bf00      	nop
 800e99a:	e7fd      	b.n	800e998 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e99c:	f002 fe44 	bl	8011628 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9a8:	68f9      	ldr	r1, [r7, #12]
 800e9aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e9ac:	fb01 f303 	mul.w	r3, r1, r3
 800e9b0:	441a      	add	r2, r3
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	68f9      	ldr	r1, [r7, #12]
 800e9d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e9d2:	fb01 f303 	mul.w	r3, r1, r3
 800e9d6:	441a      	add	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	22ff      	movs	r2, #255	@ 0xff
 800e9e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	22ff      	movs	r2, #255	@ 0xff
 800e9e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d114      	bne.n	800ea1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d01a      	beq.n	800ea30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3310      	adds	r3, #16
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f001 fdd0 	bl	80105a4 <xTaskRemoveFromEventList>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d012      	beq.n	800ea30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ea0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea40 <xQueueGenericReset+0xd0>)
 800ea0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea10:	601a      	str	r2, [r3, #0]
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	e009      	b.n	800ea30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	3310      	adds	r3, #16
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff fef1 	bl	800e808 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3324      	adds	r3, #36	@ 0x24
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7ff feec 	bl	800e808 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ea30:	f002 fe2c 	bl	801168c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ea34:	2301      	movs	r3, #1
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	e000ed04 	.word	0xe000ed04

0800ea44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b08e      	sub	sp, #56	@ 0x38
 800ea48:	af02      	add	r7, sp, #8
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10b      	bne.n	800ea70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ea58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea5c:	f383 8811 	msr	BASEPRI, r3
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ea6a:	bf00      	nop
 800ea6c:	bf00      	nop
 800ea6e:	e7fd      	b.n	800ea6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10b      	bne.n	800ea8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ea76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	e7fd      	b.n	800ea8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <xQueueGenericCreateStatic+0x56>
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d001      	beq.n	800ea9e <xQueueGenericCreateStatic+0x5a>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e000      	b.n	800eaa0 <xQueueGenericCreateStatic+0x5c>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10b      	bne.n	800eabc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	623b      	str	r3, [r7, #32]
}
 800eab6:	bf00      	nop
 800eab8:	bf00      	nop
 800eaba:	e7fd      	b.n	800eab8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d102      	bne.n	800eac8 <xQueueGenericCreateStatic+0x84>
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d101      	bne.n	800eacc <xQueueGenericCreateStatic+0x88>
 800eac8:	2301      	movs	r3, #1
 800eaca:	e000      	b.n	800eace <xQueueGenericCreateStatic+0x8a>
 800eacc:	2300      	movs	r3, #0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10b      	bne.n	800eaea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ead2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead6:	f383 8811 	msr	BASEPRI, r3
 800eada:	f3bf 8f6f 	isb	sy
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	61fb      	str	r3, [r7, #28]
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
 800eae8:	e7fd      	b.n	800eae6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800eaea:	2350      	movs	r3, #80	@ 0x50
 800eaec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	2b50      	cmp	r3, #80	@ 0x50
 800eaf2:	d00b      	beq.n	800eb0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	61bb      	str	r3, [r7, #24]
}
 800eb06:	bf00      	nop
 800eb08:	bf00      	nop
 800eb0a:	e7fd      	b.n	800eb08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eb0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800eb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00d      	beq.n	800eb34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eb20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800eb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f000 f840 	bl	800ebb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3730      	adds	r7, #48	@ 0x30
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b08a      	sub	sp, #40	@ 0x28
 800eb42:	af02      	add	r7, sp, #8
 800eb44:	60f8      	str	r0, [r7, #12]
 800eb46:	60b9      	str	r1, [r7, #8]
 800eb48:	4613      	mov	r3, r2
 800eb4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10b      	bne.n	800eb6a <xQueueGenericCreate+0x2c>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	613b      	str	r3, [r7, #16]
}
 800eb64:	bf00      	nop
 800eb66:	bf00      	nop
 800eb68:	e7fd      	b.n	800eb66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	68ba      	ldr	r2, [r7, #8]
 800eb6e:	fb02 f303 	mul.w	r3, r2, r3
 800eb72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	3350      	adds	r3, #80	@ 0x50
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f002 fe77 	bl	801186c <pvPortMalloc>
 800eb7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d011      	beq.n	800ebaa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	3350      	adds	r3, #80	@ 0x50
 800eb8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eb98:	79fa      	ldrb	r2, [r7, #7]
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	697a      	ldr	r2, [r7, #20]
 800eba2:	68b9      	ldr	r1, [r7, #8]
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 f805 	bl	800ebb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ebaa:	69bb      	ldr	r3, [r7, #24]
	}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3720      	adds	r7, #32
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
 800ebc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d103      	bne.n	800ebd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	69ba      	ldr	r2, [r7, #24]
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	e002      	b.n	800ebd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	69b8      	ldr	r0, [r7, #24]
 800ebe6:	f7ff fec3 	bl	800e970 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	78fa      	ldrb	r2, [r7, #3]
 800ebee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ebf2:	bf00      	nop
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00e      	beq.n	800ec26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	2100      	movs	r1, #0
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 f911 	bl	800ee48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ec26:	bf00      	nop
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b086      	sub	sp, #24
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	4603      	mov	r3, r0
 800ec36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	617b      	str	r3, [r7, #20]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ec40:	79fb      	ldrb	r3, [r7, #7]
 800ec42:	461a      	mov	r2, r3
 800ec44:	6939      	ldr	r1, [r7, #16]
 800ec46:	6978      	ldr	r0, [r7, #20]
 800ec48:	f7ff ff79 	bl	800eb3e <xQueueGenericCreate>
 800ec4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f7ff ffd3 	bl	800ebfa <prvInitialiseMutex>

		return xNewQueue;
 800ec54:	68fb      	ldr	r3, [r7, #12]
	}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b088      	sub	sp, #32
 800ec62:	af02      	add	r7, sp, #8
 800ec64:	4603      	mov	r3, r0
 800ec66:	6039      	str	r1, [r7, #0]
 800ec68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	617b      	str	r3, [r7, #20]
 800ec6e:	2300      	movs	r3, #0
 800ec70:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	6939      	ldr	r1, [r7, #16]
 800ec7c:	6978      	ldr	r0, [r7, #20]
 800ec7e:	f7ff fee1 	bl	800ea44 <xQueueGenericCreateStatic>
 800ec82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7ff ffb8 	bl	800ebfa <prvInitialiseMutex>

		return xNewQueue;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
	}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ec94:	b590      	push	{r4, r7, lr}
 800ec96:	b087      	sub	sp, #28
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10b      	bne.n	800ecbe <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	60fb      	str	r3, [r7, #12]
}
 800ecb8:	bf00      	nop
 800ecba:	bf00      	nop
 800ecbc:	e7fd      	b.n	800ecba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	689c      	ldr	r4, [r3, #8]
 800ecc2:	f001 fe35 	bl	8010930 <xTaskGetCurrentTaskHandle>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	429c      	cmp	r4, r3
 800ecca:	d111      	bne.n	800ecf0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	1e5a      	subs	r2, r3, #1
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d105      	bne.n	800ecea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ecde:	2300      	movs	r3, #0
 800ece0:	2200      	movs	r2, #0
 800ece2:	2100      	movs	r1, #0
 800ece4:	6938      	ldr	r0, [r7, #16]
 800ece6:	f000 f8af 	bl	800ee48 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ecea:	2301      	movs	r3, #1
 800ecec:	617b      	str	r3, [r7, #20]
 800ecee:	e001      	b.n	800ecf4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ecf4:	697b      	ldr	r3, [r7, #20]
	}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	371c      	adds	r7, #28
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd90      	pop	{r4, r7, pc}

0800ecfe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ecfe:	b590      	push	{r4, r7, lr}
 800ed00:	b087      	sub	sp, #28
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d10b      	bne.n	800ed2a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800ed12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed16:	f383 8811 	msr	BASEPRI, r3
 800ed1a:	f3bf 8f6f 	isb	sy
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	60fb      	str	r3, [r7, #12]
}
 800ed24:	bf00      	nop
 800ed26:	bf00      	nop
 800ed28:	e7fd      	b.n	800ed26 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	689c      	ldr	r4, [r3, #8]
 800ed2e:	f001 fdff 	bl	8010930 <xTaskGetCurrentTaskHandle>
 800ed32:	4603      	mov	r3, r0
 800ed34:	429c      	cmp	r4, r3
 800ed36:	d107      	bne.n	800ed48 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ed42:	2301      	movs	r3, #1
 800ed44:	617b      	str	r3, [r7, #20]
 800ed46:	e00c      	b.n	800ed62 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ed48:	6839      	ldr	r1, [r7, #0]
 800ed4a:	6938      	ldr	r0, [r7, #16]
 800ed4c:	f000 fb8e 	bl	800f46c <xQueueSemaphoreTake>
 800ed50:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d004      	beq.n	800ed62 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	1c5a      	adds	r2, r3, #1
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ed62:	697b      	ldr	r3, [r7, #20]
	}
 800ed64:	4618      	mov	r0, r3
 800ed66:	371c      	adds	r7, #28
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd90      	pop	{r4, r7, pc}

0800ed6c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b08a      	sub	sp, #40	@ 0x28
 800ed70:	af02      	add	r7, sp, #8
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d10b      	bne.n	800ed96 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800ed7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed82:	f383 8811 	msr	BASEPRI, r3
 800ed86:	f3bf 8f6f 	isb	sy
 800ed8a:	f3bf 8f4f 	dsb	sy
 800ed8e:	61bb      	str	r3, [r7, #24]
}
 800ed90:	bf00      	nop
 800ed92:	bf00      	nop
 800ed94:	e7fd      	b.n	800ed92 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ed96:	68ba      	ldr	r2, [r7, #8]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d90b      	bls.n	800edb6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800ed9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	617b      	str	r3, [r7, #20]
}
 800edb0:	bf00      	nop
 800edb2:	bf00      	nop
 800edb4:	e7fd      	b.n	800edb2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800edb6:	2302      	movs	r3, #2
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	2100      	movs	r1, #0
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f7ff fe3f 	bl	800ea44 <xQueueGenericCreateStatic>
 800edc6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d002      	beq.n	800edd4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800edd4:	69fb      	ldr	r3, [r7, #28]
	}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3720      	adds	r7, #32
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b086      	sub	sp, #24
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10b      	bne.n	800ee06 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800edee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	613b      	str	r3, [r7, #16]
}
 800ee00:	bf00      	nop
 800ee02:	bf00      	nop
 800ee04:	e7fd      	b.n	800ee02 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ee06:	683a      	ldr	r2, [r7, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d90b      	bls.n	800ee26 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	60fb      	str	r3, [r7, #12]
}
 800ee20:	bf00      	nop
 800ee22:	bf00      	nop
 800ee24:	e7fd      	b.n	800ee22 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ee26:	2202      	movs	r2, #2
 800ee28:	2100      	movs	r1, #0
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7ff fe87 	bl	800eb3e <xQueueGenericCreate>
 800ee30:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d002      	beq.n	800ee3e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	683a      	ldr	r2, [r7, #0]
 800ee3c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ee3e:	697b      	ldr	r3, [r7, #20]
	}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3718      	adds	r7, #24
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b08e      	sub	sp, #56	@ 0x38
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
 800ee54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee56:	2300      	movs	r3, #0
 800ee58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d10b      	bne.n	800ee7c <xQueueGenericSend+0x34>
	__asm volatile
 800ee64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee68:	f383 8811 	msr	BASEPRI, r3
 800ee6c:	f3bf 8f6f 	isb	sy
 800ee70:	f3bf 8f4f 	dsb	sy
 800ee74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ee76:	bf00      	nop
 800ee78:	bf00      	nop
 800ee7a:	e7fd      	b.n	800ee78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d103      	bne.n	800ee8a <xQueueGenericSend+0x42>
 800ee82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d101      	bne.n	800ee8e <xQueueGenericSend+0x46>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e000      	b.n	800ee90 <xQueueGenericSend+0x48>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10b      	bne.n	800eeac <xQueueGenericSend+0x64>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eea6:	bf00      	nop
 800eea8:	bf00      	nop
 800eeaa:	e7fd      	b.n	800eea8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	d103      	bne.n	800eeba <xQueueGenericSend+0x72>
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d101      	bne.n	800eebe <xQueueGenericSend+0x76>
 800eeba:	2301      	movs	r3, #1
 800eebc:	e000      	b.n	800eec0 <xQueueGenericSend+0x78>
 800eebe:	2300      	movs	r3, #0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10b      	bne.n	800eedc <xQueueGenericSend+0x94>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	623b      	str	r3, [r7, #32]
}
 800eed6:	bf00      	nop
 800eed8:	bf00      	nop
 800eeda:	e7fd      	b.n	800eed8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eedc:	f001 fd38 	bl	8010950 <xTaskGetSchedulerState>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d102      	bne.n	800eeec <xQueueGenericSend+0xa4>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d101      	bne.n	800eef0 <xQueueGenericSend+0xa8>
 800eeec:	2301      	movs	r3, #1
 800eeee:	e000      	b.n	800eef2 <xQueueGenericSend+0xaa>
 800eef0:	2300      	movs	r3, #0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d10b      	bne.n	800ef0e <xQueueGenericSend+0xc6>
	__asm volatile
 800eef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eefa:	f383 8811 	msr	BASEPRI, r3
 800eefe:	f3bf 8f6f 	isb	sy
 800ef02:	f3bf 8f4f 	dsb	sy
 800ef06:	61fb      	str	r3, [r7, #28]
}
 800ef08:	bf00      	nop
 800ef0a:	bf00      	nop
 800ef0c:	e7fd      	b.n	800ef0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef0e:	f002 fb8b 	bl	8011628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d302      	bcc.n	800ef24 <xQueueGenericSend+0xdc>
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d129      	bne.n	800ef78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef24:	683a      	ldr	r2, [r7, #0]
 800ef26:	68b9      	ldr	r1, [r7, #8]
 800ef28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef2a:	f000 fc6d 	bl	800f808 <prvCopyDataToQueue>
 800ef2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d010      	beq.n	800ef5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3a:	3324      	adds	r3, #36	@ 0x24
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f001 fb31 	bl	80105a4 <xTaskRemoveFromEventList>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d013      	beq.n	800ef70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef48:	4b3f      	ldr	r3, [pc, #252]	@ (800f048 <xQueueGenericSend+0x200>)
 800ef4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef4e:	601a      	str	r2, [r3, #0]
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	e00a      	b.n	800ef70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d007      	beq.n	800ef70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef60:	4b39      	ldr	r3, [pc, #228]	@ (800f048 <xQueueGenericSend+0x200>)
 800ef62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef70:	f002 fb8c 	bl	801168c <vPortExitCritical>
				return pdPASS;
 800ef74:	2301      	movs	r3, #1
 800ef76:	e063      	b.n	800f040 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d103      	bne.n	800ef86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef7e:	f002 fb85 	bl	801168c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	e05c      	b.n	800f040 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d106      	bne.n	800ef9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef8c:	f107 0314 	add.w	r3, r7, #20
 800ef90:	4618      	mov	r0, r3
 800ef92:	f001 fb6b 	bl	801066c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef96:	2301      	movs	r3, #1
 800ef98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef9a:	f002 fb77 	bl	801168c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef9e:	f001 f8a7 	bl	80100f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efa2:	f002 fb41 	bl	8011628 <vPortEnterCritical>
 800efa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800efac:	b25b      	sxtb	r3, r3
 800efae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efb2:	d103      	bne.n	800efbc <xQueueGenericSend+0x174>
 800efb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb6:	2200      	movs	r2, #0
 800efb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efc2:	b25b      	sxtb	r3, r3
 800efc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efc8:	d103      	bne.n	800efd2 <xQueueGenericSend+0x18a>
 800efca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efd2:	f002 fb5b 	bl	801168c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efd6:	1d3a      	adds	r2, r7, #4
 800efd8:	f107 0314 	add.w	r3, r7, #20
 800efdc:	4611      	mov	r1, r2
 800efde:	4618      	mov	r0, r3
 800efe0:	f001 fb5a 	bl	8010698 <xTaskCheckForTimeOut>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d124      	bne.n	800f034 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800efea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800efec:	f000 fd04 	bl	800f9f8 <prvIsQueueFull>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d018      	beq.n	800f028 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff8:	3310      	adds	r3, #16
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	4611      	mov	r1, r2
 800effe:	4618      	mov	r0, r3
 800f000:	f001 fa7e 	bl	8010500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f006:	f000 fc8f 	bl	800f928 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f00a:	f001 f87f 	bl	801010c <xTaskResumeAll>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	f47f af7c 	bne.w	800ef0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f016:	4b0c      	ldr	r3, [pc, #48]	@ (800f048 <xQueueGenericSend+0x200>)
 800f018:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f01c:	601a      	str	r2, [r3, #0]
 800f01e:	f3bf 8f4f 	dsb	sy
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	e772      	b.n	800ef0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f02a:	f000 fc7d 	bl	800f928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f02e:	f001 f86d 	bl	801010c <xTaskResumeAll>
 800f032:	e76c      	b.n	800ef0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f036:	f000 fc77 	bl	800f928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f03a:	f001 f867 	bl	801010c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f03e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f040:	4618      	mov	r0, r3
 800f042:	3738      	adds	r7, #56	@ 0x38
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	e000ed04 	.word	0xe000ed04

0800f04c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b090      	sub	sp, #64	@ 0x40
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
 800f058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f060:	2b00      	cmp	r3, #0
 800f062:	d10b      	bne.n	800f07c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f068:	f383 8811 	msr	BASEPRI, r3
 800f06c:	f3bf 8f6f 	isb	sy
 800f070:	f3bf 8f4f 	dsb	sy
 800f074:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f076:	bf00      	nop
 800f078:	bf00      	nop
 800f07a:	e7fd      	b.n	800f078 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d103      	bne.n	800f08a <xQueueGenericSendFromISR+0x3e>
 800f082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f086:	2b00      	cmp	r3, #0
 800f088:	d101      	bne.n	800f08e <xQueueGenericSendFromISR+0x42>
 800f08a:	2301      	movs	r3, #1
 800f08c:	e000      	b.n	800f090 <xQueueGenericSendFromISR+0x44>
 800f08e:	2300      	movs	r3, #0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d10b      	bne.n	800f0ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f0a6:	bf00      	nop
 800f0a8:	bf00      	nop
 800f0aa:	e7fd      	b.n	800f0a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	d103      	bne.n	800f0ba <xQueueGenericSendFromISR+0x6e>
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d101      	bne.n	800f0be <xQueueGenericSendFromISR+0x72>
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	e000      	b.n	800f0c0 <xQueueGenericSendFromISR+0x74>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10b      	bne.n	800f0dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c8:	f383 8811 	msr	BASEPRI, r3
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	f3bf 8f4f 	dsb	sy
 800f0d4:	623b      	str	r3, [r7, #32]
}
 800f0d6:	bf00      	nop
 800f0d8:	bf00      	nop
 800f0da:	e7fd      	b.n	800f0d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0dc:	f002 fb84 	bl	80117e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f0e0:	f3ef 8211 	mrs	r2, BASEPRI
 800f0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e8:	f383 8811 	msr	BASEPRI, r3
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f3bf 8f4f 	dsb	sy
 800f0f4:	61fa      	str	r2, [r7, #28]
 800f0f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f0f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f104:	429a      	cmp	r2, r3
 800f106:	d302      	bcc.n	800f10e <xQueueGenericSendFromISR+0xc2>
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d12f      	bne.n	800f16e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f110:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f114:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	68b9      	ldr	r1, [r7, #8]
 800f122:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f124:	f000 fb70 	bl	800f808 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f128:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f12c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f130:	d112      	bne.n	800f158 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f136:	2b00      	cmp	r3, #0
 800f138:	d016      	beq.n	800f168 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f13c:	3324      	adds	r3, #36	@ 0x24
 800f13e:	4618      	mov	r0, r3
 800f140:	f001 fa30 	bl	80105a4 <xTaskRemoveFromEventList>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00e      	beq.n	800f168 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00b      	beq.n	800f168 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2201      	movs	r2, #1
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	e007      	b.n	800f168 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f158:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f15c:	3301      	adds	r3, #1
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	b25a      	sxtb	r2, r3
 800f162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f168:	2301      	movs	r3, #1
 800f16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f16c:	e001      	b.n	800f172 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f16e:	2300      	movs	r3, #0
 800f170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f174:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f17c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f180:	4618      	mov	r0, r3
 800f182:	3740      	adds	r7, #64	@ 0x40
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08e      	sub	sp, #56	@ 0x38
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d10b      	bne.n	800f1b4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a0:	f383 8811 	msr	BASEPRI, r3
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	623b      	str	r3, [r7, #32]
}
 800f1ae:	bf00      	nop
 800f1b0:	bf00      	nop
 800f1b2:	e7fd      	b.n	800f1b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00b      	beq.n	800f1d4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c0:	f383 8811 	msr	BASEPRI, r3
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	61fb      	str	r3, [r7, #28]
}
 800f1ce:	bf00      	nop
 800f1d0:	bf00      	nop
 800f1d2:	e7fd      	b.n	800f1d0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d103      	bne.n	800f1e4 <xQueueGiveFromISR+0x5c>
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <xQueueGiveFromISR+0x60>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e000      	b.n	800f1ea <xQueueGiveFromISR+0x62>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d10b      	bne.n	800f206 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f2:	f383 8811 	msr	BASEPRI, r3
 800f1f6:	f3bf 8f6f 	isb	sy
 800f1fa:	f3bf 8f4f 	dsb	sy
 800f1fe:	61bb      	str	r3, [r7, #24]
}
 800f200:	bf00      	nop
 800f202:	bf00      	nop
 800f204:	e7fd      	b.n	800f202 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f206:	f002 faef 	bl	80117e8 <vPortValidateInterruptPriority>
	__asm volatile
 800f20a:	f3ef 8211 	mrs	r2, BASEPRI
 800f20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	617a      	str	r2, [r7, #20]
 800f220:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f222:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f22a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f232:	429a      	cmp	r2, r3
 800f234:	d22b      	bcs.n	800f28e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f23c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f242:	1c5a      	adds	r2, r3, #1
 800f244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f246:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f248:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f24c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f250:	d112      	bne.n	800f278 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f256:	2b00      	cmp	r3, #0
 800f258:	d016      	beq.n	800f288 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f25c:	3324      	adds	r3, #36	@ 0x24
 800f25e:	4618      	mov	r0, r3
 800f260:	f001 f9a0 	bl	80105a4 <xTaskRemoveFromEventList>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00e      	beq.n	800f288 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d00b      	beq.n	800f288 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	2201      	movs	r2, #1
 800f274:	601a      	str	r2, [r3, #0]
 800f276:	e007      	b.n	800f288 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f27c:	3301      	adds	r3, #1
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	b25a      	sxtb	r2, r3
 800f282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f288:	2301      	movs	r3, #1
 800f28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f28c:	e001      	b.n	800f292 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f28e:	2300      	movs	r3, #0
 800f290:	637b      	str	r3, [r7, #52]	@ 0x34
 800f292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f294:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f383 8811 	msr	BASEPRI, r3
}
 800f29c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3738      	adds	r7, #56	@ 0x38
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08c      	sub	sp, #48	@ 0x30
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10b      	bne.n	800f2da <xQueueReceive+0x32>
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	623b      	str	r3, [r7, #32]
}
 800f2d4:	bf00      	nop
 800f2d6:	bf00      	nop
 800f2d8:	e7fd      	b.n	800f2d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d103      	bne.n	800f2e8 <xQueueReceive+0x40>
 800f2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <xQueueReceive+0x44>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	e000      	b.n	800f2ee <xQueueReceive+0x46>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10b      	bne.n	800f30a <xQueueReceive+0x62>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	61fb      	str	r3, [r7, #28]
}
 800f304:	bf00      	nop
 800f306:	bf00      	nop
 800f308:	e7fd      	b.n	800f306 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f30a:	f001 fb21 	bl	8010950 <xTaskGetSchedulerState>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d102      	bne.n	800f31a <xQueueReceive+0x72>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <xQueueReceive+0x76>
 800f31a:	2301      	movs	r3, #1
 800f31c:	e000      	b.n	800f320 <xQueueReceive+0x78>
 800f31e:	2300      	movs	r3, #0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d10b      	bne.n	800f33c <xQueueReceive+0x94>
	__asm volatile
 800f324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	61bb      	str	r3, [r7, #24]
}
 800f336:	bf00      	nop
 800f338:	bf00      	nop
 800f33a:	e7fd      	b.n	800f338 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f33c:	f002 f974 	bl	8011628 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f344:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d01f      	beq.n	800f38c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f34c:	68b9      	ldr	r1, [r7, #8]
 800f34e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f350:	f000 fac4 	bl	800f8dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f356:	1e5a      	subs	r2, r3, #1
 800f358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00f      	beq.n	800f384 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f366:	3310      	adds	r3, #16
 800f368:	4618      	mov	r0, r3
 800f36a:	f001 f91b 	bl	80105a4 <xTaskRemoveFromEventList>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d007      	beq.n	800f384 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f374:	4b3c      	ldr	r3, [pc, #240]	@ (800f468 <xQueueReceive+0x1c0>)
 800f376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f384:	f002 f982 	bl	801168c <vPortExitCritical>
				return pdPASS;
 800f388:	2301      	movs	r3, #1
 800f38a:	e069      	b.n	800f460 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d103      	bne.n	800f39a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f392:	f002 f97b 	bl	801168c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f396:	2300      	movs	r3, #0
 800f398:	e062      	b.n	800f460 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d106      	bne.n	800f3ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3a0:	f107 0310 	add.w	r3, r7, #16
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f001 f961 	bl	801066c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3ae:	f002 f96d 	bl	801168c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f3b2:	f000 fe9d 	bl	80100f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3b6:	f002 f937 	bl	8011628 <vPortEnterCritical>
 800f3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f3c0:	b25b      	sxtb	r3, r3
 800f3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3c6:	d103      	bne.n	800f3d0 <xQueueReceive+0x128>
 800f3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f3d6:	b25b      	sxtb	r3, r3
 800f3d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3dc:	d103      	bne.n	800f3e6 <xQueueReceive+0x13e>
 800f3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f3e6:	f002 f951 	bl	801168c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3ea:	1d3a      	adds	r2, r7, #4
 800f3ec:	f107 0310 	add.w	r3, r7, #16
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f001 f950 	bl	8010698 <xTaskCheckForTimeOut>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d123      	bne.n	800f446 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f400:	f000 fae4 	bl	800f9cc <prvIsQueueEmpty>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d017      	beq.n	800f43a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f40c:	3324      	adds	r3, #36	@ 0x24
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	4611      	mov	r1, r2
 800f412:	4618      	mov	r0, r3
 800f414:	f001 f874 	bl	8010500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f41a:	f000 fa85 	bl	800f928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f41e:	f000 fe75 	bl	801010c <xTaskResumeAll>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d189      	bne.n	800f33c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f428:	4b0f      	ldr	r3, [pc, #60]	@ (800f468 <xQueueReceive+0x1c0>)
 800f42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f42e:	601a      	str	r2, [r3, #0]
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	e780      	b.n	800f33c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f43a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f43c:	f000 fa74 	bl	800f928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f440:	f000 fe64 	bl	801010c <xTaskResumeAll>
 800f444:	e77a      	b.n	800f33c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f448:	f000 fa6e 	bl	800f928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f44c:	f000 fe5e 	bl	801010c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f452:	f000 fabb 	bl	800f9cc <prvIsQueueEmpty>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f43f af6f 	beq.w	800f33c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f45e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f460:	4618      	mov	r0, r3
 800f462:	3730      	adds	r7, #48	@ 0x30
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	e000ed04 	.word	0xe000ed04

0800f46c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08e      	sub	sp, #56	@ 0x38
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f476:	2300      	movs	r3, #0
 800f478:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f47e:	2300      	movs	r3, #0
 800f480:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10b      	bne.n	800f4a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	623b      	str	r3, [r7, #32]
}
 800f49a:	bf00      	nop
 800f49c:	bf00      	nop
 800f49e:	e7fd      	b.n	800f49c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d00b      	beq.n	800f4c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ac:	f383 8811 	msr	BASEPRI, r3
 800f4b0:	f3bf 8f6f 	isb	sy
 800f4b4:	f3bf 8f4f 	dsb	sy
 800f4b8:	61fb      	str	r3, [r7, #28]
}
 800f4ba:	bf00      	nop
 800f4bc:	bf00      	nop
 800f4be:	e7fd      	b.n	800f4bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f4c0:	f001 fa46 	bl	8010950 <xTaskGetSchedulerState>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d102      	bne.n	800f4d0 <xQueueSemaphoreTake+0x64>
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d101      	bne.n	800f4d4 <xQueueSemaphoreTake+0x68>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e000      	b.n	800f4d6 <xQueueSemaphoreTake+0x6a>
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d10b      	bne.n	800f4f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4de:	f383 8811 	msr	BASEPRI, r3
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	61bb      	str	r3, [r7, #24]
}
 800f4ec:	bf00      	nop
 800f4ee:	bf00      	nop
 800f4f0:	e7fd      	b.n	800f4ee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4f2:	f002 f899 	bl	8011628 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d024      	beq.n	800f54c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f504:	1e5a      	subs	r2, r3, #1
 800f506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f508:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d104      	bne.n	800f51c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f512:	f001 fb97 	bl	8010c44 <pvTaskIncrementMutexHeldCount>
 800f516:	4602      	mov	r2, r0
 800f518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f51a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00f      	beq.n	800f544 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f526:	3310      	adds	r3, #16
 800f528:	4618      	mov	r0, r3
 800f52a:	f001 f83b 	bl	80105a4 <xTaskRemoveFromEventList>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d007      	beq.n	800f544 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f534:	4b54      	ldr	r3, [pc, #336]	@ (800f688 <xQueueSemaphoreTake+0x21c>)
 800f536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f544:	f002 f8a2 	bl	801168c <vPortExitCritical>
				return pdPASS;
 800f548:	2301      	movs	r3, #1
 800f54a:	e098      	b.n	800f67e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d112      	bne.n	800f578 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00b      	beq.n	800f570 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55c:	f383 8811 	msr	BASEPRI, r3
 800f560:	f3bf 8f6f 	isb	sy
 800f564:	f3bf 8f4f 	dsb	sy
 800f568:	617b      	str	r3, [r7, #20]
}
 800f56a:	bf00      	nop
 800f56c:	bf00      	nop
 800f56e:	e7fd      	b.n	800f56c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f570:	f002 f88c 	bl	801168c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f574:	2300      	movs	r3, #0
 800f576:	e082      	b.n	800f67e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d106      	bne.n	800f58c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f57e:	f107 030c 	add.w	r3, r7, #12
 800f582:	4618      	mov	r0, r3
 800f584:	f001 f872 	bl	801066c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f588:	2301      	movs	r3, #1
 800f58a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f58c:	f002 f87e 	bl	801168c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f590:	f000 fdae 	bl	80100f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f594:	f002 f848 	bl	8011628 <vPortEnterCritical>
 800f598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f59a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f59e:	b25b      	sxtb	r3, r3
 800f5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5a4:	d103      	bne.n	800f5ae <xQueueSemaphoreTake+0x142>
 800f5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5b4:	b25b      	sxtb	r3, r3
 800f5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5ba:	d103      	bne.n	800f5c4 <xQueueSemaphoreTake+0x158>
 800f5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f5c4:	f002 f862 	bl	801168c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5c8:	463a      	mov	r2, r7
 800f5ca:	f107 030c 	add.w	r3, r7, #12
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f001 f861 	bl	8010698 <xTaskCheckForTimeOut>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d132      	bne.n	800f642 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5de:	f000 f9f5 	bl	800f9cc <prvIsQueueEmpty>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d026      	beq.n	800f636 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d109      	bne.n	800f604 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f5f0:	f002 f81a 	bl	8011628 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f001 f9c7 	bl	801098c <xTaskPriorityInherit>
 800f5fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f600:	f002 f844 	bl	801168c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f606:	3324      	adds	r3, #36	@ 0x24
 800f608:	683a      	ldr	r2, [r7, #0]
 800f60a:	4611      	mov	r1, r2
 800f60c:	4618      	mov	r0, r3
 800f60e:	f000 ff77 	bl	8010500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f612:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f614:	f000 f988 	bl	800f928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f618:	f000 fd78 	bl	801010c <xTaskResumeAll>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f47f af67 	bne.w	800f4f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f624:	4b18      	ldr	r3, [pc, #96]	@ (800f688 <xQueueSemaphoreTake+0x21c>)
 800f626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f62a:	601a      	str	r2, [r3, #0]
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	e75d      	b.n	800f4f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f638:	f000 f976 	bl	800f928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f63c:	f000 fd66 	bl	801010c <xTaskResumeAll>
 800f640:	e757      	b.n	800f4f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f642:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f644:	f000 f970 	bl	800f928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f648:	f000 fd60 	bl	801010c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f64c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f64e:	f000 f9bd 	bl	800f9cc <prvIsQueueEmpty>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	f43f af4c 	beq.w	800f4f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00d      	beq.n	800f67c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f660:	f001 ffe2 	bl	8011628 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f664:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f666:	f000 f8b7 	bl	800f7d8 <prvGetDisinheritPriorityAfterTimeout>
 800f66a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f672:	4618      	mov	r0, r3
 800f674:	f001 fa62 	bl	8010b3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f678:	f002 f808 	bl	801168c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f67c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3738      	adds	r7, #56	@ 0x38
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	e000ed04 	.word	0xe000ed04

0800f68c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b08e      	sub	sp, #56	@ 0x38
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d10b      	bne.n	800f6ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	623b      	str	r3, [r7, #32]
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	e7fd      	b.n	800f6b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d103      	bne.n	800f6c8 <xQueueReceiveFromISR+0x3c>
 800f6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <xQueueReceiveFromISR+0x40>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e000      	b.n	800f6ce <xQueueReceiveFromISR+0x42>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10b      	bne.n	800f6ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	61fb      	str	r3, [r7, #28]
}
 800f6e4:	bf00      	nop
 800f6e6:	bf00      	nop
 800f6e8:	e7fd      	b.n	800f6e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6ea:	f002 f87d 	bl	80117e8 <vPortValidateInterruptPriority>
	__asm volatile
 800f6ee:	f3ef 8211 	mrs	r2, BASEPRI
 800f6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	61ba      	str	r2, [r7, #24]
 800f704:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f706:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f708:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f712:	2b00      	cmp	r3, #0
 800f714:	d02f      	beq.n	800f776 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f71c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f720:	68b9      	ldr	r1, [r7, #8]
 800f722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f724:	f000 f8da 	bl	800f8dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72a:	1e5a      	subs	r2, r3, #1
 800f72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f730:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f738:	d112      	bne.n	800f760 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73c:	691b      	ldr	r3, [r3, #16]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d016      	beq.n	800f770 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f744:	3310      	adds	r3, #16
 800f746:	4618      	mov	r0, r3
 800f748:	f000 ff2c 	bl	80105a4 <xTaskRemoveFromEventList>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00e      	beq.n	800f770 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00b      	beq.n	800f770 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	601a      	str	r2, [r3, #0]
 800f75e:	e007      	b.n	800f770 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f764:	3301      	adds	r3, #1
 800f766:	b2db      	uxtb	r3, r3
 800f768:	b25a      	sxtb	r2, r3
 800f76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f76c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f770:	2301      	movs	r3, #1
 800f772:	637b      	str	r3, [r7, #52]	@ 0x34
 800f774:	e001      	b.n	800f77a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f776:	2300      	movs	r3, #0
 800f778:	637b      	str	r3, [r7, #52]	@ 0x34
 800f77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f383 8811 	msr	BASEPRI, r3
}
 800f784:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3738      	adds	r7, #56	@ 0x38
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10b      	bne.n	800f7ba <vQueueDelete+0x2a>
	__asm volatile
 800f7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	60bb      	str	r3, [r7, #8]
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop
 800f7b8:	e7fd      	b.n	800f7b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f7ba:	68f8      	ldr	r0, [r7, #12]
 800f7bc:	f000 f95e 	bl	800fa7c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d102      	bne.n	800f7d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f002 f91c 	bl	8011a08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f7d0:	bf00      	nop
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f7d8:	b480      	push	{r7}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d006      	beq.n	800f7f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f7f2:	60fb      	str	r3, [r7, #12]
 800f7f4:	e001      	b.n	800f7fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
	}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3714      	adds	r7, #20
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f814:	2300      	movs	r3, #0
 800f816:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10d      	bne.n	800f842 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d14d      	bne.n	800f8ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	689b      	ldr	r3, [r3, #8]
 800f832:	4618      	mov	r0, r3
 800f834:	f001 f912 	bl	8010a5c <xTaskPriorityDisinherit>
 800f838:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2200      	movs	r2, #0
 800f83e:	609a      	str	r2, [r3, #8]
 800f840:	e043      	b.n	800f8ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d119      	bne.n	800f87c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6858      	ldr	r0, [r3, #4]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f850:	461a      	mov	r2, r3
 800f852:	68b9      	ldr	r1, [r7, #8]
 800f854:	f004 fbdf 	bl	8014016 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	685a      	ldr	r2, [r3, #4]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f860:	441a      	add	r2, r3
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	685a      	ldr	r2, [r3, #4]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d32b      	bcc.n	800f8ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	605a      	str	r2, [r3, #4]
 800f87a:	e026      	b.n	800f8ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	68d8      	ldr	r0, [r3, #12]
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f884:	461a      	mov	r2, r3
 800f886:	68b9      	ldr	r1, [r7, #8]
 800f888:	f004 fbc5 	bl	8014016 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	68da      	ldr	r2, [r3, #12]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f894:	425b      	negs	r3, r3
 800f896:	441a      	add	r2, r3
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	68da      	ldr	r2, [r3, #12]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d207      	bcs.n	800f8b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	689a      	ldr	r2, [r3, #8]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8b0:	425b      	negs	r3, r3
 800f8b2:	441a      	add	r2, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b02      	cmp	r3, #2
 800f8bc:	d105      	bne.n	800f8ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	1c5a      	adds	r2, r3, #1
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f8d2:	697b      	ldr	r3, [r7, #20]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3718      	adds	r7, #24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d018      	beq.n	800f920 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68da      	ldr	r2, [r3, #12]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8f6:	441a      	add	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	68da      	ldr	r2, [r3, #12]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	429a      	cmp	r2, r3
 800f906:	d303      	bcc.n	800f910 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	68d9      	ldr	r1, [r3, #12]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f918:	461a      	mov	r2, r3
 800f91a:	6838      	ldr	r0, [r7, #0]
 800f91c:	f004 fb7b 	bl	8014016 <memcpy>
	}
}
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f930:	f001 fe7a 	bl	8011628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f93a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f93c:	e011      	b.n	800f962 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f942:	2b00      	cmp	r3, #0
 800f944:	d012      	beq.n	800f96c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3324      	adds	r3, #36	@ 0x24
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 fe2a 	bl	80105a4 <xTaskRemoveFromEventList>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f956:	f000 ff03 	bl	8010760 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	3b01      	subs	r3, #1
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f966:	2b00      	cmp	r3, #0
 800f968:	dce9      	bgt.n	800f93e <prvUnlockQueue+0x16>
 800f96a:	e000      	b.n	800f96e <prvUnlockQueue+0x46>
					break;
 800f96c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	22ff      	movs	r2, #255	@ 0xff
 800f972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f976:	f001 fe89 	bl	801168c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f97a:	f001 fe55 	bl	8011628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f984:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f986:	e011      	b.n	800f9ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d012      	beq.n	800f9b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3310      	adds	r3, #16
 800f994:	4618      	mov	r0, r3
 800f996:	f000 fe05 	bl	80105a4 <xTaskRemoveFromEventList>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9a0:	f000 fede 	bl	8010760 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9a4:	7bbb      	ldrb	r3, [r7, #14]
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	dce9      	bgt.n	800f988 <prvUnlockQueue+0x60>
 800f9b4:	e000      	b.n	800f9b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f9b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	22ff      	movs	r2, #255	@ 0xff
 800f9bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f9c0:	f001 fe64 	bl	801168c <vPortExitCritical>
}
 800f9c4:	bf00      	nop
 800f9c6:	3710      	adds	r7, #16
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f9d4:	f001 fe28 	bl	8011628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d102      	bne.n	800f9e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	60fb      	str	r3, [r7, #12]
 800f9e4:	e001      	b.n	800f9ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f9ea:	f001 fe4f 	bl	801168c <vPortExitCritical>

	return xReturn;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa00:	f001 fe12 	bl	8011628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d102      	bne.n	800fa16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa10:	2301      	movs	r3, #1
 800fa12:	60fb      	str	r3, [r7, #12]
 800fa14:	e001      	b.n	800fa1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa16:	2300      	movs	r3, #0
 800fa18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa1a:	f001 fe37 	bl	801168c <vPortExitCritical>

	return xReturn;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3710      	adds	r7, #16
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa32:	2300      	movs	r3, #0
 800fa34:	60fb      	str	r3, [r7, #12]
 800fa36:	e014      	b.n	800fa62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa38:	4a0f      	ldr	r2, [pc, #60]	@ (800fa78 <vQueueAddToRegistry+0x50>)
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d10b      	bne.n	800fa5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa44:	490c      	ldr	r1, [pc, #48]	@ (800fa78 <vQueueAddToRegistry+0x50>)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	683a      	ldr	r2, [r7, #0]
 800fa4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fa4e:	4a0a      	ldr	r2, [pc, #40]	@ (800fa78 <vQueueAddToRegistry+0x50>)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	00db      	lsls	r3, r3, #3
 800fa54:	4413      	add	r3, r2
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fa5a:	e006      	b.n	800fa6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	60fb      	str	r3, [r7, #12]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2b07      	cmp	r3, #7
 800fa66:	d9e7      	bls.n	800fa38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fa68:	bf00      	nop
 800fa6a:	bf00      	nop
 800fa6c:	3714      	adds	r7, #20
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	20003034 	.word	0x20003034

0800fa7c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b085      	sub	sp, #20
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa84:	2300      	movs	r3, #0
 800fa86:	60fb      	str	r3, [r7, #12]
 800fa88:	e016      	b.n	800fab8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fa8a:	4a10      	ldr	r2, [pc, #64]	@ (800facc <vQueueUnregisterQueue+0x50>)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	00db      	lsls	r3, r3, #3
 800fa90:	4413      	add	r3, r2
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d10b      	bne.n	800fab2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fa9a:	4a0c      	ldr	r2, [pc, #48]	@ (800facc <vQueueUnregisterQueue+0x50>)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2100      	movs	r1, #0
 800faa0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800faa4:	4a09      	ldr	r2, [pc, #36]	@ (800facc <vQueueUnregisterQueue+0x50>)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	00db      	lsls	r3, r3, #3
 800faaa:	4413      	add	r3, r2
 800faac:	2200      	movs	r2, #0
 800faae:	605a      	str	r2, [r3, #4]
				break;
 800fab0:	e006      	b.n	800fac0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	3301      	adds	r3, #1
 800fab6:	60fb      	str	r3, [r7, #12]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2b07      	cmp	r3, #7
 800fabc:	d9e5      	bls.n	800fa8a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fabe:	bf00      	nop
 800fac0:	bf00      	nop
 800fac2:	3714      	adds	r7, #20
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr
 800facc:	20003034 	.word	0x20003034

0800fad0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fae0:	f001 fda2 	bl	8011628 <vPortEnterCritical>
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800faea:	b25b      	sxtb	r3, r3
 800faec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800faf0:	d103      	bne.n	800fafa <vQueueWaitForMessageRestricted+0x2a>
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb00:	b25b      	sxtb	r3, r3
 800fb02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb06:	d103      	bne.n	800fb10 <vQueueWaitForMessageRestricted+0x40>
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb10:	f001 fdbc 	bl	801168c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d106      	bne.n	800fb2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	3324      	adds	r3, #36	@ 0x24
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	68b9      	ldr	r1, [r7, #8]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f000 fd11 	bl	801054c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fb2a:	6978      	ldr	r0, [r7, #20]
 800fb2c:	f7ff fefc 	bl	800f928 <prvUnlockQueue>
	}
 800fb30:	bf00      	nop
 800fb32:	3718      	adds	r7, #24
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08e      	sub	sp, #56	@ 0x38
 800fb3c:	af04      	add	r7, sp, #16
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d10b      	bne.n	800fb64 <xTaskCreateStatic+0x2c>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	623b      	str	r3, [r7, #32]
}
 800fb5e:	bf00      	nop
 800fb60:	bf00      	nop
 800fb62:	e7fd      	b.n	800fb60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d10b      	bne.n	800fb82 <xTaskCreateStatic+0x4a>
	__asm volatile
 800fb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6e:	f383 8811 	msr	BASEPRI, r3
 800fb72:	f3bf 8f6f 	isb	sy
 800fb76:	f3bf 8f4f 	dsb	sy
 800fb7a:	61fb      	str	r3, [r7, #28]
}
 800fb7c:	bf00      	nop
 800fb7e:	bf00      	nop
 800fb80:	e7fd      	b.n	800fb7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb82:	23b0      	movs	r3, #176	@ 0xb0
 800fb84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	2bb0      	cmp	r3, #176	@ 0xb0
 800fb8a:	d00b      	beq.n	800fba4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800fb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb90:	f383 8811 	msr	BASEPRI, r3
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	61bb      	str	r3, [r7, #24]
}
 800fb9e:	bf00      	nop
 800fba0:	bf00      	nop
 800fba2:	e7fd      	b.n	800fba0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fba4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d01e      	beq.n	800fbea <xTaskCreateStatic+0xb2>
 800fbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d01b      	beq.n	800fbea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	9303      	str	r3, [sp, #12]
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbca:	9302      	str	r3, [sp, #8]
 800fbcc:	f107 0314 	add.w	r3, r7, #20
 800fbd0:	9301      	str	r3, [sp, #4]
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	68b9      	ldr	r1, [r7, #8]
 800fbdc:	68f8      	ldr	r0, [r7, #12]
 800fbde:	f000 f851 	bl	800fc84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fbe4:	f000 f8f8 	bl	800fdd8 <prvAddNewTaskToReadyList>
 800fbe8:	e001      	b.n	800fbee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800fbea:	2300      	movs	r3, #0
 800fbec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbee:	697b      	ldr	r3, [r7, #20]
	}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3728      	adds	r7, #40	@ 0x28
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b08c      	sub	sp, #48	@ 0x30
 800fbfc:	af04      	add	r7, sp, #16
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	603b      	str	r3, [r7, #0]
 800fc04:	4613      	mov	r3, r2
 800fc06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc08:	88fb      	ldrh	r3, [r7, #6]
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f001 fe2d 	bl	801186c <pvPortMalloc>
 800fc12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00e      	beq.n	800fc38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc1a:	20b0      	movs	r0, #176	@ 0xb0
 800fc1c:	f001 fe26 	bl	801186c <pvPortMalloc>
 800fc20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d003      	beq.n	800fc30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	697a      	ldr	r2, [r7, #20]
 800fc2c:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc2e:	e005      	b.n	800fc3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc30:	6978      	ldr	r0, [r7, #20]
 800fc32:	f001 fee9 	bl	8011a08 <vPortFree>
 800fc36:	e001      	b.n	800fc3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d017      	beq.n	800fc72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc4a:	88fa      	ldrh	r2, [r7, #6]
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	9303      	str	r3, [sp, #12]
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	9302      	str	r3, [sp, #8]
 800fc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	68b9      	ldr	r1, [r7, #8]
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f000 f80f 	bl	800fc84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc66:	69f8      	ldr	r0, [r7, #28]
 800fc68:	f000 f8b6 	bl	800fdd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	61bb      	str	r3, [r7, #24]
 800fc70:	e002      	b.n	800fc78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc78:	69bb      	ldr	r3, [r7, #24]
	}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3720      	adds	r7, #32
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
	...

0800fc84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b088      	sub	sp, #32
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	607a      	str	r2, [r7, #4]
 800fc90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc94:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	21a5      	movs	r1, #165	@ 0xa5
 800fc9e:	f004 f890 	bl	8013dc2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fcac:	3b01      	subs	r3, #1
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	4413      	add	r3, r2
 800fcb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	f023 0307 	bic.w	r3, r3, #7
 800fcba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fcbc:	69bb      	ldr	r3, [r7, #24]
 800fcbe:	f003 0307 	and.w	r3, r3, #7
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00b      	beq.n	800fcde <prvInitialiseNewTask+0x5a>
	__asm volatile
 800fcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcca:	f383 8811 	msr	BASEPRI, r3
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	617b      	str	r3, [r7, #20]
}
 800fcd8:	bf00      	nop
 800fcda:	bf00      	nop
 800fcdc:	e7fd      	b.n	800fcda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d01f      	beq.n	800fd24 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fce4:	2300      	movs	r3, #0
 800fce6:	61fb      	str	r3, [r7, #28]
 800fce8:	e012      	b.n	800fd10 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	4413      	add	r3, r2
 800fcf0:	7819      	ldrb	r1, [r3, #0]
 800fcf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	3334      	adds	r3, #52	@ 0x34
 800fcfa:	460a      	mov	r2, r1
 800fcfc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcfe:	68ba      	ldr	r2, [r7, #8]
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	4413      	add	r3, r2
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d006      	beq.n	800fd18 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	61fb      	str	r3, [r7, #28]
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	2b13      	cmp	r3, #19
 800fd14:	d9e9      	bls.n	800fcea <prvInitialiseNewTask+0x66>
 800fd16:	e000      	b.n	800fd1a <prvInitialiseNewTask+0x96>
			{
				break;
 800fd18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800fd22:	e003      	b.n	800fd2c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd26:	2200      	movs	r2, #0
 800fd28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd2e:	2b37      	cmp	r3, #55	@ 0x37
 800fd30:	d901      	bls.n	800fd36 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd32:	2337      	movs	r3, #55	@ 0x37
 800fd34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd40:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800fd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd44:	2200      	movs	r2, #0
 800fd46:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fe fd7b 	bl	800e848 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd54:	3318      	adds	r3, #24
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fe fd76 	bl	800e848 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800fd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd74:	2200      	movs	r2, #0
 800fd76:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd82:	2200      	movs	r2, #0
 800fd84:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	335c      	adds	r3, #92	@ 0x5c
 800fd8c:	224c      	movs	r2, #76	@ 0x4c
 800fd8e:	2100      	movs	r1, #0
 800fd90:	4618      	mov	r0, r3
 800fd92:	f004 f816 	bl	8013dc2 <memset>
 800fd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd98:	4a0c      	ldr	r2, [pc, #48]	@ (800fdcc <prvInitialiseNewTask+0x148>)
 800fd9a:	661a      	str	r2, [r3, #96]	@ 0x60
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd9e:	4a0c      	ldr	r2, [pc, #48]	@ (800fdd0 <prvInitialiseNewTask+0x14c>)
 800fda0:	665a      	str	r2, [r3, #100]	@ 0x64
 800fda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda4:	4a0b      	ldr	r2, [pc, #44]	@ (800fdd4 <prvInitialiseNewTask+0x150>)
 800fda6:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fda8:	683a      	ldr	r2, [r7, #0]
 800fdaa:	68f9      	ldr	r1, [r7, #12]
 800fdac:	69b8      	ldr	r0, [r7, #24]
 800fdae:	f001 fb0b 	bl	80113c8 <pxPortInitialiseStack>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d002      	beq.n	800fdc4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdc4:	bf00      	nop
 800fdc6:	3720      	adds	r7, #32
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	200150a8 	.word	0x200150a8
 800fdd0:	20015110 	.word	0x20015110
 800fdd4:	20015178 	.word	0x20015178

0800fdd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fde0:	f001 fc22 	bl	8011628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fde4:	4b2d      	ldr	r3, [pc, #180]	@ (800fe9c <prvAddNewTaskToReadyList+0xc4>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	3301      	adds	r3, #1
 800fdea:	4a2c      	ldr	r2, [pc, #176]	@ (800fe9c <prvAddNewTaskToReadyList+0xc4>)
 800fdec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fdee:	4b2c      	ldr	r3, [pc, #176]	@ (800fea0 <prvAddNewTaskToReadyList+0xc8>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d109      	bne.n	800fe0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fdf6:	4a2a      	ldr	r2, [pc, #168]	@ (800fea0 <prvAddNewTaskToReadyList+0xc8>)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fdfc:	4b27      	ldr	r3, [pc, #156]	@ (800fe9c <prvAddNewTaskToReadyList+0xc4>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d110      	bne.n	800fe26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe04:	f000 fcd0 	bl	80107a8 <prvInitialiseTaskLists>
 800fe08:	e00d      	b.n	800fe26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe0a:	4b26      	ldr	r3, [pc, #152]	@ (800fea4 <prvAddNewTaskToReadyList+0xcc>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d109      	bne.n	800fe26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe12:	4b23      	ldr	r3, [pc, #140]	@ (800fea0 <prvAddNewTaskToReadyList+0xc8>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d802      	bhi.n	800fe26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe20:	4a1f      	ldr	r2, [pc, #124]	@ (800fea0 <prvAddNewTaskToReadyList+0xc8>)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe26:	4b20      	ldr	r3, [pc, #128]	@ (800fea8 <prvAddNewTaskToReadyList+0xd0>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	4a1e      	ldr	r2, [pc, #120]	@ (800fea8 <prvAddNewTaskToReadyList+0xd0>)
 800fe2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fe30:	4b1d      	ldr	r3, [pc, #116]	@ (800fea8 <prvAddNewTaskToReadyList+0xd0>)
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe3c:	4b1b      	ldr	r3, [pc, #108]	@ (800feac <prvAddNewTaskToReadyList+0xd4>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d903      	bls.n	800fe4c <prvAddNewTaskToReadyList+0x74>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe48:	4a18      	ldr	r2, [pc, #96]	@ (800feac <prvAddNewTaskToReadyList+0xd4>)
 800fe4a:	6013      	str	r3, [r2, #0]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe50:	4613      	mov	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4413      	add	r3, r2
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4a15      	ldr	r2, [pc, #84]	@ (800feb0 <prvAddNewTaskToReadyList+0xd8>)
 800fe5a:	441a      	add	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	3304      	adds	r3, #4
 800fe60:	4619      	mov	r1, r3
 800fe62:	4610      	mov	r0, r2
 800fe64:	f7fe fcfd 	bl	800e862 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe68:	f001 fc10 	bl	801168c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe6c:	4b0d      	ldr	r3, [pc, #52]	@ (800fea4 <prvAddNewTaskToReadyList+0xcc>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d00e      	beq.n	800fe92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe74:	4b0a      	ldr	r3, [pc, #40]	@ (800fea0 <prvAddNewTaskToReadyList+0xc8>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d207      	bcs.n	800fe92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe82:	4b0c      	ldr	r3, [pc, #48]	@ (800feb4 <prvAddNewTaskToReadyList+0xdc>)
 800fe84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	f3bf 8f4f 	dsb	sy
 800fe8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe92:	bf00      	nop
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	20003548 	.word	0x20003548
 800fea0:	20003074 	.word	0x20003074
 800fea4:	20003554 	.word	0x20003554
 800fea8:	20003564 	.word	0x20003564
 800feac:	20003550 	.word	0x20003550
 800feb0:	20003078 	.word	0x20003078
 800feb4:	e000ed04 	.word	0xe000ed04

0800feb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fec0:	f001 fbb2 	bl	8011628 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d102      	bne.n	800fed0 <vTaskDelete+0x18>
 800feca:	4b2d      	ldr	r3, [pc, #180]	@ (800ff80 <vTaskDelete+0xc8>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	e000      	b.n	800fed2 <vTaskDelete+0x1a>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3304      	adds	r3, #4
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe fd1f 	bl	800e91c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d004      	beq.n	800fef0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	3318      	adds	r3, #24
 800feea:	4618      	mov	r0, r3
 800feec:	f7fe fd16 	bl	800e91c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fef0:	4b24      	ldr	r3, [pc, #144]	@ (800ff84 <vTaskDelete+0xcc>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	3301      	adds	r3, #1
 800fef6:	4a23      	ldr	r2, [pc, #140]	@ (800ff84 <vTaskDelete+0xcc>)
 800fef8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fefa:	4b21      	ldr	r3, [pc, #132]	@ (800ff80 <vTaskDelete+0xc8>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d10b      	bne.n	800ff1c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	3304      	adds	r3, #4
 800ff08:	4619      	mov	r1, r3
 800ff0a:	481f      	ldr	r0, [pc, #124]	@ (800ff88 <vTaskDelete+0xd0>)
 800ff0c:	f7fe fca9 	bl	800e862 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ff10:	4b1e      	ldr	r3, [pc, #120]	@ (800ff8c <vTaskDelete+0xd4>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	3301      	adds	r3, #1
 800ff16:	4a1d      	ldr	r2, [pc, #116]	@ (800ff8c <vTaskDelete+0xd4>)
 800ff18:	6013      	str	r3, [r2, #0]
 800ff1a:	e009      	b.n	800ff30 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ff1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ff90 <vTaskDelete+0xd8>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3b01      	subs	r3, #1
 800ff22:	4a1b      	ldr	r2, [pc, #108]	@ (800ff90 <vTaskDelete+0xd8>)
 800ff24:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f000 fcac 	bl	8010884 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ff2c:	f000 fce0 	bl	80108f0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ff30:	f001 fbac 	bl	801168c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ff34:	4b17      	ldr	r3, [pc, #92]	@ (800ff94 <vTaskDelete+0xdc>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01c      	beq.n	800ff76 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ff3c:	4b10      	ldr	r3, [pc, #64]	@ (800ff80 <vTaskDelete+0xc8>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d117      	bne.n	800ff76 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ff46:	4b14      	ldr	r3, [pc, #80]	@ (800ff98 <vTaskDelete+0xe0>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00b      	beq.n	800ff66 <vTaskDelete+0xae>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	60bb      	str	r3, [r7, #8]
}
 800ff60:	bf00      	nop
 800ff62:	bf00      	nop
 800ff64:	e7fd      	b.n	800ff62 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ff66:	4b0d      	ldr	r3, [pc, #52]	@ (800ff9c <vTaskDelete+0xe4>)
 800ff68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ff76:	bf00      	nop
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	20003074 	.word	0x20003074
 800ff84:	20003564 	.word	0x20003564
 800ff88:	2000351c 	.word	0x2000351c
 800ff8c:	20003530 	.word	0x20003530
 800ff90:	20003548 	.word	0x20003548
 800ff94:	20003554 	.word	0x20003554
 800ff98:	20003570 	.word	0x20003570
 800ff9c:	e000ed04 	.word	0xe000ed04

0800ffa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d018      	beq.n	800ffe4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ffb2:	4b14      	ldr	r3, [pc, #80]	@ (8010004 <vTaskDelay+0x64>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00b      	beq.n	800ffd2 <vTaskDelay+0x32>
	__asm volatile
 800ffba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	60bb      	str	r3, [r7, #8]
}
 800ffcc:	bf00      	nop
 800ffce:	bf00      	nop
 800ffd0:	e7fd      	b.n	800ffce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ffd2:	f000 f88d 	bl	80100f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fe47 	bl	8010c6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ffde:	f000 f895 	bl	801010c <xTaskResumeAll>
 800ffe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d107      	bne.n	800fffa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ffea:	4b07      	ldr	r3, [pc, #28]	@ (8010008 <vTaskDelay+0x68>)
 800ffec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	f3bf 8f4f 	dsb	sy
 800fff6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fffa:	bf00      	nop
 800fffc:	3710      	adds	r7, #16
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	20003570 	.word	0x20003570
 8010008:	e000ed04 	.word	0xe000ed04

0801000c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b08a      	sub	sp, #40	@ 0x28
 8010010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010012:	2300      	movs	r3, #0
 8010014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010016:	2300      	movs	r3, #0
 8010018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801001a:	463a      	mov	r2, r7
 801001c:	1d39      	adds	r1, r7, #4
 801001e:	f107 0308 	add.w	r3, r7, #8
 8010022:	4618      	mov	r0, r3
 8010024:	f7fe fbbc 	bl	800e7a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010028:	6839      	ldr	r1, [r7, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	9202      	str	r2, [sp, #8]
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	2300      	movs	r3, #0
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	2300      	movs	r3, #0
 8010038:	460a      	mov	r2, r1
 801003a:	4925      	ldr	r1, [pc, #148]	@ (80100d0 <vTaskStartScheduler+0xc4>)
 801003c:	4825      	ldr	r0, [pc, #148]	@ (80100d4 <vTaskStartScheduler+0xc8>)
 801003e:	f7ff fd7b 	bl	800fb38 <xTaskCreateStatic>
 8010042:	4603      	mov	r3, r0
 8010044:	4a24      	ldr	r2, [pc, #144]	@ (80100d8 <vTaskStartScheduler+0xcc>)
 8010046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010048:	4b23      	ldr	r3, [pc, #140]	@ (80100d8 <vTaskStartScheduler+0xcc>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d002      	beq.n	8010056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010050:	2301      	movs	r3, #1
 8010052:	617b      	str	r3, [r7, #20]
 8010054:	e001      	b.n	801005a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010056:	2300      	movs	r3, #0
 8010058:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d102      	bne.n	8010066 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010060:	f000 fe58 	bl	8010d14 <xTimerCreateTimerTask>
 8010064:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d11d      	bne.n	80100a8 <vTaskStartScheduler+0x9c>
	__asm volatile
 801006c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010070:	f383 8811 	msr	BASEPRI, r3
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	f3bf 8f4f 	dsb	sy
 801007c:	613b      	str	r3, [r7, #16]
}
 801007e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010080:	4b16      	ldr	r3, [pc, #88]	@ (80100dc <vTaskStartScheduler+0xd0>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	335c      	adds	r3, #92	@ 0x5c
 8010086:	4a16      	ldr	r2, [pc, #88]	@ (80100e0 <vTaskStartScheduler+0xd4>)
 8010088:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801008a:	4b16      	ldr	r3, [pc, #88]	@ (80100e4 <vTaskStartScheduler+0xd8>)
 801008c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010090:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010092:	4b15      	ldr	r3, [pc, #84]	@ (80100e8 <vTaskStartScheduler+0xdc>)
 8010094:	2201      	movs	r2, #1
 8010096:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010098:	4b14      	ldr	r3, [pc, #80]	@ (80100ec <vTaskStartScheduler+0xe0>)
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801009e:	f7f4 fa29 	bl	80044f4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80100a2:	f001 fa1d 	bl	80114e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80100a6:	e00f      	b.n	80100c8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100ae:	d10b      	bne.n	80100c8 <vTaskStartScheduler+0xbc>
	__asm volatile
 80100b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	60fb      	str	r3, [r7, #12]
}
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	e7fd      	b.n	80100c4 <vTaskStartScheduler+0xb8>
}
 80100c8:	bf00      	nop
 80100ca:	3718      	adds	r7, #24
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	080164ac 	.word	0x080164ac
 80100d4:	08010779 	.word	0x08010779
 80100d8:	2000356c 	.word	0x2000356c
 80100dc:	20003074 	.word	0x20003074
 80100e0:	20000194 	.word	0x20000194
 80100e4:	20003568 	.word	0x20003568
 80100e8:	20003554 	.word	0x20003554
 80100ec:	2000354c 	.word	0x2000354c

080100f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80100f0:	b480      	push	{r7}
 80100f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80100f4:	4b04      	ldr	r3, [pc, #16]	@ (8010108 <vTaskSuspendAll+0x18>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	3301      	adds	r3, #1
 80100fa:	4a03      	ldr	r2, [pc, #12]	@ (8010108 <vTaskSuspendAll+0x18>)
 80100fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80100fe:	bf00      	nop
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr
 8010108:	20003570 	.word	0x20003570

0801010c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010112:	2300      	movs	r3, #0
 8010114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010116:	2300      	movs	r3, #0
 8010118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801011a:	4b42      	ldr	r3, [pc, #264]	@ (8010224 <xTaskResumeAll+0x118>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d10b      	bne.n	801013a <xTaskResumeAll+0x2e>
	__asm volatile
 8010122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	603b      	str	r3, [r7, #0]
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	e7fd      	b.n	8010136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801013a:	f001 fa75 	bl	8011628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801013e:	4b39      	ldr	r3, [pc, #228]	@ (8010224 <xTaskResumeAll+0x118>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	3b01      	subs	r3, #1
 8010144:	4a37      	ldr	r2, [pc, #220]	@ (8010224 <xTaskResumeAll+0x118>)
 8010146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010148:	4b36      	ldr	r3, [pc, #216]	@ (8010224 <xTaskResumeAll+0x118>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d162      	bne.n	8010216 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010150:	4b35      	ldr	r3, [pc, #212]	@ (8010228 <xTaskResumeAll+0x11c>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d05e      	beq.n	8010216 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010158:	e02f      	b.n	80101ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801015a:	4b34      	ldr	r3, [pc, #208]	@ (801022c <xTaskResumeAll+0x120>)
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3318      	adds	r3, #24
 8010166:	4618      	mov	r0, r3
 8010168:	f7fe fbd8 	bl	800e91c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	3304      	adds	r3, #4
 8010170:	4618      	mov	r0, r3
 8010172:	f7fe fbd3 	bl	800e91c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801017a:	4b2d      	ldr	r3, [pc, #180]	@ (8010230 <xTaskResumeAll+0x124>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	d903      	bls.n	801018a <xTaskResumeAll+0x7e>
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010186:	4a2a      	ldr	r2, [pc, #168]	@ (8010230 <xTaskResumeAll+0x124>)
 8010188:	6013      	str	r3, [r2, #0]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801018e:	4613      	mov	r3, r2
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4413      	add	r3, r2
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	4a27      	ldr	r2, [pc, #156]	@ (8010234 <xTaskResumeAll+0x128>)
 8010198:	441a      	add	r2, r3
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	3304      	adds	r3, #4
 801019e:	4619      	mov	r1, r3
 80101a0:	4610      	mov	r0, r2
 80101a2:	f7fe fb5e 	bl	800e862 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101aa:	4b23      	ldr	r3, [pc, #140]	@ (8010238 <xTaskResumeAll+0x12c>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d302      	bcc.n	80101ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80101b4:	4b21      	ldr	r3, [pc, #132]	@ (801023c <xTaskResumeAll+0x130>)
 80101b6:	2201      	movs	r2, #1
 80101b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80101ba:	4b1c      	ldr	r3, [pc, #112]	@ (801022c <xTaskResumeAll+0x120>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1cb      	bne.n	801015a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d001      	beq.n	80101cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80101c8:	f000 fb92 	bl	80108f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80101cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010240 <xTaskResumeAll+0x134>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d010      	beq.n	80101fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80101d8:	f000 f858 	bl	801028c <xTaskIncrementTick>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d002      	beq.n	80101e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80101e2:	4b16      	ldr	r3, [pc, #88]	@ (801023c <xTaskResumeAll+0x130>)
 80101e4:	2201      	movs	r2, #1
 80101e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3b01      	subs	r3, #1
 80101ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d1f1      	bne.n	80101d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80101f4:	4b12      	ldr	r3, [pc, #72]	@ (8010240 <xTaskResumeAll+0x134>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80101fa:	4b10      	ldr	r3, [pc, #64]	@ (801023c <xTaskResumeAll+0x130>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d009      	beq.n	8010216 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010202:	2301      	movs	r3, #1
 8010204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010206:	4b0f      	ldr	r3, [pc, #60]	@ (8010244 <xTaskResumeAll+0x138>)
 8010208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801020c:	601a      	str	r2, [r3, #0]
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010216:	f001 fa39 	bl	801168c <vPortExitCritical>

	return xAlreadyYielded;
 801021a:	68bb      	ldr	r3, [r7, #8]
}
 801021c:	4618      	mov	r0, r3
 801021e:	3710      	adds	r7, #16
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	20003570 	.word	0x20003570
 8010228:	20003548 	.word	0x20003548
 801022c:	20003508 	.word	0x20003508
 8010230:	20003550 	.word	0x20003550
 8010234:	20003078 	.word	0x20003078
 8010238:	20003074 	.word	0x20003074
 801023c:	2000355c 	.word	0x2000355c
 8010240:	20003558 	.word	0x20003558
 8010244:	e000ed04 	.word	0xe000ed04

08010248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801024e:	4b05      	ldr	r3, [pc, #20]	@ (8010264 <xTaskGetTickCount+0x1c>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010254:	687b      	ldr	r3, [r7, #4]
}
 8010256:	4618      	mov	r0, r3
 8010258:	370c      	adds	r7, #12
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	2000354c 	.word	0x2000354c

08010268 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801026e:	f001 fabb 	bl	80117e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010272:	2300      	movs	r3, #0
 8010274:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010276:	4b04      	ldr	r3, [pc, #16]	@ (8010288 <xTaskGetTickCountFromISR+0x20>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801027c:	683b      	ldr	r3, [r7, #0]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3708      	adds	r7, #8
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	2000354c 	.word	0x2000354c

0801028c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010292:	2300      	movs	r3, #0
 8010294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010296:	4b4f      	ldr	r3, [pc, #316]	@ (80103d4 <xTaskIncrementTick+0x148>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	f040 8090 	bne.w	80103c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80102a0:	4b4d      	ldr	r3, [pc, #308]	@ (80103d8 <xTaskIncrementTick+0x14c>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	3301      	adds	r3, #1
 80102a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80102a8:	4a4b      	ldr	r2, [pc, #300]	@ (80103d8 <xTaskIncrementTick+0x14c>)
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d121      	bne.n	80102f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80102b4:	4b49      	ldr	r3, [pc, #292]	@ (80103dc <xTaskIncrementTick+0x150>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00b      	beq.n	80102d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	603b      	str	r3, [r7, #0]
}
 80102d0:	bf00      	nop
 80102d2:	bf00      	nop
 80102d4:	e7fd      	b.n	80102d2 <xTaskIncrementTick+0x46>
 80102d6:	4b41      	ldr	r3, [pc, #260]	@ (80103dc <xTaskIncrementTick+0x150>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	60fb      	str	r3, [r7, #12]
 80102dc:	4b40      	ldr	r3, [pc, #256]	@ (80103e0 <xTaskIncrementTick+0x154>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a3e      	ldr	r2, [pc, #248]	@ (80103dc <xTaskIncrementTick+0x150>)
 80102e2:	6013      	str	r3, [r2, #0]
 80102e4:	4a3e      	ldr	r2, [pc, #248]	@ (80103e0 <xTaskIncrementTick+0x154>)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6013      	str	r3, [r2, #0]
 80102ea:	4b3e      	ldr	r3, [pc, #248]	@ (80103e4 <xTaskIncrementTick+0x158>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	3301      	adds	r3, #1
 80102f0:	4a3c      	ldr	r2, [pc, #240]	@ (80103e4 <xTaskIncrementTick+0x158>)
 80102f2:	6013      	str	r3, [r2, #0]
 80102f4:	f000 fafc 	bl	80108f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80102f8:	4b3b      	ldr	r3, [pc, #236]	@ (80103e8 <xTaskIncrementTick+0x15c>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	693a      	ldr	r2, [r7, #16]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d349      	bcc.n	8010396 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010302:	4b36      	ldr	r3, [pc, #216]	@ (80103dc <xTaskIncrementTick+0x150>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d104      	bne.n	8010316 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801030c:	4b36      	ldr	r3, [pc, #216]	@ (80103e8 <xTaskIncrementTick+0x15c>)
 801030e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010312:	601a      	str	r2, [r3, #0]
					break;
 8010314:	e03f      	b.n	8010396 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010316:	4b31      	ldr	r3, [pc, #196]	@ (80103dc <xTaskIncrementTick+0x150>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010326:	693a      	ldr	r2, [r7, #16]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	429a      	cmp	r2, r3
 801032c:	d203      	bcs.n	8010336 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801032e:	4a2e      	ldr	r2, [pc, #184]	@ (80103e8 <xTaskIncrementTick+0x15c>)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010334:	e02f      	b.n	8010396 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	3304      	adds	r3, #4
 801033a:	4618      	mov	r0, r3
 801033c:	f7fe faee 	bl	800e91c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010344:	2b00      	cmp	r3, #0
 8010346:	d004      	beq.n	8010352 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	3318      	adds	r3, #24
 801034c:	4618      	mov	r0, r3
 801034e:	f7fe fae5 	bl	800e91c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010356:	4b25      	ldr	r3, [pc, #148]	@ (80103ec <xTaskIncrementTick+0x160>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	429a      	cmp	r2, r3
 801035c:	d903      	bls.n	8010366 <xTaskIncrementTick+0xda>
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010362:	4a22      	ldr	r2, [pc, #136]	@ (80103ec <xTaskIncrementTick+0x160>)
 8010364:	6013      	str	r3, [r2, #0]
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801036a:	4613      	mov	r3, r2
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	4413      	add	r3, r2
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	4a1f      	ldr	r2, [pc, #124]	@ (80103f0 <xTaskIncrementTick+0x164>)
 8010374:	441a      	add	r2, r3
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	3304      	adds	r3, #4
 801037a:	4619      	mov	r1, r3
 801037c:	4610      	mov	r0, r2
 801037e:	f7fe fa70 	bl	800e862 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010386:	4b1b      	ldr	r3, [pc, #108]	@ (80103f4 <xTaskIncrementTick+0x168>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801038c:	429a      	cmp	r2, r3
 801038e:	d3b8      	bcc.n	8010302 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010390:	2301      	movs	r3, #1
 8010392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010394:	e7b5      	b.n	8010302 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010396:	4b17      	ldr	r3, [pc, #92]	@ (80103f4 <xTaskIncrementTick+0x168>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039c:	4914      	ldr	r1, [pc, #80]	@ (80103f0 <xTaskIncrementTick+0x164>)
 801039e:	4613      	mov	r3, r2
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	4413      	add	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	440b      	add	r3, r1
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d901      	bls.n	80103b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80103ae:	2301      	movs	r3, #1
 80103b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80103b2:	4b11      	ldr	r3, [pc, #68]	@ (80103f8 <xTaskIncrementTick+0x16c>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d007      	beq.n	80103ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80103ba:	2301      	movs	r3, #1
 80103bc:	617b      	str	r3, [r7, #20]
 80103be:	e004      	b.n	80103ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80103c0:	4b0e      	ldr	r3, [pc, #56]	@ (80103fc <xTaskIncrementTick+0x170>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3301      	adds	r3, #1
 80103c6:	4a0d      	ldr	r2, [pc, #52]	@ (80103fc <xTaskIncrementTick+0x170>)
 80103c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80103ca:	697b      	ldr	r3, [r7, #20]
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3718      	adds	r7, #24
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	20003570 	.word	0x20003570
 80103d8:	2000354c 	.word	0x2000354c
 80103dc:	20003500 	.word	0x20003500
 80103e0:	20003504 	.word	0x20003504
 80103e4:	20003560 	.word	0x20003560
 80103e8:	20003568 	.word	0x20003568
 80103ec:	20003550 	.word	0x20003550
 80103f0:	20003078 	.word	0x20003078
 80103f4:	20003074 	.word	0x20003074
 80103f8:	2000355c 	.word	0x2000355c
 80103fc:	20003558 	.word	0x20003558

08010400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010406:	4b36      	ldr	r3, [pc, #216]	@ (80104e0 <vTaskSwitchContext+0xe0>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801040e:	4b35      	ldr	r3, [pc, #212]	@ (80104e4 <vTaskSwitchContext+0xe4>)
 8010410:	2201      	movs	r2, #1
 8010412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010414:	e060      	b.n	80104d8 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8010416:	4b33      	ldr	r3, [pc, #204]	@ (80104e4 <vTaskSwitchContext+0xe4>)
 8010418:	2200      	movs	r2, #0
 801041a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801041c:	f7f4 f878 	bl	8004510 <getRunTimeCounterValue>
 8010420:	4603      	mov	r3, r0
 8010422:	4a31      	ldr	r2, [pc, #196]	@ (80104e8 <vTaskSwitchContext+0xe8>)
 8010424:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010426:	4b30      	ldr	r3, [pc, #192]	@ (80104e8 <vTaskSwitchContext+0xe8>)
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	4b30      	ldr	r3, [pc, #192]	@ (80104ec <vTaskSwitchContext+0xec>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	429a      	cmp	r2, r3
 8010430:	d909      	bls.n	8010446 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010432:	4b2f      	ldr	r3, [pc, #188]	@ (80104f0 <vTaskSwitchContext+0xf0>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010438:	4a2b      	ldr	r2, [pc, #172]	@ (80104e8 <vTaskSwitchContext+0xe8>)
 801043a:	6810      	ldr	r0, [r2, #0]
 801043c:	4a2b      	ldr	r2, [pc, #172]	@ (80104ec <vTaskSwitchContext+0xec>)
 801043e:	6812      	ldr	r2, [r2, #0]
 8010440:	1a82      	subs	r2, r0, r2
 8010442:	440a      	add	r2, r1
 8010444:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010446:	4b28      	ldr	r3, [pc, #160]	@ (80104e8 <vTaskSwitchContext+0xe8>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	4a28      	ldr	r2, [pc, #160]	@ (80104ec <vTaskSwitchContext+0xec>)
 801044c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801044e:	4b29      	ldr	r3, [pc, #164]	@ (80104f4 <vTaskSwitchContext+0xf4>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	60fb      	str	r3, [r7, #12]
 8010454:	e011      	b.n	801047a <vTaskSwitchContext+0x7a>
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10b      	bne.n	8010474 <vTaskSwitchContext+0x74>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	607b      	str	r3, [r7, #4]
}
 801046e:	bf00      	nop
 8010470:	bf00      	nop
 8010472:	e7fd      	b.n	8010470 <vTaskSwitchContext+0x70>
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	3b01      	subs	r3, #1
 8010478:	60fb      	str	r3, [r7, #12]
 801047a:	491f      	ldr	r1, [pc, #124]	@ (80104f8 <vTaskSwitchContext+0xf8>)
 801047c:	68fa      	ldr	r2, [r7, #12]
 801047e:	4613      	mov	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	440b      	add	r3, r1
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d0e3      	beq.n	8010456 <vTaskSwitchContext+0x56>
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	4613      	mov	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4413      	add	r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	4a17      	ldr	r2, [pc, #92]	@ (80104f8 <vTaskSwitchContext+0xf8>)
 801049a:	4413      	add	r3, r2
 801049c:	60bb      	str	r3, [r7, #8]
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	685a      	ldr	r2, [r3, #4]
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	605a      	str	r2, [r3, #4]
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	685a      	ldr	r2, [r3, #4]
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	3308      	adds	r3, #8
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d104      	bne.n	80104be <vTaskSwitchContext+0xbe>
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	685a      	ldr	r2, [r3, #4]
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	605a      	str	r2, [r3, #4]
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	4a0a      	ldr	r2, [pc, #40]	@ (80104f0 <vTaskSwitchContext+0xf0>)
 80104c6:	6013      	str	r3, [r2, #0]
 80104c8:	4a0a      	ldr	r2, [pc, #40]	@ (80104f4 <vTaskSwitchContext+0xf4>)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80104ce:	4b08      	ldr	r3, [pc, #32]	@ (80104f0 <vTaskSwitchContext+0xf0>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	335c      	adds	r3, #92	@ 0x5c
 80104d4:	4a09      	ldr	r2, [pc, #36]	@ (80104fc <vTaskSwitchContext+0xfc>)
 80104d6:	6013      	str	r3, [r2, #0]
}
 80104d8:	bf00      	nop
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	20003570 	.word	0x20003570
 80104e4:	2000355c 	.word	0x2000355c
 80104e8:	20003578 	.word	0x20003578
 80104ec:	20003574 	.word	0x20003574
 80104f0:	20003074 	.word	0x20003074
 80104f4:	20003550 	.word	0x20003550
 80104f8:	20003078 	.word	0x20003078
 80104fc:	20000194 	.word	0x20000194

08010500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d10b      	bne.n	8010528 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	60fb      	str	r3, [r7, #12]
}
 8010522:	bf00      	nop
 8010524:	bf00      	nop
 8010526:	e7fd      	b.n	8010524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010528:	4b07      	ldr	r3, [pc, #28]	@ (8010548 <vTaskPlaceOnEventList+0x48>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	3318      	adds	r3, #24
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7fe f9ba 	bl	800e8aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010536:	2101      	movs	r1, #1
 8010538:	6838      	ldr	r0, [r7, #0]
 801053a:	f000 fb97 	bl	8010c6c <prvAddCurrentTaskToDelayedList>
}
 801053e:	bf00      	nop
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	20003074 	.word	0x20003074

0801054c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801054c:	b580      	push	{r7, lr}
 801054e:	b086      	sub	sp, #24
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d10b      	bne.n	8010576 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801055e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010562:	f383 8811 	msr	BASEPRI, r3
 8010566:	f3bf 8f6f 	isb	sy
 801056a:	f3bf 8f4f 	dsb	sy
 801056e:	617b      	str	r3, [r7, #20]
}
 8010570:	bf00      	nop
 8010572:	bf00      	nop
 8010574:	e7fd      	b.n	8010572 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010576:	4b0a      	ldr	r3, [pc, #40]	@ (80105a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	3318      	adds	r3, #24
 801057c:	4619      	mov	r1, r3
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f7fe f96f 	bl	800e862 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801058a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801058e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010590:	6879      	ldr	r1, [r7, #4]
 8010592:	68b8      	ldr	r0, [r7, #8]
 8010594:	f000 fb6a 	bl	8010c6c <prvAddCurrentTaskToDelayedList>
	}
 8010598:	bf00      	nop
 801059a:	3718      	adds	r7, #24
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	20003074 	.word	0x20003074

080105a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d10b      	bne.n	80105d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80105ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105be:	f383 8811 	msr	BASEPRI, r3
 80105c2:	f3bf 8f6f 	isb	sy
 80105c6:	f3bf 8f4f 	dsb	sy
 80105ca:	60fb      	str	r3, [r7, #12]
}
 80105cc:	bf00      	nop
 80105ce:	bf00      	nop
 80105d0:	e7fd      	b.n	80105ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	3318      	adds	r3, #24
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fe f9a0 	bl	800e91c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105dc:	4b1d      	ldr	r3, [pc, #116]	@ (8010654 <xTaskRemoveFromEventList+0xb0>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d11d      	bne.n	8010620 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	3304      	adds	r3, #4
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fe f997 	bl	800e91c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105f2:	4b19      	ldr	r3, [pc, #100]	@ (8010658 <xTaskRemoveFromEventList+0xb4>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d903      	bls.n	8010602 <xTaskRemoveFromEventList+0x5e>
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105fe:	4a16      	ldr	r2, [pc, #88]	@ (8010658 <xTaskRemoveFromEventList+0xb4>)
 8010600:	6013      	str	r3, [r2, #0]
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010606:	4613      	mov	r3, r2
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4413      	add	r3, r2
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	4a13      	ldr	r2, [pc, #76]	@ (801065c <xTaskRemoveFromEventList+0xb8>)
 8010610:	441a      	add	r2, r3
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	3304      	adds	r3, #4
 8010616:	4619      	mov	r1, r3
 8010618:	4610      	mov	r0, r2
 801061a:	f7fe f922 	bl	800e862 <vListInsertEnd>
 801061e:	e005      	b.n	801062c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	3318      	adds	r3, #24
 8010624:	4619      	mov	r1, r3
 8010626:	480e      	ldr	r0, [pc, #56]	@ (8010660 <xTaskRemoveFromEventList+0xbc>)
 8010628:	f7fe f91b 	bl	800e862 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010630:	4b0c      	ldr	r3, [pc, #48]	@ (8010664 <xTaskRemoveFromEventList+0xc0>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010636:	429a      	cmp	r2, r3
 8010638:	d905      	bls.n	8010646 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801063a:	2301      	movs	r3, #1
 801063c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801063e:	4b0a      	ldr	r3, [pc, #40]	@ (8010668 <xTaskRemoveFromEventList+0xc4>)
 8010640:	2201      	movs	r2, #1
 8010642:	601a      	str	r2, [r3, #0]
 8010644:	e001      	b.n	801064a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010646:	2300      	movs	r3, #0
 8010648:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801064a:	697b      	ldr	r3, [r7, #20]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	20003570 	.word	0x20003570
 8010658:	20003550 	.word	0x20003550
 801065c:	20003078 	.word	0x20003078
 8010660:	20003508 	.word	0x20003508
 8010664:	20003074 	.word	0x20003074
 8010668:	2000355c 	.word	0x2000355c

0801066c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010674:	4b06      	ldr	r3, [pc, #24]	@ (8010690 <vTaskInternalSetTimeOutState+0x24>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801067c:	4b05      	ldr	r3, [pc, #20]	@ (8010694 <vTaskInternalSetTimeOutState+0x28>)
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	605a      	str	r2, [r3, #4]
}
 8010684:	bf00      	nop
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	20003560 	.word	0x20003560
 8010694:	2000354c 	.word	0x2000354c

08010698 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b088      	sub	sp, #32
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d10b      	bne.n	80106c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80106a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ac:	f383 8811 	msr	BASEPRI, r3
 80106b0:	f3bf 8f6f 	isb	sy
 80106b4:	f3bf 8f4f 	dsb	sy
 80106b8:	613b      	str	r3, [r7, #16]
}
 80106ba:	bf00      	nop
 80106bc:	bf00      	nop
 80106be:	e7fd      	b.n	80106bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10b      	bne.n	80106de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80106c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ca:	f383 8811 	msr	BASEPRI, r3
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f3bf 8f4f 	dsb	sy
 80106d6:	60fb      	str	r3, [r7, #12]
}
 80106d8:	bf00      	nop
 80106da:	bf00      	nop
 80106dc:	e7fd      	b.n	80106da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80106de:	f000 ffa3 	bl	8011628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80106e2:	4b1d      	ldr	r3, [pc, #116]	@ (8010758 <xTaskCheckForTimeOut+0xc0>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	69ba      	ldr	r2, [r7, #24]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80106fa:	d102      	bne.n	8010702 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80106fc:	2300      	movs	r3, #0
 80106fe:	61fb      	str	r3, [r7, #28]
 8010700:	e023      	b.n	801074a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	4b15      	ldr	r3, [pc, #84]	@ (801075c <xTaskCheckForTimeOut+0xc4>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d007      	beq.n	801071e <xTaskCheckForTimeOut+0x86>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	69ba      	ldr	r2, [r7, #24]
 8010714:	429a      	cmp	r2, r3
 8010716:	d302      	bcc.n	801071e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010718:	2301      	movs	r3, #1
 801071a:	61fb      	str	r3, [r7, #28]
 801071c:	e015      	b.n	801074a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	429a      	cmp	r2, r3
 8010726:	d20b      	bcs.n	8010740 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	1ad2      	subs	r2, r2, r3
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff ff99 	bl	801066c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801073a:	2300      	movs	r3, #0
 801073c:	61fb      	str	r3, [r7, #28]
 801073e:	e004      	b.n	801074a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2200      	movs	r2, #0
 8010744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010746:	2301      	movs	r3, #1
 8010748:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801074a:	f000 ff9f 	bl	801168c <vPortExitCritical>

	return xReturn;
 801074e:	69fb      	ldr	r3, [r7, #28]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3720      	adds	r7, #32
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	2000354c 	.word	0x2000354c
 801075c:	20003560 	.word	0x20003560

08010760 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010760:	b480      	push	{r7}
 8010762:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010764:	4b03      	ldr	r3, [pc, #12]	@ (8010774 <vTaskMissedYield+0x14>)
 8010766:	2201      	movs	r2, #1
 8010768:	601a      	str	r2, [r3, #0]
}
 801076a:	bf00      	nop
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr
 8010774:	2000355c 	.word	0x2000355c

08010778 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010780:	f000 f852 	bl	8010828 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010784:	4b06      	ldr	r3, [pc, #24]	@ (80107a0 <prvIdleTask+0x28>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b01      	cmp	r3, #1
 801078a:	d9f9      	bls.n	8010780 <prvIdleTask+0x8>
			{
				taskYIELD();
 801078c:	4b05      	ldr	r3, [pc, #20]	@ (80107a4 <prvIdleTask+0x2c>)
 801078e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010792:	601a      	str	r2, [r3, #0]
 8010794:	f3bf 8f4f 	dsb	sy
 8010798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801079c:	e7f0      	b.n	8010780 <prvIdleTask+0x8>
 801079e:	bf00      	nop
 80107a0:	20003078 	.word	0x20003078
 80107a4:	e000ed04 	.word	0xe000ed04

080107a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80107ae:	2300      	movs	r3, #0
 80107b0:	607b      	str	r3, [r7, #4]
 80107b2:	e00c      	b.n	80107ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	4613      	mov	r3, r2
 80107b8:	009b      	lsls	r3, r3, #2
 80107ba:	4413      	add	r3, r2
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4a12      	ldr	r2, [pc, #72]	@ (8010808 <prvInitialiseTaskLists+0x60>)
 80107c0:	4413      	add	r3, r2
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fe f820 	bl	800e808 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	3301      	adds	r3, #1
 80107cc:	607b      	str	r3, [r7, #4]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2b37      	cmp	r3, #55	@ 0x37
 80107d2:	d9ef      	bls.n	80107b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80107d4:	480d      	ldr	r0, [pc, #52]	@ (801080c <prvInitialiseTaskLists+0x64>)
 80107d6:	f7fe f817 	bl	800e808 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80107da:	480d      	ldr	r0, [pc, #52]	@ (8010810 <prvInitialiseTaskLists+0x68>)
 80107dc:	f7fe f814 	bl	800e808 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80107e0:	480c      	ldr	r0, [pc, #48]	@ (8010814 <prvInitialiseTaskLists+0x6c>)
 80107e2:	f7fe f811 	bl	800e808 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80107e6:	480c      	ldr	r0, [pc, #48]	@ (8010818 <prvInitialiseTaskLists+0x70>)
 80107e8:	f7fe f80e 	bl	800e808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80107ec:	480b      	ldr	r0, [pc, #44]	@ (801081c <prvInitialiseTaskLists+0x74>)
 80107ee:	f7fe f80b 	bl	800e808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80107f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010820 <prvInitialiseTaskLists+0x78>)
 80107f4:	4a05      	ldr	r2, [pc, #20]	@ (801080c <prvInitialiseTaskLists+0x64>)
 80107f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80107f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010824 <prvInitialiseTaskLists+0x7c>)
 80107fa:	4a05      	ldr	r2, [pc, #20]	@ (8010810 <prvInitialiseTaskLists+0x68>)
 80107fc:	601a      	str	r2, [r3, #0]
}
 80107fe:	bf00      	nop
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	20003078 	.word	0x20003078
 801080c:	200034d8 	.word	0x200034d8
 8010810:	200034ec 	.word	0x200034ec
 8010814:	20003508 	.word	0x20003508
 8010818:	2000351c 	.word	0x2000351c
 801081c:	20003534 	.word	0x20003534
 8010820:	20003500 	.word	0x20003500
 8010824:	20003504 	.word	0x20003504

08010828 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801082e:	e019      	b.n	8010864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010830:	f000 fefa 	bl	8011628 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010834:	4b10      	ldr	r3, [pc, #64]	@ (8010878 <prvCheckTasksWaitingTermination+0x50>)
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	3304      	adds	r3, #4
 8010840:	4618      	mov	r0, r3
 8010842:	f7fe f86b 	bl	800e91c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010846:	4b0d      	ldr	r3, [pc, #52]	@ (801087c <prvCheckTasksWaitingTermination+0x54>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	3b01      	subs	r3, #1
 801084c:	4a0b      	ldr	r2, [pc, #44]	@ (801087c <prvCheckTasksWaitingTermination+0x54>)
 801084e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010850:	4b0b      	ldr	r3, [pc, #44]	@ (8010880 <prvCheckTasksWaitingTermination+0x58>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	3b01      	subs	r3, #1
 8010856:	4a0a      	ldr	r2, [pc, #40]	@ (8010880 <prvCheckTasksWaitingTermination+0x58>)
 8010858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801085a:	f000 ff17 	bl	801168c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 f810 	bl	8010884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010864:	4b06      	ldr	r3, [pc, #24]	@ (8010880 <prvCheckTasksWaitingTermination+0x58>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d1e1      	bne.n	8010830 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801086c:	bf00      	nop
 801086e:	bf00      	nop
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	2000351c 	.word	0x2000351c
 801087c:	20003548 	.word	0x20003548
 8010880:	20003530 	.word	0x20003530

08010884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	335c      	adds	r3, #92	@ 0x5c
 8010890:	4618      	mov	r0, r3
 8010892:	f003 fae3 	bl	8013e5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801089c:	2b00      	cmp	r3, #0
 801089e:	d108      	bne.n	80108b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108a4:	4618      	mov	r0, r3
 80108a6:	f001 f8af 	bl	8011a08 <vPortFree>
				vPortFree( pxTCB );
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f001 f8ac 	bl	8011a08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80108b0:	e019      	b.n	80108e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d103      	bne.n	80108c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f001 f8a3 	bl	8011a08 <vPortFree>
	}
 80108c2:	e010      	b.n	80108e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80108ca:	2b02      	cmp	r3, #2
 80108cc:	d00b      	beq.n	80108e6 <prvDeleteTCB+0x62>
	__asm volatile
 80108ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108d2:	f383 8811 	msr	BASEPRI, r3
 80108d6:	f3bf 8f6f 	isb	sy
 80108da:	f3bf 8f4f 	dsb	sy
 80108de:	60fb      	str	r3, [r7, #12]
}
 80108e0:	bf00      	nop
 80108e2:	bf00      	nop
 80108e4:	e7fd      	b.n	80108e2 <prvDeleteTCB+0x5e>
	}
 80108e6:	bf00      	nop
 80108e8:	3710      	adds	r7, #16
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
	...

080108f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108f6:	4b0c      	ldr	r3, [pc, #48]	@ (8010928 <prvResetNextTaskUnblockTime+0x38>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d104      	bne.n	801090a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010900:	4b0a      	ldr	r3, [pc, #40]	@ (801092c <prvResetNextTaskUnblockTime+0x3c>)
 8010902:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010908:	e008      	b.n	801091c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801090a:	4b07      	ldr	r3, [pc, #28]	@ (8010928 <prvResetNextTaskUnblockTime+0x38>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	4a04      	ldr	r2, [pc, #16]	@ (801092c <prvResetNextTaskUnblockTime+0x3c>)
 801091a:	6013      	str	r3, [r2, #0]
}
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr
 8010928:	20003500 	.word	0x20003500
 801092c:	20003568 	.word	0x20003568

08010930 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010936:	4b05      	ldr	r3, [pc, #20]	@ (801094c <xTaskGetCurrentTaskHandle+0x1c>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801093c:	687b      	ldr	r3, [r7, #4]
	}
 801093e:	4618      	mov	r0, r3
 8010940:	370c      	adds	r7, #12
 8010942:	46bd      	mov	sp, r7
 8010944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	20003074 	.word	0x20003074

08010950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010956:	4b0b      	ldr	r3, [pc, #44]	@ (8010984 <xTaskGetSchedulerState+0x34>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d102      	bne.n	8010964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801095e:	2301      	movs	r3, #1
 8010960:	607b      	str	r3, [r7, #4]
 8010962:	e008      	b.n	8010976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010964:	4b08      	ldr	r3, [pc, #32]	@ (8010988 <xTaskGetSchedulerState+0x38>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d102      	bne.n	8010972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801096c:	2302      	movs	r3, #2
 801096e:	607b      	str	r3, [r7, #4]
 8010970:	e001      	b.n	8010976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010972:	2300      	movs	r3, #0
 8010974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010976:	687b      	ldr	r3, [r7, #4]
	}
 8010978:	4618      	mov	r0, r3
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	20003554 	.word	0x20003554
 8010988:	20003570 	.word	0x20003570

0801098c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010998:	2300      	movs	r3, #0
 801099a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d051      	beq.n	8010a46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109a6:	4b2a      	ldr	r3, [pc, #168]	@ (8010a50 <xTaskPriorityInherit+0xc4>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d241      	bcs.n	8010a34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	699b      	ldr	r3, [r3, #24]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	db06      	blt.n	80109c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109b8:	4b25      	ldr	r3, [pc, #148]	@ (8010a50 <xTaskPriorityInherit+0xc4>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	6959      	ldr	r1, [r3, #20]
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ce:	4613      	mov	r3, r2
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	4413      	add	r3, r2
 80109d4:	009b      	lsls	r3, r3, #2
 80109d6:	4a1f      	ldr	r2, [pc, #124]	@ (8010a54 <xTaskPriorityInherit+0xc8>)
 80109d8:	4413      	add	r3, r2
 80109da:	4299      	cmp	r1, r3
 80109dc:	d122      	bne.n	8010a24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	3304      	adds	r3, #4
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fd ff9a 	bl	800e91c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80109e8:	4b19      	ldr	r3, [pc, #100]	@ (8010a50 <xTaskPriorityInherit+0xc4>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109f6:	4b18      	ldr	r3, [pc, #96]	@ (8010a58 <xTaskPriorityInherit+0xcc>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d903      	bls.n	8010a06 <xTaskPriorityInherit+0x7a>
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a02:	4a15      	ldr	r2, [pc, #84]	@ (8010a58 <xTaskPriorityInherit+0xcc>)
 8010a04:	6013      	str	r3, [r2, #0]
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a0a:	4613      	mov	r3, r2
 8010a0c:	009b      	lsls	r3, r3, #2
 8010a0e:	4413      	add	r3, r2
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	4a10      	ldr	r2, [pc, #64]	@ (8010a54 <xTaskPriorityInherit+0xc8>)
 8010a14:	441a      	add	r2, r3
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	3304      	adds	r3, #4
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	f7fd ff20 	bl	800e862 <vListInsertEnd>
 8010a22:	e004      	b.n	8010a2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a24:	4b0a      	ldr	r3, [pc, #40]	@ (8010a50 <xTaskPriorityInherit+0xc4>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010a2e:	2301      	movs	r3, #1
 8010a30:	60fb      	str	r3, [r7, #12]
 8010a32:	e008      	b.n	8010a46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a38:	4b05      	ldr	r3, [pc, #20]	@ (8010a50 <xTaskPriorityInherit+0xc4>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d201      	bcs.n	8010a46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010a42:	2301      	movs	r3, #1
 8010a44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a46:	68fb      	ldr	r3, [r7, #12]
	}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3710      	adds	r7, #16
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	20003074 	.word	0x20003074
 8010a54:	20003078 	.word	0x20003078
 8010a58:	20003550 	.word	0x20003550

08010a5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d058      	beq.n	8010b24 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010a72:	4b2f      	ldr	r3, [pc, #188]	@ (8010b30 <xTaskPriorityDisinherit+0xd4>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	693a      	ldr	r2, [r7, #16]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d00b      	beq.n	8010a94 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	60fb      	str	r3, [r7, #12]
}
 8010a8e:	bf00      	nop
 8010a90:	bf00      	nop
 8010a92:	e7fd      	b.n	8010a90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d10b      	bne.n	8010ab4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	60bb      	str	r3, [r7, #8]
}
 8010aae:	bf00      	nop
 8010ab0:	bf00      	nop
 8010ab2:	e7fd      	b.n	8010ab0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ab8:	1e5a      	subs	r2, r3, #1
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d02c      	beq.n	8010b24 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d128      	bne.n	8010b24 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	3304      	adds	r3, #4
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fd ff20 	bl	800e91c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ae8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010af4:	4b0f      	ldr	r3, [pc, #60]	@ (8010b34 <xTaskPriorityDisinherit+0xd8>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d903      	bls.n	8010b04 <xTaskPriorityDisinherit+0xa8>
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b00:	4a0c      	ldr	r2, [pc, #48]	@ (8010b34 <xTaskPriorityDisinherit+0xd8>)
 8010b02:	6013      	str	r3, [r2, #0]
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b08:	4613      	mov	r3, r2
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	4413      	add	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	4a09      	ldr	r2, [pc, #36]	@ (8010b38 <xTaskPriorityDisinherit+0xdc>)
 8010b12:	441a      	add	r2, r3
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	3304      	adds	r3, #4
 8010b18:	4619      	mov	r1, r3
 8010b1a:	4610      	mov	r0, r2
 8010b1c:	f7fd fea1 	bl	800e862 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010b20:	2301      	movs	r3, #1
 8010b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010b24:	697b      	ldr	r3, [r7, #20]
	}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	20003074 	.word	0x20003074
 8010b34:	20003550 	.word	0x20003550
 8010b38:	20003078 	.word	0x20003078

08010b3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b088      	sub	sp, #32
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d06c      	beq.n	8010c2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10b      	bne.n	8010b74 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b60:	f383 8811 	msr	BASEPRI, r3
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	60fb      	str	r3, [r7, #12]
}
 8010b6e:	bf00      	nop
 8010b70:	bf00      	nop
 8010b72:	e7fd      	b.n	8010b70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b78:	683a      	ldr	r2, [r7, #0]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d902      	bls.n	8010b84 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	61fb      	str	r3, [r7, #28]
 8010b82:	e002      	b.n	8010b8a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b8e:	69fa      	ldr	r2, [r7, #28]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d04c      	beq.n	8010c2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010b94:	69bb      	ldr	r3, [r7, #24]
 8010b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b98:	697a      	ldr	r2, [r7, #20]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d147      	bne.n	8010c2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010b9e:	4b26      	ldr	r3, [pc, #152]	@ (8010c38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	69ba      	ldr	r2, [r7, #24]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d10b      	bne.n	8010bc0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bac:	f383 8811 	msr	BASEPRI, r3
 8010bb0:	f3bf 8f6f 	isb	sy
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	60bb      	str	r3, [r7, #8]
}
 8010bba:	bf00      	nop
 8010bbc:	bf00      	nop
 8010bbe:	e7fd      	b.n	8010bbc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	69fa      	ldr	r2, [r7, #28]
 8010bca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	db04      	blt.n	8010bde <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	6959      	ldr	r1, [r3, #20]
 8010be2:	693a      	ldr	r2, [r7, #16]
 8010be4:	4613      	mov	r3, r2
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	4a13      	ldr	r2, [pc, #76]	@ (8010c3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010bee:	4413      	add	r3, r2
 8010bf0:	4299      	cmp	r1, r3
 8010bf2:	d11c      	bne.n	8010c2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	3304      	adds	r3, #4
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fd fe8f 	bl	800e91c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c02:	4b0f      	ldr	r3, [pc, #60]	@ (8010c40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d903      	bls.n	8010c12 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8010c40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010c10:	6013      	str	r3, [r2, #0]
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c16:	4613      	mov	r3, r2
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	4413      	add	r3, r2
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	4a07      	ldr	r2, [pc, #28]	@ (8010c3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010c20:	441a      	add	r2, r3
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	3304      	adds	r3, #4
 8010c26:	4619      	mov	r1, r3
 8010c28:	4610      	mov	r0, r2
 8010c2a:	f7fd fe1a 	bl	800e862 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c2e:	bf00      	nop
 8010c30:	3720      	adds	r7, #32
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	20003074 	.word	0x20003074
 8010c3c:	20003078 	.word	0x20003078
 8010c40:	20003550 	.word	0x20003550

08010c44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010c44:	b480      	push	{r7}
 8010c46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010c48:	4b07      	ldr	r3, [pc, #28]	@ (8010c68 <pvTaskIncrementMutexHeldCount+0x24>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d004      	beq.n	8010c5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010c50:	4b05      	ldr	r3, [pc, #20]	@ (8010c68 <pvTaskIncrementMutexHeldCount+0x24>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010c56:	3201      	adds	r2, #1
 8010c58:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8010c5a:	4b03      	ldr	r3, [pc, #12]	@ (8010c68 <pvTaskIncrementMutexHeldCount+0x24>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
	}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr
 8010c68:	20003074 	.word	0x20003074

08010c6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010c76:	4b21      	ldr	r3, [pc, #132]	@ (8010cfc <prvAddCurrentTaskToDelayedList+0x90>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c7c:	4b20      	ldr	r3, [pc, #128]	@ (8010d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3304      	adds	r3, #4
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fd fe4a 	bl	800e91c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010c8e:	d10a      	bne.n	8010ca6 <prvAddCurrentTaskToDelayedList+0x3a>
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d007      	beq.n	8010ca6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c96:	4b1a      	ldr	r3, [pc, #104]	@ (8010d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	3304      	adds	r3, #4
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	4819      	ldr	r0, [pc, #100]	@ (8010d04 <prvAddCurrentTaskToDelayedList+0x98>)
 8010ca0:	f7fd fddf 	bl	800e862 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ca4:	e026      	b.n	8010cf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4413      	add	r3, r2
 8010cac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010cae:	4b14      	ldr	r3, [pc, #80]	@ (8010d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	68ba      	ldr	r2, [r7, #8]
 8010cb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010cb6:	68ba      	ldr	r2, [r7, #8]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d209      	bcs.n	8010cd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010cbe:	4b12      	ldr	r3, [pc, #72]	@ (8010d08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8010d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	3304      	adds	r3, #4
 8010cc8:	4619      	mov	r1, r3
 8010cca:	4610      	mov	r0, r2
 8010ccc:	f7fd fded 	bl	800e8aa <vListInsert>
}
 8010cd0:	e010      	b.n	8010cf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8010d0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8010d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	3304      	adds	r3, #4
 8010cdc:	4619      	mov	r1, r3
 8010cde:	4610      	mov	r0, r2
 8010ce0:	f7fd fde3 	bl	800e8aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8010d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	68ba      	ldr	r2, [r7, #8]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d202      	bcs.n	8010cf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010cee:	4a08      	ldr	r2, [pc, #32]	@ (8010d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	6013      	str	r3, [r2, #0]
}
 8010cf4:	bf00      	nop
 8010cf6:	3710      	adds	r7, #16
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	2000354c 	.word	0x2000354c
 8010d00:	20003074 	.word	0x20003074
 8010d04:	20003534 	.word	0x20003534
 8010d08:	20003504 	.word	0x20003504
 8010d0c:	20003500 	.word	0x20003500
 8010d10:	20003568 	.word	0x20003568

08010d14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b08a      	sub	sp, #40	@ 0x28
 8010d18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010d1e:	f000 fb13 	bl	8011348 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010d22:	4b1d      	ldr	r3, [pc, #116]	@ (8010d98 <xTimerCreateTimerTask+0x84>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d021      	beq.n	8010d6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010d32:	1d3a      	adds	r2, r7, #4
 8010d34:	f107 0108 	add.w	r1, r7, #8
 8010d38:	f107 030c 	add.w	r3, r7, #12
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fd fd49 	bl	800e7d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010d42:	6879      	ldr	r1, [r7, #4]
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	9202      	str	r2, [sp, #8]
 8010d4a:	9301      	str	r3, [sp, #4]
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	2300      	movs	r3, #0
 8010d52:	460a      	mov	r2, r1
 8010d54:	4911      	ldr	r1, [pc, #68]	@ (8010d9c <xTimerCreateTimerTask+0x88>)
 8010d56:	4812      	ldr	r0, [pc, #72]	@ (8010da0 <xTimerCreateTimerTask+0x8c>)
 8010d58:	f7fe feee 	bl	800fb38 <xTaskCreateStatic>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	4a11      	ldr	r2, [pc, #68]	@ (8010da4 <xTimerCreateTimerTask+0x90>)
 8010d60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010d62:	4b10      	ldr	r3, [pc, #64]	@ (8010da4 <xTimerCreateTimerTask+0x90>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d10b      	bne.n	8010d8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d78:	f383 8811 	msr	BASEPRI, r3
 8010d7c:	f3bf 8f6f 	isb	sy
 8010d80:	f3bf 8f4f 	dsb	sy
 8010d84:	613b      	str	r3, [r7, #16]
}
 8010d86:	bf00      	nop
 8010d88:	bf00      	nop
 8010d8a:	e7fd      	b.n	8010d88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010d8c:	697b      	ldr	r3, [r7, #20]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3718      	adds	r7, #24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	200035ac 	.word	0x200035ac
 8010d9c:	080164dc 	.word	0x080164dc
 8010da0:	08010ee1 	.word	0x08010ee1
 8010da4:	200035b0 	.word	0x200035b0

08010da8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08a      	sub	sp, #40	@ 0x28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	607a      	str	r2, [r7, #4]
 8010db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010db6:	2300      	movs	r3, #0
 8010db8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10b      	bne.n	8010dd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8010dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	623b      	str	r3, [r7, #32]
}
 8010dd2:	bf00      	nop
 8010dd4:	bf00      	nop
 8010dd6:	e7fd      	b.n	8010dd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010dd8:	4b19      	ldr	r3, [pc, #100]	@ (8010e40 <xTimerGenericCommand+0x98>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d02a      	beq.n	8010e36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b05      	cmp	r3, #5
 8010df0:	dc18      	bgt.n	8010e24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010df2:	f7ff fdad 	bl	8010950 <xTaskGetSchedulerState>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d109      	bne.n	8010e10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010dfc:	4b10      	ldr	r3, [pc, #64]	@ (8010e40 <xTimerGenericCommand+0x98>)
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	f107 0110 	add.w	r1, r7, #16
 8010e04:	2300      	movs	r3, #0
 8010e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e08:	f7fe f81e 	bl	800ee48 <xQueueGenericSend>
 8010e0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e0e:	e012      	b.n	8010e36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010e10:	4b0b      	ldr	r3, [pc, #44]	@ (8010e40 <xTimerGenericCommand+0x98>)
 8010e12:	6818      	ldr	r0, [r3, #0]
 8010e14:	f107 0110 	add.w	r1, r7, #16
 8010e18:	2300      	movs	r3, #0
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f7fe f814 	bl	800ee48 <xQueueGenericSend>
 8010e20:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e22:	e008      	b.n	8010e36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010e24:	4b06      	ldr	r3, [pc, #24]	@ (8010e40 <xTimerGenericCommand+0x98>)
 8010e26:	6818      	ldr	r0, [r3, #0]
 8010e28:	f107 0110 	add.w	r1, r7, #16
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	683a      	ldr	r2, [r7, #0]
 8010e30:	f7fe f90c 	bl	800f04c <xQueueGenericSendFromISR>
 8010e34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3728      	adds	r7, #40	@ 0x28
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	200035ac 	.word	0x200035ac

08010e44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b088      	sub	sp, #32
 8010e48:	af02      	add	r7, sp, #8
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e4e:	4b23      	ldr	r3, [pc, #140]	@ (8010edc <prvProcessExpiredTimer+0x98>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	3304      	adds	r3, #4
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fd fd5d 	bl	800e91c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e68:	f003 0304 	and.w	r3, r3, #4
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d023      	beq.n	8010eb8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	699a      	ldr	r2, [r3, #24]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	18d1      	adds	r1, r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	683a      	ldr	r2, [r7, #0]
 8010e7c:	6978      	ldr	r0, [r7, #20]
 8010e7e:	f000 f8d5 	bl	801102c <prvInsertTimerInActiveList>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d020      	beq.n	8010eca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e88:	2300      	movs	r3, #0
 8010e8a:	9300      	str	r3, [sp, #0]
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	2100      	movs	r1, #0
 8010e92:	6978      	ldr	r0, [r7, #20]
 8010e94:	f7ff ff88 	bl	8010da8 <xTimerGenericCommand>
 8010e98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d114      	bne.n	8010eca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea4:	f383 8811 	msr	BASEPRI, r3
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	60fb      	str	r3, [r7, #12]
}
 8010eb2:	bf00      	nop
 8010eb4:	bf00      	nop
 8010eb6:	e7fd      	b.n	8010eb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ebe:	f023 0301 	bic.w	r3, r3, #1
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	6a1b      	ldr	r3, [r3, #32]
 8010ece:	6978      	ldr	r0, [r7, #20]
 8010ed0:	4798      	blx	r3
}
 8010ed2:	bf00      	nop
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	200035a4 	.word	0x200035a4

08010ee0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ee8:	f107 0308 	add.w	r3, r7, #8
 8010eec:	4618      	mov	r0, r3
 8010eee:	f000 f859 	bl	8010fa4 <prvGetNextExpireTime>
 8010ef2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f000 f805 	bl	8010f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010efe:	f000 f8d7 	bl	80110b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f02:	bf00      	nop
 8010f04:	e7f0      	b.n	8010ee8 <prvTimerTask+0x8>
	...

08010f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010f12:	f7ff f8ed 	bl	80100f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f16:	f107 0308 	add.w	r3, r7, #8
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f000 f866 	bl	8010fec <prvSampleTimeNow>
 8010f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d130      	bne.n	8010f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d10a      	bne.n	8010f44 <prvProcessTimerOrBlockTask+0x3c>
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d806      	bhi.n	8010f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010f36:	f7ff f8e9 	bl	801010c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010f3a:	68f9      	ldr	r1, [r7, #12]
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7ff ff81 	bl	8010e44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010f42:	e024      	b.n	8010f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d008      	beq.n	8010f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010f4a:	4b13      	ldr	r3, [pc, #76]	@ (8010f98 <prvProcessTimerOrBlockTask+0x90>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d101      	bne.n	8010f58 <prvProcessTimerOrBlockTask+0x50>
 8010f54:	2301      	movs	r3, #1
 8010f56:	e000      	b.n	8010f5a <prvProcessTimerOrBlockTask+0x52>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8010f9c <prvProcessTimerOrBlockTask+0x94>)
 8010f5e:	6818      	ldr	r0, [r3, #0]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	1ad3      	subs	r3, r2, r3
 8010f66:	683a      	ldr	r2, [r7, #0]
 8010f68:	4619      	mov	r1, r3
 8010f6a:	f7fe fdb1 	bl	800fad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010f6e:	f7ff f8cd 	bl	801010c <xTaskResumeAll>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d10a      	bne.n	8010f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010f78:	4b09      	ldr	r3, [pc, #36]	@ (8010fa0 <prvProcessTimerOrBlockTask+0x98>)
 8010f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f7e:	601a      	str	r2, [r3, #0]
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	f3bf 8f6f 	isb	sy
}
 8010f88:	e001      	b.n	8010f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010f8a:	f7ff f8bf 	bl	801010c <xTaskResumeAll>
}
 8010f8e:	bf00      	nop
 8010f90:	3710      	adds	r7, #16
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	200035a8 	.word	0x200035a8
 8010f9c:	200035ac 	.word	0x200035ac
 8010fa0:	e000ed04 	.word	0xe000ed04

08010fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010fac:	4b0e      	ldr	r3, [pc, #56]	@ (8010fe8 <prvGetNextExpireTime+0x44>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d101      	bne.n	8010fba <prvGetNextExpireTime+0x16>
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	e000      	b.n	8010fbc <prvGetNextExpireTime+0x18>
 8010fba:	2200      	movs	r2, #0
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d105      	bne.n	8010fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010fc8:	4b07      	ldr	r3, [pc, #28]	@ (8010fe8 <prvGetNextExpireTime+0x44>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	e001      	b.n	8010fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3714      	adds	r7, #20
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop
 8010fe8:	200035a4 	.word	0x200035a4

08010fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010ff4:	f7ff f928 	bl	8010248 <xTaskGetTickCount>
 8010ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8011028 <prvSampleTimeNow+0x3c>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	429a      	cmp	r2, r3
 8011002:	d205      	bcs.n	8011010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011004:	f000 f93a 	bl	801127c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2201      	movs	r2, #1
 801100c:	601a      	str	r2, [r3, #0]
 801100e:	e002      	b.n	8011016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2200      	movs	r2, #0
 8011014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011016:	4a04      	ldr	r2, [pc, #16]	@ (8011028 <prvSampleTimeNow+0x3c>)
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801101c:	68fb      	ldr	r3, [r7, #12]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	200035b4 	.word	0x200035b4

0801102c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
 8011038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801103a:	2300      	movs	r3, #0
 801103c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	68ba      	ldr	r2, [r7, #8]
 8011042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	68fa      	ldr	r2, [r7, #12]
 8011048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	429a      	cmp	r2, r3
 8011050:	d812      	bhi.n	8011078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	1ad2      	subs	r2, r2, r3
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	699b      	ldr	r3, [r3, #24]
 801105c:	429a      	cmp	r2, r3
 801105e:	d302      	bcc.n	8011066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011060:	2301      	movs	r3, #1
 8011062:	617b      	str	r3, [r7, #20]
 8011064:	e01b      	b.n	801109e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011066:	4b10      	ldr	r3, [pc, #64]	@ (80110a8 <prvInsertTimerInActiveList+0x7c>)
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	3304      	adds	r3, #4
 801106e:	4619      	mov	r1, r3
 8011070:	4610      	mov	r0, r2
 8011072:	f7fd fc1a 	bl	800e8aa <vListInsert>
 8011076:	e012      	b.n	801109e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	429a      	cmp	r2, r3
 801107e:	d206      	bcs.n	801108e <prvInsertTimerInActiveList+0x62>
 8011080:	68ba      	ldr	r2, [r7, #8]
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	429a      	cmp	r2, r3
 8011086:	d302      	bcc.n	801108e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011088:	2301      	movs	r3, #1
 801108a:	617b      	str	r3, [r7, #20]
 801108c:	e007      	b.n	801109e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801108e:	4b07      	ldr	r3, [pc, #28]	@ (80110ac <prvInsertTimerInActiveList+0x80>)
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	3304      	adds	r3, #4
 8011096:	4619      	mov	r1, r3
 8011098:	4610      	mov	r0, r2
 801109a:	f7fd fc06 	bl	800e8aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 801109e:	697b      	ldr	r3, [r7, #20]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3718      	adds	r7, #24
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	200035a8 	.word	0x200035a8
 80110ac:	200035a4 	.word	0x200035a4

080110b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b08e      	sub	sp, #56	@ 0x38
 80110b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80110b6:	e0ce      	b.n	8011256 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	da19      	bge.n	80110f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80110be:	1d3b      	adds	r3, r7, #4
 80110c0:	3304      	adds	r3, #4
 80110c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80110c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d10b      	bne.n	80110e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80110ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ce:	f383 8811 	msr	BASEPRI, r3
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	f3bf 8f4f 	dsb	sy
 80110da:	61fb      	str	r3, [r7, #28]
}
 80110dc:	bf00      	nop
 80110de:	bf00      	nop
 80110e0:	e7fd      	b.n	80110de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80110e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110e8:	6850      	ldr	r0, [r2, #4]
 80110ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110ec:	6892      	ldr	r2, [r2, #8]
 80110ee:	4611      	mov	r1, r2
 80110f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f2c0 80ae 	blt.w	8011256 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80110fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011100:	695b      	ldr	r3, [r3, #20]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d004      	beq.n	8011110 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011108:	3304      	adds	r3, #4
 801110a:	4618      	mov	r0, r3
 801110c:	f7fd fc06 	bl	800e91c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011110:	463b      	mov	r3, r7
 8011112:	4618      	mov	r0, r3
 8011114:	f7ff ff6a 	bl	8010fec <prvSampleTimeNow>
 8011118:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2b09      	cmp	r3, #9
 801111e:	f200 8097 	bhi.w	8011250 <prvProcessReceivedCommands+0x1a0>
 8011122:	a201      	add	r2, pc, #4	@ (adr r2, 8011128 <prvProcessReceivedCommands+0x78>)
 8011124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011128:	08011151 	.word	0x08011151
 801112c:	08011151 	.word	0x08011151
 8011130:	08011151 	.word	0x08011151
 8011134:	080111c7 	.word	0x080111c7
 8011138:	080111db 	.word	0x080111db
 801113c:	08011227 	.word	0x08011227
 8011140:	08011151 	.word	0x08011151
 8011144:	08011151 	.word	0x08011151
 8011148:	080111c7 	.word	0x080111c7
 801114c:	080111db 	.word	0x080111db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011152:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011156:	f043 0301 	orr.w	r3, r3, #1
 801115a:	b2da      	uxtb	r2, r3
 801115c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011162:	68ba      	ldr	r2, [r7, #8]
 8011164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011166:	699b      	ldr	r3, [r3, #24]
 8011168:	18d1      	adds	r1, r2, r3
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801116e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011170:	f7ff ff5c 	bl	801102c <prvInsertTimerInActiveList>
 8011174:	4603      	mov	r3, r0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d06c      	beq.n	8011254 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117c:	6a1b      	ldr	r3, [r3, #32]
 801117e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011188:	f003 0304 	and.w	r3, r3, #4
 801118c:	2b00      	cmp	r3, #0
 801118e:	d061      	beq.n	8011254 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011194:	699b      	ldr	r3, [r3, #24]
 8011196:	441a      	add	r2, r3
 8011198:	2300      	movs	r3, #0
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	2300      	movs	r3, #0
 801119e:	2100      	movs	r1, #0
 80111a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111a2:	f7ff fe01 	bl	8010da8 <xTimerGenericCommand>
 80111a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80111a8:	6a3b      	ldr	r3, [r7, #32]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d152      	bne.n	8011254 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80111ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	61bb      	str	r3, [r7, #24]
}
 80111c0:	bf00      	nop
 80111c2:	bf00      	nop
 80111c4:	e7fd      	b.n	80111c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80111cc:	f023 0301 	bic.w	r3, r3, #1
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80111d8:	e03d      	b.n	8011256 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80111e0:	f043 0301 	orr.w	r3, r3, #1
 80111e4:	b2da      	uxtb	r2, r3
 80111e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80111f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f4:	699b      	ldr	r3, [r3, #24]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d10b      	bne.n	8011212 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80111fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111fe:	f383 8811 	msr	BASEPRI, r3
 8011202:	f3bf 8f6f 	isb	sy
 8011206:	f3bf 8f4f 	dsb	sy
 801120a:	617b      	str	r3, [r7, #20]
}
 801120c:	bf00      	nop
 801120e:	bf00      	nop
 8011210:	e7fd      	b.n	801120e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011214:	699a      	ldr	r2, [r3, #24]
 8011216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011218:	18d1      	adds	r1, r2, r3
 801121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801121c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801121e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011220:	f7ff ff04 	bl	801102c <prvInsertTimerInActiveList>
					break;
 8011224:	e017      	b.n	8011256 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801122c:	f003 0302 	and.w	r3, r3, #2
 8011230:	2b00      	cmp	r3, #0
 8011232:	d103      	bne.n	801123c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011236:	f000 fbe7 	bl	8011a08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801123a:	e00c      	b.n	8011256 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801123c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011242:	f023 0301 	bic.w	r3, r3, #1
 8011246:	b2da      	uxtb	r2, r3
 8011248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801124e:	e002      	b.n	8011256 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011250:	bf00      	nop
 8011252:	e000      	b.n	8011256 <prvProcessReceivedCommands+0x1a6>
					break;
 8011254:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011256:	4b08      	ldr	r3, [pc, #32]	@ (8011278 <prvProcessReceivedCommands+0x1c8>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	1d39      	adds	r1, r7, #4
 801125c:	2200      	movs	r2, #0
 801125e:	4618      	mov	r0, r3
 8011260:	f7fe f822 	bl	800f2a8 <xQueueReceive>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	f47f af26 	bne.w	80110b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801126c:	bf00      	nop
 801126e:	bf00      	nop
 8011270:	3730      	adds	r7, #48	@ 0x30
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	200035ac 	.word	0x200035ac

0801127c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b088      	sub	sp, #32
 8011280:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011282:	e049      	b.n	8011318 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011284:	4b2e      	ldr	r3, [pc, #184]	@ (8011340 <prvSwitchTimerLists+0xc4>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801128e:	4b2c      	ldr	r3, [pc, #176]	@ (8011340 <prvSwitchTimerLists+0xc4>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	3304      	adds	r3, #4
 801129c:	4618      	mov	r0, r3
 801129e:	f7fd fb3d 	bl	800e91c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	6a1b      	ldr	r3, [r3, #32]
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80112b0:	f003 0304 	and.w	r3, r3, #4
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d02f      	beq.n	8011318 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	699b      	ldr	r3, [r3, #24]
 80112bc:	693a      	ldr	r2, [r7, #16]
 80112be:	4413      	add	r3, r2
 80112c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80112c2:	68ba      	ldr	r2, [r7, #8]
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d90e      	bls.n	80112e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	68fa      	ldr	r2, [r7, #12]
 80112d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80112d6:	4b1a      	ldr	r3, [pc, #104]	@ (8011340 <prvSwitchTimerLists+0xc4>)
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	3304      	adds	r3, #4
 80112de:	4619      	mov	r1, r3
 80112e0:	4610      	mov	r0, r2
 80112e2:	f7fd fae2 	bl	800e8aa <vListInsert>
 80112e6:	e017      	b.n	8011318 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80112e8:	2300      	movs	r3, #0
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	2300      	movs	r3, #0
 80112ee:	693a      	ldr	r2, [r7, #16]
 80112f0:	2100      	movs	r1, #0
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f7ff fd58 	bl	8010da8 <xTimerGenericCommand>
 80112f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10b      	bne.n	8011318 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011304:	f383 8811 	msr	BASEPRI, r3
 8011308:	f3bf 8f6f 	isb	sy
 801130c:	f3bf 8f4f 	dsb	sy
 8011310:	603b      	str	r3, [r7, #0]
}
 8011312:	bf00      	nop
 8011314:	bf00      	nop
 8011316:	e7fd      	b.n	8011314 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011318:	4b09      	ldr	r3, [pc, #36]	@ (8011340 <prvSwitchTimerLists+0xc4>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1b0      	bne.n	8011284 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011322:	4b07      	ldr	r3, [pc, #28]	@ (8011340 <prvSwitchTimerLists+0xc4>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011328:	4b06      	ldr	r3, [pc, #24]	@ (8011344 <prvSwitchTimerLists+0xc8>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a04      	ldr	r2, [pc, #16]	@ (8011340 <prvSwitchTimerLists+0xc4>)
 801132e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011330:	4a04      	ldr	r2, [pc, #16]	@ (8011344 <prvSwitchTimerLists+0xc8>)
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	6013      	str	r3, [r2, #0]
}
 8011336:	bf00      	nop
 8011338:	3718      	adds	r7, #24
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	200035a4 	.word	0x200035a4
 8011344:	200035a8 	.word	0x200035a8

08011348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801134e:	f000 f96b 	bl	8011628 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011352:	4b15      	ldr	r3, [pc, #84]	@ (80113a8 <prvCheckForValidListAndQueue+0x60>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d120      	bne.n	801139c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801135a:	4814      	ldr	r0, [pc, #80]	@ (80113ac <prvCheckForValidListAndQueue+0x64>)
 801135c:	f7fd fa54 	bl	800e808 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011360:	4813      	ldr	r0, [pc, #76]	@ (80113b0 <prvCheckForValidListAndQueue+0x68>)
 8011362:	f7fd fa51 	bl	800e808 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011366:	4b13      	ldr	r3, [pc, #76]	@ (80113b4 <prvCheckForValidListAndQueue+0x6c>)
 8011368:	4a10      	ldr	r2, [pc, #64]	@ (80113ac <prvCheckForValidListAndQueue+0x64>)
 801136a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801136c:	4b12      	ldr	r3, [pc, #72]	@ (80113b8 <prvCheckForValidListAndQueue+0x70>)
 801136e:	4a10      	ldr	r2, [pc, #64]	@ (80113b0 <prvCheckForValidListAndQueue+0x68>)
 8011370:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011372:	2300      	movs	r3, #0
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	4b11      	ldr	r3, [pc, #68]	@ (80113bc <prvCheckForValidListAndQueue+0x74>)
 8011378:	4a11      	ldr	r2, [pc, #68]	@ (80113c0 <prvCheckForValidListAndQueue+0x78>)
 801137a:	2110      	movs	r1, #16
 801137c:	200a      	movs	r0, #10
 801137e:	f7fd fb61 	bl	800ea44 <xQueueGenericCreateStatic>
 8011382:	4603      	mov	r3, r0
 8011384:	4a08      	ldr	r2, [pc, #32]	@ (80113a8 <prvCheckForValidListAndQueue+0x60>)
 8011386:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011388:	4b07      	ldr	r3, [pc, #28]	@ (80113a8 <prvCheckForValidListAndQueue+0x60>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d005      	beq.n	801139c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011390:	4b05      	ldr	r3, [pc, #20]	@ (80113a8 <prvCheckForValidListAndQueue+0x60>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	490b      	ldr	r1, [pc, #44]	@ (80113c4 <prvCheckForValidListAndQueue+0x7c>)
 8011396:	4618      	mov	r0, r3
 8011398:	f7fe fb46 	bl	800fa28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801139c:	f000 f976 	bl	801168c <vPortExitCritical>
}
 80113a0:	bf00      	nop
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	200035ac 	.word	0x200035ac
 80113ac:	2000357c 	.word	0x2000357c
 80113b0:	20003590 	.word	0x20003590
 80113b4:	200035a4 	.word	0x200035a4
 80113b8:	200035a8 	.word	0x200035a8
 80113bc:	20003658 	.word	0x20003658
 80113c0:	200035b8 	.word	0x200035b8
 80113c4:	080164e4 	.word	0x080164e4

080113c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80113c8:	b480      	push	{r7}
 80113ca:	b085      	sub	sp, #20
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	3b04      	subs	r3, #4
 80113d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80113e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	3b04      	subs	r3, #4
 80113e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	f023 0201 	bic.w	r2, r3, #1
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	3b04      	subs	r3, #4
 80113f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80113f8:	4a0c      	ldr	r2, [pc, #48]	@ (801142c <pxPortInitialiseStack+0x64>)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	3b14      	subs	r3, #20
 8011402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	3b04      	subs	r3, #4
 801140e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f06f 0202 	mvn.w	r2, #2
 8011416:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	3b20      	subs	r3, #32
 801141c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801141e:	68fb      	ldr	r3, [r7, #12]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3714      	adds	r7, #20
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr
 801142c:	08011431 	.word	0x08011431

08011430 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011430:	b480      	push	{r7}
 8011432:	b085      	sub	sp, #20
 8011434:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011436:	2300      	movs	r3, #0
 8011438:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801143a:	4b13      	ldr	r3, [pc, #76]	@ (8011488 <prvTaskExitError+0x58>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011442:	d00b      	beq.n	801145c <prvTaskExitError+0x2c>
	__asm volatile
 8011444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011448:	f383 8811 	msr	BASEPRI, r3
 801144c:	f3bf 8f6f 	isb	sy
 8011450:	f3bf 8f4f 	dsb	sy
 8011454:	60fb      	str	r3, [r7, #12]
}
 8011456:	bf00      	nop
 8011458:	bf00      	nop
 801145a:	e7fd      	b.n	8011458 <prvTaskExitError+0x28>
	__asm volatile
 801145c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	60bb      	str	r3, [r7, #8]
}
 801146e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011470:	bf00      	nop
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d0fc      	beq.n	8011472 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011478:	bf00      	nop
 801147a:	bf00      	nop
 801147c:	3714      	adds	r7, #20
 801147e:	46bd      	mov	sp, r7
 8011480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop
 8011488:	2000011c 	.word	0x2000011c
 801148c:	00000000 	.word	0x00000000

08011490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011490:	4b07      	ldr	r3, [pc, #28]	@ (80114b0 <pxCurrentTCBConst2>)
 8011492:	6819      	ldr	r1, [r3, #0]
 8011494:	6808      	ldr	r0, [r1, #0]
 8011496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801149a:	f380 8809 	msr	PSP, r0
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f04f 0000 	mov.w	r0, #0
 80114a6:	f380 8811 	msr	BASEPRI, r0
 80114aa:	4770      	bx	lr
 80114ac:	f3af 8000 	nop.w

080114b0 <pxCurrentTCBConst2>:
 80114b0:	20003074 	.word	0x20003074
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80114b4:	bf00      	nop
 80114b6:	bf00      	nop

080114b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80114b8:	4808      	ldr	r0, [pc, #32]	@ (80114dc <prvPortStartFirstTask+0x24>)
 80114ba:	6800      	ldr	r0, [r0, #0]
 80114bc:	6800      	ldr	r0, [r0, #0]
 80114be:	f380 8808 	msr	MSP, r0
 80114c2:	f04f 0000 	mov.w	r0, #0
 80114c6:	f380 8814 	msr	CONTROL, r0
 80114ca:	b662      	cpsie	i
 80114cc:	b661      	cpsie	f
 80114ce:	f3bf 8f4f 	dsb	sy
 80114d2:	f3bf 8f6f 	isb	sy
 80114d6:	df00      	svc	0
 80114d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80114da:	bf00      	nop
 80114dc:	e000ed08 	.word	0xe000ed08

080114e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80114e6:	4b47      	ldr	r3, [pc, #284]	@ (8011604 <xPortStartScheduler+0x124>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	4a47      	ldr	r2, [pc, #284]	@ (8011608 <xPortStartScheduler+0x128>)
 80114ec:	4293      	cmp	r3, r2
 80114ee:	d10b      	bne.n	8011508 <xPortStartScheduler+0x28>
	__asm volatile
 80114f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f4:	f383 8811 	msr	BASEPRI, r3
 80114f8:	f3bf 8f6f 	isb	sy
 80114fc:	f3bf 8f4f 	dsb	sy
 8011500:	613b      	str	r3, [r7, #16]
}
 8011502:	bf00      	nop
 8011504:	bf00      	nop
 8011506:	e7fd      	b.n	8011504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011508:	4b3e      	ldr	r3, [pc, #248]	@ (8011604 <xPortStartScheduler+0x124>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4a3f      	ldr	r2, [pc, #252]	@ (801160c <xPortStartScheduler+0x12c>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d10b      	bne.n	801152a <xPortStartScheduler+0x4a>
	__asm volatile
 8011512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011516:	f383 8811 	msr	BASEPRI, r3
 801151a:	f3bf 8f6f 	isb	sy
 801151e:	f3bf 8f4f 	dsb	sy
 8011522:	60fb      	str	r3, [r7, #12]
}
 8011524:	bf00      	nop
 8011526:	bf00      	nop
 8011528:	e7fd      	b.n	8011526 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801152a:	4b39      	ldr	r3, [pc, #228]	@ (8011610 <xPortStartScheduler+0x130>)
 801152c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	b2db      	uxtb	r3, r3
 8011534:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	22ff      	movs	r2, #255	@ 0xff
 801153a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	b2db      	uxtb	r3, r3
 8011542:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011544:	78fb      	ldrb	r3, [r7, #3]
 8011546:	b2db      	uxtb	r3, r3
 8011548:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801154c:	b2da      	uxtb	r2, r3
 801154e:	4b31      	ldr	r3, [pc, #196]	@ (8011614 <xPortStartScheduler+0x134>)
 8011550:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011552:	4b31      	ldr	r3, [pc, #196]	@ (8011618 <xPortStartScheduler+0x138>)
 8011554:	2207      	movs	r2, #7
 8011556:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011558:	e009      	b.n	801156e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801155a:	4b2f      	ldr	r3, [pc, #188]	@ (8011618 <xPortStartScheduler+0x138>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	3b01      	subs	r3, #1
 8011560:	4a2d      	ldr	r2, [pc, #180]	@ (8011618 <xPortStartScheduler+0x138>)
 8011562:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011564:	78fb      	ldrb	r3, [r7, #3]
 8011566:	b2db      	uxtb	r3, r3
 8011568:	005b      	lsls	r3, r3, #1
 801156a:	b2db      	uxtb	r3, r3
 801156c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801156e:	78fb      	ldrb	r3, [r7, #3]
 8011570:	b2db      	uxtb	r3, r3
 8011572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011576:	2b80      	cmp	r3, #128	@ 0x80
 8011578:	d0ef      	beq.n	801155a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801157a:	4b27      	ldr	r3, [pc, #156]	@ (8011618 <xPortStartScheduler+0x138>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f1c3 0307 	rsb	r3, r3, #7
 8011582:	2b04      	cmp	r3, #4
 8011584:	d00b      	beq.n	801159e <xPortStartScheduler+0xbe>
	__asm volatile
 8011586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801158a:	f383 8811 	msr	BASEPRI, r3
 801158e:	f3bf 8f6f 	isb	sy
 8011592:	f3bf 8f4f 	dsb	sy
 8011596:	60bb      	str	r3, [r7, #8]
}
 8011598:	bf00      	nop
 801159a:	bf00      	nop
 801159c:	e7fd      	b.n	801159a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801159e:	4b1e      	ldr	r3, [pc, #120]	@ (8011618 <xPortStartScheduler+0x138>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	021b      	lsls	r3, r3, #8
 80115a4:	4a1c      	ldr	r2, [pc, #112]	@ (8011618 <xPortStartScheduler+0x138>)
 80115a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80115a8:	4b1b      	ldr	r3, [pc, #108]	@ (8011618 <xPortStartScheduler+0x138>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80115b0:	4a19      	ldr	r2, [pc, #100]	@ (8011618 <xPortStartScheduler+0x138>)
 80115b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80115bc:	4b17      	ldr	r3, [pc, #92]	@ (801161c <xPortStartScheduler+0x13c>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4a16      	ldr	r2, [pc, #88]	@ (801161c <xPortStartScheduler+0x13c>)
 80115c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80115c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80115c8:	4b14      	ldr	r3, [pc, #80]	@ (801161c <xPortStartScheduler+0x13c>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4a13      	ldr	r2, [pc, #76]	@ (801161c <xPortStartScheduler+0x13c>)
 80115ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80115d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80115d4:	f000 f8da 	bl	801178c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80115d8:	4b11      	ldr	r3, [pc, #68]	@ (8011620 <xPortStartScheduler+0x140>)
 80115da:	2200      	movs	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80115de:	f000 f8f9 	bl	80117d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80115e2:	4b10      	ldr	r3, [pc, #64]	@ (8011624 <xPortStartScheduler+0x144>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4a0f      	ldr	r2, [pc, #60]	@ (8011624 <xPortStartScheduler+0x144>)
 80115e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80115ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80115ee:	f7ff ff63 	bl	80114b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80115f2:	f7fe ff05 	bl	8010400 <vTaskSwitchContext>
	prvTaskExitError();
 80115f6:	f7ff ff1b 	bl	8011430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80115fa:	2300      	movs	r3, #0
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3718      	adds	r7, #24
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	e000ed00 	.word	0xe000ed00
 8011608:	410fc271 	.word	0x410fc271
 801160c:	410fc270 	.word	0x410fc270
 8011610:	e000e400 	.word	0xe000e400
 8011614:	200036a8 	.word	0x200036a8
 8011618:	200036ac 	.word	0x200036ac
 801161c:	e000ed20 	.word	0xe000ed20
 8011620:	2000011c 	.word	0x2000011c
 8011624:	e000ef34 	.word	0xe000ef34

08011628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	607b      	str	r3, [r7, #4]
}
 8011640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011642:	4b10      	ldr	r3, [pc, #64]	@ (8011684 <vPortEnterCritical+0x5c>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	3301      	adds	r3, #1
 8011648:	4a0e      	ldr	r2, [pc, #56]	@ (8011684 <vPortEnterCritical+0x5c>)
 801164a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801164c:	4b0d      	ldr	r3, [pc, #52]	@ (8011684 <vPortEnterCritical+0x5c>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2b01      	cmp	r3, #1
 8011652:	d110      	bne.n	8011676 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011654:	4b0c      	ldr	r3, [pc, #48]	@ (8011688 <vPortEnterCritical+0x60>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	b2db      	uxtb	r3, r3
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00b      	beq.n	8011676 <vPortEnterCritical+0x4e>
	__asm volatile
 801165e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011662:	f383 8811 	msr	BASEPRI, r3
 8011666:	f3bf 8f6f 	isb	sy
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	603b      	str	r3, [r7, #0]
}
 8011670:	bf00      	nop
 8011672:	bf00      	nop
 8011674:	e7fd      	b.n	8011672 <vPortEnterCritical+0x4a>
	}
}
 8011676:	bf00      	nop
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	2000011c 	.word	0x2000011c
 8011688:	e000ed04 	.word	0xe000ed04

0801168c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801168c:	b480      	push	{r7}
 801168e:	b083      	sub	sp, #12
 8011690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011692:	4b12      	ldr	r3, [pc, #72]	@ (80116dc <vPortExitCritical+0x50>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d10b      	bne.n	80116b2 <vPortExitCritical+0x26>
	__asm volatile
 801169a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801169e:	f383 8811 	msr	BASEPRI, r3
 80116a2:	f3bf 8f6f 	isb	sy
 80116a6:	f3bf 8f4f 	dsb	sy
 80116aa:	607b      	str	r3, [r7, #4]
}
 80116ac:	bf00      	nop
 80116ae:	bf00      	nop
 80116b0:	e7fd      	b.n	80116ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80116b2:	4b0a      	ldr	r3, [pc, #40]	@ (80116dc <vPortExitCritical+0x50>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	3b01      	subs	r3, #1
 80116b8:	4a08      	ldr	r2, [pc, #32]	@ (80116dc <vPortExitCritical+0x50>)
 80116ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80116bc:	4b07      	ldr	r3, [pc, #28]	@ (80116dc <vPortExitCritical+0x50>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d105      	bne.n	80116d0 <vPortExitCritical+0x44>
 80116c4:	2300      	movs	r3, #0
 80116c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	f383 8811 	msr	BASEPRI, r3
}
 80116ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80116d0:	bf00      	nop
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	2000011c 	.word	0x2000011c

080116e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80116e0:	f3ef 8009 	mrs	r0, PSP
 80116e4:	f3bf 8f6f 	isb	sy
 80116e8:	4b15      	ldr	r3, [pc, #84]	@ (8011740 <pxCurrentTCBConst>)
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	f01e 0f10 	tst.w	lr, #16
 80116f0:	bf08      	it	eq
 80116f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80116f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116fa:	6010      	str	r0, [r2, #0]
 80116fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011704:	f380 8811 	msr	BASEPRI, r0
 8011708:	f3bf 8f4f 	dsb	sy
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f7fe fe76 	bl	8010400 <vTaskSwitchContext>
 8011714:	f04f 0000 	mov.w	r0, #0
 8011718:	f380 8811 	msr	BASEPRI, r0
 801171c:	bc09      	pop	{r0, r3}
 801171e:	6819      	ldr	r1, [r3, #0]
 8011720:	6808      	ldr	r0, [r1, #0]
 8011722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011726:	f01e 0f10 	tst.w	lr, #16
 801172a:	bf08      	it	eq
 801172c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011730:	f380 8809 	msr	PSP, r0
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop
 801173c:	f3af 8000 	nop.w

08011740 <pxCurrentTCBConst>:
 8011740:	20003074 	.word	0x20003074
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011744:	bf00      	nop
 8011746:	bf00      	nop

08011748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
	__asm volatile
 801174e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011752:	f383 8811 	msr	BASEPRI, r3
 8011756:	f3bf 8f6f 	isb	sy
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	607b      	str	r3, [r7, #4]
}
 8011760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011762:	f7fe fd93 	bl	801028c <xTaskIncrementTick>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d003      	beq.n	8011774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801176c:	4b06      	ldr	r3, [pc, #24]	@ (8011788 <xPortSysTickHandler+0x40>)
 801176e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011772:	601a      	str	r2, [r3, #0]
 8011774:	2300      	movs	r3, #0
 8011776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	f383 8811 	msr	BASEPRI, r3
}
 801177e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011780:	bf00      	nop
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}
 8011788:	e000ed04 	.word	0xe000ed04

0801178c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801178c:	b480      	push	{r7}
 801178e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011790:	4b0b      	ldr	r3, [pc, #44]	@ (80117c0 <vPortSetupTimerInterrupt+0x34>)
 8011792:	2200      	movs	r2, #0
 8011794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011796:	4b0b      	ldr	r3, [pc, #44]	@ (80117c4 <vPortSetupTimerInterrupt+0x38>)
 8011798:	2200      	movs	r2, #0
 801179a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801179c:	4b0a      	ldr	r3, [pc, #40]	@ (80117c8 <vPortSetupTimerInterrupt+0x3c>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4a0a      	ldr	r2, [pc, #40]	@ (80117cc <vPortSetupTimerInterrupt+0x40>)
 80117a2:	fba2 2303 	umull	r2, r3, r2, r3
 80117a6:	099b      	lsrs	r3, r3, #6
 80117a8:	4a09      	ldr	r2, [pc, #36]	@ (80117d0 <vPortSetupTimerInterrupt+0x44>)
 80117aa:	3b01      	subs	r3, #1
 80117ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80117ae:	4b04      	ldr	r3, [pc, #16]	@ (80117c0 <vPortSetupTimerInterrupt+0x34>)
 80117b0:	2207      	movs	r2, #7
 80117b2:	601a      	str	r2, [r3, #0]
}
 80117b4:	bf00      	nop
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop
 80117c0:	e000e010 	.word	0xe000e010
 80117c4:	e000e018 	.word	0xe000e018
 80117c8:	20000000 	.word	0x20000000
 80117cc:	10624dd3 	.word	0x10624dd3
 80117d0:	e000e014 	.word	0xe000e014

080117d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80117d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80117e4 <vPortEnableVFP+0x10>
 80117d8:	6801      	ldr	r1, [r0, #0]
 80117da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80117de:	6001      	str	r1, [r0, #0]
 80117e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80117e2:	bf00      	nop
 80117e4:	e000ed88 	.word	0xe000ed88

080117e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80117e8:	b480      	push	{r7}
 80117ea:	b085      	sub	sp, #20
 80117ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80117ee:	f3ef 8305 	mrs	r3, IPSR
 80117f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2b0f      	cmp	r3, #15
 80117f8:	d915      	bls.n	8011826 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80117fa:	4a18      	ldr	r2, [pc, #96]	@ (801185c <vPortValidateInterruptPriority+0x74>)
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	4413      	add	r3, r2
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011804:	4b16      	ldr	r3, [pc, #88]	@ (8011860 <vPortValidateInterruptPriority+0x78>)
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	7afa      	ldrb	r2, [r7, #11]
 801180a:	429a      	cmp	r2, r3
 801180c:	d20b      	bcs.n	8011826 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801180e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011812:	f383 8811 	msr	BASEPRI, r3
 8011816:	f3bf 8f6f 	isb	sy
 801181a:	f3bf 8f4f 	dsb	sy
 801181e:	607b      	str	r3, [r7, #4]
}
 8011820:	bf00      	nop
 8011822:	bf00      	nop
 8011824:	e7fd      	b.n	8011822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011826:	4b0f      	ldr	r3, [pc, #60]	@ (8011864 <vPortValidateInterruptPriority+0x7c>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801182e:	4b0e      	ldr	r3, [pc, #56]	@ (8011868 <vPortValidateInterruptPriority+0x80>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	d90b      	bls.n	801184e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	603b      	str	r3, [r7, #0]
}
 8011848:	bf00      	nop
 801184a:	bf00      	nop
 801184c:	e7fd      	b.n	801184a <vPortValidateInterruptPriority+0x62>
	}
 801184e:	bf00      	nop
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	e000e3f0 	.word	0xe000e3f0
 8011860:	200036a8 	.word	0x200036a8
 8011864:	e000ed0c 	.word	0xe000ed0c
 8011868:	200036ac 	.word	0x200036ac

0801186c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b08a      	sub	sp, #40	@ 0x28
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011874:	2300      	movs	r3, #0
 8011876:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011878:	f7fe fc3a 	bl	80100f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801187c:	4b5c      	ldr	r3, [pc, #368]	@ (80119f0 <pvPortMalloc+0x184>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d101      	bne.n	8011888 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011884:	f000 f924 	bl	8011ad0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011888:	4b5a      	ldr	r3, [pc, #360]	@ (80119f4 <pvPortMalloc+0x188>)
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	4013      	ands	r3, r2
 8011890:	2b00      	cmp	r3, #0
 8011892:	f040 8095 	bne.w	80119c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d01e      	beq.n	80118da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801189c:	2208      	movs	r2, #8
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4413      	add	r3, r2
 80118a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f003 0307 	and.w	r3, r3, #7
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d015      	beq.n	80118da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f023 0307 	bic.w	r3, r3, #7
 80118b4:	3308      	adds	r3, #8
 80118b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f003 0307 	and.w	r3, r3, #7
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00b      	beq.n	80118da <pvPortMalloc+0x6e>
	__asm volatile
 80118c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c6:	f383 8811 	msr	BASEPRI, r3
 80118ca:	f3bf 8f6f 	isb	sy
 80118ce:	f3bf 8f4f 	dsb	sy
 80118d2:	617b      	str	r3, [r7, #20]
}
 80118d4:	bf00      	nop
 80118d6:	bf00      	nop
 80118d8:	e7fd      	b.n	80118d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d06f      	beq.n	80119c0 <pvPortMalloc+0x154>
 80118e0:	4b45      	ldr	r3, [pc, #276]	@ (80119f8 <pvPortMalloc+0x18c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d86a      	bhi.n	80119c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80118ea:	4b44      	ldr	r3, [pc, #272]	@ (80119fc <pvPortMalloc+0x190>)
 80118ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80118ee:	4b43      	ldr	r3, [pc, #268]	@ (80119fc <pvPortMalloc+0x190>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80118f4:	e004      	b.n	8011900 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80118f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80118fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	429a      	cmp	r2, r3
 8011908:	d903      	bls.n	8011912 <pvPortMalloc+0xa6>
 801190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d1f1      	bne.n	80118f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011912:	4b37      	ldr	r3, [pc, #220]	@ (80119f0 <pvPortMalloc+0x184>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011918:	429a      	cmp	r2, r3
 801191a:	d051      	beq.n	80119c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801191c:	6a3b      	ldr	r3, [r7, #32]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2208      	movs	r2, #8
 8011922:	4413      	add	r3, r2
 8011924:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	6a3b      	ldr	r3, [r7, #32]
 801192c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011930:	685a      	ldr	r2, [r3, #4]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	1ad2      	subs	r2, r2, r3
 8011936:	2308      	movs	r3, #8
 8011938:	005b      	lsls	r3, r3, #1
 801193a:	429a      	cmp	r2, r3
 801193c:	d920      	bls.n	8011980 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801193e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	4413      	add	r3, r2
 8011944:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	f003 0307 	and.w	r3, r3, #7
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00b      	beq.n	8011968 <pvPortMalloc+0xfc>
	__asm volatile
 8011950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011954:	f383 8811 	msr	BASEPRI, r3
 8011958:	f3bf 8f6f 	isb	sy
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	613b      	str	r3, [r7, #16]
}
 8011962:	bf00      	nop
 8011964:	bf00      	nop
 8011966:	e7fd      	b.n	8011964 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801196a:	685a      	ldr	r2, [r3, #4]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	1ad2      	subs	r2, r2, r3
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801197a:	69b8      	ldr	r0, [r7, #24]
 801197c:	f000 f90a 	bl	8011b94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011980:	4b1d      	ldr	r3, [pc, #116]	@ (80119f8 <pvPortMalloc+0x18c>)
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	4a1b      	ldr	r2, [pc, #108]	@ (80119f8 <pvPortMalloc+0x18c>)
 801198c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801198e:	4b1a      	ldr	r3, [pc, #104]	@ (80119f8 <pvPortMalloc+0x18c>)
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	4b1b      	ldr	r3, [pc, #108]	@ (8011a00 <pvPortMalloc+0x194>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	429a      	cmp	r2, r3
 8011998:	d203      	bcs.n	80119a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801199a:	4b17      	ldr	r3, [pc, #92]	@ (80119f8 <pvPortMalloc+0x18c>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4a18      	ldr	r2, [pc, #96]	@ (8011a00 <pvPortMalloc+0x194>)
 80119a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80119a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a4:	685a      	ldr	r2, [r3, #4]
 80119a6:	4b13      	ldr	r3, [pc, #76]	@ (80119f4 <pvPortMalloc+0x188>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	431a      	orrs	r2, r3
 80119ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80119b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b2:	2200      	movs	r2, #0
 80119b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80119b6:	4b13      	ldr	r3, [pc, #76]	@ (8011a04 <pvPortMalloc+0x198>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	3301      	adds	r3, #1
 80119bc:	4a11      	ldr	r2, [pc, #68]	@ (8011a04 <pvPortMalloc+0x198>)
 80119be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80119c0:	f7fe fba4 	bl	801010c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	f003 0307 	and.w	r3, r3, #7
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00b      	beq.n	80119e6 <pvPortMalloc+0x17a>
	__asm volatile
 80119ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	60fb      	str	r3, [r7, #12]
}
 80119e0:	bf00      	nop
 80119e2:	bf00      	nop
 80119e4:	e7fd      	b.n	80119e2 <pvPortMalloc+0x176>
	return pvReturn;
 80119e6:	69fb      	ldr	r3, [r7, #28]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3728      	adds	r7, #40	@ 0x28
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	200136b8 	.word	0x200136b8
 80119f4:	200136cc 	.word	0x200136cc
 80119f8:	200136bc 	.word	0x200136bc
 80119fc:	200136b0 	.word	0x200136b0
 8011a00:	200136c0 	.word	0x200136c0
 8011a04:	200136c4 	.word	0x200136c4

08011a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b086      	sub	sp, #24
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d04f      	beq.n	8011aba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011a1a:	2308      	movs	r3, #8
 8011a1c:	425b      	negs	r3, r3
 8011a1e:	697a      	ldr	r2, [r7, #20]
 8011a20:	4413      	add	r3, r2
 8011a22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	685a      	ldr	r2, [r3, #4]
 8011a2c:	4b25      	ldr	r3, [pc, #148]	@ (8011ac4 <vPortFree+0xbc>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4013      	ands	r3, r2
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d10b      	bne.n	8011a4e <vPortFree+0x46>
	__asm volatile
 8011a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	60fb      	str	r3, [r7, #12]
}
 8011a48:	bf00      	nop
 8011a4a:	bf00      	nop
 8011a4c:	e7fd      	b.n	8011a4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d00b      	beq.n	8011a6e <vPortFree+0x66>
	__asm volatile
 8011a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a5a:	f383 8811 	msr	BASEPRI, r3
 8011a5e:	f3bf 8f6f 	isb	sy
 8011a62:	f3bf 8f4f 	dsb	sy
 8011a66:	60bb      	str	r3, [r7, #8]
}
 8011a68:	bf00      	nop
 8011a6a:	bf00      	nop
 8011a6c:	e7fd      	b.n	8011a6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	685a      	ldr	r2, [r3, #4]
 8011a72:	4b14      	ldr	r3, [pc, #80]	@ (8011ac4 <vPortFree+0xbc>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	4013      	ands	r3, r2
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d01e      	beq.n	8011aba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d11a      	bne.n	8011aba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	685a      	ldr	r2, [r3, #4]
 8011a88:	4b0e      	ldr	r3, [pc, #56]	@ (8011ac4 <vPortFree+0xbc>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	43db      	mvns	r3, r3
 8011a8e:	401a      	ands	r2, r3
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011a94:	f7fe fb2c 	bl	80100f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	685a      	ldr	r2, [r3, #4]
 8011a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8011ac8 <vPortFree+0xc0>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	4a09      	ldr	r2, [pc, #36]	@ (8011ac8 <vPortFree+0xc0>)
 8011aa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011aa6:	6938      	ldr	r0, [r7, #16]
 8011aa8:	f000 f874 	bl	8011b94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011aac:	4b07      	ldr	r3, [pc, #28]	@ (8011acc <vPortFree+0xc4>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	4a06      	ldr	r2, [pc, #24]	@ (8011acc <vPortFree+0xc4>)
 8011ab4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011ab6:	f7fe fb29 	bl	801010c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011aba:	bf00      	nop
 8011abc:	3718      	adds	r7, #24
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	200136cc 	.word	0x200136cc
 8011ac8:	200136bc 	.word	0x200136bc
 8011acc:	200136c8 	.word	0x200136c8

08011ad0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011ad6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011ada:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011adc:	4b27      	ldr	r3, [pc, #156]	@ (8011b7c <prvHeapInit+0xac>)
 8011ade:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f003 0307 	and.w	r3, r3, #7
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d00c      	beq.n	8011b04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	3307      	adds	r3, #7
 8011aee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f023 0307 	bic.w	r3, r3, #7
 8011af6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011af8:	68ba      	ldr	r2, [r7, #8]
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	1ad3      	subs	r3, r2, r3
 8011afe:	4a1f      	ldr	r2, [pc, #124]	@ (8011b7c <prvHeapInit+0xac>)
 8011b00:	4413      	add	r3, r2
 8011b02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011b08:	4a1d      	ldr	r2, [pc, #116]	@ (8011b80 <prvHeapInit+0xb0>)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8011b80 <prvHeapInit+0xb0>)
 8011b10:	2200      	movs	r2, #0
 8011b12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	68ba      	ldr	r2, [r7, #8]
 8011b18:	4413      	add	r3, r2
 8011b1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011b1c:	2208      	movs	r2, #8
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	1a9b      	subs	r3, r3, r2
 8011b22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	f023 0307 	bic.w	r3, r3, #7
 8011b2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	4a15      	ldr	r2, [pc, #84]	@ (8011b84 <prvHeapInit+0xb4>)
 8011b30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011b32:	4b14      	ldr	r3, [pc, #80]	@ (8011b84 <prvHeapInit+0xb4>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2200      	movs	r2, #0
 8011b38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011b3a:	4b12      	ldr	r3, [pc, #72]	@ (8011b84 <prvHeapInit+0xb4>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	68fa      	ldr	r2, [r7, #12]
 8011b4a:	1ad2      	subs	r2, r2, r3
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011b50:	4b0c      	ldr	r3, [pc, #48]	@ (8011b84 <prvHeapInit+0xb4>)
 8011b52:	681a      	ldr	r2, [r3, #0]
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8011b88 <prvHeapInit+0xb8>)
 8011b5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	4a09      	ldr	r2, [pc, #36]	@ (8011b8c <prvHeapInit+0xbc>)
 8011b66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011b68:	4b09      	ldr	r3, [pc, #36]	@ (8011b90 <prvHeapInit+0xc0>)
 8011b6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011b6e:	601a      	str	r2, [r3, #0]
}
 8011b70:	bf00      	nop
 8011b72:	3714      	adds	r7, #20
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	200036b0 	.word	0x200036b0
 8011b80:	200136b0 	.word	0x200136b0
 8011b84:	200136b8 	.word	0x200136b8
 8011b88:	200136c0 	.word	0x200136c0
 8011b8c:	200136bc 	.word	0x200136bc
 8011b90:	200136cc 	.word	0x200136cc

08011b94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011b9c:	4b28      	ldr	r3, [pc, #160]	@ (8011c40 <prvInsertBlockIntoFreeList+0xac>)
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	e002      	b.n	8011ba8 <prvInsertBlockIntoFreeList+0x14>
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	60fb      	str	r3, [r7, #12]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d8f7      	bhi.n	8011ba2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d108      	bne.n	8011bd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	685a      	ldr	r2, [r3, #4]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	441a      	add	r2, r3
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	441a      	add	r2, r3
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d118      	bne.n	8011c1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	4b15      	ldr	r3, [pc, #84]	@ (8011c44 <prvInsertBlockIntoFreeList+0xb0>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d00d      	beq.n	8011c12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	685a      	ldr	r2, [r3, #4]
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	441a      	add	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	601a      	str	r2, [r3, #0]
 8011c10:	e008      	b.n	8011c24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011c12:	4b0c      	ldr	r3, [pc, #48]	@ (8011c44 <prvInsertBlockIntoFreeList+0xb0>)
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	e003      	b.n	8011c24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011c24:	68fa      	ldr	r2, [r7, #12]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d002      	beq.n	8011c32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c32:	bf00      	nop
 8011c34:	3714      	adds	r7, #20
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr
 8011c3e:	bf00      	nop
 8011c40:	200136b0 	.word	0x200136b0
 8011c44:	200136b8 	.word	0x200136b8

08011c48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	4912      	ldr	r1, [pc, #72]	@ (8011c98 <MX_USB_Device_Init+0x50>)
 8011c50:	4812      	ldr	r0, [pc, #72]	@ (8011c9c <MX_USB_Device_Init+0x54>)
 8011c52:	f7fb f8fd 	bl	800ce50 <USBD_Init>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d001      	beq.n	8011c60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011c5c:	f7f2 fc76 	bl	800454c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011c60:	490f      	ldr	r1, [pc, #60]	@ (8011ca0 <MX_USB_Device_Init+0x58>)
 8011c62:	480e      	ldr	r0, [pc, #56]	@ (8011c9c <MX_USB_Device_Init+0x54>)
 8011c64:	f7fb f924 	bl	800ceb0 <USBD_RegisterClass>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d001      	beq.n	8011c72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011c6e:	f7f2 fc6d 	bl	800454c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011c72:	490c      	ldr	r1, [pc, #48]	@ (8011ca4 <MX_USB_Device_Init+0x5c>)
 8011c74:	4809      	ldr	r0, [pc, #36]	@ (8011c9c <MX_USB_Device_Init+0x54>)
 8011c76:	f7fb f845 	bl	800cd04 <USBD_CDC_RegisterInterface>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d001      	beq.n	8011c84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011c80:	f7f2 fc64 	bl	800454c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011c84:	4805      	ldr	r0, [pc, #20]	@ (8011c9c <MX_USB_Device_Init+0x54>)
 8011c86:	f7fb f93a 	bl	800cefe <USBD_Start>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d001      	beq.n	8011c94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011c90:	f7f2 fc5c 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011c94:	bf00      	nop
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	20000134 	.word	0x20000134
 8011c9c:	200136d0 	.word	0x200136d0
 8011ca0:	20000018 	.word	0x20000018
 8011ca4:	20000120 	.word	0x20000120

08011ca8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011cac:	2200      	movs	r2, #0
 8011cae:	4905      	ldr	r1, [pc, #20]	@ (8011cc4 <CDC_Init_FS+0x1c>)
 8011cb0:	4805      	ldr	r0, [pc, #20]	@ (8011cc8 <CDC_Init_FS+0x20>)
 8011cb2:	f7fb f83c 	bl	800cd2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011cb6:	4905      	ldr	r1, [pc, #20]	@ (8011ccc <CDC_Init_FS+0x24>)
 8011cb8:	4803      	ldr	r0, [pc, #12]	@ (8011cc8 <CDC_Init_FS+0x20>)
 8011cba:	f7fb f856 	bl	800cd6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011cbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	200141a0 	.word	0x200141a0
 8011cc8:	200136d0 	.word	0x200136d0
 8011ccc:	200139a0 	.word	0x200139a0

08011cd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011cd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b083      	sub	sp, #12
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	6039      	str	r1, [r7, #0]
 8011cea:	71fb      	strb	r3, [r7, #7]
 8011cec:	4613      	mov	r3, r2
 8011cee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011cf0:	79fb      	ldrb	r3, [r7, #7]
 8011cf2:	2b23      	cmp	r3, #35	@ 0x23
 8011cf4:	d84a      	bhi.n	8011d8c <CDC_Control_FS+0xac>
 8011cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8011cfc <CDC_Control_FS+0x1c>)
 8011cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cfc:	08011d8d 	.word	0x08011d8d
 8011d00:	08011d8d 	.word	0x08011d8d
 8011d04:	08011d8d 	.word	0x08011d8d
 8011d08:	08011d8d 	.word	0x08011d8d
 8011d0c:	08011d8d 	.word	0x08011d8d
 8011d10:	08011d8d 	.word	0x08011d8d
 8011d14:	08011d8d 	.word	0x08011d8d
 8011d18:	08011d8d 	.word	0x08011d8d
 8011d1c:	08011d8d 	.word	0x08011d8d
 8011d20:	08011d8d 	.word	0x08011d8d
 8011d24:	08011d8d 	.word	0x08011d8d
 8011d28:	08011d8d 	.word	0x08011d8d
 8011d2c:	08011d8d 	.word	0x08011d8d
 8011d30:	08011d8d 	.word	0x08011d8d
 8011d34:	08011d8d 	.word	0x08011d8d
 8011d38:	08011d8d 	.word	0x08011d8d
 8011d3c:	08011d8d 	.word	0x08011d8d
 8011d40:	08011d8d 	.word	0x08011d8d
 8011d44:	08011d8d 	.word	0x08011d8d
 8011d48:	08011d8d 	.word	0x08011d8d
 8011d4c:	08011d8d 	.word	0x08011d8d
 8011d50:	08011d8d 	.word	0x08011d8d
 8011d54:	08011d8d 	.word	0x08011d8d
 8011d58:	08011d8d 	.word	0x08011d8d
 8011d5c:	08011d8d 	.word	0x08011d8d
 8011d60:	08011d8d 	.word	0x08011d8d
 8011d64:	08011d8d 	.word	0x08011d8d
 8011d68:	08011d8d 	.word	0x08011d8d
 8011d6c:	08011d8d 	.word	0x08011d8d
 8011d70:	08011d8d 	.word	0x08011d8d
 8011d74:	08011d8d 	.word	0x08011d8d
 8011d78:	08011d8d 	.word	0x08011d8d
 8011d7c:	08011d8d 	.word	0x08011d8d
 8011d80:	08011d8d 	.word	0x08011d8d
 8011d84:	08011d8d 	.word	0x08011d8d
 8011d88:	08011d8d 	.word	0x08011d8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011d8c:	bf00      	nop
  }

  return (USBD_OK);
 8011d8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011da6:	6879      	ldr	r1, [r7, #4]
 8011da8:	4805      	ldr	r0, [pc, #20]	@ (8011dc0 <CDC_Receive_FS+0x24>)
 8011daa:	f7fa ffde 	bl	800cd6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011dae:	4804      	ldr	r0, [pc, #16]	@ (8011dc0 <CDC_Receive_FS+0x24>)
 8011db0:	f7fb f824 	bl	800cdfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011db4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3708      	adds	r7, #8
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	200136d0 	.word	0x200136d0

08011dc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	460b      	mov	r3, r1
 8011dce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8011e0c <CDC_Transmit_FS+0x48>)
 8011dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011dda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d001      	beq.n	8011dea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011de6:	2301      	movs	r3, #1
 8011de8:	e00b      	b.n	8011e02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011dea:	887b      	ldrh	r3, [r7, #2]
 8011dec:	461a      	mov	r2, r3
 8011dee:	6879      	ldr	r1, [r7, #4]
 8011df0:	4806      	ldr	r0, [pc, #24]	@ (8011e0c <CDC_Transmit_FS+0x48>)
 8011df2:	f7fa ff9c 	bl	800cd2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011df6:	4805      	ldr	r0, [pc, #20]	@ (8011e0c <CDC_Transmit_FS+0x48>)
 8011df8:	f7fa ffd0 	bl	800cd9c <USBD_CDC_TransmitPacket>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	200136d0 	.word	0x200136d0

08011e10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b087      	sub	sp, #28
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	371c      	adds	r7, #28
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr
	...

08011e34 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	6039      	str	r1, [r7, #0]
 8011e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	2212      	movs	r2, #18
 8011e44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011e46:	4b03      	ldr	r3, [pc, #12]	@ (8011e54 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	370c      	adds	r7, #12
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr
 8011e54:	20000154 	.word	0x20000154

08011e58 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	4603      	mov	r3, r0
 8011e60:	6039      	str	r1, [r7, #0]
 8011e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	2204      	movs	r2, #4
 8011e68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011e6a:	4b03      	ldr	r3, [pc, #12]	@ (8011e78 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr
 8011e78:	20000168 	.word	0x20000168

08011e7c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4603      	mov	r3, r0
 8011e84:	6039      	str	r1, [r7, #0]
 8011e86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011e88:	79fb      	ldrb	r3, [r7, #7]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d105      	bne.n	8011e9a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	4907      	ldr	r1, [pc, #28]	@ (8011eb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011e92:	4808      	ldr	r0, [pc, #32]	@ (8011eb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011e94:	f7fc f81b 	bl	800dece <USBD_GetString>
 8011e98:	e004      	b.n	8011ea4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	4904      	ldr	r1, [pc, #16]	@ (8011eb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011e9e:	4805      	ldr	r0, [pc, #20]	@ (8011eb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011ea0:	f7fc f815 	bl	800dece <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ea4:	4b02      	ldr	r3, [pc, #8]	@ (8011eb0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	200149a0 	.word	0x200149a0
 8011eb4:	080164ec 	.word	0x080164ec

08011eb8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	6039      	str	r1, [r7, #0]
 8011ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011ec4:	683a      	ldr	r2, [r7, #0]
 8011ec6:	4904      	ldr	r1, [pc, #16]	@ (8011ed8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011ec8:	4804      	ldr	r0, [pc, #16]	@ (8011edc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011eca:	f7fc f800 	bl	800dece <USBD_GetString>
  return USBD_StrDesc;
 8011ece:	4b02      	ldr	r3, [pc, #8]	@ (8011ed8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	200149a0 	.word	0x200149a0
 8011edc:	08016508 	.word	0x08016508

08011ee0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	6039      	str	r1, [r7, #0]
 8011eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	221a      	movs	r2, #26
 8011ef0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011ef2:	f000 f843 	bl	8011f7c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011ef6:	4b02      	ldr	r3, [pc, #8]	@ (8011f00 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	2000016c 	.word	0x2000016c

08011f04 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	6039      	str	r1, [r7, #0]
 8011f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011f10:	79fb      	ldrb	r3, [r7, #7]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d105      	bne.n	8011f22 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011f16:	683a      	ldr	r2, [r7, #0]
 8011f18:	4907      	ldr	r1, [pc, #28]	@ (8011f38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011f1a:	4808      	ldr	r0, [pc, #32]	@ (8011f3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011f1c:	f7fb ffd7 	bl	800dece <USBD_GetString>
 8011f20:	e004      	b.n	8011f2c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011f22:	683a      	ldr	r2, [r7, #0]
 8011f24:	4904      	ldr	r1, [pc, #16]	@ (8011f38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011f26:	4805      	ldr	r0, [pc, #20]	@ (8011f3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011f28:	f7fb ffd1 	bl	800dece <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f2c:	4b02      	ldr	r3, [pc, #8]	@ (8011f38 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3708      	adds	r7, #8
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	200149a0 	.word	0x200149a0
 8011f3c:	0801651c 	.word	0x0801651c

08011f40 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	4603      	mov	r3, r0
 8011f48:	6039      	str	r1, [r7, #0]
 8011f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f4c:	79fb      	ldrb	r3, [r7, #7]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d105      	bne.n	8011f5e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011f52:	683a      	ldr	r2, [r7, #0]
 8011f54:	4907      	ldr	r1, [pc, #28]	@ (8011f74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011f56:	4808      	ldr	r0, [pc, #32]	@ (8011f78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011f58:	f7fb ffb9 	bl	800dece <USBD_GetString>
 8011f5c:	e004      	b.n	8011f68 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	4904      	ldr	r1, [pc, #16]	@ (8011f74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011f62:	4805      	ldr	r0, [pc, #20]	@ (8011f78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011f64:	f7fb ffb3 	bl	800dece <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f68:	4b02      	ldr	r3, [pc, #8]	@ (8011f74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3708      	adds	r7, #8
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	200149a0 	.word	0x200149a0
 8011f78:	08016528 	.word	0x08016528

08011f7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b084      	sub	sp, #16
 8011f80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011f82:	4b0f      	ldr	r3, [pc, #60]	@ (8011fc0 <Get_SerialNum+0x44>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011f88:	4b0e      	ldr	r3, [pc, #56]	@ (8011fc4 <Get_SerialNum+0x48>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8011fc8 <Get_SerialNum+0x4c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011f94:	68fa      	ldr	r2, [r7, #12]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	4413      	add	r3, r2
 8011f9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d009      	beq.n	8011fb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011fa2:	2208      	movs	r2, #8
 8011fa4:	4909      	ldr	r1, [pc, #36]	@ (8011fcc <Get_SerialNum+0x50>)
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f000 f814 	bl	8011fd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011fac:	2204      	movs	r2, #4
 8011fae:	4908      	ldr	r1, [pc, #32]	@ (8011fd0 <Get_SerialNum+0x54>)
 8011fb0:	68b8      	ldr	r0, [r7, #8]
 8011fb2:	f000 f80f 	bl	8011fd4 <IntToUnicode>
  }
}
 8011fb6:	bf00      	nop
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	1fff7590 	.word	0x1fff7590
 8011fc4:	1fff7594 	.word	0x1fff7594
 8011fc8:	1fff7598 	.word	0x1fff7598
 8011fcc:	2000016e 	.word	0x2000016e
 8011fd0:	2000017e 	.word	0x2000017e

08011fd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b087      	sub	sp, #28
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	75fb      	strb	r3, [r7, #23]
 8011fea:	e027      	b.n	801203c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	0f1b      	lsrs	r3, r3, #28
 8011ff0:	2b09      	cmp	r3, #9
 8011ff2:	d80b      	bhi.n	801200c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	0f1b      	lsrs	r3, r3, #28
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	7dfb      	ldrb	r3, [r7, #23]
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	4619      	mov	r1, r3
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	440b      	add	r3, r1
 8012004:	3230      	adds	r2, #48	@ 0x30
 8012006:	b2d2      	uxtb	r2, r2
 8012008:	701a      	strb	r2, [r3, #0]
 801200a:	e00a      	b.n	8012022 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	0f1b      	lsrs	r3, r3, #28
 8012010:	b2da      	uxtb	r2, r3
 8012012:	7dfb      	ldrb	r3, [r7, #23]
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	4619      	mov	r1, r3
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	440b      	add	r3, r1
 801201c:	3237      	adds	r2, #55	@ 0x37
 801201e:	b2d2      	uxtb	r2, r2
 8012020:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	011b      	lsls	r3, r3, #4
 8012026:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012028:	7dfb      	ldrb	r3, [r7, #23]
 801202a:	005b      	lsls	r3, r3, #1
 801202c:	3301      	adds	r3, #1
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	4413      	add	r3, r2
 8012032:	2200      	movs	r2, #0
 8012034:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012036:	7dfb      	ldrb	r3, [r7, #23]
 8012038:	3301      	adds	r3, #1
 801203a:	75fb      	strb	r3, [r7, #23]
 801203c:	7dfa      	ldrb	r2, [r7, #23]
 801203e:	79fb      	ldrb	r3, [r7, #7]
 8012040:	429a      	cmp	r2, r3
 8012042:	d3d3      	bcc.n	8011fec <IntToUnicode+0x18>
  }
}
 8012044:	bf00      	nop
 8012046:	bf00      	nop
 8012048:	371c      	adds	r7, #28
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
	...

08012054 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b098      	sub	sp, #96	@ 0x60
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801205c:	f107 030c 	add.w	r3, r7, #12
 8012060:	2254      	movs	r2, #84	@ 0x54
 8012062:	2100      	movs	r1, #0
 8012064:	4618      	mov	r0, r3
 8012066:	f001 feac 	bl	8013dc2 <memset>
  if(pcdHandle->Instance==USB)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	4a15      	ldr	r2, [pc, #84]	@ (80120c4 <HAL_PCD_MspInit+0x70>)
 8012070:	4293      	cmp	r3, r2
 8012072:	d122      	bne.n	80120ba <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012074:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012078:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801207a:	2300      	movs	r3, #0
 801207c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801207e:	f107 030c 	add.w	r3, r7, #12
 8012082:	4618      	mov	r0, r3
 8012084:	f7f6 fb88 	bl	8008798 <HAL_RCCEx_PeriphCLKConfig>
 8012088:	4603      	mov	r3, r0
 801208a:	2b00      	cmp	r3, #0
 801208c:	d001      	beq.n	8012092 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801208e:	f7f2 fa5d 	bl	800454c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012092:	4b0d      	ldr	r3, [pc, #52]	@ (80120c8 <HAL_PCD_MspInit+0x74>)
 8012094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012096:	4a0c      	ldr	r2, [pc, #48]	@ (80120c8 <HAL_PCD_MspInit+0x74>)
 8012098:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801209c:	6593      	str	r3, [r2, #88]	@ 0x58
 801209e:	4b0a      	ldr	r3, [pc, #40]	@ (80120c8 <HAL_PCD_MspInit+0x74>)
 80120a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80120a6:	60bb      	str	r3, [r7, #8]
 80120a8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80120aa:	2200      	movs	r2, #0
 80120ac:	2105      	movs	r1, #5
 80120ae:	2014      	movs	r0, #20
 80120b0:	f7f2 fe9e 	bl	8004df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80120b4:	2014      	movs	r0, #20
 80120b6:	f7f2 feb5 	bl	8004e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80120ba:	bf00      	nop
 80120bc:	3760      	adds	r7, #96	@ 0x60
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	40005c00 	.word	0x40005c00
 80120c8:	40021000 	.word	0x40021000

080120cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80120e0:	4619      	mov	r1, r3
 80120e2:	4610      	mov	r0, r2
 80120e4:	f7fa ff56 	bl	800cf94 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80120e8:	bf00      	nop
 80120ea:	3708      	adds	r7, #8
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	460b      	mov	r3, r1
 80120fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012102:	78fa      	ldrb	r2, [r7, #3]
 8012104:	6879      	ldr	r1, [r7, #4]
 8012106:	4613      	mov	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4413      	add	r3, r2
 801210c:	00db      	lsls	r3, r3, #3
 801210e:	440b      	add	r3, r1
 8012110:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	78fb      	ldrb	r3, [r7, #3]
 8012118:	4619      	mov	r1, r3
 801211a:	f7fa ff90 	bl	800d03e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801211e:	bf00      	nop
 8012120:	3708      	adds	r7, #8
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}

08012126 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012126:	b580      	push	{r7, lr}
 8012128:	b082      	sub	sp, #8
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
 801212e:	460b      	mov	r3, r1
 8012130:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012138:	78fa      	ldrb	r2, [r7, #3]
 801213a:	6879      	ldr	r1, [r7, #4]
 801213c:	4613      	mov	r3, r2
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	4413      	add	r3, r2
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	440b      	add	r3, r1
 8012146:	3324      	adds	r3, #36	@ 0x24
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	78fb      	ldrb	r3, [r7, #3]
 801214c:	4619      	mov	r1, r3
 801214e:	f7fa ffd9 	bl	800d104 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012152:	bf00      	nop
 8012154:	3708      	adds	r7, #8
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}

0801215a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b082      	sub	sp, #8
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012168:	4618      	mov	r0, r3
 801216a:	f7fb f8ed 	bl	800d348 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801216e:	bf00      	nop
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}

08012176 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012176:	b580      	push	{r7, lr}
 8012178:	b084      	sub	sp, #16
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801217e:	2301      	movs	r3, #1
 8012180:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	795b      	ldrb	r3, [r3, #5]
 8012186:	2b02      	cmp	r3, #2
 8012188:	d001      	beq.n	801218e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801218a:	f7f2 f9df 	bl	800454c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012194:	7bfa      	ldrb	r2, [r7, #15]
 8012196:	4611      	mov	r1, r2
 8012198:	4618      	mov	r0, r3
 801219a:	f7fb f897 	bl	800d2cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7fb f843 	bl	800d230 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80121aa:	bf00      	nop
 80121ac:	3710      	adds	r7, #16
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
	...

080121b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7fb f892 	bl	800d2ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	7a5b      	ldrb	r3, [r3, #9]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d005      	beq.n	80121dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80121d0:	4b04      	ldr	r3, [pc, #16]	@ (80121e4 <HAL_PCD_SuspendCallback+0x30>)
 80121d2:	691b      	ldr	r3, [r3, #16]
 80121d4:	4a03      	ldr	r2, [pc, #12]	@ (80121e4 <HAL_PCD_SuspendCallback+0x30>)
 80121d6:	f043 0306 	orr.w	r3, r3, #6
 80121da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80121dc:	bf00      	nop
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	e000ed00 	.word	0xe000ed00

080121e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	7a5b      	ldrb	r3, [r3, #9]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d007      	beq.n	8012208 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80121f8:	4b08      	ldr	r3, [pc, #32]	@ (801221c <HAL_PCD_ResumeCallback+0x34>)
 80121fa:	691b      	ldr	r3, [r3, #16]
 80121fc:	4a07      	ldr	r2, [pc, #28]	@ (801221c <HAL_PCD_ResumeCallback+0x34>)
 80121fe:	f023 0306 	bic.w	r3, r3, #6
 8012202:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012204:	f000 f9f8 	bl	80125f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801220e:	4618      	mov	r0, r3
 8012210:	f7fb f882 	bl	800d318 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012214:	bf00      	nop
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	e000ed00 	.word	0xe000ed00

08012220 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012228:	4a2b      	ldr	r2, [pc, #172]	@ (80122d8 <USBD_LL_Init+0xb8>)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	4a29      	ldr	r2, [pc, #164]	@ (80122d8 <USBD_LL_Init+0xb8>)
 8012234:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8012238:	4b27      	ldr	r3, [pc, #156]	@ (80122d8 <USBD_LL_Init+0xb8>)
 801223a:	4a28      	ldr	r2, [pc, #160]	@ (80122dc <USBD_LL_Init+0xbc>)
 801223c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801223e:	4b26      	ldr	r3, [pc, #152]	@ (80122d8 <USBD_LL_Init+0xb8>)
 8012240:	2208      	movs	r2, #8
 8012242:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012244:	4b24      	ldr	r3, [pc, #144]	@ (80122d8 <USBD_LL_Init+0xb8>)
 8012246:	2202      	movs	r2, #2
 8012248:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801224a:	4b23      	ldr	r3, [pc, #140]	@ (80122d8 <USBD_LL_Init+0xb8>)
 801224c:	2202      	movs	r2, #2
 801224e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012250:	4b21      	ldr	r3, [pc, #132]	@ (80122d8 <USBD_LL_Init+0xb8>)
 8012252:	2200      	movs	r2, #0
 8012254:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012256:	4b20      	ldr	r3, [pc, #128]	@ (80122d8 <USBD_LL_Init+0xb8>)
 8012258:	2200      	movs	r2, #0
 801225a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801225c:	4b1e      	ldr	r3, [pc, #120]	@ (80122d8 <USBD_LL_Init+0xb8>)
 801225e:	2200      	movs	r2, #0
 8012260:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012262:	4b1d      	ldr	r3, [pc, #116]	@ (80122d8 <USBD_LL_Init+0xb8>)
 8012264:	2200      	movs	r2, #0
 8012266:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012268:	481b      	ldr	r0, [pc, #108]	@ (80122d8 <USBD_LL_Init+0xb8>)
 801226a:	f7f3 ff84 	bl	8006176 <HAL_PCD_Init>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d001      	beq.n	8012278 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8012274:	f7f2 f96a 	bl	800454c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801227e:	2318      	movs	r3, #24
 8012280:	2200      	movs	r2, #0
 8012282:	2100      	movs	r1, #0
 8012284:	f7f5 fc0b 	bl	8007a9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801228e:	2358      	movs	r3, #88	@ 0x58
 8012290:	2200      	movs	r2, #0
 8012292:	2180      	movs	r1, #128	@ 0x80
 8012294:	f7f5 fc03 	bl	8007a9e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801229e:	23c0      	movs	r3, #192	@ 0xc0
 80122a0:	2200      	movs	r2, #0
 80122a2:	2181      	movs	r1, #129	@ 0x81
 80122a4:	f7f5 fbfb 	bl	8007a9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80122ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80122b2:	2200      	movs	r2, #0
 80122b4:	2101      	movs	r1, #1
 80122b6:	f7f5 fbf2 	bl	8007a9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80122c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80122c4:	2200      	movs	r2, #0
 80122c6:	2182      	movs	r1, #130	@ 0x82
 80122c8:	f7f5 fbe9 	bl	8007a9e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3708      	adds	r7, #8
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	20014ba0 	.word	0x20014ba0
 80122dc:	40005c00 	.word	0x40005c00

080122e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122e8:	2300      	movs	r3, #0
 80122ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122ec:	2300      	movs	r3, #0
 80122ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7f4 f80b 	bl	8006312 <HAL_PCD_Start>
 80122fc:	4603      	mov	r3, r0
 80122fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012300:	7bfb      	ldrb	r3, [r7, #15]
 8012302:	4618      	mov	r0, r3
 8012304:	f000 f97e 	bl	8012604 <USBD_Get_USB_Status>
 8012308:	4603      	mov	r3, r0
 801230a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801230c:	7bbb      	ldrb	r3, [r7, #14]
}
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012316:	b580      	push	{r7, lr}
 8012318:	b084      	sub	sp, #16
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
 801231e:	4608      	mov	r0, r1
 8012320:	4611      	mov	r1, r2
 8012322:	461a      	mov	r2, r3
 8012324:	4603      	mov	r3, r0
 8012326:	70fb      	strb	r3, [r7, #3]
 8012328:	460b      	mov	r3, r1
 801232a:	70bb      	strb	r3, [r7, #2]
 801232c:	4613      	mov	r3, r2
 801232e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012334:	2300      	movs	r3, #0
 8012336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801233e:	78bb      	ldrb	r3, [r7, #2]
 8012340:	883a      	ldrh	r2, [r7, #0]
 8012342:	78f9      	ldrb	r1, [r7, #3]
 8012344:	f7f4 f952 	bl	80065ec <HAL_PCD_EP_Open>
 8012348:	4603      	mov	r3, r0
 801234a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801234c:	7bfb      	ldrb	r3, [r7, #15]
 801234e:	4618      	mov	r0, r3
 8012350:	f000 f958 	bl	8012604 <USBD_Get_USB_Status>
 8012354:	4603      	mov	r3, r0
 8012356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012358:	7bbb      	ldrb	r3, [r7, #14]
}
 801235a:	4618      	mov	r0, r3
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b084      	sub	sp, #16
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
 801236a:	460b      	mov	r3, r1
 801236c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801236e:	2300      	movs	r3, #0
 8012370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012372:	2300      	movs	r3, #0
 8012374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801237c:	78fa      	ldrb	r2, [r7, #3]
 801237e:	4611      	mov	r1, r2
 8012380:	4618      	mov	r0, r3
 8012382:	f7f4 f992 	bl	80066aa <HAL_PCD_EP_Close>
 8012386:	4603      	mov	r3, r0
 8012388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801238a:	7bfb      	ldrb	r3, [r7, #15]
 801238c:	4618      	mov	r0, r3
 801238e:	f000 f939 	bl	8012604 <USBD_Get_USB_Status>
 8012392:	4603      	mov	r3, r0
 8012394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012396:	7bbb      	ldrb	r3, [r7, #14]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	460b      	mov	r3, r1
 80123aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123ac:	2300      	movs	r3, #0
 80123ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123b0:	2300      	movs	r3, #0
 80123b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80123ba:	78fa      	ldrb	r2, [r7, #3]
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7f4 fa3b 	bl	800683a <HAL_PCD_EP_SetStall>
 80123c4:	4603      	mov	r3, r0
 80123c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123c8:	7bfb      	ldrb	r3, [r7, #15]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 f91a 	bl	8012604 <USBD_Get_USB_Status>
 80123d0:	4603      	mov	r3, r0
 80123d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b084      	sub	sp, #16
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
 80123e6:	460b      	mov	r3, r1
 80123e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123ea:	2300      	movs	r3, #0
 80123ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80123f8:	78fa      	ldrb	r2, [r7, #3]
 80123fa:	4611      	mov	r1, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f4 fa6e 	bl	80068de <HAL_PCD_EP_ClrStall>
 8012402:	4603      	mov	r3, r0
 8012404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012406:	7bfb      	ldrb	r3, [r7, #15]
 8012408:	4618      	mov	r0, r3
 801240a:	f000 f8fb 	bl	8012604 <USBD_Get_USB_Status>
 801240e:	4603      	mov	r3, r0
 8012410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012412:	7bbb      	ldrb	r3, [r7, #14]
}
 8012414:	4618      	mov	r0, r3
 8012416:	3710      	adds	r7, #16
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801241c:	b480      	push	{r7}
 801241e:	b085      	sub	sp, #20
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	460b      	mov	r3, r1
 8012426:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801242e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012434:	2b00      	cmp	r3, #0
 8012436:	da0b      	bge.n	8012450 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012438:	78fb      	ldrb	r3, [r7, #3]
 801243a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801243e:	68f9      	ldr	r1, [r7, #12]
 8012440:	4613      	mov	r3, r2
 8012442:	009b      	lsls	r3, r3, #2
 8012444:	4413      	add	r3, r2
 8012446:	00db      	lsls	r3, r3, #3
 8012448:	440b      	add	r3, r1
 801244a:	3312      	adds	r3, #18
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	e00b      	b.n	8012468 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012450:	78fb      	ldrb	r3, [r7, #3]
 8012452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012456:	68f9      	ldr	r1, [r7, #12]
 8012458:	4613      	mov	r3, r2
 801245a:	009b      	lsls	r3, r3, #2
 801245c:	4413      	add	r3, r2
 801245e:	00db      	lsls	r3, r3, #3
 8012460:	440b      	add	r3, r1
 8012462:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8012466:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012468:	4618      	mov	r0, r3
 801246a:	3714      	adds	r7, #20
 801246c:	46bd      	mov	sp, r7
 801246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012472:	4770      	bx	lr

08012474 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	460b      	mov	r3, r1
 801247e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012480:	2300      	movs	r3, #0
 8012482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012484:	2300      	movs	r3, #0
 8012486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801248e:	78fa      	ldrb	r2, [r7, #3]
 8012490:	4611      	mov	r1, r2
 8012492:	4618      	mov	r0, r3
 8012494:	f7f4 f886 	bl	80065a4 <HAL_PCD_SetAddress>
 8012498:	4603      	mov	r3, r0
 801249a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801249c:	7bfb      	ldrb	r3, [r7, #15]
 801249e:	4618      	mov	r0, r3
 80124a0:	f000 f8b0 	bl	8012604 <USBD_Get_USB_Status>
 80124a4:	4603      	mov	r3, r0
 80124a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3710      	adds	r7, #16
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b086      	sub	sp, #24
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	60f8      	str	r0, [r7, #12]
 80124ba:	607a      	str	r2, [r7, #4]
 80124bc:	603b      	str	r3, [r7, #0]
 80124be:	460b      	mov	r3, r1
 80124c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124c2:	2300      	movs	r3, #0
 80124c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124c6:	2300      	movs	r3, #0
 80124c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80124d0:	7af9      	ldrb	r1, [r7, #11]
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	f7f4 f979 	bl	80067cc <HAL_PCD_EP_Transmit>
 80124da:	4603      	mov	r3, r0
 80124dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124de:	7dfb      	ldrb	r3, [r7, #23]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f000 f88f 	bl	8012604 <USBD_Get_USB_Status>
 80124e6:	4603      	mov	r3, r0
 80124e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80124ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3718      	adds	r7, #24
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}

080124f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b086      	sub	sp, #24
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	607a      	str	r2, [r7, #4]
 80124fe:	603b      	str	r3, [r7, #0]
 8012500:	460b      	mov	r3, r1
 8012502:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012504:	2300      	movs	r3, #0
 8012506:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012508:	2300      	movs	r3, #0
 801250a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012512:	7af9      	ldrb	r1, [r7, #11]
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	f7f4 f90f 	bl	800673a <HAL_PCD_EP_Receive>
 801251c:	4603      	mov	r3, r0
 801251e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012520:	7dfb      	ldrb	r3, [r7, #23]
 8012522:	4618      	mov	r0, r3
 8012524:	f000 f86e 	bl	8012604 <USBD_Get_USB_Status>
 8012528:	4603      	mov	r3, r0
 801252a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801252c:	7dbb      	ldrb	r3, [r7, #22]
}
 801252e:	4618      	mov	r0, r3
 8012530:	3718      	adds	r7, #24
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}

08012536 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012536:	b580      	push	{r7, lr}
 8012538:	b082      	sub	sp, #8
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
 801253e:	460b      	mov	r3, r1
 8012540:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012548:	78fa      	ldrb	r2, [r7, #3]
 801254a:	4611      	mov	r1, r2
 801254c:	4618      	mov	r0, r3
 801254e:	f7f4 f925 	bl	800679c <HAL_PCD_EP_GetRxCount>
 8012552:	4603      	mov	r3, r0
}
 8012554:	4618      	mov	r0, r3
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	460b      	mov	r3, r1
 8012566:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012568:	78fb      	ldrb	r3, [r7, #3]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d002      	beq.n	8012574 <HAL_PCDEx_LPM_Callback+0x18>
 801256e:	2b01      	cmp	r3, #1
 8012570:	d013      	beq.n	801259a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8012572:	e023      	b.n	80125bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	7a5b      	ldrb	r3, [r3, #9]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d007      	beq.n	801258c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801257c:	f000 f83c 	bl	80125f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012580:	4b10      	ldr	r3, [pc, #64]	@ (80125c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8012582:	691b      	ldr	r3, [r3, #16]
 8012584:	4a0f      	ldr	r2, [pc, #60]	@ (80125c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8012586:	f023 0306 	bic.w	r3, r3, #6
 801258a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012592:	4618      	mov	r0, r3
 8012594:	f7fa fec0 	bl	800d318 <USBD_LL_Resume>
    break;
 8012598:	e010      	b.n	80125bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fa fea3 	bl	800d2ec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	7a5b      	ldrb	r3, [r3, #9]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d005      	beq.n	80125ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80125ae:	4b05      	ldr	r3, [pc, #20]	@ (80125c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	4a04      	ldr	r2, [pc, #16]	@ (80125c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80125b4:	f043 0306 	orr.w	r3, r3, #6
 80125b8:	6113      	str	r3, [r2, #16]
    break;
 80125ba:	bf00      	nop
}
 80125bc:	bf00      	nop
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	e000ed00 	.word	0xe000ed00

080125c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80125d0:	4b03      	ldr	r3, [pc, #12]	@ (80125e0 <USBD_static_malloc+0x18>)
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	370c      	adds	r7, #12
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	20014e7c 	.word	0x20014e7c

080125e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]

}
 80125ec:	bf00      	nop
 80125ee:	370c      	adds	r7, #12
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr

080125f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80125fc:	f7f1 ff2e 	bl	800445c <SystemClock_Config>
}
 8012600:	bf00      	nop
 8012602:	bd80      	pop	{r7, pc}

08012604 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012604:	b480      	push	{r7}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
 801260a:	4603      	mov	r3, r0
 801260c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801260e:	2300      	movs	r3, #0
 8012610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012612:	79fb      	ldrb	r3, [r7, #7]
 8012614:	2b03      	cmp	r3, #3
 8012616:	d817      	bhi.n	8012648 <USBD_Get_USB_Status+0x44>
 8012618:	a201      	add	r2, pc, #4	@ (adr r2, 8012620 <USBD_Get_USB_Status+0x1c>)
 801261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801261e:	bf00      	nop
 8012620:	08012631 	.word	0x08012631
 8012624:	08012637 	.word	0x08012637
 8012628:	0801263d 	.word	0x0801263d
 801262c:	08012643 	.word	0x08012643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012630:	2300      	movs	r3, #0
 8012632:	73fb      	strb	r3, [r7, #15]
    break;
 8012634:	e00b      	b.n	801264e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012636:	2303      	movs	r3, #3
 8012638:	73fb      	strb	r3, [r7, #15]
    break;
 801263a:	e008      	b.n	801264e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801263c:	2301      	movs	r3, #1
 801263e:	73fb      	strb	r3, [r7, #15]
    break;
 8012640:	e005      	b.n	801264e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012642:	2303      	movs	r3, #3
 8012644:	73fb      	strb	r3, [r7, #15]
    break;
 8012646:	e002      	b.n	801264e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012648:	2303      	movs	r3, #3
 801264a:	73fb      	strb	r3, [r7, #15]
    break;
 801264c:	bf00      	nop
  }
  return usb_status;
 801264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012650:	4618      	mov	r0, r3
 8012652:	3714      	adds	r7, #20
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr

0801265c <_ZdlPvj>:
 801265c:	f000 b811 	b.w	8012682 <_ZdlPv>

08012660 <_Znwj>:
 8012660:	2801      	cmp	r0, #1
 8012662:	bf38      	it	cc
 8012664:	2001      	movcc	r0, #1
 8012666:	b510      	push	{r4, lr}
 8012668:	4604      	mov	r4, r0
 801266a:	4620      	mov	r0, r4
 801266c:	f000 fd5a 	bl	8013124 <malloc>
 8012670:	b100      	cbz	r0, 8012674 <_Znwj+0x14>
 8012672:	bd10      	pop	{r4, pc}
 8012674:	f000 f808 	bl	8012688 <_ZSt15get_new_handlerv>
 8012678:	b908      	cbnz	r0, 801267e <_Znwj+0x1e>
 801267a:	f000 fd4c 	bl	8013116 <abort>
 801267e:	4780      	blx	r0
 8012680:	e7f3      	b.n	801266a <_Znwj+0xa>

08012682 <_ZdlPv>:
 8012682:	f000 bd57 	b.w	8013134 <free>
	...

08012688 <_ZSt15get_new_handlerv>:
 8012688:	4b02      	ldr	r3, [pc, #8]	@ (8012694 <_ZSt15get_new_handlerv+0xc>)
 801268a:	6818      	ldr	r0, [r3, #0]
 801268c:	f3bf 8f5b 	dmb	ish
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	2001509c 	.word	0x2001509c

08012698 <atan2f>:
 8012698:	f000 b862 	b.w	8012760 <__ieee754_atan2f>

0801269c <powf>:
 801269c:	b508      	push	{r3, lr}
 801269e:	ed2d 8b04 	vpush	{d8-d9}
 80126a2:	eeb0 8a60 	vmov.f32	s16, s1
 80126a6:	eeb0 9a40 	vmov.f32	s18, s0
 80126aa:	f000 f8f9 	bl	80128a0 <__ieee754_powf>
 80126ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80126b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b6:	eef0 8a40 	vmov.f32	s17, s0
 80126ba:	d63e      	bvs.n	801273a <powf+0x9e>
 80126bc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80126c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c4:	d112      	bne.n	80126ec <powf+0x50>
 80126c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80126ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ce:	d039      	beq.n	8012744 <powf+0xa8>
 80126d0:	eeb0 0a48 	vmov.f32	s0, s16
 80126d4:	f000 f839 	bl	801274a <finitef>
 80126d8:	b378      	cbz	r0, 801273a <powf+0x9e>
 80126da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80126de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e2:	d52a      	bpl.n	801273a <powf+0x9e>
 80126e4:	f001 fc6a 	bl	8013fbc <__errno>
 80126e8:	2322      	movs	r3, #34	@ 0x22
 80126ea:	e014      	b.n	8012716 <powf+0x7a>
 80126ec:	f000 f82d 	bl	801274a <finitef>
 80126f0:	b998      	cbnz	r0, 801271a <powf+0x7e>
 80126f2:	eeb0 0a49 	vmov.f32	s0, s18
 80126f6:	f000 f828 	bl	801274a <finitef>
 80126fa:	b170      	cbz	r0, 801271a <powf+0x7e>
 80126fc:	eeb0 0a48 	vmov.f32	s0, s16
 8012700:	f000 f823 	bl	801274a <finitef>
 8012704:	b148      	cbz	r0, 801271a <powf+0x7e>
 8012706:	eef4 8a68 	vcmp.f32	s17, s17
 801270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270e:	d7e9      	bvc.n	80126e4 <powf+0x48>
 8012710:	f001 fc54 	bl	8013fbc <__errno>
 8012714:	2321      	movs	r3, #33	@ 0x21
 8012716:	6003      	str	r3, [r0, #0]
 8012718:	e00f      	b.n	801273a <powf+0x9e>
 801271a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012722:	d10a      	bne.n	801273a <powf+0x9e>
 8012724:	eeb0 0a49 	vmov.f32	s0, s18
 8012728:	f000 f80f 	bl	801274a <finitef>
 801272c:	b128      	cbz	r0, 801273a <powf+0x9e>
 801272e:	eeb0 0a48 	vmov.f32	s0, s16
 8012732:	f000 f80a 	bl	801274a <finitef>
 8012736:	2800      	cmp	r0, #0
 8012738:	d1d4      	bne.n	80126e4 <powf+0x48>
 801273a:	eeb0 0a68 	vmov.f32	s0, s17
 801273e:	ecbd 8b04 	vpop	{d8-d9}
 8012742:	bd08      	pop	{r3, pc}
 8012744:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8012748:	e7f7      	b.n	801273a <powf+0x9e>

0801274a <finitef>:
 801274a:	ee10 3a10 	vmov	r3, s0
 801274e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8012752:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8012756:	bfac      	ite	ge
 8012758:	2000      	movge	r0, #0
 801275a:	2001      	movlt	r0, #1
 801275c:	4770      	bx	lr
	...

08012760 <__ieee754_atan2f>:
 8012760:	ee10 2a90 	vmov	r2, s1
 8012764:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8012768:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801276c:	b510      	push	{r4, lr}
 801276e:	eef0 7a40 	vmov.f32	s15, s0
 8012772:	d806      	bhi.n	8012782 <__ieee754_atan2f+0x22>
 8012774:	ee10 0a10 	vmov	r0, s0
 8012778:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801277c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012780:	d904      	bls.n	801278c <__ieee754_atan2f+0x2c>
 8012782:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012786:	eeb0 0a67 	vmov.f32	s0, s15
 801278a:	bd10      	pop	{r4, pc}
 801278c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012790:	d103      	bne.n	801279a <__ieee754_atan2f+0x3a>
 8012792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012796:	f000 bb53 	b.w	8012e40 <atanf>
 801279a:	1794      	asrs	r4, r2, #30
 801279c:	f004 0402 	and.w	r4, r4, #2
 80127a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80127a4:	b943      	cbnz	r3, 80127b8 <__ieee754_atan2f+0x58>
 80127a6:	2c02      	cmp	r4, #2
 80127a8:	d05e      	beq.n	8012868 <__ieee754_atan2f+0x108>
 80127aa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801287c <__ieee754_atan2f+0x11c>
 80127ae:	2c03      	cmp	r4, #3
 80127b0:	bf08      	it	eq
 80127b2:	eef0 7a47 	vmoveq.f32	s15, s14
 80127b6:	e7e6      	b.n	8012786 <__ieee754_atan2f+0x26>
 80127b8:	b941      	cbnz	r1, 80127cc <__ieee754_atan2f+0x6c>
 80127ba:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012880 <__ieee754_atan2f+0x120>
 80127be:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012884 <__ieee754_atan2f+0x124>
 80127c2:	2800      	cmp	r0, #0
 80127c4:	bfb8      	it	lt
 80127c6:	eef0 7a47 	vmovlt.f32	s15, s14
 80127ca:	e7dc      	b.n	8012786 <__ieee754_atan2f+0x26>
 80127cc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80127d0:	d110      	bne.n	80127f4 <__ieee754_atan2f+0x94>
 80127d2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80127d6:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80127da:	d107      	bne.n	80127ec <__ieee754_atan2f+0x8c>
 80127dc:	2c02      	cmp	r4, #2
 80127de:	d846      	bhi.n	801286e <__ieee754_atan2f+0x10e>
 80127e0:	4b29      	ldr	r3, [pc, #164]	@ (8012888 <__ieee754_atan2f+0x128>)
 80127e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80127e6:	edd3 7a00 	vldr	s15, [r3]
 80127ea:	e7cc      	b.n	8012786 <__ieee754_atan2f+0x26>
 80127ec:	2c02      	cmp	r4, #2
 80127ee:	d841      	bhi.n	8012874 <__ieee754_atan2f+0x114>
 80127f0:	4b26      	ldr	r3, [pc, #152]	@ (801288c <__ieee754_atan2f+0x12c>)
 80127f2:	e7f6      	b.n	80127e2 <__ieee754_atan2f+0x82>
 80127f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80127f8:	d0df      	beq.n	80127ba <__ieee754_atan2f+0x5a>
 80127fa:	1a5b      	subs	r3, r3, r1
 80127fc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012800:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012804:	da1a      	bge.n	801283c <__ieee754_atan2f+0xdc>
 8012806:	2a00      	cmp	r2, #0
 8012808:	da01      	bge.n	801280e <__ieee754_atan2f+0xae>
 801280a:	313c      	adds	r1, #60	@ 0x3c
 801280c:	db19      	blt.n	8012842 <__ieee754_atan2f+0xe2>
 801280e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012812:	f000 fbe9 	bl	8012fe8 <fabsf>
 8012816:	f000 fb13 	bl	8012e40 <atanf>
 801281a:	eef0 7a40 	vmov.f32	s15, s0
 801281e:	2c01      	cmp	r4, #1
 8012820:	d012      	beq.n	8012848 <__ieee754_atan2f+0xe8>
 8012822:	2c02      	cmp	r4, #2
 8012824:	d017      	beq.n	8012856 <__ieee754_atan2f+0xf6>
 8012826:	2c00      	cmp	r4, #0
 8012828:	d0ad      	beq.n	8012786 <__ieee754_atan2f+0x26>
 801282a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012890 <__ieee754_atan2f+0x130>
 801282e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012832:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012894 <__ieee754_atan2f+0x134>
 8012836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801283a:	e7a4      	b.n	8012786 <__ieee754_atan2f+0x26>
 801283c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8012880 <__ieee754_atan2f+0x120>
 8012840:	e7ed      	b.n	801281e <__ieee754_atan2f+0xbe>
 8012842:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012898 <__ieee754_atan2f+0x138>
 8012846:	e7ea      	b.n	801281e <__ieee754_atan2f+0xbe>
 8012848:	ee17 3a90 	vmov	r3, s15
 801284c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012850:	ee07 3a90 	vmov	s15, r3
 8012854:	e797      	b.n	8012786 <__ieee754_atan2f+0x26>
 8012856:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012890 <__ieee754_atan2f+0x130>
 801285a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801285e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012894 <__ieee754_atan2f+0x134>
 8012862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012866:	e78e      	b.n	8012786 <__ieee754_atan2f+0x26>
 8012868:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012894 <__ieee754_atan2f+0x134>
 801286c:	e78b      	b.n	8012786 <__ieee754_atan2f+0x26>
 801286e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801289c <__ieee754_atan2f+0x13c>
 8012872:	e788      	b.n	8012786 <__ieee754_atan2f+0x26>
 8012874:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012898 <__ieee754_atan2f+0x138>
 8012878:	e785      	b.n	8012786 <__ieee754_atan2f+0x26>
 801287a:	bf00      	nop
 801287c:	c0490fdb 	.word	0xc0490fdb
 8012880:	3fc90fdb 	.word	0x3fc90fdb
 8012884:	bfc90fdb 	.word	0xbfc90fdb
 8012888:	080166e8 	.word	0x080166e8
 801288c:	080166dc 	.word	0x080166dc
 8012890:	33bbbd2e 	.word	0x33bbbd2e
 8012894:	40490fdb 	.word	0x40490fdb
 8012898:	00000000 	.word	0x00000000
 801289c:	3f490fdb 	.word	0x3f490fdb

080128a0 <__ieee754_powf>:
 80128a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128a4:	ee10 4a90 	vmov	r4, s1
 80128a8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80128ac:	ed2d 8b02 	vpush	{d8}
 80128b0:	ee10 6a10 	vmov	r6, s0
 80128b4:	eeb0 8a40 	vmov.f32	s16, s0
 80128b8:	eef0 8a60 	vmov.f32	s17, s1
 80128bc:	d10c      	bne.n	80128d8 <__ieee754_powf+0x38>
 80128be:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80128c2:	0076      	lsls	r6, r6, #1
 80128c4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80128c8:	f240 829c 	bls.w	8012e04 <__ieee754_powf+0x564>
 80128cc:	ee38 0a28 	vadd.f32	s0, s16, s17
 80128d0:	ecbd 8b02 	vpop	{d8}
 80128d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128d8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80128dc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80128e0:	d802      	bhi.n	80128e8 <__ieee754_powf+0x48>
 80128e2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80128e6:	d908      	bls.n	80128fa <__ieee754_powf+0x5a>
 80128e8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80128ec:	d1ee      	bne.n	80128cc <__ieee754_powf+0x2c>
 80128ee:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80128f2:	0064      	lsls	r4, r4, #1
 80128f4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80128f8:	e7e6      	b.n	80128c8 <__ieee754_powf+0x28>
 80128fa:	2e00      	cmp	r6, #0
 80128fc:	da1e      	bge.n	801293c <__ieee754_powf+0x9c>
 80128fe:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8012902:	d22b      	bcs.n	801295c <__ieee754_powf+0xbc>
 8012904:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8012908:	d332      	bcc.n	8012970 <__ieee754_powf+0xd0>
 801290a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801290e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8012912:	fa49 f503 	asr.w	r5, r9, r3
 8012916:	fa05 f303 	lsl.w	r3, r5, r3
 801291a:	454b      	cmp	r3, r9
 801291c:	d126      	bne.n	801296c <__ieee754_powf+0xcc>
 801291e:	f005 0501 	and.w	r5, r5, #1
 8012922:	f1c5 0502 	rsb	r5, r5, #2
 8012926:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801292a:	d122      	bne.n	8012972 <__ieee754_powf+0xd2>
 801292c:	2c00      	cmp	r4, #0
 801292e:	f280 826f 	bge.w	8012e10 <__ieee754_powf+0x570>
 8012932:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012936:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801293a:	e7c9      	b.n	80128d0 <__ieee754_powf+0x30>
 801293c:	2500      	movs	r5, #0
 801293e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8012942:	d1f0      	bne.n	8012926 <__ieee754_powf+0x86>
 8012944:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8012948:	f000 825c 	beq.w	8012e04 <__ieee754_powf+0x564>
 801294c:	d908      	bls.n	8012960 <__ieee754_powf+0xc0>
 801294e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8012cb0 <__ieee754_powf+0x410>
 8012952:	2c00      	cmp	r4, #0
 8012954:	bfa8      	it	ge
 8012956:	eeb0 0a68 	vmovge.f32	s0, s17
 801295a:	e7b9      	b.n	80128d0 <__ieee754_powf+0x30>
 801295c:	2502      	movs	r5, #2
 801295e:	e7ee      	b.n	801293e <__ieee754_powf+0x9e>
 8012960:	2c00      	cmp	r4, #0
 8012962:	f280 8252 	bge.w	8012e0a <__ieee754_powf+0x56a>
 8012966:	eeb1 0a68 	vneg.f32	s0, s17
 801296a:	e7b1      	b.n	80128d0 <__ieee754_powf+0x30>
 801296c:	2500      	movs	r5, #0
 801296e:	e7da      	b.n	8012926 <__ieee754_powf+0x86>
 8012970:	2500      	movs	r5, #0
 8012972:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012976:	d102      	bne.n	801297e <__ieee754_powf+0xde>
 8012978:	ee28 0a08 	vmul.f32	s0, s16, s16
 801297c:	e7a8      	b.n	80128d0 <__ieee754_powf+0x30>
 801297e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8012982:	d109      	bne.n	8012998 <__ieee754_powf+0xf8>
 8012984:	2e00      	cmp	r6, #0
 8012986:	db07      	blt.n	8012998 <__ieee754_powf+0xf8>
 8012988:	eeb0 0a48 	vmov.f32	s0, s16
 801298c:	ecbd 8b02 	vpop	{d8}
 8012990:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012994:	f000 bbbc 	b.w	8013110 <__ieee754_sqrtf>
 8012998:	eeb0 0a48 	vmov.f32	s0, s16
 801299c:	f000 fb24 	bl	8012fe8 <fabsf>
 80129a0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80129a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80129a8:	4647      	mov	r7, r8
 80129aa:	d002      	beq.n	80129b2 <__ieee754_powf+0x112>
 80129ac:	f1b8 0f00 	cmp.w	r8, #0
 80129b0:	d117      	bne.n	80129e2 <__ieee754_powf+0x142>
 80129b2:	2c00      	cmp	r4, #0
 80129b4:	bfbc      	itt	lt
 80129b6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80129ba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80129be:	2e00      	cmp	r6, #0
 80129c0:	da86      	bge.n	80128d0 <__ieee754_powf+0x30>
 80129c2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80129c6:	ea58 0805 	orrs.w	r8, r8, r5
 80129ca:	d104      	bne.n	80129d6 <__ieee754_powf+0x136>
 80129cc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80129d0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80129d4:	e77c      	b.n	80128d0 <__ieee754_powf+0x30>
 80129d6:	2d01      	cmp	r5, #1
 80129d8:	f47f af7a 	bne.w	80128d0 <__ieee754_powf+0x30>
 80129dc:	eeb1 0a40 	vneg.f32	s0, s0
 80129e0:	e776      	b.n	80128d0 <__ieee754_powf+0x30>
 80129e2:	0ff0      	lsrs	r0, r6, #31
 80129e4:	3801      	subs	r0, #1
 80129e6:	ea55 0300 	orrs.w	r3, r5, r0
 80129ea:	d104      	bne.n	80129f6 <__ieee754_powf+0x156>
 80129ec:	ee38 8a48 	vsub.f32	s16, s16, s16
 80129f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80129f4:	e76c      	b.n	80128d0 <__ieee754_powf+0x30>
 80129f6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80129fa:	d973      	bls.n	8012ae4 <__ieee754_powf+0x244>
 80129fc:	4bad      	ldr	r3, [pc, #692]	@ (8012cb4 <__ieee754_powf+0x414>)
 80129fe:	4598      	cmp	r8, r3
 8012a00:	d808      	bhi.n	8012a14 <__ieee754_powf+0x174>
 8012a02:	2c00      	cmp	r4, #0
 8012a04:	da0b      	bge.n	8012a1e <__ieee754_powf+0x17e>
 8012a06:	2000      	movs	r0, #0
 8012a08:	ecbd 8b02 	vpop	{d8}
 8012a0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a10:	f000 bb78 	b.w	8013104 <__math_oflowf>
 8012a14:	4ba8      	ldr	r3, [pc, #672]	@ (8012cb8 <__ieee754_powf+0x418>)
 8012a16:	4598      	cmp	r8, r3
 8012a18:	d908      	bls.n	8012a2c <__ieee754_powf+0x18c>
 8012a1a:	2c00      	cmp	r4, #0
 8012a1c:	dcf3      	bgt.n	8012a06 <__ieee754_powf+0x166>
 8012a1e:	2000      	movs	r0, #0
 8012a20:	ecbd 8b02 	vpop	{d8}
 8012a24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a28:	f000 bb66 	b.w	80130f8 <__math_uflowf>
 8012a2c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012a30:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012a34:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8012cbc <__ieee754_powf+0x41c>
 8012a38:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8012a3c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012a40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012a44:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012a48:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a50:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8012cc0 <__ieee754_powf+0x420>
 8012a54:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8012a58:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8012cc4 <__ieee754_powf+0x424>
 8012a5c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012a60:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8012cc8 <__ieee754_powf+0x428>
 8012a64:	eef0 6a67 	vmov.f32	s13, s15
 8012a68:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012a6c:	ee16 3a90 	vmov	r3, s13
 8012a70:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8012a74:	f023 030f 	bic.w	r3, r3, #15
 8012a78:	ee06 3a90 	vmov	s13, r3
 8012a7c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8012a80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012a84:	3d01      	subs	r5, #1
 8012a86:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8012a8a:	4305      	orrs	r5, r0
 8012a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012a90:	f024 040f 	bic.w	r4, r4, #15
 8012a94:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8012a98:	bf18      	it	ne
 8012a9a:	eeb0 8a47 	vmovne.f32	s16, s14
 8012a9e:	ee07 4a10 	vmov	s14, r4
 8012aa2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012aa6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012aaa:	ee07 3a90 	vmov	s15, r3
 8012aae:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012ab2:	ee07 4a10 	vmov	s14, r4
 8012ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012aba:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012abe:	ee17 1a10 	vmov	r1, s14
 8012ac2:	2900      	cmp	r1, #0
 8012ac4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012ac8:	f340 80dd 	ble.w	8012c86 <__ieee754_powf+0x3e6>
 8012acc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8012ad0:	f240 80ca 	bls.w	8012c68 <__ieee754_powf+0x3c8>
 8012ad4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012adc:	bf4c      	ite	mi
 8012ade:	2001      	movmi	r0, #1
 8012ae0:	2000      	movpl	r0, #0
 8012ae2:	e791      	b.n	8012a08 <__ieee754_powf+0x168>
 8012ae4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8012ae8:	bf01      	itttt	eq
 8012aea:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8012ccc <__ieee754_powf+0x42c>
 8012aee:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012af2:	f06f 0317 	mvneq.w	r3, #23
 8012af6:	ee17 7a90 	vmoveq	r7, s15
 8012afa:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8012afe:	bf18      	it	ne
 8012b00:	2300      	movne	r3, #0
 8012b02:	3a7f      	subs	r2, #127	@ 0x7f
 8012b04:	441a      	add	r2, r3
 8012b06:	4b72      	ldr	r3, [pc, #456]	@ (8012cd0 <__ieee754_powf+0x430>)
 8012b08:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8012b0c:	429f      	cmp	r7, r3
 8012b0e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8012b12:	dd06      	ble.n	8012b22 <__ieee754_powf+0x282>
 8012b14:	4b6f      	ldr	r3, [pc, #444]	@ (8012cd4 <__ieee754_powf+0x434>)
 8012b16:	429f      	cmp	r7, r3
 8012b18:	f340 80a4 	ble.w	8012c64 <__ieee754_powf+0x3c4>
 8012b1c:	3201      	adds	r2, #1
 8012b1e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8012b22:	2600      	movs	r6, #0
 8012b24:	4b6c      	ldr	r3, [pc, #432]	@ (8012cd8 <__ieee754_powf+0x438>)
 8012b26:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8012b2a:	ee07 1a10 	vmov	s14, r1
 8012b2e:	edd3 5a00 	vldr	s11, [r3]
 8012b32:	4b6a      	ldr	r3, [pc, #424]	@ (8012cdc <__ieee754_powf+0x43c>)
 8012b34:	ee75 7a87 	vadd.f32	s15, s11, s14
 8012b38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012b3c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8012b40:	1049      	asrs	r1, r1, #1
 8012b42:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8012b46:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8012b4a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8012b4e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8012b52:	ee07 1a90 	vmov	s15, r1
 8012b56:	ee26 5a24 	vmul.f32	s10, s12, s9
 8012b5a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8012b5e:	ee15 7a10 	vmov	r7, s10
 8012b62:	401f      	ands	r7, r3
 8012b64:	ee06 7a90 	vmov	s13, r7
 8012b68:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8012b6c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8012b70:	ee65 7a05 	vmul.f32	s15, s10, s10
 8012b74:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8012b78:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8012ce0 <__ieee754_powf+0x440>
 8012b7c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8012ce4 <__ieee754_powf+0x444>
 8012b80:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012b84:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8012ce8 <__ieee754_powf+0x448>
 8012b88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012b8c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8012cbc <__ieee754_powf+0x41c>
 8012b90:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012b94:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8012cec <__ieee754_powf+0x44c>
 8012b98:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012b9c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8012cf0 <__ieee754_powf+0x450>
 8012ba0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012ba4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012ba8:	ee35 7a26 	vadd.f32	s14, s10, s13
 8012bac:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8012bb0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012bb4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8012bb8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8012bbc:	eef0 5a67 	vmov.f32	s11, s15
 8012bc0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8012bc4:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012bc8:	ee15 1a90 	vmov	r1, s11
 8012bcc:	4019      	ands	r1, r3
 8012bce:	ee05 1a90 	vmov	s11, r1
 8012bd2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012bd6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8012bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bde:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012be2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012be6:	eeb0 6a67 	vmov.f32	s12, s15
 8012bea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012bee:	ee16 1a10 	vmov	r1, s12
 8012bf2:	4019      	ands	r1, r3
 8012bf4:	ee06 1a10 	vmov	s12, r1
 8012bf8:	eeb0 7a46 	vmov.f32	s14, s12
 8012bfc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8012c00:	493c      	ldr	r1, [pc, #240]	@ (8012cf4 <__ieee754_powf+0x454>)
 8012c02:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8012c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c0a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8012cf8 <__ieee754_powf+0x458>
 8012c0e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8012cfc <__ieee754_powf+0x45c>
 8012c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c16:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8012d00 <__ieee754_powf+0x460>
 8012c1a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012c1e:	ed91 7a00 	vldr	s14, [r1]
 8012c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012c26:	ee07 2a10 	vmov	s14, r2
 8012c2a:	eef0 6a67 	vmov.f32	s13, s15
 8012c2e:	4a35      	ldr	r2, [pc, #212]	@ (8012d04 <__ieee754_powf+0x464>)
 8012c30:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012c34:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8012c38:	ed92 5a00 	vldr	s10, [r2]
 8012c3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c40:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012c44:	ee76 6a87 	vadd.f32	s13, s13, s14
 8012c48:	ee16 2a90 	vmov	r2, s13
 8012c4c:	4013      	ands	r3, r2
 8012c4e:	ee06 3a90 	vmov	s13, r3
 8012c52:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012c56:	ee37 7a45 	vsub.f32	s14, s14, s10
 8012c5a:	eea6 7a65 	vfms.f32	s14, s12, s11
 8012c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c62:	e70f      	b.n	8012a84 <__ieee754_powf+0x1e4>
 8012c64:	2601      	movs	r6, #1
 8012c66:	e75d      	b.n	8012b24 <__ieee754_powf+0x284>
 8012c68:	d152      	bne.n	8012d10 <__ieee754_powf+0x470>
 8012c6a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8012d08 <__ieee754_powf+0x468>
 8012c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c72:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012c76:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c7e:	f73f af29 	bgt.w	8012ad4 <__ieee754_powf+0x234>
 8012c82:	2386      	movs	r3, #134	@ 0x86
 8012c84:	e048      	b.n	8012d18 <__ieee754_powf+0x478>
 8012c86:	4a21      	ldr	r2, [pc, #132]	@ (8012d0c <__ieee754_powf+0x46c>)
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	d907      	bls.n	8012c9c <__ieee754_powf+0x3fc>
 8012c8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c94:	bf4c      	ite	mi
 8012c96:	2001      	movmi	r0, #1
 8012c98:	2000      	movpl	r0, #0
 8012c9a:	e6c1      	b.n	8012a20 <__ieee754_powf+0x180>
 8012c9c:	d138      	bne.n	8012d10 <__ieee754_powf+0x470>
 8012c9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ca2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012caa:	dbea      	blt.n	8012c82 <__ieee754_powf+0x3e2>
 8012cac:	e7ee      	b.n	8012c8c <__ieee754_powf+0x3ec>
 8012cae:	bf00      	nop
 8012cb0:	00000000 	.word	0x00000000
 8012cb4:	3f7ffff3 	.word	0x3f7ffff3
 8012cb8:	3f800007 	.word	0x3f800007
 8012cbc:	3eaaaaab 	.word	0x3eaaaaab
 8012cc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8012cc4:	36eca570 	.word	0x36eca570
 8012cc8:	3fb8aa00 	.word	0x3fb8aa00
 8012ccc:	4b800000 	.word	0x4b800000
 8012cd0:	001cc471 	.word	0x001cc471
 8012cd4:	005db3d6 	.word	0x005db3d6
 8012cd8:	08016704 	.word	0x08016704
 8012cdc:	fffff000 	.word	0xfffff000
 8012ce0:	3e6c3255 	.word	0x3e6c3255
 8012ce4:	3e53f142 	.word	0x3e53f142
 8012ce8:	3e8ba305 	.word	0x3e8ba305
 8012cec:	3edb6db7 	.word	0x3edb6db7
 8012cf0:	3f19999a 	.word	0x3f19999a
 8012cf4:	080166f4 	.word	0x080166f4
 8012cf8:	3f76384f 	.word	0x3f76384f
 8012cfc:	3f763800 	.word	0x3f763800
 8012d00:	369dc3a0 	.word	0x369dc3a0
 8012d04:	080166fc 	.word	0x080166fc
 8012d08:	3338aa3c 	.word	0x3338aa3c
 8012d0c:	43160000 	.word	0x43160000
 8012d10:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8012d14:	d971      	bls.n	8012dfa <__ieee754_powf+0x55a>
 8012d16:	15db      	asrs	r3, r3, #23
 8012d18:	3b7e      	subs	r3, #126	@ 0x7e
 8012d1a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8012d1e:	4118      	asrs	r0, r3
 8012d20:	4408      	add	r0, r1
 8012d22:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012d26:	4a3c      	ldr	r2, [pc, #240]	@ (8012e18 <__ieee754_powf+0x578>)
 8012d28:	3b7f      	subs	r3, #127	@ 0x7f
 8012d2a:	411a      	asrs	r2, r3
 8012d2c:	4002      	ands	r2, r0
 8012d2e:	ee07 2a10 	vmov	s14, r2
 8012d32:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8012d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8012d3a:	f1c3 0317 	rsb	r3, r3, #23
 8012d3e:	4118      	asrs	r0, r3
 8012d40:	2900      	cmp	r1, #0
 8012d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d46:	bfb8      	it	lt
 8012d48:	4240      	neglt	r0, r0
 8012d4a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012d4e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8012e1c <__ieee754_powf+0x57c>
 8012d52:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8012e20 <__ieee754_powf+0x580>
 8012d56:	ee17 3a10 	vmov	r3, s14
 8012d5a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8012d5e:	f023 030f 	bic.w	r3, r3, #15
 8012d62:	ee07 3a10 	vmov	s14, r3
 8012d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d6a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012d6e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012d72:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8012e24 <__ieee754_powf+0x584>
 8012d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d7a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012d7e:	eef0 6a67 	vmov.f32	s13, s15
 8012d82:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012d86:	eef0 5a66 	vmov.f32	s11, s13
 8012d8a:	eee7 5a46 	vfms.f32	s11, s14, s12
 8012d8e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012d92:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012d96:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8012e28 <__ieee754_powf+0x588>
 8012d9a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8012e2c <__ieee754_powf+0x58c>
 8012d9e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012da2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8012e30 <__ieee754_powf+0x590>
 8012da6:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012daa:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8012e34 <__ieee754_powf+0x594>
 8012dae:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012db2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8012e38 <__ieee754_powf+0x598>
 8012db6:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012dba:	eeb0 6a66 	vmov.f32	s12, s13
 8012dbe:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8012dc2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8012dc6:	ee66 5a86 	vmul.f32	s11, s13, s12
 8012dca:	ee36 6a47 	vsub.f32	s12, s12, s14
 8012dce:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8012dd2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8012dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012dde:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012de2:	ee10 3a10 	vmov	r3, s0
 8012de6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012dea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012dee:	da06      	bge.n	8012dfe <__ieee754_powf+0x55e>
 8012df0:	f000 f902 	bl	8012ff8 <scalbnf>
 8012df4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012df8:	e56a      	b.n	80128d0 <__ieee754_powf+0x30>
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	e7a5      	b.n	8012d4a <__ieee754_powf+0x4aa>
 8012dfe:	ee00 3a10 	vmov	s0, r3
 8012e02:	e7f7      	b.n	8012df4 <__ieee754_powf+0x554>
 8012e04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012e08:	e562      	b.n	80128d0 <__ieee754_powf+0x30>
 8012e0a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8012e3c <__ieee754_powf+0x59c>
 8012e0e:	e55f      	b.n	80128d0 <__ieee754_powf+0x30>
 8012e10:	eeb0 0a48 	vmov.f32	s0, s16
 8012e14:	e55c      	b.n	80128d0 <__ieee754_powf+0x30>
 8012e16:	bf00      	nop
 8012e18:	ff800000 	.word	0xff800000
 8012e1c:	3f317218 	.word	0x3f317218
 8012e20:	3f317200 	.word	0x3f317200
 8012e24:	35bfbe8c 	.word	0x35bfbe8c
 8012e28:	b5ddea0e 	.word	0xb5ddea0e
 8012e2c:	3331bb4c 	.word	0x3331bb4c
 8012e30:	388ab355 	.word	0x388ab355
 8012e34:	bb360b61 	.word	0xbb360b61
 8012e38:	3e2aaaab 	.word	0x3e2aaaab
 8012e3c:	00000000 	.word	0x00000000

08012e40 <atanf>:
 8012e40:	b538      	push	{r3, r4, r5, lr}
 8012e42:	ee10 5a10 	vmov	r5, s0
 8012e46:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012e4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012e4e:	eef0 7a40 	vmov.f32	s15, s0
 8012e52:	d310      	bcc.n	8012e76 <atanf+0x36>
 8012e54:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012e58:	d904      	bls.n	8012e64 <atanf+0x24>
 8012e5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8012e62:	bd38      	pop	{r3, r4, r5, pc}
 8012e64:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012f9c <atanf+0x15c>
 8012e68:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012fa0 <atanf+0x160>
 8012e6c:	2d00      	cmp	r5, #0
 8012e6e:	bfc8      	it	gt
 8012e70:	eef0 7a47 	vmovgt.f32	s15, s14
 8012e74:	e7f3      	b.n	8012e5e <atanf+0x1e>
 8012e76:	4b4b      	ldr	r3, [pc, #300]	@ (8012fa4 <atanf+0x164>)
 8012e78:	429c      	cmp	r4, r3
 8012e7a:	d810      	bhi.n	8012e9e <atanf+0x5e>
 8012e7c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012e80:	d20a      	bcs.n	8012e98 <atanf+0x58>
 8012e82:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012fa8 <atanf+0x168>
 8012e86:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012e8e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e96:	dce2      	bgt.n	8012e5e <atanf+0x1e>
 8012e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e9c:	e013      	b.n	8012ec6 <atanf+0x86>
 8012e9e:	f000 f8a3 	bl	8012fe8 <fabsf>
 8012ea2:	4b42      	ldr	r3, [pc, #264]	@ (8012fac <atanf+0x16c>)
 8012ea4:	429c      	cmp	r4, r3
 8012ea6:	d84f      	bhi.n	8012f48 <atanf+0x108>
 8012ea8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012eac:	429c      	cmp	r4, r3
 8012eae:	d841      	bhi.n	8012f34 <atanf+0xf4>
 8012eb0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012eb4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012eb8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012ec2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012ec6:	1c5a      	adds	r2, r3, #1
 8012ec8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012ecc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012fb0 <atanf+0x170>
 8012ed0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012fb4 <atanf+0x174>
 8012ed4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012fb8 <atanf+0x178>
 8012ed8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012edc:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012ee0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012fbc <atanf+0x17c>
 8012ee4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012ee8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012fc0 <atanf+0x180>
 8012eec:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012ef0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012fc4 <atanf+0x184>
 8012ef4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012ef8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012fc8 <atanf+0x188>
 8012efc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012f00:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012fcc <atanf+0x18c>
 8012f04:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012f08:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012fd0 <atanf+0x190>
 8012f0c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012f10:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012fd4 <atanf+0x194>
 8012f14:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012f18:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012fd8 <atanf+0x198>
 8012f1c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012f20:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012f24:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012f28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012f2c:	d121      	bne.n	8012f72 <atanf+0x132>
 8012f2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f32:	e794      	b.n	8012e5e <atanf+0x1e>
 8012f34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012f38:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012f3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012f40:	2301      	movs	r3, #1
 8012f42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012f46:	e7be      	b.n	8012ec6 <atanf+0x86>
 8012f48:	4b24      	ldr	r3, [pc, #144]	@ (8012fdc <atanf+0x19c>)
 8012f4a:	429c      	cmp	r4, r3
 8012f4c:	d80b      	bhi.n	8012f66 <atanf+0x126>
 8012f4e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012f52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012f56:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012f5a:	2302      	movs	r3, #2
 8012f5c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012f64:	e7af      	b.n	8012ec6 <atanf+0x86>
 8012f66:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012f6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012f6e:	2303      	movs	r3, #3
 8012f70:	e7a9      	b.n	8012ec6 <atanf+0x86>
 8012f72:	4a1b      	ldr	r2, [pc, #108]	@ (8012fe0 <atanf+0x1a0>)
 8012f74:	491b      	ldr	r1, [pc, #108]	@ (8012fe4 <atanf+0x1a4>)
 8012f76:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012f7a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012f7e:	edd3 6a00 	vldr	s13, [r3]
 8012f82:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012f86:	2d00      	cmp	r5, #0
 8012f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f8c:	edd2 7a00 	vldr	s15, [r2]
 8012f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f94:	bfb8      	it	lt
 8012f96:	eef1 7a67 	vneglt.f32	s15, s15
 8012f9a:	e760      	b.n	8012e5e <atanf+0x1e>
 8012f9c:	bfc90fdb 	.word	0xbfc90fdb
 8012fa0:	3fc90fdb 	.word	0x3fc90fdb
 8012fa4:	3edfffff 	.word	0x3edfffff
 8012fa8:	7149f2ca 	.word	0x7149f2ca
 8012fac:	3f97ffff 	.word	0x3f97ffff
 8012fb0:	3c8569d7 	.word	0x3c8569d7
 8012fb4:	3d4bda59 	.word	0x3d4bda59
 8012fb8:	bd6ef16b 	.word	0xbd6ef16b
 8012fbc:	3d886b35 	.word	0x3d886b35
 8012fc0:	3dba2e6e 	.word	0x3dba2e6e
 8012fc4:	3e124925 	.word	0x3e124925
 8012fc8:	3eaaaaab 	.word	0x3eaaaaab
 8012fcc:	bd15a221 	.word	0xbd15a221
 8012fd0:	bd9d8795 	.word	0xbd9d8795
 8012fd4:	bde38e38 	.word	0xbde38e38
 8012fd8:	be4ccccd 	.word	0xbe4ccccd
 8012fdc:	401bffff 	.word	0x401bffff
 8012fe0:	0801671c 	.word	0x0801671c
 8012fe4:	0801670c 	.word	0x0801670c

08012fe8 <fabsf>:
 8012fe8:	ee10 3a10 	vmov	r3, s0
 8012fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012ff0:	ee00 3a10 	vmov	s0, r3
 8012ff4:	4770      	bx	lr
	...

08012ff8 <scalbnf>:
 8012ff8:	ee10 3a10 	vmov	r3, s0
 8012ffc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013000:	d02b      	beq.n	801305a <scalbnf+0x62>
 8013002:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013006:	d302      	bcc.n	801300e <scalbnf+0x16>
 8013008:	ee30 0a00 	vadd.f32	s0, s0, s0
 801300c:	4770      	bx	lr
 801300e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013012:	d123      	bne.n	801305c <scalbnf+0x64>
 8013014:	4b24      	ldr	r3, [pc, #144]	@ (80130a8 <scalbnf+0xb0>)
 8013016:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80130ac <scalbnf+0xb4>
 801301a:	4298      	cmp	r0, r3
 801301c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013020:	db17      	blt.n	8013052 <scalbnf+0x5a>
 8013022:	ee10 3a10 	vmov	r3, s0
 8013026:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801302a:	3a19      	subs	r2, #25
 801302c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013030:	4288      	cmp	r0, r1
 8013032:	dd15      	ble.n	8013060 <scalbnf+0x68>
 8013034:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80130b0 <scalbnf+0xb8>
 8013038:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80130b4 <scalbnf+0xbc>
 801303c:	ee10 3a10 	vmov	r3, s0
 8013040:	eeb0 7a67 	vmov.f32	s14, s15
 8013044:	2b00      	cmp	r3, #0
 8013046:	bfb8      	it	lt
 8013048:	eef0 7a66 	vmovlt.f32	s15, s13
 801304c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013050:	4770      	bx	lr
 8013052:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80130b8 <scalbnf+0xc0>
 8013056:	ee27 0a80 	vmul.f32	s0, s15, s0
 801305a:	4770      	bx	lr
 801305c:	0dd2      	lsrs	r2, r2, #23
 801305e:	e7e5      	b.n	801302c <scalbnf+0x34>
 8013060:	4410      	add	r0, r2
 8013062:	28fe      	cmp	r0, #254	@ 0xfe
 8013064:	dce6      	bgt.n	8013034 <scalbnf+0x3c>
 8013066:	2800      	cmp	r0, #0
 8013068:	dd06      	ble.n	8013078 <scalbnf+0x80>
 801306a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801306e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013072:	ee00 3a10 	vmov	s0, r3
 8013076:	4770      	bx	lr
 8013078:	f110 0f16 	cmn.w	r0, #22
 801307c:	da09      	bge.n	8013092 <scalbnf+0x9a>
 801307e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80130b8 <scalbnf+0xc0>
 8013082:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80130bc <scalbnf+0xc4>
 8013086:	ee10 3a10 	vmov	r3, s0
 801308a:	eeb0 7a67 	vmov.f32	s14, s15
 801308e:	2b00      	cmp	r3, #0
 8013090:	e7d9      	b.n	8013046 <scalbnf+0x4e>
 8013092:	3019      	adds	r0, #25
 8013094:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013098:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801309c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80130c0 <scalbnf+0xc8>
 80130a0:	ee07 3a90 	vmov	s15, r3
 80130a4:	e7d7      	b.n	8013056 <scalbnf+0x5e>
 80130a6:	bf00      	nop
 80130a8:	ffff3cb0 	.word	0xffff3cb0
 80130ac:	4c000000 	.word	0x4c000000
 80130b0:	7149f2ca 	.word	0x7149f2ca
 80130b4:	f149f2ca 	.word	0xf149f2ca
 80130b8:	0da24260 	.word	0x0da24260
 80130bc:	8da24260 	.word	0x8da24260
 80130c0:	33000000 	.word	0x33000000

080130c4 <with_errnof>:
 80130c4:	b510      	push	{r4, lr}
 80130c6:	ed2d 8b02 	vpush	{d8}
 80130ca:	eeb0 8a40 	vmov.f32	s16, s0
 80130ce:	4604      	mov	r4, r0
 80130d0:	f000 ff74 	bl	8013fbc <__errno>
 80130d4:	eeb0 0a48 	vmov.f32	s0, s16
 80130d8:	ecbd 8b02 	vpop	{d8}
 80130dc:	6004      	str	r4, [r0, #0]
 80130de:	bd10      	pop	{r4, pc}

080130e0 <xflowf>:
 80130e0:	b130      	cbz	r0, 80130f0 <xflowf+0x10>
 80130e2:	eef1 7a40 	vneg.f32	s15, s0
 80130e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80130ea:	2022      	movs	r0, #34	@ 0x22
 80130ec:	f7ff bfea 	b.w	80130c4 <with_errnof>
 80130f0:	eef0 7a40 	vmov.f32	s15, s0
 80130f4:	e7f7      	b.n	80130e6 <xflowf+0x6>
	...

080130f8 <__math_uflowf>:
 80130f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013100 <__math_uflowf+0x8>
 80130fc:	f7ff bff0 	b.w	80130e0 <xflowf>
 8013100:	10000000 	.word	0x10000000

08013104 <__math_oflowf>:
 8013104:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801310c <__math_oflowf+0x8>
 8013108:	f7ff bfea 	b.w	80130e0 <xflowf>
 801310c:	70000000 	.word	0x70000000

08013110 <__ieee754_sqrtf>:
 8013110:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013114:	4770      	bx	lr

08013116 <abort>:
 8013116:	b508      	push	{r3, lr}
 8013118:	2006      	movs	r0, #6
 801311a:	f000 fe83 	bl	8013e24 <raise>
 801311e:	2001      	movs	r0, #1
 8013120:	f7f1 fb9e 	bl	8004860 <_exit>

08013124 <malloc>:
 8013124:	4b02      	ldr	r3, [pc, #8]	@ (8013130 <malloc+0xc>)
 8013126:	4601      	mov	r1, r0
 8013128:	6818      	ldr	r0, [r3, #0]
 801312a:	f000 b82d 	b.w	8013188 <_malloc_r>
 801312e:	bf00      	nop
 8013130:	20000194 	.word	0x20000194

08013134 <free>:
 8013134:	4b02      	ldr	r3, [pc, #8]	@ (8013140 <free+0xc>)
 8013136:	4601      	mov	r1, r0
 8013138:	6818      	ldr	r0, [r3, #0]
 801313a:	f001 bdc9 	b.w	8014cd0 <_free_r>
 801313e:	bf00      	nop
 8013140:	20000194 	.word	0x20000194

08013144 <sbrk_aligned>:
 8013144:	b570      	push	{r4, r5, r6, lr}
 8013146:	4e0f      	ldr	r6, [pc, #60]	@ (8013184 <sbrk_aligned+0x40>)
 8013148:	460c      	mov	r4, r1
 801314a:	6831      	ldr	r1, [r6, #0]
 801314c:	4605      	mov	r5, r0
 801314e:	b911      	cbnz	r1, 8013156 <sbrk_aligned+0x12>
 8013150:	f000 ff12 	bl	8013f78 <_sbrk_r>
 8013154:	6030      	str	r0, [r6, #0]
 8013156:	4621      	mov	r1, r4
 8013158:	4628      	mov	r0, r5
 801315a:	f000 ff0d 	bl	8013f78 <_sbrk_r>
 801315e:	1c43      	adds	r3, r0, #1
 8013160:	d103      	bne.n	801316a <sbrk_aligned+0x26>
 8013162:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013166:	4620      	mov	r0, r4
 8013168:	bd70      	pop	{r4, r5, r6, pc}
 801316a:	1cc4      	adds	r4, r0, #3
 801316c:	f024 0403 	bic.w	r4, r4, #3
 8013170:	42a0      	cmp	r0, r4
 8013172:	d0f8      	beq.n	8013166 <sbrk_aligned+0x22>
 8013174:	1a21      	subs	r1, r4, r0
 8013176:	4628      	mov	r0, r5
 8013178:	f000 fefe 	bl	8013f78 <_sbrk_r>
 801317c:	3001      	adds	r0, #1
 801317e:	d1f2      	bne.n	8013166 <sbrk_aligned+0x22>
 8013180:	e7ef      	b.n	8013162 <sbrk_aligned+0x1e>
 8013182:	bf00      	nop
 8013184:	200150a0 	.word	0x200150a0

08013188 <_malloc_r>:
 8013188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801318c:	1ccd      	adds	r5, r1, #3
 801318e:	f025 0503 	bic.w	r5, r5, #3
 8013192:	3508      	adds	r5, #8
 8013194:	2d0c      	cmp	r5, #12
 8013196:	bf38      	it	cc
 8013198:	250c      	movcc	r5, #12
 801319a:	2d00      	cmp	r5, #0
 801319c:	4606      	mov	r6, r0
 801319e:	db01      	blt.n	80131a4 <_malloc_r+0x1c>
 80131a0:	42a9      	cmp	r1, r5
 80131a2:	d904      	bls.n	80131ae <_malloc_r+0x26>
 80131a4:	230c      	movs	r3, #12
 80131a6:	6033      	str	r3, [r6, #0]
 80131a8:	2000      	movs	r0, #0
 80131aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013284 <_malloc_r+0xfc>
 80131b2:	f000 f869 	bl	8013288 <__malloc_lock>
 80131b6:	f8d8 3000 	ldr.w	r3, [r8]
 80131ba:	461c      	mov	r4, r3
 80131bc:	bb44      	cbnz	r4, 8013210 <_malloc_r+0x88>
 80131be:	4629      	mov	r1, r5
 80131c0:	4630      	mov	r0, r6
 80131c2:	f7ff ffbf 	bl	8013144 <sbrk_aligned>
 80131c6:	1c43      	adds	r3, r0, #1
 80131c8:	4604      	mov	r4, r0
 80131ca:	d158      	bne.n	801327e <_malloc_r+0xf6>
 80131cc:	f8d8 4000 	ldr.w	r4, [r8]
 80131d0:	4627      	mov	r7, r4
 80131d2:	2f00      	cmp	r7, #0
 80131d4:	d143      	bne.n	801325e <_malloc_r+0xd6>
 80131d6:	2c00      	cmp	r4, #0
 80131d8:	d04b      	beq.n	8013272 <_malloc_r+0xea>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	4639      	mov	r1, r7
 80131de:	4630      	mov	r0, r6
 80131e0:	eb04 0903 	add.w	r9, r4, r3
 80131e4:	f000 fec8 	bl	8013f78 <_sbrk_r>
 80131e8:	4581      	cmp	r9, r0
 80131ea:	d142      	bne.n	8013272 <_malloc_r+0xea>
 80131ec:	6821      	ldr	r1, [r4, #0]
 80131ee:	1a6d      	subs	r5, r5, r1
 80131f0:	4629      	mov	r1, r5
 80131f2:	4630      	mov	r0, r6
 80131f4:	f7ff ffa6 	bl	8013144 <sbrk_aligned>
 80131f8:	3001      	adds	r0, #1
 80131fa:	d03a      	beq.n	8013272 <_malloc_r+0xea>
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	442b      	add	r3, r5
 8013200:	6023      	str	r3, [r4, #0]
 8013202:	f8d8 3000 	ldr.w	r3, [r8]
 8013206:	685a      	ldr	r2, [r3, #4]
 8013208:	bb62      	cbnz	r2, 8013264 <_malloc_r+0xdc>
 801320a:	f8c8 7000 	str.w	r7, [r8]
 801320e:	e00f      	b.n	8013230 <_malloc_r+0xa8>
 8013210:	6822      	ldr	r2, [r4, #0]
 8013212:	1b52      	subs	r2, r2, r5
 8013214:	d420      	bmi.n	8013258 <_malloc_r+0xd0>
 8013216:	2a0b      	cmp	r2, #11
 8013218:	d917      	bls.n	801324a <_malloc_r+0xc2>
 801321a:	1961      	adds	r1, r4, r5
 801321c:	42a3      	cmp	r3, r4
 801321e:	6025      	str	r5, [r4, #0]
 8013220:	bf18      	it	ne
 8013222:	6059      	strne	r1, [r3, #4]
 8013224:	6863      	ldr	r3, [r4, #4]
 8013226:	bf08      	it	eq
 8013228:	f8c8 1000 	streq.w	r1, [r8]
 801322c:	5162      	str	r2, [r4, r5]
 801322e:	604b      	str	r3, [r1, #4]
 8013230:	4630      	mov	r0, r6
 8013232:	f000 f82f 	bl	8013294 <__malloc_unlock>
 8013236:	f104 000b 	add.w	r0, r4, #11
 801323a:	1d23      	adds	r3, r4, #4
 801323c:	f020 0007 	bic.w	r0, r0, #7
 8013240:	1ac2      	subs	r2, r0, r3
 8013242:	bf1c      	itt	ne
 8013244:	1a1b      	subne	r3, r3, r0
 8013246:	50a3      	strne	r3, [r4, r2]
 8013248:	e7af      	b.n	80131aa <_malloc_r+0x22>
 801324a:	6862      	ldr	r2, [r4, #4]
 801324c:	42a3      	cmp	r3, r4
 801324e:	bf0c      	ite	eq
 8013250:	f8c8 2000 	streq.w	r2, [r8]
 8013254:	605a      	strne	r2, [r3, #4]
 8013256:	e7eb      	b.n	8013230 <_malloc_r+0xa8>
 8013258:	4623      	mov	r3, r4
 801325a:	6864      	ldr	r4, [r4, #4]
 801325c:	e7ae      	b.n	80131bc <_malloc_r+0x34>
 801325e:	463c      	mov	r4, r7
 8013260:	687f      	ldr	r7, [r7, #4]
 8013262:	e7b6      	b.n	80131d2 <_malloc_r+0x4a>
 8013264:	461a      	mov	r2, r3
 8013266:	685b      	ldr	r3, [r3, #4]
 8013268:	42a3      	cmp	r3, r4
 801326a:	d1fb      	bne.n	8013264 <_malloc_r+0xdc>
 801326c:	2300      	movs	r3, #0
 801326e:	6053      	str	r3, [r2, #4]
 8013270:	e7de      	b.n	8013230 <_malloc_r+0xa8>
 8013272:	230c      	movs	r3, #12
 8013274:	6033      	str	r3, [r6, #0]
 8013276:	4630      	mov	r0, r6
 8013278:	f000 f80c 	bl	8013294 <__malloc_unlock>
 801327c:	e794      	b.n	80131a8 <_malloc_r+0x20>
 801327e:	6005      	str	r5, [r0, #0]
 8013280:	e7d6      	b.n	8013230 <_malloc_r+0xa8>
 8013282:	bf00      	nop
 8013284:	200150a4 	.word	0x200150a4

08013288 <__malloc_lock>:
 8013288:	4801      	ldr	r0, [pc, #4]	@ (8013290 <__malloc_lock+0x8>)
 801328a:	f000 bec2 	b.w	8014012 <__retarget_lock_acquire_recursive>
 801328e:	bf00      	nop
 8013290:	200151e8 	.word	0x200151e8

08013294 <__malloc_unlock>:
 8013294:	4801      	ldr	r0, [pc, #4]	@ (801329c <__malloc_unlock+0x8>)
 8013296:	f000 bebd 	b.w	8014014 <__retarget_lock_release_recursive>
 801329a:	bf00      	nop
 801329c:	200151e8 	.word	0x200151e8

080132a0 <__cvt>:
 80132a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80132a4:	ec57 6b10 	vmov	r6, r7, d0
 80132a8:	2f00      	cmp	r7, #0
 80132aa:	460c      	mov	r4, r1
 80132ac:	4619      	mov	r1, r3
 80132ae:	463b      	mov	r3, r7
 80132b0:	bfbb      	ittet	lt
 80132b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80132b6:	461f      	movlt	r7, r3
 80132b8:	2300      	movge	r3, #0
 80132ba:	232d      	movlt	r3, #45	@ 0x2d
 80132bc:	700b      	strb	r3, [r1, #0]
 80132be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80132c4:	4691      	mov	r9, r2
 80132c6:	f023 0820 	bic.w	r8, r3, #32
 80132ca:	bfbc      	itt	lt
 80132cc:	4632      	movlt	r2, r6
 80132ce:	4616      	movlt	r6, r2
 80132d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80132d4:	d005      	beq.n	80132e2 <__cvt+0x42>
 80132d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80132da:	d100      	bne.n	80132de <__cvt+0x3e>
 80132dc:	3401      	adds	r4, #1
 80132de:	2102      	movs	r1, #2
 80132e0:	e000      	b.n	80132e4 <__cvt+0x44>
 80132e2:	2103      	movs	r1, #3
 80132e4:	ab03      	add	r3, sp, #12
 80132e6:	9301      	str	r3, [sp, #4]
 80132e8:	ab02      	add	r3, sp, #8
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	ec47 6b10 	vmov	d0, r6, r7
 80132f0:	4653      	mov	r3, sl
 80132f2:	4622      	mov	r2, r4
 80132f4:	f000 ff28 	bl	8014148 <_dtoa_r>
 80132f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80132fc:	4605      	mov	r5, r0
 80132fe:	d119      	bne.n	8013334 <__cvt+0x94>
 8013300:	f019 0f01 	tst.w	r9, #1
 8013304:	d00e      	beq.n	8013324 <__cvt+0x84>
 8013306:	eb00 0904 	add.w	r9, r0, r4
 801330a:	2200      	movs	r2, #0
 801330c:	2300      	movs	r3, #0
 801330e:	4630      	mov	r0, r6
 8013310:	4639      	mov	r1, r7
 8013312:	f7ed fc01 	bl	8000b18 <__aeabi_dcmpeq>
 8013316:	b108      	cbz	r0, 801331c <__cvt+0x7c>
 8013318:	f8cd 900c 	str.w	r9, [sp, #12]
 801331c:	2230      	movs	r2, #48	@ 0x30
 801331e:	9b03      	ldr	r3, [sp, #12]
 8013320:	454b      	cmp	r3, r9
 8013322:	d31e      	bcc.n	8013362 <__cvt+0xc2>
 8013324:	9b03      	ldr	r3, [sp, #12]
 8013326:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013328:	1b5b      	subs	r3, r3, r5
 801332a:	4628      	mov	r0, r5
 801332c:	6013      	str	r3, [r2, #0]
 801332e:	b004      	add	sp, #16
 8013330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013334:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013338:	eb00 0904 	add.w	r9, r0, r4
 801333c:	d1e5      	bne.n	801330a <__cvt+0x6a>
 801333e:	7803      	ldrb	r3, [r0, #0]
 8013340:	2b30      	cmp	r3, #48	@ 0x30
 8013342:	d10a      	bne.n	801335a <__cvt+0xba>
 8013344:	2200      	movs	r2, #0
 8013346:	2300      	movs	r3, #0
 8013348:	4630      	mov	r0, r6
 801334a:	4639      	mov	r1, r7
 801334c:	f7ed fbe4 	bl	8000b18 <__aeabi_dcmpeq>
 8013350:	b918      	cbnz	r0, 801335a <__cvt+0xba>
 8013352:	f1c4 0401 	rsb	r4, r4, #1
 8013356:	f8ca 4000 	str.w	r4, [sl]
 801335a:	f8da 3000 	ldr.w	r3, [sl]
 801335e:	4499      	add	r9, r3
 8013360:	e7d3      	b.n	801330a <__cvt+0x6a>
 8013362:	1c59      	adds	r1, r3, #1
 8013364:	9103      	str	r1, [sp, #12]
 8013366:	701a      	strb	r2, [r3, #0]
 8013368:	e7d9      	b.n	801331e <__cvt+0x7e>

0801336a <__exponent>:
 801336a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801336c:	2900      	cmp	r1, #0
 801336e:	bfba      	itte	lt
 8013370:	4249      	neglt	r1, r1
 8013372:	232d      	movlt	r3, #45	@ 0x2d
 8013374:	232b      	movge	r3, #43	@ 0x2b
 8013376:	2909      	cmp	r1, #9
 8013378:	7002      	strb	r2, [r0, #0]
 801337a:	7043      	strb	r3, [r0, #1]
 801337c:	dd29      	ble.n	80133d2 <__exponent+0x68>
 801337e:	f10d 0307 	add.w	r3, sp, #7
 8013382:	461d      	mov	r5, r3
 8013384:	270a      	movs	r7, #10
 8013386:	461a      	mov	r2, r3
 8013388:	fbb1 f6f7 	udiv	r6, r1, r7
 801338c:	fb07 1416 	mls	r4, r7, r6, r1
 8013390:	3430      	adds	r4, #48	@ 0x30
 8013392:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013396:	460c      	mov	r4, r1
 8013398:	2c63      	cmp	r4, #99	@ 0x63
 801339a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801339e:	4631      	mov	r1, r6
 80133a0:	dcf1      	bgt.n	8013386 <__exponent+0x1c>
 80133a2:	3130      	adds	r1, #48	@ 0x30
 80133a4:	1e94      	subs	r4, r2, #2
 80133a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80133aa:	1c41      	adds	r1, r0, #1
 80133ac:	4623      	mov	r3, r4
 80133ae:	42ab      	cmp	r3, r5
 80133b0:	d30a      	bcc.n	80133c8 <__exponent+0x5e>
 80133b2:	f10d 0309 	add.w	r3, sp, #9
 80133b6:	1a9b      	subs	r3, r3, r2
 80133b8:	42ac      	cmp	r4, r5
 80133ba:	bf88      	it	hi
 80133bc:	2300      	movhi	r3, #0
 80133be:	3302      	adds	r3, #2
 80133c0:	4403      	add	r3, r0
 80133c2:	1a18      	subs	r0, r3, r0
 80133c4:	b003      	add	sp, #12
 80133c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80133cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80133d0:	e7ed      	b.n	80133ae <__exponent+0x44>
 80133d2:	2330      	movs	r3, #48	@ 0x30
 80133d4:	3130      	adds	r1, #48	@ 0x30
 80133d6:	7083      	strb	r3, [r0, #2]
 80133d8:	70c1      	strb	r1, [r0, #3]
 80133da:	1d03      	adds	r3, r0, #4
 80133dc:	e7f1      	b.n	80133c2 <__exponent+0x58>
	...

080133e0 <_printf_float>:
 80133e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e4:	b08d      	sub	sp, #52	@ 0x34
 80133e6:	460c      	mov	r4, r1
 80133e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80133ec:	4616      	mov	r6, r2
 80133ee:	461f      	mov	r7, r3
 80133f0:	4605      	mov	r5, r0
 80133f2:	f000 fd1f 	bl	8013e34 <_localeconv_r>
 80133f6:	6803      	ldr	r3, [r0, #0]
 80133f8:	9304      	str	r3, [sp, #16]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ec ff60 	bl	80002c0 <strlen>
 8013400:	2300      	movs	r3, #0
 8013402:	930a      	str	r3, [sp, #40]	@ 0x28
 8013404:	f8d8 3000 	ldr.w	r3, [r8]
 8013408:	9005      	str	r0, [sp, #20]
 801340a:	3307      	adds	r3, #7
 801340c:	f023 0307 	bic.w	r3, r3, #7
 8013410:	f103 0208 	add.w	r2, r3, #8
 8013414:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013418:	f8d4 b000 	ldr.w	fp, [r4]
 801341c:	f8c8 2000 	str.w	r2, [r8]
 8013420:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013424:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013428:	9307      	str	r3, [sp, #28]
 801342a:	f8cd 8018 	str.w	r8, [sp, #24]
 801342e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013436:	4b9c      	ldr	r3, [pc, #624]	@ (80136a8 <_printf_float+0x2c8>)
 8013438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801343c:	f7ed fb9e 	bl	8000b7c <__aeabi_dcmpun>
 8013440:	bb70      	cbnz	r0, 80134a0 <_printf_float+0xc0>
 8013442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013446:	4b98      	ldr	r3, [pc, #608]	@ (80136a8 <_printf_float+0x2c8>)
 8013448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801344c:	f7ed fb78 	bl	8000b40 <__aeabi_dcmple>
 8013450:	bb30      	cbnz	r0, 80134a0 <_printf_float+0xc0>
 8013452:	2200      	movs	r2, #0
 8013454:	2300      	movs	r3, #0
 8013456:	4640      	mov	r0, r8
 8013458:	4649      	mov	r1, r9
 801345a:	f7ed fb67 	bl	8000b2c <__aeabi_dcmplt>
 801345e:	b110      	cbz	r0, 8013466 <_printf_float+0x86>
 8013460:	232d      	movs	r3, #45	@ 0x2d
 8013462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013466:	4a91      	ldr	r2, [pc, #580]	@ (80136ac <_printf_float+0x2cc>)
 8013468:	4b91      	ldr	r3, [pc, #580]	@ (80136b0 <_printf_float+0x2d0>)
 801346a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801346e:	bf94      	ite	ls
 8013470:	4690      	movls	r8, r2
 8013472:	4698      	movhi	r8, r3
 8013474:	2303      	movs	r3, #3
 8013476:	6123      	str	r3, [r4, #16]
 8013478:	f02b 0304 	bic.w	r3, fp, #4
 801347c:	6023      	str	r3, [r4, #0]
 801347e:	f04f 0900 	mov.w	r9, #0
 8013482:	9700      	str	r7, [sp, #0]
 8013484:	4633      	mov	r3, r6
 8013486:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013488:	4621      	mov	r1, r4
 801348a:	4628      	mov	r0, r5
 801348c:	f000 f9d2 	bl	8013834 <_printf_common>
 8013490:	3001      	adds	r0, #1
 8013492:	f040 808d 	bne.w	80135b0 <_printf_float+0x1d0>
 8013496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801349a:	b00d      	add	sp, #52	@ 0x34
 801349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134a0:	4642      	mov	r2, r8
 80134a2:	464b      	mov	r3, r9
 80134a4:	4640      	mov	r0, r8
 80134a6:	4649      	mov	r1, r9
 80134a8:	f7ed fb68 	bl	8000b7c <__aeabi_dcmpun>
 80134ac:	b140      	cbz	r0, 80134c0 <_printf_float+0xe0>
 80134ae:	464b      	mov	r3, r9
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	bfbc      	itt	lt
 80134b4:	232d      	movlt	r3, #45	@ 0x2d
 80134b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80134ba:	4a7e      	ldr	r2, [pc, #504]	@ (80136b4 <_printf_float+0x2d4>)
 80134bc:	4b7e      	ldr	r3, [pc, #504]	@ (80136b8 <_printf_float+0x2d8>)
 80134be:	e7d4      	b.n	801346a <_printf_float+0x8a>
 80134c0:	6863      	ldr	r3, [r4, #4]
 80134c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80134c6:	9206      	str	r2, [sp, #24]
 80134c8:	1c5a      	adds	r2, r3, #1
 80134ca:	d13b      	bne.n	8013544 <_printf_float+0x164>
 80134cc:	2306      	movs	r3, #6
 80134ce:	6063      	str	r3, [r4, #4]
 80134d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80134d4:	2300      	movs	r3, #0
 80134d6:	6022      	str	r2, [r4, #0]
 80134d8:	9303      	str	r3, [sp, #12]
 80134da:	ab0a      	add	r3, sp, #40	@ 0x28
 80134dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80134e0:	ab09      	add	r3, sp, #36	@ 0x24
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	6861      	ldr	r1, [r4, #4]
 80134e6:	ec49 8b10 	vmov	d0, r8, r9
 80134ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80134ee:	4628      	mov	r0, r5
 80134f0:	f7ff fed6 	bl	80132a0 <__cvt>
 80134f4:	9b06      	ldr	r3, [sp, #24]
 80134f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80134f8:	2b47      	cmp	r3, #71	@ 0x47
 80134fa:	4680      	mov	r8, r0
 80134fc:	d129      	bne.n	8013552 <_printf_float+0x172>
 80134fe:	1cc8      	adds	r0, r1, #3
 8013500:	db02      	blt.n	8013508 <_printf_float+0x128>
 8013502:	6863      	ldr	r3, [r4, #4]
 8013504:	4299      	cmp	r1, r3
 8013506:	dd41      	ble.n	801358c <_printf_float+0x1ac>
 8013508:	f1aa 0a02 	sub.w	sl, sl, #2
 801350c:	fa5f fa8a 	uxtb.w	sl, sl
 8013510:	3901      	subs	r1, #1
 8013512:	4652      	mov	r2, sl
 8013514:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013518:	9109      	str	r1, [sp, #36]	@ 0x24
 801351a:	f7ff ff26 	bl	801336a <__exponent>
 801351e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013520:	1813      	adds	r3, r2, r0
 8013522:	2a01      	cmp	r2, #1
 8013524:	4681      	mov	r9, r0
 8013526:	6123      	str	r3, [r4, #16]
 8013528:	dc02      	bgt.n	8013530 <_printf_float+0x150>
 801352a:	6822      	ldr	r2, [r4, #0]
 801352c:	07d2      	lsls	r2, r2, #31
 801352e:	d501      	bpl.n	8013534 <_printf_float+0x154>
 8013530:	3301      	adds	r3, #1
 8013532:	6123      	str	r3, [r4, #16]
 8013534:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013538:	2b00      	cmp	r3, #0
 801353a:	d0a2      	beq.n	8013482 <_printf_float+0xa2>
 801353c:	232d      	movs	r3, #45	@ 0x2d
 801353e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013542:	e79e      	b.n	8013482 <_printf_float+0xa2>
 8013544:	9a06      	ldr	r2, [sp, #24]
 8013546:	2a47      	cmp	r2, #71	@ 0x47
 8013548:	d1c2      	bne.n	80134d0 <_printf_float+0xf0>
 801354a:	2b00      	cmp	r3, #0
 801354c:	d1c0      	bne.n	80134d0 <_printf_float+0xf0>
 801354e:	2301      	movs	r3, #1
 8013550:	e7bd      	b.n	80134ce <_printf_float+0xee>
 8013552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013556:	d9db      	bls.n	8013510 <_printf_float+0x130>
 8013558:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801355c:	d118      	bne.n	8013590 <_printf_float+0x1b0>
 801355e:	2900      	cmp	r1, #0
 8013560:	6863      	ldr	r3, [r4, #4]
 8013562:	dd0b      	ble.n	801357c <_printf_float+0x19c>
 8013564:	6121      	str	r1, [r4, #16]
 8013566:	b913      	cbnz	r3, 801356e <_printf_float+0x18e>
 8013568:	6822      	ldr	r2, [r4, #0]
 801356a:	07d0      	lsls	r0, r2, #31
 801356c:	d502      	bpl.n	8013574 <_printf_float+0x194>
 801356e:	3301      	adds	r3, #1
 8013570:	440b      	add	r3, r1
 8013572:	6123      	str	r3, [r4, #16]
 8013574:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013576:	f04f 0900 	mov.w	r9, #0
 801357a:	e7db      	b.n	8013534 <_printf_float+0x154>
 801357c:	b913      	cbnz	r3, 8013584 <_printf_float+0x1a4>
 801357e:	6822      	ldr	r2, [r4, #0]
 8013580:	07d2      	lsls	r2, r2, #31
 8013582:	d501      	bpl.n	8013588 <_printf_float+0x1a8>
 8013584:	3302      	adds	r3, #2
 8013586:	e7f4      	b.n	8013572 <_printf_float+0x192>
 8013588:	2301      	movs	r3, #1
 801358a:	e7f2      	b.n	8013572 <_printf_float+0x192>
 801358c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013592:	4299      	cmp	r1, r3
 8013594:	db05      	blt.n	80135a2 <_printf_float+0x1c2>
 8013596:	6823      	ldr	r3, [r4, #0]
 8013598:	6121      	str	r1, [r4, #16]
 801359a:	07d8      	lsls	r0, r3, #31
 801359c:	d5ea      	bpl.n	8013574 <_printf_float+0x194>
 801359e:	1c4b      	adds	r3, r1, #1
 80135a0:	e7e7      	b.n	8013572 <_printf_float+0x192>
 80135a2:	2900      	cmp	r1, #0
 80135a4:	bfd4      	ite	le
 80135a6:	f1c1 0202 	rsble	r2, r1, #2
 80135aa:	2201      	movgt	r2, #1
 80135ac:	4413      	add	r3, r2
 80135ae:	e7e0      	b.n	8013572 <_printf_float+0x192>
 80135b0:	6823      	ldr	r3, [r4, #0]
 80135b2:	055a      	lsls	r2, r3, #21
 80135b4:	d407      	bmi.n	80135c6 <_printf_float+0x1e6>
 80135b6:	6923      	ldr	r3, [r4, #16]
 80135b8:	4642      	mov	r2, r8
 80135ba:	4631      	mov	r1, r6
 80135bc:	4628      	mov	r0, r5
 80135be:	47b8      	blx	r7
 80135c0:	3001      	adds	r0, #1
 80135c2:	d12b      	bne.n	801361c <_printf_float+0x23c>
 80135c4:	e767      	b.n	8013496 <_printf_float+0xb6>
 80135c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80135ca:	f240 80dd 	bls.w	8013788 <_printf_float+0x3a8>
 80135ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80135d2:	2200      	movs	r2, #0
 80135d4:	2300      	movs	r3, #0
 80135d6:	f7ed fa9f 	bl	8000b18 <__aeabi_dcmpeq>
 80135da:	2800      	cmp	r0, #0
 80135dc:	d033      	beq.n	8013646 <_printf_float+0x266>
 80135de:	4a37      	ldr	r2, [pc, #220]	@ (80136bc <_printf_float+0x2dc>)
 80135e0:	2301      	movs	r3, #1
 80135e2:	4631      	mov	r1, r6
 80135e4:	4628      	mov	r0, r5
 80135e6:	47b8      	blx	r7
 80135e8:	3001      	adds	r0, #1
 80135ea:	f43f af54 	beq.w	8013496 <_printf_float+0xb6>
 80135ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80135f2:	4543      	cmp	r3, r8
 80135f4:	db02      	blt.n	80135fc <_printf_float+0x21c>
 80135f6:	6823      	ldr	r3, [r4, #0]
 80135f8:	07d8      	lsls	r0, r3, #31
 80135fa:	d50f      	bpl.n	801361c <_printf_float+0x23c>
 80135fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013600:	4631      	mov	r1, r6
 8013602:	4628      	mov	r0, r5
 8013604:	47b8      	blx	r7
 8013606:	3001      	adds	r0, #1
 8013608:	f43f af45 	beq.w	8013496 <_printf_float+0xb6>
 801360c:	f04f 0900 	mov.w	r9, #0
 8013610:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013614:	f104 0a1a 	add.w	sl, r4, #26
 8013618:	45c8      	cmp	r8, r9
 801361a:	dc09      	bgt.n	8013630 <_printf_float+0x250>
 801361c:	6823      	ldr	r3, [r4, #0]
 801361e:	079b      	lsls	r3, r3, #30
 8013620:	f100 8103 	bmi.w	801382a <_printf_float+0x44a>
 8013624:	68e0      	ldr	r0, [r4, #12]
 8013626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013628:	4298      	cmp	r0, r3
 801362a:	bfb8      	it	lt
 801362c:	4618      	movlt	r0, r3
 801362e:	e734      	b.n	801349a <_printf_float+0xba>
 8013630:	2301      	movs	r3, #1
 8013632:	4652      	mov	r2, sl
 8013634:	4631      	mov	r1, r6
 8013636:	4628      	mov	r0, r5
 8013638:	47b8      	blx	r7
 801363a:	3001      	adds	r0, #1
 801363c:	f43f af2b 	beq.w	8013496 <_printf_float+0xb6>
 8013640:	f109 0901 	add.w	r9, r9, #1
 8013644:	e7e8      	b.n	8013618 <_printf_float+0x238>
 8013646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013648:	2b00      	cmp	r3, #0
 801364a:	dc39      	bgt.n	80136c0 <_printf_float+0x2e0>
 801364c:	4a1b      	ldr	r2, [pc, #108]	@ (80136bc <_printf_float+0x2dc>)
 801364e:	2301      	movs	r3, #1
 8013650:	4631      	mov	r1, r6
 8013652:	4628      	mov	r0, r5
 8013654:	47b8      	blx	r7
 8013656:	3001      	adds	r0, #1
 8013658:	f43f af1d 	beq.w	8013496 <_printf_float+0xb6>
 801365c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013660:	ea59 0303 	orrs.w	r3, r9, r3
 8013664:	d102      	bne.n	801366c <_printf_float+0x28c>
 8013666:	6823      	ldr	r3, [r4, #0]
 8013668:	07d9      	lsls	r1, r3, #31
 801366a:	d5d7      	bpl.n	801361c <_printf_float+0x23c>
 801366c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013670:	4631      	mov	r1, r6
 8013672:	4628      	mov	r0, r5
 8013674:	47b8      	blx	r7
 8013676:	3001      	adds	r0, #1
 8013678:	f43f af0d 	beq.w	8013496 <_printf_float+0xb6>
 801367c:	f04f 0a00 	mov.w	sl, #0
 8013680:	f104 0b1a 	add.w	fp, r4, #26
 8013684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013686:	425b      	negs	r3, r3
 8013688:	4553      	cmp	r3, sl
 801368a:	dc01      	bgt.n	8013690 <_printf_float+0x2b0>
 801368c:	464b      	mov	r3, r9
 801368e:	e793      	b.n	80135b8 <_printf_float+0x1d8>
 8013690:	2301      	movs	r3, #1
 8013692:	465a      	mov	r2, fp
 8013694:	4631      	mov	r1, r6
 8013696:	4628      	mov	r0, r5
 8013698:	47b8      	blx	r7
 801369a:	3001      	adds	r0, #1
 801369c:	f43f aefb 	beq.w	8013496 <_printf_float+0xb6>
 80136a0:	f10a 0a01 	add.w	sl, sl, #1
 80136a4:	e7ee      	b.n	8013684 <_printf_float+0x2a4>
 80136a6:	bf00      	nop
 80136a8:	7fefffff 	.word	0x7fefffff
 80136ac:	0801672c 	.word	0x0801672c
 80136b0:	08016730 	.word	0x08016730
 80136b4:	08016734 	.word	0x08016734
 80136b8:	08016738 	.word	0x08016738
 80136bc:	0801673c 	.word	0x0801673c
 80136c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80136c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80136c6:	4553      	cmp	r3, sl
 80136c8:	bfa8      	it	ge
 80136ca:	4653      	movge	r3, sl
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	4699      	mov	r9, r3
 80136d0:	dc36      	bgt.n	8013740 <_printf_float+0x360>
 80136d2:	f04f 0b00 	mov.w	fp, #0
 80136d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136da:	f104 021a 	add.w	r2, r4, #26
 80136de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80136e0:	9306      	str	r3, [sp, #24]
 80136e2:	eba3 0309 	sub.w	r3, r3, r9
 80136e6:	455b      	cmp	r3, fp
 80136e8:	dc31      	bgt.n	801374e <_printf_float+0x36e>
 80136ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136ec:	459a      	cmp	sl, r3
 80136ee:	dc3a      	bgt.n	8013766 <_printf_float+0x386>
 80136f0:	6823      	ldr	r3, [r4, #0]
 80136f2:	07da      	lsls	r2, r3, #31
 80136f4:	d437      	bmi.n	8013766 <_printf_float+0x386>
 80136f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136f8:	ebaa 0903 	sub.w	r9, sl, r3
 80136fc:	9b06      	ldr	r3, [sp, #24]
 80136fe:	ebaa 0303 	sub.w	r3, sl, r3
 8013702:	4599      	cmp	r9, r3
 8013704:	bfa8      	it	ge
 8013706:	4699      	movge	r9, r3
 8013708:	f1b9 0f00 	cmp.w	r9, #0
 801370c:	dc33      	bgt.n	8013776 <_printf_float+0x396>
 801370e:	f04f 0800 	mov.w	r8, #0
 8013712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013716:	f104 0b1a 	add.w	fp, r4, #26
 801371a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801371c:	ebaa 0303 	sub.w	r3, sl, r3
 8013720:	eba3 0309 	sub.w	r3, r3, r9
 8013724:	4543      	cmp	r3, r8
 8013726:	f77f af79 	ble.w	801361c <_printf_float+0x23c>
 801372a:	2301      	movs	r3, #1
 801372c:	465a      	mov	r2, fp
 801372e:	4631      	mov	r1, r6
 8013730:	4628      	mov	r0, r5
 8013732:	47b8      	blx	r7
 8013734:	3001      	adds	r0, #1
 8013736:	f43f aeae 	beq.w	8013496 <_printf_float+0xb6>
 801373a:	f108 0801 	add.w	r8, r8, #1
 801373e:	e7ec      	b.n	801371a <_printf_float+0x33a>
 8013740:	4642      	mov	r2, r8
 8013742:	4631      	mov	r1, r6
 8013744:	4628      	mov	r0, r5
 8013746:	47b8      	blx	r7
 8013748:	3001      	adds	r0, #1
 801374a:	d1c2      	bne.n	80136d2 <_printf_float+0x2f2>
 801374c:	e6a3      	b.n	8013496 <_printf_float+0xb6>
 801374e:	2301      	movs	r3, #1
 8013750:	4631      	mov	r1, r6
 8013752:	4628      	mov	r0, r5
 8013754:	9206      	str	r2, [sp, #24]
 8013756:	47b8      	blx	r7
 8013758:	3001      	adds	r0, #1
 801375a:	f43f ae9c 	beq.w	8013496 <_printf_float+0xb6>
 801375e:	9a06      	ldr	r2, [sp, #24]
 8013760:	f10b 0b01 	add.w	fp, fp, #1
 8013764:	e7bb      	b.n	80136de <_printf_float+0x2fe>
 8013766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801376a:	4631      	mov	r1, r6
 801376c:	4628      	mov	r0, r5
 801376e:	47b8      	blx	r7
 8013770:	3001      	adds	r0, #1
 8013772:	d1c0      	bne.n	80136f6 <_printf_float+0x316>
 8013774:	e68f      	b.n	8013496 <_printf_float+0xb6>
 8013776:	9a06      	ldr	r2, [sp, #24]
 8013778:	464b      	mov	r3, r9
 801377a:	4442      	add	r2, r8
 801377c:	4631      	mov	r1, r6
 801377e:	4628      	mov	r0, r5
 8013780:	47b8      	blx	r7
 8013782:	3001      	adds	r0, #1
 8013784:	d1c3      	bne.n	801370e <_printf_float+0x32e>
 8013786:	e686      	b.n	8013496 <_printf_float+0xb6>
 8013788:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801378c:	f1ba 0f01 	cmp.w	sl, #1
 8013790:	dc01      	bgt.n	8013796 <_printf_float+0x3b6>
 8013792:	07db      	lsls	r3, r3, #31
 8013794:	d536      	bpl.n	8013804 <_printf_float+0x424>
 8013796:	2301      	movs	r3, #1
 8013798:	4642      	mov	r2, r8
 801379a:	4631      	mov	r1, r6
 801379c:	4628      	mov	r0, r5
 801379e:	47b8      	blx	r7
 80137a0:	3001      	adds	r0, #1
 80137a2:	f43f ae78 	beq.w	8013496 <_printf_float+0xb6>
 80137a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137aa:	4631      	mov	r1, r6
 80137ac:	4628      	mov	r0, r5
 80137ae:	47b8      	blx	r7
 80137b0:	3001      	adds	r0, #1
 80137b2:	f43f ae70 	beq.w	8013496 <_printf_float+0xb6>
 80137b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80137ba:	2200      	movs	r2, #0
 80137bc:	2300      	movs	r3, #0
 80137be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80137c2:	f7ed f9a9 	bl	8000b18 <__aeabi_dcmpeq>
 80137c6:	b9c0      	cbnz	r0, 80137fa <_printf_float+0x41a>
 80137c8:	4653      	mov	r3, sl
 80137ca:	f108 0201 	add.w	r2, r8, #1
 80137ce:	4631      	mov	r1, r6
 80137d0:	4628      	mov	r0, r5
 80137d2:	47b8      	blx	r7
 80137d4:	3001      	adds	r0, #1
 80137d6:	d10c      	bne.n	80137f2 <_printf_float+0x412>
 80137d8:	e65d      	b.n	8013496 <_printf_float+0xb6>
 80137da:	2301      	movs	r3, #1
 80137dc:	465a      	mov	r2, fp
 80137de:	4631      	mov	r1, r6
 80137e0:	4628      	mov	r0, r5
 80137e2:	47b8      	blx	r7
 80137e4:	3001      	adds	r0, #1
 80137e6:	f43f ae56 	beq.w	8013496 <_printf_float+0xb6>
 80137ea:	f108 0801 	add.w	r8, r8, #1
 80137ee:	45d0      	cmp	r8, sl
 80137f0:	dbf3      	blt.n	80137da <_printf_float+0x3fa>
 80137f2:	464b      	mov	r3, r9
 80137f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80137f8:	e6df      	b.n	80135ba <_printf_float+0x1da>
 80137fa:	f04f 0800 	mov.w	r8, #0
 80137fe:	f104 0b1a 	add.w	fp, r4, #26
 8013802:	e7f4      	b.n	80137ee <_printf_float+0x40e>
 8013804:	2301      	movs	r3, #1
 8013806:	4642      	mov	r2, r8
 8013808:	e7e1      	b.n	80137ce <_printf_float+0x3ee>
 801380a:	2301      	movs	r3, #1
 801380c:	464a      	mov	r2, r9
 801380e:	4631      	mov	r1, r6
 8013810:	4628      	mov	r0, r5
 8013812:	47b8      	blx	r7
 8013814:	3001      	adds	r0, #1
 8013816:	f43f ae3e 	beq.w	8013496 <_printf_float+0xb6>
 801381a:	f108 0801 	add.w	r8, r8, #1
 801381e:	68e3      	ldr	r3, [r4, #12]
 8013820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013822:	1a5b      	subs	r3, r3, r1
 8013824:	4543      	cmp	r3, r8
 8013826:	dcf0      	bgt.n	801380a <_printf_float+0x42a>
 8013828:	e6fc      	b.n	8013624 <_printf_float+0x244>
 801382a:	f04f 0800 	mov.w	r8, #0
 801382e:	f104 0919 	add.w	r9, r4, #25
 8013832:	e7f4      	b.n	801381e <_printf_float+0x43e>

08013834 <_printf_common>:
 8013834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013838:	4616      	mov	r6, r2
 801383a:	4698      	mov	r8, r3
 801383c:	688a      	ldr	r2, [r1, #8]
 801383e:	690b      	ldr	r3, [r1, #16]
 8013840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013844:	4293      	cmp	r3, r2
 8013846:	bfb8      	it	lt
 8013848:	4613      	movlt	r3, r2
 801384a:	6033      	str	r3, [r6, #0]
 801384c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013850:	4607      	mov	r7, r0
 8013852:	460c      	mov	r4, r1
 8013854:	b10a      	cbz	r2, 801385a <_printf_common+0x26>
 8013856:	3301      	adds	r3, #1
 8013858:	6033      	str	r3, [r6, #0]
 801385a:	6823      	ldr	r3, [r4, #0]
 801385c:	0699      	lsls	r1, r3, #26
 801385e:	bf42      	ittt	mi
 8013860:	6833      	ldrmi	r3, [r6, #0]
 8013862:	3302      	addmi	r3, #2
 8013864:	6033      	strmi	r3, [r6, #0]
 8013866:	6825      	ldr	r5, [r4, #0]
 8013868:	f015 0506 	ands.w	r5, r5, #6
 801386c:	d106      	bne.n	801387c <_printf_common+0x48>
 801386e:	f104 0a19 	add.w	sl, r4, #25
 8013872:	68e3      	ldr	r3, [r4, #12]
 8013874:	6832      	ldr	r2, [r6, #0]
 8013876:	1a9b      	subs	r3, r3, r2
 8013878:	42ab      	cmp	r3, r5
 801387a:	dc26      	bgt.n	80138ca <_printf_common+0x96>
 801387c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013880:	6822      	ldr	r2, [r4, #0]
 8013882:	3b00      	subs	r3, #0
 8013884:	bf18      	it	ne
 8013886:	2301      	movne	r3, #1
 8013888:	0692      	lsls	r2, r2, #26
 801388a:	d42b      	bmi.n	80138e4 <_printf_common+0xb0>
 801388c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013890:	4641      	mov	r1, r8
 8013892:	4638      	mov	r0, r7
 8013894:	47c8      	blx	r9
 8013896:	3001      	adds	r0, #1
 8013898:	d01e      	beq.n	80138d8 <_printf_common+0xa4>
 801389a:	6823      	ldr	r3, [r4, #0]
 801389c:	6922      	ldr	r2, [r4, #16]
 801389e:	f003 0306 	and.w	r3, r3, #6
 80138a2:	2b04      	cmp	r3, #4
 80138a4:	bf02      	ittt	eq
 80138a6:	68e5      	ldreq	r5, [r4, #12]
 80138a8:	6833      	ldreq	r3, [r6, #0]
 80138aa:	1aed      	subeq	r5, r5, r3
 80138ac:	68a3      	ldr	r3, [r4, #8]
 80138ae:	bf0c      	ite	eq
 80138b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138b4:	2500      	movne	r5, #0
 80138b6:	4293      	cmp	r3, r2
 80138b8:	bfc4      	itt	gt
 80138ba:	1a9b      	subgt	r3, r3, r2
 80138bc:	18ed      	addgt	r5, r5, r3
 80138be:	2600      	movs	r6, #0
 80138c0:	341a      	adds	r4, #26
 80138c2:	42b5      	cmp	r5, r6
 80138c4:	d11a      	bne.n	80138fc <_printf_common+0xc8>
 80138c6:	2000      	movs	r0, #0
 80138c8:	e008      	b.n	80138dc <_printf_common+0xa8>
 80138ca:	2301      	movs	r3, #1
 80138cc:	4652      	mov	r2, sl
 80138ce:	4641      	mov	r1, r8
 80138d0:	4638      	mov	r0, r7
 80138d2:	47c8      	blx	r9
 80138d4:	3001      	adds	r0, #1
 80138d6:	d103      	bne.n	80138e0 <_printf_common+0xac>
 80138d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e0:	3501      	adds	r5, #1
 80138e2:	e7c6      	b.n	8013872 <_printf_common+0x3e>
 80138e4:	18e1      	adds	r1, r4, r3
 80138e6:	1c5a      	adds	r2, r3, #1
 80138e8:	2030      	movs	r0, #48	@ 0x30
 80138ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80138ee:	4422      	add	r2, r4
 80138f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80138f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80138f8:	3302      	adds	r3, #2
 80138fa:	e7c7      	b.n	801388c <_printf_common+0x58>
 80138fc:	2301      	movs	r3, #1
 80138fe:	4622      	mov	r2, r4
 8013900:	4641      	mov	r1, r8
 8013902:	4638      	mov	r0, r7
 8013904:	47c8      	blx	r9
 8013906:	3001      	adds	r0, #1
 8013908:	d0e6      	beq.n	80138d8 <_printf_common+0xa4>
 801390a:	3601      	adds	r6, #1
 801390c:	e7d9      	b.n	80138c2 <_printf_common+0x8e>
	...

08013910 <_printf_i>:
 8013910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013914:	7e0f      	ldrb	r7, [r1, #24]
 8013916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013918:	2f78      	cmp	r7, #120	@ 0x78
 801391a:	4691      	mov	r9, r2
 801391c:	4680      	mov	r8, r0
 801391e:	460c      	mov	r4, r1
 8013920:	469a      	mov	sl, r3
 8013922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013926:	d807      	bhi.n	8013938 <_printf_i+0x28>
 8013928:	2f62      	cmp	r7, #98	@ 0x62
 801392a:	d80a      	bhi.n	8013942 <_printf_i+0x32>
 801392c:	2f00      	cmp	r7, #0
 801392e:	f000 80d2 	beq.w	8013ad6 <_printf_i+0x1c6>
 8013932:	2f58      	cmp	r7, #88	@ 0x58
 8013934:	f000 80b9 	beq.w	8013aaa <_printf_i+0x19a>
 8013938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801393c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013940:	e03a      	b.n	80139b8 <_printf_i+0xa8>
 8013942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013946:	2b15      	cmp	r3, #21
 8013948:	d8f6      	bhi.n	8013938 <_printf_i+0x28>
 801394a:	a101      	add	r1, pc, #4	@ (adr r1, 8013950 <_printf_i+0x40>)
 801394c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013950:	080139a9 	.word	0x080139a9
 8013954:	080139bd 	.word	0x080139bd
 8013958:	08013939 	.word	0x08013939
 801395c:	08013939 	.word	0x08013939
 8013960:	08013939 	.word	0x08013939
 8013964:	08013939 	.word	0x08013939
 8013968:	080139bd 	.word	0x080139bd
 801396c:	08013939 	.word	0x08013939
 8013970:	08013939 	.word	0x08013939
 8013974:	08013939 	.word	0x08013939
 8013978:	08013939 	.word	0x08013939
 801397c:	08013abd 	.word	0x08013abd
 8013980:	080139e7 	.word	0x080139e7
 8013984:	08013a77 	.word	0x08013a77
 8013988:	08013939 	.word	0x08013939
 801398c:	08013939 	.word	0x08013939
 8013990:	08013adf 	.word	0x08013adf
 8013994:	08013939 	.word	0x08013939
 8013998:	080139e7 	.word	0x080139e7
 801399c:	08013939 	.word	0x08013939
 80139a0:	08013939 	.word	0x08013939
 80139a4:	08013a7f 	.word	0x08013a7f
 80139a8:	6833      	ldr	r3, [r6, #0]
 80139aa:	1d1a      	adds	r2, r3, #4
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	6032      	str	r2, [r6, #0]
 80139b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80139b8:	2301      	movs	r3, #1
 80139ba:	e09d      	b.n	8013af8 <_printf_i+0x1e8>
 80139bc:	6833      	ldr	r3, [r6, #0]
 80139be:	6820      	ldr	r0, [r4, #0]
 80139c0:	1d19      	adds	r1, r3, #4
 80139c2:	6031      	str	r1, [r6, #0]
 80139c4:	0606      	lsls	r6, r0, #24
 80139c6:	d501      	bpl.n	80139cc <_printf_i+0xbc>
 80139c8:	681d      	ldr	r5, [r3, #0]
 80139ca:	e003      	b.n	80139d4 <_printf_i+0xc4>
 80139cc:	0645      	lsls	r5, r0, #25
 80139ce:	d5fb      	bpl.n	80139c8 <_printf_i+0xb8>
 80139d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80139d4:	2d00      	cmp	r5, #0
 80139d6:	da03      	bge.n	80139e0 <_printf_i+0xd0>
 80139d8:	232d      	movs	r3, #45	@ 0x2d
 80139da:	426d      	negs	r5, r5
 80139dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80139e0:	4859      	ldr	r0, [pc, #356]	@ (8013b48 <_printf_i+0x238>)
 80139e2:	230a      	movs	r3, #10
 80139e4:	e011      	b.n	8013a0a <_printf_i+0xfa>
 80139e6:	6821      	ldr	r1, [r4, #0]
 80139e8:	6833      	ldr	r3, [r6, #0]
 80139ea:	0608      	lsls	r0, r1, #24
 80139ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80139f0:	d402      	bmi.n	80139f8 <_printf_i+0xe8>
 80139f2:	0649      	lsls	r1, r1, #25
 80139f4:	bf48      	it	mi
 80139f6:	b2ad      	uxthmi	r5, r5
 80139f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80139fa:	4853      	ldr	r0, [pc, #332]	@ (8013b48 <_printf_i+0x238>)
 80139fc:	6033      	str	r3, [r6, #0]
 80139fe:	bf14      	ite	ne
 8013a00:	230a      	movne	r3, #10
 8013a02:	2308      	moveq	r3, #8
 8013a04:	2100      	movs	r1, #0
 8013a06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013a0a:	6866      	ldr	r6, [r4, #4]
 8013a0c:	60a6      	str	r6, [r4, #8]
 8013a0e:	2e00      	cmp	r6, #0
 8013a10:	bfa2      	ittt	ge
 8013a12:	6821      	ldrge	r1, [r4, #0]
 8013a14:	f021 0104 	bicge.w	r1, r1, #4
 8013a18:	6021      	strge	r1, [r4, #0]
 8013a1a:	b90d      	cbnz	r5, 8013a20 <_printf_i+0x110>
 8013a1c:	2e00      	cmp	r6, #0
 8013a1e:	d04b      	beq.n	8013ab8 <_printf_i+0x1a8>
 8013a20:	4616      	mov	r6, r2
 8013a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a26:	fb03 5711 	mls	r7, r3, r1, r5
 8013a2a:	5dc7      	ldrb	r7, [r0, r7]
 8013a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a30:	462f      	mov	r7, r5
 8013a32:	42bb      	cmp	r3, r7
 8013a34:	460d      	mov	r5, r1
 8013a36:	d9f4      	bls.n	8013a22 <_printf_i+0x112>
 8013a38:	2b08      	cmp	r3, #8
 8013a3a:	d10b      	bne.n	8013a54 <_printf_i+0x144>
 8013a3c:	6823      	ldr	r3, [r4, #0]
 8013a3e:	07df      	lsls	r7, r3, #31
 8013a40:	d508      	bpl.n	8013a54 <_printf_i+0x144>
 8013a42:	6923      	ldr	r3, [r4, #16]
 8013a44:	6861      	ldr	r1, [r4, #4]
 8013a46:	4299      	cmp	r1, r3
 8013a48:	bfde      	ittt	le
 8013a4a:	2330      	movle	r3, #48	@ 0x30
 8013a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013a54:	1b92      	subs	r2, r2, r6
 8013a56:	6122      	str	r2, [r4, #16]
 8013a58:	f8cd a000 	str.w	sl, [sp]
 8013a5c:	464b      	mov	r3, r9
 8013a5e:	aa03      	add	r2, sp, #12
 8013a60:	4621      	mov	r1, r4
 8013a62:	4640      	mov	r0, r8
 8013a64:	f7ff fee6 	bl	8013834 <_printf_common>
 8013a68:	3001      	adds	r0, #1
 8013a6a:	d14a      	bne.n	8013b02 <_printf_i+0x1f2>
 8013a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a70:	b004      	add	sp, #16
 8013a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	f043 0320 	orr.w	r3, r3, #32
 8013a7c:	6023      	str	r3, [r4, #0]
 8013a7e:	4833      	ldr	r0, [pc, #204]	@ (8013b4c <_printf_i+0x23c>)
 8013a80:	2778      	movs	r7, #120	@ 0x78
 8013a82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013a86:	6823      	ldr	r3, [r4, #0]
 8013a88:	6831      	ldr	r1, [r6, #0]
 8013a8a:	061f      	lsls	r7, r3, #24
 8013a8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8013a90:	d402      	bmi.n	8013a98 <_printf_i+0x188>
 8013a92:	065f      	lsls	r7, r3, #25
 8013a94:	bf48      	it	mi
 8013a96:	b2ad      	uxthmi	r5, r5
 8013a98:	6031      	str	r1, [r6, #0]
 8013a9a:	07d9      	lsls	r1, r3, #31
 8013a9c:	bf44      	itt	mi
 8013a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8013aa2:	6023      	strmi	r3, [r4, #0]
 8013aa4:	b11d      	cbz	r5, 8013aae <_printf_i+0x19e>
 8013aa6:	2310      	movs	r3, #16
 8013aa8:	e7ac      	b.n	8013a04 <_printf_i+0xf4>
 8013aaa:	4827      	ldr	r0, [pc, #156]	@ (8013b48 <_printf_i+0x238>)
 8013aac:	e7e9      	b.n	8013a82 <_printf_i+0x172>
 8013aae:	6823      	ldr	r3, [r4, #0]
 8013ab0:	f023 0320 	bic.w	r3, r3, #32
 8013ab4:	6023      	str	r3, [r4, #0]
 8013ab6:	e7f6      	b.n	8013aa6 <_printf_i+0x196>
 8013ab8:	4616      	mov	r6, r2
 8013aba:	e7bd      	b.n	8013a38 <_printf_i+0x128>
 8013abc:	6833      	ldr	r3, [r6, #0]
 8013abe:	6825      	ldr	r5, [r4, #0]
 8013ac0:	6961      	ldr	r1, [r4, #20]
 8013ac2:	1d18      	adds	r0, r3, #4
 8013ac4:	6030      	str	r0, [r6, #0]
 8013ac6:	062e      	lsls	r6, r5, #24
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	d501      	bpl.n	8013ad0 <_printf_i+0x1c0>
 8013acc:	6019      	str	r1, [r3, #0]
 8013ace:	e002      	b.n	8013ad6 <_printf_i+0x1c6>
 8013ad0:	0668      	lsls	r0, r5, #25
 8013ad2:	d5fb      	bpl.n	8013acc <_printf_i+0x1bc>
 8013ad4:	8019      	strh	r1, [r3, #0]
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	6123      	str	r3, [r4, #16]
 8013ada:	4616      	mov	r6, r2
 8013adc:	e7bc      	b.n	8013a58 <_printf_i+0x148>
 8013ade:	6833      	ldr	r3, [r6, #0]
 8013ae0:	1d1a      	adds	r2, r3, #4
 8013ae2:	6032      	str	r2, [r6, #0]
 8013ae4:	681e      	ldr	r6, [r3, #0]
 8013ae6:	6862      	ldr	r2, [r4, #4]
 8013ae8:	2100      	movs	r1, #0
 8013aea:	4630      	mov	r0, r6
 8013aec:	f7ec fb98 	bl	8000220 <memchr>
 8013af0:	b108      	cbz	r0, 8013af6 <_printf_i+0x1e6>
 8013af2:	1b80      	subs	r0, r0, r6
 8013af4:	6060      	str	r0, [r4, #4]
 8013af6:	6863      	ldr	r3, [r4, #4]
 8013af8:	6123      	str	r3, [r4, #16]
 8013afa:	2300      	movs	r3, #0
 8013afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b00:	e7aa      	b.n	8013a58 <_printf_i+0x148>
 8013b02:	6923      	ldr	r3, [r4, #16]
 8013b04:	4632      	mov	r2, r6
 8013b06:	4649      	mov	r1, r9
 8013b08:	4640      	mov	r0, r8
 8013b0a:	47d0      	blx	sl
 8013b0c:	3001      	adds	r0, #1
 8013b0e:	d0ad      	beq.n	8013a6c <_printf_i+0x15c>
 8013b10:	6823      	ldr	r3, [r4, #0]
 8013b12:	079b      	lsls	r3, r3, #30
 8013b14:	d413      	bmi.n	8013b3e <_printf_i+0x22e>
 8013b16:	68e0      	ldr	r0, [r4, #12]
 8013b18:	9b03      	ldr	r3, [sp, #12]
 8013b1a:	4298      	cmp	r0, r3
 8013b1c:	bfb8      	it	lt
 8013b1e:	4618      	movlt	r0, r3
 8013b20:	e7a6      	b.n	8013a70 <_printf_i+0x160>
 8013b22:	2301      	movs	r3, #1
 8013b24:	4632      	mov	r2, r6
 8013b26:	4649      	mov	r1, r9
 8013b28:	4640      	mov	r0, r8
 8013b2a:	47d0      	blx	sl
 8013b2c:	3001      	adds	r0, #1
 8013b2e:	d09d      	beq.n	8013a6c <_printf_i+0x15c>
 8013b30:	3501      	adds	r5, #1
 8013b32:	68e3      	ldr	r3, [r4, #12]
 8013b34:	9903      	ldr	r1, [sp, #12]
 8013b36:	1a5b      	subs	r3, r3, r1
 8013b38:	42ab      	cmp	r3, r5
 8013b3a:	dcf2      	bgt.n	8013b22 <_printf_i+0x212>
 8013b3c:	e7eb      	b.n	8013b16 <_printf_i+0x206>
 8013b3e:	2500      	movs	r5, #0
 8013b40:	f104 0619 	add.w	r6, r4, #25
 8013b44:	e7f5      	b.n	8013b32 <_printf_i+0x222>
 8013b46:	bf00      	nop
 8013b48:	0801673e 	.word	0x0801673e
 8013b4c:	0801674f 	.word	0x0801674f

08013b50 <std>:
 8013b50:	2300      	movs	r3, #0
 8013b52:	b510      	push	{r4, lr}
 8013b54:	4604      	mov	r4, r0
 8013b56:	e9c0 3300 	strd	r3, r3, [r0]
 8013b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b5e:	6083      	str	r3, [r0, #8]
 8013b60:	8181      	strh	r1, [r0, #12]
 8013b62:	6643      	str	r3, [r0, #100]	@ 0x64
 8013b64:	81c2      	strh	r2, [r0, #14]
 8013b66:	6183      	str	r3, [r0, #24]
 8013b68:	4619      	mov	r1, r3
 8013b6a:	2208      	movs	r2, #8
 8013b6c:	305c      	adds	r0, #92	@ 0x5c
 8013b6e:	f000 f928 	bl	8013dc2 <memset>
 8013b72:	4b0d      	ldr	r3, [pc, #52]	@ (8013ba8 <std+0x58>)
 8013b74:	6263      	str	r3, [r4, #36]	@ 0x24
 8013b76:	4b0d      	ldr	r3, [pc, #52]	@ (8013bac <std+0x5c>)
 8013b78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8013bb0 <std+0x60>)
 8013b7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8013bb4 <std+0x64>)
 8013b80:	6323      	str	r3, [r4, #48]	@ 0x30
 8013b82:	4b0d      	ldr	r3, [pc, #52]	@ (8013bb8 <std+0x68>)
 8013b84:	6224      	str	r4, [r4, #32]
 8013b86:	429c      	cmp	r4, r3
 8013b88:	d006      	beq.n	8013b98 <std+0x48>
 8013b8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013b8e:	4294      	cmp	r4, r2
 8013b90:	d002      	beq.n	8013b98 <std+0x48>
 8013b92:	33d0      	adds	r3, #208	@ 0xd0
 8013b94:	429c      	cmp	r4, r3
 8013b96:	d105      	bne.n	8013ba4 <std+0x54>
 8013b98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ba0:	f000 ba36 	b.w	8014010 <__retarget_lock_init_recursive>
 8013ba4:	bd10      	pop	{r4, pc}
 8013ba6:	bf00      	nop
 8013ba8:	08013d3d 	.word	0x08013d3d
 8013bac:	08013d5f 	.word	0x08013d5f
 8013bb0:	08013d97 	.word	0x08013d97
 8013bb4:	08013dbb 	.word	0x08013dbb
 8013bb8:	200150a8 	.word	0x200150a8

08013bbc <stdio_exit_handler>:
 8013bbc:	4a02      	ldr	r2, [pc, #8]	@ (8013bc8 <stdio_exit_handler+0xc>)
 8013bbe:	4903      	ldr	r1, [pc, #12]	@ (8013bcc <stdio_exit_handler+0x10>)
 8013bc0:	4803      	ldr	r0, [pc, #12]	@ (8013bd0 <stdio_exit_handler+0x14>)
 8013bc2:	f000 b869 	b.w	8013c98 <_fwalk_sglue>
 8013bc6:	bf00      	nop
 8013bc8:	20000188 	.word	0x20000188
 8013bcc:	08015821 	.word	0x08015821
 8013bd0:	20000198 	.word	0x20000198

08013bd4 <cleanup_stdio>:
 8013bd4:	6841      	ldr	r1, [r0, #4]
 8013bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8013c08 <cleanup_stdio+0x34>)
 8013bd8:	4299      	cmp	r1, r3
 8013bda:	b510      	push	{r4, lr}
 8013bdc:	4604      	mov	r4, r0
 8013bde:	d001      	beq.n	8013be4 <cleanup_stdio+0x10>
 8013be0:	f001 fe1e 	bl	8015820 <_fflush_r>
 8013be4:	68a1      	ldr	r1, [r4, #8]
 8013be6:	4b09      	ldr	r3, [pc, #36]	@ (8013c0c <cleanup_stdio+0x38>)
 8013be8:	4299      	cmp	r1, r3
 8013bea:	d002      	beq.n	8013bf2 <cleanup_stdio+0x1e>
 8013bec:	4620      	mov	r0, r4
 8013bee:	f001 fe17 	bl	8015820 <_fflush_r>
 8013bf2:	68e1      	ldr	r1, [r4, #12]
 8013bf4:	4b06      	ldr	r3, [pc, #24]	@ (8013c10 <cleanup_stdio+0x3c>)
 8013bf6:	4299      	cmp	r1, r3
 8013bf8:	d004      	beq.n	8013c04 <cleanup_stdio+0x30>
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c00:	f001 be0e 	b.w	8015820 <_fflush_r>
 8013c04:	bd10      	pop	{r4, pc}
 8013c06:	bf00      	nop
 8013c08:	200150a8 	.word	0x200150a8
 8013c0c:	20015110 	.word	0x20015110
 8013c10:	20015178 	.word	0x20015178

08013c14 <global_stdio_init.part.0>:
 8013c14:	b510      	push	{r4, lr}
 8013c16:	4b0b      	ldr	r3, [pc, #44]	@ (8013c44 <global_stdio_init.part.0+0x30>)
 8013c18:	4c0b      	ldr	r4, [pc, #44]	@ (8013c48 <global_stdio_init.part.0+0x34>)
 8013c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8013c4c <global_stdio_init.part.0+0x38>)
 8013c1c:	601a      	str	r2, [r3, #0]
 8013c1e:	4620      	mov	r0, r4
 8013c20:	2200      	movs	r2, #0
 8013c22:	2104      	movs	r1, #4
 8013c24:	f7ff ff94 	bl	8013b50 <std>
 8013c28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	2109      	movs	r1, #9
 8013c30:	f7ff ff8e 	bl	8013b50 <std>
 8013c34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013c38:	2202      	movs	r2, #2
 8013c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c3e:	2112      	movs	r1, #18
 8013c40:	f7ff bf86 	b.w	8013b50 <std>
 8013c44:	200151e0 	.word	0x200151e0
 8013c48:	200150a8 	.word	0x200150a8
 8013c4c:	08013bbd 	.word	0x08013bbd

08013c50 <__sfp_lock_acquire>:
 8013c50:	4801      	ldr	r0, [pc, #4]	@ (8013c58 <__sfp_lock_acquire+0x8>)
 8013c52:	f000 b9de 	b.w	8014012 <__retarget_lock_acquire_recursive>
 8013c56:	bf00      	nop
 8013c58:	200151e9 	.word	0x200151e9

08013c5c <__sfp_lock_release>:
 8013c5c:	4801      	ldr	r0, [pc, #4]	@ (8013c64 <__sfp_lock_release+0x8>)
 8013c5e:	f000 b9d9 	b.w	8014014 <__retarget_lock_release_recursive>
 8013c62:	bf00      	nop
 8013c64:	200151e9 	.word	0x200151e9

08013c68 <__sinit>:
 8013c68:	b510      	push	{r4, lr}
 8013c6a:	4604      	mov	r4, r0
 8013c6c:	f7ff fff0 	bl	8013c50 <__sfp_lock_acquire>
 8013c70:	6a23      	ldr	r3, [r4, #32]
 8013c72:	b11b      	cbz	r3, 8013c7c <__sinit+0x14>
 8013c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c78:	f7ff bff0 	b.w	8013c5c <__sfp_lock_release>
 8013c7c:	4b04      	ldr	r3, [pc, #16]	@ (8013c90 <__sinit+0x28>)
 8013c7e:	6223      	str	r3, [r4, #32]
 8013c80:	4b04      	ldr	r3, [pc, #16]	@ (8013c94 <__sinit+0x2c>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d1f5      	bne.n	8013c74 <__sinit+0xc>
 8013c88:	f7ff ffc4 	bl	8013c14 <global_stdio_init.part.0>
 8013c8c:	e7f2      	b.n	8013c74 <__sinit+0xc>
 8013c8e:	bf00      	nop
 8013c90:	08013bd5 	.word	0x08013bd5
 8013c94:	200151e0 	.word	0x200151e0

08013c98 <_fwalk_sglue>:
 8013c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c9c:	4607      	mov	r7, r0
 8013c9e:	4688      	mov	r8, r1
 8013ca0:	4614      	mov	r4, r2
 8013ca2:	2600      	movs	r6, #0
 8013ca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ca8:	f1b9 0901 	subs.w	r9, r9, #1
 8013cac:	d505      	bpl.n	8013cba <_fwalk_sglue+0x22>
 8013cae:	6824      	ldr	r4, [r4, #0]
 8013cb0:	2c00      	cmp	r4, #0
 8013cb2:	d1f7      	bne.n	8013ca4 <_fwalk_sglue+0xc>
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cba:	89ab      	ldrh	r3, [r5, #12]
 8013cbc:	2b01      	cmp	r3, #1
 8013cbe:	d907      	bls.n	8013cd0 <_fwalk_sglue+0x38>
 8013cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	d003      	beq.n	8013cd0 <_fwalk_sglue+0x38>
 8013cc8:	4629      	mov	r1, r5
 8013cca:	4638      	mov	r0, r7
 8013ccc:	47c0      	blx	r8
 8013cce:	4306      	orrs	r6, r0
 8013cd0:	3568      	adds	r5, #104	@ 0x68
 8013cd2:	e7e9      	b.n	8013ca8 <_fwalk_sglue+0x10>

08013cd4 <sniprintf>:
 8013cd4:	b40c      	push	{r2, r3}
 8013cd6:	b530      	push	{r4, r5, lr}
 8013cd8:	4b17      	ldr	r3, [pc, #92]	@ (8013d38 <sniprintf+0x64>)
 8013cda:	1e0c      	subs	r4, r1, #0
 8013cdc:	681d      	ldr	r5, [r3, #0]
 8013cde:	b09d      	sub	sp, #116	@ 0x74
 8013ce0:	da08      	bge.n	8013cf4 <sniprintf+0x20>
 8013ce2:	238b      	movs	r3, #139	@ 0x8b
 8013ce4:	602b      	str	r3, [r5, #0]
 8013ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013cea:	b01d      	add	sp, #116	@ 0x74
 8013cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cf0:	b002      	add	sp, #8
 8013cf2:	4770      	bx	lr
 8013cf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013cf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013cfc:	bf14      	ite	ne
 8013cfe:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8013d02:	4623      	moveq	r3, r4
 8013d04:	9304      	str	r3, [sp, #16]
 8013d06:	9307      	str	r3, [sp, #28]
 8013d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013d0c:	9002      	str	r0, [sp, #8]
 8013d0e:	9006      	str	r0, [sp, #24]
 8013d10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013d14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013d16:	ab21      	add	r3, sp, #132	@ 0x84
 8013d18:	a902      	add	r1, sp, #8
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	9301      	str	r3, [sp, #4]
 8013d1e:	f001 fbff 	bl	8015520 <_svfiprintf_r>
 8013d22:	1c43      	adds	r3, r0, #1
 8013d24:	bfbc      	itt	lt
 8013d26:	238b      	movlt	r3, #139	@ 0x8b
 8013d28:	602b      	strlt	r3, [r5, #0]
 8013d2a:	2c00      	cmp	r4, #0
 8013d2c:	d0dd      	beq.n	8013cea <sniprintf+0x16>
 8013d2e:	9b02      	ldr	r3, [sp, #8]
 8013d30:	2200      	movs	r2, #0
 8013d32:	701a      	strb	r2, [r3, #0]
 8013d34:	e7d9      	b.n	8013cea <sniprintf+0x16>
 8013d36:	bf00      	nop
 8013d38:	20000194 	.word	0x20000194

08013d3c <__sread>:
 8013d3c:	b510      	push	{r4, lr}
 8013d3e:	460c      	mov	r4, r1
 8013d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d44:	f000 f8f2 	bl	8013f2c <_read_r>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	bfab      	itete	ge
 8013d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8013d50:	181b      	addge	r3, r3, r0
 8013d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013d56:	bfac      	ite	ge
 8013d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013d5a:	81a3      	strhlt	r3, [r4, #12]
 8013d5c:	bd10      	pop	{r4, pc}

08013d5e <__swrite>:
 8013d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d62:	461f      	mov	r7, r3
 8013d64:	898b      	ldrh	r3, [r1, #12]
 8013d66:	05db      	lsls	r3, r3, #23
 8013d68:	4605      	mov	r5, r0
 8013d6a:	460c      	mov	r4, r1
 8013d6c:	4616      	mov	r6, r2
 8013d6e:	d505      	bpl.n	8013d7c <__swrite+0x1e>
 8013d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d74:	2302      	movs	r3, #2
 8013d76:	2200      	movs	r2, #0
 8013d78:	f000 f8c6 	bl	8013f08 <_lseek_r>
 8013d7c:	89a3      	ldrh	r3, [r4, #12]
 8013d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013d86:	81a3      	strh	r3, [r4, #12]
 8013d88:	4632      	mov	r2, r6
 8013d8a:	463b      	mov	r3, r7
 8013d8c:	4628      	mov	r0, r5
 8013d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d92:	f000 b901 	b.w	8013f98 <_write_r>

08013d96 <__sseek>:
 8013d96:	b510      	push	{r4, lr}
 8013d98:	460c      	mov	r4, r1
 8013d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d9e:	f000 f8b3 	bl	8013f08 <_lseek_r>
 8013da2:	1c43      	adds	r3, r0, #1
 8013da4:	89a3      	ldrh	r3, [r4, #12]
 8013da6:	bf15      	itete	ne
 8013da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013db2:	81a3      	strheq	r3, [r4, #12]
 8013db4:	bf18      	it	ne
 8013db6:	81a3      	strhne	r3, [r4, #12]
 8013db8:	bd10      	pop	{r4, pc}

08013dba <__sclose>:
 8013dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dbe:	f000 b83d 	b.w	8013e3c <_close_r>

08013dc2 <memset>:
 8013dc2:	4402      	add	r2, r0
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d100      	bne.n	8013dcc <memset+0xa>
 8013dca:	4770      	bx	lr
 8013dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8013dd0:	e7f9      	b.n	8013dc6 <memset+0x4>

08013dd2 <_raise_r>:
 8013dd2:	291f      	cmp	r1, #31
 8013dd4:	b538      	push	{r3, r4, r5, lr}
 8013dd6:	4605      	mov	r5, r0
 8013dd8:	460c      	mov	r4, r1
 8013dda:	d904      	bls.n	8013de6 <_raise_r+0x14>
 8013ddc:	2316      	movs	r3, #22
 8013dde:	6003      	str	r3, [r0, #0]
 8013de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013de4:	bd38      	pop	{r3, r4, r5, pc}
 8013de6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013de8:	b112      	cbz	r2, 8013df0 <_raise_r+0x1e>
 8013dea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013dee:	b94b      	cbnz	r3, 8013e04 <_raise_r+0x32>
 8013df0:	4628      	mov	r0, r5
 8013df2:	f000 f8bf 	bl	8013f74 <_getpid_r>
 8013df6:	4622      	mov	r2, r4
 8013df8:	4601      	mov	r1, r0
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e00:	f000 b8a6 	b.w	8013f50 <_kill_r>
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d00a      	beq.n	8013e1e <_raise_r+0x4c>
 8013e08:	1c59      	adds	r1, r3, #1
 8013e0a:	d103      	bne.n	8013e14 <_raise_r+0x42>
 8013e0c:	2316      	movs	r3, #22
 8013e0e:	6003      	str	r3, [r0, #0]
 8013e10:	2001      	movs	r0, #1
 8013e12:	e7e7      	b.n	8013de4 <_raise_r+0x12>
 8013e14:	2100      	movs	r1, #0
 8013e16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	4798      	blx	r3
 8013e1e:	2000      	movs	r0, #0
 8013e20:	e7e0      	b.n	8013de4 <_raise_r+0x12>
	...

08013e24 <raise>:
 8013e24:	4b02      	ldr	r3, [pc, #8]	@ (8013e30 <raise+0xc>)
 8013e26:	4601      	mov	r1, r0
 8013e28:	6818      	ldr	r0, [r3, #0]
 8013e2a:	f7ff bfd2 	b.w	8013dd2 <_raise_r>
 8013e2e:	bf00      	nop
 8013e30:	20000194 	.word	0x20000194

08013e34 <_localeconv_r>:
 8013e34:	4800      	ldr	r0, [pc, #0]	@ (8013e38 <_localeconv_r+0x4>)
 8013e36:	4770      	bx	lr
 8013e38:	200002d4 	.word	0x200002d4

08013e3c <_close_r>:
 8013e3c:	b538      	push	{r3, r4, r5, lr}
 8013e3e:	4d06      	ldr	r5, [pc, #24]	@ (8013e58 <_close_r+0x1c>)
 8013e40:	2300      	movs	r3, #0
 8013e42:	4604      	mov	r4, r0
 8013e44:	4608      	mov	r0, r1
 8013e46:	602b      	str	r3, [r5, #0]
 8013e48:	f7f0 fd4e 	bl	80048e8 <_close>
 8013e4c:	1c43      	adds	r3, r0, #1
 8013e4e:	d102      	bne.n	8013e56 <_close_r+0x1a>
 8013e50:	682b      	ldr	r3, [r5, #0]
 8013e52:	b103      	cbz	r3, 8013e56 <_close_r+0x1a>
 8013e54:	6023      	str	r3, [r4, #0]
 8013e56:	bd38      	pop	{r3, r4, r5, pc}
 8013e58:	200151e4 	.word	0x200151e4

08013e5c <_reclaim_reent>:
 8013e5c:	4b29      	ldr	r3, [pc, #164]	@ (8013f04 <_reclaim_reent+0xa8>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	4283      	cmp	r3, r0
 8013e62:	b570      	push	{r4, r5, r6, lr}
 8013e64:	4604      	mov	r4, r0
 8013e66:	d04b      	beq.n	8013f00 <_reclaim_reent+0xa4>
 8013e68:	69c3      	ldr	r3, [r0, #28]
 8013e6a:	b1ab      	cbz	r3, 8013e98 <_reclaim_reent+0x3c>
 8013e6c:	68db      	ldr	r3, [r3, #12]
 8013e6e:	b16b      	cbz	r3, 8013e8c <_reclaim_reent+0x30>
 8013e70:	2500      	movs	r5, #0
 8013e72:	69e3      	ldr	r3, [r4, #28]
 8013e74:	68db      	ldr	r3, [r3, #12]
 8013e76:	5959      	ldr	r1, [r3, r5]
 8013e78:	2900      	cmp	r1, #0
 8013e7a:	d13b      	bne.n	8013ef4 <_reclaim_reent+0x98>
 8013e7c:	3504      	adds	r5, #4
 8013e7e:	2d80      	cmp	r5, #128	@ 0x80
 8013e80:	d1f7      	bne.n	8013e72 <_reclaim_reent+0x16>
 8013e82:	69e3      	ldr	r3, [r4, #28]
 8013e84:	4620      	mov	r0, r4
 8013e86:	68d9      	ldr	r1, [r3, #12]
 8013e88:	f000 ff22 	bl	8014cd0 <_free_r>
 8013e8c:	69e3      	ldr	r3, [r4, #28]
 8013e8e:	6819      	ldr	r1, [r3, #0]
 8013e90:	b111      	cbz	r1, 8013e98 <_reclaim_reent+0x3c>
 8013e92:	4620      	mov	r0, r4
 8013e94:	f000 ff1c 	bl	8014cd0 <_free_r>
 8013e98:	6961      	ldr	r1, [r4, #20]
 8013e9a:	b111      	cbz	r1, 8013ea2 <_reclaim_reent+0x46>
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	f000 ff17 	bl	8014cd0 <_free_r>
 8013ea2:	69e1      	ldr	r1, [r4, #28]
 8013ea4:	b111      	cbz	r1, 8013eac <_reclaim_reent+0x50>
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	f000 ff12 	bl	8014cd0 <_free_r>
 8013eac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013eae:	b111      	cbz	r1, 8013eb6 <_reclaim_reent+0x5a>
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	f000 ff0d 	bl	8014cd0 <_free_r>
 8013eb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013eb8:	b111      	cbz	r1, 8013ec0 <_reclaim_reent+0x64>
 8013eba:	4620      	mov	r0, r4
 8013ebc:	f000 ff08 	bl	8014cd0 <_free_r>
 8013ec0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013ec2:	b111      	cbz	r1, 8013eca <_reclaim_reent+0x6e>
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f000 ff03 	bl	8014cd0 <_free_r>
 8013eca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013ecc:	b111      	cbz	r1, 8013ed4 <_reclaim_reent+0x78>
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f000 fefe 	bl	8014cd0 <_free_r>
 8013ed4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013ed6:	b111      	cbz	r1, 8013ede <_reclaim_reent+0x82>
 8013ed8:	4620      	mov	r0, r4
 8013eda:	f000 fef9 	bl	8014cd0 <_free_r>
 8013ede:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013ee0:	b111      	cbz	r1, 8013ee8 <_reclaim_reent+0x8c>
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	f000 fef4 	bl	8014cd0 <_free_r>
 8013ee8:	6a23      	ldr	r3, [r4, #32]
 8013eea:	b14b      	cbz	r3, 8013f00 <_reclaim_reent+0xa4>
 8013eec:	4620      	mov	r0, r4
 8013eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ef2:	4718      	bx	r3
 8013ef4:	680e      	ldr	r6, [r1, #0]
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	f000 feea 	bl	8014cd0 <_free_r>
 8013efc:	4631      	mov	r1, r6
 8013efe:	e7bb      	b.n	8013e78 <_reclaim_reent+0x1c>
 8013f00:	bd70      	pop	{r4, r5, r6, pc}
 8013f02:	bf00      	nop
 8013f04:	20000194 	.word	0x20000194

08013f08 <_lseek_r>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4d07      	ldr	r5, [pc, #28]	@ (8013f28 <_lseek_r+0x20>)
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	4608      	mov	r0, r1
 8013f10:	4611      	mov	r1, r2
 8013f12:	2200      	movs	r2, #0
 8013f14:	602a      	str	r2, [r5, #0]
 8013f16:	461a      	mov	r2, r3
 8013f18:	f7f0 fd0d 	bl	8004936 <_lseek>
 8013f1c:	1c43      	adds	r3, r0, #1
 8013f1e:	d102      	bne.n	8013f26 <_lseek_r+0x1e>
 8013f20:	682b      	ldr	r3, [r5, #0]
 8013f22:	b103      	cbz	r3, 8013f26 <_lseek_r+0x1e>
 8013f24:	6023      	str	r3, [r4, #0]
 8013f26:	bd38      	pop	{r3, r4, r5, pc}
 8013f28:	200151e4 	.word	0x200151e4

08013f2c <_read_r>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	4d07      	ldr	r5, [pc, #28]	@ (8013f4c <_read_r+0x20>)
 8013f30:	4604      	mov	r4, r0
 8013f32:	4608      	mov	r0, r1
 8013f34:	4611      	mov	r1, r2
 8013f36:	2200      	movs	r2, #0
 8013f38:	602a      	str	r2, [r5, #0]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	f7f0 fc9b 	bl	8004876 <_read>
 8013f40:	1c43      	adds	r3, r0, #1
 8013f42:	d102      	bne.n	8013f4a <_read_r+0x1e>
 8013f44:	682b      	ldr	r3, [r5, #0]
 8013f46:	b103      	cbz	r3, 8013f4a <_read_r+0x1e>
 8013f48:	6023      	str	r3, [r4, #0]
 8013f4a:	bd38      	pop	{r3, r4, r5, pc}
 8013f4c:	200151e4 	.word	0x200151e4

08013f50 <_kill_r>:
 8013f50:	b538      	push	{r3, r4, r5, lr}
 8013f52:	4d07      	ldr	r5, [pc, #28]	@ (8013f70 <_kill_r+0x20>)
 8013f54:	2300      	movs	r3, #0
 8013f56:	4604      	mov	r4, r0
 8013f58:	4608      	mov	r0, r1
 8013f5a:	4611      	mov	r1, r2
 8013f5c:	602b      	str	r3, [r5, #0]
 8013f5e:	f7f0 fc6f 	bl	8004840 <_kill>
 8013f62:	1c43      	adds	r3, r0, #1
 8013f64:	d102      	bne.n	8013f6c <_kill_r+0x1c>
 8013f66:	682b      	ldr	r3, [r5, #0]
 8013f68:	b103      	cbz	r3, 8013f6c <_kill_r+0x1c>
 8013f6a:	6023      	str	r3, [r4, #0]
 8013f6c:	bd38      	pop	{r3, r4, r5, pc}
 8013f6e:	bf00      	nop
 8013f70:	200151e4 	.word	0x200151e4

08013f74 <_getpid_r>:
 8013f74:	f7f0 bc5c 	b.w	8004830 <_getpid>

08013f78 <_sbrk_r>:
 8013f78:	b538      	push	{r3, r4, r5, lr}
 8013f7a:	4d06      	ldr	r5, [pc, #24]	@ (8013f94 <_sbrk_r+0x1c>)
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	4604      	mov	r4, r0
 8013f80:	4608      	mov	r0, r1
 8013f82:	602b      	str	r3, [r5, #0]
 8013f84:	f7f0 fce4 	bl	8004950 <_sbrk>
 8013f88:	1c43      	adds	r3, r0, #1
 8013f8a:	d102      	bne.n	8013f92 <_sbrk_r+0x1a>
 8013f8c:	682b      	ldr	r3, [r5, #0]
 8013f8e:	b103      	cbz	r3, 8013f92 <_sbrk_r+0x1a>
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	bd38      	pop	{r3, r4, r5, pc}
 8013f94:	200151e4 	.word	0x200151e4

08013f98 <_write_r>:
 8013f98:	b538      	push	{r3, r4, r5, lr}
 8013f9a:	4d07      	ldr	r5, [pc, #28]	@ (8013fb8 <_write_r+0x20>)
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	4608      	mov	r0, r1
 8013fa0:	4611      	mov	r1, r2
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	602a      	str	r2, [r5, #0]
 8013fa6:	461a      	mov	r2, r3
 8013fa8:	f7f0 fc82 	bl	80048b0 <_write>
 8013fac:	1c43      	adds	r3, r0, #1
 8013fae:	d102      	bne.n	8013fb6 <_write_r+0x1e>
 8013fb0:	682b      	ldr	r3, [r5, #0]
 8013fb2:	b103      	cbz	r3, 8013fb6 <_write_r+0x1e>
 8013fb4:	6023      	str	r3, [r4, #0]
 8013fb6:	bd38      	pop	{r3, r4, r5, pc}
 8013fb8:	200151e4 	.word	0x200151e4

08013fbc <__errno>:
 8013fbc:	4b01      	ldr	r3, [pc, #4]	@ (8013fc4 <__errno+0x8>)
 8013fbe:	6818      	ldr	r0, [r3, #0]
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	20000194 	.word	0x20000194

08013fc8 <__libc_init_array>:
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	4d0d      	ldr	r5, [pc, #52]	@ (8014000 <__libc_init_array+0x38>)
 8013fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8014004 <__libc_init_array+0x3c>)
 8013fce:	1b64      	subs	r4, r4, r5
 8013fd0:	10a4      	asrs	r4, r4, #2
 8013fd2:	2600      	movs	r6, #0
 8013fd4:	42a6      	cmp	r6, r4
 8013fd6:	d109      	bne.n	8013fec <__libc_init_array+0x24>
 8013fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8014008 <__libc_init_array+0x40>)
 8013fda:	4c0c      	ldr	r4, [pc, #48]	@ (801400c <__libc_init_array+0x44>)
 8013fdc:	f001 ff56 	bl	8015e8c <_init>
 8013fe0:	1b64      	subs	r4, r4, r5
 8013fe2:	10a4      	asrs	r4, r4, #2
 8013fe4:	2600      	movs	r6, #0
 8013fe6:	42a6      	cmp	r6, r4
 8013fe8:	d105      	bne.n	8013ff6 <__libc_init_array+0x2e>
 8013fea:	bd70      	pop	{r4, r5, r6, pc}
 8013fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ff0:	4798      	blx	r3
 8013ff2:	3601      	adds	r6, #1
 8013ff4:	e7ee      	b.n	8013fd4 <__libc_init_array+0xc>
 8013ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ffa:	4798      	blx	r3
 8013ffc:	3601      	adds	r6, #1
 8013ffe:	e7f2      	b.n	8013fe6 <__libc_init_array+0x1e>
 8014000:	08016aa8 	.word	0x08016aa8
 8014004:	08016aa8 	.word	0x08016aa8
 8014008:	08016aa8 	.word	0x08016aa8
 801400c:	08016ab0 	.word	0x08016ab0

08014010 <__retarget_lock_init_recursive>:
 8014010:	4770      	bx	lr

08014012 <__retarget_lock_acquire_recursive>:
 8014012:	4770      	bx	lr

08014014 <__retarget_lock_release_recursive>:
 8014014:	4770      	bx	lr

08014016 <memcpy>:
 8014016:	440a      	add	r2, r1
 8014018:	4291      	cmp	r1, r2
 801401a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801401e:	d100      	bne.n	8014022 <memcpy+0xc>
 8014020:	4770      	bx	lr
 8014022:	b510      	push	{r4, lr}
 8014024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014028:	f803 4f01 	strb.w	r4, [r3, #1]!
 801402c:	4291      	cmp	r1, r2
 801402e:	d1f9      	bne.n	8014024 <memcpy+0xe>
 8014030:	bd10      	pop	{r4, pc}

08014032 <quorem>:
 8014032:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014036:	6903      	ldr	r3, [r0, #16]
 8014038:	690c      	ldr	r4, [r1, #16]
 801403a:	42a3      	cmp	r3, r4
 801403c:	4607      	mov	r7, r0
 801403e:	db7e      	blt.n	801413e <quorem+0x10c>
 8014040:	3c01      	subs	r4, #1
 8014042:	f101 0814 	add.w	r8, r1, #20
 8014046:	00a3      	lsls	r3, r4, #2
 8014048:	f100 0514 	add.w	r5, r0, #20
 801404c:	9300      	str	r3, [sp, #0]
 801404e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014052:	9301      	str	r3, [sp, #4]
 8014054:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801405c:	3301      	adds	r3, #1
 801405e:	429a      	cmp	r2, r3
 8014060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014064:	fbb2 f6f3 	udiv	r6, r2, r3
 8014068:	d32e      	bcc.n	80140c8 <quorem+0x96>
 801406a:	f04f 0a00 	mov.w	sl, #0
 801406e:	46c4      	mov	ip, r8
 8014070:	46ae      	mov	lr, r5
 8014072:	46d3      	mov	fp, sl
 8014074:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014078:	b298      	uxth	r0, r3
 801407a:	fb06 a000 	mla	r0, r6, r0, sl
 801407e:	0c02      	lsrs	r2, r0, #16
 8014080:	0c1b      	lsrs	r3, r3, #16
 8014082:	fb06 2303 	mla	r3, r6, r3, r2
 8014086:	f8de 2000 	ldr.w	r2, [lr]
 801408a:	b280      	uxth	r0, r0
 801408c:	b292      	uxth	r2, r2
 801408e:	1a12      	subs	r2, r2, r0
 8014090:	445a      	add	r2, fp
 8014092:	f8de 0000 	ldr.w	r0, [lr]
 8014096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801409a:	b29b      	uxth	r3, r3
 801409c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80140a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80140a4:	b292      	uxth	r2, r2
 80140a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80140aa:	45e1      	cmp	r9, ip
 80140ac:	f84e 2b04 	str.w	r2, [lr], #4
 80140b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80140b4:	d2de      	bcs.n	8014074 <quorem+0x42>
 80140b6:	9b00      	ldr	r3, [sp, #0]
 80140b8:	58eb      	ldr	r3, [r5, r3]
 80140ba:	b92b      	cbnz	r3, 80140c8 <quorem+0x96>
 80140bc:	9b01      	ldr	r3, [sp, #4]
 80140be:	3b04      	subs	r3, #4
 80140c0:	429d      	cmp	r5, r3
 80140c2:	461a      	mov	r2, r3
 80140c4:	d32f      	bcc.n	8014126 <quorem+0xf4>
 80140c6:	613c      	str	r4, [r7, #16]
 80140c8:	4638      	mov	r0, r7
 80140ca:	f001 f8c5 	bl	8015258 <__mcmp>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	db25      	blt.n	801411e <quorem+0xec>
 80140d2:	4629      	mov	r1, r5
 80140d4:	2000      	movs	r0, #0
 80140d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80140da:	f8d1 c000 	ldr.w	ip, [r1]
 80140de:	fa1f fe82 	uxth.w	lr, r2
 80140e2:	fa1f f38c 	uxth.w	r3, ip
 80140e6:	eba3 030e 	sub.w	r3, r3, lr
 80140ea:	4403      	add	r3, r0
 80140ec:	0c12      	lsrs	r2, r2, #16
 80140ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80140f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140fc:	45c1      	cmp	r9, r8
 80140fe:	f841 3b04 	str.w	r3, [r1], #4
 8014102:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014106:	d2e6      	bcs.n	80140d6 <quorem+0xa4>
 8014108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801410c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014110:	b922      	cbnz	r2, 801411c <quorem+0xea>
 8014112:	3b04      	subs	r3, #4
 8014114:	429d      	cmp	r5, r3
 8014116:	461a      	mov	r2, r3
 8014118:	d30b      	bcc.n	8014132 <quorem+0x100>
 801411a:	613c      	str	r4, [r7, #16]
 801411c:	3601      	adds	r6, #1
 801411e:	4630      	mov	r0, r6
 8014120:	b003      	add	sp, #12
 8014122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014126:	6812      	ldr	r2, [r2, #0]
 8014128:	3b04      	subs	r3, #4
 801412a:	2a00      	cmp	r2, #0
 801412c:	d1cb      	bne.n	80140c6 <quorem+0x94>
 801412e:	3c01      	subs	r4, #1
 8014130:	e7c6      	b.n	80140c0 <quorem+0x8e>
 8014132:	6812      	ldr	r2, [r2, #0]
 8014134:	3b04      	subs	r3, #4
 8014136:	2a00      	cmp	r2, #0
 8014138:	d1ef      	bne.n	801411a <quorem+0xe8>
 801413a:	3c01      	subs	r4, #1
 801413c:	e7ea      	b.n	8014114 <quorem+0xe2>
 801413e:	2000      	movs	r0, #0
 8014140:	e7ee      	b.n	8014120 <quorem+0xee>
 8014142:	0000      	movs	r0, r0
 8014144:	0000      	movs	r0, r0
	...

08014148 <_dtoa_r>:
 8014148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801414c:	69c7      	ldr	r7, [r0, #28]
 801414e:	b099      	sub	sp, #100	@ 0x64
 8014150:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014154:	ec55 4b10 	vmov	r4, r5, d0
 8014158:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801415a:	9109      	str	r1, [sp, #36]	@ 0x24
 801415c:	4683      	mov	fp, r0
 801415e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014160:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014162:	b97f      	cbnz	r7, 8014184 <_dtoa_r+0x3c>
 8014164:	2010      	movs	r0, #16
 8014166:	f7fe ffdd 	bl	8013124 <malloc>
 801416a:	4602      	mov	r2, r0
 801416c:	f8cb 001c 	str.w	r0, [fp, #28]
 8014170:	b920      	cbnz	r0, 801417c <_dtoa_r+0x34>
 8014172:	4ba7      	ldr	r3, [pc, #668]	@ (8014410 <_dtoa_r+0x2c8>)
 8014174:	21ef      	movs	r1, #239	@ 0xef
 8014176:	48a7      	ldr	r0, [pc, #668]	@ (8014414 <_dtoa_r+0x2cc>)
 8014178:	f001 fb94 	bl	80158a4 <__assert_func>
 801417c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014180:	6007      	str	r7, [r0, #0]
 8014182:	60c7      	str	r7, [r0, #12]
 8014184:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014188:	6819      	ldr	r1, [r3, #0]
 801418a:	b159      	cbz	r1, 80141a4 <_dtoa_r+0x5c>
 801418c:	685a      	ldr	r2, [r3, #4]
 801418e:	604a      	str	r2, [r1, #4]
 8014190:	2301      	movs	r3, #1
 8014192:	4093      	lsls	r3, r2
 8014194:	608b      	str	r3, [r1, #8]
 8014196:	4658      	mov	r0, fp
 8014198:	f000 fe24 	bl	8014de4 <_Bfree>
 801419c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80141a0:	2200      	movs	r2, #0
 80141a2:	601a      	str	r2, [r3, #0]
 80141a4:	1e2b      	subs	r3, r5, #0
 80141a6:	bfb9      	ittee	lt
 80141a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80141ac:	9303      	strlt	r3, [sp, #12]
 80141ae:	2300      	movge	r3, #0
 80141b0:	6033      	strge	r3, [r6, #0]
 80141b2:	9f03      	ldr	r7, [sp, #12]
 80141b4:	4b98      	ldr	r3, [pc, #608]	@ (8014418 <_dtoa_r+0x2d0>)
 80141b6:	bfbc      	itt	lt
 80141b8:	2201      	movlt	r2, #1
 80141ba:	6032      	strlt	r2, [r6, #0]
 80141bc:	43bb      	bics	r3, r7
 80141be:	d112      	bne.n	80141e6 <_dtoa_r+0x9e>
 80141c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80141c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80141c6:	6013      	str	r3, [r2, #0]
 80141c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80141cc:	4323      	orrs	r3, r4
 80141ce:	f000 854d 	beq.w	8014c6c <_dtoa_r+0xb24>
 80141d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80141d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801442c <_dtoa_r+0x2e4>
 80141d8:	2b00      	cmp	r3, #0
 80141da:	f000 854f 	beq.w	8014c7c <_dtoa_r+0xb34>
 80141de:	f10a 0303 	add.w	r3, sl, #3
 80141e2:	f000 bd49 	b.w	8014c78 <_dtoa_r+0xb30>
 80141e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80141ea:	2200      	movs	r2, #0
 80141ec:	ec51 0b17 	vmov	r0, r1, d7
 80141f0:	2300      	movs	r3, #0
 80141f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80141f6:	f7ec fc8f 	bl	8000b18 <__aeabi_dcmpeq>
 80141fa:	4680      	mov	r8, r0
 80141fc:	b158      	cbz	r0, 8014216 <_dtoa_r+0xce>
 80141fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014200:	2301      	movs	r3, #1
 8014202:	6013      	str	r3, [r2, #0]
 8014204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014206:	b113      	cbz	r3, 801420e <_dtoa_r+0xc6>
 8014208:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801420a:	4b84      	ldr	r3, [pc, #528]	@ (801441c <_dtoa_r+0x2d4>)
 801420c:	6013      	str	r3, [r2, #0]
 801420e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014430 <_dtoa_r+0x2e8>
 8014212:	f000 bd33 	b.w	8014c7c <_dtoa_r+0xb34>
 8014216:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801421a:	aa16      	add	r2, sp, #88	@ 0x58
 801421c:	a917      	add	r1, sp, #92	@ 0x5c
 801421e:	4658      	mov	r0, fp
 8014220:	f001 f8ca 	bl	80153b8 <__d2b>
 8014224:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014228:	4681      	mov	r9, r0
 801422a:	2e00      	cmp	r6, #0
 801422c:	d077      	beq.n	801431e <_dtoa_r+0x1d6>
 801422e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014230:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801423c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014240:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014244:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014248:	4619      	mov	r1, r3
 801424a:	2200      	movs	r2, #0
 801424c:	4b74      	ldr	r3, [pc, #464]	@ (8014420 <_dtoa_r+0x2d8>)
 801424e:	f7ec f843 	bl	80002d8 <__aeabi_dsub>
 8014252:	a369      	add	r3, pc, #420	@ (adr r3, 80143f8 <_dtoa_r+0x2b0>)
 8014254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014258:	f7ec f9f6 	bl	8000648 <__aeabi_dmul>
 801425c:	a368      	add	r3, pc, #416	@ (adr r3, 8014400 <_dtoa_r+0x2b8>)
 801425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014262:	f7ec f83b 	bl	80002dc <__adddf3>
 8014266:	4604      	mov	r4, r0
 8014268:	4630      	mov	r0, r6
 801426a:	460d      	mov	r5, r1
 801426c:	f7ec f982 	bl	8000574 <__aeabi_i2d>
 8014270:	a365      	add	r3, pc, #404	@ (adr r3, 8014408 <_dtoa_r+0x2c0>)
 8014272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014276:	f7ec f9e7 	bl	8000648 <__aeabi_dmul>
 801427a:	4602      	mov	r2, r0
 801427c:	460b      	mov	r3, r1
 801427e:	4620      	mov	r0, r4
 8014280:	4629      	mov	r1, r5
 8014282:	f7ec f82b 	bl	80002dc <__adddf3>
 8014286:	4604      	mov	r4, r0
 8014288:	460d      	mov	r5, r1
 801428a:	f7ec fc8d 	bl	8000ba8 <__aeabi_d2iz>
 801428e:	2200      	movs	r2, #0
 8014290:	4607      	mov	r7, r0
 8014292:	2300      	movs	r3, #0
 8014294:	4620      	mov	r0, r4
 8014296:	4629      	mov	r1, r5
 8014298:	f7ec fc48 	bl	8000b2c <__aeabi_dcmplt>
 801429c:	b140      	cbz	r0, 80142b0 <_dtoa_r+0x168>
 801429e:	4638      	mov	r0, r7
 80142a0:	f7ec f968 	bl	8000574 <__aeabi_i2d>
 80142a4:	4622      	mov	r2, r4
 80142a6:	462b      	mov	r3, r5
 80142a8:	f7ec fc36 	bl	8000b18 <__aeabi_dcmpeq>
 80142ac:	b900      	cbnz	r0, 80142b0 <_dtoa_r+0x168>
 80142ae:	3f01      	subs	r7, #1
 80142b0:	2f16      	cmp	r7, #22
 80142b2:	d851      	bhi.n	8014358 <_dtoa_r+0x210>
 80142b4:	4b5b      	ldr	r3, [pc, #364]	@ (8014424 <_dtoa_r+0x2dc>)
 80142b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80142ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80142c2:	f7ec fc33 	bl	8000b2c <__aeabi_dcmplt>
 80142c6:	2800      	cmp	r0, #0
 80142c8:	d048      	beq.n	801435c <_dtoa_r+0x214>
 80142ca:	3f01      	subs	r7, #1
 80142cc:	2300      	movs	r3, #0
 80142ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80142d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80142d2:	1b9b      	subs	r3, r3, r6
 80142d4:	1e5a      	subs	r2, r3, #1
 80142d6:	bf44      	itt	mi
 80142d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80142dc:	2300      	movmi	r3, #0
 80142de:	9208      	str	r2, [sp, #32]
 80142e0:	bf54      	ite	pl
 80142e2:	f04f 0800 	movpl.w	r8, #0
 80142e6:	9308      	strmi	r3, [sp, #32]
 80142e8:	2f00      	cmp	r7, #0
 80142ea:	db39      	blt.n	8014360 <_dtoa_r+0x218>
 80142ec:	9b08      	ldr	r3, [sp, #32]
 80142ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80142f0:	443b      	add	r3, r7
 80142f2:	9308      	str	r3, [sp, #32]
 80142f4:	2300      	movs	r3, #0
 80142f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80142f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142fa:	2b09      	cmp	r3, #9
 80142fc:	d864      	bhi.n	80143c8 <_dtoa_r+0x280>
 80142fe:	2b05      	cmp	r3, #5
 8014300:	bfc4      	itt	gt
 8014302:	3b04      	subgt	r3, #4
 8014304:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014308:	f1a3 0302 	sub.w	r3, r3, #2
 801430c:	bfcc      	ite	gt
 801430e:	2400      	movgt	r4, #0
 8014310:	2401      	movle	r4, #1
 8014312:	2b03      	cmp	r3, #3
 8014314:	d863      	bhi.n	80143de <_dtoa_r+0x296>
 8014316:	e8df f003 	tbb	[pc, r3]
 801431a:	372a      	.short	0x372a
 801431c:	5535      	.short	0x5535
 801431e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014322:	441e      	add	r6, r3
 8014324:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014328:	2b20      	cmp	r3, #32
 801432a:	bfc1      	itttt	gt
 801432c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014330:	409f      	lslgt	r7, r3
 8014332:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014336:	fa24 f303 	lsrgt.w	r3, r4, r3
 801433a:	bfd6      	itet	le
 801433c:	f1c3 0320 	rsble	r3, r3, #32
 8014340:	ea47 0003 	orrgt.w	r0, r7, r3
 8014344:	fa04 f003 	lslle.w	r0, r4, r3
 8014348:	f7ec f904 	bl	8000554 <__aeabi_ui2d>
 801434c:	2201      	movs	r2, #1
 801434e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014352:	3e01      	subs	r6, #1
 8014354:	9214      	str	r2, [sp, #80]	@ 0x50
 8014356:	e777      	b.n	8014248 <_dtoa_r+0x100>
 8014358:	2301      	movs	r3, #1
 801435a:	e7b8      	b.n	80142ce <_dtoa_r+0x186>
 801435c:	9012      	str	r0, [sp, #72]	@ 0x48
 801435e:	e7b7      	b.n	80142d0 <_dtoa_r+0x188>
 8014360:	427b      	negs	r3, r7
 8014362:	930a      	str	r3, [sp, #40]	@ 0x28
 8014364:	2300      	movs	r3, #0
 8014366:	eba8 0807 	sub.w	r8, r8, r7
 801436a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801436c:	e7c4      	b.n	80142f8 <_dtoa_r+0x1b0>
 801436e:	2300      	movs	r3, #0
 8014370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014374:	2b00      	cmp	r3, #0
 8014376:	dc35      	bgt.n	80143e4 <_dtoa_r+0x29c>
 8014378:	2301      	movs	r3, #1
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	9307      	str	r3, [sp, #28]
 801437e:	461a      	mov	r2, r3
 8014380:	920e      	str	r2, [sp, #56]	@ 0x38
 8014382:	e00b      	b.n	801439c <_dtoa_r+0x254>
 8014384:	2301      	movs	r3, #1
 8014386:	e7f3      	b.n	8014370 <_dtoa_r+0x228>
 8014388:	2300      	movs	r3, #0
 801438a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801438c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801438e:	18fb      	adds	r3, r7, r3
 8014390:	9300      	str	r3, [sp, #0]
 8014392:	3301      	adds	r3, #1
 8014394:	2b01      	cmp	r3, #1
 8014396:	9307      	str	r3, [sp, #28]
 8014398:	bfb8      	it	lt
 801439a:	2301      	movlt	r3, #1
 801439c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80143a0:	2100      	movs	r1, #0
 80143a2:	2204      	movs	r2, #4
 80143a4:	f102 0514 	add.w	r5, r2, #20
 80143a8:	429d      	cmp	r5, r3
 80143aa:	d91f      	bls.n	80143ec <_dtoa_r+0x2a4>
 80143ac:	6041      	str	r1, [r0, #4]
 80143ae:	4658      	mov	r0, fp
 80143b0:	f000 fcd8 	bl	8014d64 <_Balloc>
 80143b4:	4682      	mov	sl, r0
 80143b6:	2800      	cmp	r0, #0
 80143b8:	d13c      	bne.n	8014434 <_dtoa_r+0x2ec>
 80143ba:	4b1b      	ldr	r3, [pc, #108]	@ (8014428 <_dtoa_r+0x2e0>)
 80143bc:	4602      	mov	r2, r0
 80143be:	f240 11af 	movw	r1, #431	@ 0x1af
 80143c2:	e6d8      	b.n	8014176 <_dtoa_r+0x2e>
 80143c4:	2301      	movs	r3, #1
 80143c6:	e7e0      	b.n	801438a <_dtoa_r+0x242>
 80143c8:	2401      	movs	r4, #1
 80143ca:	2300      	movs	r3, #0
 80143cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80143ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80143d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80143d4:	9300      	str	r3, [sp, #0]
 80143d6:	9307      	str	r3, [sp, #28]
 80143d8:	2200      	movs	r2, #0
 80143da:	2312      	movs	r3, #18
 80143dc:	e7d0      	b.n	8014380 <_dtoa_r+0x238>
 80143de:	2301      	movs	r3, #1
 80143e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80143e2:	e7f5      	b.n	80143d0 <_dtoa_r+0x288>
 80143e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80143e6:	9300      	str	r3, [sp, #0]
 80143e8:	9307      	str	r3, [sp, #28]
 80143ea:	e7d7      	b.n	801439c <_dtoa_r+0x254>
 80143ec:	3101      	adds	r1, #1
 80143ee:	0052      	lsls	r2, r2, #1
 80143f0:	e7d8      	b.n	80143a4 <_dtoa_r+0x25c>
 80143f2:	bf00      	nop
 80143f4:	f3af 8000 	nop.w
 80143f8:	636f4361 	.word	0x636f4361
 80143fc:	3fd287a7 	.word	0x3fd287a7
 8014400:	8b60c8b3 	.word	0x8b60c8b3
 8014404:	3fc68a28 	.word	0x3fc68a28
 8014408:	509f79fb 	.word	0x509f79fb
 801440c:	3fd34413 	.word	0x3fd34413
 8014410:	0801676d 	.word	0x0801676d
 8014414:	08016784 	.word	0x08016784
 8014418:	7ff00000 	.word	0x7ff00000
 801441c:	0801673d 	.word	0x0801673d
 8014420:	3ff80000 	.word	0x3ff80000
 8014424:	08016880 	.word	0x08016880
 8014428:	080167dc 	.word	0x080167dc
 801442c:	08016769 	.word	0x08016769
 8014430:	0801673c 	.word	0x0801673c
 8014434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014438:	6018      	str	r0, [r3, #0]
 801443a:	9b07      	ldr	r3, [sp, #28]
 801443c:	2b0e      	cmp	r3, #14
 801443e:	f200 80a4 	bhi.w	801458a <_dtoa_r+0x442>
 8014442:	2c00      	cmp	r4, #0
 8014444:	f000 80a1 	beq.w	801458a <_dtoa_r+0x442>
 8014448:	2f00      	cmp	r7, #0
 801444a:	dd33      	ble.n	80144b4 <_dtoa_r+0x36c>
 801444c:	4bad      	ldr	r3, [pc, #692]	@ (8014704 <_dtoa_r+0x5bc>)
 801444e:	f007 020f 	and.w	r2, r7, #15
 8014452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014456:	ed93 7b00 	vldr	d7, [r3]
 801445a:	05f8      	lsls	r0, r7, #23
 801445c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014460:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014464:	d516      	bpl.n	8014494 <_dtoa_r+0x34c>
 8014466:	4ba8      	ldr	r3, [pc, #672]	@ (8014708 <_dtoa_r+0x5c0>)
 8014468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801446c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014470:	f7ec fa14 	bl	800089c <__aeabi_ddiv>
 8014474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014478:	f004 040f 	and.w	r4, r4, #15
 801447c:	2603      	movs	r6, #3
 801447e:	4da2      	ldr	r5, [pc, #648]	@ (8014708 <_dtoa_r+0x5c0>)
 8014480:	b954      	cbnz	r4, 8014498 <_dtoa_r+0x350>
 8014482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801448a:	f7ec fa07 	bl	800089c <__aeabi_ddiv>
 801448e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014492:	e028      	b.n	80144e6 <_dtoa_r+0x39e>
 8014494:	2602      	movs	r6, #2
 8014496:	e7f2      	b.n	801447e <_dtoa_r+0x336>
 8014498:	07e1      	lsls	r1, r4, #31
 801449a:	d508      	bpl.n	80144ae <_dtoa_r+0x366>
 801449c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144a4:	f7ec f8d0 	bl	8000648 <__aeabi_dmul>
 80144a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144ac:	3601      	adds	r6, #1
 80144ae:	1064      	asrs	r4, r4, #1
 80144b0:	3508      	adds	r5, #8
 80144b2:	e7e5      	b.n	8014480 <_dtoa_r+0x338>
 80144b4:	f000 80d2 	beq.w	801465c <_dtoa_r+0x514>
 80144b8:	427c      	negs	r4, r7
 80144ba:	4b92      	ldr	r3, [pc, #584]	@ (8014704 <_dtoa_r+0x5bc>)
 80144bc:	4d92      	ldr	r5, [pc, #584]	@ (8014708 <_dtoa_r+0x5c0>)
 80144be:	f004 020f 	and.w	r2, r4, #15
 80144c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80144c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80144ce:	f7ec f8bb 	bl	8000648 <__aeabi_dmul>
 80144d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144d6:	1124      	asrs	r4, r4, #4
 80144d8:	2300      	movs	r3, #0
 80144da:	2602      	movs	r6, #2
 80144dc:	2c00      	cmp	r4, #0
 80144de:	f040 80b2 	bne.w	8014646 <_dtoa_r+0x4fe>
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d1d3      	bne.n	801448e <_dtoa_r+0x346>
 80144e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80144e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	f000 80b7 	beq.w	8014660 <_dtoa_r+0x518>
 80144f2:	4b86      	ldr	r3, [pc, #536]	@ (801470c <_dtoa_r+0x5c4>)
 80144f4:	2200      	movs	r2, #0
 80144f6:	4620      	mov	r0, r4
 80144f8:	4629      	mov	r1, r5
 80144fa:	f7ec fb17 	bl	8000b2c <__aeabi_dcmplt>
 80144fe:	2800      	cmp	r0, #0
 8014500:	f000 80ae 	beq.w	8014660 <_dtoa_r+0x518>
 8014504:	9b07      	ldr	r3, [sp, #28]
 8014506:	2b00      	cmp	r3, #0
 8014508:	f000 80aa 	beq.w	8014660 <_dtoa_r+0x518>
 801450c:	9b00      	ldr	r3, [sp, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	dd37      	ble.n	8014582 <_dtoa_r+0x43a>
 8014512:	1e7b      	subs	r3, r7, #1
 8014514:	9304      	str	r3, [sp, #16]
 8014516:	4620      	mov	r0, r4
 8014518:	4b7d      	ldr	r3, [pc, #500]	@ (8014710 <_dtoa_r+0x5c8>)
 801451a:	2200      	movs	r2, #0
 801451c:	4629      	mov	r1, r5
 801451e:	f7ec f893 	bl	8000648 <__aeabi_dmul>
 8014522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014526:	9c00      	ldr	r4, [sp, #0]
 8014528:	3601      	adds	r6, #1
 801452a:	4630      	mov	r0, r6
 801452c:	f7ec f822 	bl	8000574 <__aeabi_i2d>
 8014530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014534:	f7ec f888 	bl	8000648 <__aeabi_dmul>
 8014538:	4b76      	ldr	r3, [pc, #472]	@ (8014714 <_dtoa_r+0x5cc>)
 801453a:	2200      	movs	r2, #0
 801453c:	f7eb fece 	bl	80002dc <__adddf3>
 8014540:	4605      	mov	r5, r0
 8014542:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014546:	2c00      	cmp	r4, #0
 8014548:	f040 808d 	bne.w	8014666 <_dtoa_r+0x51e>
 801454c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014550:	4b71      	ldr	r3, [pc, #452]	@ (8014718 <_dtoa_r+0x5d0>)
 8014552:	2200      	movs	r2, #0
 8014554:	f7eb fec0 	bl	80002d8 <__aeabi_dsub>
 8014558:	4602      	mov	r2, r0
 801455a:	460b      	mov	r3, r1
 801455c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014560:	462a      	mov	r2, r5
 8014562:	4633      	mov	r3, r6
 8014564:	f7ec fb00 	bl	8000b68 <__aeabi_dcmpgt>
 8014568:	2800      	cmp	r0, #0
 801456a:	f040 828b 	bne.w	8014a84 <_dtoa_r+0x93c>
 801456e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014572:	462a      	mov	r2, r5
 8014574:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014578:	f7ec fad8 	bl	8000b2c <__aeabi_dcmplt>
 801457c:	2800      	cmp	r0, #0
 801457e:	f040 8128 	bne.w	80147d2 <_dtoa_r+0x68a>
 8014582:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8014586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801458a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801458c:	2b00      	cmp	r3, #0
 801458e:	f2c0 815a 	blt.w	8014846 <_dtoa_r+0x6fe>
 8014592:	2f0e      	cmp	r7, #14
 8014594:	f300 8157 	bgt.w	8014846 <_dtoa_r+0x6fe>
 8014598:	4b5a      	ldr	r3, [pc, #360]	@ (8014704 <_dtoa_r+0x5bc>)
 801459a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801459e:	ed93 7b00 	vldr	d7, [r3]
 80145a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	ed8d 7b00 	vstr	d7, [sp]
 80145aa:	da03      	bge.n	80145b4 <_dtoa_r+0x46c>
 80145ac:	9b07      	ldr	r3, [sp, #28]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	f340 8101 	ble.w	80147b6 <_dtoa_r+0x66e>
 80145b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80145b8:	4656      	mov	r6, sl
 80145ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145be:	4620      	mov	r0, r4
 80145c0:	4629      	mov	r1, r5
 80145c2:	f7ec f96b 	bl	800089c <__aeabi_ddiv>
 80145c6:	f7ec faef 	bl	8000ba8 <__aeabi_d2iz>
 80145ca:	4680      	mov	r8, r0
 80145cc:	f7eb ffd2 	bl	8000574 <__aeabi_i2d>
 80145d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145d4:	f7ec f838 	bl	8000648 <__aeabi_dmul>
 80145d8:	4602      	mov	r2, r0
 80145da:	460b      	mov	r3, r1
 80145dc:	4620      	mov	r0, r4
 80145de:	4629      	mov	r1, r5
 80145e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80145e4:	f7eb fe78 	bl	80002d8 <__aeabi_dsub>
 80145e8:	f806 4b01 	strb.w	r4, [r6], #1
 80145ec:	9d07      	ldr	r5, [sp, #28]
 80145ee:	eba6 040a 	sub.w	r4, r6, sl
 80145f2:	42a5      	cmp	r5, r4
 80145f4:	4602      	mov	r2, r0
 80145f6:	460b      	mov	r3, r1
 80145f8:	f040 8117 	bne.w	801482a <_dtoa_r+0x6e2>
 80145fc:	f7eb fe6e 	bl	80002dc <__adddf3>
 8014600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014604:	4604      	mov	r4, r0
 8014606:	460d      	mov	r5, r1
 8014608:	f7ec faae 	bl	8000b68 <__aeabi_dcmpgt>
 801460c:	2800      	cmp	r0, #0
 801460e:	f040 80f9 	bne.w	8014804 <_dtoa_r+0x6bc>
 8014612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014616:	4620      	mov	r0, r4
 8014618:	4629      	mov	r1, r5
 801461a:	f7ec fa7d 	bl	8000b18 <__aeabi_dcmpeq>
 801461e:	b118      	cbz	r0, 8014628 <_dtoa_r+0x4e0>
 8014620:	f018 0f01 	tst.w	r8, #1
 8014624:	f040 80ee 	bne.w	8014804 <_dtoa_r+0x6bc>
 8014628:	4649      	mov	r1, r9
 801462a:	4658      	mov	r0, fp
 801462c:	f000 fbda 	bl	8014de4 <_Bfree>
 8014630:	2300      	movs	r3, #0
 8014632:	7033      	strb	r3, [r6, #0]
 8014634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014636:	3701      	adds	r7, #1
 8014638:	601f      	str	r7, [r3, #0]
 801463a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801463c:	2b00      	cmp	r3, #0
 801463e:	f000 831d 	beq.w	8014c7c <_dtoa_r+0xb34>
 8014642:	601e      	str	r6, [r3, #0]
 8014644:	e31a      	b.n	8014c7c <_dtoa_r+0xb34>
 8014646:	07e2      	lsls	r2, r4, #31
 8014648:	d505      	bpl.n	8014656 <_dtoa_r+0x50e>
 801464a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801464e:	f7eb fffb 	bl	8000648 <__aeabi_dmul>
 8014652:	3601      	adds	r6, #1
 8014654:	2301      	movs	r3, #1
 8014656:	1064      	asrs	r4, r4, #1
 8014658:	3508      	adds	r5, #8
 801465a:	e73f      	b.n	80144dc <_dtoa_r+0x394>
 801465c:	2602      	movs	r6, #2
 801465e:	e742      	b.n	80144e6 <_dtoa_r+0x39e>
 8014660:	9c07      	ldr	r4, [sp, #28]
 8014662:	9704      	str	r7, [sp, #16]
 8014664:	e761      	b.n	801452a <_dtoa_r+0x3e2>
 8014666:	4b27      	ldr	r3, [pc, #156]	@ (8014704 <_dtoa_r+0x5bc>)
 8014668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801466a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801466e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014672:	4454      	add	r4, sl
 8014674:	2900      	cmp	r1, #0
 8014676:	d053      	beq.n	8014720 <_dtoa_r+0x5d8>
 8014678:	4928      	ldr	r1, [pc, #160]	@ (801471c <_dtoa_r+0x5d4>)
 801467a:	2000      	movs	r0, #0
 801467c:	f7ec f90e 	bl	800089c <__aeabi_ddiv>
 8014680:	4633      	mov	r3, r6
 8014682:	462a      	mov	r2, r5
 8014684:	f7eb fe28 	bl	80002d8 <__aeabi_dsub>
 8014688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801468c:	4656      	mov	r6, sl
 801468e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014692:	f7ec fa89 	bl	8000ba8 <__aeabi_d2iz>
 8014696:	4605      	mov	r5, r0
 8014698:	f7eb ff6c 	bl	8000574 <__aeabi_i2d>
 801469c:	4602      	mov	r2, r0
 801469e:	460b      	mov	r3, r1
 80146a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146a4:	f7eb fe18 	bl	80002d8 <__aeabi_dsub>
 80146a8:	3530      	adds	r5, #48	@ 0x30
 80146aa:	4602      	mov	r2, r0
 80146ac:	460b      	mov	r3, r1
 80146ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80146b2:	f806 5b01 	strb.w	r5, [r6], #1
 80146b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80146ba:	f7ec fa37 	bl	8000b2c <__aeabi_dcmplt>
 80146be:	2800      	cmp	r0, #0
 80146c0:	d171      	bne.n	80147a6 <_dtoa_r+0x65e>
 80146c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80146c6:	4911      	ldr	r1, [pc, #68]	@ (801470c <_dtoa_r+0x5c4>)
 80146c8:	2000      	movs	r0, #0
 80146ca:	f7eb fe05 	bl	80002d8 <__aeabi_dsub>
 80146ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80146d2:	f7ec fa2b 	bl	8000b2c <__aeabi_dcmplt>
 80146d6:	2800      	cmp	r0, #0
 80146d8:	f040 8095 	bne.w	8014806 <_dtoa_r+0x6be>
 80146dc:	42a6      	cmp	r6, r4
 80146de:	f43f af50 	beq.w	8014582 <_dtoa_r+0x43a>
 80146e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80146e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014710 <_dtoa_r+0x5c8>)
 80146e8:	2200      	movs	r2, #0
 80146ea:	f7eb ffad 	bl	8000648 <__aeabi_dmul>
 80146ee:	4b08      	ldr	r3, [pc, #32]	@ (8014710 <_dtoa_r+0x5c8>)
 80146f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80146f4:	2200      	movs	r2, #0
 80146f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146fa:	f7eb ffa5 	bl	8000648 <__aeabi_dmul>
 80146fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014702:	e7c4      	b.n	801468e <_dtoa_r+0x546>
 8014704:	08016880 	.word	0x08016880
 8014708:	08016858 	.word	0x08016858
 801470c:	3ff00000 	.word	0x3ff00000
 8014710:	40240000 	.word	0x40240000
 8014714:	401c0000 	.word	0x401c0000
 8014718:	40140000 	.word	0x40140000
 801471c:	3fe00000 	.word	0x3fe00000
 8014720:	4631      	mov	r1, r6
 8014722:	4628      	mov	r0, r5
 8014724:	f7eb ff90 	bl	8000648 <__aeabi_dmul>
 8014728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801472c:	9415      	str	r4, [sp, #84]	@ 0x54
 801472e:	4656      	mov	r6, sl
 8014730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014734:	f7ec fa38 	bl	8000ba8 <__aeabi_d2iz>
 8014738:	4605      	mov	r5, r0
 801473a:	f7eb ff1b 	bl	8000574 <__aeabi_i2d>
 801473e:	4602      	mov	r2, r0
 8014740:	460b      	mov	r3, r1
 8014742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014746:	f7eb fdc7 	bl	80002d8 <__aeabi_dsub>
 801474a:	3530      	adds	r5, #48	@ 0x30
 801474c:	f806 5b01 	strb.w	r5, [r6], #1
 8014750:	4602      	mov	r2, r0
 8014752:	460b      	mov	r3, r1
 8014754:	42a6      	cmp	r6, r4
 8014756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801475a:	f04f 0200 	mov.w	r2, #0
 801475e:	d124      	bne.n	80147aa <_dtoa_r+0x662>
 8014760:	4bac      	ldr	r3, [pc, #688]	@ (8014a14 <_dtoa_r+0x8cc>)
 8014762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8014766:	f7eb fdb9 	bl	80002dc <__adddf3>
 801476a:	4602      	mov	r2, r0
 801476c:	460b      	mov	r3, r1
 801476e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014772:	f7ec f9f9 	bl	8000b68 <__aeabi_dcmpgt>
 8014776:	2800      	cmp	r0, #0
 8014778:	d145      	bne.n	8014806 <_dtoa_r+0x6be>
 801477a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801477e:	49a5      	ldr	r1, [pc, #660]	@ (8014a14 <_dtoa_r+0x8cc>)
 8014780:	2000      	movs	r0, #0
 8014782:	f7eb fda9 	bl	80002d8 <__aeabi_dsub>
 8014786:	4602      	mov	r2, r0
 8014788:	460b      	mov	r3, r1
 801478a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801478e:	f7ec f9cd 	bl	8000b2c <__aeabi_dcmplt>
 8014792:	2800      	cmp	r0, #0
 8014794:	f43f aef5 	beq.w	8014582 <_dtoa_r+0x43a>
 8014798:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801479a:	1e73      	subs	r3, r6, #1
 801479c:	9315      	str	r3, [sp, #84]	@ 0x54
 801479e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80147a2:	2b30      	cmp	r3, #48	@ 0x30
 80147a4:	d0f8      	beq.n	8014798 <_dtoa_r+0x650>
 80147a6:	9f04      	ldr	r7, [sp, #16]
 80147a8:	e73e      	b.n	8014628 <_dtoa_r+0x4e0>
 80147aa:	4b9b      	ldr	r3, [pc, #620]	@ (8014a18 <_dtoa_r+0x8d0>)
 80147ac:	f7eb ff4c 	bl	8000648 <__aeabi_dmul>
 80147b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80147b4:	e7bc      	b.n	8014730 <_dtoa_r+0x5e8>
 80147b6:	d10c      	bne.n	80147d2 <_dtoa_r+0x68a>
 80147b8:	4b98      	ldr	r3, [pc, #608]	@ (8014a1c <_dtoa_r+0x8d4>)
 80147ba:	2200      	movs	r2, #0
 80147bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147c0:	f7eb ff42 	bl	8000648 <__aeabi_dmul>
 80147c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80147c8:	f7ec f9c4 	bl	8000b54 <__aeabi_dcmpge>
 80147cc:	2800      	cmp	r0, #0
 80147ce:	f000 8157 	beq.w	8014a80 <_dtoa_r+0x938>
 80147d2:	2400      	movs	r4, #0
 80147d4:	4625      	mov	r5, r4
 80147d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147d8:	43db      	mvns	r3, r3
 80147da:	9304      	str	r3, [sp, #16]
 80147dc:	4656      	mov	r6, sl
 80147de:	2700      	movs	r7, #0
 80147e0:	4621      	mov	r1, r4
 80147e2:	4658      	mov	r0, fp
 80147e4:	f000 fafe 	bl	8014de4 <_Bfree>
 80147e8:	2d00      	cmp	r5, #0
 80147ea:	d0dc      	beq.n	80147a6 <_dtoa_r+0x65e>
 80147ec:	b12f      	cbz	r7, 80147fa <_dtoa_r+0x6b2>
 80147ee:	42af      	cmp	r7, r5
 80147f0:	d003      	beq.n	80147fa <_dtoa_r+0x6b2>
 80147f2:	4639      	mov	r1, r7
 80147f4:	4658      	mov	r0, fp
 80147f6:	f000 faf5 	bl	8014de4 <_Bfree>
 80147fa:	4629      	mov	r1, r5
 80147fc:	4658      	mov	r0, fp
 80147fe:	f000 faf1 	bl	8014de4 <_Bfree>
 8014802:	e7d0      	b.n	80147a6 <_dtoa_r+0x65e>
 8014804:	9704      	str	r7, [sp, #16]
 8014806:	4633      	mov	r3, r6
 8014808:	461e      	mov	r6, r3
 801480a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801480e:	2a39      	cmp	r2, #57	@ 0x39
 8014810:	d107      	bne.n	8014822 <_dtoa_r+0x6da>
 8014812:	459a      	cmp	sl, r3
 8014814:	d1f8      	bne.n	8014808 <_dtoa_r+0x6c0>
 8014816:	9a04      	ldr	r2, [sp, #16]
 8014818:	3201      	adds	r2, #1
 801481a:	9204      	str	r2, [sp, #16]
 801481c:	2230      	movs	r2, #48	@ 0x30
 801481e:	f88a 2000 	strb.w	r2, [sl]
 8014822:	781a      	ldrb	r2, [r3, #0]
 8014824:	3201      	adds	r2, #1
 8014826:	701a      	strb	r2, [r3, #0]
 8014828:	e7bd      	b.n	80147a6 <_dtoa_r+0x65e>
 801482a:	4b7b      	ldr	r3, [pc, #492]	@ (8014a18 <_dtoa_r+0x8d0>)
 801482c:	2200      	movs	r2, #0
 801482e:	f7eb ff0b 	bl	8000648 <__aeabi_dmul>
 8014832:	2200      	movs	r2, #0
 8014834:	2300      	movs	r3, #0
 8014836:	4604      	mov	r4, r0
 8014838:	460d      	mov	r5, r1
 801483a:	f7ec f96d 	bl	8000b18 <__aeabi_dcmpeq>
 801483e:	2800      	cmp	r0, #0
 8014840:	f43f aebb 	beq.w	80145ba <_dtoa_r+0x472>
 8014844:	e6f0      	b.n	8014628 <_dtoa_r+0x4e0>
 8014846:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014848:	2a00      	cmp	r2, #0
 801484a:	f000 80db 	beq.w	8014a04 <_dtoa_r+0x8bc>
 801484e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014850:	2a01      	cmp	r2, #1
 8014852:	f300 80bf 	bgt.w	80149d4 <_dtoa_r+0x88c>
 8014856:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014858:	2a00      	cmp	r2, #0
 801485a:	f000 80b7 	beq.w	80149cc <_dtoa_r+0x884>
 801485e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014862:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014864:	4646      	mov	r6, r8
 8014866:	9a08      	ldr	r2, [sp, #32]
 8014868:	2101      	movs	r1, #1
 801486a:	441a      	add	r2, r3
 801486c:	4658      	mov	r0, fp
 801486e:	4498      	add	r8, r3
 8014870:	9208      	str	r2, [sp, #32]
 8014872:	f000 fb6b 	bl	8014f4c <__i2b>
 8014876:	4605      	mov	r5, r0
 8014878:	b15e      	cbz	r6, 8014892 <_dtoa_r+0x74a>
 801487a:	9b08      	ldr	r3, [sp, #32]
 801487c:	2b00      	cmp	r3, #0
 801487e:	dd08      	ble.n	8014892 <_dtoa_r+0x74a>
 8014880:	42b3      	cmp	r3, r6
 8014882:	9a08      	ldr	r2, [sp, #32]
 8014884:	bfa8      	it	ge
 8014886:	4633      	movge	r3, r6
 8014888:	eba8 0803 	sub.w	r8, r8, r3
 801488c:	1af6      	subs	r6, r6, r3
 801488e:	1ad3      	subs	r3, r2, r3
 8014890:	9308      	str	r3, [sp, #32]
 8014892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014894:	b1f3      	cbz	r3, 80148d4 <_dtoa_r+0x78c>
 8014896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014898:	2b00      	cmp	r3, #0
 801489a:	f000 80b7 	beq.w	8014a0c <_dtoa_r+0x8c4>
 801489e:	b18c      	cbz	r4, 80148c4 <_dtoa_r+0x77c>
 80148a0:	4629      	mov	r1, r5
 80148a2:	4622      	mov	r2, r4
 80148a4:	4658      	mov	r0, fp
 80148a6:	f000 fc11 	bl	80150cc <__pow5mult>
 80148aa:	464a      	mov	r2, r9
 80148ac:	4601      	mov	r1, r0
 80148ae:	4605      	mov	r5, r0
 80148b0:	4658      	mov	r0, fp
 80148b2:	f000 fb61 	bl	8014f78 <__multiply>
 80148b6:	4649      	mov	r1, r9
 80148b8:	9004      	str	r0, [sp, #16]
 80148ba:	4658      	mov	r0, fp
 80148bc:	f000 fa92 	bl	8014de4 <_Bfree>
 80148c0:	9b04      	ldr	r3, [sp, #16]
 80148c2:	4699      	mov	r9, r3
 80148c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148c6:	1b1a      	subs	r2, r3, r4
 80148c8:	d004      	beq.n	80148d4 <_dtoa_r+0x78c>
 80148ca:	4649      	mov	r1, r9
 80148cc:	4658      	mov	r0, fp
 80148ce:	f000 fbfd 	bl	80150cc <__pow5mult>
 80148d2:	4681      	mov	r9, r0
 80148d4:	2101      	movs	r1, #1
 80148d6:	4658      	mov	r0, fp
 80148d8:	f000 fb38 	bl	8014f4c <__i2b>
 80148dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80148de:	4604      	mov	r4, r0
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	f000 81cf 	beq.w	8014c84 <_dtoa_r+0xb3c>
 80148e6:	461a      	mov	r2, r3
 80148e8:	4601      	mov	r1, r0
 80148ea:	4658      	mov	r0, fp
 80148ec:	f000 fbee 	bl	80150cc <__pow5mult>
 80148f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148f2:	2b01      	cmp	r3, #1
 80148f4:	4604      	mov	r4, r0
 80148f6:	f300 8095 	bgt.w	8014a24 <_dtoa_r+0x8dc>
 80148fa:	9b02      	ldr	r3, [sp, #8]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	f040 8087 	bne.w	8014a10 <_dtoa_r+0x8c8>
 8014902:	9b03      	ldr	r3, [sp, #12]
 8014904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014908:	2b00      	cmp	r3, #0
 801490a:	f040 8089 	bne.w	8014a20 <_dtoa_r+0x8d8>
 801490e:	9b03      	ldr	r3, [sp, #12]
 8014910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014914:	0d1b      	lsrs	r3, r3, #20
 8014916:	051b      	lsls	r3, r3, #20
 8014918:	b12b      	cbz	r3, 8014926 <_dtoa_r+0x7de>
 801491a:	9b08      	ldr	r3, [sp, #32]
 801491c:	3301      	adds	r3, #1
 801491e:	9308      	str	r3, [sp, #32]
 8014920:	f108 0801 	add.w	r8, r8, #1
 8014924:	2301      	movs	r3, #1
 8014926:	930a      	str	r3, [sp, #40]	@ 0x28
 8014928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801492a:	2b00      	cmp	r3, #0
 801492c:	f000 81b0 	beq.w	8014c90 <_dtoa_r+0xb48>
 8014930:	6923      	ldr	r3, [r4, #16]
 8014932:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014936:	6918      	ldr	r0, [r3, #16]
 8014938:	f000 fabc 	bl	8014eb4 <__hi0bits>
 801493c:	f1c0 0020 	rsb	r0, r0, #32
 8014940:	9b08      	ldr	r3, [sp, #32]
 8014942:	4418      	add	r0, r3
 8014944:	f010 001f 	ands.w	r0, r0, #31
 8014948:	d077      	beq.n	8014a3a <_dtoa_r+0x8f2>
 801494a:	f1c0 0320 	rsb	r3, r0, #32
 801494e:	2b04      	cmp	r3, #4
 8014950:	dd6b      	ble.n	8014a2a <_dtoa_r+0x8e2>
 8014952:	9b08      	ldr	r3, [sp, #32]
 8014954:	f1c0 001c 	rsb	r0, r0, #28
 8014958:	4403      	add	r3, r0
 801495a:	4480      	add	r8, r0
 801495c:	4406      	add	r6, r0
 801495e:	9308      	str	r3, [sp, #32]
 8014960:	f1b8 0f00 	cmp.w	r8, #0
 8014964:	dd05      	ble.n	8014972 <_dtoa_r+0x82a>
 8014966:	4649      	mov	r1, r9
 8014968:	4642      	mov	r2, r8
 801496a:	4658      	mov	r0, fp
 801496c:	f000 fc08 	bl	8015180 <__lshift>
 8014970:	4681      	mov	r9, r0
 8014972:	9b08      	ldr	r3, [sp, #32]
 8014974:	2b00      	cmp	r3, #0
 8014976:	dd05      	ble.n	8014984 <_dtoa_r+0x83c>
 8014978:	4621      	mov	r1, r4
 801497a:	461a      	mov	r2, r3
 801497c:	4658      	mov	r0, fp
 801497e:	f000 fbff 	bl	8015180 <__lshift>
 8014982:	4604      	mov	r4, r0
 8014984:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014986:	2b00      	cmp	r3, #0
 8014988:	d059      	beq.n	8014a3e <_dtoa_r+0x8f6>
 801498a:	4621      	mov	r1, r4
 801498c:	4648      	mov	r0, r9
 801498e:	f000 fc63 	bl	8015258 <__mcmp>
 8014992:	2800      	cmp	r0, #0
 8014994:	da53      	bge.n	8014a3e <_dtoa_r+0x8f6>
 8014996:	1e7b      	subs	r3, r7, #1
 8014998:	9304      	str	r3, [sp, #16]
 801499a:	4649      	mov	r1, r9
 801499c:	2300      	movs	r3, #0
 801499e:	220a      	movs	r2, #10
 80149a0:	4658      	mov	r0, fp
 80149a2:	f000 fa41 	bl	8014e28 <__multadd>
 80149a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80149a8:	4681      	mov	r9, r0
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	f000 8172 	beq.w	8014c94 <_dtoa_r+0xb4c>
 80149b0:	2300      	movs	r3, #0
 80149b2:	4629      	mov	r1, r5
 80149b4:	220a      	movs	r2, #10
 80149b6:	4658      	mov	r0, fp
 80149b8:	f000 fa36 	bl	8014e28 <__multadd>
 80149bc:	9b00      	ldr	r3, [sp, #0]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	4605      	mov	r5, r0
 80149c2:	dc67      	bgt.n	8014a94 <_dtoa_r+0x94c>
 80149c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149c6:	2b02      	cmp	r3, #2
 80149c8:	dc41      	bgt.n	8014a4e <_dtoa_r+0x906>
 80149ca:	e063      	b.n	8014a94 <_dtoa_r+0x94c>
 80149cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80149ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80149d2:	e746      	b.n	8014862 <_dtoa_r+0x71a>
 80149d4:	9b07      	ldr	r3, [sp, #28]
 80149d6:	1e5c      	subs	r4, r3, #1
 80149d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149da:	42a3      	cmp	r3, r4
 80149dc:	bfbf      	itttt	lt
 80149de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80149e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80149e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80149e4:	1ae3      	sublt	r3, r4, r3
 80149e6:	bfb4      	ite	lt
 80149e8:	18d2      	addlt	r2, r2, r3
 80149ea:	1b1c      	subge	r4, r3, r4
 80149ec:	9b07      	ldr	r3, [sp, #28]
 80149ee:	bfbc      	itt	lt
 80149f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80149f2:	2400      	movlt	r4, #0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	bfb5      	itete	lt
 80149f8:	eba8 0603 	sublt.w	r6, r8, r3
 80149fc:	9b07      	ldrge	r3, [sp, #28]
 80149fe:	2300      	movlt	r3, #0
 8014a00:	4646      	movge	r6, r8
 8014a02:	e730      	b.n	8014866 <_dtoa_r+0x71e>
 8014a04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014a06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014a08:	4646      	mov	r6, r8
 8014a0a:	e735      	b.n	8014878 <_dtoa_r+0x730>
 8014a0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014a0e:	e75c      	b.n	80148ca <_dtoa_r+0x782>
 8014a10:	2300      	movs	r3, #0
 8014a12:	e788      	b.n	8014926 <_dtoa_r+0x7de>
 8014a14:	3fe00000 	.word	0x3fe00000
 8014a18:	40240000 	.word	0x40240000
 8014a1c:	40140000 	.word	0x40140000
 8014a20:	9b02      	ldr	r3, [sp, #8]
 8014a22:	e780      	b.n	8014926 <_dtoa_r+0x7de>
 8014a24:	2300      	movs	r3, #0
 8014a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8014a28:	e782      	b.n	8014930 <_dtoa_r+0x7e8>
 8014a2a:	d099      	beq.n	8014960 <_dtoa_r+0x818>
 8014a2c:	9a08      	ldr	r2, [sp, #32]
 8014a2e:	331c      	adds	r3, #28
 8014a30:	441a      	add	r2, r3
 8014a32:	4498      	add	r8, r3
 8014a34:	441e      	add	r6, r3
 8014a36:	9208      	str	r2, [sp, #32]
 8014a38:	e792      	b.n	8014960 <_dtoa_r+0x818>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	e7f6      	b.n	8014a2c <_dtoa_r+0x8e4>
 8014a3e:	9b07      	ldr	r3, [sp, #28]
 8014a40:	9704      	str	r7, [sp, #16]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	dc20      	bgt.n	8014a88 <_dtoa_r+0x940>
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a4a:	2b02      	cmp	r3, #2
 8014a4c:	dd1e      	ble.n	8014a8c <_dtoa_r+0x944>
 8014a4e:	9b00      	ldr	r3, [sp, #0]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	f47f aec0 	bne.w	80147d6 <_dtoa_r+0x68e>
 8014a56:	4621      	mov	r1, r4
 8014a58:	2205      	movs	r2, #5
 8014a5a:	4658      	mov	r0, fp
 8014a5c:	f000 f9e4 	bl	8014e28 <__multadd>
 8014a60:	4601      	mov	r1, r0
 8014a62:	4604      	mov	r4, r0
 8014a64:	4648      	mov	r0, r9
 8014a66:	f000 fbf7 	bl	8015258 <__mcmp>
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	f77f aeb3 	ble.w	80147d6 <_dtoa_r+0x68e>
 8014a70:	4656      	mov	r6, sl
 8014a72:	2331      	movs	r3, #49	@ 0x31
 8014a74:	f806 3b01 	strb.w	r3, [r6], #1
 8014a78:	9b04      	ldr	r3, [sp, #16]
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	9304      	str	r3, [sp, #16]
 8014a7e:	e6ae      	b.n	80147de <_dtoa_r+0x696>
 8014a80:	9c07      	ldr	r4, [sp, #28]
 8014a82:	9704      	str	r7, [sp, #16]
 8014a84:	4625      	mov	r5, r4
 8014a86:	e7f3      	b.n	8014a70 <_dtoa_r+0x928>
 8014a88:	9b07      	ldr	r3, [sp, #28]
 8014a8a:	9300      	str	r3, [sp, #0]
 8014a8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	f000 8104 	beq.w	8014c9c <_dtoa_r+0xb54>
 8014a94:	2e00      	cmp	r6, #0
 8014a96:	dd05      	ble.n	8014aa4 <_dtoa_r+0x95c>
 8014a98:	4629      	mov	r1, r5
 8014a9a:	4632      	mov	r2, r6
 8014a9c:	4658      	mov	r0, fp
 8014a9e:	f000 fb6f 	bl	8015180 <__lshift>
 8014aa2:	4605      	mov	r5, r0
 8014aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d05a      	beq.n	8014b60 <_dtoa_r+0xa18>
 8014aaa:	6869      	ldr	r1, [r5, #4]
 8014aac:	4658      	mov	r0, fp
 8014aae:	f000 f959 	bl	8014d64 <_Balloc>
 8014ab2:	4606      	mov	r6, r0
 8014ab4:	b928      	cbnz	r0, 8014ac2 <_dtoa_r+0x97a>
 8014ab6:	4b84      	ldr	r3, [pc, #528]	@ (8014cc8 <_dtoa_r+0xb80>)
 8014ab8:	4602      	mov	r2, r0
 8014aba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014abe:	f7ff bb5a 	b.w	8014176 <_dtoa_r+0x2e>
 8014ac2:	692a      	ldr	r2, [r5, #16]
 8014ac4:	3202      	adds	r2, #2
 8014ac6:	0092      	lsls	r2, r2, #2
 8014ac8:	f105 010c 	add.w	r1, r5, #12
 8014acc:	300c      	adds	r0, #12
 8014ace:	f7ff faa2 	bl	8014016 <memcpy>
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	4631      	mov	r1, r6
 8014ad6:	4658      	mov	r0, fp
 8014ad8:	f000 fb52 	bl	8015180 <__lshift>
 8014adc:	f10a 0301 	add.w	r3, sl, #1
 8014ae0:	9307      	str	r3, [sp, #28]
 8014ae2:	9b00      	ldr	r3, [sp, #0]
 8014ae4:	4453      	add	r3, sl
 8014ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014ae8:	9b02      	ldr	r3, [sp, #8]
 8014aea:	f003 0301 	and.w	r3, r3, #1
 8014aee:	462f      	mov	r7, r5
 8014af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8014af2:	4605      	mov	r5, r0
 8014af4:	9b07      	ldr	r3, [sp, #28]
 8014af6:	4621      	mov	r1, r4
 8014af8:	3b01      	subs	r3, #1
 8014afa:	4648      	mov	r0, r9
 8014afc:	9300      	str	r3, [sp, #0]
 8014afe:	f7ff fa98 	bl	8014032 <quorem>
 8014b02:	4639      	mov	r1, r7
 8014b04:	9002      	str	r0, [sp, #8]
 8014b06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014b0a:	4648      	mov	r0, r9
 8014b0c:	f000 fba4 	bl	8015258 <__mcmp>
 8014b10:	462a      	mov	r2, r5
 8014b12:	9008      	str	r0, [sp, #32]
 8014b14:	4621      	mov	r1, r4
 8014b16:	4658      	mov	r0, fp
 8014b18:	f000 fbba 	bl	8015290 <__mdiff>
 8014b1c:	68c2      	ldr	r2, [r0, #12]
 8014b1e:	4606      	mov	r6, r0
 8014b20:	bb02      	cbnz	r2, 8014b64 <_dtoa_r+0xa1c>
 8014b22:	4601      	mov	r1, r0
 8014b24:	4648      	mov	r0, r9
 8014b26:	f000 fb97 	bl	8015258 <__mcmp>
 8014b2a:	4602      	mov	r2, r0
 8014b2c:	4631      	mov	r1, r6
 8014b2e:	4658      	mov	r0, fp
 8014b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8014b32:	f000 f957 	bl	8014de4 <_Bfree>
 8014b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b3a:	9e07      	ldr	r6, [sp, #28]
 8014b3c:	ea43 0102 	orr.w	r1, r3, r2
 8014b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b42:	4319      	orrs	r1, r3
 8014b44:	d110      	bne.n	8014b68 <_dtoa_r+0xa20>
 8014b46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014b4a:	d029      	beq.n	8014ba0 <_dtoa_r+0xa58>
 8014b4c:	9b08      	ldr	r3, [sp, #32]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	dd02      	ble.n	8014b58 <_dtoa_r+0xa10>
 8014b52:	9b02      	ldr	r3, [sp, #8]
 8014b54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014b58:	9b00      	ldr	r3, [sp, #0]
 8014b5a:	f883 8000 	strb.w	r8, [r3]
 8014b5e:	e63f      	b.n	80147e0 <_dtoa_r+0x698>
 8014b60:	4628      	mov	r0, r5
 8014b62:	e7bb      	b.n	8014adc <_dtoa_r+0x994>
 8014b64:	2201      	movs	r2, #1
 8014b66:	e7e1      	b.n	8014b2c <_dtoa_r+0x9e4>
 8014b68:	9b08      	ldr	r3, [sp, #32]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	db04      	blt.n	8014b78 <_dtoa_r+0xa30>
 8014b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014b70:	430b      	orrs	r3, r1
 8014b72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014b74:	430b      	orrs	r3, r1
 8014b76:	d120      	bne.n	8014bba <_dtoa_r+0xa72>
 8014b78:	2a00      	cmp	r2, #0
 8014b7a:	dded      	ble.n	8014b58 <_dtoa_r+0xa10>
 8014b7c:	4649      	mov	r1, r9
 8014b7e:	2201      	movs	r2, #1
 8014b80:	4658      	mov	r0, fp
 8014b82:	f000 fafd 	bl	8015180 <__lshift>
 8014b86:	4621      	mov	r1, r4
 8014b88:	4681      	mov	r9, r0
 8014b8a:	f000 fb65 	bl	8015258 <__mcmp>
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	dc03      	bgt.n	8014b9a <_dtoa_r+0xa52>
 8014b92:	d1e1      	bne.n	8014b58 <_dtoa_r+0xa10>
 8014b94:	f018 0f01 	tst.w	r8, #1
 8014b98:	d0de      	beq.n	8014b58 <_dtoa_r+0xa10>
 8014b9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014b9e:	d1d8      	bne.n	8014b52 <_dtoa_r+0xa0a>
 8014ba0:	9a00      	ldr	r2, [sp, #0]
 8014ba2:	2339      	movs	r3, #57	@ 0x39
 8014ba4:	7013      	strb	r3, [r2, #0]
 8014ba6:	4633      	mov	r3, r6
 8014ba8:	461e      	mov	r6, r3
 8014baa:	3b01      	subs	r3, #1
 8014bac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014bb0:	2a39      	cmp	r2, #57	@ 0x39
 8014bb2:	d052      	beq.n	8014c5a <_dtoa_r+0xb12>
 8014bb4:	3201      	adds	r2, #1
 8014bb6:	701a      	strb	r2, [r3, #0]
 8014bb8:	e612      	b.n	80147e0 <_dtoa_r+0x698>
 8014bba:	2a00      	cmp	r2, #0
 8014bbc:	dd07      	ble.n	8014bce <_dtoa_r+0xa86>
 8014bbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014bc2:	d0ed      	beq.n	8014ba0 <_dtoa_r+0xa58>
 8014bc4:	9a00      	ldr	r2, [sp, #0]
 8014bc6:	f108 0301 	add.w	r3, r8, #1
 8014bca:	7013      	strb	r3, [r2, #0]
 8014bcc:	e608      	b.n	80147e0 <_dtoa_r+0x698>
 8014bce:	9b07      	ldr	r3, [sp, #28]
 8014bd0:	9a07      	ldr	r2, [sp, #28]
 8014bd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014bd8:	4293      	cmp	r3, r2
 8014bda:	d028      	beq.n	8014c2e <_dtoa_r+0xae6>
 8014bdc:	4649      	mov	r1, r9
 8014bde:	2300      	movs	r3, #0
 8014be0:	220a      	movs	r2, #10
 8014be2:	4658      	mov	r0, fp
 8014be4:	f000 f920 	bl	8014e28 <__multadd>
 8014be8:	42af      	cmp	r7, r5
 8014bea:	4681      	mov	r9, r0
 8014bec:	f04f 0300 	mov.w	r3, #0
 8014bf0:	f04f 020a 	mov.w	r2, #10
 8014bf4:	4639      	mov	r1, r7
 8014bf6:	4658      	mov	r0, fp
 8014bf8:	d107      	bne.n	8014c0a <_dtoa_r+0xac2>
 8014bfa:	f000 f915 	bl	8014e28 <__multadd>
 8014bfe:	4607      	mov	r7, r0
 8014c00:	4605      	mov	r5, r0
 8014c02:	9b07      	ldr	r3, [sp, #28]
 8014c04:	3301      	adds	r3, #1
 8014c06:	9307      	str	r3, [sp, #28]
 8014c08:	e774      	b.n	8014af4 <_dtoa_r+0x9ac>
 8014c0a:	f000 f90d 	bl	8014e28 <__multadd>
 8014c0e:	4629      	mov	r1, r5
 8014c10:	4607      	mov	r7, r0
 8014c12:	2300      	movs	r3, #0
 8014c14:	220a      	movs	r2, #10
 8014c16:	4658      	mov	r0, fp
 8014c18:	f000 f906 	bl	8014e28 <__multadd>
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	e7f0      	b.n	8014c02 <_dtoa_r+0xaba>
 8014c20:	9b00      	ldr	r3, [sp, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	bfcc      	ite	gt
 8014c26:	461e      	movgt	r6, r3
 8014c28:	2601      	movle	r6, #1
 8014c2a:	4456      	add	r6, sl
 8014c2c:	2700      	movs	r7, #0
 8014c2e:	4649      	mov	r1, r9
 8014c30:	2201      	movs	r2, #1
 8014c32:	4658      	mov	r0, fp
 8014c34:	f000 faa4 	bl	8015180 <__lshift>
 8014c38:	4621      	mov	r1, r4
 8014c3a:	4681      	mov	r9, r0
 8014c3c:	f000 fb0c 	bl	8015258 <__mcmp>
 8014c40:	2800      	cmp	r0, #0
 8014c42:	dcb0      	bgt.n	8014ba6 <_dtoa_r+0xa5e>
 8014c44:	d102      	bne.n	8014c4c <_dtoa_r+0xb04>
 8014c46:	f018 0f01 	tst.w	r8, #1
 8014c4a:	d1ac      	bne.n	8014ba6 <_dtoa_r+0xa5e>
 8014c4c:	4633      	mov	r3, r6
 8014c4e:	461e      	mov	r6, r3
 8014c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c54:	2a30      	cmp	r2, #48	@ 0x30
 8014c56:	d0fa      	beq.n	8014c4e <_dtoa_r+0xb06>
 8014c58:	e5c2      	b.n	80147e0 <_dtoa_r+0x698>
 8014c5a:	459a      	cmp	sl, r3
 8014c5c:	d1a4      	bne.n	8014ba8 <_dtoa_r+0xa60>
 8014c5e:	9b04      	ldr	r3, [sp, #16]
 8014c60:	3301      	adds	r3, #1
 8014c62:	9304      	str	r3, [sp, #16]
 8014c64:	2331      	movs	r3, #49	@ 0x31
 8014c66:	f88a 3000 	strb.w	r3, [sl]
 8014c6a:	e5b9      	b.n	80147e0 <_dtoa_r+0x698>
 8014c6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014ccc <_dtoa_r+0xb84>
 8014c72:	b11b      	cbz	r3, 8014c7c <_dtoa_r+0xb34>
 8014c74:	f10a 0308 	add.w	r3, sl, #8
 8014c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014c7a:	6013      	str	r3, [r2, #0]
 8014c7c:	4650      	mov	r0, sl
 8014c7e:	b019      	add	sp, #100	@ 0x64
 8014c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	f77f ae37 	ble.w	80148fa <_dtoa_r+0x7b2>
 8014c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c90:	2001      	movs	r0, #1
 8014c92:	e655      	b.n	8014940 <_dtoa_r+0x7f8>
 8014c94:	9b00      	ldr	r3, [sp, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f77f aed6 	ble.w	8014a48 <_dtoa_r+0x900>
 8014c9c:	4656      	mov	r6, sl
 8014c9e:	4621      	mov	r1, r4
 8014ca0:	4648      	mov	r0, r9
 8014ca2:	f7ff f9c6 	bl	8014032 <quorem>
 8014ca6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014caa:	f806 8b01 	strb.w	r8, [r6], #1
 8014cae:	9b00      	ldr	r3, [sp, #0]
 8014cb0:	eba6 020a 	sub.w	r2, r6, sl
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	ddb3      	ble.n	8014c20 <_dtoa_r+0xad8>
 8014cb8:	4649      	mov	r1, r9
 8014cba:	2300      	movs	r3, #0
 8014cbc:	220a      	movs	r2, #10
 8014cbe:	4658      	mov	r0, fp
 8014cc0:	f000 f8b2 	bl	8014e28 <__multadd>
 8014cc4:	4681      	mov	r9, r0
 8014cc6:	e7ea      	b.n	8014c9e <_dtoa_r+0xb56>
 8014cc8:	080167dc 	.word	0x080167dc
 8014ccc:	08016760 	.word	0x08016760

08014cd0 <_free_r>:
 8014cd0:	b538      	push	{r3, r4, r5, lr}
 8014cd2:	4605      	mov	r5, r0
 8014cd4:	2900      	cmp	r1, #0
 8014cd6:	d041      	beq.n	8014d5c <_free_r+0x8c>
 8014cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cdc:	1f0c      	subs	r4, r1, #4
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	bfb8      	it	lt
 8014ce2:	18e4      	addlt	r4, r4, r3
 8014ce4:	f7fe fad0 	bl	8013288 <__malloc_lock>
 8014ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8014d60 <_free_r+0x90>)
 8014cea:	6813      	ldr	r3, [r2, #0]
 8014cec:	b933      	cbnz	r3, 8014cfc <_free_r+0x2c>
 8014cee:	6063      	str	r3, [r4, #4]
 8014cf0:	6014      	str	r4, [r2, #0]
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cf8:	f7fe bacc 	b.w	8013294 <__malloc_unlock>
 8014cfc:	42a3      	cmp	r3, r4
 8014cfe:	d908      	bls.n	8014d12 <_free_r+0x42>
 8014d00:	6820      	ldr	r0, [r4, #0]
 8014d02:	1821      	adds	r1, r4, r0
 8014d04:	428b      	cmp	r3, r1
 8014d06:	bf01      	itttt	eq
 8014d08:	6819      	ldreq	r1, [r3, #0]
 8014d0a:	685b      	ldreq	r3, [r3, #4]
 8014d0c:	1809      	addeq	r1, r1, r0
 8014d0e:	6021      	streq	r1, [r4, #0]
 8014d10:	e7ed      	b.n	8014cee <_free_r+0x1e>
 8014d12:	461a      	mov	r2, r3
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	b10b      	cbz	r3, 8014d1c <_free_r+0x4c>
 8014d18:	42a3      	cmp	r3, r4
 8014d1a:	d9fa      	bls.n	8014d12 <_free_r+0x42>
 8014d1c:	6811      	ldr	r1, [r2, #0]
 8014d1e:	1850      	adds	r0, r2, r1
 8014d20:	42a0      	cmp	r0, r4
 8014d22:	d10b      	bne.n	8014d3c <_free_r+0x6c>
 8014d24:	6820      	ldr	r0, [r4, #0]
 8014d26:	4401      	add	r1, r0
 8014d28:	1850      	adds	r0, r2, r1
 8014d2a:	4283      	cmp	r3, r0
 8014d2c:	6011      	str	r1, [r2, #0]
 8014d2e:	d1e0      	bne.n	8014cf2 <_free_r+0x22>
 8014d30:	6818      	ldr	r0, [r3, #0]
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	6053      	str	r3, [r2, #4]
 8014d36:	4408      	add	r0, r1
 8014d38:	6010      	str	r0, [r2, #0]
 8014d3a:	e7da      	b.n	8014cf2 <_free_r+0x22>
 8014d3c:	d902      	bls.n	8014d44 <_free_r+0x74>
 8014d3e:	230c      	movs	r3, #12
 8014d40:	602b      	str	r3, [r5, #0]
 8014d42:	e7d6      	b.n	8014cf2 <_free_r+0x22>
 8014d44:	6820      	ldr	r0, [r4, #0]
 8014d46:	1821      	adds	r1, r4, r0
 8014d48:	428b      	cmp	r3, r1
 8014d4a:	bf04      	itt	eq
 8014d4c:	6819      	ldreq	r1, [r3, #0]
 8014d4e:	685b      	ldreq	r3, [r3, #4]
 8014d50:	6063      	str	r3, [r4, #4]
 8014d52:	bf04      	itt	eq
 8014d54:	1809      	addeq	r1, r1, r0
 8014d56:	6021      	streq	r1, [r4, #0]
 8014d58:	6054      	str	r4, [r2, #4]
 8014d5a:	e7ca      	b.n	8014cf2 <_free_r+0x22>
 8014d5c:	bd38      	pop	{r3, r4, r5, pc}
 8014d5e:	bf00      	nop
 8014d60:	200150a4 	.word	0x200150a4

08014d64 <_Balloc>:
 8014d64:	b570      	push	{r4, r5, r6, lr}
 8014d66:	69c6      	ldr	r6, [r0, #28]
 8014d68:	4604      	mov	r4, r0
 8014d6a:	460d      	mov	r5, r1
 8014d6c:	b976      	cbnz	r6, 8014d8c <_Balloc+0x28>
 8014d6e:	2010      	movs	r0, #16
 8014d70:	f7fe f9d8 	bl	8013124 <malloc>
 8014d74:	4602      	mov	r2, r0
 8014d76:	61e0      	str	r0, [r4, #28]
 8014d78:	b920      	cbnz	r0, 8014d84 <_Balloc+0x20>
 8014d7a:	4b18      	ldr	r3, [pc, #96]	@ (8014ddc <_Balloc+0x78>)
 8014d7c:	4818      	ldr	r0, [pc, #96]	@ (8014de0 <_Balloc+0x7c>)
 8014d7e:	216b      	movs	r1, #107	@ 0x6b
 8014d80:	f000 fd90 	bl	80158a4 <__assert_func>
 8014d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d88:	6006      	str	r6, [r0, #0]
 8014d8a:	60c6      	str	r6, [r0, #12]
 8014d8c:	69e6      	ldr	r6, [r4, #28]
 8014d8e:	68f3      	ldr	r3, [r6, #12]
 8014d90:	b183      	cbz	r3, 8014db4 <_Balloc+0x50>
 8014d92:	69e3      	ldr	r3, [r4, #28]
 8014d94:	68db      	ldr	r3, [r3, #12]
 8014d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014d9a:	b9b8      	cbnz	r0, 8014dcc <_Balloc+0x68>
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	fa01 f605 	lsl.w	r6, r1, r5
 8014da2:	1d72      	adds	r2, r6, #5
 8014da4:	0092      	lsls	r2, r2, #2
 8014da6:	4620      	mov	r0, r4
 8014da8:	f000 fd9a 	bl	80158e0 <_calloc_r>
 8014dac:	b160      	cbz	r0, 8014dc8 <_Balloc+0x64>
 8014dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014db2:	e00e      	b.n	8014dd2 <_Balloc+0x6e>
 8014db4:	2221      	movs	r2, #33	@ 0x21
 8014db6:	2104      	movs	r1, #4
 8014db8:	4620      	mov	r0, r4
 8014dba:	f000 fd91 	bl	80158e0 <_calloc_r>
 8014dbe:	69e3      	ldr	r3, [r4, #28]
 8014dc0:	60f0      	str	r0, [r6, #12]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d1e4      	bne.n	8014d92 <_Balloc+0x2e>
 8014dc8:	2000      	movs	r0, #0
 8014dca:	bd70      	pop	{r4, r5, r6, pc}
 8014dcc:	6802      	ldr	r2, [r0, #0]
 8014dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014dd8:	e7f7      	b.n	8014dca <_Balloc+0x66>
 8014dda:	bf00      	nop
 8014ddc:	0801676d 	.word	0x0801676d
 8014de0:	080167ed 	.word	0x080167ed

08014de4 <_Bfree>:
 8014de4:	b570      	push	{r4, r5, r6, lr}
 8014de6:	69c6      	ldr	r6, [r0, #28]
 8014de8:	4605      	mov	r5, r0
 8014dea:	460c      	mov	r4, r1
 8014dec:	b976      	cbnz	r6, 8014e0c <_Bfree+0x28>
 8014dee:	2010      	movs	r0, #16
 8014df0:	f7fe f998 	bl	8013124 <malloc>
 8014df4:	4602      	mov	r2, r0
 8014df6:	61e8      	str	r0, [r5, #28]
 8014df8:	b920      	cbnz	r0, 8014e04 <_Bfree+0x20>
 8014dfa:	4b09      	ldr	r3, [pc, #36]	@ (8014e20 <_Bfree+0x3c>)
 8014dfc:	4809      	ldr	r0, [pc, #36]	@ (8014e24 <_Bfree+0x40>)
 8014dfe:	218f      	movs	r1, #143	@ 0x8f
 8014e00:	f000 fd50 	bl	80158a4 <__assert_func>
 8014e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014e08:	6006      	str	r6, [r0, #0]
 8014e0a:	60c6      	str	r6, [r0, #12]
 8014e0c:	b13c      	cbz	r4, 8014e1e <_Bfree+0x3a>
 8014e0e:	69eb      	ldr	r3, [r5, #28]
 8014e10:	6862      	ldr	r2, [r4, #4]
 8014e12:	68db      	ldr	r3, [r3, #12]
 8014e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014e18:	6021      	str	r1, [r4, #0]
 8014e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014e1e:	bd70      	pop	{r4, r5, r6, pc}
 8014e20:	0801676d 	.word	0x0801676d
 8014e24:	080167ed 	.word	0x080167ed

08014e28 <__multadd>:
 8014e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2c:	690d      	ldr	r5, [r1, #16]
 8014e2e:	4607      	mov	r7, r0
 8014e30:	460c      	mov	r4, r1
 8014e32:	461e      	mov	r6, r3
 8014e34:	f101 0c14 	add.w	ip, r1, #20
 8014e38:	2000      	movs	r0, #0
 8014e3a:	f8dc 3000 	ldr.w	r3, [ip]
 8014e3e:	b299      	uxth	r1, r3
 8014e40:	fb02 6101 	mla	r1, r2, r1, r6
 8014e44:	0c1e      	lsrs	r6, r3, #16
 8014e46:	0c0b      	lsrs	r3, r1, #16
 8014e48:	fb02 3306 	mla	r3, r2, r6, r3
 8014e4c:	b289      	uxth	r1, r1
 8014e4e:	3001      	adds	r0, #1
 8014e50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014e54:	4285      	cmp	r5, r0
 8014e56:	f84c 1b04 	str.w	r1, [ip], #4
 8014e5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014e5e:	dcec      	bgt.n	8014e3a <__multadd+0x12>
 8014e60:	b30e      	cbz	r6, 8014ea6 <__multadd+0x7e>
 8014e62:	68a3      	ldr	r3, [r4, #8]
 8014e64:	42ab      	cmp	r3, r5
 8014e66:	dc19      	bgt.n	8014e9c <__multadd+0x74>
 8014e68:	6861      	ldr	r1, [r4, #4]
 8014e6a:	4638      	mov	r0, r7
 8014e6c:	3101      	adds	r1, #1
 8014e6e:	f7ff ff79 	bl	8014d64 <_Balloc>
 8014e72:	4680      	mov	r8, r0
 8014e74:	b928      	cbnz	r0, 8014e82 <__multadd+0x5a>
 8014e76:	4602      	mov	r2, r0
 8014e78:	4b0c      	ldr	r3, [pc, #48]	@ (8014eac <__multadd+0x84>)
 8014e7a:	480d      	ldr	r0, [pc, #52]	@ (8014eb0 <__multadd+0x88>)
 8014e7c:	21ba      	movs	r1, #186	@ 0xba
 8014e7e:	f000 fd11 	bl	80158a4 <__assert_func>
 8014e82:	6922      	ldr	r2, [r4, #16]
 8014e84:	3202      	adds	r2, #2
 8014e86:	f104 010c 	add.w	r1, r4, #12
 8014e8a:	0092      	lsls	r2, r2, #2
 8014e8c:	300c      	adds	r0, #12
 8014e8e:	f7ff f8c2 	bl	8014016 <memcpy>
 8014e92:	4621      	mov	r1, r4
 8014e94:	4638      	mov	r0, r7
 8014e96:	f7ff ffa5 	bl	8014de4 <_Bfree>
 8014e9a:	4644      	mov	r4, r8
 8014e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ea0:	3501      	adds	r5, #1
 8014ea2:	615e      	str	r6, [r3, #20]
 8014ea4:	6125      	str	r5, [r4, #16]
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eac:	080167dc 	.word	0x080167dc
 8014eb0:	080167ed 	.word	0x080167ed

08014eb4 <__hi0bits>:
 8014eb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014eb8:	4603      	mov	r3, r0
 8014eba:	bf36      	itet	cc
 8014ebc:	0403      	lslcc	r3, r0, #16
 8014ebe:	2000      	movcs	r0, #0
 8014ec0:	2010      	movcc	r0, #16
 8014ec2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014ec6:	bf3c      	itt	cc
 8014ec8:	021b      	lslcc	r3, r3, #8
 8014eca:	3008      	addcc	r0, #8
 8014ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014ed0:	bf3c      	itt	cc
 8014ed2:	011b      	lslcc	r3, r3, #4
 8014ed4:	3004      	addcc	r0, #4
 8014ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014eda:	bf3c      	itt	cc
 8014edc:	009b      	lslcc	r3, r3, #2
 8014ede:	3002      	addcc	r0, #2
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	db05      	blt.n	8014ef0 <__hi0bits+0x3c>
 8014ee4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014ee8:	f100 0001 	add.w	r0, r0, #1
 8014eec:	bf08      	it	eq
 8014eee:	2020      	moveq	r0, #32
 8014ef0:	4770      	bx	lr

08014ef2 <__lo0bits>:
 8014ef2:	6803      	ldr	r3, [r0, #0]
 8014ef4:	4602      	mov	r2, r0
 8014ef6:	f013 0007 	ands.w	r0, r3, #7
 8014efa:	d00b      	beq.n	8014f14 <__lo0bits+0x22>
 8014efc:	07d9      	lsls	r1, r3, #31
 8014efe:	d421      	bmi.n	8014f44 <__lo0bits+0x52>
 8014f00:	0798      	lsls	r0, r3, #30
 8014f02:	bf49      	itett	mi
 8014f04:	085b      	lsrmi	r3, r3, #1
 8014f06:	089b      	lsrpl	r3, r3, #2
 8014f08:	2001      	movmi	r0, #1
 8014f0a:	6013      	strmi	r3, [r2, #0]
 8014f0c:	bf5c      	itt	pl
 8014f0e:	6013      	strpl	r3, [r2, #0]
 8014f10:	2002      	movpl	r0, #2
 8014f12:	4770      	bx	lr
 8014f14:	b299      	uxth	r1, r3
 8014f16:	b909      	cbnz	r1, 8014f1c <__lo0bits+0x2a>
 8014f18:	0c1b      	lsrs	r3, r3, #16
 8014f1a:	2010      	movs	r0, #16
 8014f1c:	b2d9      	uxtb	r1, r3
 8014f1e:	b909      	cbnz	r1, 8014f24 <__lo0bits+0x32>
 8014f20:	3008      	adds	r0, #8
 8014f22:	0a1b      	lsrs	r3, r3, #8
 8014f24:	0719      	lsls	r1, r3, #28
 8014f26:	bf04      	itt	eq
 8014f28:	091b      	lsreq	r3, r3, #4
 8014f2a:	3004      	addeq	r0, #4
 8014f2c:	0799      	lsls	r1, r3, #30
 8014f2e:	bf04      	itt	eq
 8014f30:	089b      	lsreq	r3, r3, #2
 8014f32:	3002      	addeq	r0, #2
 8014f34:	07d9      	lsls	r1, r3, #31
 8014f36:	d403      	bmi.n	8014f40 <__lo0bits+0x4e>
 8014f38:	085b      	lsrs	r3, r3, #1
 8014f3a:	f100 0001 	add.w	r0, r0, #1
 8014f3e:	d003      	beq.n	8014f48 <__lo0bits+0x56>
 8014f40:	6013      	str	r3, [r2, #0]
 8014f42:	4770      	bx	lr
 8014f44:	2000      	movs	r0, #0
 8014f46:	4770      	bx	lr
 8014f48:	2020      	movs	r0, #32
 8014f4a:	4770      	bx	lr

08014f4c <__i2b>:
 8014f4c:	b510      	push	{r4, lr}
 8014f4e:	460c      	mov	r4, r1
 8014f50:	2101      	movs	r1, #1
 8014f52:	f7ff ff07 	bl	8014d64 <_Balloc>
 8014f56:	4602      	mov	r2, r0
 8014f58:	b928      	cbnz	r0, 8014f66 <__i2b+0x1a>
 8014f5a:	4b05      	ldr	r3, [pc, #20]	@ (8014f70 <__i2b+0x24>)
 8014f5c:	4805      	ldr	r0, [pc, #20]	@ (8014f74 <__i2b+0x28>)
 8014f5e:	f240 1145 	movw	r1, #325	@ 0x145
 8014f62:	f000 fc9f 	bl	80158a4 <__assert_func>
 8014f66:	2301      	movs	r3, #1
 8014f68:	6144      	str	r4, [r0, #20]
 8014f6a:	6103      	str	r3, [r0, #16]
 8014f6c:	bd10      	pop	{r4, pc}
 8014f6e:	bf00      	nop
 8014f70:	080167dc 	.word	0x080167dc
 8014f74:	080167ed 	.word	0x080167ed

08014f78 <__multiply>:
 8014f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f7c:	4614      	mov	r4, r2
 8014f7e:	690a      	ldr	r2, [r1, #16]
 8014f80:	6923      	ldr	r3, [r4, #16]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	bfa8      	it	ge
 8014f86:	4623      	movge	r3, r4
 8014f88:	460f      	mov	r7, r1
 8014f8a:	bfa4      	itt	ge
 8014f8c:	460c      	movge	r4, r1
 8014f8e:	461f      	movge	r7, r3
 8014f90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014f94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014f98:	68a3      	ldr	r3, [r4, #8]
 8014f9a:	6861      	ldr	r1, [r4, #4]
 8014f9c:	eb0a 0609 	add.w	r6, sl, r9
 8014fa0:	42b3      	cmp	r3, r6
 8014fa2:	b085      	sub	sp, #20
 8014fa4:	bfb8      	it	lt
 8014fa6:	3101      	addlt	r1, #1
 8014fa8:	f7ff fedc 	bl	8014d64 <_Balloc>
 8014fac:	b930      	cbnz	r0, 8014fbc <__multiply+0x44>
 8014fae:	4602      	mov	r2, r0
 8014fb0:	4b44      	ldr	r3, [pc, #272]	@ (80150c4 <__multiply+0x14c>)
 8014fb2:	4845      	ldr	r0, [pc, #276]	@ (80150c8 <__multiply+0x150>)
 8014fb4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014fb8:	f000 fc74 	bl	80158a4 <__assert_func>
 8014fbc:	f100 0514 	add.w	r5, r0, #20
 8014fc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014fc4:	462b      	mov	r3, r5
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	4543      	cmp	r3, r8
 8014fca:	d321      	bcc.n	8015010 <__multiply+0x98>
 8014fcc:	f107 0114 	add.w	r1, r7, #20
 8014fd0:	f104 0214 	add.w	r2, r4, #20
 8014fd4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014fd8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014fdc:	9302      	str	r3, [sp, #8]
 8014fde:	1b13      	subs	r3, r2, r4
 8014fe0:	3b15      	subs	r3, #21
 8014fe2:	f023 0303 	bic.w	r3, r3, #3
 8014fe6:	3304      	adds	r3, #4
 8014fe8:	f104 0715 	add.w	r7, r4, #21
 8014fec:	42ba      	cmp	r2, r7
 8014fee:	bf38      	it	cc
 8014ff0:	2304      	movcc	r3, #4
 8014ff2:	9301      	str	r3, [sp, #4]
 8014ff4:	9b02      	ldr	r3, [sp, #8]
 8014ff6:	9103      	str	r1, [sp, #12]
 8014ff8:	428b      	cmp	r3, r1
 8014ffa:	d80c      	bhi.n	8015016 <__multiply+0x9e>
 8014ffc:	2e00      	cmp	r6, #0
 8014ffe:	dd03      	ble.n	8015008 <__multiply+0x90>
 8015000:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015004:	2b00      	cmp	r3, #0
 8015006:	d05b      	beq.n	80150c0 <__multiply+0x148>
 8015008:	6106      	str	r6, [r0, #16]
 801500a:	b005      	add	sp, #20
 801500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015010:	f843 2b04 	str.w	r2, [r3], #4
 8015014:	e7d8      	b.n	8014fc8 <__multiply+0x50>
 8015016:	f8b1 a000 	ldrh.w	sl, [r1]
 801501a:	f1ba 0f00 	cmp.w	sl, #0
 801501e:	d024      	beq.n	801506a <__multiply+0xf2>
 8015020:	f104 0e14 	add.w	lr, r4, #20
 8015024:	46a9      	mov	r9, r5
 8015026:	f04f 0c00 	mov.w	ip, #0
 801502a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801502e:	f8d9 3000 	ldr.w	r3, [r9]
 8015032:	fa1f fb87 	uxth.w	fp, r7
 8015036:	b29b      	uxth	r3, r3
 8015038:	fb0a 330b 	mla	r3, sl, fp, r3
 801503c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015040:	f8d9 7000 	ldr.w	r7, [r9]
 8015044:	4463      	add	r3, ip
 8015046:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801504a:	fb0a c70b 	mla	r7, sl, fp, ip
 801504e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015052:	b29b      	uxth	r3, r3
 8015054:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015058:	4572      	cmp	r2, lr
 801505a:	f849 3b04 	str.w	r3, [r9], #4
 801505e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015062:	d8e2      	bhi.n	801502a <__multiply+0xb2>
 8015064:	9b01      	ldr	r3, [sp, #4]
 8015066:	f845 c003 	str.w	ip, [r5, r3]
 801506a:	9b03      	ldr	r3, [sp, #12]
 801506c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015070:	3104      	adds	r1, #4
 8015072:	f1b9 0f00 	cmp.w	r9, #0
 8015076:	d021      	beq.n	80150bc <__multiply+0x144>
 8015078:	682b      	ldr	r3, [r5, #0]
 801507a:	f104 0c14 	add.w	ip, r4, #20
 801507e:	46ae      	mov	lr, r5
 8015080:	f04f 0a00 	mov.w	sl, #0
 8015084:	f8bc b000 	ldrh.w	fp, [ip]
 8015088:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801508c:	fb09 770b 	mla	r7, r9, fp, r7
 8015090:	4457      	add	r7, sl
 8015092:	b29b      	uxth	r3, r3
 8015094:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015098:	f84e 3b04 	str.w	r3, [lr], #4
 801509c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80150a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150a4:	f8be 3000 	ldrh.w	r3, [lr]
 80150a8:	fb09 330a 	mla	r3, r9, sl, r3
 80150ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80150b0:	4562      	cmp	r2, ip
 80150b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150b6:	d8e5      	bhi.n	8015084 <__multiply+0x10c>
 80150b8:	9f01      	ldr	r7, [sp, #4]
 80150ba:	51eb      	str	r3, [r5, r7]
 80150bc:	3504      	adds	r5, #4
 80150be:	e799      	b.n	8014ff4 <__multiply+0x7c>
 80150c0:	3e01      	subs	r6, #1
 80150c2:	e79b      	b.n	8014ffc <__multiply+0x84>
 80150c4:	080167dc 	.word	0x080167dc
 80150c8:	080167ed 	.word	0x080167ed

080150cc <__pow5mult>:
 80150cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150d0:	4615      	mov	r5, r2
 80150d2:	f012 0203 	ands.w	r2, r2, #3
 80150d6:	4607      	mov	r7, r0
 80150d8:	460e      	mov	r6, r1
 80150da:	d007      	beq.n	80150ec <__pow5mult+0x20>
 80150dc:	4c25      	ldr	r4, [pc, #148]	@ (8015174 <__pow5mult+0xa8>)
 80150de:	3a01      	subs	r2, #1
 80150e0:	2300      	movs	r3, #0
 80150e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80150e6:	f7ff fe9f 	bl	8014e28 <__multadd>
 80150ea:	4606      	mov	r6, r0
 80150ec:	10ad      	asrs	r5, r5, #2
 80150ee:	d03d      	beq.n	801516c <__pow5mult+0xa0>
 80150f0:	69fc      	ldr	r4, [r7, #28]
 80150f2:	b97c      	cbnz	r4, 8015114 <__pow5mult+0x48>
 80150f4:	2010      	movs	r0, #16
 80150f6:	f7fe f815 	bl	8013124 <malloc>
 80150fa:	4602      	mov	r2, r0
 80150fc:	61f8      	str	r0, [r7, #28]
 80150fe:	b928      	cbnz	r0, 801510c <__pow5mult+0x40>
 8015100:	4b1d      	ldr	r3, [pc, #116]	@ (8015178 <__pow5mult+0xac>)
 8015102:	481e      	ldr	r0, [pc, #120]	@ (801517c <__pow5mult+0xb0>)
 8015104:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015108:	f000 fbcc 	bl	80158a4 <__assert_func>
 801510c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015110:	6004      	str	r4, [r0, #0]
 8015112:	60c4      	str	r4, [r0, #12]
 8015114:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801511c:	b94c      	cbnz	r4, 8015132 <__pow5mult+0x66>
 801511e:	f240 2171 	movw	r1, #625	@ 0x271
 8015122:	4638      	mov	r0, r7
 8015124:	f7ff ff12 	bl	8014f4c <__i2b>
 8015128:	2300      	movs	r3, #0
 801512a:	f8c8 0008 	str.w	r0, [r8, #8]
 801512e:	4604      	mov	r4, r0
 8015130:	6003      	str	r3, [r0, #0]
 8015132:	f04f 0900 	mov.w	r9, #0
 8015136:	07eb      	lsls	r3, r5, #31
 8015138:	d50a      	bpl.n	8015150 <__pow5mult+0x84>
 801513a:	4631      	mov	r1, r6
 801513c:	4622      	mov	r2, r4
 801513e:	4638      	mov	r0, r7
 8015140:	f7ff ff1a 	bl	8014f78 <__multiply>
 8015144:	4631      	mov	r1, r6
 8015146:	4680      	mov	r8, r0
 8015148:	4638      	mov	r0, r7
 801514a:	f7ff fe4b 	bl	8014de4 <_Bfree>
 801514e:	4646      	mov	r6, r8
 8015150:	106d      	asrs	r5, r5, #1
 8015152:	d00b      	beq.n	801516c <__pow5mult+0xa0>
 8015154:	6820      	ldr	r0, [r4, #0]
 8015156:	b938      	cbnz	r0, 8015168 <__pow5mult+0x9c>
 8015158:	4622      	mov	r2, r4
 801515a:	4621      	mov	r1, r4
 801515c:	4638      	mov	r0, r7
 801515e:	f7ff ff0b 	bl	8014f78 <__multiply>
 8015162:	6020      	str	r0, [r4, #0]
 8015164:	f8c0 9000 	str.w	r9, [r0]
 8015168:	4604      	mov	r4, r0
 801516a:	e7e4      	b.n	8015136 <__pow5mult+0x6a>
 801516c:	4630      	mov	r0, r6
 801516e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015172:	bf00      	nop
 8015174:	08016848 	.word	0x08016848
 8015178:	0801676d 	.word	0x0801676d
 801517c:	080167ed 	.word	0x080167ed

08015180 <__lshift>:
 8015180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015184:	460c      	mov	r4, r1
 8015186:	6849      	ldr	r1, [r1, #4]
 8015188:	6923      	ldr	r3, [r4, #16]
 801518a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801518e:	68a3      	ldr	r3, [r4, #8]
 8015190:	4607      	mov	r7, r0
 8015192:	4691      	mov	r9, r2
 8015194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015198:	f108 0601 	add.w	r6, r8, #1
 801519c:	42b3      	cmp	r3, r6
 801519e:	db0b      	blt.n	80151b8 <__lshift+0x38>
 80151a0:	4638      	mov	r0, r7
 80151a2:	f7ff fddf 	bl	8014d64 <_Balloc>
 80151a6:	4605      	mov	r5, r0
 80151a8:	b948      	cbnz	r0, 80151be <__lshift+0x3e>
 80151aa:	4602      	mov	r2, r0
 80151ac:	4b28      	ldr	r3, [pc, #160]	@ (8015250 <__lshift+0xd0>)
 80151ae:	4829      	ldr	r0, [pc, #164]	@ (8015254 <__lshift+0xd4>)
 80151b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80151b4:	f000 fb76 	bl	80158a4 <__assert_func>
 80151b8:	3101      	adds	r1, #1
 80151ba:	005b      	lsls	r3, r3, #1
 80151bc:	e7ee      	b.n	801519c <__lshift+0x1c>
 80151be:	2300      	movs	r3, #0
 80151c0:	f100 0114 	add.w	r1, r0, #20
 80151c4:	f100 0210 	add.w	r2, r0, #16
 80151c8:	4618      	mov	r0, r3
 80151ca:	4553      	cmp	r3, sl
 80151cc:	db33      	blt.n	8015236 <__lshift+0xb6>
 80151ce:	6920      	ldr	r0, [r4, #16]
 80151d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80151d4:	f104 0314 	add.w	r3, r4, #20
 80151d8:	f019 091f 	ands.w	r9, r9, #31
 80151dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80151e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80151e4:	d02b      	beq.n	801523e <__lshift+0xbe>
 80151e6:	f1c9 0e20 	rsb	lr, r9, #32
 80151ea:	468a      	mov	sl, r1
 80151ec:	2200      	movs	r2, #0
 80151ee:	6818      	ldr	r0, [r3, #0]
 80151f0:	fa00 f009 	lsl.w	r0, r0, r9
 80151f4:	4310      	orrs	r0, r2
 80151f6:	f84a 0b04 	str.w	r0, [sl], #4
 80151fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80151fe:	459c      	cmp	ip, r3
 8015200:	fa22 f20e 	lsr.w	r2, r2, lr
 8015204:	d8f3      	bhi.n	80151ee <__lshift+0x6e>
 8015206:	ebac 0304 	sub.w	r3, ip, r4
 801520a:	3b15      	subs	r3, #21
 801520c:	f023 0303 	bic.w	r3, r3, #3
 8015210:	3304      	adds	r3, #4
 8015212:	f104 0015 	add.w	r0, r4, #21
 8015216:	4584      	cmp	ip, r0
 8015218:	bf38      	it	cc
 801521a:	2304      	movcc	r3, #4
 801521c:	50ca      	str	r2, [r1, r3]
 801521e:	b10a      	cbz	r2, 8015224 <__lshift+0xa4>
 8015220:	f108 0602 	add.w	r6, r8, #2
 8015224:	3e01      	subs	r6, #1
 8015226:	4638      	mov	r0, r7
 8015228:	612e      	str	r6, [r5, #16]
 801522a:	4621      	mov	r1, r4
 801522c:	f7ff fdda 	bl	8014de4 <_Bfree>
 8015230:	4628      	mov	r0, r5
 8015232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015236:	f842 0f04 	str.w	r0, [r2, #4]!
 801523a:	3301      	adds	r3, #1
 801523c:	e7c5      	b.n	80151ca <__lshift+0x4a>
 801523e:	3904      	subs	r1, #4
 8015240:	f853 2b04 	ldr.w	r2, [r3], #4
 8015244:	f841 2f04 	str.w	r2, [r1, #4]!
 8015248:	459c      	cmp	ip, r3
 801524a:	d8f9      	bhi.n	8015240 <__lshift+0xc0>
 801524c:	e7ea      	b.n	8015224 <__lshift+0xa4>
 801524e:	bf00      	nop
 8015250:	080167dc 	.word	0x080167dc
 8015254:	080167ed 	.word	0x080167ed

08015258 <__mcmp>:
 8015258:	690a      	ldr	r2, [r1, #16]
 801525a:	4603      	mov	r3, r0
 801525c:	6900      	ldr	r0, [r0, #16]
 801525e:	1a80      	subs	r0, r0, r2
 8015260:	b530      	push	{r4, r5, lr}
 8015262:	d10e      	bne.n	8015282 <__mcmp+0x2a>
 8015264:	3314      	adds	r3, #20
 8015266:	3114      	adds	r1, #20
 8015268:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801526c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015270:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015274:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015278:	4295      	cmp	r5, r2
 801527a:	d003      	beq.n	8015284 <__mcmp+0x2c>
 801527c:	d205      	bcs.n	801528a <__mcmp+0x32>
 801527e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015282:	bd30      	pop	{r4, r5, pc}
 8015284:	42a3      	cmp	r3, r4
 8015286:	d3f3      	bcc.n	8015270 <__mcmp+0x18>
 8015288:	e7fb      	b.n	8015282 <__mcmp+0x2a>
 801528a:	2001      	movs	r0, #1
 801528c:	e7f9      	b.n	8015282 <__mcmp+0x2a>
	...

08015290 <__mdiff>:
 8015290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015294:	4689      	mov	r9, r1
 8015296:	4606      	mov	r6, r0
 8015298:	4611      	mov	r1, r2
 801529a:	4648      	mov	r0, r9
 801529c:	4614      	mov	r4, r2
 801529e:	f7ff ffdb 	bl	8015258 <__mcmp>
 80152a2:	1e05      	subs	r5, r0, #0
 80152a4:	d112      	bne.n	80152cc <__mdiff+0x3c>
 80152a6:	4629      	mov	r1, r5
 80152a8:	4630      	mov	r0, r6
 80152aa:	f7ff fd5b 	bl	8014d64 <_Balloc>
 80152ae:	4602      	mov	r2, r0
 80152b0:	b928      	cbnz	r0, 80152be <__mdiff+0x2e>
 80152b2:	4b3f      	ldr	r3, [pc, #252]	@ (80153b0 <__mdiff+0x120>)
 80152b4:	f240 2137 	movw	r1, #567	@ 0x237
 80152b8:	483e      	ldr	r0, [pc, #248]	@ (80153b4 <__mdiff+0x124>)
 80152ba:	f000 faf3 	bl	80158a4 <__assert_func>
 80152be:	2301      	movs	r3, #1
 80152c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80152c4:	4610      	mov	r0, r2
 80152c6:	b003      	add	sp, #12
 80152c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152cc:	bfbc      	itt	lt
 80152ce:	464b      	movlt	r3, r9
 80152d0:	46a1      	movlt	r9, r4
 80152d2:	4630      	mov	r0, r6
 80152d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80152d8:	bfba      	itte	lt
 80152da:	461c      	movlt	r4, r3
 80152dc:	2501      	movlt	r5, #1
 80152de:	2500      	movge	r5, #0
 80152e0:	f7ff fd40 	bl	8014d64 <_Balloc>
 80152e4:	4602      	mov	r2, r0
 80152e6:	b918      	cbnz	r0, 80152f0 <__mdiff+0x60>
 80152e8:	4b31      	ldr	r3, [pc, #196]	@ (80153b0 <__mdiff+0x120>)
 80152ea:	f240 2145 	movw	r1, #581	@ 0x245
 80152ee:	e7e3      	b.n	80152b8 <__mdiff+0x28>
 80152f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80152f4:	6926      	ldr	r6, [r4, #16]
 80152f6:	60c5      	str	r5, [r0, #12]
 80152f8:	f109 0310 	add.w	r3, r9, #16
 80152fc:	f109 0514 	add.w	r5, r9, #20
 8015300:	f104 0e14 	add.w	lr, r4, #20
 8015304:	f100 0b14 	add.w	fp, r0, #20
 8015308:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801530c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015310:	9301      	str	r3, [sp, #4]
 8015312:	46d9      	mov	r9, fp
 8015314:	f04f 0c00 	mov.w	ip, #0
 8015318:	9b01      	ldr	r3, [sp, #4]
 801531a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801531e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015322:	9301      	str	r3, [sp, #4]
 8015324:	fa1f f38a 	uxth.w	r3, sl
 8015328:	4619      	mov	r1, r3
 801532a:	b283      	uxth	r3, r0
 801532c:	1acb      	subs	r3, r1, r3
 801532e:	0c00      	lsrs	r0, r0, #16
 8015330:	4463      	add	r3, ip
 8015332:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015336:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801533a:	b29b      	uxth	r3, r3
 801533c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015340:	4576      	cmp	r6, lr
 8015342:	f849 3b04 	str.w	r3, [r9], #4
 8015346:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801534a:	d8e5      	bhi.n	8015318 <__mdiff+0x88>
 801534c:	1b33      	subs	r3, r6, r4
 801534e:	3b15      	subs	r3, #21
 8015350:	f023 0303 	bic.w	r3, r3, #3
 8015354:	3415      	adds	r4, #21
 8015356:	3304      	adds	r3, #4
 8015358:	42a6      	cmp	r6, r4
 801535a:	bf38      	it	cc
 801535c:	2304      	movcc	r3, #4
 801535e:	441d      	add	r5, r3
 8015360:	445b      	add	r3, fp
 8015362:	461e      	mov	r6, r3
 8015364:	462c      	mov	r4, r5
 8015366:	4544      	cmp	r4, r8
 8015368:	d30e      	bcc.n	8015388 <__mdiff+0xf8>
 801536a:	f108 0103 	add.w	r1, r8, #3
 801536e:	1b49      	subs	r1, r1, r5
 8015370:	f021 0103 	bic.w	r1, r1, #3
 8015374:	3d03      	subs	r5, #3
 8015376:	45a8      	cmp	r8, r5
 8015378:	bf38      	it	cc
 801537a:	2100      	movcc	r1, #0
 801537c:	440b      	add	r3, r1
 801537e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015382:	b191      	cbz	r1, 80153aa <__mdiff+0x11a>
 8015384:	6117      	str	r7, [r2, #16]
 8015386:	e79d      	b.n	80152c4 <__mdiff+0x34>
 8015388:	f854 1b04 	ldr.w	r1, [r4], #4
 801538c:	46e6      	mov	lr, ip
 801538e:	0c08      	lsrs	r0, r1, #16
 8015390:	fa1c fc81 	uxtah	ip, ip, r1
 8015394:	4471      	add	r1, lr
 8015396:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801539a:	b289      	uxth	r1, r1
 801539c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80153a0:	f846 1b04 	str.w	r1, [r6], #4
 80153a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80153a8:	e7dd      	b.n	8015366 <__mdiff+0xd6>
 80153aa:	3f01      	subs	r7, #1
 80153ac:	e7e7      	b.n	801537e <__mdiff+0xee>
 80153ae:	bf00      	nop
 80153b0:	080167dc 	.word	0x080167dc
 80153b4:	080167ed 	.word	0x080167ed

080153b8 <__d2b>:
 80153b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80153bc:	460f      	mov	r7, r1
 80153be:	2101      	movs	r1, #1
 80153c0:	ec59 8b10 	vmov	r8, r9, d0
 80153c4:	4616      	mov	r6, r2
 80153c6:	f7ff fccd 	bl	8014d64 <_Balloc>
 80153ca:	4604      	mov	r4, r0
 80153cc:	b930      	cbnz	r0, 80153dc <__d2b+0x24>
 80153ce:	4602      	mov	r2, r0
 80153d0:	4b23      	ldr	r3, [pc, #140]	@ (8015460 <__d2b+0xa8>)
 80153d2:	4824      	ldr	r0, [pc, #144]	@ (8015464 <__d2b+0xac>)
 80153d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80153d8:	f000 fa64 	bl	80158a4 <__assert_func>
 80153dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80153e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153e4:	b10d      	cbz	r5, 80153ea <__d2b+0x32>
 80153e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80153ea:	9301      	str	r3, [sp, #4]
 80153ec:	f1b8 0300 	subs.w	r3, r8, #0
 80153f0:	d023      	beq.n	801543a <__d2b+0x82>
 80153f2:	4668      	mov	r0, sp
 80153f4:	9300      	str	r3, [sp, #0]
 80153f6:	f7ff fd7c 	bl	8014ef2 <__lo0bits>
 80153fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80153fe:	b1d0      	cbz	r0, 8015436 <__d2b+0x7e>
 8015400:	f1c0 0320 	rsb	r3, r0, #32
 8015404:	fa02 f303 	lsl.w	r3, r2, r3
 8015408:	430b      	orrs	r3, r1
 801540a:	40c2      	lsrs	r2, r0
 801540c:	6163      	str	r3, [r4, #20]
 801540e:	9201      	str	r2, [sp, #4]
 8015410:	9b01      	ldr	r3, [sp, #4]
 8015412:	61a3      	str	r3, [r4, #24]
 8015414:	2b00      	cmp	r3, #0
 8015416:	bf0c      	ite	eq
 8015418:	2201      	moveq	r2, #1
 801541a:	2202      	movne	r2, #2
 801541c:	6122      	str	r2, [r4, #16]
 801541e:	b1a5      	cbz	r5, 801544a <__d2b+0x92>
 8015420:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015424:	4405      	add	r5, r0
 8015426:	603d      	str	r5, [r7, #0]
 8015428:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801542c:	6030      	str	r0, [r6, #0]
 801542e:	4620      	mov	r0, r4
 8015430:	b003      	add	sp, #12
 8015432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015436:	6161      	str	r1, [r4, #20]
 8015438:	e7ea      	b.n	8015410 <__d2b+0x58>
 801543a:	a801      	add	r0, sp, #4
 801543c:	f7ff fd59 	bl	8014ef2 <__lo0bits>
 8015440:	9b01      	ldr	r3, [sp, #4]
 8015442:	6163      	str	r3, [r4, #20]
 8015444:	3020      	adds	r0, #32
 8015446:	2201      	movs	r2, #1
 8015448:	e7e8      	b.n	801541c <__d2b+0x64>
 801544a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801544e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015452:	6038      	str	r0, [r7, #0]
 8015454:	6918      	ldr	r0, [r3, #16]
 8015456:	f7ff fd2d 	bl	8014eb4 <__hi0bits>
 801545a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801545e:	e7e5      	b.n	801542c <__d2b+0x74>
 8015460:	080167dc 	.word	0x080167dc
 8015464:	080167ed 	.word	0x080167ed

08015468 <__ssputs_r>:
 8015468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801546c:	688e      	ldr	r6, [r1, #8]
 801546e:	461f      	mov	r7, r3
 8015470:	42be      	cmp	r6, r7
 8015472:	680b      	ldr	r3, [r1, #0]
 8015474:	4682      	mov	sl, r0
 8015476:	460c      	mov	r4, r1
 8015478:	4690      	mov	r8, r2
 801547a:	d82d      	bhi.n	80154d8 <__ssputs_r+0x70>
 801547c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015480:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015484:	d026      	beq.n	80154d4 <__ssputs_r+0x6c>
 8015486:	6965      	ldr	r5, [r4, #20]
 8015488:	6909      	ldr	r1, [r1, #16]
 801548a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801548e:	eba3 0901 	sub.w	r9, r3, r1
 8015492:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015496:	1c7b      	adds	r3, r7, #1
 8015498:	444b      	add	r3, r9
 801549a:	106d      	asrs	r5, r5, #1
 801549c:	429d      	cmp	r5, r3
 801549e:	bf38      	it	cc
 80154a0:	461d      	movcc	r5, r3
 80154a2:	0553      	lsls	r3, r2, #21
 80154a4:	d527      	bpl.n	80154f6 <__ssputs_r+0x8e>
 80154a6:	4629      	mov	r1, r5
 80154a8:	f7fd fe6e 	bl	8013188 <_malloc_r>
 80154ac:	4606      	mov	r6, r0
 80154ae:	b360      	cbz	r0, 801550a <__ssputs_r+0xa2>
 80154b0:	6921      	ldr	r1, [r4, #16]
 80154b2:	464a      	mov	r2, r9
 80154b4:	f7fe fdaf 	bl	8014016 <memcpy>
 80154b8:	89a3      	ldrh	r3, [r4, #12]
 80154ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80154be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80154c2:	81a3      	strh	r3, [r4, #12]
 80154c4:	6126      	str	r6, [r4, #16]
 80154c6:	6165      	str	r5, [r4, #20]
 80154c8:	444e      	add	r6, r9
 80154ca:	eba5 0509 	sub.w	r5, r5, r9
 80154ce:	6026      	str	r6, [r4, #0]
 80154d0:	60a5      	str	r5, [r4, #8]
 80154d2:	463e      	mov	r6, r7
 80154d4:	42be      	cmp	r6, r7
 80154d6:	d900      	bls.n	80154da <__ssputs_r+0x72>
 80154d8:	463e      	mov	r6, r7
 80154da:	6820      	ldr	r0, [r4, #0]
 80154dc:	4632      	mov	r2, r6
 80154de:	4641      	mov	r1, r8
 80154e0:	f000 f9c6 	bl	8015870 <memmove>
 80154e4:	68a3      	ldr	r3, [r4, #8]
 80154e6:	1b9b      	subs	r3, r3, r6
 80154e8:	60a3      	str	r3, [r4, #8]
 80154ea:	6823      	ldr	r3, [r4, #0]
 80154ec:	4433      	add	r3, r6
 80154ee:	6023      	str	r3, [r4, #0]
 80154f0:	2000      	movs	r0, #0
 80154f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154f6:	462a      	mov	r2, r5
 80154f8:	f000 fa18 	bl	801592c <_realloc_r>
 80154fc:	4606      	mov	r6, r0
 80154fe:	2800      	cmp	r0, #0
 8015500:	d1e0      	bne.n	80154c4 <__ssputs_r+0x5c>
 8015502:	6921      	ldr	r1, [r4, #16]
 8015504:	4650      	mov	r0, sl
 8015506:	f7ff fbe3 	bl	8014cd0 <_free_r>
 801550a:	230c      	movs	r3, #12
 801550c:	f8ca 3000 	str.w	r3, [sl]
 8015510:	89a3      	ldrh	r3, [r4, #12]
 8015512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015516:	81a3      	strh	r3, [r4, #12]
 8015518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801551c:	e7e9      	b.n	80154f2 <__ssputs_r+0x8a>
	...

08015520 <_svfiprintf_r>:
 8015520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015524:	4698      	mov	r8, r3
 8015526:	898b      	ldrh	r3, [r1, #12]
 8015528:	061b      	lsls	r3, r3, #24
 801552a:	b09d      	sub	sp, #116	@ 0x74
 801552c:	4607      	mov	r7, r0
 801552e:	460d      	mov	r5, r1
 8015530:	4614      	mov	r4, r2
 8015532:	d510      	bpl.n	8015556 <_svfiprintf_r+0x36>
 8015534:	690b      	ldr	r3, [r1, #16]
 8015536:	b973      	cbnz	r3, 8015556 <_svfiprintf_r+0x36>
 8015538:	2140      	movs	r1, #64	@ 0x40
 801553a:	f7fd fe25 	bl	8013188 <_malloc_r>
 801553e:	6028      	str	r0, [r5, #0]
 8015540:	6128      	str	r0, [r5, #16]
 8015542:	b930      	cbnz	r0, 8015552 <_svfiprintf_r+0x32>
 8015544:	230c      	movs	r3, #12
 8015546:	603b      	str	r3, [r7, #0]
 8015548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801554c:	b01d      	add	sp, #116	@ 0x74
 801554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015552:	2340      	movs	r3, #64	@ 0x40
 8015554:	616b      	str	r3, [r5, #20]
 8015556:	2300      	movs	r3, #0
 8015558:	9309      	str	r3, [sp, #36]	@ 0x24
 801555a:	2320      	movs	r3, #32
 801555c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015560:	f8cd 800c 	str.w	r8, [sp, #12]
 8015564:	2330      	movs	r3, #48	@ 0x30
 8015566:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015704 <_svfiprintf_r+0x1e4>
 801556a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801556e:	f04f 0901 	mov.w	r9, #1
 8015572:	4623      	mov	r3, r4
 8015574:	469a      	mov	sl, r3
 8015576:	f813 2b01 	ldrb.w	r2, [r3], #1
 801557a:	b10a      	cbz	r2, 8015580 <_svfiprintf_r+0x60>
 801557c:	2a25      	cmp	r2, #37	@ 0x25
 801557e:	d1f9      	bne.n	8015574 <_svfiprintf_r+0x54>
 8015580:	ebba 0b04 	subs.w	fp, sl, r4
 8015584:	d00b      	beq.n	801559e <_svfiprintf_r+0x7e>
 8015586:	465b      	mov	r3, fp
 8015588:	4622      	mov	r2, r4
 801558a:	4629      	mov	r1, r5
 801558c:	4638      	mov	r0, r7
 801558e:	f7ff ff6b 	bl	8015468 <__ssputs_r>
 8015592:	3001      	adds	r0, #1
 8015594:	f000 80a7 	beq.w	80156e6 <_svfiprintf_r+0x1c6>
 8015598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801559a:	445a      	add	r2, fp
 801559c:	9209      	str	r2, [sp, #36]	@ 0x24
 801559e:	f89a 3000 	ldrb.w	r3, [sl]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	f000 809f 	beq.w	80156e6 <_svfiprintf_r+0x1c6>
 80155a8:	2300      	movs	r3, #0
 80155aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80155ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155b2:	f10a 0a01 	add.w	sl, sl, #1
 80155b6:	9304      	str	r3, [sp, #16]
 80155b8:	9307      	str	r3, [sp, #28]
 80155ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80155be:	931a      	str	r3, [sp, #104]	@ 0x68
 80155c0:	4654      	mov	r4, sl
 80155c2:	2205      	movs	r2, #5
 80155c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155c8:	484e      	ldr	r0, [pc, #312]	@ (8015704 <_svfiprintf_r+0x1e4>)
 80155ca:	f7ea fe29 	bl	8000220 <memchr>
 80155ce:	9a04      	ldr	r2, [sp, #16]
 80155d0:	b9d8      	cbnz	r0, 801560a <_svfiprintf_r+0xea>
 80155d2:	06d0      	lsls	r0, r2, #27
 80155d4:	bf44      	itt	mi
 80155d6:	2320      	movmi	r3, #32
 80155d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155dc:	0711      	lsls	r1, r2, #28
 80155de:	bf44      	itt	mi
 80155e0:	232b      	movmi	r3, #43	@ 0x2b
 80155e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155e6:	f89a 3000 	ldrb.w	r3, [sl]
 80155ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80155ec:	d015      	beq.n	801561a <_svfiprintf_r+0xfa>
 80155ee:	9a07      	ldr	r2, [sp, #28]
 80155f0:	4654      	mov	r4, sl
 80155f2:	2000      	movs	r0, #0
 80155f4:	f04f 0c0a 	mov.w	ip, #10
 80155f8:	4621      	mov	r1, r4
 80155fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155fe:	3b30      	subs	r3, #48	@ 0x30
 8015600:	2b09      	cmp	r3, #9
 8015602:	d94b      	bls.n	801569c <_svfiprintf_r+0x17c>
 8015604:	b1b0      	cbz	r0, 8015634 <_svfiprintf_r+0x114>
 8015606:	9207      	str	r2, [sp, #28]
 8015608:	e014      	b.n	8015634 <_svfiprintf_r+0x114>
 801560a:	eba0 0308 	sub.w	r3, r0, r8
 801560e:	fa09 f303 	lsl.w	r3, r9, r3
 8015612:	4313      	orrs	r3, r2
 8015614:	9304      	str	r3, [sp, #16]
 8015616:	46a2      	mov	sl, r4
 8015618:	e7d2      	b.n	80155c0 <_svfiprintf_r+0xa0>
 801561a:	9b03      	ldr	r3, [sp, #12]
 801561c:	1d19      	adds	r1, r3, #4
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	9103      	str	r1, [sp, #12]
 8015622:	2b00      	cmp	r3, #0
 8015624:	bfbb      	ittet	lt
 8015626:	425b      	neglt	r3, r3
 8015628:	f042 0202 	orrlt.w	r2, r2, #2
 801562c:	9307      	strge	r3, [sp, #28]
 801562e:	9307      	strlt	r3, [sp, #28]
 8015630:	bfb8      	it	lt
 8015632:	9204      	strlt	r2, [sp, #16]
 8015634:	7823      	ldrb	r3, [r4, #0]
 8015636:	2b2e      	cmp	r3, #46	@ 0x2e
 8015638:	d10a      	bne.n	8015650 <_svfiprintf_r+0x130>
 801563a:	7863      	ldrb	r3, [r4, #1]
 801563c:	2b2a      	cmp	r3, #42	@ 0x2a
 801563e:	d132      	bne.n	80156a6 <_svfiprintf_r+0x186>
 8015640:	9b03      	ldr	r3, [sp, #12]
 8015642:	1d1a      	adds	r2, r3, #4
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	9203      	str	r2, [sp, #12]
 8015648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801564c:	3402      	adds	r4, #2
 801564e:	9305      	str	r3, [sp, #20]
 8015650:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015714 <_svfiprintf_r+0x1f4>
 8015654:	7821      	ldrb	r1, [r4, #0]
 8015656:	2203      	movs	r2, #3
 8015658:	4650      	mov	r0, sl
 801565a:	f7ea fde1 	bl	8000220 <memchr>
 801565e:	b138      	cbz	r0, 8015670 <_svfiprintf_r+0x150>
 8015660:	9b04      	ldr	r3, [sp, #16]
 8015662:	eba0 000a 	sub.w	r0, r0, sl
 8015666:	2240      	movs	r2, #64	@ 0x40
 8015668:	4082      	lsls	r2, r0
 801566a:	4313      	orrs	r3, r2
 801566c:	3401      	adds	r4, #1
 801566e:	9304      	str	r3, [sp, #16]
 8015670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015674:	4824      	ldr	r0, [pc, #144]	@ (8015708 <_svfiprintf_r+0x1e8>)
 8015676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801567a:	2206      	movs	r2, #6
 801567c:	f7ea fdd0 	bl	8000220 <memchr>
 8015680:	2800      	cmp	r0, #0
 8015682:	d036      	beq.n	80156f2 <_svfiprintf_r+0x1d2>
 8015684:	4b21      	ldr	r3, [pc, #132]	@ (801570c <_svfiprintf_r+0x1ec>)
 8015686:	bb1b      	cbnz	r3, 80156d0 <_svfiprintf_r+0x1b0>
 8015688:	9b03      	ldr	r3, [sp, #12]
 801568a:	3307      	adds	r3, #7
 801568c:	f023 0307 	bic.w	r3, r3, #7
 8015690:	3308      	adds	r3, #8
 8015692:	9303      	str	r3, [sp, #12]
 8015694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015696:	4433      	add	r3, r6
 8015698:	9309      	str	r3, [sp, #36]	@ 0x24
 801569a:	e76a      	b.n	8015572 <_svfiprintf_r+0x52>
 801569c:	fb0c 3202 	mla	r2, ip, r2, r3
 80156a0:	460c      	mov	r4, r1
 80156a2:	2001      	movs	r0, #1
 80156a4:	e7a8      	b.n	80155f8 <_svfiprintf_r+0xd8>
 80156a6:	2300      	movs	r3, #0
 80156a8:	3401      	adds	r4, #1
 80156aa:	9305      	str	r3, [sp, #20]
 80156ac:	4619      	mov	r1, r3
 80156ae:	f04f 0c0a 	mov.w	ip, #10
 80156b2:	4620      	mov	r0, r4
 80156b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156b8:	3a30      	subs	r2, #48	@ 0x30
 80156ba:	2a09      	cmp	r2, #9
 80156bc:	d903      	bls.n	80156c6 <_svfiprintf_r+0x1a6>
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d0c6      	beq.n	8015650 <_svfiprintf_r+0x130>
 80156c2:	9105      	str	r1, [sp, #20]
 80156c4:	e7c4      	b.n	8015650 <_svfiprintf_r+0x130>
 80156c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80156ca:	4604      	mov	r4, r0
 80156cc:	2301      	movs	r3, #1
 80156ce:	e7f0      	b.n	80156b2 <_svfiprintf_r+0x192>
 80156d0:	ab03      	add	r3, sp, #12
 80156d2:	9300      	str	r3, [sp, #0]
 80156d4:	462a      	mov	r2, r5
 80156d6:	4b0e      	ldr	r3, [pc, #56]	@ (8015710 <_svfiprintf_r+0x1f0>)
 80156d8:	a904      	add	r1, sp, #16
 80156da:	4638      	mov	r0, r7
 80156dc:	f7fd fe80 	bl	80133e0 <_printf_float>
 80156e0:	1c42      	adds	r2, r0, #1
 80156e2:	4606      	mov	r6, r0
 80156e4:	d1d6      	bne.n	8015694 <_svfiprintf_r+0x174>
 80156e6:	89ab      	ldrh	r3, [r5, #12]
 80156e8:	065b      	lsls	r3, r3, #25
 80156ea:	f53f af2d 	bmi.w	8015548 <_svfiprintf_r+0x28>
 80156ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156f0:	e72c      	b.n	801554c <_svfiprintf_r+0x2c>
 80156f2:	ab03      	add	r3, sp, #12
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	462a      	mov	r2, r5
 80156f8:	4b05      	ldr	r3, [pc, #20]	@ (8015710 <_svfiprintf_r+0x1f0>)
 80156fa:	a904      	add	r1, sp, #16
 80156fc:	4638      	mov	r0, r7
 80156fe:	f7fe f907 	bl	8013910 <_printf_i>
 8015702:	e7ed      	b.n	80156e0 <_svfiprintf_r+0x1c0>
 8015704:	08016948 	.word	0x08016948
 8015708:	08016952 	.word	0x08016952
 801570c:	080133e1 	.word	0x080133e1
 8015710:	08015469 	.word	0x08015469
 8015714:	0801694e 	.word	0x0801694e

08015718 <__sflush_r>:
 8015718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015720:	0716      	lsls	r6, r2, #28
 8015722:	4605      	mov	r5, r0
 8015724:	460c      	mov	r4, r1
 8015726:	d454      	bmi.n	80157d2 <__sflush_r+0xba>
 8015728:	684b      	ldr	r3, [r1, #4]
 801572a:	2b00      	cmp	r3, #0
 801572c:	dc02      	bgt.n	8015734 <__sflush_r+0x1c>
 801572e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015730:	2b00      	cmp	r3, #0
 8015732:	dd48      	ble.n	80157c6 <__sflush_r+0xae>
 8015734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015736:	2e00      	cmp	r6, #0
 8015738:	d045      	beq.n	80157c6 <__sflush_r+0xae>
 801573a:	2300      	movs	r3, #0
 801573c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015740:	682f      	ldr	r7, [r5, #0]
 8015742:	6a21      	ldr	r1, [r4, #32]
 8015744:	602b      	str	r3, [r5, #0]
 8015746:	d030      	beq.n	80157aa <__sflush_r+0x92>
 8015748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801574a:	89a3      	ldrh	r3, [r4, #12]
 801574c:	0759      	lsls	r1, r3, #29
 801574e:	d505      	bpl.n	801575c <__sflush_r+0x44>
 8015750:	6863      	ldr	r3, [r4, #4]
 8015752:	1ad2      	subs	r2, r2, r3
 8015754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015756:	b10b      	cbz	r3, 801575c <__sflush_r+0x44>
 8015758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801575a:	1ad2      	subs	r2, r2, r3
 801575c:	2300      	movs	r3, #0
 801575e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015760:	6a21      	ldr	r1, [r4, #32]
 8015762:	4628      	mov	r0, r5
 8015764:	47b0      	blx	r6
 8015766:	1c43      	adds	r3, r0, #1
 8015768:	89a3      	ldrh	r3, [r4, #12]
 801576a:	d106      	bne.n	801577a <__sflush_r+0x62>
 801576c:	6829      	ldr	r1, [r5, #0]
 801576e:	291d      	cmp	r1, #29
 8015770:	d82b      	bhi.n	80157ca <__sflush_r+0xb2>
 8015772:	4a2a      	ldr	r2, [pc, #168]	@ (801581c <__sflush_r+0x104>)
 8015774:	410a      	asrs	r2, r1
 8015776:	07d6      	lsls	r6, r2, #31
 8015778:	d427      	bmi.n	80157ca <__sflush_r+0xb2>
 801577a:	2200      	movs	r2, #0
 801577c:	6062      	str	r2, [r4, #4]
 801577e:	04d9      	lsls	r1, r3, #19
 8015780:	6922      	ldr	r2, [r4, #16]
 8015782:	6022      	str	r2, [r4, #0]
 8015784:	d504      	bpl.n	8015790 <__sflush_r+0x78>
 8015786:	1c42      	adds	r2, r0, #1
 8015788:	d101      	bne.n	801578e <__sflush_r+0x76>
 801578a:	682b      	ldr	r3, [r5, #0]
 801578c:	b903      	cbnz	r3, 8015790 <__sflush_r+0x78>
 801578e:	6560      	str	r0, [r4, #84]	@ 0x54
 8015790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015792:	602f      	str	r7, [r5, #0]
 8015794:	b1b9      	cbz	r1, 80157c6 <__sflush_r+0xae>
 8015796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801579a:	4299      	cmp	r1, r3
 801579c:	d002      	beq.n	80157a4 <__sflush_r+0x8c>
 801579e:	4628      	mov	r0, r5
 80157a0:	f7ff fa96 	bl	8014cd0 <_free_r>
 80157a4:	2300      	movs	r3, #0
 80157a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80157a8:	e00d      	b.n	80157c6 <__sflush_r+0xae>
 80157aa:	2301      	movs	r3, #1
 80157ac:	4628      	mov	r0, r5
 80157ae:	47b0      	blx	r6
 80157b0:	4602      	mov	r2, r0
 80157b2:	1c50      	adds	r0, r2, #1
 80157b4:	d1c9      	bne.n	801574a <__sflush_r+0x32>
 80157b6:	682b      	ldr	r3, [r5, #0]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d0c6      	beq.n	801574a <__sflush_r+0x32>
 80157bc:	2b1d      	cmp	r3, #29
 80157be:	d001      	beq.n	80157c4 <__sflush_r+0xac>
 80157c0:	2b16      	cmp	r3, #22
 80157c2:	d11e      	bne.n	8015802 <__sflush_r+0xea>
 80157c4:	602f      	str	r7, [r5, #0]
 80157c6:	2000      	movs	r0, #0
 80157c8:	e022      	b.n	8015810 <__sflush_r+0xf8>
 80157ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157ce:	b21b      	sxth	r3, r3
 80157d0:	e01b      	b.n	801580a <__sflush_r+0xf2>
 80157d2:	690f      	ldr	r7, [r1, #16]
 80157d4:	2f00      	cmp	r7, #0
 80157d6:	d0f6      	beq.n	80157c6 <__sflush_r+0xae>
 80157d8:	0793      	lsls	r3, r2, #30
 80157da:	680e      	ldr	r6, [r1, #0]
 80157dc:	bf08      	it	eq
 80157de:	694b      	ldreq	r3, [r1, #20]
 80157e0:	600f      	str	r7, [r1, #0]
 80157e2:	bf18      	it	ne
 80157e4:	2300      	movne	r3, #0
 80157e6:	eba6 0807 	sub.w	r8, r6, r7
 80157ea:	608b      	str	r3, [r1, #8]
 80157ec:	f1b8 0f00 	cmp.w	r8, #0
 80157f0:	dde9      	ble.n	80157c6 <__sflush_r+0xae>
 80157f2:	6a21      	ldr	r1, [r4, #32]
 80157f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80157f6:	4643      	mov	r3, r8
 80157f8:	463a      	mov	r2, r7
 80157fa:	4628      	mov	r0, r5
 80157fc:	47b0      	blx	r6
 80157fe:	2800      	cmp	r0, #0
 8015800:	dc08      	bgt.n	8015814 <__sflush_r+0xfc>
 8015802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801580a:	81a3      	strh	r3, [r4, #12]
 801580c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015814:	4407      	add	r7, r0
 8015816:	eba8 0800 	sub.w	r8, r8, r0
 801581a:	e7e7      	b.n	80157ec <__sflush_r+0xd4>
 801581c:	dfbffffe 	.word	0xdfbffffe

08015820 <_fflush_r>:
 8015820:	b538      	push	{r3, r4, r5, lr}
 8015822:	690b      	ldr	r3, [r1, #16]
 8015824:	4605      	mov	r5, r0
 8015826:	460c      	mov	r4, r1
 8015828:	b913      	cbnz	r3, 8015830 <_fflush_r+0x10>
 801582a:	2500      	movs	r5, #0
 801582c:	4628      	mov	r0, r5
 801582e:	bd38      	pop	{r3, r4, r5, pc}
 8015830:	b118      	cbz	r0, 801583a <_fflush_r+0x1a>
 8015832:	6a03      	ldr	r3, [r0, #32]
 8015834:	b90b      	cbnz	r3, 801583a <_fflush_r+0x1a>
 8015836:	f7fe fa17 	bl	8013c68 <__sinit>
 801583a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d0f3      	beq.n	801582a <_fflush_r+0xa>
 8015842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015844:	07d0      	lsls	r0, r2, #31
 8015846:	d404      	bmi.n	8015852 <_fflush_r+0x32>
 8015848:	0599      	lsls	r1, r3, #22
 801584a:	d402      	bmi.n	8015852 <_fflush_r+0x32>
 801584c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801584e:	f7fe fbe0 	bl	8014012 <__retarget_lock_acquire_recursive>
 8015852:	4628      	mov	r0, r5
 8015854:	4621      	mov	r1, r4
 8015856:	f7ff ff5f 	bl	8015718 <__sflush_r>
 801585a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801585c:	07da      	lsls	r2, r3, #31
 801585e:	4605      	mov	r5, r0
 8015860:	d4e4      	bmi.n	801582c <_fflush_r+0xc>
 8015862:	89a3      	ldrh	r3, [r4, #12]
 8015864:	059b      	lsls	r3, r3, #22
 8015866:	d4e1      	bmi.n	801582c <_fflush_r+0xc>
 8015868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801586a:	f7fe fbd3 	bl	8014014 <__retarget_lock_release_recursive>
 801586e:	e7dd      	b.n	801582c <_fflush_r+0xc>

08015870 <memmove>:
 8015870:	4288      	cmp	r0, r1
 8015872:	b510      	push	{r4, lr}
 8015874:	eb01 0402 	add.w	r4, r1, r2
 8015878:	d902      	bls.n	8015880 <memmove+0x10>
 801587a:	4284      	cmp	r4, r0
 801587c:	4623      	mov	r3, r4
 801587e:	d807      	bhi.n	8015890 <memmove+0x20>
 8015880:	1e43      	subs	r3, r0, #1
 8015882:	42a1      	cmp	r1, r4
 8015884:	d008      	beq.n	8015898 <memmove+0x28>
 8015886:	f811 2b01 	ldrb.w	r2, [r1], #1
 801588a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801588e:	e7f8      	b.n	8015882 <memmove+0x12>
 8015890:	4402      	add	r2, r0
 8015892:	4601      	mov	r1, r0
 8015894:	428a      	cmp	r2, r1
 8015896:	d100      	bne.n	801589a <memmove+0x2a>
 8015898:	bd10      	pop	{r4, pc}
 801589a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801589e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158a2:	e7f7      	b.n	8015894 <memmove+0x24>

080158a4 <__assert_func>:
 80158a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80158a6:	4614      	mov	r4, r2
 80158a8:	461a      	mov	r2, r3
 80158aa:	4b09      	ldr	r3, [pc, #36]	@ (80158d0 <__assert_func+0x2c>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	4605      	mov	r5, r0
 80158b0:	68d8      	ldr	r0, [r3, #12]
 80158b2:	b954      	cbnz	r4, 80158ca <__assert_func+0x26>
 80158b4:	4b07      	ldr	r3, [pc, #28]	@ (80158d4 <__assert_func+0x30>)
 80158b6:	461c      	mov	r4, r3
 80158b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80158bc:	9100      	str	r1, [sp, #0]
 80158be:	462b      	mov	r3, r5
 80158c0:	4905      	ldr	r1, [pc, #20]	@ (80158d8 <__assert_func+0x34>)
 80158c2:	f000 f86f 	bl	80159a4 <fiprintf>
 80158c6:	f7fd fc26 	bl	8013116 <abort>
 80158ca:	4b04      	ldr	r3, [pc, #16]	@ (80158dc <__assert_func+0x38>)
 80158cc:	e7f4      	b.n	80158b8 <__assert_func+0x14>
 80158ce:	bf00      	nop
 80158d0:	20000194 	.word	0x20000194
 80158d4:	0801699e 	.word	0x0801699e
 80158d8:	08016970 	.word	0x08016970
 80158dc:	08016963 	.word	0x08016963

080158e0 <_calloc_r>:
 80158e0:	b570      	push	{r4, r5, r6, lr}
 80158e2:	fba1 5402 	umull	r5, r4, r1, r2
 80158e6:	b93c      	cbnz	r4, 80158f8 <_calloc_r+0x18>
 80158e8:	4629      	mov	r1, r5
 80158ea:	f7fd fc4d 	bl	8013188 <_malloc_r>
 80158ee:	4606      	mov	r6, r0
 80158f0:	b928      	cbnz	r0, 80158fe <_calloc_r+0x1e>
 80158f2:	2600      	movs	r6, #0
 80158f4:	4630      	mov	r0, r6
 80158f6:	bd70      	pop	{r4, r5, r6, pc}
 80158f8:	220c      	movs	r2, #12
 80158fa:	6002      	str	r2, [r0, #0]
 80158fc:	e7f9      	b.n	80158f2 <_calloc_r+0x12>
 80158fe:	462a      	mov	r2, r5
 8015900:	4621      	mov	r1, r4
 8015902:	f7fe fa5e 	bl	8013dc2 <memset>
 8015906:	e7f5      	b.n	80158f4 <_calloc_r+0x14>

08015908 <__ascii_mbtowc>:
 8015908:	b082      	sub	sp, #8
 801590a:	b901      	cbnz	r1, 801590e <__ascii_mbtowc+0x6>
 801590c:	a901      	add	r1, sp, #4
 801590e:	b142      	cbz	r2, 8015922 <__ascii_mbtowc+0x1a>
 8015910:	b14b      	cbz	r3, 8015926 <__ascii_mbtowc+0x1e>
 8015912:	7813      	ldrb	r3, [r2, #0]
 8015914:	600b      	str	r3, [r1, #0]
 8015916:	7812      	ldrb	r2, [r2, #0]
 8015918:	1e10      	subs	r0, r2, #0
 801591a:	bf18      	it	ne
 801591c:	2001      	movne	r0, #1
 801591e:	b002      	add	sp, #8
 8015920:	4770      	bx	lr
 8015922:	4610      	mov	r0, r2
 8015924:	e7fb      	b.n	801591e <__ascii_mbtowc+0x16>
 8015926:	f06f 0001 	mvn.w	r0, #1
 801592a:	e7f8      	b.n	801591e <__ascii_mbtowc+0x16>

0801592c <_realloc_r>:
 801592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015930:	4680      	mov	r8, r0
 8015932:	4615      	mov	r5, r2
 8015934:	460c      	mov	r4, r1
 8015936:	b921      	cbnz	r1, 8015942 <_realloc_r+0x16>
 8015938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801593c:	4611      	mov	r1, r2
 801593e:	f7fd bc23 	b.w	8013188 <_malloc_r>
 8015942:	b92a      	cbnz	r2, 8015950 <_realloc_r+0x24>
 8015944:	f7ff f9c4 	bl	8014cd0 <_free_r>
 8015948:	2400      	movs	r4, #0
 801594a:	4620      	mov	r0, r4
 801594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015950:	f000 f83a 	bl	80159c8 <_malloc_usable_size_r>
 8015954:	4285      	cmp	r5, r0
 8015956:	4606      	mov	r6, r0
 8015958:	d802      	bhi.n	8015960 <_realloc_r+0x34>
 801595a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801595e:	d8f4      	bhi.n	801594a <_realloc_r+0x1e>
 8015960:	4629      	mov	r1, r5
 8015962:	4640      	mov	r0, r8
 8015964:	f7fd fc10 	bl	8013188 <_malloc_r>
 8015968:	4607      	mov	r7, r0
 801596a:	2800      	cmp	r0, #0
 801596c:	d0ec      	beq.n	8015948 <_realloc_r+0x1c>
 801596e:	42b5      	cmp	r5, r6
 8015970:	462a      	mov	r2, r5
 8015972:	4621      	mov	r1, r4
 8015974:	bf28      	it	cs
 8015976:	4632      	movcs	r2, r6
 8015978:	f7fe fb4d 	bl	8014016 <memcpy>
 801597c:	4621      	mov	r1, r4
 801597e:	4640      	mov	r0, r8
 8015980:	f7ff f9a6 	bl	8014cd0 <_free_r>
 8015984:	463c      	mov	r4, r7
 8015986:	e7e0      	b.n	801594a <_realloc_r+0x1e>

08015988 <__ascii_wctomb>:
 8015988:	4603      	mov	r3, r0
 801598a:	4608      	mov	r0, r1
 801598c:	b141      	cbz	r1, 80159a0 <__ascii_wctomb+0x18>
 801598e:	2aff      	cmp	r2, #255	@ 0xff
 8015990:	d904      	bls.n	801599c <__ascii_wctomb+0x14>
 8015992:	228a      	movs	r2, #138	@ 0x8a
 8015994:	601a      	str	r2, [r3, #0]
 8015996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801599a:	4770      	bx	lr
 801599c:	700a      	strb	r2, [r1, #0]
 801599e:	2001      	movs	r0, #1
 80159a0:	4770      	bx	lr
	...

080159a4 <fiprintf>:
 80159a4:	b40e      	push	{r1, r2, r3}
 80159a6:	b503      	push	{r0, r1, lr}
 80159a8:	4601      	mov	r1, r0
 80159aa:	ab03      	add	r3, sp, #12
 80159ac:	4805      	ldr	r0, [pc, #20]	@ (80159c4 <fiprintf+0x20>)
 80159ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80159b2:	6800      	ldr	r0, [r0, #0]
 80159b4:	9301      	str	r3, [sp, #4]
 80159b6:	f000 f839 	bl	8015a2c <_vfiprintf_r>
 80159ba:	b002      	add	sp, #8
 80159bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80159c0:	b003      	add	sp, #12
 80159c2:	4770      	bx	lr
 80159c4:	20000194 	.word	0x20000194

080159c8 <_malloc_usable_size_r>:
 80159c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159cc:	1f18      	subs	r0, r3, #4
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	bfbc      	itt	lt
 80159d2:	580b      	ldrlt	r3, [r1, r0]
 80159d4:	18c0      	addlt	r0, r0, r3
 80159d6:	4770      	bx	lr

080159d8 <__sfputc_r>:
 80159d8:	6893      	ldr	r3, [r2, #8]
 80159da:	3b01      	subs	r3, #1
 80159dc:	2b00      	cmp	r3, #0
 80159de:	b410      	push	{r4}
 80159e0:	6093      	str	r3, [r2, #8]
 80159e2:	da08      	bge.n	80159f6 <__sfputc_r+0x1e>
 80159e4:	6994      	ldr	r4, [r2, #24]
 80159e6:	42a3      	cmp	r3, r4
 80159e8:	db01      	blt.n	80159ee <__sfputc_r+0x16>
 80159ea:	290a      	cmp	r1, #10
 80159ec:	d103      	bne.n	80159f6 <__sfputc_r+0x1e>
 80159ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159f2:	f000 b933 	b.w	8015c5c <__swbuf_r>
 80159f6:	6813      	ldr	r3, [r2, #0]
 80159f8:	1c58      	adds	r0, r3, #1
 80159fa:	6010      	str	r0, [r2, #0]
 80159fc:	7019      	strb	r1, [r3, #0]
 80159fe:	4608      	mov	r0, r1
 8015a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a04:	4770      	bx	lr

08015a06 <__sfputs_r>:
 8015a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a08:	4606      	mov	r6, r0
 8015a0a:	460f      	mov	r7, r1
 8015a0c:	4614      	mov	r4, r2
 8015a0e:	18d5      	adds	r5, r2, r3
 8015a10:	42ac      	cmp	r4, r5
 8015a12:	d101      	bne.n	8015a18 <__sfputs_r+0x12>
 8015a14:	2000      	movs	r0, #0
 8015a16:	e007      	b.n	8015a28 <__sfputs_r+0x22>
 8015a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a1c:	463a      	mov	r2, r7
 8015a1e:	4630      	mov	r0, r6
 8015a20:	f7ff ffda 	bl	80159d8 <__sfputc_r>
 8015a24:	1c43      	adds	r3, r0, #1
 8015a26:	d1f3      	bne.n	8015a10 <__sfputs_r+0xa>
 8015a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a2c <_vfiprintf_r>:
 8015a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a30:	460d      	mov	r5, r1
 8015a32:	b09d      	sub	sp, #116	@ 0x74
 8015a34:	4614      	mov	r4, r2
 8015a36:	4698      	mov	r8, r3
 8015a38:	4606      	mov	r6, r0
 8015a3a:	b118      	cbz	r0, 8015a44 <_vfiprintf_r+0x18>
 8015a3c:	6a03      	ldr	r3, [r0, #32]
 8015a3e:	b90b      	cbnz	r3, 8015a44 <_vfiprintf_r+0x18>
 8015a40:	f7fe f912 	bl	8013c68 <__sinit>
 8015a44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a46:	07d9      	lsls	r1, r3, #31
 8015a48:	d405      	bmi.n	8015a56 <_vfiprintf_r+0x2a>
 8015a4a:	89ab      	ldrh	r3, [r5, #12]
 8015a4c:	059a      	lsls	r2, r3, #22
 8015a4e:	d402      	bmi.n	8015a56 <_vfiprintf_r+0x2a>
 8015a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a52:	f7fe fade 	bl	8014012 <__retarget_lock_acquire_recursive>
 8015a56:	89ab      	ldrh	r3, [r5, #12]
 8015a58:	071b      	lsls	r3, r3, #28
 8015a5a:	d501      	bpl.n	8015a60 <_vfiprintf_r+0x34>
 8015a5c:	692b      	ldr	r3, [r5, #16]
 8015a5e:	b99b      	cbnz	r3, 8015a88 <_vfiprintf_r+0x5c>
 8015a60:	4629      	mov	r1, r5
 8015a62:	4630      	mov	r0, r6
 8015a64:	f000 f938 	bl	8015cd8 <__swsetup_r>
 8015a68:	b170      	cbz	r0, 8015a88 <_vfiprintf_r+0x5c>
 8015a6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a6c:	07dc      	lsls	r4, r3, #31
 8015a6e:	d504      	bpl.n	8015a7a <_vfiprintf_r+0x4e>
 8015a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a74:	b01d      	add	sp, #116	@ 0x74
 8015a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a7a:	89ab      	ldrh	r3, [r5, #12]
 8015a7c:	0598      	lsls	r0, r3, #22
 8015a7e:	d4f7      	bmi.n	8015a70 <_vfiprintf_r+0x44>
 8015a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a82:	f7fe fac7 	bl	8014014 <__retarget_lock_release_recursive>
 8015a86:	e7f3      	b.n	8015a70 <_vfiprintf_r+0x44>
 8015a88:	2300      	movs	r3, #0
 8015a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a8c:	2320      	movs	r3, #32
 8015a8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a96:	2330      	movs	r3, #48	@ 0x30
 8015a98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015c48 <_vfiprintf_r+0x21c>
 8015a9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015aa0:	f04f 0901 	mov.w	r9, #1
 8015aa4:	4623      	mov	r3, r4
 8015aa6:	469a      	mov	sl, r3
 8015aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aac:	b10a      	cbz	r2, 8015ab2 <_vfiprintf_r+0x86>
 8015aae:	2a25      	cmp	r2, #37	@ 0x25
 8015ab0:	d1f9      	bne.n	8015aa6 <_vfiprintf_r+0x7a>
 8015ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8015ab6:	d00b      	beq.n	8015ad0 <_vfiprintf_r+0xa4>
 8015ab8:	465b      	mov	r3, fp
 8015aba:	4622      	mov	r2, r4
 8015abc:	4629      	mov	r1, r5
 8015abe:	4630      	mov	r0, r6
 8015ac0:	f7ff ffa1 	bl	8015a06 <__sfputs_r>
 8015ac4:	3001      	adds	r0, #1
 8015ac6:	f000 80a7 	beq.w	8015c18 <_vfiprintf_r+0x1ec>
 8015aca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015acc:	445a      	add	r2, fp
 8015ace:	9209      	str	r2, [sp, #36]	@ 0x24
 8015ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	f000 809f 	beq.w	8015c18 <_vfiprintf_r+0x1ec>
 8015ada:	2300      	movs	r3, #0
 8015adc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ae4:	f10a 0a01 	add.w	sl, sl, #1
 8015ae8:	9304      	str	r3, [sp, #16]
 8015aea:	9307      	str	r3, [sp, #28]
 8015aec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015af0:	931a      	str	r3, [sp, #104]	@ 0x68
 8015af2:	4654      	mov	r4, sl
 8015af4:	2205      	movs	r2, #5
 8015af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015afa:	4853      	ldr	r0, [pc, #332]	@ (8015c48 <_vfiprintf_r+0x21c>)
 8015afc:	f7ea fb90 	bl	8000220 <memchr>
 8015b00:	9a04      	ldr	r2, [sp, #16]
 8015b02:	b9d8      	cbnz	r0, 8015b3c <_vfiprintf_r+0x110>
 8015b04:	06d1      	lsls	r1, r2, #27
 8015b06:	bf44      	itt	mi
 8015b08:	2320      	movmi	r3, #32
 8015b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b0e:	0713      	lsls	r3, r2, #28
 8015b10:	bf44      	itt	mi
 8015b12:	232b      	movmi	r3, #43	@ 0x2b
 8015b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b18:	f89a 3000 	ldrb.w	r3, [sl]
 8015b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b1e:	d015      	beq.n	8015b4c <_vfiprintf_r+0x120>
 8015b20:	9a07      	ldr	r2, [sp, #28]
 8015b22:	4654      	mov	r4, sl
 8015b24:	2000      	movs	r0, #0
 8015b26:	f04f 0c0a 	mov.w	ip, #10
 8015b2a:	4621      	mov	r1, r4
 8015b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b30:	3b30      	subs	r3, #48	@ 0x30
 8015b32:	2b09      	cmp	r3, #9
 8015b34:	d94b      	bls.n	8015bce <_vfiprintf_r+0x1a2>
 8015b36:	b1b0      	cbz	r0, 8015b66 <_vfiprintf_r+0x13a>
 8015b38:	9207      	str	r2, [sp, #28]
 8015b3a:	e014      	b.n	8015b66 <_vfiprintf_r+0x13a>
 8015b3c:	eba0 0308 	sub.w	r3, r0, r8
 8015b40:	fa09 f303 	lsl.w	r3, r9, r3
 8015b44:	4313      	orrs	r3, r2
 8015b46:	9304      	str	r3, [sp, #16]
 8015b48:	46a2      	mov	sl, r4
 8015b4a:	e7d2      	b.n	8015af2 <_vfiprintf_r+0xc6>
 8015b4c:	9b03      	ldr	r3, [sp, #12]
 8015b4e:	1d19      	adds	r1, r3, #4
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	9103      	str	r1, [sp, #12]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	bfbb      	ittet	lt
 8015b58:	425b      	neglt	r3, r3
 8015b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8015b5e:	9307      	strge	r3, [sp, #28]
 8015b60:	9307      	strlt	r3, [sp, #28]
 8015b62:	bfb8      	it	lt
 8015b64:	9204      	strlt	r2, [sp, #16]
 8015b66:	7823      	ldrb	r3, [r4, #0]
 8015b68:	2b2e      	cmp	r3, #46	@ 0x2e
 8015b6a:	d10a      	bne.n	8015b82 <_vfiprintf_r+0x156>
 8015b6c:	7863      	ldrb	r3, [r4, #1]
 8015b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b70:	d132      	bne.n	8015bd8 <_vfiprintf_r+0x1ac>
 8015b72:	9b03      	ldr	r3, [sp, #12]
 8015b74:	1d1a      	adds	r2, r3, #4
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	9203      	str	r2, [sp, #12]
 8015b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015b7e:	3402      	adds	r4, #2
 8015b80:	9305      	str	r3, [sp, #20]
 8015b82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015c58 <_vfiprintf_r+0x22c>
 8015b86:	7821      	ldrb	r1, [r4, #0]
 8015b88:	2203      	movs	r2, #3
 8015b8a:	4650      	mov	r0, sl
 8015b8c:	f7ea fb48 	bl	8000220 <memchr>
 8015b90:	b138      	cbz	r0, 8015ba2 <_vfiprintf_r+0x176>
 8015b92:	9b04      	ldr	r3, [sp, #16]
 8015b94:	eba0 000a 	sub.w	r0, r0, sl
 8015b98:	2240      	movs	r2, #64	@ 0x40
 8015b9a:	4082      	lsls	r2, r0
 8015b9c:	4313      	orrs	r3, r2
 8015b9e:	3401      	adds	r4, #1
 8015ba0:	9304      	str	r3, [sp, #16]
 8015ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ba6:	4829      	ldr	r0, [pc, #164]	@ (8015c4c <_vfiprintf_r+0x220>)
 8015ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015bac:	2206      	movs	r2, #6
 8015bae:	f7ea fb37 	bl	8000220 <memchr>
 8015bb2:	2800      	cmp	r0, #0
 8015bb4:	d03f      	beq.n	8015c36 <_vfiprintf_r+0x20a>
 8015bb6:	4b26      	ldr	r3, [pc, #152]	@ (8015c50 <_vfiprintf_r+0x224>)
 8015bb8:	bb1b      	cbnz	r3, 8015c02 <_vfiprintf_r+0x1d6>
 8015bba:	9b03      	ldr	r3, [sp, #12]
 8015bbc:	3307      	adds	r3, #7
 8015bbe:	f023 0307 	bic.w	r3, r3, #7
 8015bc2:	3308      	adds	r3, #8
 8015bc4:	9303      	str	r3, [sp, #12]
 8015bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bc8:	443b      	add	r3, r7
 8015bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bcc:	e76a      	b.n	8015aa4 <_vfiprintf_r+0x78>
 8015bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bd2:	460c      	mov	r4, r1
 8015bd4:	2001      	movs	r0, #1
 8015bd6:	e7a8      	b.n	8015b2a <_vfiprintf_r+0xfe>
 8015bd8:	2300      	movs	r3, #0
 8015bda:	3401      	adds	r4, #1
 8015bdc:	9305      	str	r3, [sp, #20]
 8015bde:	4619      	mov	r1, r3
 8015be0:	f04f 0c0a 	mov.w	ip, #10
 8015be4:	4620      	mov	r0, r4
 8015be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bea:	3a30      	subs	r2, #48	@ 0x30
 8015bec:	2a09      	cmp	r2, #9
 8015bee:	d903      	bls.n	8015bf8 <_vfiprintf_r+0x1cc>
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d0c6      	beq.n	8015b82 <_vfiprintf_r+0x156>
 8015bf4:	9105      	str	r1, [sp, #20]
 8015bf6:	e7c4      	b.n	8015b82 <_vfiprintf_r+0x156>
 8015bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bfc:	4604      	mov	r4, r0
 8015bfe:	2301      	movs	r3, #1
 8015c00:	e7f0      	b.n	8015be4 <_vfiprintf_r+0x1b8>
 8015c02:	ab03      	add	r3, sp, #12
 8015c04:	9300      	str	r3, [sp, #0]
 8015c06:	462a      	mov	r2, r5
 8015c08:	4b12      	ldr	r3, [pc, #72]	@ (8015c54 <_vfiprintf_r+0x228>)
 8015c0a:	a904      	add	r1, sp, #16
 8015c0c:	4630      	mov	r0, r6
 8015c0e:	f7fd fbe7 	bl	80133e0 <_printf_float>
 8015c12:	4607      	mov	r7, r0
 8015c14:	1c78      	adds	r0, r7, #1
 8015c16:	d1d6      	bne.n	8015bc6 <_vfiprintf_r+0x19a>
 8015c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c1a:	07d9      	lsls	r1, r3, #31
 8015c1c:	d405      	bmi.n	8015c2a <_vfiprintf_r+0x1fe>
 8015c1e:	89ab      	ldrh	r3, [r5, #12]
 8015c20:	059a      	lsls	r2, r3, #22
 8015c22:	d402      	bmi.n	8015c2a <_vfiprintf_r+0x1fe>
 8015c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c26:	f7fe f9f5 	bl	8014014 <__retarget_lock_release_recursive>
 8015c2a:	89ab      	ldrh	r3, [r5, #12]
 8015c2c:	065b      	lsls	r3, r3, #25
 8015c2e:	f53f af1f 	bmi.w	8015a70 <_vfiprintf_r+0x44>
 8015c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c34:	e71e      	b.n	8015a74 <_vfiprintf_r+0x48>
 8015c36:	ab03      	add	r3, sp, #12
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	462a      	mov	r2, r5
 8015c3c:	4b05      	ldr	r3, [pc, #20]	@ (8015c54 <_vfiprintf_r+0x228>)
 8015c3e:	a904      	add	r1, sp, #16
 8015c40:	4630      	mov	r0, r6
 8015c42:	f7fd fe65 	bl	8013910 <_printf_i>
 8015c46:	e7e4      	b.n	8015c12 <_vfiprintf_r+0x1e6>
 8015c48:	08016948 	.word	0x08016948
 8015c4c:	08016952 	.word	0x08016952
 8015c50:	080133e1 	.word	0x080133e1
 8015c54:	08015a07 	.word	0x08015a07
 8015c58:	0801694e 	.word	0x0801694e

08015c5c <__swbuf_r>:
 8015c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c5e:	460e      	mov	r6, r1
 8015c60:	4614      	mov	r4, r2
 8015c62:	4605      	mov	r5, r0
 8015c64:	b118      	cbz	r0, 8015c6e <__swbuf_r+0x12>
 8015c66:	6a03      	ldr	r3, [r0, #32]
 8015c68:	b90b      	cbnz	r3, 8015c6e <__swbuf_r+0x12>
 8015c6a:	f7fd fffd 	bl	8013c68 <__sinit>
 8015c6e:	69a3      	ldr	r3, [r4, #24]
 8015c70:	60a3      	str	r3, [r4, #8]
 8015c72:	89a3      	ldrh	r3, [r4, #12]
 8015c74:	071a      	lsls	r2, r3, #28
 8015c76:	d501      	bpl.n	8015c7c <__swbuf_r+0x20>
 8015c78:	6923      	ldr	r3, [r4, #16]
 8015c7a:	b943      	cbnz	r3, 8015c8e <__swbuf_r+0x32>
 8015c7c:	4621      	mov	r1, r4
 8015c7e:	4628      	mov	r0, r5
 8015c80:	f000 f82a 	bl	8015cd8 <__swsetup_r>
 8015c84:	b118      	cbz	r0, 8015c8e <__swbuf_r+0x32>
 8015c86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015c8a:	4638      	mov	r0, r7
 8015c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c8e:	6823      	ldr	r3, [r4, #0]
 8015c90:	6922      	ldr	r2, [r4, #16]
 8015c92:	1a98      	subs	r0, r3, r2
 8015c94:	6963      	ldr	r3, [r4, #20]
 8015c96:	b2f6      	uxtb	r6, r6
 8015c98:	4283      	cmp	r3, r0
 8015c9a:	4637      	mov	r7, r6
 8015c9c:	dc05      	bgt.n	8015caa <__swbuf_r+0x4e>
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	f7ff fdbd 	bl	8015820 <_fflush_r>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d1ed      	bne.n	8015c86 <__swbuf_r+0x2a>
 8015caa:	68a3      	ldr	r3, [r4, #8]
 8015cac:	3b01      	subs	r3, #1
 8015cae:	60a3      	str	r3, [r4, #8]
 8015cb0:	6823      	ldr	r3, [r4, #0]
 8015cb2:	1c5a      	adds	r2, r3, #1
 8015cb4:	6022      	str	r2, [r4, #0]
 8015cb6:	701e      	strb	r6, [r3, #0]
 8015cb8:	6962      	ldr	r2, [r4, #20]
 8015cba:	1c43      	adds	r3, r0, #1
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d004      	beq.n	8015cca <__swbuf_r+0x6e>
 8015cc0:	89a3      	ldrh	r3, [r4, #12]
 8015cc2:	07db      	lsls	r3, r3, #31
 8015cc4:	d5e1      	bpl.n	8015c8a <__swbuf_r+0x2e>
 8015cc6:	2e0a      	cmp	r6, #10
 8015cc8:	d1df      	bne.n	8015c8a <__swbuf_r+0x2e>
 8015cca:	4621      	mov	r1, r4
 8015ccc:	4628      	mov	r0, r5
 8015cce:	f7ff fda7 	bl	8015820 <_fflush_r>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d0d9      	beq.n	8015c8a <__swbuf_r+0x2e>
 8015cd6:	e7d6      	b.n	8015c86 <__swbuf_r+0x2a>

08015cd8 <__swsetup_r>:
 8015cd8:	b538      	push	{r3, r4, r5, lr}
 8015cda:	4b29      	ldr	r3, [pc, #164]	@ (8015d80 <__swsetup_r+0xa8>)
 8015cdc:	4605      	mov	r5, r0
 8015cde:	6818      	ldr	r0, [r3, #0]
 8015ce0:	460c      	mov	r4, r1
 8015ce2:	b118      	cbz	r0, 8015cec <__swsetup_r+0x14>
 8015ce4:	6a03      	ldr	r3, [r0, #32]
 8015ce6:	b90b      	cbnz	r3, 8015cec <__swsetup_r+0x14>
 8015ce8:	f7fd ffbe 	bl	8013c68 <__sinit>
 8015cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cf0:	0719      	lsls	r1, r3, #28
 8015cf2:	d422      	bmi.n	8015d3a <__swsetup_r+0x62>
 8015cf4:	06da      	lsls	r2, r3, #27
 8015cf6:	d407      	bmi.n	8015d08 <__swsetup_r+0x30>
 8015cf8:	2209      	movs	r2, #9
 8015cfa:	602a      	str	r2, [r5, #0]
 8015cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d00:	81a3      	strh	r3, [r4, #12]
 8015d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d06:	e033      	b.n	8015d70 <__swsetup_r+0x98>
 8015d08:	0758      	lsls	r0, r3, #29
 8015d0a:	d512      	bpl.n	8015d32 <__swsetup_r+0x5a>
 8015d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015d0e:	b141      	cbz	r1, 8015d22 <__swsetup_r+0x4a>
 8015d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015d14:	4299      	cmp	r1, r3
 8015d16:	d002      	beq.n	8015d1e <__swsetup_r+0x46>
 8015d18:	4628      	mov	r0, r5
 8015d1a:	f7fe ffd9 	bl	8014cd0 <_free_r>
 8015d1e:	2300      	movs	r3, #0
 8015d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8015d22:	89a3      	ldrh	r3, [r4, #12]
 8015d24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015d28:	81a3      	strh	r3, [r4, #12]
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	6063      	str	r3, [r4, #4]
 8015d2e:	6923      	ldr	r3, [r4, #16]
 8015d30:	6023      	str	r3, [r4, #0]
 8015d32:	89a3      	ldrh	r3, [r4, #12]
 8015d34:	f043 0308 	orr.w	r3, r3, #8
 8015d38:	81a3      	strh	r3, [r4, #12]
 8015d3a:	6923      	ldr	r3, [r4, #16]
 8015d3c:	b94b      	cbnz	r3, 8015d52 <__swsetup_r+0x7a>
 8015d3e:	89a3      	ldrh	r3, [r4, #12]
 8015d40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015d48:	d003      	beq.n	8015d52 <__swsetup_r+0x7a>
 8015d4a:	4621      	mov	r1, r4
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	f000 f83f 	bl	8015dd0 <__smakebuf_r>
 8015d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d56:	f013 0201 	ands.w	r2, r3, #1
 8015d5a:	d00a      	beq.n	8015d72 <__swsetup_r+0x9a>
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	60a2      	str	r2, [r4, #8]
 8015d60:	6962      	ldr	r2, [r4, #20]
 8015d62:	4252      	negs	r2, r2
 8015d64:	61a2      	str	r2, [r4, #24]
 8015d66:	6922      	ldr	r2, [r4, #16]
 8015d68:	b942      	cbnz	r2, 8015d7c <__swsetup_r+0xa4>
 8015d6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015d6e:	d1c5      	bne.n	8015cfc <__swsetup_r+0x24>
 8015d70:	bd38      	pop	{r3, r4, r5, pc}
 8015d72:	0799      	lsls	r1, r3, #30
 8015d74:	bf58      	it	pl
 8015d76:	6962      	ldrpl	r2, [r4, #20]
 8015d78:	60a2      	str	r2, [r4, #8]
 8015d7a:	e7f4      	b.n	8015d66 <__swsetup_r+0x8e>
 8015d7c:	2000      	movs	r0, #0
 8015d7e:	e7f7      	b.n	8015d70 <__swsetup_r+0x98>
 8015d80:	20000194 	.word	0x20000194

08015d84 <__swhatbuf_r>:
 8015d84:	b570      	push	{r4, r5, r6, lr}
 8015d86:	460c      	mov	r4, r1
 8015d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d8c:	2900      	cmp	r1, #0
 8015d8e:	b096      	sub	sp, #88	@ 0x58
 8015d90:	4615      	mov	r5, r2
 8015d92:	461e      	mov	r6, r3
 8015d94:	da0d      	bge.n	8015db2 <__swhatbuf_r+0x2e>
 8015d96:	89a3      	ldrh	r3, [r4, #12]
 8015d98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015d9c:	f04f 0100 	mov.w	r1, #0
 8015da0:	bf14      	ite	ne
 8015da2:	2340      	movne	r3, #64	@ 0x40
 8015da4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015da8:	2000      	movs	r0, #0
 8015daa:	6031      	str	r1, [r6, #0]
 8015dac:	602b      	str	r3, [r5, #0]
 8015dae:	b016      	add	sp, #88	@ 0x58
 8015db0:	bd70      	pop	{r4, r5, r6, pc}
 8015db2:	466a      	mov	r2, sp
 8015db4:	f000 f848 	bl	8015e48 <_fstat_r>
 8015db8:	2800      	cmp	r0, #0
 8015dba:	dbec      	blt.n	8015d96 <__swhatbuf_r+0x12>
 8015dbc:	9901      	ldr	r1, [sp, #4]
 8015dbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015dc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015dc6:	4259      	negs	r1, r3
 8015dc8:	4159      	adcs	r1, r3
 8015dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015dce:	e7eb      	b.n	8015da8 <__swhatbuf_r+0x24>

08015dd0 <__smakebuf_r>:
 8015dd0:	898b      	ldrh	r3, [r1, #12]
 8015dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dd4:	079d      	lsls	r5, r3, #30
 8015dd6:	4606      	mov	r6, r0
 8015dd8:	460c      	mov	r4, r1
 8015dda:	d507      	bpl.n	8015dec <__smakebuf_r+0x1c>
 8015ddc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015de0:	6023      	str	r3, [r4, #0]
 8015de2:	6123      	str	r3, [r4, #16]
 8015de4:	2301      	movs	r3, #1
 8015de6:	6163      	str	r3, [r4, #20]
 8015de8:	b003      	add	sp, #12
 8015dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dec:	ab01      	add	r3, sp, #4
 8015dee:	466a      	mov	r2, sp
 8015df0:	f7ff ffc8 	bl	8015d84 <__swhatbuf_r>
 8015df4:	9f00      	ldr	r7, [sp, #0]
 8015df6:	4605      	mov	r5, r0
 8015df8:	4639      	mov	r1, r7
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	f7fd f9c4 	bl	8013188 <_malloc_r>
 8015e00:	b948      	cbnz	r0, 8015e16 <__smakebuf_r+0x46>
 8015e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e06:	059a      	lsls	r2, r3, #22
 8015e08:	d4ee      	bmi.n	8015de8 <__smakebuf_r+0x18>
 8015e0a:	f023 0303 	bic.w	r3, r3, #3
 8015e0e:	f043 0302 	orr.w	r3, r3, #2
 8015e12:	81a3      	strh	r3, [r4, #12]
 8015e14:	e7e2      	b.n	8015ddc <__smakebuf_r+0xc>
 8015e16:	89a3      	ldrh	r3, [r4, #12]
 8015e18:	6020      	str	r0, [r4, #0]
 8015e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e1e:	81a3      	strh	r3, [r4, #12]
 8015e20:	9b01      	ldr	r3, [sp, #4]
 8015e22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015e26:	b15b      	cbz	r3, 8015e40 <__smakebuf_r+0x70>
 8015e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e2c:	4630      	mov	r0, r6
 8015e2e:	f000 f81d 	bl	8015e6c <_isatty_r>
 8015e32:	b128      	cbz	r0, 8015e40 <__smakebuf_r+0x70>
 8015e34:	89a3      	ldrh	r3, [r4, #12]
 8015e36:	f023 0303 	bic.w	r3, r3, #3
 8015e3a:	f043 0301 	orr.w	r3, r3, #1
 8015e3e:	81a3      	strh	r3, [r4, #12]
 8015e40:	89a3      	ldrh	r3, [r4, #12]
 8015e42:	431d      	orrs	r5, r3
 8015e44:	81a5      	strh	r5, [r4, #12]
 8015e46:	e7cf      	b.n	8015de8 <__smakebuf_r+0x18>

08015e48 <_fstat_r>:
 8015e48:	b538      	push	{r3, r4, r5, lr}
 8015e4a:	4d07      	ldr	r5, [pc, #28]	@ (8015e68 <_fstat_r+0x20>)
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	4604      	mov	r4, r0
 8015e50:	4608      	mov	r0, r1
 8015e52:	4611      	mov	r1, r2
 8015e54:	602b      	str	r3, [r5, #0]
 8015e56:	f7ee fd53 	bl	8004900 <_fstat>
 8015e5a:	1c43      	adds	r3, r0, #1
 8015e5c:	d102      	bne.n	8015e64 <_fstat_r+0x1c>
 8015e5e:	682b      	ldr	r3, [r5, #0]
 8015e60:	b103      	cbz	r3, 8015e64 <_fstat_r+0x1c>
 8015e62:	6023      	str	r3, [r4, #0]
 8015e64:	bd38      	pop	{r3, r4, r5, pc}
 8015e66:	bf00      	nop
 8015e68:	200151e4 	.word	0x200151e4

08015e6c <_isatty_r>:
 8015e6c:	b538      	push	{r3, r4, r5, lr}
 8015e6e:	4d06      	ldr	r5, [pc, #24]	@ (8015e88 <_isatty_r+0x1c>)
 8015e70:	2300      	movs	r3, #0
 8015e72:	4604      	mov	r4, r0
 8015e74:	4608      	mov	r0, r1
 8015e76:	602b      	str	r3, [r5, #0]
 8015e78:	f7ee fd52 	bl	8004920 <_isatty>
 8015e7c:	1c43      	adds	r3, r0, #1
 8015e7e:	d102      	bne.n	8015e86 <_isatty_r+0x1a>
 8015e80:	682b      	ldr	r3, [r5, #0]
 8015e82:	b103      	cbz	r3, 8015e86 <_isatty_r+0x1a>
 8015e84:	6023      	str	r3, [r4, #0]
 8015e86:	bd38      	pop	{r3, r4, r5, pc}
 8015e88:	200151e4 	.word	0x200151e4

08015e8c <_init>:
 8015e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e8e:	bf00      	nop
 8015e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e92:	bc08      	pop	{r3}
 8015e94:	469e      	mov	lr, r3
 8015e96:	4770      	bx	lr

08015e98 <_fini>:
 8015e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e9a:	bf00      	nop
 8015e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e9e:	bc08      	pop	{r3}
 8015ea0:	469e      	mov	lr, r3
 8015ea2:	4770      	bx	lr
