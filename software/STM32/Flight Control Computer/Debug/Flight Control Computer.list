
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015114  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  080152f8  080152f8  000162f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e70  08015e70  00017350  2**0
                  CONTENTS
  4 .ARM          00000008  08015e70  08015e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e78  08015e78  00017350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e78  08015e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e7c  08015e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08015e80  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cc0  20000350  080161d0  00017350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006010  080161d0  00018010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000343b0  00000000  00000000  00017380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070f4  00000000  00000000  0004b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027f8  00000000  00000000  00052828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ebe  00000000  00000000  00055020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000312fb  00000000  00000000  00056ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034257  00000000  00000000  000881d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119393  00000000  00000000  000bc430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d57c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bba8  00000000  00000000  001d5808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001e13b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	080152dc 	.word	0x080152dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	080152dc 	.word	0x080152dc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <BMI088_Init>:
 *
 */

uint8_t BMI088_Init(BMI088* imu, SPI_HandleTypeDef* spi_handle, osMutexId_t* spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port,
		uint16_t acc_cs_pin, uint16_t gyro_cs_pin, uint16_t acc_irq_pin, uint16_t gyro_irq_pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	imu->spi_handle = spi_handle;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	601a      	str	r2, [r3, #0]
	imu->spi_mutex = spi_mutex;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	605a      	str	r2, [r3, #4]
	imu->acc_cs_port = acc_cs_port;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	609a      	str	r2, [r3, #8]
	imu->gyro_cs_port = gyro_cs_port;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a3a      	ldr	r2, [r7, #32]
 8000fac:	60da      	str	r2, [r3, #12]
	imu->acc_cs_pin = acc_cs_pin;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000fb2:	821a      	strh	r2, [r3, #16]
	imu->gyro_cs_pin = gyro_cs_pin;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000fb8:	825a      	strh	r2, [r3, #18]
	imu->acc_irq_pin = acc_irq_pin;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000fbe:	829a      	strh	r2, [r3, #20]
	imu->gyro_irq_pin = gyro_irq_pin;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000fc4:	82da      	strh	r2, [r3, #22]
	imu->acc_conversion = 9.80665 / 32768.0f * 2.0f * 1.5f; /* Based on +-3g range */
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4a89      	ldr	r2, [pc, #548]	@ (80011f0 <BMI088_Init+0x268>)
 8000fca:	635a      	str	r2, [r3, #52]	@ 0x34
	imu->gyro_conversion = M_PI / 180.0f * 500.0f / 32768.0f; /* Based on +-500 deg/s range */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4a89      	ldr	r2, [pc, #548]	@ (80011f4 <BMI088_Init+0x26c>)
 8000fd0:	639a      	str	r2, [r3, #56]	@ 0x38
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Perform soft-reset of accelerometer (switch to SPI mode first)
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6898      	ldr	r0, [r3, #8]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8a1b      	ldrh	r3, [r3, #16]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f003 f837 	bl	8004050 <HAL_GPIO_WritePin>
	osDelay(10);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f00c fc75 	bl	800d8d2 <osDelay>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	8a1b      	ldrh	r3, [r3, #16]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f003 f82c 	bl	8004050 <HAL_GPIO_WritePin>
	osDelay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f00c fc6a 	bl	800d8d2 <osDelay>
	tx_data[0] = 0xB6;
 8000ffe:	23b6      	movs	r3, #182	@ 0xb6
 8001000:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_SOFTRESET, tx_data, 1);
 8001002:	f107 0214 	add.w	r2, r7, #20
 8001006:	2301      	movs	r3, #1
 8001008:	217e      	movs	r1, #126	@ 0x7e
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fad2 	bl	80015b4 <BMI088_WriteAccRegister>
	osDelay(10);
 8001010:	200a      	movs	r0, #10
 8001012:	f00c fc5e 	bl	800d8d2 <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 8001016:	23b6      	movs	r3, #182	@ 0xb6
 8001018:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_SOFTRESET, tx_data, 1);
 800101a:	f107 0214 	add.w	r2, r7, #20
 800101e:	2301      	movs	r3, #1
 8001020:	2114      	movs	r1, #20
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 fc20 	bl	8001868 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f00c fc52 	bl	800d8d2 <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6898      	ldr	r0, [r3, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8a1b      	ldrh	r3, [r3, #16]
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	f003 f809 	bl	8004050 <HAL_GPIO_WritePin>
	osDelay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f00c fc47 	bl	800d8d2 <osDelay>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6898      	ldr	r0, [r3, #8]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8a1b      	ldrh	r3, [r3, #16]
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	f002 fffe 	bl	8004050 <HAL_GPIO_WritePin>
	osDelay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f00c fc3c 	bl	800d8d2 <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	743b      	strb	r3, [r7, #16]
	BMI088_ReadAccRegister(imu, ACC_CHIP_ID, rx_data, 1);
 800105e:	f107 0210 	add.w	r2, r7, #16
 8001062:	2301      	movs	r3, #1
 8001064:	2100      	movs	r1, #0
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f9d6 	bl	8001418 <BMI088_ReadAccRegister>
	if (rx_data[0] == 0x1E)
 800106c:	7c3b      	ldrb	r3, [r7, #16]
 800106e:	2b1e      	cmp	r3, #30
 8001070:	d162      	bne.n	8001138 <BMI088_Init+0x1b0>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", CRITICAL);
 8001072:	2101      	movs	r1, #1
 8001074:	4860      	ldr	r0, [pc, #384]	@ (80011f8 <BMI088_Init+0x270>)
 8001076:	f001 fa95 	bl	80025a4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f00c fc29 	bl	800d8d2 <osDelay>

	// Set 100Hz ODR, no over-sampling (40Hz BW)
	tx_data[0] = 0xA8;
 8001080:	23a8      	movs	r3, #168	@ 0xa8
 8001082:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_CONF, tx_data, 1);
 8001084:	f107 0214 	add.w	r2, r7, #20
 8001088:	2301      	movs	r3, #1
 800108a:	2140      	movs	r1, #64	@ 0x40
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 fa91 	bl	80015b4 <BMI088_WriteAccRegister>
	osDelay(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f00c fc1d 	bl	800d8d2 <osDelay>

	// Set +-3g range (10920 LSB/g)
	tx_data[0] = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_RANGE, tx_data, 1);
 800109c:	f107 0214 	add.w	r2, r7, #20
 80010a0:	2301      	movs	r3, #1
 80010a2:	2141      	movs	r1, #65	@ 0x41
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 fa85 	bl	80015b4 <BMI088_WriteAccRegister>
	osDelay(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f00c fc11 	bl	800d8d2 <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 80010b0:	230a      	movs	r3, #10
 80010b2:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT1_IO_CTRL, tx_data, 1);
 80010b4:	f107 0214 	add.w	r2, r7, #20
 80010b8:	2301      	movs	r3, #1
 80010ba:	2153      	movs	r1, #83	@ 0x53
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fa79 	bl	80015b4 <BMI088_WriteAccRegister>
	osDelay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f00c fc05 	bl	800d8d2 <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 80010c8:	2304      	movs	r3, #4
 80010ca:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, INT_MAP_DATA, tx_data, 1);
 80010cc:	f107 0214 	add.w	r2, r7, #20
 80010d0:	2301      	movs	r3, #1
 80010d2:	2158      	movs	r1, #88	@ 0x58
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 fa6d 	bl	80015b4 <BMI088_WriteAccRegister>
	osDelay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f00c fbf9 	bl	800d8d2 <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CONF, tx_data, 1);
 80010e4:	f107 0214 	add.w	r2, r7, #20
 80010e8:	2301      	movs	r3, #1
 80010ea:	217c      	movs	r1, #124	@ 0x7c
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 fa61 	bl	80015b4 <BMI088_WriteAccRegister>
	osDelay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f00c fbed 	bl	800d8d2 <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 80010f8:	2304      	movs	r3, #4
 80010fa:	753b      	strb	r3, [r7, #20]
	BMI088_WriteAccRegister(imu, ACC_PWR_CTRL, tx_data, 1);
 80010fc:	f107 0214 	add.w	r2, r7, #20
 8001100:	2301      	movs	r3, #1
 8001102:	217d      	movs	r1, #125	@ 0x7d
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fa55 	bl	80015b4 <BMI088_WriteAccRegister>
	osDelay(10);
 800110a:	200a      	movs	r0, #10
 800110c:	f00c fbe1 	bl	800d8d2 <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", CRITICAL);
 8001110:	2101      	movs	r1, #1
 8001112:	483a      	ldr	r0, [pc, #232]	@ (80011fc <BMI088_Init+0x274>)
 8001114:	f001 fa46 	bl	80025a4 <USB_Log>
	osDelay(100);
 8001118:	2064      	movs	r0, #100	@ 0x64
 800111a:	f00c fbda 	bl	800d8d2 <osDelay>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	743b      	strb	r3, [r7, #16]
	BMI088_ReadGyroRegister(imu, GYRO_CHIP_ID, rx_data, 1);
 8001122:	f107 0210 	add.w	r2, r7, #16
 8001126:	2301      	movs	r3, #1
 8001128:	2100      	movs	r1, #0
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 face 	bl	80016cc <BMI088_ReadGyroRegister>
	if (rx_data[0] == 0x0F)
 8001130:	7c3b      	ldrb	r3, [r7, #16]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	d152      	bne.n	80011dc <BMI088_Init+0x254>
 8001136:	e005      	b.n	8001144 <BMI088_Init+0x1bc>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 8001138:	2102      	movs	r1, #2
 800113a:	4831      	ldr	r0, [pc, #196]	@ (8001200 <BMI088_Init+0x278>)
 800113c:	f001 fa32 	bl	80025a4 <USB_Log>
		return 0;
 8001140:	2300      	movs	r3, #0
 8001142:	e050      	b.n	80011e6 <BMI088_Init+0x25e>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", CRITICAL);
 8001144:	2101      	movs	r1, #1
 8001146:	482f      	ldr	r0, [pc, #188]	@ (8001204 <BMI088_Init+0x27c>)
 8001148:	f001 fa2c 	bl	80025a4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f00c fbc0 	bl	800d8d2 <osDelay>

	// Set 100Hz ODR (32Hz BW)
	tx_data[0] = 0x07;
 8001152:	2307      	movs	r3, #7
 8001154:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_BANDWIDTH, tx_data, 1);
 8001156:	f107 0214 	add.w	r2, r7, #20
 800115a:	2301      	movs	r3, #1
 800115c:	2110      	movs	r1, #16
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 fb82 	bl	8001868 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f00c fbb4 	bl	800d8d2 <osDelay>

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 800116a:	2302      	movs	r3, #2
 800116c:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_RANGE, tx_data, 1);
 800116e:	f107 0214 	add.w	r2, r7, #20
 8001172:	2301      	movs	r3, #1
 8001174:	210f      	movs	r1, #15
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 fb76 	bl	8001868 <BMI088_WriteGyroRegister>
	osDelay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f00c fba8 	bl	800d8d2 <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 8001182:	2301      	movs	r3, #1
 8001184:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_CONF, tx_data, 1);
 8001186:	f107 0214 	add.w	r2, r7, #20
 800118a:	2301      	movs	r3, #1
 800118c:	2116      	movs	r1, #22
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 fb6a 	bl	8001868 <BMI088_WriteGyroRegister>
	osDelay(10);
 8001194:	200a      	movs	r0, #10
 8001196:	f00c fb9c 	bl	800d8d2 <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 800119a:	2301      	movs	r3, #1
 800119c:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, INT3_INT4_IO_MAP, tx_data, 1);
 800119e:	f107 0214 	add.w	r2, r7, #20
 80011a2:	2301      	movs	r3, #1
 80011a4:	2118      	movs	r1, #24
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 fb5e 	bl	8001868 <BMI088_WriteGyroRegister>
	osDelay(10);
 80011ac:	200a      	movs	r0, #10
 80011ae:	f00c fb90 	bl	800d8d2 <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	753b      	strb	r3, [r7, #20]
	BMI088_WriteGyroRegister(imu, GYRO_INT_CTRL, tx_data, 1);
 80011b6:	f107 0214 	add.w	r2, r7, #20
 80011ba:	2301      	movs	r3, #1
 80011bc:	2115      	movs	r1, #21
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 fb52 	bl	8001868 <BMI088_WriteGyroRegister>
	osDelay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f00c fb84 	bl	800d8d2 <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", CRITICAL);
 80011ca:	2101      	movs	r1, #1
 80011cc:	480e      	ldr	r0, [pc, #56]	@ (8001208 <BMI088_Init+0x280>)
 80011ce:	f001 f9e9 	bl	80025a4 <USB_Log>
	osDelay(100);
 80011d2:	2064      	movs	r0, #100	@ 0x64
 80011d4:	f00c fb7d 	bl	800d8d2 <osDelay>

	return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e004      	b.n	80011e6 <BMI088_Init+0x25e>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 80011dc:	2102      	movs	r1, #2
 80011de:	480b      	ldr	r0, [pc, #44]	@ (800120c <BMI088_Init+0x284>)
 80011e0:	f001 f9e0 	bl	80025a4 <USB_Log>
		return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	3a6b5c0f 	.word	0x3a6b5c0f
 80011f4:	398ba058 	.word	0x398ba058
 80011f8:	080152f8 	.word	0x080152f8
 80011fc:	0801536c 	.word	0x0801536c
 8001200:	08015330 	.word	0x08015330
 8001204:	08015394 	.word	0x08015394
 8001208:	08015400 	.word	0x08015400
 800120c:	080153c8 	.word	0x080153c8

08001210 <BMI088_ReadAccData>:

uint8_t BMI088_ReadAccData(BMI088* imu)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadAccRegister(imu, ACC_X_LSB, rx_data, sizeof(rx_data));
 8001218:	f107 0208 	add.w	r2, r7, #8
 800121c:	2306      	movs	r3, #6
 800121e:	2112      	movs	r1, #18
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f8f9 	bl	8001418 <BMI088_ReadAccRegister>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]

	if (status)
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d046      	beq.n	80012be <BMI088_ReadAccData+0xae>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 8001230:	7a7b      	ldrb	r3, [r7, #9]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	7a3b      	ldrb	r3, [r7, #8]
 8001238:	b21b      	sxth	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	82bb      	strh	r3, [r7, #20]
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	827b      	strh	r3, [r7, #18]
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	823b      	strh	r3, [r7, #16]

		imu->accel_x = accel_x_int16 * imu->acc_conversion;
 800125a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edc3 7a06 	vstr	s15, [r3, #24]
		imu->accel_y = accel_y_int16 * imu->acc_conversion;
 8001276:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a07 	vstr	s15, [r3, #28]
		imu->accel_z = accel_z_int16 * imu->acc_conversion;
 8001292:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edc3 7a08 	vstr	s15, [r3, #32]

		// Clear data ready interrupt
		BMI088_ReadAccRegister(imu, ACC_INT_STAT_1, rx_data, 1);
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	2301      	movs	r3, #1
 80012b4:	211d      	movs	r1, #29
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f8ae 	bl	8001418 <BMI088_ReadAccRegister>
 80012bc:	e003      	b.n	80012c6 <BMI088_ReadAccData+0xb6>
	}
	else
	{
		USB_Log("ERR reading BMI088 accelerometer data.", ERR);
 80012be:	2102      	movs	r1, #2
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <BMI088_ReadAccData+0xc0>)
 80012c2:	f001 f96f 	bl	80025a4 <USB_Log>
	}

	return status;
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08015424 	.word	0x08015424

080012d4 <BMI088_ReadGyroData>:

uint8_t BMI088_ReadGyroData(BMI088* imu)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	uint8_t status = BMI088_ReadGyroRegister(imu, RATE_X_LSB, rx_data, sizeof(rx_data));
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	2306      	movs	r3, #6
 80012e2:	2102      	movs	r1, #2
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f9f1 	bl	80016cc <BMI088_ReadGyroRegister>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]

	if (status)
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d03f      	beq.n	8001374 <BMI088_ReadGyroData+0xa0>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 80012f4:	7a7b      	ldrb	r3, [r7, #9]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	82bb      	strh	r3, [r7, #20]
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	7abb      	ldrb	r3, [r7, #10]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	827b      	strh	r3, [r7, #18]
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	823b      	strh	r3, [r7, #16]

		imu->rate_x = rate_x_int16 * imu->gyro_conversion;
 800131e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		imu->rate_y = rate_y_int16 * imu->gyro_conversion;
 800133a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		imu->rate_z = rate_z_int16 * imu->gyro_conversion;
 8001356:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8001372:	e003      	b.n	800137c <BMI088_ReadGyroData+0xa8>

		// Interrupt cleared automatically after 280-400us
	}
	else
	{
		USB_Log("ERR reading BMI088 gyroscope data.", ERR);
 8001374:	2102      	movs	r1, #2
 8001376:	4804      	ldr	r0, [pc, #16]	@ (8001388 <BMI088_ReadGyroData+0xb4>)
 8001378:	f001 f914 	bl	80025a4 <USB_Log>
	}

	return status;
 800137c:	7dfb      	ldrb	r3, [r7, #23]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0801544c 	.word	0x0801544c

0800138c <BMI088_ReadTempData>:

uint8_t BMI088_ReadTempData(BMI088* imu)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	uint8_t status = BMI088_ReadAccRegister(imu, TEMP_MSB, rx_data, sizeof(rx_data));
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	2302      	movs	r3, #2
 800139a:	2122      	movs	r1, #34	@ 0x22
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f83b 	bl	8001418 <BMI088_ReadAccRegister>
 80013a2:	4603      	mov	r3, r0
 80013a4:	737b      	strb	r3, [r7, #13]

	if (status)
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d029      	beq.n	8001400 <BMI088_ReadTempData+0x74>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 80013ac:	7a3b      	ldrb	r3, [r7, #8]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7a7b      	ldrb	r3, [r7, #9]
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21b      	sxth	r3, r3
 80013be:	817b      	strh	r3, [r7, #10]
		int16_t temp_int11 = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	81fb      	strh	r3, [r7, #14]
		if (temp_uint11 > 1023)
 80013c4:	897b      	ldrh	r3, [r7, #10]
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ca:	d305      	bcc.n	80013d8 <BMI088_ReadTempData+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 80013cc:	897b      	ldrh	r3, [r7, #10]
 80013ce:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	e001      	b.n	80013dc <BMI088_ReadTempData+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	81fb      	strh	r3, [r7, #14]
		}
		imu->temperature = temp_int11 * 0.125f + 23.0f;
 80013dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80013f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80013fe:	e003      	b.n	8001408 <BMI088_ReadTempData+0x7c>
	}
	else
	{
		USB_Log("ERR reading BMI088 temperature data.", ERR);
 8001400:	2102      	movs	r1, #2
 8001402:	4804      	ldr	r0, [pc, #16]	@ (8001414 <BMI088_ReadTempData+0x88>)
 8001404:	f001 f8ce 	bl	80025a4 <USB_Log>
	}

	return status;
 8001408:	7b7b      	ldrb	r3, [r7, #13]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	08015470 	.word	0x08015470

08001418 <BMI088_ReadAccRegister>:
 * BMI088 LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t BMI088_ReadAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800141c:	b091      	sub	sp, #68	@ 0x44
 800141e:	af02      	add	r7, sp, #8
 8001420:	6178      	str	r0, [r7, #20]
 8001422:	60fa      	str	r2, [r7, #12]
 8001424:	461a      	mov	r2, r3
 8001426:	460b      	mov	r3, r1
 8001428:	74fb      	strb	r3, [r7, #19]
 800142a:	4613      	mov	r3, r2
 800142c:	823b      	strh	r3, [r7, #16]
 800142e:	466b      	mov	r3, sp
 8001430:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 2;
 8001432:	8a3b      	ldrh	r3, [r7, #16]
 8001434:	3302      	adds	r3, #2
 8001436:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t tx_buffer[num_bytes];
 8001438:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800143a:	460b      	mov	r3, r1
 800143c:	3b01      	subs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001440:	b28b      	uxth	r3, r1
 8001442:	2200      	movs	r2, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	00c3      	lsls	r3, r0, #3
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	00c2      	lsls	r2, r0, #3
 800145e:	b28b      	uxth	r3, r1
 8001460:	2200      	movs	r2, #0
 8001462:	469a      	mov	sl, r3
 8001464:	4693      	mov	fp, r2
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001472:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001476:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800147a:	460b      	mov	r3, r1
 800147c:	3307      	adds	r3, #7
 800147e:	08db      	lsrs	r3, r3, #3
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	ebad 0d03 	sub.w	sp, sp, r3
 8001486:	ab02      	add	r3, sp, #8
 8001488:	3300      	adds	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t rx_buffer[num_bytes];
 800148c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800148e:	460b      	mov	r3, r1
 8001490:	3b01      	subs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	b28b      	uxth	r3, r1
 8001496:	2200      	movs	r2, #0
 8001498:	4698      	mov	r8, r3
 800149a:	4691      	mov	r9, r2
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014b0:	b28b      	uxth	r3, r1
 80014b2:	2200      	movs	r2, #0
 80014b4:	461c      	mov	r4, r3
 80014b6:	4615      	mov	r5, r2
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	00eb      	lsls	r3, r5, #3
 80014c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014c6:	00e2      	lsls	r2, r4, #3
 80014c8:	460b      	mov	r3, r1
 80014ca:	3307      	adds	r3, #7
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	ebad 0d03 	sub.w	sp, sp, r3
 80014d4:	ab02      	add	r3, sp, #8
 80014d6:	3300      	adds	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80014de:	e00c      	b.n	80014fa <BMI088_ReadAccRegister+0xe2>
	{
		tx_buffer[i] = 0;
 80014e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e4:	4413      	add	r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ee:	4413      	add	r3, r2
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 80014f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f6:	3301      	adds	r3, #1
 80014f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80014fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbee      	blt.n	80014e0 <BMI088_ReadAccRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001502:	7cfb      	ldrb	r3, [r7, #19]
 8001504:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001508:	b2da      	uxtb	r2, r3
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001518:	4618      	mov	r0, r3
 800151a:	f00c fa7b 	bl	800da14 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	6898      	ldr	r0, [r3, #8]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	8a1b      	ldrh	r3, [r3, #16]
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	f002 fd91 	bl	8004050 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001538:	9200      	str	r2, [sp, #0]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800153e:	f006 fb8b 	bl	8007c58 <HAL_SPI_TransmitReceive>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	8a1b      	ldrh	r3, [r3, #16]
 8001558:	2201      	movs	r2, #1
 800155a:	4619      	mov	r1, r3
 800155c:	f002 fd78 	bl	8004050 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f00c fa9f 	bl	800daaa <osMutexRelease>

	if (status)
 800156c:	7efb      	ldrb	r3, [r7, #27]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d013      	beq.n	800159a <BMI088_ReadAccRegister+0x182>
	{
		// The first received byte is a dummy byte (ignore index i=1)
		for (int i = 2; i < num_bytes; i++)
 8001572:	2302      	movs	r3, #2
 8001574:	633b      	str	r3, [r7, #48]	@ 0x30
 8001576:	e00b      	b.n	8001590 <BMI088_ReadAccRegister+0x178>
		{
			rx_data[i - 2] = rx_buffer[i];
 8001578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800157a:	3b02      	subs	r3, #2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	69f9      	ldr	r1, [r7, #28]
 8001582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001584:	440a      	add	r2, r1
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 800158a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800158c:	3301      	adds	r3, #1
 800158e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001590:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001594:	429a      	cmp	r2, r3
 8001596:	dbef      	blt.n	8001578 <BMI088_ReadAccRegister+0x160>
 8001598:	e003      	b.n	80015a2 <BMI088_ReadAccRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 800159a:	2102      	movs	r1, #2
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <BMI088_ReadAccRegister+0x198>)
 800159e:	f001 f801 	bl	80025a4 <USB_Log>
	}

	return status;
 80015a2:	7efb      	ldrb	r3, [r7, #27]
 80015a4:	46b5      	mov	sp, r6
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	373c      	adds	r7, #60	@ 0x3c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b0:	080154c4 	.word	0x080154c4

080015b4 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 80015b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015b8:	b08b      	sub	sp, #44	@ 0x2c
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	461a      	mov	r2, r3
 80015c2:	460b      	mov	r3, r1
 80015c4:	72fb      	strb	r3, [r7, #11]
 80015c6:	4613      	mov	r3, r2
 80015c8:	813b      	strh	r3, [r7, #8]
 80015ca:	466b      	mov	r3, sp
 80015cc:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 80015ce:	893b      	ldrh	r3, [r7, #8]
 80015d0:	3301      	adds	r3, #1
 80015d2:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t tx_buffer[num_bytes];
 80015d4:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80015d6:	460b      	mov	r3, r1
 80015d8:	3b01      	subs	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	b28b      	uxth	r3, r1
 80015de:	2200      	movs	r2, #0
 80015e0:	4698      	mov	r8, r3
 80015e2:	4691      	mov	r9, r2
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015f8:	b28b      	uxth	r3, r1
 80015fa:	2200      	movs	r2, #0
 80015fc:	461c      	mov	r4, r3
 80015fe:	4615      	mov	r5, r2
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	00eb      	lsls	r3, r5, #3
 800160a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800160e:	00e2      	lsls	r2, r4, #3
 8001610:	460b      	mov	r3, r1
 8001612:	3307      	adds	r3, #7
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	ebad 0d03 	sub.w	sp, sp, r3
 800161c:	466b      	mov	r3, sp
 800161e:	3300      	adds	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	7afa      	ldrb	r2, [r7, #11]
 8001626:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
 800162c:	e00c      	b.n	8001648 <BMI088_WriteAccRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	3b01      	subs	r3, #1
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	7819      	ldrb	r1, [r3, #0]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
 8001648:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800164a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164c:	429a      	cmp	r2, r3
 800164e:	dbee      	blt.n	800162e <BMI088_WriteAccRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800165a:	4618      	mov	r0, r3
 800165c:	f00c f9da 	bl	800da14 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_RESET);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6898      	ldr	r0, [r3, #8]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8a1b      	ldrh	r3, [r3, #16]
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	f002 fcf0 	bl	8004050 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f006 f977 	bl	800796e <HAL_SPI_Transmit>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->acc_cs_port, imu->acc_cs_pin, GPIO_PIN_SET);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6898      	ldr	r0, [r3, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8a1b      	ldrh	r3, [r3, #16]
 8001696:	2201      	movs	r2, #1
 8001698:	4619      	mov	r1, r3
 800169a:	f002 fcd9 	bl	8004050 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00c fa00 	bl	800daaa <osMutexRelease>

	if (!status)
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <BMI088_WriteAccRegister+0x104>
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 80016b0:	2102      	movs	r1, #2
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <BMI088_WriteAccRegister+0x114>)
 80016b4:	f000 ff76 	bl	80025a4 <USB_Log>
	}

	return status;
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	46b5      	mov	sp, r6
}
 80016bc:	4618      	mov	r0, r3
 80016be:	372c      	adds	r7, #44	@ 0x2c
 80016c0:	46bd      	mov	sp, r7
 80016c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c6:	bf00      	nop
 80016c8:	080154f0 	.word	0x080154f0

080016cc <BMI088_ReadGyroRegister>:

uint8_t BMI088_ReadGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 80016cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d0:	b091      	sub	sp, #68	@ 0x44
 80016d2:	af02      	add	r7, sp, #8
 80016d4:	6178      	str	r0, [r7, #20]
 80016d6:	60fa      	str	r2, [r7, #12]
 80016d8:	461a      	mov	r2, r3
 80016da:	460b      	mov	r3, r1
 80016dc:	74fb      	strb	r3, [r7, #19]
 80016de:	4613      	mov	r3, r2
 80016e0:	823b      	strh	r3, [r7, #16]
 80016e2:	466b      	mov	r3, sp
 80016e4:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 80016e6:	8a3b      	ldrh	r3, [r7, #16]
 80016e8:	3301      	adds	r3, #1
 80016ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t tx_buffer[num_bytes];
 80016ec:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80016ee:	460b      	mov	r3, r1
 80016f0:	3b01      	subs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016f4:	b28b      	uxth	r3, r1
 80016f6:	2200      	movs	r2, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	00c3      	lsls	r3, r0, #3
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	00c2      	lsls	r2, r0, #3
 8001712:	b28b      	uxth	r3, r1
 8001714:	2200      	movs	r2, #0
 8001716:	469a      	mov	sl, r3
 8001718:	4693      	mov	fp, r2
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001726:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800172a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800172e:	460b      	mov	r3, r1
 8001730:	3307      	adds	r3, #7
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	ebad 0d03 	sub.w	sp, sp, r3
 800173a:	ab02      	add	r3, sp, #8
 800173c:	3300      	adds	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t rx_buffer[num_bytes];
 8001740:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8001742:	460b      	mov	r3, r1
 8001744:	3b01      	subs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	b28b      	uxth	r3, r1
 800174a:	2200      	movs	r2, #0
 800174c:	4698      	mov	r8, r3
 800174e:	4691      	mov	r9, r2
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800175c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001760:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001764:	b28b      	uxth	r3, r1
 8001766:	2200      	movs	r2, #0
 8001768:	461c      	mov	r4, r3
 800176a:	4615      	mov	r5, r2
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	00eb      	lsls	r3, r5, #3
 8001776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800177a:	00e2      	lsls	r2, r4, #3
 800177c:	460b      	mov	r3, r1
 800177e:	3307      	adds	r3, #7
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	ebad 0d03 	sub.w	sp, sp, r3
 8001788:	ab02      	add	r3, sp, #8
 800178a:	3300      	adds	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < num_bytes; i++)
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
 8001792:	e00c      	b.n	80017ae <BMI088_ReadGyroRegister+0xe2>
	{
		tx_buffer[i] = 0;
 8001794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001798:	4413      	add	r3, r2
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = 0;
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a2:	4413      	add	r3, r2
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 80017a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017aa:	3301      	adds	r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbee      	blt.n	8001794 <BMI088_ReadGyroRegister+0xc8>
	}

	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	701a      	strb	r2, [r3, #0]

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00c f921 	bl	800da14 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	68d8      	ldr	r0, [r3, #12]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	8a5b      	ldrh	r3, [r3, #18]
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	f002 fc37 	bl	8004050 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017ec:	9200      	str	r2, [sp, #0]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017f2:	f006 fa31 	bl	8007c58 <HAL_SPI_TransmitReceive>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	76fb      	strb	r3, [r7, #27]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	68d8      	ldr	r0, [r3, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	8a5b      	ldrh	r3, [r3, #18]
 800180c:	2201      	movs	r2, #1
 800180e:	4619      	mov	r1, r3
 8001810:	f002 fc1e 	bl	8004050 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f00c f945 	bl	800daaa <osMutexRelease>

	if (status)
 8001820:	7efb      	ldrb	r3, [r7, #27]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d013      	beq.n	800184e <BMI088_ReadGyroRegister+0x182>
	{
		for (int i = 1; i < num_bytes; i++)
 8001826:	2301      	movs	r3, #1
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
 800182a:	e00b      	b.n	8001844 <BMI088_ReadGyroRegister+0x178>
		{
			rx_data[i - 1] = rx_buffer[i];
 800182c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800182e:	3b01      	subs	r3, #1
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	69f9      	ldr	r1, [r7, #28]
 8001836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001838:	440a      	add	r2, r1
 800183a:	7812      	ldrb	r2, [r2, #0]
 800183c:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 800183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001840:	3301      	adds	r3, #1
 8001842:	633b      	str	r3, [r7, #48]	@ 0x30
 8001844:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001848:	429a      	cmp	r2, r3
 800184a:	dbef      	blt.n	800182c <BMI088_ReadGyroRegister+0x160>
 800184c:	e003      	b.n	8001856 <BMI088_ReadGyroRegister+0x18a>
		}
	}
	else
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 800184e:	2102      	movs	r1, #2
 8001850:	4804      	ldr	r0, [pc, #16]	@ (8001864 <BMI088_ReadGyroRegister+0x198>)
 8001852:	f000 fea7 	bl	80025a4 <USB_Log>
	}

	return status;
 8001856:	7efb      	ldrb	r3, [r7, #27]
 8001858:	46b5      	mov	sp, r6
}
 800185a:	4618      	mov	r0, r3
 800185c:	373c      	adds	r7, #60	@ 0x3c
 800185e:	46bd      	mov	sp, r7
 8001860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001864:	08015520 	.word	0x08015520

08001868 <BMI088_WriteGyroRegister>:

uint8_t BMI088_WriteGyroRegister(BMI088* imu, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800186c:	b08b      	sub	sp, #44	@ 0x2c
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	461a      	mov	r2, r3
 8001876:	460b      	mov	r3, r1
 8001878:	72fb      	strb	r3, [r7, #11]
 800187a:	4613      	mov	r3, r2
 800187c:	813b      	strh	r3, [r7, #8]
 800187e:	466b      	mov	r3, sp
 8001880:	461e      	mov	r6, r3
	uint16_t num_bytes = data_len + 1;
 8001882:	893b      	ldrh	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t tx_buffer[num_bytes];
 8001888:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800188a:	460b      	mov	r3, r1
 800188c:	3b01      	subs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	b28b      	uxth	r3, r1
 8001892:	2200      	movs	r2, #0
 8001894:	4698      	mov	r8, r3
 8001896:	4691      	mov	r9, r2
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ac:	b28b      	uxth	r3, r1
 80018ae:	2200      	movs	r2, #0
 80018b0:	461c      	mov	r4, r3
 80018b2:	4615      	mov	r5, r2
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	00eb      	lsls	r3, r5, #3
 80018be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c2:	00e2      	lsls	r2, r4, #3
 80018c4:	460b      	mov	r3, r1
 80018c6:	3307      	adds	r3, #7
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	ebad 0d03 	sub.w	sp, sp, r3
 80018d0:	466b      	mov	r3, sp
 80018d2:	3300      	adds	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]

	tx_buffer[0] = reg_addr;	// Write operation
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	7afa      	ldrb	r2, [r7, #11]
 80018da:	701a      	strb	r2, [r3, #0]

	for (int i = 1; i < num_bytes; i++)
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e0:	e00c      	b.n	80018fc <BMI088_WriteGyroRegister+0x94>
	{
		tx_buffer[i] = tx_data[i - 1];
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	3b01      	subs	r3, #1
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	7819      	ldrb	r1, [r3, #0]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	4413      	add	r3, r2
 80018f2:	460a      	mov	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80018fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001900:	429a      	cmp	r2, r3
 8001902:	dbee      	blt.n	80018e2 <BMI088_WriteGyroRegister+0x7a>
	}

	osMutexAcquire(*imu->spi_mutex, osWaitForever);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800190e:	4618      	mov	r0, r3
 8001910:	f00c f880 	bl	800da14 <osMutexAcquire>
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_RESET);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68d8      	ldr	r0, [r3, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8a5b      	ldrh	r3, [r3, #18]
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	f002 fb96 	bl	8004050 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800192a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800192e:	69b9      	ldr	r1, [r7, #24]
 8001930:	f006 f81d 	bl	800796e <HAL_SPI_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->gyro_cs_port, imu->gyro_cs_pin, GPIO_PIN_SET);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	68d8      	ldr	r0, [r3, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8a5b      	ldrh	r3, [r3, #18]
 800194a:	2201      	movs	r2, #1
 800194c:	4619      	mov	r1, r3
 800194e:	f002 fb7f 	bl	8004050 <HAL_GPIO_WritePin>
	osMutexRelease(*imu->spi_mutex);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f00c f8a6 	bl	800daaa <osMutexRelease>

	if (!status)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <BMI088_WriteGyroRegister+0x104>
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 8001964:	2102      	movs	r1, #2
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <BMI088_WriteGyroRegister+0x114>)
 8001968:	f000 fe1c 	bl	80025a4 <USB_Log>
	}

	return status;
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	46b5      	mov	sp, r6
}
 8001970:	4618      	mov	r0, r3
 8001972:	372c      	adds	r7, #44	@ 0x2c
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800197a:	bf00      	nop
 800197c:	08015548 	.word	0x08015548

08001980 <BMP388_Init>:
 *
 * BMP388 INTERFACE
 *
 */
uint8_t BMP388_Init(BMP388* sensor, BMP388_CalibrationData* calib_data, I2C_HandleTypeDef* i2c_handle, osMutexId_t* i2c_mutex, uint16_t irq_pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
	sensor->calib_data = calib_data;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	601a      	str	r2, [r3, #0]
	sensor->i2c_handle = i2c_handle;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	605a      	str	r2, [r3, #4]
	sensor->i2c_mutex = i2c_mutex;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	609a      	str	r2, [r3, #8]
	sensor->irq_pin = irq_pin;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8c3a      	ldrh	r2, [r7, #32]
 80019a4:	819a      	strh	r2, [r3, #12]
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	743b      	strb	r3, [r7, #16]
	BMP388_ReadRegister(sensor, REG_CHIP_ID, rx_data, 1);
 80019aa:	f107 0210 	add.w	r2, r7, #16
 80019ae:	2301      	movs	r3, #1
 80019b0:	2100      	movs	r1, #0
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f9f4 	bl	8001da0 <BMP388_ReadRegister>
	if (rx_data[0] == 0x50)
 80019b8:	7c3b      	ldrb	r3, [r7, #16]
 80019ba:	2b50      	cmp	r3, #80	@ 0x50
 80019bc:	d15d      	bne.n	8001a7a <BMP388_Init+0xfa>
	{
		USB_Log("Found BMP388, starting initialization.", CRITICAL);
 80019be:	2101      	movs	r1, #1
 80019c0:	4832      	ldr	r0, [pc, #200]	@ (8001a8c <BMP388_Init+0x10c>)
 80019c2:	f000 fdef 	bl	80025a4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 80019c6:	200a      	movs	r0, #10
 80019c8:	f00b ff83 	bl	800d8d2 <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0xB6;
 80019cc:	23b6      	movs	r3, #182	@ 0xb6
 80019ce:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_CMD, tx_data, 1);
 80019d0:	f107 0214 	add.w	r2, r7, #20
 80019d4:	2301      	movs	r3, #1
 80019d6:	217e      	movs	r1, #126	@ 0x7e
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fa1d 	bl	8001e18 <BMP388_WriteRegister>
	osDelay(10);
 80019de:	200a      	movs	r0, #10
 80019e0:	f00b ff77 	bl	800d8d2 <osDelay>

	// Read, calculate, and store calibration coefficients
	BMP388_ReadCalibrationData(sensor);
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa53 	bl	8001e90 <BMP388_ReadCalibrationData>

	// Set pressure measurement to ultra-high resolution (x16 over-sampling, 20 bit / 0.17 Pa),
	// set temperature measurement to low power (x2 over-sampling, 17 bit / 0.0025 degC)
	tx_data[0] = 0x0C;
 80019ea:	230c      	movs	r3, #12
 80019ec:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_OSR, tx_data, 1);
 80019ee:	f107 0214 	add.w	r2, r7, #20
 80019f2:	2301      	movs	r3, #1
 80019f4:	211c      	movs	r1, #28
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa0e 	bl	8001e18 <BMP388_WriteRegister>
	osDelay(10);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f00b ff68 	bl	800d8d2 <osDelay>

	// Set 25Hz ODR
	tx_data[0] = 0x03;
 8001a02:	2303      	movs	r3, #3
 8001a04:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_ODR, tx_data, 1);
 8001a06:	f107 0214 	add.w	r2, r7, #20
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	211d      	movs	r1, #29
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fa02 	bl	8001e18 <BMP388_WriteRegister>
	osDelay(10);
 8001a14:	200a      	movs	r0, #10
 8001a16:	f00b ff5c 	bl	800d8d2 <osDelay>

	// Set IIR filter coefficient to 15
	tx_data[0] = 0x04;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_CONFIG, tx_data, 1);
 8001a1e:	f107 0214 	add.w	r2, r7, #20
 8001a22:	2301      	movs	r3, #1
 8001a24:	211f      	movs	r1, #31
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f9f6 	bl	8001e18 <BMP388_WriteRegister>
	osDelay(10);
 8001a2c:	200a      	movs	r0, #10
 8001a2e:	f00b ff50 	bl	800d8d2 <osDelay>

	// Compute startup pressure for initial altitude reference
	BMP388_ComputeStartupPressure(sensor);
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fbba 	bl	80021ac <BMP388_ComputeStartupPressure>

	// Switch device into normal mode and enable pressure, temperature sensor
	tx_data[0] = 0x33;
 8001a38:	2333      	movs	r3, #51	@ 0x33
 8001a3a:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_PWR_CTRL, tx_data, 1);
 8001a3c:	f107 0214 	add.w	r2, r7, #20
 8001a40:	2301      	movs	r3, #1
 8001a42:	211b      	movs	r1, #27
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f9e7 	bl	8001e18 <BMP388_WriteRegister>
	osDelay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f00b ff41 	bl	800d8d2 <osDelay>

	// Enable data ready interrupt (temperature and pressure) and configure INT pin (active high, push-pull)
	tx_data[0] = 0x42;
 8001a50:	2342      	movs	r3, #66	@ 0x42
 8001a52:	753b      	strb	r3, [r7, #20]
	BMP388_WriteRegister(sensor, REG_INT_CTRL, tx_data, 1);
 8001a54:	f107 0214 	add.w	r2, r7, #20
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2119      	movs	r1, #25
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f9db 	bl	8001e18 <BMP388_WriteRegister>
	osDelay(10);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f00b ff35 	bl	800d8d2 <osDelay>

	USB_Log("BMP388 initialized OK.", CRITICAL);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <BMP388_Init+0x110>)
 8001a6c:	f000 fd9a 	bl	80025a4 <USB_Log>
	osDelay(100);
 8001a70:	2064      	movs	r0, #100	@ 0x64
 8001a72:	f00b ff2e 	bl	800d8d2 <osDelay>

	return 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e004      	b.n	8001a84 <BMP388_Init+0x104>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <BMP388_Init+0x114>)
 8001a7e:	f000 fd91 	bl	80025a4 <USB_Log>
		return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	08015574 	.word	0x08015574
 8001a90:	080155cc 	.word	0x080155cc
 8001a94:	0801559c 	.word	0x0801559c

08001a98 <BMP388_ReadData>:

uint8_t BMP388_ReadData(BMP388* sensor)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b090      	sub	sp, #64	@ 0x40
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	// Compute compensated temperature

	uint8_t rx_temp_data[3];
	uint8_t status_temp = BMP388_ReadRegister(sensor, REG_DATA_3, rx_temp_data, 3);
 8001aa0:	f107 020c 	add.w	r2, r7, #12
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	2107      	movs	r1, #7
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f979 	bl	8001da0 <BMP388_ReadRegister>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (status_temp)
 8001ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d02f      	beq.n	8001b1c <BMP388_ReadData+0x84>
	{
		uint32_t temp_raw = (rx_temp_data[2] << 16) | (rx_temp_data[1] << 8) | rx_temp_data[0];
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	7b7b      	ldrb	r3, [r7, #13]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	7b3a      	ldrb	r2, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38

		float temp_partial_data1 = (float)temp_raw - sensor->calib_data->par_t1;
 8001acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float temp_partial_data2 = temp_partial_data1 * sensor->calib_data->par_t2;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aee:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		sensor->temperature = temp_partial_data2 + (temp_partial_data1 * temp_partial_data1) * sensor->calib_data->par_t3;
 8001afa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001afe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Compute compensated pressure

	uint8_t rx_press_data[3];
	uint8_t status_pressure = BMP388_ReadRegister(sensor, REG_DATA_0, rx_press_data, 3);
 8001b1c:	f107 0208 	add.w	r2, r7, #8
 8001b20:	2303      	movs	r3, #3
 8001b22:	2104      	movs	r1, #4
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f93b 	bl	8001da0 <BMP388_ReadRegister>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status_temp && status_pressure)
 8001b30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8117 	beq.w	8001d68 <BMP388_ReadData+0x2d0>
 8001b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8112 	beq.w	8001d68 <BMP388_ReadData+0x2d0>
	{
		uint32_t press_raw = (rx_press_data[2] << 16) | (rx_press_data[1] << 8) | rx_press_data[0];
 8001b44:	7abb      	ldrb	r3, [r7, #10]
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	7a7b      	ldrb	r3, [r7, #9]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	7a3a      	ldrb	r2, [r7, #8]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28

		float press_partial_data1 = sensor->calib_data->par_p6 * sensor->temperature;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_data2 = sensor->calib_data->par_p7 * (sensor->temperature * sensor->temperature);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	edc7 7a08 	vstr	s15, [r7, #32]
		float press_partial_data3 = sensor->calib_data->par_p8 * (sensor->temperature * sensor->temperature * sensor->temperature);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	edc7 7a07 	vstr	s15, [r7, #28]
		float press_partial_out1 = sensor->calib_data->par_p5 + press_partial_data1 + press_partial_data2 + press_partial_data3;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	ed93 7a07 	vldr	s14, [r3, #28]
 8001bbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd4:	edc7 7a06 	vstr	s15, [r7, #24]

		press_partial_data1 = sensor->calib_data->par_p2 * sensor->temperature;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		press_partial_data2 = sensor->calib_data->par_p3 * (sensor->temperature * sensor->temperature);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	edd3 6a04 	vldr	s13, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	edc7 7a08 	vstr	s15, [r7, #32]
		press_partial_data3 = sensor->calib_data->par_p4 * (sensor->temperature * sensor->temperature * sensor->temperature);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	edc7 7a07 	vstr	s15, [r7, #28]
		float press_partial_out2 = (float)press_raw * (sensor->calib_data->par_p1 + press_partial_data1 + press_partial_data2 + press_partial_data3);
 8001c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c52:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c56:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	edc7 7a05 	vstr	s15, [r7, #20]

		press_partial_data1 = (float)press_raw * (float)press_raw;
 8001c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		press_partial_data2 = sensor->calib_data->par_p9 + sensor->calib_data->par_p10 * sensor->temperature;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc7 7a08 	vstr	s15, [r7, #32]
		press_partial_data3 = press_partial_data1 *	press_partial_data2;
 8001ca8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001cac:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb4:	edc7 7a07 	vstr	s15, [r7, #28]
		float press_partial_out3 = press_partial_data3 + ((float)press_raw * (float)press_raw * (float)press_raw) * sensor->calib_data->par_p11;
 8001cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf2:	edc7 7a04 	vstr	s15, [r7, #16]

		sensor->pressure = press_partial_out1 + press_partial_out2 + press_partial_out3;
 8001cf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	edc3 7a05 	vstr	s15, [r3, #20]

		// Compute altitude

		if (sensor->pressure && sensor->startup_pressure)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	d028      	beq.n	8001d72 <BMP388_ReadData+0x2da>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	d020      	beq.n	8001d72 <BMP388_ReadData+0x2da>
		{
			sensor->altitude = 44330 * (1 - powf(sensor->pressure / sensor->startup_pressure, 1.0 / 5.25579));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d40:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001d94 <BMP388_ReadData+0x2fc>
 8001d44:	eeb0 0a66 	vmov.f32	s0, s13
 8001d48:	f012 fd8a 	bl	8014860 <powf>
 8001d4c:	eef0 7a40 	vmov.f32	s15, s0
 8001d50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d58:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d98 <BMP388_ReadData+0x300>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	edc3 7a07 	vstr	s15, [r3, #28]
	{
 8001d66:	e004      	b.n	8001d72 <BMP388_ReadData+0x2da>

		// Data ready INT cleared automatically 2.5 ms after the interrupt assertion
	}
	else
	{
		USB_Log("ERR reading BMP388 data.", ERR);
 8001d68:	2102      	movs	r1, #2
 8001d6a:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <BMP388_ReadData+0x304>)
 8001d6c:	f000 fc1a 	bl	80025a4 <USB_Log>
 8001d70:	e000      	b.n	8001d74 <BMP388_ReadData+0x2dc>
	{
 8001d72:	bf00      	nop
	}

	return status_temp && status_pressure;
 8001d74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <BMP388_ReadData+0x2f0>
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <BMP388_ReadData+0x2f0>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <BMP388_ReadData+0x2f2>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3740      	adds	r7, #64	@ 0x40
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	3e42d52f 	.word	0x3e42d52f
 8001d98:	472d2a00 	.word	0x472d2a00
 8001d9c:	080155e4 	.word	0x080155e4

08001da0 <BMP388_ReadRegister>:
 *
 * BMP388 LOW LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t BMP388_ReadRegister(BMP388* sensor, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af04      	add	r7, sp, #16
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	461a      	mov	r2, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	72fb      	strb	r3, [r7, #11]
 8001db0:	4613      	mov	r3, r2
 8001db2:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00b fe28 	bl	800da14 <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Read(sensor->i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6858      	ldr	r0, [r3, #4]
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	893b      	ldrh	r3, [r7, #8]
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	21ec      	movs	r1, #236	@ 0xec
 8001dde:	f002 fb17 	bl	8004410 <HAL_I2C_Mem_Read>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00b fe57 	bl	800daaa <osMutexRelease>

	if (!status)
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <BMP388_ReadRegister+0x6a>
	{
		USB_Log("BMP388 register read failed.\n", ERR);
 8001e02:	2102      	movs	r1, #2
 8001e04:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <BMP388_ReadRegister+0x74>)
 8001e06:	f000 fbcd 	bl	80025a4 <USB_Log>
	}

	return status;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	08015614 	.word	0x08015614

08001e18 <BMP388_WriteRegister>:

uint8_t BMP388_WriteRegister(BMP388* sensor, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	460b      	mov	r3, r1
 8001e26:	72fb      	strb	r3, [r7, #11]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00b fdec 	bl	800da14 <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Write(sensor->i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6858      	ldr	r0, [r3, #4]
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e48:	9302      	str	r3, [sp, #8]
 8001e4a:	893b      	ldrh	r3, [r7, #8]
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2301      	movs	r3, #1
 8001e54:	21ec      	movs	r1, #236	@ 0xec
 8001e56:	f002 f9c7 	bl	80041e8 <HAL_I2C_Mem_Write>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f00b fe1b 	bl	800daaa <osMutexRelease>

	if (!status)
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <BMP388_WriteRegister+0x6a>
	{
		USB_Log("BMP388 register write failed.\n", ERR);
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	4803      	ldr	r0, [pc, #12]	@ (8001e8c <BMP388_WriteRegister+0x74>)
 8001e7e:	f000 fb91 	bl	80025a4 <USB_Log>
	}

	return status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	08015634 	.word	0x08015634

08001e90 <BMP388_ReadCalibrationData>:

uint8_t BMP388_ReadCalibrationData(BMP388* sensor)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	uint8_t rx_data[2];

	// PAR T1
	BMP388_ReadRegister(sensor, NVM_PAR_T1_LSB, rx_data, 2);
 8001e98:	f107 0208 	add.w	r2, r7, #8
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	2131      	movs	r1, #49	@ 0x31
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff7d 	bl	8001da0 <BMP388_ReadRegister>
	uint16_t par_t1_raw = (rx_data[1] << 8) | rx_data[0];
 8001ea6:	7a7b      	ldrb	r3, [r7, #9]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	7a3b      	ldrb	r3, [r7, #8]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	83fb      	strh	r3, [r7, #30]
	sensor->calib_data->par_t1 = (float)par_t1_raw / powf(2, -8);
 8001eb6:	8bfb      	ldrh	r3, [r7, #30]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	eddf 6aad 	vldr	s13, [pc, #692]	@ 800217c <BMP388_ReadCalibrationData+0x2ec>
 8001ec8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ecc:	edc3 7a00 	vstr	s15, [r3]

	// PAR T2
	BMP388_ReadRegister(sensor, NVM_PAR_T2_LSB, rx_data, 2);
 8001ed0:	f107 0208 	add.w	r2, r7, #8
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	2133      	movs	r1, #51	@ 0x33
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff61 	bl	8001da0 <BMP388_ReadRegister>
	uint16_t par_t2_raw = (rx_data[1] << 8) | rx_data[0];
 8001ede:	7a7b      	ldrb	r3, [r7, #9]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	7a3b      	ldrb	r3, [r7, #8]
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	83bb      	strh	r3, [r7, #28]
	sensor->calib_data->par_t2 = (float)par_t2_raw / powf(2, 30);
 8001eee:	8bbb      	ldrh	r3, [r7, #28]
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8002180 <BMP388_ReadCalibrationData+0x2f0>
 8001f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f04:	edc3 7a01 	vstr	s15, [r3, #4]

	// PAR T3
	BMP388_ReadRegister(sensor, NVM_PAR_T3, rx_data, 1);
 8001f08:	f107 0208 	add.w	r2, r7, #8
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2135      	movs	r1, #53	@ 0x35
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff45 	bl	8001da0 <BMP388_ReadRegister>
	int8_t par_t3_raw = rx_data[0];
 8001f16:	7a3b      	ldrb	r3, [r7, #8]
 8001f18:	76fb      	strb	r3, [r7, #27]
	sensor->calib_data->par_t3 = (float)par_t3_raw / powf(2, 48);
 8001f1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8002184 <BMP388_ReadCalibrationData+0x2f4>
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	edc3 7a02 	vstr	s15, [r3, #8]

	// PAR P1
	BMP388_ReadRegister(sensor, NVM_PAR_P1_LSB, rx_data, 2);
 8001f36:	f107 0208 	add.w	r2, r7, #8
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	2136      	movs	r1, #54	@ 0x36
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff2e 	bl	8001da0 <BMP388_ReadRegister>
	int16_t par_p1_raw = (rx_data[1] << 8) | rx_data[0];
 8001f44:	7a7b      	ldrb	r3, [r7, #9]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	7a3b      	ldrb	r3, [r7, #8]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	833b      	strh	r3, [r7, #24]
	sensor->calib_data->par_p1 = ((float)par_p1_raw - powf(2, 14)) / powf(2, 20);
 8001f52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8002188 <BMP388_ReadCalibrationData+0x2f8>
 8001f62:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	eddf 6a88 	vldr	s13, [pc, #544]	@ 800218c <BMP388_ReadCalibrationData+0x2fc>
 8001f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f72:	edc3 7a03 	vstr	s15, [r3, #12]

	// PAR P2
	BMP388_ReadRegister(sensor, NVM_PAR_P2_LSB, rx_data, 2);
 8001f76:	f107 0208 	add.w	r2, r7, #8
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	2138      	movs	r1, #56	@ 0x38
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ff0e 	bl	8001da0 <BMP388_ReadRegister>
	int16_t par_p2_raw = (rx_data[1] << 8) | rx_data[0];
 8001f84:	7a7b      	ldrb	r3, [r7, #9]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	7a3b      	ldrb	r3, [r7, #8]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	82fb      	strh	r3, [r7, #22]
	sensor->calib_data->par_p2 = ((float)par_p2_raw - powf(2, 14)) / powf(2, 29);
 8001f92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002188 <BMP388_ReadCalibrationData+0x2f8>
 8001fa2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002190 <BMP388_ReadCalibrationData+0x300>
 8001fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb2:	edc3 7a04 	vstr	s15, [r3, #16]

	// PAR P3
	BMP388_ReadRegister(sensor, NVM_PAR_P3, rx_data, 1);
 8001fb6:	f107 0208 	add.w	r2, r7, #8
 8001fba:	2301      	movs	r3, #1
 8001fbc:	213a      	movs	r1, #58	@ 0x3a
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff feee 	bl	8001da0 <BMP388_ReadRegister>
	int8_t par_p3_raw = rx_data[0];
 8001fc4:	7a3b      	ldrb	r3, [r7, #8]
 8001fc6:	757b      	strb	r3, [r7, #21]
	sensor->calib_data->par_p3 = (float)par_p3_raw / powf(2, 32);
 8001fc8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002194 <BMP388_ReadCalibrationData+0x304>
 8001fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe0:	edc3 7a05 	vstr	s15, [r3, #20]

	// PAR P4
	BMP388_ReadRegister(sensor, NVM_PAR_P4, rx_data, 1);
 8001fe4:	f107 0208 	add.w	r2, r7, #8
 8001fe8:	2301      	movs	r3, #1
 8001fea:	213b      	movs	r1, #59	@ 0x3b
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fed7 	bl	8001da0 <BMP388_ReadRegister>
	int8_t par_p4_raw = rx_data[0];
 8001ff2:	7a3b      	ldrb	r3, [r7, #8]
 8001ff4:	753b      	strb	r3, [r7, #20]
	sensor->calib_data->par_p4 = (float)par_p4_raw / powf(2, 37);
 8001ff6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8002198 <BMP388_ReadCalibrationData+0x308>
 800200a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200e:	edc3 7a06 	vstr	s15, [r3, #24]

	// PAR P5
	BMP388_ReadRegister(sensor, NVM_PAR_P5_LSB, rx_data, 2);
 8002012:	f107 0208 	add.w	r2, r7, #8
 8002016:	2302      	movs	r3, #2
 8002018:	213c      	movs	r1, #60	@ 0x3c
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fec0 	bl	8001da0 <BMP388_ReadRegister>
	uint16_t par_p5_raw = (rx_data[1] << 8) | rx_data[0];
 8002020:	7a7b      	ldrb	r3, [r7, #9]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b21a      	sxth	r2, r3
 8002026:	7a3b      	ldrb	r3, [r7, #8]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21b      	sxth	r3, r3
 800202e:	827b      	strh	r3, [r7, #18]
	sensor->calib_data->par_p5 = (float)par_p5_raw / powf(2, -3);
 8002030:	8a7b      	ldrh	r3, [r7, #18]
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8002042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002046:	edc3 7a07 	vstr	s15, [r3, #28]

	// PAR P6
	BMP388_ReadRegister(sensor, NVM_PAR_P6_LSB, rx_data, 2);
 800204a:	f107 0208 	add.w	r2, r7, #8
 800204e:	2302      	movs	r3, #2
 8002050:	213e      	movs	r1, #62	@ 0x3e
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fea4 	bl	8001da0 <BMP388_ReadRegister>
	uint16_t par_p6_raw = (rx_data[1] << 8) | rx_data[0];
 8002058:	7a7b      	ldrb	r3, [r7, #9]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21a      	sxth	r2, r3
 800205e:	7a3b      	ldrb	r3, [r7, #8]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21b      	sxth	r3, r3
 8002066:	823b      	strh	r3, [r7, #16]
	sensor->calib_data->par_p6 = (float)par_p6_raw / powf(2, 6);
 8002068:	8a3b      	ldrh	r3, [r7, #16]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	eddf 6a49 	vldr	s13, [pc, #292]	@ 800219c <BMP388_ReadCalibrationData+0x30c>
 800207a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207e:	edc3 7a08 	vstr	s15, [r3, #32]

	// PAR P7
	BMP388_ReadRegister(sensor, NVM_PAR_P7, rx_data, 1);
 8002082:	f107 0208 	add.w	r2, r7, #8
 8002086:	2301      	movs	r3, #1
 8002088:	2140      	movs	r1, #64	@ 0x40
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fe88 	bl	8001da0 <BMP388_ReadRegister>
	int8_t par_p7_raw = rx_data[0];
 8002090:	7a3b      	ldrb	r3, [r7, #8]
 8002092:	73fb      	strb	r3, [r7, #15]
	sensor->calib_data->par_p7 = (float)par_p7_raw / powf(2, 8);
 8002094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80021a0 <BMP388_ReadCalibrationData+0x310>
 80020a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ac:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// PAR P8
	BMP388_ReadRegister(sensor, NVM_PAR_P8, rx_data, 1);
 80020b0:	f107 0208 	add.w	r2, r7, #8
 80020b4:	2301      	movs	r3, #1
 80020b6:	2141      	movs	r1, #65	@ 0x41
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fe71 	bl	8001da0 <BMP388_ReadRegister>
	int8_t par_p8_raw = rx_data[0];
 80020be:	7a3b      	ldrb	r3, [r7, #8]
 80020c0:	73bb      	strb	r3, [r7, #14]
	sensor->calib_data->par_p8 = (float)par_p8_raw / powf(2, 15);
 80020c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80021a4 <BMP388_ReadCalibrationData+0x314>
 80020d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020da:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// PAR P9
	BMP388_ReadRegister(sensor, NVM_PAR_P9_LSB, rx_data, 2);
 80020de:	f107 0208 	add.w	r2, r7, #8
 80020e2:	2302      	movs	r3, #2
 80020e4:	2142      	movs	r1, #66	@ 0x42
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fe5a 	bl	8001da0 <BMP388_ReadRegister>
	int16_t par_p9_raw = (rx_data[1] << 8) | rx_data[0];
 80020ec:	7a7b      	ldrb	r3, [r7, #9]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	7a3b      	ldrb	r3, [r7, #8]
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	81bb      	strh	r3, [r7, #12]
	sensor->calib_data->par_p9 = (float)par_p9_raw / powf(2, 48);
 80020fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002184 <BMP388_ReadCalibrationData+0x2f4>
 800210e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002112:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// PAR P10
	BMP388_ReadRegister(sensor, NVM_PAR_P10, rx_data, 1);
 8002116:	f107 0208 	add.w	r2, r7, #8
 800211a:	2301      	movs	r3, #1
 800211c:	2144      	movs	r1, #68	@ 0x44
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fe3e 	bl	8001da0 <BMP388_ReadRegister>
	int8_t par_p10_raw = rx_data[0];
 8002124:	7a3b      	ldrb	r3, [r7, #8]
 8002126:	72fb      	strb	r3, [r7, #11]
	sensor->calib_data->par_p10 = (float)par_p10_raw / powf(2, 48);
 8002128:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002184 <BMP388_ReadCalibrationData+0x2f4>
 800213c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002140:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// PAR P11
	BMP388_ReadRegister(sensor, NVM_PAR_P11, rx_data, 1);
 8002144:	f107 0208 	add.w	r2, r7, #8
 8002148:	2301      	movs	r3, #1
 800214a:	2145      	movs	r1, #69	@ 0x45
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fe27 	bl	8001da0 <BMP388_ReadRegister>
	int8_t par_p11_raw = rx_data[0];
 8002152:	7a3b      	ldrb	r3, [r7, #8]
 8002154:	72bb      	strb	r3, [r7, #10]
	sensor->calib_data->par_p11 = (float)par_p11_raw / powf(2, 65);
 8002156:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80021a8 <BMP388_ReadCalibrationData+0x318>
 800216a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	3b800000 	.word	0x3b800000
 8002180:	4e800000 	.word	0x4e800000
 8002184:	57800000 	.word	0x57800000
 8002188:	46800000 	.word	0x46800000
 800218c:	49800000 	.word	0x49800000
 8002190:	4e000000 	.word	0x4e000000
 8002194:	4f800000 	.word	0x4f800000
 8002198:	52000000 	.word	0x52000000
 800219c:	42800000 	.word	0x42800000
 80021a0:	43800000 	.word	0x43800000
 80021a4:	47000000 	.word	0x47000000
 80021a8:	60000000 	.word	0x60000000

080021ac <BMP388_ComputeStartupPressure>:

uint8_t BMP388_ComputeStartupPressure(BMP388* sensor)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	/*
	 * Compute the average current pressure (for initial altitude reference)
	 */

	uint8_t tx_data[2];
	uint8_t sample_num = 50;
 80021b4:	2332      	movs	r3, #50	@ 0x32
 80021b6:	73fb      	strb	r3, [r7, #15]
	float running_pressure = 0;
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < sample_num; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e01a      	b.n	80021fa <BMP388_ComputeStartupPressure+0x4e>
	{
		// Switch sensor into forced mode (take one reading, return to sleep)
		tx_data[0] = 0x13;
 80021c4:	2313      	movs	r3, #19
 80021c6:	733b      	strb	r3, [r7, #12]
		BMP388_WriteRegister(sensor, REG_PWR_CTRL, tx_data, 1);
 80021c8:	f107 020c 	add.w	r2, r7, #12
 80021cc:	2301      	movs	r3, #1
 80021ce:	211b      	movs	r1, #27
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe21 	bl	8001e18 <BMP388_WriteRegister>
		osDelay(40);
 80021d6:	2028      	movs	r0, #40	@ 0x28
 80021d8:	f00b fb7b 	bl	800d8d2 <osDelay>
		BMP388_ReadData(sensor);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fc5b 	bl	8001a98 <BMP388_ReadData>
		running_pressure += sensor->pressure;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80021e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < sample_num; i++)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	3301      	adds	r3, #1
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbe0      	blt.n	80021c4 <BMP388_ComputeStartupPressure+0x18>
	}

	sensor->startup_pressure = running_pressure / sample_num;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <LIS3MDL_Init>:
 *
 * LIS3MDL INTERFACE
 *
 */
uint8_t LIS3MDL_Init(LIS3MDL* sensor, I2C_HandleTypeDef* i2c_handle, osMutexId_t* i2c_mutex, uint16_t irq_pin)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	807b      	strh	r3, [r7, #2]
	sensor->i2c_handle = i2c_handle;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	601a      	str	r2, [r3, #0]
	sensor->i2c_mutex = i2c_mutex;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	605a      	str	r2, [r3, #4]
	sensor->irq_pin = irq_pin;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	811a      	strh	r2, [r3, #8]
	sensor->LSB_per_gauss = 6842.0; /* Based on +-4G range */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a37      	ldr	r2, [pc, #220]	@ (8002324 <LIS3MDL_Init+0x100>)
 8002248:	61da      	str	r2, [r3, #28]
	sensor->x_offset = -34.20 / 100.0; /* Micro-tesla to gauss */
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a36      	ldr	r2, [pc, #216]	@ (8002328 <LIS3MDL_Init+0x104>)
 800224e:	621a      	str	r2, [r3, #32]
	sensor->y_offset = -11.68 / 100.0;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a36      	ldr	r2, [pc, #216]	@ (800232c <LIS3MDL_Init+0x108>)
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->z_offset = -47.37 / 100.0;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a35      	ldr	r2, [pc, #212]	@ (8002330 <LIS3MDL_Init+0x10c>)
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
 800225c:	2300      	movs	r3, #0
 800225e:	743b      	strb	r3, [r7, #16]
	LIS3MDL_ReadRegister(sensor, WHO_AM_I, rx_data, 1);
 8002260:	f107 0210 	add.w	r2, r7, #16
 8002264:	2301      	movs	r3, #1
 8002266:	210f      	movs	r1, #15
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f91b 	bl	80024a4 <LIS3MDL_ReadRegister>
	if (rx_data[0] == 0x3D)
 800226e:	7c3b      	ldrb	r3, [r7, #16]
 8002270:	2b3d      	cmp	r3, #61	@ 0x3d
 8002272:	d14e      	bne.n	8002312 <LIS3MDL_Init+0xee>
	{
		USB_Log("Found LIS3MDL, starting initialization.", CRITICAL);
 8002274:	2101      	movs	r1, #1
 8002276:	482f      	ldr	r0, [pc, #188]	@ (8002334 <LIS3MDL_Init+0x110>)
 8002278:	f000 f994 	bl	80025a4 <USB_Log>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);
 800227c:	200a      	movs	r0, #10
 800227e:	f00b fb28 	bl	800d8d2 <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0x04;
 8002282:	2304      	movs	r3, #4
 8002284:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG2, tx_data, 1);
 8002286:	f107 0214 	add.w	r2, r7, #20
 800228a:	2301      	movs	r3, #1
 800228c:	2121      	movs	r1, #33	@ 0x21
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f94c 	bl	800252c <LIS3MDL_WriteRegister>
	osDelay(10);
 8002294:	200a      	movs	r0, #10
 8002296:	f00b fb1c 	bl	800d8d2 <osDelay>

	// Set +-4G range
	tx_data[0] = 0x00;
 800229a:	2300      	movs	r3, #0
 800229c:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG2, tx_data, 1);
 800229e:	f107 0214 	add.w	r2, r7, #20
 80022a2:	2301      	movs	r3, #1
 80022a4:	2121      	movs	r1, #33	@ 0x21
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f940 	bl	800252c <LIS3MDL_WriteRegister>
	osDelay(10);
 80022ac:	200a      	movs	r0, #10
 80022ae:	f00b fb10 	bl	800d8d2 <osDelay>

	// Set X,Y axes ultra-high performance mode, 40Hz ODR, enable temperature sensor
	tx_data[0] = 0xF8;
 80022b2:	23f8      	movs	r3, #248	@ 0xf8
 80022b4:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG1, tx_data, 1);
 80022b6:	f107 0214 	add.w	r2, r7, #20
 80022ba:	2301      	movs	r3, #1
 80022bc:	2120      	movs	r1, #32
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f934 	bl	800252c <LIS3MDL_WriteRegister>
	osDelay(10);
 80022c4:	200a      	movs	r0, #10
 80022c6:	f00b fb04 	bl	800d8d2 <osDelay>

	// Set Z axis ultra-high performance mode
	tx_data[0] = 0x0C;
 80022ca:	230c      	movs	r3, #12
 80022cc:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG4, tx_data, 1);
 80022ce:	f107 0214 	add.w	r2, r7, #20
 80022d2:	2301      	movs	r3, #1
 80022d4:	2123      	movs	r1, #35	@ 0x23
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f928 	bl	800252c <LIS3MDL_WriteRegister>
	osDelay(10);
 80022dc:	200a      	movs	r0, #10
 80022de:	f00b faf8 	bl	800d8d2 <osDelay>

	// Switch to continuous-conversion mode
	tx_data[0] = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	753b      	strb	r3, [r7, #20]
	LIS3MDL_WriteRegister(sensor, CTRL_REG3, tx_data, 1);
 80022e6:	f107 0214 	add.w	r2, r7, #20
 80022ea:	2301      	movs	r3, #1
 80022ec:	2122      	movs	r1, #34	@ 0x22
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f91c 	bl	800252c <LIS3MDL_WriteRegister>
	osDelay(10);
 80022f4:	200a      	movs	r0, #10
 80022f6:	f00b faec 	bl	800d8d2 <osDelay>

	// Read data to clear DRDY interrupt
	LIS3MDL_ReadData(sensor);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f820 	bl	8002340 <LIS3MDL_ReadData>

	USB_Log("LIS3MDL initialized OK.", CRITICAL);
 8002300:	2101      	movs	r1, #1
 8002302:	480d      	ldr	r0, [pc, #52]	@ (8002338 <LIS3MDL_Init+0x114>)
 8002304:	f000 f94e 	bl	80025a4 <USB_Log>
	osDelay(100);
 8002308:	2064      	movs	r0, #100	@ 0x64
 800230a:	f00b fae2 	bl	800d8d2 <osDelay>

	return 1;
 800230e:	2301      	movs	r3, #1
 8002310:	e004      	b.n	800231c <LIS3MDL_Init+0xf8>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8002312:	2102      	movs	r1, #2
 8002314:	4809      	ldr	r0, [pc, #36]	@ (800233c <LIS3MDL_Init+0x118>)
 8002316:	f000 f945 	bl	80025a4 <USB_Log>
		return 0;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	45d5d000 	.word	0x45d5d000
 8002328:	beaf1aa0 	.word	0xbeaf1aa0
 800232c:	bdef34d7 	.word	0xbdef34d7
 8002330:	bef288ce 	.word	0xbef288ce
 8002334:	08015654 	.word	0x08015654
 8002338:	080156ac 	.word	0x080156ac
 800233c:	0801567c 	.word	0x0801567c

08002340 <LIS3MDL_ReadData>:

uint8_t LIS3MDL_ReadData(LIS3MDL* sensor)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[6];
	uint8_t status = LIS3MDL_ReadRegister(sensor, OUT_X_L, raw_data, sizeof(raw_data));
 8002348:	f107 020c 	add.w	r2, r7, #12
 800234c:	2306      	movs	r3, #6
 800234e:	2128      	movs	r1, #40	@ 0x28
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f8a7 	bl	80024a4 <LIS3MDL_ReadRegister>
 8002356:	4603      	mov	r3, r0
 8002358:	77fb      	strb	r3, [r7, #31]

	if (status)
 800235a:	7ffb      	ldrb	r3, [r7, #31]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 808c 	beq.w	800247a <LIS3MDL_ReadData+0x13a>
	{
		int16_t raw_x_int16 = (raw_data[1] << 8) | raw_data[0];
 8002362:	7b7b      	ldrb	r3, [r7, #13]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	7b3b      	ldrb	r3, [r7, #12]
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	83bb      	strh	r3, [r7, #28]
		int16_t raw_y_int16 = (raw_data[3] << 8) | raw_data[2];
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b21a      	sxth	r2, r3
 8002376:	7bbb      	ldrb	r3, [r7, #14]
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	837b      	strh	r3, [r7, #26]
		int16_t raw_z_int16 = (raw_data[5] << 8) | raw_data[4];
 800237e:	7c7b      	ldrb	r3, [r7, #17]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	b21a      	sxth	r2, r3
 8002384:	7c3b      	ldrb	r3, [r7, #16]
 8002386:	b21b      	sxth	r3, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	833b      	strh	r3, [r7, #24]

		sensor->intensity_x_gauss = (float)raw_x_int16 / sensor->LSB_per_gauss - sensor->x_offset;
 800238c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	edd3 7a07 	vldr	s15, [r3, #28]
 800239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80023a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	edc3 7a03 	vstr	s15, [r3, #12]
		sensor->intensity_y_gauss = (float)raw_y_int16 / sensor->LSB_per_gauss - sensor->y_offset;
 80023b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80023c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80023ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	edc3 7a04 	vstr	s15, [r3, #16]
		sensor->intensity_z_gauss = (float)raw_z_int16 / sensor->LSB_per_gauss - sensor->z_offset;
 80023d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80023ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80023f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	edc3 7a05 	vstr	s15, [r3, #20]

		float declination = 11.8333; // Medicine Hat
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <LIS3MDL_ReadData+0x158>)
 8002400:	617b      	str	r3, [r7, #20]
		sensor->heading = atan2f(sensor->intensity_y_gauss, sensor->intensity_x_gauss) * (180.0 / M_PI);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	edd3 7a04 	vldr	s15, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	ed93 7a03 	vldr	s14, [r3, #12]
 800240e:	eef0 0a47 	vmov.f32	s1, s14
 8002412:	eeb0 0a67 	vmov.f32	s0, s15
 8002416:	f012 fa21 	bl	801485c <atan2f>
 800241a:	ee10 3a10 	vmov	r3, s0
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f8ba 	bl	8000598 <__aeabi_f2d>
 8002424:	a31a      	add	r3, pc, #104	@ (adr r3, 8002490 <LIS3MDL_ReadData+0x150>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fe f90d 	bl	8000648 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fbdf 	bl	8000bf8 <__aeabi_d2f>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
		sensor->heading += declination;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ed93 7a06 	vldr	s14, [r3, #24]
 8002446:	edd7 7a05 	vldr	s15, [r7, #20]
 800244a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	edc3 7a06 	vstr	s15, [r3, #24]
		if (sensor->heading < 0)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	edd3 7a06 	vldr	s15, [r3, #24]
 800245a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	d50e      	bpl.n	8002482 <LIS3MDL_ReadData+0x142>
		{
			sensor->heading += 360;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	edd3 7a06 	vldr	s15, [r3, #24]
 800246a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800249c <LIS3MDL_ReadData+0x15c>
 800246e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	edc3 7a06 	vstr	s15, [r3, #24]
 8002478:	e003      	b.n	8002482 <LIS3MDL_ReadData+0x142>

		// DRDY interrupt cleared automatically after read
	}
	else
	{
		USB_Log("ERR reading LIS3MDL data.", ERR);
 800247a:	2102      	movs	r1, #2
 800247c:	4808      	ldr	r0, [pc, #32]	@ (80024a0 <LIS3MDL_ReadData+0x160>)
 800247e:	f000 f891 	bl	80025a4 <USB_Log>
	}

	return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	1a63c1f8 	.word	0x1a63c1f8
 8002494:	404ca5dc 	.word	0x404ca5dc
 8002498:	413d5532 	.word	0x413d5532
 800249c:	43b40000 	.word	0x43b40000
 80024a0:	080156c4 	.word	0x080156c4

080024a4 <LIS3MDL_ReadRegister>:
 *
 * LIS3MDL LOW-LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t LIS3MDL_ReadRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af04      	add	r7, sp, #16
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	72fb      	strb	r3, [r7, #11]
 80024b4:	4613      	mov	r3, r2
 80024b6:	813b      	strh	r3, [r7, #8]
	if (data_len > 1)
 80024b8:	893b      	ldrh	r3, [r7, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d903      	bls.n	80024c6 <LIS3MDL_ReadRegister+0x22>
	{
		// In order to read multiple bytes, it is necessary to assert the most significant bit of the address field
		reg_addr |= 0x80;
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024c4:	72fb      	strb	r3, [r7, #11]
	}

	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00b fa9f 	bl	800da14 <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Read(sensor->i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	893b      	ldrh	r3, [r7, #8]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	2138      	movs	r1, #56	@ 0x38
 80024f0:	f001 ff8e 	bl	8004410 <HAL_I2C_Mem_Read>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f00b face 	bl	800daaa <osMutexRelease>

	if (!status)
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <LIS3MDL_ReadRegister+0x78>
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
 8002514:	2102      	movs	r1, #2
 8002516:	4804      	ldr	r0, [pc, #16]	@ (8002528 <LIS3MDL_ReadRegister+0x84>)
 8002518:	f000 f844 	bl	80025a4 <USB_Log>
	}

	return status;
 800251c:	7dfb      	ldrb	r3, [r7, #23]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	080156f0 	.word	0x080156f0

0800252c <LIS3MDL_WriteRegister>:

uint8_t LIS3MDL_WriteRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af04      	add	r7, sp, #16
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	461a      	mov	r2, r3
 8002538:	460b      	mov	r3, r1
 800253a:	72fb      	strb	r3, [r7, #11]
 800253c:	4613      	mov	r3, r2
 800253e:	813b      	strh	r3, [r7, #8]
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800254a:	4618      	mov	r0, r3
 800254c:	f00b fa62 	bl	800da14 <osMutexAcquire>
	uint8_t status = (HAL_I2C_Mem_Write(sensor->i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	b29a      	uxth	r2, r3
 8002558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	893b      	ldrh	r3, [r7, #8]
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2301      	movs	r3, #1
 8002568:	2138      	movs	r1, #56	@ 0x38
 800256a:	f001 fe3d 	bl	80041e8 <HAL_I2C_Mem_Write>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	75fb      	strb	r3, [r7, #23]
	osMutexRelease(*sensor->i2c_mutex);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f00b fa91 	bl	800daaa <osMutexRelease>

	if (!status)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <LIS3MDL_WriteRegister+0x6a>
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
 800258e:	2102      	movs	r1, #2
 8002590:	4803      	ldr	r0, [pc, #12]	@ (80025a0 <LIS3MDL_WriteRegister+0x74>)
 8002592:	f000 f807 	bl	80025a4 <USB_Log>
	}

	return status;
 8002596:	7dfb      	ldrb	r3, [r7, #23]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	08015710 	.word	0x08015710

080025a4 <USB_Log>:
#include "cmsis_os.h"
#include "usbd_cdc_if.h"
#include "usbd_def.h"

uint8_t USB_Log(const char* string, Log_Level level)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	ed2d 8b02 	vpush	{d8}
 80025aa:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80025ae:	af04      	add	r7, sp, #16
 80025b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025b4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80025b8:	6018      	str	r0, [r3, #0]
 80025ba:	460a      	mov	r2, r1
 80025bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025c0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80025c4:	701a      	strb	r2, [r3, #0]
	char str[512];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 80025c6:	f00b f8d3 	bl	800d770 <osKernelGetTickCount>
 80025ca:	ee07 0a90 	vmov	s15, r0
 80025ce:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80025d2:	f00b f8e2 	bl	800d79a <osKernelGetTickFreq>
 80025d6:	ee07 0a90 	vmov	s15, r0
 80025da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025de:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80025e2:	edc7 7a82 	vstr	s15, [r7, #520]	@ 0x208

	switch (level) {
 80025e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025ea:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d872      	bhi.n	80026da <USB_Log+0x136>
 80025f4:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <USB_Log+0x58>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	08002611 	.word	0x08002611
 8002600:	0800263d 	.word	0x0800263d
 8002604:	08002669 	.word	0x08002669
 8002608:	08002695 	.word	0x08002695
 800260c:	080026c1 	.word	0x080026c1
		case INFO:
			snprintf(str, 512, "LOG %.2f INFO %s\n", seconds, string);
 8002610:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8002614:	f7fd ffc0 	bl	8000598 <__aeabi_f2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	f107 0008 	add.w	r0, r7, #8
 8002620:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002624:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 8002628:	6809      	ldr	r1, [r1, #0]
 800262a:	9102      	str	r1, [sp, #8]
 800262c:	e9cd 2300 	strd	r2, r3, [sp]
 8002630:	4a53      	ldr	r2, [pc, #332]	@ (8002780 <USB_Log+0x1dc>)
 8002632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002636:	f00f ff7b 	bl	8012530 <sniprintf>
			break;
 800263a:	e064      	b.n	8002706 <USB_Log+0x162>
		case CRITICAL:
			snprintf(str, 512, "LOG %.2f CRIT %s\n", seconds, string);
 800263c:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8002640:	f7fd ffaa 	bl	8000598 <__aeabi_f2d>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	f107 0008 	add.w	r0, r7, #8
 800264c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002650:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 8002654:	6809      	ldr	r1, [r1, #0]
 8002656:	9102      	str	r1, [sp, #8]
 8002658:	e9cd 2300 	strd	r2, r3, [sp]
 800265c:	4a49      	ldr	r2, [pc, #292]	@ (8002784 <USB_Log+0x1e0>)
 800265e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002662:	f00f ff65 	bl	8012530 <sniprintf>
			break;
 8002666:	e04e      	b.n	8002706 <USB_Log+0x162>
		case ERR:
			snprintf(str, 512, "LOG %.2f ERR %s\n", seconds, string);
 8002668:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 800266c:	f7fd ff94 	bl	8000598 <__aeabi_f2d>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	f107 0008 	add.w	r0, r7, #8
 8002678:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800267c:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 8002680:	6809      	ldr	r1, [r1, #0]
 8002682:	9102      	str	r1, [sp, #8]
 8002684:	e9cd 2300 	strd	r2, r3, [sp]
 8002688:	4a3f      	ldr	r2, [pc, #252]	@ (8002788 <USB_Log+0x1e4>)
 800268a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800268e:	f00f ff4f 	bl	8012530 <sniprintf>
			break;
 8002692:	e038      	b.n	8002706 <USB_Log+0x162>
		case SENSOR:
			snprintf(str, 512, "SENSOR %.2f %s\n", seconds, string);
 8002694:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8002698:	f7fd ff7e 	bl	8000598 <__aeabi_f2d>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	f107 0008 	add.w	r0, r7, #8
 80026a4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80026a8:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 80026ac:	6809      	ldr	r1, [r1, #0]
 80026ae:	9102      	str	r1, [sp, #8]
 80026b0:	e9cd 2300 	strd	r2, r3, [sp]
 80026b4:	4a35      	ldr	r2, [pc, #212]	@ (800278c <USB_Log+0x1e8>)
 80026b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026ba:	f00f ff39 	bl	8012530 <sniprintf>
			break;
 80026be:	e022      	b.n	8002706 <USB_Log+0x162>
		case RAW:
			snprintf(str, 512, "%s\n", string);
 80026c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80026c4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80026c8:	f107 0008 	add.w	r0, r7, #8
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a30      	ldr	r2, [pc, #192]	@ (8002790 <USB_Log+0x1ec>)
 80026d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026d4:	f00f ff2c 	bl	8012530 <sniprintf>
			break;
 80026d8:	e015      	b.n	8002706 <USB_Log+0x162>
		default:
			snprintf(str, 512, "LOG %.2f ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 80026da:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80026de:	f7fd ff5b 	bl	8000598 <__aeabi_f2d>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	f107 0008 	add.w	r0, r7, #8
 80026ea:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80026ee:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 80026f2:	6809      	ldr	r1, [r1, #0]
 80026f4:	9102      	str	r1, [sp, #8]
 80026f6:	e9cd 2300 	strd	r2, r3, [sp]
 80026fa:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <USB_Log+0x1f0>)
 80026fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002700:	f00f ff16 	bl	8012530 <sniprintf>
			break;
 8002704:	bf00      	nop
	}

	// Get USB mutex (shared resource)
	osMutexAcquire(usbMutexHandle, osWaitForever);
 8002706:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <USB_Log+0x1f4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800270e:	4618      	mov	r0, r3
 8002710:	f00b f980 	bl	800da14 <osMutexAcquire>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fdd1 	bl	80002c0 <strlen>
 800271e:	4603      	mov	r3, r0
 8002720:	b29a      	uxth	r2, r3
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f00e fd9b 	bl	8011264 <CDC_Transmit_FS>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	while (status == USBD_BUSY)
 8002734:	e012      	b.n	800275c <USB_Log+0x1b8>
	{
		osDelay(1);
 8002736:	2001      	movs	r0, #1
 8002738:	f00b f8cb 	bl	800d8d2 <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fdbd 	bl	80002c0 <strlen>
 8002746:	4603      	mov	r3, r0
 8002748:	b29a      	uxth	r2, r3
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f00e fd87 	bl	8011264 <CDC_Transmit_FS>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	while (status == USBD_BUSY)
 800275c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002760:	2b01      	cmp	r3, #1
 8002762:	d0e8      	beq.n	8002736 <USB_Log+0x192>
	}
	osMutexRelease(usbMutexHandle);
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <USB_Log+0x1f4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f00b f99e 	bl	800daaa <osMutexRelease>

	return status;
 800276e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 8002772:	4618      	mov	r0, r3
 8002774:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002778:	46bd      	mov	sp, r7
 800277a:	ecbd 8b02 	vpop	{d8}
 800277e:	bd80      	pop	{r7, pc}
 8002780:	08015730 	.word	0x08015730
 8002784:	08015744 	.word	0x08015744
 8002788:	08015758 	.word	0x08015758
 800278c:	0801576c 	.word	0x0801576c
 8002790:	0801577c 	.word	0x0801577c
 8002794:	08015780 	.word	0x08015780
 8002798:	200028a0 	.word	0x200028a0

0800279c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 80027a0:	4831      	ldr	r0, [pc, #196]	@ (8002868 <MX_FREERTOS_Init+0xcc>)
 80027a2:	f00b f8b1 	bl	800d908 <osMutexNew>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a30      	ldr	r2, [pc, #192]	@ (800286c <MX_FREERTOS_Init+0xd0>)
 80027aa:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 80027ac:	4830      	ldr	r0, [pc, #192]	@ (8002870 <MX_FREERTOS_Init+0xd4>)
 80027ae:	f00b f8ab 	bl	800d908 <osMutexNew>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002874 <MX_FREERTOS_Init+0xd8>)
 80027b6:	6013      	str	r3, [r2, #0]

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);
 80027b8:	482f      	ldr	r0, [pc, #188]	@ (8002878 <MX_FREERTOS_Init+0xdc>)
 80027ba:	f00b f8a5 	bl	800d908 <osMutexNew>
 80027be:	4603      	mov	r3, r0
 80027c0:	4a2e      	ldr	r2, [pc, #184]	@ (800287c <MX_FREERTOS_Init+0xe0>)
 80027c2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of accIRQSemaphore */
  accIRQSemaphoreHandle = osSemaphoreNew(64, 0, &accIRQSemaphore_attributes);
 80027c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002880 <MX_FREERTOS_Init+0xe4>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	2040      	movs	r0, #64	@ 0x40
 80027ca:	f00b f9ab 	bl	800db24 <osSemaphoreNew>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002884 <MX_FREERTOS_Init+0xe8>)
 80027d2:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQSemaphore */
  gyroIRQSemaphoreHandle = osSemaphoreNew(64, 0, &gyroIRQSemaphore_attributes);
 80027d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002888 <MX_FREERTOS_Init+0xec>)
 80027d6:	2100      	movs	r1, #0
 80027d8:	2040      	movs	r0, #64	@ 0x40
 80027da:	f00b f9a3 	bl	800db24 <osSemaphoreNew>
 80027de:	4603      	mov	r3, r0
 80027e0:	4a2a      	ldr	r2, [pc, #168]	@ (800288c <MX_FREERTOS_Init+0xf0>)
 80027e2:	6013      	str	r3, [r2, #0]

  /* creation of pressureIRQSemaphore */
  pressureIRQSemaphoreHandle = osSemaphoreNew(64, 0, &pressureIRQSemaphore_attributes);
 80027e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002890 <MX_FREERTOS_Init+0xf4>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	2040      	movs	r0, #64	@ 0x40
 80027ea:	f00b f99b 	bl	800db24 <osSemaphoreNew>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <MX_FREERTOS_Init+0xf8>)
 80027f2:	6013      	str	r3, [r2, #0]

  /* creation of magIRQSemaphore */
  magIRQSemaphoreHandle = osSemaphoreNew(64, 0, &magIRQSemaphore_attributes);
 80027f4:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <MX_FREERTOS_Init+0xfc>)
 80027f6:	2100      	movs	r1, #0
 80027f8:	2040      	movs	r0, #64	@ 0x40
 80027fa:	f00b f993 	bl	800db24 <osSemaphoreNew>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a26      	ldr	r2, [pc, #152]	@ (800289c <MX_FREERTOS_Init+0x100>)
 8002802:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of applicationTask */
  applicationTaskHandle = osThreadNew(start_application_task, NULL, &applicationTask_attributes);
 8002804:	4a26      	ldr	r2, [pc, #152]	@ (80028a0 <MX_FREERTOS_Init+0x104>)
 8002806:	2100      	movs	r1, #0
 8002808:	4826      	ldr	r0, [pc, #152]	@ (80028a4 <MX_FREERTOS_Init+0x108>)
 800280a:	f00a ffcf 	bl	800d7ac <osThreadNew>
 800280e:	4603      	mov	r3, r0
 8002810:	4a25      	ldr	r2, [pc, #148]	@ (80028a8 <MX_FREERTOS_Init+0x10c>)
 8002812:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 8002814:	4a25      	ldr	r2, [pc, #148]	@ (80028ac <MX_FREERTOS_Init+0x110>)
 8002816:	2100      	movs	r1, #0
 8002818:	4825      	ldr	r0, [pc, #148]	@ (80028b0 <MX_FREERTOS_Init+0x114>)
 800281a:	f00a ffc7 	bl	800d7ac <osThreadNew>
 800281e:	4603      	mov	r3, r0
 8002820:	4a24      	ldr	r2, [pc, #144]	@ (80028b4 <MX_FREERTOS_Init+0x118>)
 8002822:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 8002824:	4a24      	ldr	r2, [pc, #144]	@ (80028b8 <MX_FREERTOS_Init+0x11c>)
 8002826:	2100      	movs	r1, #0
 8002828:	4824      	ldr	r0, [pc, #144]	@ (80028bc <MX_FREERTOS_Init+0x120>)
 800282a:	f00a ffbf 	bl	800d7ac <osThreadNew>
 800282e:	4603      	mov	r3, r0
 8002830:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <MX_FREERTOS_Init+0x124>)
 8002832:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(start_logging_task, NULL, &loggingTask_attributes);
 8002834:	4a23      	ldr	r2, [pc, #140]	@ (80028c4 <MX_FREERTOS_Init+0x128>)
 8002836:	2100      	movs	r1, #0
 8002838:	4823      	ldr	r0, [pc, #140]	@ (80028c8 <MX_FREERTOS_Init+0x12c>)
 800283a:	f00a ffb7 	bl	800d7ac <osThreadNew>
 800283e:	4603      	mov	r3, r0
 8002840:	4a22      	ldr	r2, [pc, #136]	@ (80028cc <MX_FREERTOS_Init+0x130>)
 8002842:	6013      	str	r3, [r2, #0]

  /* creation of pressureIRQTask */
  pressureIRQTaskHandle = osThreadNew(start_pressure_irq_task, NULL, &pressureIRQTask_attributes);
 8002844:	4a22      	ldr	r2, [pc, #136]	@ (80028d0 <MX_FREERTOS_Init+0x134>)
 8002846:	2100      	movs	r1, #0
 8002848:	4822      	ldr	r0, [pc, #136]	@ (80028d4 <MX_FREERTOS_Init+0x138>)
 800284a:	f00a ffaf 	bl	800d7ac <osThreadNew>
 800284e:	4603      	mov	r3, r0
 8002850:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <MX_FREERTOS_Init+0x13c>)
 8002852:	6013      	str	r3, [r2, #0]

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);
 8002854:	4a21      	ldr	r2, [pc, #132]	@ (80028dc <MX_FREERTOS_Init+0x140>)
 8002856:	2100      	movs	r1, #0
 8002858:	4821      	ldr	r0, [pc, #132]	@ (80028e0 <MX_FREERTOS_Init+0x144>)
 800285a:	f00a ffa7 	bl	800d7ac <osThreadNew>
 800285e:	4603      	mov	r3, r0
 8002860:	4a20      	ldr	r2, [pc, #128]	@ (80028e4 <MX_FREERTOS_Init+0x148>)
 8002862:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	080159fc 	.word	0x080159fc
 800286c:	2000284c 	.word	0x2000284c
 8002870:	08015a0c 	.word	0x08015a0c
 8002874:	200028a0 	.word	0x200028a0
 8002878:	08015a1c 	.word	0x08015a1c
 800287c:	200028f4 	.word	0x200028f4
 8002880:	08015a2c 	.word	0x08015a2c
 8002884:	20002948 	.word	0x20002948
 8002888:	08015a3c 	.word	0x08015a3c
 800288c:	2000299c 	.word	0x2000299c
 8002890:	08015a4c 	.word	0x08015a4c
 8002894:	200029f0 	.word	0x200029f0
 8002898:	08015a5c 	.word	0x08015a5c
 800289c:	20002a44 	.word	0x20002a44
 80028a0:	08015924 	.word	0x08015924
 80028a4:	080028e9 	.word	0x080028e9
 80028a8:	2000042c 	.word	0x2000042c
 80028ac:	08015948 	.word	0x08015948
 80028b0:	080029c1 	.word	0x080029c1
 80028b4:	20000cdc 	.word	0x20000cdc
 80028b8:	0801596c 	.word	0x0801596c
 80028bc:	080029f1 	.word	0x080029f1
 80028c0:	2000118c 	.word	0x2000118c
 80028c4:	08015990 	.word	0x08015990
 80028c8:	08002a19 	.word	0x08002a19
 80028cc:	2000163c 	.word	0x2000163c
 80028d0:	080159b4 	.word	0x080159b4
 80028d4:	08002a29 	.word	0x08002a29
 80028d8:	20001eec 	.word	0x20001eec
 80028dc:	080159d8 	.word	0x080159d8
 80028e0:	08002a51 	.word	0x08002a51
 80028e4:	2000239c 	.word	0x2000239c

080028e8 <start_application_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_application_task */
void start_application_task(void *argument)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80028ee:	af06      	add	r7, sp, #24
 80028f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028f8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_application_task */
	osDelay(400);
 80028fa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80028fe:	f00a ffe8 	bl	800d8d2 <osDelay>
	USB_Log("------------ APPLICATION STARTING ------------", CRITICAL);
 8002902:	2101      	movs	r1, #1
 8002904:	4823      	ldr	r0, [pc, #140]	@ (8002994 <start_application_task+0xac>)
 8002906:	f7ff fe4d 	bl	80025a4 <USB_Log>
	osDelay(100);
 800290a:	2064      	movs	r0, #100	@ 0x64
 800290c:	f00a ffe1 	bl	800d8d2 <osDelay>

	/* Initialize sensor drivers */
	BMI088_Init(&imu, &hspi1, &spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin, GYRO_CS_Pin, ACCEL_INT_Pin, GYRO_INT_Pin);
 8002910:	2302      	movs	r3, #2
 8002912:	9304      	str	r3, [sp, #16]
 8002914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002918:	9303      	str	r3, [sp, #12]
 800291a:	2301      	movs	r3, #1
 800291c:	9302      	str	r3, [sp, #8]
 800291e:	2310      	movs	r3, #16
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800292c:	4a1a      	ldr	r2, [pc, #104]	@ (8002998 <start_application_task+0xb0>)
 800292e:	491b      	ldr	r1, [pc, #108]	@ (800299c <start_application_task+0xb4>)
 8002930:	481b      	ldr	r0, [pc, #108]	@ (80029a0 <start_application_task+0xb8>)
 8002932:	f7fe fb29 	bl	8000f88 <BMI088_Init>
	BMP388_Init(&barometer, &calib_data, &hi2c2, &i2c2MutexHandle, BMP_INT_Pin);
 8002936:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <start_application_task+0xbc>)
 800293e:	4a1a      	ldr	r2, [pc, #104]	@ (80029a8 <start_application_task+0xc0>)
 8002940:	491a      	ldr	r1, [pc, #104]	@ (80029ac <start_application_task+0xc4>)
 8002942:	481b      	ldr	r0, [pc, #108]	@ (80029b0 <start_application_task+0xc8>)
 8002944:	f7ff f81c 	bl	8001980 <BMP388_Init>
	LIS3MDL_Init(&magnetometer, &hi2c2, &i2c2MutexHandle, MAG_DRDY_Pin);
 8002948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294c:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <start_application_task+0xbc>)
 800294e:	4916      	ldr	r1, [pc, #88]	@ (80029a8 <start_application_task+0xc0>)
 8002950:	4818      	ldr	r0, [pc, #96]	@ (80029b4 <start_application_task+0xcc>)
 8002952:	f7ff fc67 	bl	8002224 <LIS3MDL_Init>
	USB_Log("ALL SENSORS INITIALIZED", CRITICAL);
 8002956:	2101      	movs	r1, #1
 8002958:	4817      	ldr	r0, [pc, #92]	@ (80029b8 <start_application_task+0xd0>)
 800295a:	f7ff fe23 	bl	80025a4 <USB_Log>
//		snprintf(str, 512, "Raw:0,0,0,0,0,0,%d,%d,%d\r", (int)mag_x_raw, (int)mag_y_raw, (int)mag_z_raw);
//		USB_Log(str, RAW);


		char str[512];
		snprintf(str, 512, "Heading: %f", magnetometer.heading);
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <start_application_task+0xcc>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fe18 	bl	8000598 <__aeabi_f2d>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	f107 0008 	add.w	r0, r7, #8
 8002970:	e9cd 2300 	strd	r2, r3, [sp]
 8002974:	4a11      	ldr	r2, [pc, #68]	@ (80029bc <start_application_task+0xd4>)
 8002976:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800297a:	f00f fdd9 	bl	8012530 <sniprintf>
		USB_Log(str, RAW);
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	2104      	movs	r1, #4
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fe0d 	bl	80025a4 <USB_Log>
		osDelay(100);
 800298a:	2064      	movs	r0, #100	@ 0x64
 800298c:	f00a ffa1 	bl	800d8d2 <osDelay>
	{
 8002990:	bf00      	nop
 8002992:	e7e4      	b.n	800295e <start_application_task+0x76>
 8002994:	0801586c 	.word	0x0801586c
 8002998:	2000284c 	.word	0x2000284c
 800299c:	20002bb8 	.word	0x20002bb8
 80029a0:	2000036c 	.word	0x2000036c
 80029a4:	200028f4 	.word	0x200028f4
 80029a8:	20002b64 	.word	0x20002b64
 80029ac:	200003c8 	.word	0x200003c8
 80029b0:	200003a8 	.word	0x200003a8
 80029b4:	20000400 	.word	0x20000400
 80029b8:	0801589c 	.word	0x0801589c
 80029bc:	080158b4 	.word	0x080158b4

080029c0 <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 80029c8:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <start_acc_irq_task+0x28>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029d0:	4618      	mov	r0, r3
 80029d2:	f00b f931 	bl	800dc38 <osSemaphoreAcquire>
		BMI088_ReadAccData(&imu);
 80029d6:	4805      	ldr	r0, [pc, #20]	@ (80029ec <start_acc_irq_task+0x2c>)
 80029d8:	f7fe fc1a 	bl	8001210 <BMI088_ReadAccData>
		BMI088_ReadTempData(&imu); // TODO put this somewhere else?
 80029dc:	4803      	ldr	r0, [pc, #12]	@ (80029ec <start_acc_irq_task+0x2c>)
 80029de:	f7fe fcd5 	bl	800138c <BMI088_ReadTempData>
		osSemaphoreAcquire(accIRQSemaphoreHandle, osWaitForever);
 80029e2:	bf00      	nop
 80029e4:	e7f0      	b.n	80029c8 <start_acc_irq_task+0x8>
 80029e6:	bf00      	nop
 80029e8:	20002948 	.word	0x20002948
 80029ec:	2000036c 	.word	0x2000036c

080029f0 <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <start_gyro_irq_task+0x20>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00b f919 	bl	800dc38 <osSemaphoreAcquire>
		BMI088_ReadGyroData(&imu);
 8002a06:	4803      	ldr	r0, [pc, #12]	@ (8002a14 <start_gyro_irq_task+0x24>)
 8002a08:	f7fe fc64 	bl	80012d4 <BMI088_ReadGyroData>
		osSemaphoreAcquire(gyroIRQSemaphoreHandle, osWaitForever);
 8002a0c:	bf00      	nop
 8002a0e:	e7f3      	b.n	80029f8 <start_gyro_irq_task+0x8>
 8002a10:	2000299c 	.word	0x2000299c
 8002a14:	2000036c 	.word	0x2000036c

08002a18 <start_logging_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_logging_task */
void start_logging_task(void *argument)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
//		BMI088_LogGyroData(&imu);
//		osDelay(2);
//		BMP388_LogData(&barometer);
//		osDelay(2);
//		LIS3MDL_LogData(&magnetometer);
		osDelay(250);
 8002a20:	20fa      	movs	r0, #250	@ 0xfa
 8002a22:	f00a ff56 	bl	800d8d2 <osDelay>
 8002a26:	e7fb      	b.n	8002a20 <start_logging_task+0x8>

08002a28 <start_pressure_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_pressure_irq_task */
void start_pressure_irq_task(void *argument)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_pressure_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(pressureIRQSemaphoreHandle, osWaitForever);
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <start_pressure_irq_task+0x20>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00b f8fd 	bl	800dc38 <osSemaphoreAcquire>
		BMP388_ReadData(&barometer);
 8002a3e:	4803      	ldr	r0, [pc, #12]	@ (8002a4c <start_pressure_irq_task+0x24>)
 8002a40:	f7ff f82a 	bl	8001a98 <BMP388_ReadData>
		osSemaphoreAcquire(pressureIRQSemaphoreHandle, osWaitForever);
 8002a44:	bf00      	nop
 8002a46:	e7f3      	b.n	8002a30 <start_pressure_irq_task+0x8>
 8002a48:	200029f0 	.word	0x200029f0
 8002a4c:	200003a8 	.word	0x200003a8

08002a50 <start_mag_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <start_mag_irq_task+0x20>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a60:	4618      	mov	r0, r3
 8002a62:	f00b f8e9 	bl	800dc38 <osSemaphoreAcquire>
		LIS3MDL_ReadData(&magnetometer);
 8002a66:	4803      	ldr	r0, [pc, #12]	@ (8002a74 <start_mag_irq_task+0x24>)
 8002a68:	f7ff fc6a 	bl	8002340 <LIS3MDL_ReadData>
		osSemaphoreAcquire(magIRQSemaphoreHandle, osWaitForever);
 8002a6c:	bf00      	nop
 8002a6e:	e7f3      	b.n	8002a58 <start_mag_irq_task+0x8>
 8002a70:	20002a44 	.word	0x20002a44
 8002a74:	20000400 	.word	0x20000400

08002a78 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == imu.acc_irq_pin)
 8002a82:	4b17      	ldr	r3, [pc, #92]	@ (8002ae0 <HAL_GPIO_EXTI_Callback+0x68>)
 8002a84:	8a9b      	ldrh	r3, [r3, #20]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d105      	bne.n	8002a98 <HAL_GPIO_EXTI_Callback+0x20>
	{
		osSemaphoreRelease(accIRQSemaphoreHandle);
 8002a8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00b f923 	bl	800dcdc <osSemaphoreRelease>
	}
	else if (GPIO_Pin == magnetometer.irq_pin)
	{
		osSemaphoreRelease(magIRQSemaphoreHandle);
	}
}
 8002a96:	e01f      	b.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x60>
	else if (GPIO_Pin == imu.gyro_irq_pin)
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <HAL_GPIO_EXTI_Callback+0x68>)
 8002a9a:	8adb      	ldrh	r3, [r3, #22]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d105      	bne.n	8002aae <HAL_GPIO_EXTI_Callback+0x36>
		osSemaphoreRelease(gyroIRQSemaphoreHandle);
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_GPIO_EXTI_Callback+0x70>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f00b f918 	bl	800dcdc <osSemaphoreRelease>
}
 8002aac:	e014      	b.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x60>
	else if (GPIO_Pin == barometer.irq_pin)
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <HAL_GPIO_EXTI_Callback+0x74>)
 8002ab0:	899b      	ldrh	r3, [r3, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d105      	bne.n	8002ac4 <HAL_GPIO_EXTI_Callback+0x4c>
		osSemaphoreRelease(pressureIRQSemaphoreHandle);
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00b f90d 	bl	800dcdc <osSemaphoreRelease>
}
 8002ac2:	e009      	b.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x60>
	else if (GPIO_Pin == magnetometer.irq_pin)
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002ac6:	891b      	ldrh	r3, [r3, #8]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d104      	bne.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x60>
		osSemaphoreRelease(magIRQSemaphoreHandle);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f00b f902 	bl	800dcdc <osSemaphoreRelease>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000036c 	.word	0x2000036c
 8002ae4:	20002948 	.word	0x20002948
 8002ae8:	2000299c 	.word	0x2000299c
 8002aec:	200003a8 	.word	0x200003a8
 8002af0:	200029f0 	.word	0x200029f0
 8002af4:	20000400 	.word	0x20000400
 8002af8:	20002a44 	.word	0x20002a44

08002afc <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002b00:	4b1f      	ldr	r3, [pc, #124]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b02:	4a20      	ldr	r2, [pc, #128]	@ (8002b84 <MX_FDCAN1_Init+0x88>)
 8002b04:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002b06:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002b12:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8002b1e:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002b24:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b38:	2202      	movs	r2, #2
 8002b3a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002b3c:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b3e:	2202      	movs	r2, #2
 8002b40:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002b60:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002b6c:	4804      	ldr	r0, [pc, #16]	@ (8002b80 <MX_FDCAN1_Init+0x84>)
 8002b6e:	f000 ff27 	bl	80039c0 <HAL_FDCAN_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002b78:	f000 fb04 	bl	8003184 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20002a98 	.word	0x20002a98
 8002b84:	40006400 	.word	0x40006400

08002b88 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002b8e:	4a20      	ldr	r2, [pc, #128]	@ (8002c10 <MX_FDCAN2_Init+0x88>)
 8002b90:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8002baa:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002bb0:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bb8:	2210      	movs	r2, #16
 8002bba:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002bc8:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bca:	2202      	movs	r2, #2
 8002bcc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002bec:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	@ (8002c0c <MX_FDCAN2_Init+0x84>)
 8002bfa:	f000 fee1 	bl	80039c0 <HAL_FDCAN_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002c04:	f000 fabe 	bl	8003184 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20002afc 	.word	0x20002afc
 8002c10:	40006800 	.word	0x40006800

08002c14 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0a0      	sub	sp, #128	@ 0x80
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c2c:	f107 0318 	add.w	r3, r7, #24
 8002c30:	2254      	movs	r2, #84	@ 0x54
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00f fcf2 	bl	801261e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a48      	ldr	r2, [pc, #288]	@ (8002d60 <HAL_FDCAN_MspInit+0x14c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d142      	bne.n	8002cca <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002c4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c4e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c50:	f107 0318 	add.w	r3, r7, #24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 fb91 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002c60:	f000 fa90 	bl	8003184 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002c64:	4b3f      	ldr	r3, [pc, #252]	@ (8002d64 <HAL_FDCAN_MspInit+0x150>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d64 <HAL_FDCAN_MspInit+0x150>)
 8002c6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <HAL_FDCAN_MspInit+0x150>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10b      	bne.n	8002c8e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002c76:	4b3c      	ldr	r3, [pc, #240]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002c7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c82:	4b39      	ldr	r3, [pc, #228]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	4b36      	ldr	r3, [pc, #216]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	4a35      	ldr	r2, [pc, #212]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9a:	4b33      	ldr	r3, [pc, #204]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ca6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002cb8:	2309      	movs	r3, #9
 8002cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	482a      	ldr	r0, [pc, #168]	@ (8002d6c <HAL_FDCAN_MspInit+0x158>)
 8002cc4:	f001 f842 	bl	8003d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8002cc8:	e045      	b.n	8002d56 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <HAL_FDCAN_MspInit+0x15c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d140      	bne.n	8002d56 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cde:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ce0:	f107 0318 	add.w	r3, r7, #24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f004 fb49 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8002cf0:	f000 fa48 	bl	8003184 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <HAL_FDCAN_MspInit+0x150>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002d64 <HAL_FDCAN_MspInit+0x150>)
 8002cfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_FDCAN_MspInit+0x150>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10b      	bne.n	8002d1e <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d06:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4a17      	ldr	r2, [pc, #92]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002d0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d12:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	4a11      	ldr	r2, [pc, #68]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <HAL_FDCAN_MspInit+0x154>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d36:	2360      	movs	r3, #96	@ 0x60
 8002d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	2300      	movs	r3, #0
 8002d44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002d46:	2309      	movs	r3, #9
 8002d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4806      	ldr	r0, [pc, #24]	@ (8002d6c <HAL_FDCAN_MspInit+0x158>)
 8002d52:	f000 fffb 	bl	8003d4c <HAL_GPIO_Init>
}
 8002d56:	bf00      	nop
 8002d58:	3780      	adds	r7, #128	@ 0x80
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40006400 	.word	0x40006400
 8002d64:	20002b60 	.word	0x20002b60
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	48000400 	.word	0x48000400
 8002d70:	40006800 	.word	0x40006800

08002d74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	@ 0x28
 8002d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	4b72      	ldr	r3, [pc, #456]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	4a71      	ldr	r2, [pc, #452]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d96:	4b6f      	ldr	r3, [pc, #444]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002da2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	4a6b      	ldr	r2, [pc, #428]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002da8:	f043 0320 	orr.w	r3, r3, #32
 8002dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dae:	4b69      	ldr	r3, [pc, #420]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbe:	4a65      	ldr	r2, [pc, #404]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc6:	4b63      	ldr	r3, [pc, #396]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	4b60      	ldr	r3, [pc, #384]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dde:	4b5d      	ldr	r3, [pc, #372]	@ (8002f54 <MX_GPIO_Init+0x1e0>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002df0:	4859      	ldr	r0, [pc, #356]	@ (8002f58 <MX_GPIO_Init+0x1e4>)
 8002df2:	f001 f92d 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 8002df6:	2201      	movs	r2, #1
 8002df8:	2111      	movs	r1, #17
 8002dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dfe:	f001 f927 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 8002e02:	2201      	movs	r2, #1
 8002e04:	2102      	movs	r1, #2
 8002e06:	4855      	ldr	r0, [pc, #340]	@ (8002f5c <MX_GPIO_Init+0x1e8>)
 8002e08:	f001 f922 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f648 4190 	movw	r1, #35984	@ 0x8c90
 8002e12:	4852      	ldr	r0, [pc, #328]	@ (8002f5c <MX_GPIO_Init+0x1e8>)
 8002e14:	f001 f91c 	bl	8004050 <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO6_Pin|GPIO5_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e22:	f001 f915 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin;
 8002e26:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4846      	ldr	r0, [pc, #280]	@ (8002f58 <MX_GPIO_Init+0x1e4>)
 8002e40:	f000 ff84 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8002e44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e50:	2302      	movs	r3, #2
 8002e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4619      	mov	r1, r3
 8002e5a:	483f      	ldr	r0, [pc, #252]	@ (8002f58 <MX_GPIO_Init+0x1e4>)
 8002e5c:	f000 ff76 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8002e60:	2311      	movs	r3, #17
 8002e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e64:	2301      	movs	r3, #1
 8002e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4619      	mov	r1, r3
 8002e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e7a:	f000 ff67 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e96:	f000 ff59 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_INT_Pin;
 8002e9a:	f242 0305 	movw	r3, #8197	@ 0x2005
 8002e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	482b      	ldr	r0, [pc, #172]	@ (8002f5c <MX_GPIO_Init+0x1e8>)
 8002eb0:	f000 ff4c 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4824      	ldr	r0, [pc, #144]	@ (8002f5c <MX_GPIO_Init+0x1e8>)
 8002ecc:	f000 ff3e 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8002ed0:	f648 4390 	movw	r3, #35984	@ 0x8c90
 8002ed4:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	481c      	ldr	r0, [pc, #112]	@ (8002f5c <MX_GPIO_Init+0x1e8>)
 8002eea:	f000 ff2f 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|BMP_INT_Pin;
 8002eee:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ef4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002efa:	2302      	movs	r3, #2
 8002efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	4815      	ldr	r0, [pc, #84]	@ (8002f5c <MX_GPIO_Init+0x1e8>)
 8002f06:	f000 ff21 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 8002f0a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f10:	2301      	movs	r3, #1
 8002f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	4619      	mov	r1, r3
 8002f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f26:	f000 ff11 	bl	8003d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2105      	movs	r1, #5
 8002f2e:	2007      	movs	r0, #7
 8002f30:	f000 fd1e 	bl	8003970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f34:	2007      	movs	r0, #7
 8002f36:	f000 fd35 	bl	80039a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2105      	movs	r1, #5
 8002f3e:	2028      	movs	r0, #40	@ 0x28
 8002f40:	f000 fd16 	bl	8003970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f44:	2028      	movs	r0, #40	@ 0x28
 8002f46:	f000 fd2d 	bl	80039a4 <HAL_NVIC_EnableIRQ>

}
 8002f4a:	bf00      	nop
 8002f4c:	3728      	adds	r7, #40	@ 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	48000800 	.word	0x48000800
 8002f5c:	48000400 	.word	0x48000400

08002f60 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f66:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <MX_I2C2_Init+0x78>)
 8002f68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10802D9B;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fdc <MX_I2C2_Init+0x7c>)
 8002f6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f76:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f82:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f88:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f8e:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f9a:	480e      	ldr	r0, [pc, #56]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002f9c:	f001 f888 	bl	80040b0 <HAL_I2C_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002fa6:	f000 f8ed 	bl	8003184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002faa:	2100      	movs	r1, #0
 8002fac:	4809      	ldr	r0, [pc, #36]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002fae:	f001 fe0b 	bl	8004bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002fb8:	f000 f8e4 	bl	8003184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4805      	ldr	r0, [pc, #20]	@ (8002fd4 <MX_I2C2_Init+0x74>)
 8002fc0:	f001 fe4d 	bl	8004c5e <HAL_I2CEx_ConfigDigitalFilter>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f000 f8db 	bl	8003184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20002b64 	.word	0x20002b64
 8002fd8:	40005800 	.word	0x40005800
 8002fdc:	10802d9b 	.word	0x10802d9b

08002fe0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b09e      	sub	sp, #120	@ 0x78
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	2254      	movs	r2, #84	@ 0x54
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f00f fb0c 	bl	801261e <memset>
  if(i2cHandle->Instance==I2C2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <HAL_I2C_MspInit+0xa8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d137      	bne.n	8003080 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003014:	2300      	movs	r3, #0
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f004 f9ad 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003028:	f000 f8ac 	bl	8003184 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302c:	4b17      	ldr	r3, [pc, #92]	@ (800308c <HAL_I2C_MspInit+0xac>)
 800302e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003030:	4a16      	ldr	r2, [pc, #88]	@ (800308c <HAL_I2C_MspInit+0xac>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_I2C_MspInit+0xac>)
 800303a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003044:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003048:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800304a:	2312      	movs	r3, #18
 800304c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	2300      	movs	r3, #0
 8003054:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003056:	2304      	movs	r3, #4
 8003058:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800305e:	4619      	mov	r1, r3
 8003060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003064:	f000 fe72 	bl	8003d4c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <HAL_I2C_MspInit+0xac>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306c:	4a07      	ldr	r2, [pc, #28]	@ (800308c <HAL_I2C_MspInit+0xac>)
 800306e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003072:	6593      	str	r3, [r2, #88]	@ 0x58
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_I2C_MspInit+0xac>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003080:	bf00      	nop
 8003082:	3778      	adds	r7, #120	@ 0x78
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40005800 	.word	0x40005800
 800308c:	40021000 	.word	0x40021000

08003090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003094:	f000 fb7d 	bl	8003792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003098:	f000 f816 	bl	80030c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800309c:	f7ff fe6a 	bl	8002d74 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80030a0:	f7ff fd2c 	bl	8002afc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80030a4:	f7ff fd70 	bl	8002b88 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 80030a8:	f7ff ff5a 	bl	8002f60 <MX_I2C2_Init>
  MX_SPI1_Init();
 80030ac:	f000 f870 	bl	8003190 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80030b0:	f000 faa2 	bl	80035f8 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 80030b4:	f00e f818 	bl	80110e8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80030b8:	f00a fb10 	bl	800d6dc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80030bc:	f7ff fb6e 	bl	800279c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80030c0:	f00a fb30 	bl	800d724 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <main+0x34>

080030c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b094      	sub	sp, #80	@ 0x50
 80030cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ce:	f107 0318 	add.w	r3, r7, #24
 80030d2:	2238      	movs	r2, #56	@ 0x38
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f00f faa1 	bl	801261e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f003 fb36 	bl	800675c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80030f0:	2321      	movs	r3, #33	@ 0x21
 80030f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030fa:	2301      	movs	r3, #1
 80030fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030fe:	2302      	movs	r3, #2
 8003100:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003102:	2303      	movs	r3, #3
 8003104:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003106:	2304      	movs	r3, #4
 8003108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800310a:	2355      	movs	r3, #85	@ 0x55
 800310c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800310e:	2302      	movs	r3, #2
 8003110:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8003112:	2308      	movs	r3, #8
 8003114:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003116:	2302      	movs	r3, #2
 8003118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311a:	f107 0318 	add.w	r3, r7, #24
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fbd0 	bl	80068c4 <HAL_RCC_OscConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800312a:	f000 f82b 	bl	8003184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800312e:	230f      	movs	r3, #15
 8003130:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003132:	2303      	movs	r3, #3
 8003134:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	2104      	movs	r1, #4
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fece 	bl	8006ee8 <HAL_RCC_ClockConfig>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003152:	f000 f817 	bl	8003184 <Error_Handler>
  }
}
 8003156:	bf00      	nop
 8003158:	3750      	adds	r7, #80	@ 0x50
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a04      	ldr	r2, [pc, #16]	@ (8003180 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003172:	f000 fb27 	bl	80037c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40001000 	.word	0x40001000

08003184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003188:	b672      	cpsid	i
}
 800318a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <Error_Handler+0x8>

08003190 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003194:	4b1b      	ldr	r3, [pc, #108]	@ (8003204 <MX_SPI1_Init+0x74>)
 8003196:	4a1c      	ldr	r2, [pc, #112]	@ (8003208 <MX_SPI1_Init+0x78>)
 8003198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800319a:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <MX_SPI1_Init+0x74>)
 800319c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031a2:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031a8:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031b6:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031c6:	2218      	movs	r2, #24
 80031c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031d8:	2200      	movs	r2, #0
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80031dc:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031de:	2207      	movs	r2, #7
 80031e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031e2:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031ea:	2208      	movs	r2, #8
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031ee:	4805      	ldr	r0, [pc, #20]	@ (8003204 <MX_SPI1_Init+0x74>)
 80031f0:	f004 fb12 	bl	8007818 <HAL_SPI_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80031fa:	f7ff ffc3 	bl	8003184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20002bb8 	.word	0x20002bb8
 8003208:	40013000 	.word	0x40013000

0800320c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	@ 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	@ (8003288 <HAL_SPI_MspInit+0x7c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d128      	bne.n	8003280 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800322e:	4b17      	ldr	r3, [pc, #92]	@ (800328c <HAL_SPI_MspInit+0x80>)
 8003230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003232:	4a16      	ldr	r2, [pc, #88]	@ (800328c <HAL_SPI_MspInit+0x80>)
 8003234:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003238:	6613      	str	r3, [r2, #96]	@ 0x60
 800323a:	4b14      	ldr	r3, [pc, #80]	@ (800328c <HAL_SPI_MspInit+0x80>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_SPI_MspInit+0x80>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324a:	4a10      	ldr	r2, [pc, #64]	@ (800328c <HAL_SPI_MspInit+0x80>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003252:	4b0e      	ldr	r3, [pc, #56]	@ (800328c <HAL_SPI_MspInit+0x80>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800325e:	23e0      	movs	r3, #224	@ 0xe0
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800326e:	2305      	movs	r3, #5
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800327c:	f000 fd66 	bl	8003d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003280:	bf00      	nop
 8003282:	3728      	adds	r7, #40	@ 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40013000 	.word	0x40013000
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003296:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <HAL_MspInit+0x50>)
 8003298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329a:	4a11      	ldr	r2, [pc, #68]	@ (80032e0 <HAL_MspInit+0x50>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <HAL_MspInit+0x50>)
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <HAL_MspInit+0x50>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	4a0b      	ldr	r2, [pc, #44]	@ (80032e0 <HAL_MspInit+0x50>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ba:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <HAL_MspInit+0x50>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	210f      	movs	r1, #15
 80032ca:	f06f 0001 	mvn.w	r0, #1
 80032ce:	f000 fb4f 	bl	8003970 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032d2:	f003 fae7 	bl	80068a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	@ 0x30
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032f4:	4b2c      	ldr	r3, [pc, #176]	@ (80033a8 <HAL_InitTick+0xc4>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	4a2b      	ldr	r2, [pc, #172]	@ (80033a8 <HAL_InitTick+0xc4>)
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003300:	4b29      	ldr	r3, [pc, #164]	@ (80033a8 <HAL_InitTick+0xc4>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800330c:	f107 020c 	add.w	r2, r7, #12
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f003 ffba 	bl	8007290 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800331c:	f003 ff8c 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 8003320:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003324:	4a21      	ldr	r2, [pc, #132]	@ (80033ac <HAL_InitTick+0xc8>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0c9b      	lsrs	r3, r3, #18
 800332c:	3b01      	subs	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003330:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <HAL_InitTick+0xcc>)
 8003332:	4a20      	ldr	r2, [pc, #128]	@ (80033b4 <HAL_InitTick+0xd0>)
 8003334:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003336:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <HAL_InitTick+0xcc>)
 8003338:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800333c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800333e:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_InitTick+0xcc>)
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_InitTick+0xcc>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_InitTick+0xcc>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003350:	4817      	ldr	r0, [pc, #92]	@ (80033b0 <HAL_InitTick+0xcc>)
 8003352:	f005 f807 	bl	8008364 <HAL_TIM_Base_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800335c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11b      	bne.n	800339c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003364:	4812      	ldr	r0, [pc, #72]	@ (80033b0 <HAL_InitTick+0xcc>)
 8003366:	f005 f85f 	bl	8008428 <HAL_TIM_Base_Start_IT>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003374:	2b00      	cmp	r3, #0
 8003376:	d111      	bne.n	800339c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003378:	2036      	movs	r0, #54	@ 0x36
 800337a:	f000 fb13 	bl	80039a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b0f      	cmp	r3, #15
 8003382:	d808      	bhi.n	8003396 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003384:	2200      	movs	r2, #0
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	2036      	movs	r0, #54	@ 0x36
 800338a:	f000 faf1 	bl	8003970 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800338e:	4a0a      	ldr	r2, [pc, #40]	@ (80033b8 <HAL_InitTick+0xd4>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e002      	b.n	800339c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800339c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3730      	adds	r7, #48	@ 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	20002c1c 	.word	0x20002c1c
 80033b4:	40001000 	.word	0x40001000
 80033b8:	20000004 	.word	0x20000004

080033bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <NMI_Handler+0x4>

080033c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c8:	bf00      	nop
 80033ca:	e7fd      	b.n	80033c8 <HardFault_Handler+0x4>

080033cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <MemManage_Handler+0x4>

080033d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <BusFault_Handler+0x4>

080033dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <UsageFault_Handler+0x4>

080033e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 80033f6:	2002      	movs	r0, #2
 80033f8:	f000 fe42 	bl	8004080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}

08003400 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003404:	4802      	ldr	r0, [pc, #8]	@ (8003410 <USB_LP_IRQHandler+0x10>)
 8003406:	f001 fd66 	bl	8004ed6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200059c8 	.word	0x200059c8

08003414 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 8003418:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800341c:	f000 fe30 	bl	8004080 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BMP_INT_Pin);
 8003420:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003424:	f000 fe2c 	bl	8004080 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 8003428:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800342c:	f000 fe28 	bl	8004080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}

08003434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003438:	4802      	ldr	r0, [pc, #8]	@ (8003444 <TIM6_DAC_IRQHandler+0x10>)
 800343a:	f005 f86d 	bl	8008518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20002c1c 	.word	0x20002c1c

08003448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return 1;
 800344c:	2301      	movs	r3, #1
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <_kill>:

int _kill(int pid, int sig)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003462:	f00f f985 	bl	8012770 <__errno>
 8003466:	4603      	mov	r3, r0
 8003468:	2216      	movs	r2, #22
 800346a:	601a      	str	r2, [r3, #0]
  return -1;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_exit>:

void _exit (int status)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ffe7 	bl	8003458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800348a:	bf00      	nop
 800348c:	e7fd      	b.n	800348a <_exit+0x12>

0800348e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e00a      	b.n	80034b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034a0:	f3af 8000 	nop.w
 80034a4:	4601      	mov	r1, r0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	60ba      	str	r2, [r7, #8]
 80034ac:	b2ca      	uxtb	r2, r1
 80034ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3301      	adds	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	dbf0      	blt.n	80034a0 <_read+0x12>
  }

  return len;
 80034be:	687b      	ldr	r3, [r7, #4]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e009      	b.n	80034ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	60ba      	str	r2, [r7, #8]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3301      	adds	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	dbf1      	blt.n	80034da <_write+0x12>
  }
  return len;
 80034f6:	687b      	ldr	r3, [r7, #4]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_close>:

int _close(int file)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003528:	605a      	str	r2, [r3, #4]
  return 0;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <_isatty>:

int _isatty(int file)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003540:	2301      	movs	r3, #1
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003570:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <_sbrk+0x5c>)
 8003572:	4b15      	ldr	r3, [pc, #84]	@ (80035c8 <_sbrk+0x60>)
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800357c:	4b13      	ldr	r3, [pc, #76]	@ (80035cc <_sbrk+0x64>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003584:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <_sbrk+0x64>)
 8003586:	4a12      	ldr	r2, [pc, #72]	@ (80035d0 <_sbrk+0x68>)
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800358a:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <_sbrk+0x64>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	429a      	cmp	r2, r3
 8003596:	d207      	bcs.n	80035a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003598:	f00f f8ea 	bl	8012770 <__errno>
 800359c:	4603      	mov	r3, r0
 800359e:	220c      	movs	r2, #12
 80035a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035a6:	e009      	b.n	80035bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035a8:	4b08      	ldr	r3, [pc, #32]	@ (80035cc <_sbrk+0x64>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ae:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <_sbrk+0x64>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	4a05      	ldr	r2, [pc, #20]	@ (80035cc <_sbrk+0x64>)
 80035b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ba:	68fb      	ldr	r3, [r7, #12]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20020000 	.word	0x20020000
 80035c8:	00000400 	.word	0x00000400
 80035cc:	20002c68 	.word	0x20002c68
 80035d0:	20006010 	.word	0x20006010

080035d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <SystemInit+0x20>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	4a05      	ldr	r2, [pc, #20]	@ (80035f4 <SystemInit+0x20>)
 80035e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035fc:	4b22      	ldr	r3, [pc, #136]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 80035fe:	4a23      	ldr	r2, [pc, #140]	@ (800368c <MX_USART2_UART_Init+0x94>)
 8003600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003602:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800360a:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003616:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003618:	2200      	movs	r2, #0
 800361a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800361c:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 800361e:	220c      	movs	r2, #12
 8003620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003622:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003628:	4b17      	ldr	r3, [pc, #92]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 800362a:	2200      	movs	r2, #0
 800362c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800362e:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003630:	2200      	movs	r2, #0
 8003632:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003634:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003636:	2200      	movs	r2, #0
 8003638:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800363a:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 800363c:	2200      	movs	r2, #0
 800363e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003640:	4811      	ldr	r0, [pc, #68]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003642:	f005 f9db 	bl	80089fc <HAL_UART_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800364c:	f7ff fd9a 	bl	8003184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003650:	2100      	movs	r1, #0
 8003652:	480d      	ldr	r0, [pc, #52]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003654:	f005 ff76 	bl	8009544 <HAL_UARTEx_SetTxFifoThreshold>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800365e:	f7ff fd91 	bl	8003184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003662:	2100      	movs	r1, #0
 8003664:	4808      	ldr	r0, [pc, #32]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003666:	f005 ffab 	bl	80095c0 <HAL_UARTEx_SetRxFifoThreshold>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003670:	f7ff fd88 	bl	8003184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003674:	4804      	ldr	r0, [pc, #16]	@ (8003688 <MX_USART2_UART_Init+0x90>)
 8003676:	f005 ff2c 	bl	80094d2 <HAL_UARTEx_DisableFifoMode>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003680:	f7ff fd80 	bl	8003184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20002c6c 	.word	0x20002c6c
 800368c:	40004400 	.word	0x40004400

08003690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b09e      	sub	sp, #120	@ 0x78
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036a8:	f107 0310 	add.w	r3, r7, #16
 80036ac:	2254      	movs	r2, #84	@ 0x54
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f00e ffb4 	bl	801261e <memset>
  if(uartHandle->Instance==USART2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <HAL_UART_MspInit+0xa8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d136      	bne.n	800372e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036c0:	2302      	movs	r3, #2
 80036c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fe55 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036d8:	f7ff fd54 	bl	8003184 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036dc:	4b17      	ldr	r3, [pc, #92]	@ (800373c <HAL_UART_MspInit+0xac>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e0:	4a16      	ldr	r2, [pc, #88]	@ (800373c <HAL_UART_MspInit+0xac>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e8:	4b14      	ldr	r3, [pc, #80]	@ (800373c <HAL_UART_MspInit+0xac>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f4:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_UART_MspInit+0xac>)
 80036f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f8:	4a10      	ldr	r2, [pc, #64]	@ (800373c <HAL_UART_MspInit+0xac>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003700:	4b0e      	ldr	r3, [pc, #56]	@ (800373c <HAL_UART_MspInit+0xac>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800370c:	230c      	movs	r3, #12
 800370e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	2300      	movs	r3, #0
 800371a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800371c:	2307      	movs	r3, #7
 800371e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003720:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003724:	4619      	mov	r1, r3
 8003726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800372a:	f000 fb0f 	bl	8003d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800372e:	bf00      	nop
 8003730:	3778      	adds	r7, #120	@ 0x78
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40004400 	.word	0x40004400
 800373c:	40021000 	.word	0x40021000

08003740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003740:	480d      	ldr	r0, [pc, #52]	@ (8003778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003742:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003744:	f7ff ff46 	bl	80035d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003748:	480c      	ldr	r0, [pc, #48]	@ (800377c <LoopForever+0x6>)
  ldr r1, =_edata
 800374a:	490d      	ldr	r1, [pc, #52]	@ (8003780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <LoopForever+0xe>)
  movs r3, #0
 800374e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003750:	e002      	b.n	8003758 <LoopCopyDataInit>

08003752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003756:	3304      	adds	r3, #4

08003758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800375a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800375c:	d3f9      	bcc.n	8003752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003760:	4c0a      	ldr	r4, [pc, #40]	@ (800378c <LoopForever+0x16>)
  movs r3, #0
 8003762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003764:	e001      	b.n	800376a <LoopFillZerobss>

08003766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003768:	3204      	adds	r2, #4

0800376a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800376a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800376c:	d3fb      	bcc.n	8003766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800376e:	f00f f805 	bl	801277c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003772:	f7ff fc8d 	bl	8003090 <main>

08003776 <LoopForever>:

LoopForever:
    b LoopForever
 8003776:	e7fe      	b.n	8003776 <LoopForever>
  ldr   r0, =_estack
 8003778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800377c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003780:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003784:	08015e80 	.word	0x08015e80
  ldr r2, =_sbss
 8003788:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800378c:	20006010 	.word	0x20006010

08003790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003790:	e7fe      	b.n	8003790 <ADC1_2_IRQHandler>

08003792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379c:	2003      	movs	r0, #3
 800379e:	f000 f8dc 	bl	800395a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037a2:	200f      	movs	r0, #15
 80037a4:	f7ff fd9e 	bl	80032e4 <HAL_InitTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	71fb      	strb	r3, [r7, #7]
 80037b2:	e001      	b.n	80037b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037b4:	f7ff fd6c 	bl	8003290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037b8:	79fb      	ldrb	r3, [r7, #7]

}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_IncTick+0x1c>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_IncTick+0x20>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a03      	ldr	r2, [pc, #12]	@ (80037e0 <HAL_IncTick+0x1c>)
 80037d4:	6013      	str	r3, [r2, #0]
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20002d00 	.word	0x20002d00
 80037e4:	20000008 	.word	0x20000008

080037e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return uwTick;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_GetTick+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20002d00 	.word	0x20002d00

08003800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003810:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <__NVIC_SetPriorityGrouping+0x44>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800381c:	4013      	ands	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003828:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800382c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003832:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <__NVIC_SetPriorityGrouping+0x44>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60d3      	str	r3, [r2, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800384c:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <__NVIC_GetPriorityGrouping+0x18>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	f003 0307 	and.w	r3, r3, #7
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	2b00      	cmp	r3, #0
 8003874:	db0b      	blt.n	800388e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	f003 021f 	and.w	r2, r3, #31
 800387c:	4907      	ldr	r1, [pc, #28]	@ (800389c <__NVIC_EnableIRQ+0x38>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2001      	movs	r0, #1
 8003886:	fa00 f202 	lsl.w	r2, r0, r2
 800388a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000e100 	.word	0xe000e100

080038a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	db0a      	blt.n	80038ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	490c      	ldr	r1, [pc, #48]	@ (80038ec <__NVIC_SetPriority+0x4c>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	440b      	add	r3, r1
 80038c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c8:	e00a      	b.n	80038e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4908      	ldr	r1, [pc, #32]	@ (80038f0 <__NVIC_SetPriority+0x50>)
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	3b04      	subs	r3, #4
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	440b      	add	r3, r1
 80038de:	761a      	strb	r2, [r3, #24]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000e100 	.word	0xe000e100
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	@ 0x24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f1c3 0307 	rsb	r3, r3, #7
 800390e:	2b04      	cmp	r3, #4
 8003910:	bf28      	it	cs
 8003912:	2304      	movcs	r3, #4
 8003914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3304      	adds	r3, #4
 800391a:	2b06      	cmp	r3, #6
 800391c:	d902      	bls.n	8003924 <NVIC_EncodePriority+0x30>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3b03      	subs	r3, #3
 8003922:	e000      	b.n	8003926 <NVIC_EncodePriority+0x32>
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	401a      	ands	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800393c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43d9      	mvns	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	4313      	orrs	r3, r2
         );
}
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	@ 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ff4c 	bl	8003800 <__NVIC_SetPriorityGrouping>
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800397e:	f7ff ff63 	bl	8003848 <__NVIC_GetPriorityGrouping>
 8003982:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	6978      	ldr	r0, [r7, #20]
 800398a:	f7ff ffb3 	bl	80038f4 <NVIC_EncodePriority>
 800398e:	4602      	mov	r2, r0
 8003990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff82 	bl	80038a0 <__NVIC_SetPriority>
}
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff56 	bl	8003864 <__NVIC_EnableIRQ>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e147      	b.n	8003c62 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff f914 	bl	8002c14 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0210 	bic.w	r2, r2, #16
 80039fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039fc:	f7ff fef4 	bl	80037e8 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a02:	e012      	b.n	8003a2a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a04:	f7ff fef0 	bl	80037e8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b0a      	cmp	r3, #10
 8003a10:	d90b      	bls.n	8003a2a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2203      	movs	r2, #3
 8003a22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e11b      	b.n	8003c62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d0e5      	beq.n	8003a04 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a48:	f7ff fece 	bl	80037e8 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a4e:	e012      	b.n	8003a76 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a50:	f7ff feca 	bl	80037e8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d90b      	bls.n	8003a76 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e0f5      	b.n	8003c62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0e5      	beq.n	8003a50 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0202 	orr.w	r2, r2, #2
 8003a92:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a74      	ldr	r2, [pc, #464]	@ (8003c6c <HAL_FDCAN_Init+0x2ac>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d103      	bne.n	8003aa6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a9e:	4a74      	ldr	r2, [pc, #464]	@ (8003c70 <HAL_FDCAN_Init+0x2b0>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7c1b      	ldrb	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003abc:	619a      	str	r2, [r3, #24]
 8003abe:	e007      	b.n	8003ad0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ace:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	7c5b      	ldrb	r3, [r3, #17]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d108      	bne.n	8003aea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ae6:	619a      	str	r2, [r3, #24]
 8003ae8:	e007      	b.n	8003afa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003af8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7c9b      	ldrb	r3, [r3, #18]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d108      	bne.n	8003b14 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b10:	619a      	str	r2, [r3, #24]
 8003b12:	e007      	b.n	8003b24 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b22:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003b48:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0210 	bic.w	r2, r2, #16
 8003b58:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d108      	bne.n	8003b74 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0204 	orr.w	r2, r2, #4
 8003b70:	619a      	str	r2, [r3, #24]
 8003b72:	e02c      	b.n	8003bce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d028      	beq.n	8003bce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d01c      	beq.n	8003bbe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b92:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0210 	orr.w	r2, r2, #16
 8003ba2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d110      	bne.n	8003bce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0220 	orr.w	r2, r2, #32
 8003bba:	619a      	str	r2, [r3, #24]
 8003bbc:	e007      	b.n	8003bce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0220 	orr.w	r2, r2, #32
 8003bcc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bde:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003be6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bf6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bf8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c02:	d115      	bne.n	8003c30 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c12:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c1c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	3b01      	subs	r3, #1
 8003c26:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c2c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c2e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f814 	bl	8003c74 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40006400 	.word	0x40006400
 8003c70:	40006500 	.word	0x40006500

08003c74 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c7c:	4b30      	ldr	r3, [pc, #192]	@ (8003d40 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003c7e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2f      	ldr	r2, [pc, #188]	@ (8003d44 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d103      	bne.n	8003c92 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003c90:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	@ (8003d48 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8003ca2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cb2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cba:	041a      	lsls	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cd8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	061a      	lsls	r2, r3, #24
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e005      	b.n	8003d26 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3304      	adds	r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3f3      	bcc.n	8003d1a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	4000a400 	.word	0x4000a400
 8003d44:	40006800 	.word	0x40006800
 8003d48:	40006c00 	.word	0x40006c00

08003d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d5a:	e15a      	b.n	8004012 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 814c 	beq.w	800400c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d005      	beq.n	8003d8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d130      	bne.n	8003dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 0201 	and.w	r2, r3, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d017      	beq.n	8003e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d123      	bne.n	8003e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	08da      	lsrs	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3208      	adds	r2, #8
 8003e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	08da      	lsrs	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3208      	adds	r2, #8
 8003e78:	6939      	ldr	r1, [r7, #16]
 8003e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	2203      	movs	r2, #3
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0203 	and.w	r2, r3, #3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80a6 	beq.w	800400c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec0:	4b5b      	ldr	r3, [pc, #364]	@ (8004030 <HAL_GPIO_Init+0x2e4>)
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8004030 <HAL_GPIO_Init+0x2e4>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ecc:	4b58      	ldr	r3, [pc, #352]	@ (8004030 <HAL_GPIO_Init+0x2e4>)
 8003ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed8:	4a56      	ldr	r2, [pc, #344]	@ (8004034 <HAL_GPIO_Init+0x2e8>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	220f      	movs	r2, #15
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f02:	d01f      	beq.n	8003f44 <HAL_GPIO_Init+0x1f8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a4c      	ldr	r2, [pc, #304]	@ (8004038 <HAL_GPIO_Init+0x2ec>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d019      	beq.n	8003f40 <HAL_GPIO_Init+0x1f4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a4b      	ldr	r2, [pc, #300]	@ (800403c <HAL_GPIO_Init+0x2f0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_GPIO_Init+0x1f0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a4a      	ldr	r2, [pc, #296]	@ (8004040 <HAL_GPIO_Init+0x2f4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00d      	beq.n	8003f38 <HAL_GPIO_Init+0x1ec>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a49      	ldr	r2, [pc, #292]	@ (8004044 <HAL_GPIO_Init+0x2f8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <HAL_GPIO_Init+0x1e8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a48      	ldr	r2, [pc, #288]	@ (8004048 <HAL_GPIO_Init+0x2fc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_GPIO_Init+0x1e4>
 8003f2c:	2305      	movs	r3, #5
 8003f2e:	e00a      	b.n	8003f46 <HAL_GPIO_Init+0x1fa>
 8003f30:	2306      	movs	r3, #6
 8003f32:	e008      	b.n	8003f46 <HAL_GPIO_Init+0x1fa>
 8003f34:	2304      	movs	r3, #4
 8003f36:	e006      	b.n	8003f46 <HAL_GPIO_Init+0x1fa>
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e004      	b.n	8003f46 <HAL_GPIO_Init+0x1fa>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e002      	b.n	8003f46 <HAL_GPIO_Init+0x1fa>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_GPIO_Init+0x1fa>
 8003f44:	2300      	movs	r3, #0
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	f002 0203 	and.w	r2, r2, #3
 8003f4c:	0092      	lsls	r2, r2, #2
 8003f4e:	4093      	lsls	r3, r2
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f56:	4937      	ldr	r1, [pc, #220]	@ (8004034 <HAL_GPIO_Init+0x2e8>)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f64:	4b39      	ldr	r3, [pc, #228]	@ (800404c <HAL_GPIO_Init+0x300>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f88:	4a30      	ldr	r2, [pc, #192]	@ (800404c <HAL_GPIO_Init+0x300>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800404c <HAL_GPIO_Init+0x300>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fb2:	4a26      	ldr	r2, [pc, #152]	@ (800404c <HAL_GPIO_Init+0x300>)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fb8:	4b24      	ldr	r3, [pc, #144]	@ (800404c <HAL_GPIO_Init+0x300>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_GPIO_Init+0x300>)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <HAL_GPIO_Init+0x300>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004006:	4a11      	ldr	r2, [pc, #68]	@ (800404c <HAL_GPIO_Init+0x300>)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3301      	adds	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f ae9d 	bne.w	8003d5c <HAL_GPIO_Init+0x10>
  }
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40021000 	.word	0x40021000
 8004034:	40010000 	.word	0x40010000
 8004038:	48000400 	.word	0x48000400
 800403c:	48000800 	.word	0x48000800
 8004040:	48000c00 	.word	0x48000c00
 8004044:	48001000 	.word	0x48001000
 8004048:	48001400 	.word	0x48001400
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800406c:	e002      	b.n	8004074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800408a:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	4013      	ands	r3, r2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004096:	4a05      	ldr	r2, [pc, #20]	@ (80040ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fcea 	bl	8002a78 <HAL_GPIO_EXTI_Callback>
  }
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40010400 	.word	0x40010400

080040b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e08d      	b.n	80041de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fe ff82 	bl	8002fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	@ 0x24
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	e006      	b.n	8004138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d108      	bne.n	8004152 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	e007      	b.n	8004162 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69d9      	ldr	r1, [r3, #28]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	817b      	strh	r3, [r7, #10]
 80041fa:	460b      	mov	r3, r1
 80041fc:	813b      	strh	r3, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b20      	cmp	r3, #32
 800420c:	f040 80f9 	bne.w	8004402 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_I2C_Mem_Write+0x34>
 8004216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0ed      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_I2C_Mem_Write+0x4e>
 8004232:	2302      	movs	r3, #2
 8004234:	e0e6      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800423e:	f7ff fad3 	bl	80037e8 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fac3 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0d1      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2221      	movs	r2, #33	@ 0x21
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	@ 0x40
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004280:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004288:	88f8      	ldrh	r0, [r7, #6]
 800428a:	893a      	ldrh	r2, [r7, #8]
 800428c:	8979      	ldrh	r1, [r7, #10]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4603      	mov	r3, r0
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9d3 	bl	8004644 <I2C_RequestMemoryWrite>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0a9      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2bff      	cmp	r3, #255	@ 0xff
 80042b8:	d90e      	bls.n	80042d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	22ff      	movs	r2, #255	@ 0xff
 80042be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	2300      	movs	r3, #0
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fc47 	bl	8004b64 <I2C_TransferConfig>
 80042d6:	e00f      	b.n	80042f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	8979      	ldrh	r1, [r7, #10]
 80042ea:	2300      	movs	r3, #0
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fc36 	bl	8004b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fac6 	bl	800488e <I2C_WaitOnTXISFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e07b      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d034      	beq.n	80043b0 <HAL_I2C_Mem_Write+0x1c8>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d130      	bne.n	80043b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	2200      	movs	r2, #0
 8004356:	2180      	movs	r1, #128	@ 0x80
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa3f 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e04d      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2bff      	cmp	r3, #255	@ 0xff
 8004370:	d90e      	bls.n	8004390 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	22ff      	movs	r2, #255	@ 0xff
 8004376:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	b2da      	uxtb	r2, r3
 800437e:	8979      	ldrh	r1, [r7, #10]
 8004380:	2300      	movs	r3, #0
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fbeb 	bl	8004b64 <I2C_TransferConfig>
 800438e:	e00f      	b.n	80043b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fbda 	bl	8004b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d19e      	bne.n	80042f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 faac 	bl	800491c <I2C_WaitOnSTOPFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e01a      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2220      	movs	r2, #32
 80043d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <HAL_I2C_Mem_Write+0x224>)
 80043e2:	400b      	ands	r3, r1
 80043e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	fe00e800 	.word	0xfe00e800

08004410 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	461a      	mov	r2, r3
 800441e:	4603      	mov	r3, r0
 8004420:	817b      	strh	r3, [r7, #10]
 8004422:	460b      	mov	r3, r1
 8004424:	813b      	strh	r3, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	f040 80fd 	bne.w	8004632 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_I2C_Mem_Read+0x34>
 800443e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800444a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0f1      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_I2C_Mem_Read+0x4e>
 800445a:	2302      	movs	r3, #2
 800445c:	e0ea      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004466:	f7ff f9bf 	bl	80037e8 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2319      	movs	r3, #25
 8004472:	2201      	movs	r2, #1
 8004474:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f9af 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0d5      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2222      	movs	r2, #34	@ 0x22
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b0:	88f8      	ldrh	r0, [r7, #6]
 80044b2:	893a      	ldrh	r2, [r7, #8]
 80044b4:	8979      	ldrh	r1, [r7, #10]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	4603      	mov	r3, r0
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f913 	bl	80046ec <I2C_RequestMemoryRead>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0ad      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2bff      	cmp	r3, #255	@ 0xff
 80044e0:	d90e      	bls.n	8004500 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22ff      	movs	r2, #255	@ 0xff
 80044e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	8979      	ldrh	r1, [r7, #10]
 80044f0:	4b52      	ldr	r3, [pc, #328]	@ (800463c <HAL_I2C_Mem_Read+0x22c>)
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fb33 	bl	8004b64 <I2C_TransferConfig>
 80044fe:	e00f      	b.n	8004520 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450e:	b2da      	uxtb	r2, r3
 8004510:	8979      	ldrh	r1, [r7, #10]
 8004512:	4b4a      	ldr	r3, [pc, #296]	@ (800463c <HAL_I2C_Mem_Read+0x22c>)
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fb22 	bl	8004b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004526:	2200      	movs	r2, #0
 8004528:	2104      	movs	r1, #4
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f956 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07c      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d034      	beq.n	80045e0 <HAL_I2C_Mem_Read+0x1d0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d130      	bne.n	80045e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	@ 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f927 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e04d      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2bff      	cmp	r3, #255	@ 0xff
 80045a0:	d90e      	bls.n	80045c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	@ 0xff
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	8979      	ldrh	r1, [r7, #10]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fad3 	bl	8004b64 <I2C_TransferConfig>
 80045be:	e00f      	b.n	80045e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fac2 	bl	8004b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d19a      	bne.n	8004520 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f994 	bl	800491c <I2C_WaitOnSTOPFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01a      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2220      	movs	r2, #32
 8004604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <HAL_I2C_Mem_Read+0x230>)
 8004612:	400b      	ands	r3, r1
 8004614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	80002400 	.word	0x80002400
 8004640:	fe00e800 	.word	0xfe00e800

08004644 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	461a      	mov	r2, r3
 8004652:	4603      	mov	r3, r0
 8004654:	817b      	strh	r3, [r7, #10]
 8004656:	460b      	mov	r3, r1
 8004658:	813b      	strh	r3, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	8979      	ldrh	r1, [r7, #10]
 8004664:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <I2C_RequestMemoryWrite+0xa4>)
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fa79 	bl	8004b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	69b9      	ldr	r1, [r7, #24]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f909 	bl	800488e <I2C_WaitOnTXISFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e02c      	b.n	80046e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	629a      	str	r2, [r3, #40]	@ 0x28
 8004696:	e015      	b.n	80046c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004698:	893b      	ldrh	r3, [r7, #8]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f8ef 	bl	800488e <I2C_WaitOnTXISFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e012      	b.n	80046e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046ba:	893b      	ldrh	r3, [r7, #8]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2180      	movs	r1, #128	@ 0x80
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f884 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	80002000 	.word	0x80002000

080046ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	817b      	strh	r3, [r7, #10]
 80046fe:	460b      	mov	r3, r1
 8004700:	813b      	strh	r3, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	8979      	ldrh	r1, [r7, #10]
 800470c:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <I2C_RequestMemoryRead+0xa4>)
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2300      	movs	r3, #0
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 fa26 	bl	8004b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	69b9      	ldr	r1, [r7, #24]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f8b6 	bl	800488e <I2C_WaitOnTXISFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e02c      	b.n	8004786 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	629a      	str	r2, [r3, #40]	@ 0x28
 800473c:	e015      	b.n	800476a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	b29b      	uxth	r3, r3
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f89c 	bl	800488e <I2C_WaitOnTXISFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e012      	b.n	8004786 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2200      	movs	r2, #0
 8004772:	2140      	movs	r1, #64	@ 0x40
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f831 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	80002000 	.word	0x80002000

08004794 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d103      	bne.n	80047b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d007      	beq.n	80047d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	619a      	str	r2, [r3, #24]
  }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ec:	e03b      	b.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f8d6 	bl	80049a4 <I2C_IsErrorOccurred>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e041      	b.n	8004886 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004808:	d02d      	beq.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fe ffed 	bl	80037e8 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnFlagUntilTimeout+0x44>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d122      	bne.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d113      	bne.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e00f      	b.n	8004886 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	429a      	cmp	r2, r3
 8004882:	d0b4      	beq.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800489a:	e033      	b.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f87f 	bl	80049a4 <I2C_IsErrorOccurred>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e031      	b.n	8004914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048b6:	d025      	beq.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b8:	f7fe ff96 	bl	80037e8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11a      	bne.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d013      	beq.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e007      	b.n	8004914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d1c4      	bne.n	800489c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004928:	e02f      	b.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f838 	bl	80049a4 <I2C_IsErrorOccurred>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e02d      	b.n	800499a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fe ff53 	bl	80037e8 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11a      	bne.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d013      	beq.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e007      	b.n	800499a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b20      	cmp	r3, #32
 8004996:	d1c8      	bne.n	800492a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	@ 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d068      	beq.n	8004aa2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2210      	movs	r2, #16
 80049d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049d8:	e049      	b.n	8004a6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049e0:	d045      	beq.n	8004a6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fe ff01 	bl	80037e8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <I2C_IsErrorOccurred+0x54>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d13a      	bne.n	8004a6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a1a:	d121      	bne.n	8004a60 <I2C_IsErrorOccurred+0xbc>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a22:	d01d      	beq.n	8004a60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d01a      	beq.n	8004a60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a3a:	f7fe fed5 	bl	80037e8 <HAL_GetTick>
 8004a3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a40:	e00e      	b.n	8004a60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a42:	f7fe fed1 	bl	80037e8 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b19      	cmp	r3, #25
 8004a4e:	d907      	bls.n	8004a60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f043 0320 	orr.w	r3, r3, #32
 8004a56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004a5e:	e006      	b.n	8004a6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d1e9      	bne.n	8004a42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d003      	beq.n	8004a84 <I2C_IsErrorOccurred+0xe0>
 8004a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0aa      	beq.n	80049da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2220      	movs	r2, #32
 8004a92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ae6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f043 0302 	orr.w	r3, r3, #2
 8004afe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01c      	beq.n	8004b52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff fe3b 	bl	8004794 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <I2C_IsErrorOccurred+0x1bc>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3728      	adds	r7, #40	@ 0x28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	fe00e800 	.word	0xfe00e800

08004b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	817b      	strh	r3, [r7, #10]
 8004b72:	4613      	mov	r3, r2
 8004b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b76:	897b      	ldrh	r3, [r7, #10]
 8004b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b7c:	7a7b      	ldrb	r3, [r7, #9]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	0d5b      	lsrs	r3, r3, #21
 8004b9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004ba2:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <I2C_TransferConfig+0x60>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	ea02 0103 	and.w	r1, r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	03ff63ff 	.word	0x03ff63ff

08004bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d138      	bne.n	8004c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e032      	b.n	8004c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	@ 0x24
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e000      	b.n	8004c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d139      	bne.n	8004ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e033      	b.n	8004cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2224      	movs	r2, #36	@ 0x24
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0c0      	b.n	8004e8a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f00c fbe9 	bl	80114f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f004 fce9 	bl	8009706 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
 8004d38:	e03e      	b.n	8004db8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d3a:	7bfa      	ldrb	r2, [r7, #15]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	440b      	add	r3, r1
 8004d48:	3311      	adds	r3, #17
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d4e:	7bfa      	ldrb	r2, [r7, #15]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3310      	adds	r3, #16
 8004d5e:	7bfa      	ldrb	r2, [r7, #15]
 8004d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	440b      	add	r3, r1
 8004d70:	3313      	adds	r3, #19
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	440b      	add	r3, r1
 8004d84:	3320      	adds	r3, #32
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d8a:	7bfa      	ldrb	r2, [r7, #15]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	440b      	add	r3, r1
 8004d98:	3324      	adds	r3, #36	@ 0x24
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	440b      	add	r3, r1
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	3301      	adds	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	791b      	ldrb	r3, [r3, #4]
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3bb      	bcc.n	8004d3a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e044      	b.n	8004e52 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	440b      	add	r3, r1
 8004e02:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	440b      	add	r3, r1
 8004e18:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	440b      	add	r3, r1
 8004e2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	440b      	add	r3, r1
 8004e44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d3b5      	bcc.n	8004dc8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e68:	f004 fc68 	bl	800973c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7a9b      	ldrb	r3, [r3, #10]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d102      	bne.n	8004e88 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fc40 	bl	8006708 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_PCD_Start+0x16>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e012      	b.n	8004ece <HAL_PCD_Start+0x3c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f004 fc0f 	bl	80096d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f006 fecf 	bl	800bc62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f006 fed4 	bl	800bc90 <USB_ReadInterrupts>
 8004ee8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb04 	bl	8005502 <PCD_EP_ISR_Handler>

    return;
 8004efa:	e110      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d013      	beq.n	8004f2e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f00c fb79 	bl	8011616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f24:	2100      	movs	r1, #0
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8fc 	bl	8005124 <HAL_PCD_SetAddress>

    return;
 8004f2c:	e0f7      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00c      	beq.n	8004f52 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f4a:	b292      	uxth	r2, r2
 8004f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f50:	e0e5      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f74:	e0d3      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d034      	beq.n	8004fea <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0204 	bic.w	r2, r2, #4
 8004f92:	b292      	uxth	r2, r2
 8004f94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0208 	bic.w	r2, r2, #8
 8004faa:	b292      	uxth	r2, r2
 8004fac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f00c fd19 	bl	80119fc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f00c fb5c 	bl	8011688 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004fe8:	e099      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d027      	beq.n	8005044 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0208 	orr.w	r2, r2, #8
 8005006:	b292      	uxth	r2, r2
 8005008:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005014:	b29a      	uxth	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800501e:	b292      	uxth	r2, r2
 8005020:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0204 	orr.w	r2, r2, #4
 8005036:	b292      	uxth	r2, r2
 8005038:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f00c fb09 	bl	8011654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005042:	e06c      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504a:	2b00      	cmp	r3, #0
 800504c:	d040      	beq.n	80050d0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005060:	b292      	uxth	r2, r2
 8005062:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d12b      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0204 	orr.w	r2, r2, #4
 8005082:	b292      	uxth	r2, r2
 8005084:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0208 	orr.w	r2, r2, #8
 800509a:	b292      	uxth	r2, r2
 800509c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050be:	2101      	movs	r1, #1
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f00c fc9b 	bl	80119fc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80050c6:	e02a      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f00c fac3 	bl	8011654 <HAL_PCD_SuspendCallback>
    return;
 80050ce:	e026      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00f      	beq.n	80050fa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050ec:	b292      	uxth	r2, r2
 80050ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f00c fa81 	bl	80115fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80050f8:	e011      	b.n	800511e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00c      	beq.n	800511e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005116:	b292      	uxth	r2, r2
 8005118:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800511c:	bf00      	nop
  }
}
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_PCD_SetAddress+0x1a>
 800513a:	2302      	movs	r3, #2
 800513c:	e012      	b.n	8005164 <HAL_PCD_SetAddress+0x40>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f006 fd70 	bl	800bc3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	461a      	mov	r2, r3
 800517a:	4603      	mov	r3, r0
 800517c:	70fb      	strb	r3, [r7, #3]
 800517e:	460b      	mov	r3, r1
 8005180:	803b      	strh	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800518a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800518e:	2b00      	cmp	r3, #0
 8005190:	da0e      	bge.n	80051b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	f003 0207 	and.w	r2, r3, #7
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	3310      	adds	r3, #16
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4413      	add	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	705a      	strb	r2, [r3, #1]
 80051ae:	e00e      	b.n	80051ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 0207 	and.w	r2, r3, #7
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051da:	883a      	ldrh	r2, [r7, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	78ba      	ldrb	r2, [r7, #2]
 80051e4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051e6:	78bb      	ldrb	r3, [r7, #2]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d102      	bne.n	80051f2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_PCD_EP_Open+0x94>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e00e      	b.n	800521e <HAL_PCD_EP_Open+0xb2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68f9      	ldr	r1, [r7, #12]
 800520e:	4618      	mov	r0, r3
 8005210:	f004 fab2 	bl	8009778 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800521c:	7afb      	ldrb	r3, [r7, #11]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005236:	2b00      	cmp	r3, #0
 8005238:	da0e      	bge.n	8005258 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	f003 0207 	and.w	r2, r3, #7
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	3310      	adds	r3, #16
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	705a      	strb	r2, [r3, #1]
 8005256:	e00e      	b.n	8005276 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 0207 	and.w	r2, r3, #7
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_PCD_EP_Close+0x6a>
 800528c:	2302      	movs	r3, #2
 800528e:	e00e      	b.n	80052ae <HAL_PCD_EP_Close+0x88>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	4618      	mov	r0, r3
 80052a0:	f004 fe2e 	bl	8009f00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	460b      	mov	r3, r1
 80052c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	f003 0207 	and.w	r2, r3, #7
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2200      	movs	r2, #0
 80052ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2200      	movs	r2, #0
 80052f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052f6:	7afb      	ldrb	r3, [r7, #11]
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6979      	ldr	r1, [r7, #20]
 8005308:	4618      	mov	r0, r3
 800530a:	f004 ffe6 	bl	800a2da <USB_EPStartXfer>

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	f003 0207 	and.w	r2, r3, #7
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	440b      	add	r3, r1
 8005336:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800533a:	681b      	ldr	r3, [r3, #0]
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	460b      	mov	r3, r1
 8005356:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005358:	7afb      	ldrb	r3, [r7, #11]
 800535a:	f003 0207 	and.w	r2, r3, #7
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	3310      	adds	r3, #16
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2201      	movs	r2, #1
 8005392:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005394:	7afb      	ldrb	r3, [r7, #11]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	b2da      	uxtb	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6979      	ldr	r1, [r7, #20]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f004 ff97 	bl	800a2da <USB_EPStartXfer>

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	7912      	ldrb	r2, [r2, #4]
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e03e      	b.n	8005452 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da0e      	bge.n	80053fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 0207 	and.w	r2, r3, #7
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	3310      	adds	r3, #16
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	705a      	strb	r2, [r3, #1]
 80053f8:	e00c      	b.n	8005414 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4413      	add	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_PCD_EP_SetStall+0x7e>
 8005430:	2302      	movs	r3, #2
 8005432:	e00e      	b.n	8005452 <HAL_PCD_EP_SetStall+0x9c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	4618      	mov	r0, r3
 8005444:	f006 fafa 	bl	800ba3c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	7912      	ldrb	r2, [r2, #4]
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e040      	b.n	80054fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800547c:	2b00      	cmp	r3, #0
 800547e:	da0e      	bge.n	800549e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	f003 0207 	and.w	r2, r3, #7
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	3310      	adds	r3, #16
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	705a      	strb	r2, [r3, #1]
 800549c:	e00e      	b.n	80054bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	f003 0207 	and.w	r2, r3, #7
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_PCD_EP_ClrStall+0x82>
 80054d8:	2302      	movs	r3, #2
 80054da:	e00e      	b.n	80054fa <HAL_PCD_EP_ClrStall+0xa0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f006 faf7 	bl	800bade <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b096      	sub	sp, #88	@ 0x58
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800550a:	e3ad      	b.n	8005c68 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005514:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005526:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 816f 	bne.w	800580e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d14c      	bne.n	80055d6 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554c:	81fb      	strh	r3, [r7, #14]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	89fb      	ldrh	r3, [r7, #14]
 8005554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3310      	adds	r3, #16
 8005564:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4413      	add	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	4413      	add	r3, r2
 8005580:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800558a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800558c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800558e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	441a      	add	r2, r3
 8005598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800559c:	2100      	movs	r1, #0
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f00c f811 	bl	80115c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7b1b      	ldrb	r3, [r3, #12]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 835c 	beq.w	8005c68 <PCD_EP_ISR_Handler+0x766>
 80055b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 8357 	bne.w	8005c68 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	7b1b      	ldrb	r3, [r3, #12]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	731a      	strb	r2, [r3, #12]
 80055d4:	e348      	b.n	8005c68 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055dc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80055ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d032      	beq.n	800565a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	4413      	add	r3, r2
 800560e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005628:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800562a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800562e:	b29b      	uxth	r3, r3
 8005630:	f006 fb80 	bl	800bd34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29a      	uxth	r2, r3
 800563c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005640:	4013      	ands	r3, r2
 8005642:	823b      	strh	r3, [r7, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	8a3a      	ldrh	r2, [r7, #16]
 800564a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800564e:	b292      	uxth	r2, r2
 8005650:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f00b ff8a 	bl	801156c <HAL_PCD_SetupStageCallback>
 8005658:	e306      	b.n	8005c68 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800565a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800565e:	2b00      	cmp	r3, #0
 8005660:	f280 8302 	bge.w	8005c68 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29a      	uxth	r2, r3
 800566c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005670:	4013      	ands	r3, r2
 8005672:	83fb      	strh	r3, [r7, #30]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	8bfa      	ldrh	r2, [r7, #30]
 800567a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800567e:	b292      	uxth	r2, r2
 8005680:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800568a:	b29b      	uxth	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	4413      	add	r3, r2
 800569c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80056aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d019      	beq.n	80056e6 <PCD_EP_ISR_Handler+0x1e4>
 80056b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d015      	beq.n	80056e6 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c0:	6959      	ldr	r1, [r3, #20]
 80056c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80056c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f006 fb32 	bl	800bd34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80056d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	441a      	add	r2, r3
 80056da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80056de:	2100      	movs	r1, #0
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f00b ff55 	bl	8011590 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80056f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 82b5 	bne.w	8005c68 <PCD_EP_ISR_Handler+0x766>
 80056fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005702:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005706:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800570a:	f000 82ad 	beq.w	8005c68 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	4413      	add	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005738:	b29a      	uxth	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b3e      	cmp	r3, #62	@ 0x3e
 8005744:	d91d      	bls.n	8005782 <PCD_EP_ISR_Handler+0x280>
 8005746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2b00      	cmp	r3, #0
 8005758:	d102      	bne.n	8005760 <PCD_EP_ISR_Handler+0x25e>
 800575a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575c:	3b01      	subs	r3, #1
 800575e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005768:	b29b      	uxth	r3, r3
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	b29b      	uxth	r3, r3
 800576e:	4313      	orrs	r3, r2
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29a      	uxth	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e026      	b.n	80057d0 <PCD_EP_ISR_Handler+0x2ce>
 8005782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <PCD_EP_ISR_Handler+0x29e>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005798:	b29a      	uxth	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e017      	b.n	80057d0 <PCD_EP_ISR_Handler+0x2ce>
 80057a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	085b      	lsrs	r3, r3, #1
 80057a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <PCD_EP_ISR_Handler+0x2b8>
 80057b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b6:	3301      	adds	r3, #1
 80057b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e0:	827b      	strh	r3, [r7, #18]
 80057e2:	8a7b      	ldrh	r3, [r7, #18]
 80057e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057e8:	827b      	strh	r3, [r7, #18]
 80057ea:	8a7b      	ldrh	r3, [r7, #18]
 80057ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057f0:	827b      	strh	r3, [r7, #18]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	8a7b      	ldrh	r3, [r7, #18]
 80057f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005808:	b29b      	uxth	r3, r3
 800580a:	8013      	strh	r3, [r2, #0]
 800580c:	e22c      	b.n	8005c68 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005822:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005826:	2b00      	cmp	r3, #0
 8005828:	f280 80f6 	bge.w	8005a18 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29a      	uxth	r2, r3
 800583e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005842:	4013      	ands	r3, r2
 8005844:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800585a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800585e:	b292      	uxth	r2, r2
 8005860:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005862:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800587a:	7b1b      	ldrb	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d123      	bne.n	80058c8 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	4413      	add	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	4413      	add	r3, r2
 800589a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80058a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 808e 	beq.w	80059ce <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058bc:	88da      	ldrh	r2, [r3, #6]
 80058be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058c2:	f006 fa37 	bl	800bd34 <USB_ReadPMA>
 80058c6:	e082      	b.n	80059ce <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80058c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ca:	78db      	ldrb	r3, [r3, #3]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d10a      	bne.n	80058e6 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80058d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80058d4:	461a      	mov	r2, r3
 80058d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9d3 	bl	8005c84 <HAL_PCD_EP_DB_Receive>
 80058de:	4603      	mov	r3, r0
 80058e0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80058e4:	e073      	b.n	80059ce <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005900:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	441a      	add	r2, r3
 8005912:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d022      	beq.n	800598a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800594c:	b29b      	uxth	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	4413      	add	r3, r2
 800595e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005968:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800596c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d02c      	beq.n	80059ce <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597a:	6959      	ldr	r1, [r3, #20]
 800597c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597e:	891a      	ldrh	r2, [r3, #8]
 8005980:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005984:	f006 f9d6 	bl	800bd34 <USB_ReadPMA>
 8005988:	e021      	b.n	80059ce <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005992:	b29b      	uxth	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80059b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c0:	6959      	ldr	r1, [r3, #20]
 80059c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c4:	895a      	ldrh	r2, [r3, #10]
 80059c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059ca:	f006 f9b3 	bl	800bd34 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80059ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059d6:	441a      	add	r2, r3
 80059d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80059dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059e4:	441a      	add	r2, r3
 80059e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80059ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <PCD_EP_ISR_Handler+0x4fc>
 80059f2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80059f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d206      	bcs.n	8005a0c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80059fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f00b fdc3 	bl	8011590 <HAL_PCD_DataOutStageCallback>
 8005a0a:	e005      	b.n	8005a18 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a12:	4618      	mov	r0, r3
 8005a14:	f004 fc61 	bl	800a2da <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8121 	beq.w	8005c68 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a26:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	3310      	adds	r3, #16
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4413      	add	r3, r2
 8005a38:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a54:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a78:	78db      	ldrb	r3, [r3, #3]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	f040 80a2 	bne.w	8005bc4 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a82:	2200      	movs	r2, #0
 8005a84:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a88:	7b1b      	ldrb	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 8093 	beq.w	8005bb6 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d046      	beq.n	8005b2a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d126      	bne.n	8005af2 <PCD_EP_ISR_Handler+0x5f0>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	4413      	add	r3, r2
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	00da      	lsls	r2, r3, #3
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e061      	b.n	8005bb6 <PCD_EP_ISR_Handler+0x6b4>
 8005af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d15d      	bne.n	8005bb6 <PCD_EP_ISR_Handler+0x6b4>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0e:	4413      	add	r3, r2
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	00da      	lsls	r2, r3, #3
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	2200      	movs	r2, #0
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e045      	b.n	8005bb6 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d126      	bne.n	8005b86 <PCD_EP_ISR_Handler+0x684>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4c:	4413      	add	r3, r2
 8005b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	00da      	lsls	r2, r3, #3
 8005b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b58:	4413      	add	r3, r2
 8005b5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e017      	b.n	8005bb6 <PCD_EP_ISR_Handler+0x6b4>
 8005b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d113      	bne.n	8005bb6 <PCD_EP_ISR_Handler+0x6b4>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9c:	4413      	add	r3, r2
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	00da      	lsls	r2, r3, #3
 8005ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f00b fd02 	bl	80115c6 <HAL_PCD_DataInStageCallback>
 8005bc2:	e051      	b.n	8005c68 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005bc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d144      	bne.n	8005c5a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4413      	add	r3, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d907      	bls.n	8005c14 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c0c:	1ad2      	subs	r2, r2, r3
 8005c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c10:	619a      	str	r2, [r3, #24]
 8005c12:	e002      	b.n	8005c1a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c16:	2200      	movs	r2, #0
 8005c18:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f00b fccc 	bl	80115c6 <HAL_PCD_DataInStageCallback>
 8005c2e:	e01b      	b.n	8005c68 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c38:	441a      	add	r2, r3
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c3c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c46:	441a      	add	r2, r3
 8005c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c52:	4618      	mov	r0, r3
 8005c54:	f004 fb41 	bl	800a2da <USB_EPStartXfer>
 8005c58:	e006      	b.n	8005c68 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005c5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f917 	bl	8005e96 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f6ff ac49 	blt.w	800550c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3758      	adds	r7, #88	@ 0x58
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d07c      	beq.n	8005d96 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4413      	add	r3, r2
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	8b7b      	ldrh	r3, [r7, #26]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d306      	bcc.n	8005cda <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	8b7b      	ldrh	r3, [r7, #26]
 8005cd2:	1ad2      	subs	r2, r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	619a      	str	r2, [r3, #24]
 8005cd8:	e002      	b.n	8005ce0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d123      	bne.n	8005d30 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	833b      	strh	r3, [r7, #24]
 8005d04:	8b3b      	ldrh	r3, [r7, #24]
 8005d06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d0a:	833b      	strh	r3, [r7, #24]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	441a      	add	r2, r3
 8005d1a:	8b3b      	ldrh	r3, [r7, #24]
 8005d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01f      	beq.n	8005d7a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d54:	82fb      	strh	r3, [r7, #22]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	8afb      	ldrh	r3, [r7, #22]
 8005d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d7a:	8b7b      	ldrh	r3, [r7, #26]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8085 	beq.w	8005e8c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6959      	ldr	r1, [r3, #20]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	891a      	ldrh	r2, [r3, #8]
 8005d8e:	8b7b      	ldrh	r3, [r7, #26]
 8005d90:	f005 ffd0 	bl	800bd34 <USB_ReadPMA>
 8005d94:	e07a      	b.n	8005e8c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4413      	add	r3, r2
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	4413      	add	r3, r2
 8005db0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	8b7b      	ldrh	r3, [r7, #26]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d306      	bcc.n	8005dd4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	8b7b      	ldrh	r3, [r7, #26]
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	619a      	str	r2, [r3, #24]
 8005dd2:	e002      	b.n	8005dda <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d123      	bne.n	8005e2a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfc:	83fb      	strh	r3, [r7, #30]
 8005dfe:	8bfb      	ldrh	r3, [r7, #30]
 8005e00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e04:	83fb      	strh	r3, [r7, #30]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	8bfb      	ldrh	r3, [r7, #30]
 8005e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11f      	bne.n	8005e74 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	83bb      	strh	r3, [r7, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	8bbb      	ldrh	r3, [r7, #28]
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e74:	8b7b      	ldrh	r3, [r7, #26]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6959      	ldr	r1, [r3, #20]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	895a      	ldrh	r2, [r3, #10]
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	f005 ff54 	bl	800bd34 <USB_ReadPMA>
    }
  }

  return count;
 8005e8c:	8b7b      	ldrh	r3, [r7, #26]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b0a4      	sub	sp, #144	@ 0x90
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 81db 	beq.w	8006266 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ed4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d907      	bls.n	8005ef4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005eec:	1ad2      	subs	r2, r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	619a      	str	r2, [r3, #24]
 8005ef2:	e002      	b.n	8005efa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 80b9 	bne.w	8006076 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d126      	bne.n	8005f5a <HAL_PCD_EP_DB_Transmit+0xc4>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	4413      	add	r3, r2
 8005f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	00da      	lsls	r2, r3, #3
 8005f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e01a      	b.n	8005f90 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d116      	bne.n	8005f90 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f76:	4413      	add	r3, r2
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	00da      	lsls	r2, r3, #3
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d126      	bne.n	8005fec <HAL_PCD_EP_DB_Transmit+0x156>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	61fb      	str	r3, [r7, #28]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	00da      	lsls	r2, r3, #3
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e017      	b.n	800601c <HAL_PCD_EP_DB_Transmit+0x186>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d113      	bne.n	800601c <HAL_PCD_EP_DB_Transmit+0x186>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	4413      	add	r3, r2
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	00da      	lsls	r2, r3, #3
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	4413      	add	r3, r2
 8006010:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2200      	movs	r2, #0
 800601a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	4619      	mov	r1, r3
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f00b facf 	bl	80115c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 82fa 	beq.w	8006628 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800604a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604e:	82fb      	strh	r3, [r7, #22]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	441a      	add	r2, r3
 800605e:	8afb      	ldrh	r3, [r7, #22]
 8006060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006068:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800606c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006070:	b29b      	uxth	r3, r3
 8006072:	8013      	strh	r3, [r2, #0]
 8006074:	e2d8      	b.n	8006628 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d021      	beq.n	80060c4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	441a      	add	r2, r3
 80060ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80060b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	f040 82ac 	bne.w	8006628 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060d8:	441a      	add	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060e6:	441a      	add	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d30b      	bcc.n	8006110 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6a1a      	ldr	r2, [r3, #32]
 8006104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006108:	1ad2      	subs	r2, r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	621a      	str	r2, [r3, #32]
 800610e:	e017      	b.n	8006140 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d108      	bne.n	800612a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006118:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800611c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006128:	e00a      	b.n	8006140 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d165      	bne.n	8006214 <HAL_PCD_EP_DB_Transmit+0x37e>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615c:	4413      	add	r3, r2
 800615e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	00da      	lsls	r2, r3, #3
 8006166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006168:	4413      	add	r3, r2
 800616a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800617a:	b29a      	uxth	r2, r3
 800617c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006184:	2b3e      	cmp	r3, #62	@ 0x3e
 8006186:	d91d      	bls.n	80061c4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8006188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x30c>
 800619c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800619e:	3b01      	subs	r3, #1
 80061a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061bc:	b29a      	uxth	r2, r3
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e044      	b.n	800624e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80061c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <HAL_PCD_EP_DB_Transmit+0x34c>
 80061cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	e035      	b.n	800624e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80061e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_PCD_EP_DB_Transmit+0x366>
 80061f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f8:	3301      	adds	r3, #1
 80061fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29a      	uxth	r2, r3
 8006202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006204:	b29b      	uxth	r3, r3
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b29b      	uxth	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b29a      	uxth	r2, r3
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	e01c      	b.n	800624e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d118      	bne.n	800624e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	647b      	str	r3, [r7, #68]	@ 0x44
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800622a:	b29b      	uxth	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006230:	4413      	add	r3, r2
 8006232:	647b      	str	r3, [r7, #68]	@ 0x44
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	00da      	lsls	r2, r3, #3
 800623a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623c:	4413      	add	r3, r2
 800623e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006242:	643b      	str	r3, [r7, #64]	@ 0x40
 8006244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006248:	b29a      	uxth	r2, r3
 800624a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6959      	ldr	r1, [r3, #20]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	891a      	ldrh	r2, [r3, #8]
 800625a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800625e:	b29b      	uxth	r3, r3
 8006260:	f005 fd26 	bl	800bcb0 <USB_WritePMA>
 8006264:	e1e0      	b.n	8006628 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4413      	add	r3, r2
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	4413      	add	r3, r2
 8006280:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800628a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006296:	429a      	cmp	r2, r3
 8006298:	d307      	bcc.n	80062aa <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062a2:	1ad2      	subs	r2, r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	619a      	str	r2, [r3, #24]
 80062a8:	e002      	b.n	80062b0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 80c0 	bne.w	800643a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d126      	bne.n	8006310 <HAL_PCD_EP_DB_Transmit+0x47a>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062d6:	4413      	add	r3, r2
 80062d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	00da      	lsls	r2, r3, #3
 80062e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006308:	b29a      	uxth	r2, r3
 800630a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	e01a      	b.n	8006346 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d116      	bne.n	8006346 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	667b      	str	r3, [r7, #100]	@ 0x64
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006326:	b29b      	uxth	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800632c:	4413      	add	r3, r2
 800632e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	00da      	lsls	r2, r3, #3
 8006336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006338:	4413      	add	r3, r2
 800633a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800633e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006342:	2200      	movs	r2, #0
 8006344:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	677b      	str	r3, [r7, #116]	@ 0x74
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d12b      	bne.n	80063ac <HAL_PCD_EP_DB_Transmit+0x516>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006368:	4413      	add	r3, r2
 800636a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00da      	lsls	r2, r3, #3
 8006372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006374:	4413      	add	r3, r2
 8006376:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800637a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800637e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800638a:	b29a      	uxth	r2, r3
 800638c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006390:	801a      	strh	r2, [r3, #0]
 8006392:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e017      	b.n	80063dc <HAL_PCD_EP_DB_Transmit+0x546>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d113      	bne.n	80063dc <HAL_PCD_EP_DB_Transmit+0x546>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063bc:	b29b      	uxth	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063c2:	4413      	add	r3, r2
 80063c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	00da      	lsls	r2, r3, #3
 80063cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063ce:	4413      	add	r3, r2
 80063d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80063d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063d8:	2200      	movs	r2, #0
 80063da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f00b f8ef 	bl	80115c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 811a 	bne.w	8006628 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800642c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006434:	b29b      	uxth	r3, r3
 8006436:	8013      	strh	r3, [r2, #0]
 8006438:	e0f6      	b.n	8006628 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d121      	bne.n	8006488 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800648e:	2b01      	cmp	r3, #1
 8006490:	f040 80ca 	bne.w	8006628 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800649c:	441a      	add	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064aa:	441a      	add	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6a1a      	ldr	r2, [r3, #32]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d30b      	bcc.n	80064d4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	621a      	str	r2, [r3, #32]
 80064d2:	e017      	b.n	8006504 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d108      	bne.n	80064ee <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80064dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80064ec:	e00a      	b.n	8006504 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2200      	movs	r2, #0
 80064fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	657b      	str	r3, [r7, #84]	@ 0x54
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d165      	bne.n	80065de <HAL_PCD_EP_DB_Transmit+0x748>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006520:	b29b      	uxth	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006526:	4413      	add	r3, r2
 8006528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	00da      	lsls	r2, r3, #3
 8006530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006532:	4413      	add	r3, r2
 8006534:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800653a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006544:	b29a      	uxth	r2, r3
 8006546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006550:	d91d      	bls.n	800658e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800655a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006568:	3b01      	subs	r3, #1
 800656a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800656c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29a      	uxth	r2, r3
 8006572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006574:	b29b      	uxth	r3, r3
 8006576:	029b      	lsls	r3, r3, #10
 8006578:	b29b      	uxth	r3, r3
 800657a:	4313      	orrs	r3, r2
 800657c:	b29b      	uxth	r3, r3
 800657e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006586:	b29a      	uxth	r2, r3
 8006588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	e041      	b.n	8006612 <HAL_PCD_EP_DB_Transmit+0x77c>
 800658e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <HAL_PCD_EP_DB_Transmit+0x716>
 8006596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065a8:	801a      	strh	r2, [r3, #0]
 80065aa:	e032      	b.n	8006612 <HAL_PCD_EP_DB_Transmit+0x77c>
 80065ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065b0:	085b      	lsrs	r3, r3, #1
 80065b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_PCD_EP_DB_Transmit+0x730>
 80065c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065c2:	3301      	adds	r3, #1
 80065c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	029b      	lsls	r3, r3, #10
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e019      	b.n	8006612 <HAL_PCD_EP_DB_Transmit+0x77c>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	785b      	ldrb	r3, [r3, #1]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d115      	bne.n	8006612 <HAL_PCD_EP_DB_Transmit+0x77c>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065f4:	4413      	add	r3, r2
 80065f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	00da      	lsls	r2, r3, #3
 80065fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006600:	4413      	add	r3, r2
 8006602:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006606:	653b      	str	r3, [r7, #80]	@ 0x50
 8006608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800660c:	b29a      	uxth	r2, r3
 800660e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006610:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6959      	ldr	r1, [r3, #20]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	895a      	ldrh	r2, [r3, #10]
 800661e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006622:	b29b      	uxth	r3, r3
 8006624:	f005 fb44 	bl	800bcb0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006642:	82bb      	strh	r3, [r7, #20]
 8006644:	8abb      	ldrh	r3, [r7, #20]
 8006646:	f083 0310 	eor.w	r3, r3, #16
 800664a:	82bb      	strh	r3, [r7, #20]
 800664c:	8abb      	ldrh	r3, [r7, #20]
 800664e:	f083 0320 	eor.w	r3, r3, #32
 8006652:	82bb      	strh	r3, [r7, #20]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	8abb      	ldrh	r3, [r7, #20]
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3790      	adds	r7, #144	@ 0x90
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006682:	b480      	push	{r7}
 8006684:	b087      	sub	sp, #28
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	817b      	strh	r3, [r7, #10]
 8006690:	4613      	mov	r3, r2
 8006692:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006694:	897b      	ldrh	r3, [r7, #10]
 8006696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066a0:	897b      	ldrh	r3, [r7, #10]
 80066a2:	f003 0207 	and.w	r2, r3, #7
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	3310      	adds	r3, #16
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	e009      	b.n	80066cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066b8:	897a      	ldrh	r2, [r7, #10]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066cc:	893b      	ldrh	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d107      	bne.n	80066e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2200      	movs	r2, #0
 80066d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	80da      	strh	r2, [r3, #6]
 80066e0:	e00b      	b.n	80066fa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2201      	movs	r2, #1
 80066e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	0c1b      	lsrs	r3, r3, #16
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800672c:	b29b      	uxth	r3, r3
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006740:	b29b      	uxth	r3, r3
 8006742:	f043 0302 	orr.w	r3, r3, #2
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d141      	bne.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800676a:	4b4b      	ldr	r3, [pc, #300]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006776:	d131      	bne.n	80067dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006778:	4b47      	ldr	r3, [pc, #284]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800677a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800677e:	4a46      	ldr	r2, [pc, #280]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006788:	4b43      	ldr	r3, [pc, #268]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006790:	4a41      	ldr	r2, [pc, #260]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006796:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006798:	4b40      	ldr	r3, [pc, #256]	@ (800689c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2232      	movs	r2, #50	@ 0x32
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	4a3f      	ldr	r2, [pc, #252]	@ (80068a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	0c9b      	lsrs	r3, r3, #18
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ae:	e002      	b.n	80067b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b6:	4b38      	ldr	r3, [pc, #224]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c2:	d102      	bne.n	80067ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f2      	bne.n	80067b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067ca:	4b33      	ldr	r3, [pc, #204]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d6:	d158      	bne.n	800688a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e057      	b.n	800688c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067ec:	e04d      	b.n	800688a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f4:	d141      	bne.n	800687a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067f6:	4b28      	ldr	r3, [pc, #160]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006802:	d131      	bne.n	8006868 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006804:	4b24      	ldr	r3, [pc, #144]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680a:	4a23      	ldr	r2, [pc, #140]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006810:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006814:	4b20      	ldr	r3, [pc, #128]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800681c:	4a1e      	ldr	r2, [pc, #120]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006822:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006824:	4b1d      	ldr	r3, [pc, #116]	@ (800689c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2232      	movs	r2, #50	@ 0x32
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	4a1c      	ldr	r2, [pc, #112]	@ (80068a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	0c9b      	lsrs	r3, r3, #18
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683a:	e002      	b.n	8006842 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3b01      	subs	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006842:	4b15      	ldr	r3, [pc, #84]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800684e:	d102      	bne.n	8006856 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f2      	bne.n	800683c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006856:	4b10      	ldr	r3, [pc, #64]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006862:	d112      	bne.n	800688a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e011      	b.n	800688c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006868:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800686e:	4a0a      	ldr	r2, [pc, #40]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006878:	e007      	b.n	800688a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800687a:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006882:	4a05      	ldr	r2, [pc, #20]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006888:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40007000 	.word	0x40007000
 800689c:	20000000 	.word	0x20000000
 80068a0:	431bde83 	.word	0x431bde83

080068a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068a8:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4a04      	ldr	r2, [pc, #16]	@ (80068c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068b2:	6093      	str	r3, [r2, #8]
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40007000 	.word	0x40007000

080068c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e2fe      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d075      	beq.n	80069ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e2:	4b97      	ldr	r3, [pc, #604]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 030c 	and.w	r3, r3, #12
 80068ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ec:	4b94      	ldr	r3, [pc, #592]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0303 	and.w	r3, r3, #3
 80068f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b0c      	cmp	r3, #12
 80068fa:	d102      	bne.n	8006902 <HAL_RCC_OscConfig+0x3e>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d002      	beq.n	8006908 <HAL_RCC_OscConfig+0x44>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b08      	cmp	r3, #8
 8006906:	d10b      	bne.n	8006920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006908:	4b8d      	ldr	r3, [pc, #564]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d05b      	beq.n	80069cc <HAL_RCC_OscConfig+0x108>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d157      	bne.n	80069cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e2d9      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006928:	d106      	bne.n	8006938 <HAL_RCC_OscConfig+0x74>
 800692a:	4b85      	ldr	r3, [pc, #532]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a84      	ldr	r2, [pc, #528]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	e01d      	b.n	8006974 <HAL_RCC_OscConfig+0xb0>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006940:	d10c      	bne.n	800695c <HAL_RCC_OscConfig+0x98>
 8006942:	4b7f      	ldr	r3, [pc, #508]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a7e      	ldr	r2, [pc, #504]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a7b      	ldr	r2, [pc, #492]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	e00b      	b.n	8006974 <HAL_RCC_OscConfig+0xb0>
 800695c:	4b78      	ldr	r3, [pc, #480]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a77      	ldr	r2, [pc, #476]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	4b75      	ldr	r3, [pc, #468]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a74      	ldr	r2, [pc, #464]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 800696e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d013      	beq.n	80069a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fc ff34 	bl	80037e8 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006984:	f7fc ff30 	bl	80037e8 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	@ 0x64
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e29e      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006996:	4b6a      	ldr	r3, [pc, #424]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f0      	beq.n	8006984 <HAL_RCC_OscConfig+0xc0>
 80069a2:	e014      	b.n	80069ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fc ff20 	bl	80037e8 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069ac:	f7fc ff1c 	bl	80037e8 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b64      	cmp	r3, #100	@ 0x64
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e28a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069be:	4b60      	ldr	r3, [pc, #384]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0xe8>
 80069ca:	e000      	b.n	80069ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d075      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069da:	4b59      	ldr	r3, [pc, #356]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 030c 	and.w	r3, r3, #12
 80069e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069e4:	4b56      	ldr	r3, [pc, #344]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d102      	bne.n	80069fa <HAL_RCC_OscConfig+0x136>
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d002      	beq.n	8006a00 <HAL_RCC_OscConfig+0x13c>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d11f      	bne.n	8006a40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a00:	4b4f      	ldr	r3, [pc, #316]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCC_OscConfig+0x154>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e25d      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a18:	4b49      	ldr	r3, [pc, #292]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	061b      	lsls	r3, r3, #24
 8006a26:	4946      	ldr	r1, [pc, #280]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a2c:	4b45      	ldr	r3, [pc, #276]	@ (8006b44 <HAL_RCC_OscConfig+0x280>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fc fc57 	bl	80032e4 <HAL_InitTick>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d043      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e249      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d023      	beq.n	8006a90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a48:	4b3d      	ldr	r3, [pc, #244]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a54:	f7fc fec8 	bl	80037e8 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a5c:	f7fc fec4 	bl	80037e8 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e232      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a6e:	4b34      	ldr	r3, [pc, #208]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7a:	4b31      	ldr	r3, [pc, #196]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	492d      	ldr	r1, [pc, #180]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	604b      	str	r3, [r1, #4]
 8006a8e:	e01a      	b.n	8006ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a90:	4b2b      	ldr	r3, [pc, #172]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a2a      	ldr	r2, [pc, #168]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006a96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9c:	f7fc fea4 	bl	80037e8 <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aa4:	f7fc fea0 	bl	80037e8 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e20e      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ab6:	4b22      	ldr	r3, [pc, #136]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1f0      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x1e0>
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d041      	beq.n	8006b56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01c      	beq.n	8006b14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ada:	4b19      	ldr	r3, [pc, #100]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae0:	4a17      	ldr	r2, [pc, #92]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aea:	f7fc fe7d 	bl	80037e8 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af2:	f7fc fe79 	bl	80037e8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e1e7      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b04:	4b0e      	ldr	r3, [pc, #56]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0ef      	beq.n	8006af2 <HAL_RCC_OscConfig+0x22e>
 8006b12:	e020      	b.n	8006b56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b14:	4b0a      	ldr	r3, [pc, #40]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b1a:	4a09      	ldr	r2, [pc, #36]	@ (8006b40 <HAL_RCC_OscConfig+0x27c>)
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b24:	f7fc fe60 	bl	80037e8 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b2a:	e00d      	b.n	8006b48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b2c:	f7fc fe5c 	bl	80037e8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d906      	bls.n	8006b48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e1ca      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
 8006b3e:	bf00      	nop
 8006b40:	40021000 	.word	0x40021000
 8006b44:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b48:	4b8c      	ldr	r3, [pc, #560]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1ea      	bne.n	8006b2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 80a6 	beq.w	8006cb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b64:	2300      	movs	r3, #0
 8006b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b68:	4b84      	ldr	r3, [pc, #528]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_RCC_OscConfig+0x2b4>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e000      	b.n	8006b7a <HAL_RCC_OscConfig+0x2b6>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b82:	4a7e      	ldr	r2, [pc, #504]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b96:	2301      	movs	r3, #1
 8006b98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b9a:	4b79      	ldr	r3, [pc, #484]	@ (8006d80 <HAL_RCC_OscConfig+0x4bc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d118      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ba6:	4b76      	ldr	r3, [pc, #472]	@ (8006d80 <HAL_RCC_OscConfig+0x4bc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a75      	ldr	r2, [pc, #468]	@ (8006d80 <HAL_RCC_OscConfig+0x4bc>)
 8006bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bb2:	f7fc fe19 	bl	80037e8 <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bba:	f7fc fe15 	bl	80037e8 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e183      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8006d80 <HAL_RCC_OscConfig+0x4bc>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d108      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x32e>
 8006be0:	4b66      	ldr	r3, [pc, #408]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be6:	4a65      	ldr	r2, [pc, #404]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bf0:	e024      	b.n	8006c3c <HAL_RCC_OscConfig+0x378>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	d110      	bne.n	8006c1c <HAL_RCC_OscConfig+0x358>
 8006bfa:	4b60      	ldr	r3, [pc, #384]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c00:	4a5e      	ldr	r2, [pc, #376]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c02:	f043 0304 	orr.w	r3, r3, #4
 8006c06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c10:	4a5a      	ldr	r2, [pc, #360]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c1a:	e00f      	b.n	8006c3c <HAL_RCC_OscConfig+0x378>
 8006c1c:	4b57      	ldr	r3, [pc, #348]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c22:	4a56      	ldr	r2, [pc, #344]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c24:	f023 0301 	bic.w	r3, r3, #1
 8006c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c2c:	4b53      	ldr	r3, [pc, #332]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c32:	4a52      	ldr	r2, [pc, #328]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d016      	beq.n	8006c72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c44:	f7fc fdd0 	bl	80037e8 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c4a:	e00a      	b.n	8006c62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c4c:	f7fc fdcc 	bl	80037e8 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e138      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c62:	4b46      	ldr	r3, [pc, #280]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0ed      	beq.n	8006c4c <HAL_RCC_OscConfig+0x388>
 8006c70:	e015      	b.n	8006c9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c72:	f7fc fdb9 	bl	80037e8 <HAL_GetTick>
 8006c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c78:	e00a      	b.n	8006c90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c7a:	f7fc fdb5 	bl	80037e8 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e121      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c90:	4b3a      	ldr	r3, [pc, #232]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1ed      	bne.n	8006c7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c9e:	7ffb      	ldrb	r3, [r7, #31]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d105      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ca4:	4b35      	ldr	r3, [pc, #212]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca8:	4a34      	ldr	r2, [pc, #208]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d03c      	beq.n	8006d36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01c      	beq.n	8006cfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cca:	4a2c      	ldr	r2, [pc, #176]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006ccc:	f043 0301 	orr.w	r3, r3, #1
 8006cd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd4:	f7fc fd88 	bl	80037e8 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cdc:	f7fc fd84 	bl	80037e8 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e0f2      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cee:	4b23      	ldr	r3, [pc, #140]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0ef      	beq.n	8006cdc <HAL_RCC_OscConfig+0x418>
 8006cfc:	e01b      	b.n	8006d36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d04:	4a1d      	ldr	r2, [pc, #116]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006d06:	f023 0301 	bic.w	r3, r3, #1
 8006d0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0e:	f7fc fd6b 	bl	80037e8 <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d14:	e008      	b.n	8006d28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d16:	f7fc fd67 	bl	80037e8 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e0d5      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d28:	4b14      	ldr	r3, [pc, #80]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1ef      	bne.n	8006d16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80c9 	beq.w	8006ed2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d40:	4b0e      	ldr	r3, [pc, #56]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b0c      	cmp	r3, #12
 8006d4a:	f000 8083 	beq.w	8006e54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d15e      	bne.n	8006e14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d56:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a08      	ldr	r2, [pc, #32]	@ (8006d7c <HAL_RCC_OscConfig+0x4b8>)
 8006d5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d62:	f7fc fd41 	bl	80037e8 <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d68:	e00c      	b.n	8006d84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d6a:	f7fc fd3d 	bl	80037e8 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d905      	bls.n	8006d84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e0ab      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d84:	4b55      	ldr	r3, [pc, #340]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ec      	bne.n	8006d6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d90:	4b52      	ldr	r3, [pc, #328]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	4b52      	ldr	r3, [pc, #328]	@ (8006ee0 <HAL_RCC_OscConfig+0x61c>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6a11      	ldr	r1, [r2, #32]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006da0:	3a01      	subs	r2, #1
 8006da2:	0112      	lsls	r2, r2, #4
 8006da4:	4311      	orrs	r1, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006daa:	0212      	lsls	r2, r2, #8
 8006dac:	4311      	orrs	r1, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006db2:	0852      	lsrs	r2, r2, #1
 8006db4:	3a01      	subs	r2, #1
 8006db6:	0552      	lsls	r2, r2, #21
 8006db8:	4311      	orrs	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dbe:	0852      	lsrs	r2, r2, #1
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	0652      	lsls	r2, r2, #25
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dca:	06d2      	lsls	r2, r2, #27
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	4943      	ldr	r1, [pc, #268]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dd4:	4b41      	ldr	r3, [pc, #260]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a40      	ldr	r2, [pc, #256]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006de0:	4b3e      	ldr	r3, [pc, #248]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	4a3d      	ldr	r2, [pc, #244]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fc fcfc 	bl	80037e8 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df4:	f7fc fcf8 	bl	80037e8 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e066      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e06:	4b35      	ldr	r3, [pc, #212]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f0      	beq.n	8006df4 <HAL_RCC_OscConfig+0x530>
 8006e12:	e05e      	b.n	8006ed2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e14:	4b31      	ldr	r3, [pc, #196]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a30      	ldr	r2, [pc, #192]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fc fce2 	bl	80037e8 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e28:	f7fc fcde 	bl	80037e8 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e04c      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e3a:	4b28      	ldr	r3, [pc, #160]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f0      	bne.n	8006e28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e46:	4b25      	ldr	r3, [pc, #148]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	4924      	ldr	r1, [pc, #144]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006e4c:	4b25      	ldr	r3, [pc, #148]	@ (8006ee4 <HAL_RCC_OscConfig+0x620>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	60cb      	str	r3, [r1, #12]
 8006e52:	e03e      	b.n	8006ed2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e039      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e60:	4b1e      	ldr	r3, [pc, #120]	@ (8006edc <HAL_RCC_OscConfig+0x618>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f003 0203 	and.w	r2, r3, #3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d12c      	bne.n	8006ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d123      	bne.n	8006ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d11b      	bne.n	8006ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d113      	bne.n	8006ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d109      	bne.n	8006ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d001      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3720      	adds	r7, #32
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	019f800c 	.word	0x019f800c
 8006ee4:	feeefffc 	.word	0xfeeefffc

08006ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e11e      	b.n	800713e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f00:	4b91      	ldr	r3, [pc, #580]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d910      	bls.n	8006f30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0e:	4b8e      	ldr	r3, [pc, #568]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f023 020f 	bic.w	r2, r3, #15
 8006f16:	498c      	ldr	r1, [pc, #560]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e106      	b.n	800713e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d073      	beq.n	8007024 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d129      	bne.n	8006f98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f44:	4b81      	ldr	r3, [pc, #516]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0f4      	b.n	800713e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f54:	f000 f9ce 	bl	80072f4 <RCC_GetSysClockFreqFromPLLSource>
 8006f58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4a7c      	ldr	r2, [pc, #496]	@ (8007150 <HAL_RCC_ClockConfig+0x268>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d93f      	bls.n	8006fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f62:	4b7a      	ldr	r3, [pc, #488]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d033      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d12f      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f82:	4b72      	ldr	r3, [pc, #456]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f8a:	4a70      	ldr	r2, [pc, #448]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e024      	b.n	8006fe2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d107      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0c6      	b.n	800713e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fb0:	4b66      	ldr	r3, [pc, #408]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0be      	b.n	800713e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fc0:	f000 f8ce 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8006fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	4a61      	ldr	r2, [pc, #388]	@ (8007150 <HAL_RCC_ClockConfig+0x268>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d909      	bls.n	8006fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fce:	4b5f      	ldr	r3, [pc, #380]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fd6:	4a5d      	ldr	r2, [pc, #372]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fde:	2380      	movs	r3, #128	@ 0x80
 8006fe0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f023 0203 	bic.w	r2, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	4957      	ldr	r1, [pc, #348]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff4:	f7fc fbf8 	bl	80037e8 <HAL_GetTick>
 8006ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffa:	e00a      	b.n	8007012 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ffc:	f7fc fbf4 	bl	80037e8 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800700a:	4293      	cmp	r3, r2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e095      	b.n	800713e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007012:	4b4e      	ldr	r3, [pc, #312]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 020c 	and.w	r2, r3, #12
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	429a      	cmp	r2, r3
 8007022:	d1eb      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d023      	beq.n	8007078 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800703c:	4b43      	ldr	r3, [pc, #268]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	4a42      	ldr	r2, [pc, #264]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007042:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007046:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007054:	4b3d      	ldr	r3, [pc, #244]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800705c:	4a3b      	ldr	r2, [pc, #236]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 800705e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007062:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007064:	4b39      	ldr	r3, [pc, #228]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4936      	ldr	r1, [pc, #216]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007072:	4313      	orrs	r3, r2
 8007074:	608b      	str	r3, [r1, #8]
 8007076:	e008      	b.n	800708a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b80      	cmp	r3, #128	@ 0x80
 800707c:	d105      	bne.n	800708a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800707e:	4b33      	ldr	r3, [pc, #204]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	4a32      	ldr	r2, [pc, #200]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007084:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007088:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800708a:	4b2f      	ldr	r3, [pc, #188]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d21d      	bcs.n	80070d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007098:	4b2b      	ldr	r3, [pc, #172]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f023 020f 	bic.w	r2, r3, #15
 80070a0:	4929      	ldr	r1, [pc, #164]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070a8:	f7fc fb9e 	bl	80037e8 <HAL_GetTick>
 80070ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ae:	e00a      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b0:	f7fc fb9a 	bl	80037e8 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070be:	4293      	cmp	r3, r2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e03b      	b.n	800713e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c6:	4b20      	ldr	r3, [pc, #128]	@ (8007148 <HAL_RCC_ClockConfig+0x260>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d1ed      	bne.n	80070b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e0:	4b1a      	ldr	r3, [pc, #104]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	4917      	ldr	r1, [pc, #92]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070fe:	4b13      	ldr	r3, [pc, #76]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	490f      	ldr	r1, [pc, #60]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 800710e:	4313      	orrs	r3, r2
 8007110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007112:	f000 f825 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8007116:	4602      	mov	r2, r0
 8007118:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <HAL_RCC_ClockConfig+0x264>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	091b      	lsrs	r3, r3, #4
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	490c      	ldr	r1, [pc, #48]	@ (8007154 <HAL_RCC_ClockConfig+0x26c>)
 8007124:	5ccb      	ldrb	r3, [r1, r3]
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	fa22 f303 	lsr.w	r3, r2, r3
 800712e:	4a0a      	ldr	r2, [pc, #40]	@ (8007158 <HAL_RCC_ClockConfig+0x270>)
 8007130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007132:	4b0a      	ldr	r3, [pc, #40]	@ (800715c <HAL_RCC_ClockConfig+0x274>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f7fc f8d4 	bl	80032e4 <HAL_InitTick>
 800713c:	4603      	mov	r3, r0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40022000 	.word	0x40022000
 800714c:	40021000 	.word	0x40021000
 8007150:	04c4b400 	.word	0x04c4b400
 8007154:	08015a6c 	.word	0x08015a6c
 8007158:	20000000 	.word	0x20000000
 800715c:	20000004 	.word	0x20000004

08007160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007166:	4b2c      	ldr	r3, [pc, #176]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 030c 	and.w	r3, r3, #12
 800716e:	2b04      	cmp	r3, #4
 8007170:	d102      	bne.n	8007178 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007172:	4b2a      	ldr	r3, [pc, #168]	@ (800721c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	e047      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007178:	4b27      	ldr	r3, [pc, #156]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 030c 	and.w	r3, r3, #12
 8007180:	2b08      	cmp	r3, #8
 8007182:	d102      	bne.n	800718a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007184:	4b25      	ldr	r3, [pc, #148]	@ (800721c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	e03e      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800718a:	4b23      	ldr	r3, [pc, #140]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 030c 	and.w	r3, r3, #12
 8007192:	2b0c      	cmp	r3, #12
 8007194:	d136      	bne.n	8007204 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007196:	4b20      	ldr	r3, [pc, #128]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	3301      	adds	r3, #1
 80071ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d10c      	bne.n	80071ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071b4:	4a19      	ldr	r2, [pc, #100]	@ (800721c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071bc:	4a16      	ldr	r2, [pc, #88]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071be:	68d2      	ldr	r2, [r2, #12]
 80071c0:	0a12      	lsrs	r2, r2, #8
 80071c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071c6:	fb02 f303 	mul.w	r3, r2, r3
 80071ca:	617b      	str	r3, [r7, #20]
      break;
 80071cc:	e00c      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ce:	4a13      	ldr	r2, [pc, #76]	@ (800721c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d6:	4a10      	ldr	r2, [pc, #64]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071d8:	68d2      	ldr	r2, [r2, #12]
 80071da:	0a12      	lsrs	r2, r2, #8
 80071dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071e0:	fb02 f303 	mul.w	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]
      break;
 80071e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	0e5b      	lsrs	r3, r3, #25
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	3301      	adds	r3, #1
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e001      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007208:	693b      	ldr	r3, [r7, #16]
}
 800720a:	4618      	mov	r0, r3
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000
 800721c:	00f42400 	.word	0x00f42400

08007220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007224:	4b03      	ldr	r3, [pc, #12]	@ (8007234 <HAL_RCC_GetHCLKFreq+0x14>)
 8007226:	681b      	ldr	r3, [r3, #0]
}
 8007228:	4618      	mov	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000000 	.word	0x20000000

08007238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800723c:	f7ff fff0 	bl	8007220 <HAL_RCC_GetHCLKFreq>
 8007240:	4602      	mov	r2, r0
 8007242:	4b06      	ldr	r3, [pc, #24]	@ (800725c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	4904      	ldr	r1, [pc, #16]	@ (8007260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800724e:	5ccb      	ldrb	r3, [r1, r3]
 8007250:	f003 031f 	and.w	r3, r3, #31
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007258:	4618      	mov	r0, r3
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40021000 	.word	0x40021000
 8007260:	08015a7c 	.word	0x08015a7c

08007264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007268:	f7ff ffda 	bl	8007220 <HAL_RCC_GetHCLKFreq>
 800726c:	4602      	mov	r2, r0
 800726e:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	0adb      	lsrs	r3, r3, #11
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	4904      	ldr	r1, [pc, #16]	@ (800728c <HAL_RCC_GetPCLK2Freq+0x28>)
 800727a:	5ccb      	ldrb	r3, [r1, r3]
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007284:	4618      	mov	r0, r3
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40021000 	.word	0x40021000
 800728c:	08015a7c 	.word	0x08015a7c

08007290 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	220f      	movs	r2, #15
 800729e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80072a0:	4b12      	ldr	r3, [pc, #72]	@ (80072ec <HAL_RCC_GetClockConfig+0x5c>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 0203 	and.w	r2, r3, #3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80072ac:	4b0f      	ldr	r3, [pc, #60]	@ (80072ec <HAL_RCC_GetClockConfig+0x5c>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072b8:	4b0c      	ldr	r3, [pc, #48]	@ (80072ec <HAL_RCC_GetClockConfig+0x5c>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072c4:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <HAL_RCC_GetClockConfig+0x5c>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	08db      	lsrs	r3, r3, #3
 80072ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072d2:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <HAL_RCC_GetClockConfig+0x60>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 020f 	and.w	r2, r3, #15
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	601a      	str	r2, [r3, #0]
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40021000 	.word	0x40021000
 80072f0:	40022000 	.word	0x40022000

080072f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007304:	4b1b      	ldr	r3, [pc, #108]	@ (8007374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	091b      	lsrs	r3, r3, #4
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d10c      	bne.n	8007332 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007318:	4a17      	ldr	r2, [pc, #92]	@ (8007378 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007320:	4a14      	ldr	r2, [pc, #80]	@ (8007374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007322:	68d2      	ldr	r2, [r2, #12]
 8007324:	0a12      	lsrs	r2, r2, #8
 8007326:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	617b      	str	r3, [r7, #20]
    break;
 8007330:	e00c      	b.n	800734c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007332:	4a11      	ldr	r2, [pc, #68]	@ (8007378 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	4a0e      	ldr	r2, [pc, #56]	@ (8007374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800733c:	68d2      	ldr	r2, [r2, #12]
 800733e:	0a12      	lsrs	r2, r2, #8
 8007340:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007344:	fb02 f303 	mul.w	r3, r2, r3
 8007348:	617b      	str	r3, [r7, #20]
    break;
 800734a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800734c:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	0e5b      	lsrs	r3, r3, #25
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	3301      	adds	r3, #1
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007366:	687b      	ldr	r3, [r7, #4]
}
 8007368:	4618      	mov	r0, r3
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40021000 	.word	0x40021000
 8007378:	00f42400 	.word	0x00f42400

0800737c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007384:	2300      	movs	r3, #0
 8007386:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007388:	2300      	movs	r3, #0
 800738a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8098 	beq.w	80074ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800739a:	2300      	movs	r3, #0
 800739c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800739e:	4b43      	ldr	r3, [pc, #268]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10d      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073aa:	4b40      	ldr	r3, [pc, #256]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ae:	4a3f      	ldr	r2, [pc, #252]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80073b6:	4b3d      	ldr	r3, [pc, #244]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073c2:	2301      	movs	r3, #1
 80073c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073c6:	4b3a      	ldr	r3, [pc, #232]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a39      	ldr	r2, [pc, #228]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073d2:	f7fc fa09 	bl	80037e8 <HAL_GetTick>
 80073d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d8:	e009      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073da:	f7fc fa05 	bl	80037e8 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d902      	bls.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	74fb      	strb	r3, [r7, #19]
        break;
 80073ec:	e005      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ee:	4b30      	ldr	r3, [pc, #192]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0ef      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073fa:	7cfb      	ldrb	r3, [r7, #19]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d159      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007400:	4b2a      	ldr	r3, [pc, #168]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01e      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	429a      	cmp	r2, r3
 800741a:	d019      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800741c:	4b23      	ldr	r3, [pc, #140]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007428:	4b20      	ldr	r3, [pc, #128]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742e:	4a1f      	ldr	r2, [pc, #124]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007438:	4b1c      	ldr	r3, [pc, #112]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743e:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007448:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d016      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fc f9c5 	bl	80037e8 <HAL_GetTick>
 800745e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007460:	e00b      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007462:	f7fc f9c1 	bl	80037e8 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007470:	4293      	cmp	r3, r2
 8007472:	d902      	bls.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	74fb      	strb	r3, [r7, #19]
            break;
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800747a:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ec      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007488:	7cfb      	ldrb	r3, [r7, #19]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800748e:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749c:	4903      	ldr	r1, [pc, #12]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80074a4:	e008      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074a6:	7cfb      	ldrb	r3, [r7, #19]
 80074a8:	74bb      	strb	r3, [r7, #18]
 80074aa:	e005      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074ac:	40021000 	.word	0x40021000
 80074b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b4:	7cfb      	ldrb	r3, [r7, #19]
 80074b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074b8:	7c7b      	ldrb	r3, [r7, #17]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d105      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074be:	4ba7      	ldr	r3, [pc, #668]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c2:	4aa6      	ldr	r2, [pc, #664]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074d6:	4ba1      	ldr	r3, [pc, #644]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074dc:	f023 0203 	bic.w	r2, r3, #3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	499d      	ldr	r1, [pc, #628]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074f8:	4b98      	ldr	r3, [pc, #608]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fe:	f023 020c 	bic.w	r2, r3, #12
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	4995      	ldr	r1, [pc, #596]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800751a:	4b90      	ldr	r3, [pc, #576]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007520:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	498c      	ldr	r1, [pc, #560]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800753c:	4b87      	ldr	r3, [pc, #540]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	4984      	ldr	r1, [pc, #528]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800755e:	4b7f      	ldr	r3, [pc, #508]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	497b      	ldr	r1, [pc, #492]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007580:	4b76      	ldr	r3, [pc, #472]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007586:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	4973      	ldr	r1, [pc, #460]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075a2:	4b6e      	ldr	r3, [pc, #440]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	496a      	ldr	r1, [pc, #424]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075c4:	4b65      	ldr	r3, [pc, #404]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	4962      	ldr	r1, [pc, #392]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075e6:	4b5d      	ldr	r3, [pc, #372]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	4959      	ldr	r1, [pc, #356]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007608:	4b54      	ldr	r3, [pc, #336]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800760e:	f023 0203 	bic.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	4951      	ldr	r1, [pc, #324]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800762a:	4b4c      	ldr	r3, [pc, #304]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007630:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007638:	4948      	ldr	r1, [pc, #288]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007648:	2b00      	cmp	r3, #0
 800764a:	d015      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800764c:	4b43      	ldr	r3, [pc, #268]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007652:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765a:	4940      	ldr	r1, [pc, #256]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766a:	d105      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800766c:	4b3b      	ldr	r3, [pc, #236]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	4a3a      	ldr	r2, [pc, #232]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007676:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007684:	4b35      	ldr	r3, [pc, #212]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007692:	4932      	ldr	r1, [pc, #200]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076a2:	d105      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076a4:	4b2d      	ldr	r3, [pc, #180]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	4a2c      	ldr	r2, [pc, #176]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d015      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076bc:	4b27      	ldr	r3, [pc, #156]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ca:	4924      	ldr	r1, [pc, #144]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076da:	d105      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076dc:	4b1f      	ldr	r3, [pc, #124]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	4a1e      	ldr	r2, [pc, #120]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d015      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076f4:	4b19      	ldr	r3, [pc, #100]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007702:	4916      	ldr	r1, [pc, #88]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007712:	d105      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007714:	4b11      	ldr	r3, [pc, #68]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	4a10      	ldr	r2, [pc, #64]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800771e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d019      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800772c:	4b0b      	ldr	r3, [pc, #44]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007732:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	4908      	ldr	r1, [pc, #32]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800774a:	d109      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800774c:	4b03      	ldr	r3, [pc, #12]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	4a02      	ldr	r2, [pc, #8]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007756:	60d3      	str	r3, [r2, #12]
 8007758:	e002      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800775a:	bf00      	nop
 800775c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d015      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800776c:	4b29      	ldr	r3, [pc, #164]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007772:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777a:	4926      	ldr	r1, [pc, #152]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800777c:	4313      	orrs	r3, r2
 800777e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800778a:	d105      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800778c:	4b21      	ldr	r3, [pc, #132]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	4a20      	ldr	r2, [pc, #128]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007796:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d015      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80077a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077b2:	4918      	ldr	r1, [pc, #96]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077c2:	d105      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077c4:	4b13      	ldr	r3, [pc, #76]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	4a12      	ldr	r2, [pc, #72]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d015      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ea:	490a      	ldr	r1, [pc, #40]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077fa:	d105      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4a04      	ldr	r2, [pc, #16]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007806:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007808:	7cbb      	ldrb	r3, [r7, #18]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40021000 	.word	0x40021000

08007818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e09d      	b.n	8007966 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d108      	bne.n	8007844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800783a:	d009      	beq.n	8007850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	61da      	str	r2, [r3, #28]
 8007842:	e005      	b.n	8007850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fb fcce 	bl	800320c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007886:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007890:	d902      	bls.n	8007898 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	e002      	b.n	800789e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800789c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80078a6:	d007      	beq.n	80078b8 <HAL_SPI_Init+0xa0>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078b0:	d002      	beq.n	80078b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fa:	ea42 0103 	orr.w	r1, r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007902:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	f003 0204 	and.w	r2, r3, #4
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007934:	ea42 0103 	orr.w	r1, r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b088      	sub	sp, #32
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_SPI_Transmit+0x22>
 800798c:	2302      	movs	r3, #2
 800798e:	e15f      	b.n	8007c50 <HAL_SPI_Transmit+0x2e2>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007998:	f7fb ff26 	bl	80037e8 <HAL_GetTick>
 800799c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d002      	beq.n	80079b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80079ae:	2302      	movs	r3, #2
 80079b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079b2:	e148      	b.n	8007c46 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <HAL_SPI_Transmit+0x52>
 80079ba:	88fb      	ldrh	r3, [r7, #6]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079c4:	e13f      	b.n	8007c46 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2203      	movs	r2, #3
 80079ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	88fa      	ldrh	r2, [r7, #6]
 80079de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	88fa      	ldrh	r2, [r7, #6]
 80079e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a10:	d10f      	bne.n	8007a32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3c:	2b40      	cmp	r3, #64	@ 0x40
 8007a3e:	d007      	beq.n	8007a50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a58:	d94f      	bls.n	8007afa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <HAL_SPI_Transmit+0xfa>
 8007a62:	8afb      	ldrh	r3, [r7, #22]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d142      	bne.n	8007aee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6c:	881a      	ldrh	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a78:	1c9a      	adds	r2, r3, #2
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a8c:	e02f      	b.n	8007aee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d112      	bne.n	8007ac2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ac0:	e015      	b.n	8007aee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ac2:	f7fb fe91 	bl	80037e8 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d803      	bhi.n	8007ada <HAL_SPI_Transmit+0x16c>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ad8:	d102      	bne.n	8007ae0 <HAL_SPI_Transmit+0x172>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007aec:	e0ab      	b.n	8007c46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1ca      	bne.n	8007a8e <HAL_SPI_Transmit+0x120>
 8007af8:	e080      	b.n	8007bfc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_SPI_Transmit+0x19a>
 8007b02:	8afb      	ldrh	r3, [r7, #22]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d174      	bne.n	8007bf2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d912      	bls.n	8007b38 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b16:	881a      	ldrh	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b22:	1c9a      	adds	r2, r3, #2
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b02      	subs	r3, #2
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b36:	e05c      	b.n	8007bf2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b5e:	e048      	b.n	8007bf2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d12b      	bne.n	8007bc6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d912      	bls.n	8007b9e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7c:	881a      	ldrh	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b02      	subs	r3, #2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b9c:	e029      	b.n	8007bf2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bc4:	e015      	b.n	8007bf2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bc6:	f7fb fe0f 	bl	80037e8 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d803      	bhi.n	8007bde <HAL_SPI_Transmit+0x270>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bdc:	d102      	bne.n	8007be4 <HAL_SPI_Transmit+0x276>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007bf0:	e029      	b.n	8007c46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1b1      	bne.n	8007b60 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fb69 	bl	80082d8 <SPI_EndRxTxTransaction>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	77fb      	strb	r3, [r7, #31]
 8007c3c:	e003      	b.n	8007c46 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3720      	adds	r7, #32
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	@ 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c66:	2301      	movs	r3, #1
 8007c68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_SPI_TransmitReceive+0x26>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e20a      	b.n	8008094 <HAL_SPI_TransmitReceive+0x43c>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c86:	f7fb fdaf 	bl	80037e8 <HAL_GetTick>
 8007c8a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c9a:	887b      	ldrh	r3, [r7, #2]
 8007c9c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c9e:	887b      	ldrh	r3, [r7, #2]
 8007ca0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ca2:	7efb      	ldrb	r3, [r7, #27]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_SPI_TransmitReceive+0x6e>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cae:	d106      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x66>
 8007cb8:	7efb      	ldrb	r3, [r7, #27]
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d003      	beq.n	8007cc6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007cc4:	e1e0      	b.n	8008088 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_SPI_TransmitReceive+0x80>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_SPI_TransmitReceive+0x80>
 8007cd2:	887b      	ldrh	r3, [r7, #2]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d103      	bne.n	8007ce0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007cde:	e1d3      	b.n	8008088 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d003      	beq.n	8007cf4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2205      	movs	r2, #5
 8007cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	887a      	ldrh	r2, [r7, #2]
 8007d04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	887a      	ldrh	r2, [r7, #2]
 8007d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	887a      	ldrh	r2, [r7, #2]
 8007d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	887a      	ldrh	r2, [r7, #2]
 8007d20:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d36:	d802      	bhi.n	8007d3e <HAL_SPI_TransmitReceive+0xe6>
 8007d38:	8a3b      	ldrh	r3, [r7, #16]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d908      	bls.n	8007d50 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d4c:	605a      	str	r2, [r3, #4]
 8007d4e:	e007      	b.n	8007d60 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6a:	2b40      	cmp	r3, #64	@ 0x40
 8007d6c:	d007      	beq.n	8007d7e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d86:	f240 8081 	bls.w	8007e8c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_SPI_TransmitReceive+0x140>
 8007d92:	8a7b      	ldrh	r3, [r7, #18]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d16d      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9c:	881a      	ldrh	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da8:	1c9a      	adds	r2, r3, #2
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dbc:	e05a      	b.n	8007e74 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d11b      	bne.n	8007e04 <HAL_SPI_TransmitReceive+0x1ac>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d016      	beq.n	8007e04 <HAL_SPI_TransmitReceive+0x1ac>
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d113      	bne.n	8007e04 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	881a      	ldrh	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dec:	1c9a      	adds	r2, r3, #2
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d11c      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x1f4>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d016      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e28:	b292      	uxth	r2, r2
 8007e2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e30:	1c9a      	adds	r2, r3, #2
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e4c:	f7fb fccc 	bl	80037e8 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d80b      	bhi.n	8007e74 <HAL_SPI_TransmitReceive+0x21c>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e62:	d007      	beq.n	8007e74 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007e72:	e109      	b.n	8008088 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d19f      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x166>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d199      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x166>
 8007e8a:	e0e3      	b.n	8008054 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_SPI_TransmitReceive+0x244>
 8007e94:	8a7b      	ldrh	r3, [r7, #18]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	f040 80cf 	bne.w	800803a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d912      	bls.n	8007ecc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eaa:	881a      	ldrh	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb6:	1c9a      	adds	r2, r3, #2
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b02      	subs	r3, #2
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007eca:	e0b6      	b.n	800803a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef2:	e0a2      	b.n	800803a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d134      	bne.n	8007f6c <HAL_SPI_TransmitReceive+0x314>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d02f      	beq.n	8007f6c <HAL_SPI_TransmitReceive+0x314>
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d12c      	bne.n	8007f6c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d912      	bls.n	8007f42 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f20:	881a      	ldrh	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2c:	1c9a      	adds	r2, r3, #2
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b02      	subs	r3, #2
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f40:	e012      	b.n	8007f68 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	330c      	adds	r3, #12
 8007f4c:	7812      	ldrb	r2, [r2, #0]
 8007f4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d148      	bne.n	800800c <HAL_SPI_TransmitReceive+0x3b4>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d042      	beq.n	800800c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d923      	bls.n	8007fda <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	b292      	uxth	r2, r2
 8007f9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	1c9a      	adds	r2, r3, #2
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3b02      	subs	r3, #2
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d81f      	bhi.n	8008008 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fd6:	605a      	str	r2, [r3, #4]
 8007fd8:	e016      	b.n	8008008 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f103 020c 	add.w	r2, r3, #12
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe6:	7812      	ldrb	r2, [r2, #0]
 8007fe8:	b2d2      	uxtb	r2, r2
 8007fea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008008:	2301      	movs	r3, #1
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800800c:	f7fb fbec 	bl	80037e8 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008018:	429a      	cmp	r2, r3
 800801a:	d803      	bhi.n	8008024 <HAL_SPI_TransmitReceive+0x3cc>
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008022:	d102      	bne.n	800802a <HAL_SPI_TransmitReceive+0x3d2>
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	2b00      	cmp	r3, #0
 8008028:	d107      	bne.n	800803a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008038:	e026      	b.n	8008088 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	f47f af57 	bne.w	8007ef4 <HAL_SPI_TransmitReceive+0x29c>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	f47f af50 	bne.w	8007ef4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f93d 	bl	80082d8 <SPI_EndRxTxTransaction>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2220      	movs	r2, #32
 800806e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800807e:	e003      	b.n	8008088 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008090:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008094:	4618      	mov	r0, r3
 8008096:	3728      	adds	r7, #40	@ 0x28
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	4613      	mov	r3, r2
 80080aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080ac:	f7fb fb9c 	bl	80037e8 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	4413      	add	r3, r2
 80080ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080bc:	f7fb fb94 	bl	80037e8 <HAL_GetTick>
 80080c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080c2:	4b39      	ldr	r3, [pc, #228]	@ (80081a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	015b      	lsls	r3, r3, #5
 80080c8:	0d1b      	lsrs	r3, r3, #20
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	fb02 f303 	mul.w	r3, r2, r3
 80080d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080d2:	e054      	b.n	800817e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080da:	d050      	beq.n	800817e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080dc:	f7fb fb84 	bl	80037e8 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d902      	bls.n	80080f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d13d      	bne.n	800816e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008100:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800810a:	d111      	bne.n	8008130 <SPI_WaitFlagStateUntilTimeout+0x94>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008114:	d004      	beq.n	8008120 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800811e:	d107      	bne.n	8008130 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800812e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008138:	d10f      	bne.n	800815a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e017      	b.n	800819e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3b01      	subs	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4013      	ands	r3, r2
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	429a      	cmp	r2, r3
 800818c:	bf0c      	ite	eq
 800818e:	2301      	moveq	r3, #1
 8008190:	2300      	movne	r3, #0
 8008192:	b2db      	uxtb	r3, r3
 8008194:	461a      	mov	r2, r3
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	429a      	cmp	r2, r3
 800819a:	d19b      	bne.n	80080d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000000 	.word	0x20000000

080081ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	@ 0x28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081be:	f7fb fb13 	bl	80037e8 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	4413      	add	r3, r2
 80081cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80081ce:	f7fb fb0b 	bl	80037e8 <HAL_GetTick>
 80081d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	330c      	adds	r3, #12
 80081da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081dc:	4b3d      	ldr	r3, [pc, #244]	@ (80082d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	00da      	lsls	r2, r3, #3
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	0d1b      	lsrs	r3, r3, #20
 80081ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081ee:	fb02 f303 	mul.w	r3, r2, r3
 80081f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80081f4:	e060      	b.n	80082b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081fc:	d107      	bne.n	800820e <SPI_WaitFifoStateUntilTimeout+0x62>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800820c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008214:	d050      	beq.n	80082b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008216:	f7fb fae7 	bl	80037e8 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008222:	429a      	cmp	r2, r3
 8008224:	d902      	bls.n	800822c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	2b00      	cmp	r3, #0
 800822a:	d13d      	bne.n	80082a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800823a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008244:	d111      	bne.n	800826a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800824e:	d004      	beq.n	800825a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008258:	d107      	bne.n	800826a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008268:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008272:	d10f      	bne.n	8008294 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008292:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e010      	b.n	80082ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4013      	ands	r3, r2
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d196      	bne.n	80081f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3728      	adds	r7, #40	@ 0x28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000000 	.word	0x20000000

080082d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff ff5b 	bl	80081ac <SPI_WaitFifoStateUntilTimeout>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008300:	f043 0220 	orr.w	r2, r3, #32
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e027      	b.n	800835c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	2180      	movs	r1, #128	@ 0x80
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff fec0 	bl	800809c <SPI_WaitFlagStateUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e014      	b.n	800835c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff ff34 	bl	80081ac <SPI_WaitFifoStateUntilTimeout>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800834e:	f043 0220 	orr.w	r2, r3, #32
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e000      	b.n	800835c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e049      	b.n	800840a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f841 	bl	8008412 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
 80083a0:	4619      	mov	r1, r3
 80083a2:	4610      	mov	r0, r2
 80083a4:	f000 fa30 	bl	8008808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
	...

08008428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b01      	cmp	r3, #1
 800843a:	d001      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e054      	b.n	80084ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a26      	ldr	r2, [pc, #152]	@ (80084f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d022      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x80>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800846a:	d01d      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x80>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a22      	ldr	r2, [pc, #136]	@ (80084fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d018      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x80>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a21      	ldr	r2, [pc, #132]	@ (8008500 <HAL_TIM_Base_Start_IT+0xd8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d013      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x80>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1f      	ldr	r2, [pc, #124]	@ (8008504 <HAL_TIM_Base_Start_IT+0xdc>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00e      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x80>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1e      	ldr	r2, [pc, #120]	@ (8008508 <HAL_TIM_Base_Start_IT+0xe0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d009      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x80>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a1c      	ldr	r2, [pc, #112]	@ (800850c <HAL_TIM_Base_Start_IT+0xe4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x80>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008510 <HAL_TIM_Base_Start_IT+0xe8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d115      	bne.n	80084d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	4b19      	ldr	r3, [pc, #100]	@ (8008514 <HAL_TIM_Base_Start_IT+0xec>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b06      	cmp	r3, #6
 80084b8:	d015      	beq.n	80084e6 <HAL_TIM_Base_Start_IT+0xbe>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084c0:	d011      	beq.n	80084e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0201 	orr.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d2:	e008      	b.n	80084e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0201 	orr.w	r2, r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e000      	b.n	80084e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	40012c00 	.word	0x40012c00
 80084fc:	40000400 	.word	0x40000400
 8008500:	40000800 	.word	0x40000800
 8008504:	40000c00 	.word	0x40000c00
 8008508:	40013400 	.word	0x40013400
 800850c:	40014000 	.word	0x40014000
 8008510:	40015000 	.word	0x40015000
 8008514:	00010007 	.word	0x00010007

08008518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d020      	beq.n	800857c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01b      	beq.n	800857c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f06f 0202 	mvn.w	r2, #2
 800854c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f931 	bl	80087ca <HAL_TIM_IC_CaptureCallback>
 8008568:	e005      	b.n	8008576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f923 	bl	80087b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f934 	bl	80087de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d020      	beq.n	80085c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01b      	beq.n	80085c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0204 	mvn.w	r2, #4
 8008598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f90b 	bl	80087ca <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8fd 	bl	80087b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f90e 	bl	80087de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d020      	beq.n	8008614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01b      	beq.n	8008614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0208 	mvn.w	r2, #8
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2204      	movs	r2, #4
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f8e5 	bl	80087ca <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f8d7 	bl	80087b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f8e8 	bl	80087de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b00      	cmp	r3, #0
 800861c:	d020      	beq.n	8008660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0210 	mvn.w	r2, #16
 8008630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2208      	movs	r2, #8
 8008636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f8bf 	bl	80087ca <HAL_TIM_IC_CaptureCallback>
 800864c:	e005      	b.n	800865a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8b1 	bl	80087b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8c2 	bl	80087de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d007      	beq.n	8008684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0201 	mvn.w	r2, #1
 800867c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fa fd6e 	bl	8003160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868a:	2b00      	cmp	r3, #0
 800868c:	d104      	bne.n	8008698 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00c      	beq.n	80086b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f969 	bl	8008984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00c      	beq.n	80086d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f961 	bl	8008998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00c      	beq.n	80086fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f87c 	bl	80087f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00c      	beq.n	800871e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f06f 0220 	mvn.w	r2, #32
 8008716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f929 	bl	8008970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00c      	beq.n	8008742 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800873a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f935 	bl	80089ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00c      	beq.n	8008766 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800875e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f92d 	bl	80089c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00c      	beq.n	800878a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d007      	beq.n	800878a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f925 	bl	80089d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00c      	beq.n	80087ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80087a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f91d 	bl	80089e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a4c      	ldr	r2, [pc, #304]	@ (800894c <TIM_Base_SetConfig+0x144>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d017      	beq.n	8008850 <TIM_Base_SetConfig+0x48>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008826:	d013      	beq.n	8008850 <TIM_Base_SetConfig+0x48>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a49      	ldr	r2, [pc, #292]	@ (8008950 <TIM_Base_SetConfig+0x148>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00f      	beq.n	8008850 <TIM_Base_SetConfig+0x48>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a48      	ldr	r2, [pc, #288]	@ (8008954 <TIM_Base_SetConfig+0x14c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00b      	beq.n	8008850 <TIM_Base_SetConfig+0x48>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a47      	ldr	r2, [pc, #284]	@ (8008958 <TIM_Base_SetConfig+0x150>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0x48>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a46      	ldr	r2, [pc, #280]	@ (800895c <TIM_Base_SetConfig+0x154>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0x48>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a45      	ldr	r2, [pc, #276]	@ (8008960 <TIM_Base_SetConfig+0x158>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d108      	bne.n	8008862 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a39      	ldr	r2, [pc, #228]	@ (800894c <TIM_Base_SetConfig+0x144>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d023      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008870:	d01f      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a36      	ldr	r2, [pc, #216]	@ (8008950 <TIM_Base_SetConfig+0x148>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01b      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a35      	ldr	r2, [pc, #212]	@ (8008954 <TIM_Base_SetConfig+0x14c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d017      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a34      	ldr	r2, [pc, #208]	@ (8008958 <TIM_Base_SetConfig+0x150>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d013      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a33      	ldr	r2, [pc, #204]	@ (800895c <TIM_Base_SetConfig+0x154>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00f      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a33      	ldr	r2, [pc, #204]	@ (8008964 <TIM_Base_SetConfig+0x15c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a32      	ldr	r2, [pc, #200]	@ (8008968 <TIM_Base_SetConfig+0x160>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d007      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a31      	ldr	r2, [pc, #196]	@ (800896c <TIM_Base_SetConfig+0x164>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_Base_SetConfig+0xaa>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008960 <TIM_Base_SetConfig+0x158>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d108      	bne.n	80088c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a18      	ldr	r2, [pc, #96]	@ (800894c <TIM_Base_SetConfig+0x144>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d013      	beq.n	8008918 <TIM_Base_SetConfig+0x110>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1a      	ldr	r2, [pc, #104]	@ (800895c <TIM_Base_SetConfig+0x154>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00f      	beq.n	8008918 <TIM_Base_SetConfig+0x110>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008964 <TIM_Base_SetConfig+0x15c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00b      	beq.n	8008918 <TIM_Base_SetConfig+0x110>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a19      	ldr	r2, [pc, #100]	@ (8008968 <TIM_Base_SetConfig+0x160>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d007      	beq.n	8008918 <TIM_Base_SetConfig+0x110>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a18      	ldr	r2, [pc, #96]	@ (800896c <TIM_Base_SetConfig+0x164>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_Base_SetConfig+0x110>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a13      	ldr	r2, [pc, #76]	@ (8008960 <TIM_Base_SetConfig+0x158>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d103      	bne.n	8008920 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b01      	cmp	r3, #1
 8008930:	d105      	bne.n	800893e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	611a      	str	r2, [r3, #16]
  }
}
 800893e:	bf00      	nop
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40015000 	.word	0x40015000
 8008964:	40014000 	.word	0x40014000
 8008968:	40014400 	.word	0x40014400
 800896c:	40014800 	.word	0x40014800

08008970 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e042      	b.n	8008a94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7fa fe35 	bl	8003690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2224      	movs	r2, #36	@ 0x24
 8008a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0201 	bic.w	r2, r2, #1
 8008a3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fb24 	bl	8009094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f825 	bl	8008a9c <UART_SetConfig>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e01b      	b.n	8008a94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0201 	orr.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fba3 	bl	80091d8 <UART_CheckIdleState>
 8008a92:	4603      	mov	r3, r0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa0:	b08c      	sub	sp, #48	@ 0x30
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4baa      	ldr	r3, [pc, #680]	@ (8008d74 <UART_SetConfig+0x2d8>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a9f      	ldr	r2, [pc, #636]	@ (8008d78 <UART_SetConfig+0x2dc>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b04:	4313      	orrs	r3, r2
 8008b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008b12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	f023 010f 	bic.w	r1, r3, #15
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a90      	ldr	r2, [pc, #576]	@ (8008d7c <UART_SetConfig+0x2e0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d125      	bne.n	8008b8c <UART_SetConfig+0xf0>
 8008b40:	4b8f      	ldr	r3, [pc, #572]	@ (8008d80 <UART_SetConfig+0x2e4>)
 8008b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d81a      	bhi.n	8008b84 <UART_SetConfig+0xe8>
 8008b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b54 <UART_SetConfig+0xb8>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b65 	.word	0x08008b65
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	08008b6d 	.word	0x08008b6d
 8008b60:	08008b7d 	.word	0x08008b7d
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6a:	e116      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b72:	e112      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b7a:	e10e      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b82:	e10a      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b8a:	e106      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a7c      	ldr	r2, [pc, #496]	@ (8008d84 <UART_SetConfig+0x2e8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d138      	bne.n	8008c08 <UART_SetConfig+0x16c>
 8008b96:	4b7a      	ldr	r3, [pc, #488]	@ (8008d80 <UART_SetConfig+0x2e4>)
 8008b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b9c:	f003 030c 	and.w	r3, r3, #12
 8008ba0:	2b0c      	cmp	r3, #12
 8008ba2:	d82d      	bhi.n	8008c00 <UART_SetConfig+0x164>
 8008ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bac <UART_SetConfig+0x110>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008be1 	.word	0x08008be1
 8008bb0:	08008c01 	.word	0x08008c01
 8008bb4:	08008c01 	.word	0x08008c01
 8008bb8:	08008c01 	.word	0x08008c01
 8008bbc:	08008bf1 	.word	0x08008bf1
 8008bc0:	08008c01 	.word	0x08008c01
 8008bc4:	08008c01 	.word	0x08008c01
 8008bc8:	08008c01 	.word	0x08008c01
 8008bcc:	08008be9 	.word	0x08008be9
 8008bd0:	08008c01 	.word	0x08008c01
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	08008c01 	.word	0x08008c01
 8008bdc:	08008bf9 	.word	0x08008bf9
 8008be0:	2300      	movs	r3, #0
 8008be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008be6:	e0d8      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008be8:	2302      	movs	r3, #2
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bee:	e0d4      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bf6:	e0d0      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008bf8:	2308      	movs	r3, #8
 8008bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bfe:	e0cc      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c00:	2310      	movs	r3, #16
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c06:	e0c8      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a5e      	ldr	r2, [pc, #376]	@ (8008d88 <UART_SetConfig+0x2ec>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d125      	bne.n	8008c5e <UART_SetConfig+0x1c2>
 8008c12:	4b5b      	ldr	r3, [pc, #364]	@ (8008d80 <UART_SetConfig+0x2e4>)
 8008c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c1c:	2b30      	cmp	r3, #48	@ 0x30
 8008c1e:	d016      	beq.n	8008c4e <UART_SetConfig+0x1b2>
 8008c20:	2b30      	cmp	r3, #48	@ 0x30
 8008c22:	d818      	bhi.n	8008c56 <UART_SetConfig+0x1ba>
 8008c24:	2b20      	cmp	r3, #32
 8008c26:	d00a      	beq.n	8008c3e <UART_SetConfig+0x1a2>
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d814      	bhi.n	8008c56 <UART_SetConfig+0x1ba>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <UART_SetConfig+0x19a>
 8008c30:	2b10      	cmp	r3, #16
 8008c32:	d008      	beq.n	8008c46 <UART_SetConfig+0x1aa>
 8008c34:	e00f      	b.n	8008c56 <UART_SetConfig+0x1ba>
 8008c36:	2300      	movs	r3, #0
 8008c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c3c:	e0ad      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c44:	e0a9      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c46:	2304      	movs	r3, #4
 8008c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c4c:	e0a5      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c4e:	2308      	movs	r3, #8
 8008c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c54:	e0a1      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c56:	2310      	movs	r3, #16
 8008c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c5c:	e09d      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a4a      	ldr	r2, [pc, #296]	@ (8008d8c <UART_SetConfig+0x2f0>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d125      	bne.n	8008cb4 <UART_SetConfig+0x218>
 8008c68:	4b45      	ldr	r3, [pc, #276]	@ (8008d80 <UART_SetConfig+0x2e4>)
 8008c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c74:	d016      	beq.n	8008ca4 <UART_SetConfig+0x208>
 8008c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c78:	d818      	bhi.n	8008cac <UART_SetConfig+0x210>
 8008c7a:	2b80      	cmp	r3, #128	@ 0x80
 8008c7c:	d00a      	beq.n	8008c94 <UART_SetConfig+0x1f8>
 8008c7e:	2b80      	cmp	r3, #128	@ 0x80
 8008c80:	d814      	bhi.n	8008cac <UART_SetConfig+0x210>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <UART_SetConfig+0x1f0>
 8008c86:	2b40      	cmp	r3, #64	@ 0x40
 8008c88:	d008      	beq.n	8008c9c <UART_SetConfig+0x200>
 8008c8a:	e00f      	b.n	8008cac <UART_SetConfig+0x210>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c92:	e082      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c94:	2302      	movs	r3, #2
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c9a:	e07e      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ca2:	e07a      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008caa:	e076      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008cac:	2310      	movs	r3, #16
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb2:	e072      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a35      	ldr	r2, [pc, #212]	@ (8008d90 <UART_SetConfig+0x2f4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d12a      	bne.n	8008d14 <UART_SetConfig+0x278>
 8008cbe:	4b30      	ldr	r3, [pc, #192]	@ (8008d80 <UART_SetConfig+0x2e4>)
 8008cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ccc:	d01a      	beq.n	8008d04 <UART_SetConfig+0x268>
 8008cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cd2:	d81b      	bhi.n	8008d0c <UART_SetConfig+0x270>
 8008cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cd8:	d00c      	beq.n	8008cf4 <UART_SetConfig+0x258>
 8008cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cde:	d815      	bhi.n	8008d0c <UART_SetConfig+0x270>
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <UART_SetConfig+0x250>
 8008ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce8:	d008      	beq.n	8008cfc <UART_SetConfig+0x260>
 8008cea:	e00f      	b.n	8008d0c <UART_SetConfig+0x270>
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf2:	e052      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cfa:	e04e      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d02:	e04a      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d04:	2308      	movs	r3, #8
 8008d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d0a:	e046      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d12:	e042      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <UART_SetConfig+0x2dc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d13a      	bne.n	8008d94 <UART_SetConfig+0x2f8>
 8008d1e:	4b18      	ldr	r3, [pc, #96]	@ (8008d80 <UART_SetConfig+0x2e4>)
 8008d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d2c:	d01a      	beq.n	8008d64 <UART_SetConfig+0x2c8>
 8008d2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d32:	d81b      	bhi.n	8008d6c <UART_SetConfig+0x2d0>
 8008d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d38:	d00c      	beq.n	8008d54 <UART_SetConfig+0x2b8>
 8008d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d3e:	d815      	bhi.n	8008d6c <UART_SetConfig+0x2d0>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <UART_SetConfig+0x2b0>
 8008d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d48:	d008      	beq.n	8008d5c <UART_SetConfig+0x2c0>
 8008d4a:	e00f      	b.n	8008d6c <UART_SetConfig+0x2d0>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d52:	e022      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d54:	2302      	movs	r3, #2
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d5a:	e01e      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d5c:	2304      	movs	r3, #4
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d62:	e01a      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d64:	2308      	movs	r3, #8
 8008d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d6a:	e016      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d72:	e012      	b.n	8008d9a <UART_SetConfig+0x2fe>
 8008d74:	cfff69f3 	.word	0xcfff69f3
 8008d78:	40008000 	.word	0x40008000
 8008d7c:	40013800 	.word	0x40013800
 8008d80:	40021000 	.word	0x40021000
 8008d84:	40004400 	.word	0x40004400
 8008d88:	40004800 	.word	0x40004800
 8008d8c:	40004c00 	.word	0x40004c00
 8008d90:	40005000 	.word	0x40005000
 8008d94:	2310      	movs	r3, #16
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4aae      	ldr	r2, [pc, #696]	@ (8009058 <UART_SetConfig+0x5bc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	f040 8097 	bne.w	8008ed4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008da6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008daa:	2b08      	cmp	r3, #8
 8008dac:	d823      	bhi.n	8008df6 <UART_SetConfig+0x35a>
 8008dae:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <UART_SetConfig+0x318>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008dd9 	.word	0x08008dd9
 8008db8:	08008df7 	.word	0x08008df7
 8008dbc:	08008de1 	.word	0x08008de1
 8008dc0:	08008df7 	.word	0x08008df7
 8008dc4:	08008de7 	.word	0x08008de7
 8008dc8:	08008df7 	.word	0x08008df7
 8008dcc:	08008df7 	.word	0x08008df7
 8008dd0:	08008df7 	.word	0x08008df7
 8008dd4:	08008def 	.word	0x08008def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd8:	f7fe fa2e 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 8008ddc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dde:	e010      	b.n	8008e02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008de0:	4b9e      	ldr	r3, [pc, #632]	@ (800905c <UART_SetConfig+0x5c0>)
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008de4:	e00d      	b.n	8008e02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008de6:	f7fe f9bb 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8008dea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dec:	e009      	b.n	8008e02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008df4:	e005      	b.n	8008e02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8130 	beq.w	800906a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0e:	4a94      	ldr	r2, [pc, #592]	@ (8009060 <UART_SetConfig+0x5c4>)
 8008e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e14:	461a      	mov	r2, r3
 8008e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	4413      	add	r3, r2
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d305      	bcc.n	8008e3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d903      	bls.n	8008e42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e40:	e113      	b.n	800906a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	2200      	movs	r2, #0
 8008e46:	60bb      	str	r3, [r7, #8]
 8008e48:	60fa      	str	r2, [r7, #12]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4e:	4a84      	ldr	r2, [pc, #528]	@ (8009060 <UART_SetConfig+0x5c4>)
 8008e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2200      	movs	r2, #0
 8008e58:	603b      	str	r3, [r7, #0]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e64:	f7f7 ff18 	bl	8000c98 <__aeabi_uldivmod>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	020b      	lsls	r3, r1, #8
 8008e7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e7e:	0202      	lsls	r2, r0, #8
 8008e80:	6979      	ldr	r1, [r7, #20]
 8008e82:	6849      	ldr	r1, [r1, #4]
 8008e84:	0849      	lsrs	r1, r1, #1
 8008e86:	2000      	movs	r0, #0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	eb12 0804 	adds.w	r8, r2, r4
 8008e90:	eb43 0905 	adc.w	r9, r3, r5
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	469a      	mov	sl, r3
 8008e9c:	4693      	mov	fp, r2
 8008e9e:	4652      	mov	r2, sl
 8008ea0:	465b      	mov	r3, fp
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 fef7 	bl	8000c98 <__aeabi_uldivmod>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4613      	mov	r3, r2
 8008eb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eb8:	d308      	bcc.n	8008ecc <UART_SetConfig+0x430>
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ec0:	d204      	bcs.n	8008ecc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6a3a      	ldr	r2, [r7, #32]
 8008ec8:	60da      	str	r2, [r3, #12]
 8008eca:	e0ce      	b.n	800906a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ed2:	e0ca      	b.n	800906a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008edc:	d166      	bne.n	8008fac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008ede:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ee2:	2b08      	cmp	r3, #8
 8008ee4:	d827      	bhi.n	8008f36 <UART_SetConfig+0x49a>
 8008ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <UART_SetConfig+0x450>)
 8008ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eec:	08008f11 	.word	0x08008f11
 8008ef0:	08008f19 	.word	0x08008f19
 8008ef4:	08008f21 	.word	0x08008f21
 8008ef8:	08008f37 	.word	0x08008f37
 8008efc:	08008f27 	.word	0x08008f27
 8008f00:	08008f37 	.word	0x08008f37
 8008f04:	08008f37 	.word	0x08008f37
 8008f08:	08008f37 	.word	0x08008f37
 8008f0c:	08008f2f 	.word	0x08008f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f10:	f7fe f992 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 8008f14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f16:	e014      	b.n	8008f42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f18:	f7fe f9a4 	bl	8007264 <HAL_RCC_GetPCLK2Freq>
 8008f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f1e:	e010      	b.n	8008f42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f20:	4b4e      	ldr	r3, [pc, #312]	@ (800905c <UART_SetConfig+0x5c0>)
 8008f22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f24:	e00d      	b.n	8008f42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f26:	f7fe f91b 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8008f2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f2c:	e009      	b.n	8008f42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f34:	e005      	b.n	8008f42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8090 	beq.w	800906a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4e:	4a44      	ldr	r2, [pc, #272]	@ (8009060 <UART_SetConfig+0x5c4>)
 8008f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f5c:	005a      	lsls	r2, r3, #1
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	085b      	lsrs	r3, r3, #1
 8008f64:	441a      	add	r2, r3
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	2b0f      	cmp	r3, #15
 8008f74:	d916      	bls.n	8008fa4 <UART_SetConfig+0x508>
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f7c:	d212      	bcs.n	8008fa4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f023 030f 	bic.w	r3, r3, #15
 8008f86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	8bfb      	ldrh	r3, [r7, #30]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	8bfa      	ldrh	r2, [r7, #30]
 8008fa0:	60da      	str	r2, [r3, #12]
 8008fa2:	e062      	b.n	800906a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008faa:	e05e      	b.n	800906a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d828      	bhi.n	8009006 <UART_SetConfig+0x56a>
 8008fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fbc <UART_SetConfig+0x520>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fe1 	.word	0x08008fe1
 8008fc0:	08008fe9 	.word	0x08008fe9
 8008fc4:	08008ff1 	.word	0x08008ff1
 8008fc8:	08009007 	.word	0x08009007
 8008fcc:	08008ff7 	.word	0x08008ff7
 8008fd0:	08009007 	.word	0x08009007
 8008fd4:	08009007 	.word	0x08009007
 8008fd8:	08009007 	.word	0x08009007
 8008fdc:	08008fff 	.word	0x08008fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe0:	f7fe f92a 	bl	8007238 <HAL_RCC_GetPCLK1Freq>
 8008fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fe6:	e014      	b.n	8009012 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fe8:	f7fe f93c 	bl	8007264 <HAL_RCC_GetPCLK2Freq>
 8008fec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fee:	e010      	b.n	8009012 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800905c <UART_SetConfig+0x5c0>)
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ff4:	e00d      	b.n	8009012 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ff6:	f7fe f8b3 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 8008ffa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ffc:	e009      	b.n	8009012 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009004:	e005      	b.n	8009012 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009010:	bf00      	nop
    }

    if (pclk != 0U)
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d028      	beq.n	800906a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	4a10      	ldr	r2, [pc, #64]	@ (8009060 <UART_SetConfig+0x5c4>)
 800901e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009022:	461a      	mov	r2, r3
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	fbb3 f2f2 	udiv	r2, r3, r2
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	085b      	lsrs	r3, r3, #1
 8009030:	441a      	add	r2, r3
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	fbb2 f3f3 	udiv	r3, r2, r3
 800903a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	2b0f      	cmp	r3, #15
 8009040:	d910      	bls.n	8009064 <UART_SetConfig+0x5c8>
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009048:	d20c      	bcs.n	8009064 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	b29a      	uxth	r2, r3
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	60da      	str	r2, [r3, #12]
 8009054:	e009      	b.n	800906a <UART_SetConfig+0x5ce>
 8009056:	bf00      	nop
 8009058:	40008000 	.word	0x40008000
 800905c:	00f42400 	.word	0x00f42400
 8009060:	08015a84 	.word	0x08015a84
      }
      else
      {
        ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2201      	movs	r2, #1
 800906e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2201      	movs	r2, #1
 8009076:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2200      	movs	r2, #0
 800907e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2200      	movs	r2, #0
 8009084:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009086:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800908a:	4618      	mov	r0, r3
 800908c:	3730      	adds	r7, #48	@ 0x30
 800908e:	46bd      	mov	sp, r7
 8009090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00a      	beq.n	80090be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00a      	beq.n	8009102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009128:	f003 0310 	and.w	r3, r3, #16
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01a      	beq.n	80091aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009192:	d10a      	bne.n	80091aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]
  }
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b098      	sub	sp, #96	@ 0x60
 80091dc:	af02      	add	r7, sp, #8
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091e8:	f7fa fafe 	bl	80037e8 <HAL_GetTick>
 80091ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d12f      	bne.n	800925c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009204:	2200      	movs	r2, #0
 8009206:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f88e 	bl	800932c <UART_WaitOnFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d022      	beq.n	800925c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800922a:	653b      	str	r3, [r7, #80]	@ 0x50
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009234:	647b      	str	r3, [r7, #68]	@ 0x44
 8009236:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800923a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e063      	b.n	8009324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b04      	cmp	r3, #4
 8009268:	d149      	bne.n	80092fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800926a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009272:	2200      	movs	r2, #0
 8009274:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f857 	bl	800932c <UART_WaitOnFlagUntilTimeout>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d03c      	beq.n	80092fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	623b      	str	r3, [r7, #32]
   return(result);
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80092a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e6      	bne.n	8009284 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092d6:	61fa      	str	r2, [r7, #28]
 80092d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	69b9      	ldr	r1, [r7, #24]
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	617b      	str	r3, [r7, #20]
   return(result);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e5      	bne.n	80092b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e012      	b.n	8009324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3758      	adds	r7, #88	@ 0x58
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	4613      	mov	r3, r2
 800933a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800933c:	e04f      	b.n	80093de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009344:	d04b      	beq.n	80093de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009346:	f7fa fa4f 	bl	80037e8 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	429a      	cmp	r2, r3
 8009354:	d302      	bcc.n	800935c <UART_WaitOnFlagUntilTimeout+0x30>
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e04e      	b.n	80093fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	d037      	beq.n	80093de <UART_WaitOnFlagUntilTimeout+0xb2>
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b80      	cmp	r3, #128	@ 0x80
 8009372:	d034      	beq.n	80093de <UART_WaitOnFlagUntilTimeout+0xb2>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b40      	cmp	r3, #64	@ 0x40
 8009378:	d031      	beq.n	80093de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b08      	cmp	r3, #8
 8009386:	d110      	bne.n	80093aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2208      	movs	r2, #8
 800938e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f838 	bl	8009406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2208      	movs	r2, #8
 800939a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e029      	b.n	80093fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093b8:	d111      	bne.n	80093de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f81e 	bl	8009406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e00f      	b.n	80093fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69da      	ldr	r2, [r3, #28]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	4013      	ands	r3, r2
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	bf0c      	ite	eq
 80093ee:	2301      	moveq	r3, #1
 80093f0:	2300      	movne	r3, #0
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d0a0      	beq.n	800933e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009406:	b480      	push	{r7}
 8009408:	b095      	sub	sp, #84	@ 0x54
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800942c:	643b      	str	r3, [r7, #64]	@ 0x40
 800942e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009432:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e6      	bne.n	800940e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009456:	f023 0301 	bic.w	r3, r3, #1
 800945a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3308      	adds	r3, #8
 8009462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800946a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800946c:	e841 2300 	strex	r3, r2, [r1]
 8009470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e3      	bne.n	8009440 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800947c:	2b01      	cmp	r3, #1
 800947e:	d118      	bne.n	80094b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	60bb      	str	r3, [r7, #8]
   return(result);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f023 0310 	bic.w	r3, r3, #16
 8009494:	647b      	str	r3, [r7, #68]	@ 0x44
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800949e:	61bb      	str	r3, [r7, #24]
 80094a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	613b      	str	r3, [r7, #16]
   return(result);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e6      	bne.n	8009480 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094c6:	bf00      	nop
 80094c8:	3754      	adds	r7, #84	@ 0x54
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d101      	bne.n	80094e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80094e4:	2302      	movs	r3, #2
 80094e6:	e027      	b.n	8009538 <HAL_UARTEx_DisableFifoMode+0x66>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2224      	movs	r2, #36	@ 0x24
 80094f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0201 	bic.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009516:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2220      	movs	r2, #32
 800952a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009554:	2b01      	cmp	r3, #1
 8009556:	d101      	bne.n	800955c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009558:	2302      	movs	r3, #2
 800955a:	e02d      	b.n	80095b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2224      	movs	r2, #36	@ 0x24
 8009568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 0201 	bic.w	r2, r2, #1
 8009582:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f84f 	bl	800963c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e02d      	b.n	8009634 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2224      	movs	r2, #36	@ 0x24
 80095e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0201 	bic.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	430a      	orrs	r2, r1
 8009612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f811 	bl	800963c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009648:	2b00      	cmp	r3, #0
 800964a:	d108      	bne.n	800965e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800965c:	e031      	b.n	80096c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800965e:	2308      	movs	r3, #8
 8009660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009662:	2308      	movs	r3, #8
 8009664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	0e5b      	lsrs	r3, r3, #25
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	0f5b      	lsrs	r3, r3, #29
 800967e:	b2db      	uxtb	r3, r3
 8009680:	f003 0307 	and.w	r3, r3, #7
 8009684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	7b3a      	ldrb	r2, [r7, #12]
 800968a:	4911      	ldr	r1, [pc, #68]	@ (80096d0 <UARTEx_SetNbDataToProcess+0x94>)
 800968c:	5c8a      	ldrb	r2, [r1, r2]
 800968e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009692:	7b3a      	ldrb	r2, [r7, #12]
 8009694:	490f      	ldr	r1, [pc, #60]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x98>)
 8009696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009698:	fb93 f3f2 	sdiv	r3, r3, r2
 800969c:	b29a      	uxth	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
 80096a6:	7b7a      	ldrb	r2, [r7, #13]
 80096a8:	4909      	ldr	r1, [pc, #36]	@ (80096d0 <UARTEx_SetNbDataToProcess+0x94>)
 80096aa:	5c8a      	ldrb	r2, [r1, r2]
 80096ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096b0:	7b7a      	ldrb	r2, [r7, #13]
 80096b2:	4908      	ldr	r1, [pc, #32]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x98>)
 80096b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	08015a9c 	.word	0x08015a9c
 80096d4:	08015aa4 	.word	0x08015aa4

080096d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096e8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80096ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009706:	b480      	push	{r7}
 8009708:	b085      	sub	sp, #20
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800970e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009712:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	b29b      	uxth	r3, r3
 8009720:	43db      	mvns	r3, r3
 8009722:	b29b      	uxth	r3, r3
 8009724:	4013      	ands	r3, r2
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	1d3b      	adds	r3, r7, #4
 8009746:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009778:	b480      	push	{r7}
 800977a:	b09d      	sub	sp, #116	@ 0x74
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800979a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800979e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d81f      	bhi.n	80097ea <USB_ActivateEndpoint+0x72>
 80097aa:	a201      	add	r2, pc, #4	@ (adr r2, 80097b0 <USB_ActivateEndpoint+0x38>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097c1 	.word	0x080097c1
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097f3 	.word	0x080097f3
 80097bc:	080097cf 	.word	0x080097cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80097c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097cc:	e012      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80097ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097d2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80097d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097da:	e00b      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80097dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80097e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097e8:	e004      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80097f0:	e000      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>
      break;
 80097f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	441a      	add	r2, r3
 80097fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800980a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800980e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009812:	b29b      	uxth	r3, r3
 8009814:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	b21b      	sxth	r3, r3
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800982a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982e:	b21a      	sxth	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b21b      	sxth	r3, r3
 8009836:	4313      	orrs	r3, r2
 8009838:	b21b      	sxth	r3, r3
 800983a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	441a      	add	r2, r3
 8009848:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800984c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985c:	b29b      	uxth	r3, r3
 800985e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	7b1b      	ldrb	r3, [r3, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f040 8178 	bne.w	8009b5a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 8084 	beq.w	800997c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800987e:	b29b      	uxth	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	4413      	add	r3, r2
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	00da      	lsls	r2, r3, #3
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009896:	617b      	str	r3, [r7, #20]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	88db      	ldrh	r3, [r3, #6]
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	b29b      	uxth	r3, r3
 80098a0:	005b      	lsls	r3, r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	827b      	strh	r3, [r7, #18]
 80098b6:	8a7b      	ldrh	r3, [r7, #18]
 80098b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01b      	beq.n	80098f8 <USB_ActivateEndpoint+0x180>
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098d6:	823b      	strh	r3, [r7, #16]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	441a      	add	r2, r3
 80098e2:	8a3b      	ldrh	r3, [r7, #16]
 80098e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	78db      	ldrb	r3, [r3, #3]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d020      	beq.n	8009942 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009916:	81bb      	strh	r3, [r7, #12]
 8009918:	89bb      	ldrh	r3, [r7, #12]
 800991a:	f083 0320 	eor.w	r3, r3, #32
 800991e:	81bb      	strh	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	441a      	add	r2, r3
 800992a:	89bb      	ldrh	r3, [r7, #12]
 800992c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800993c:	b29b      	uxth	r3, r3
 800993e:	8013      	strh	r3, [r2, #0]
 8009940:	e2d5      	b.n	8009eee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009958:	81fb      	strh	r3, [r7, #14]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	89fb      	ldrh	r3, [r7, #14]
 8009966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800996a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800996e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009976:	b29b      	uxth	r3, r3
 8009978:	8013      	strh	r3, [r2, #0]
 800997a:	e2b8      	b.n	8009eee <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009986:	b29b      	uxth	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	4413      	add	r3, r2
 800998e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	00da      	lsls	r2, r3, #3
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	4413      	add	r3, r2
 800999a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800999e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	88db      	ldrh	r3, [r3, #6]
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	4413      	add	r3, r2
 80099c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	00da      	lsls	r2, r3, #3
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	4413      	add	r3, r2
 80099ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099de:	b29a      	uxth	r2, r3
 80099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80099ea:	d91d      	bls.n	8009a28 <USB_ActivateEndpoint+0x2b0>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f003 031f 	and.w	r3, r3, #31
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d102      	bne.n	8009a06 <USB_ActivateEndpoint+0x28e>
 8009a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a02:	3b01      	subs	r3, #1
 8009a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	029b      	lsls	r3, r3, #10
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4313      	orrs	r3, r2
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	801a      	strh	r2, [r3, #0]
 8009a26:	e026      	b.n	8009a76 <USB_ActivateEndpoint+0x2fe>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <USB_ActivateEndpoint+0x2ce>
 8009a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a42:	801a      	strh	r2, [r3, #0]
 8009a44:	e017      	b.n	8009a76 <USB_ActivateEndpoint+0x2fe>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	085b      	lsrs	r3, r3, #1
 8009a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <USB_ActivateEndpoint+0x2e8>
 8009a5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	029b      	lsls	r3, r3, #10
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009a84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d01b      	beq.n	8009ac6 <USB_ActivateEndpoint+0x34e>
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aa4:	843b      	strh	r3, [r7, #32]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	441a      	add	r2, r3
 8009ab0:	8c3b      	ldrh	r3, [r7, #32]
 8009ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d124      	bne.n	8009b18 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ae4:	83bb      	strh	r3, [r7, #28]
 8009ae6:	8bbb      	ldrh	r3, [r7, #28]
 8009ae8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009aec:	83bb      	strh	r3, [r7, #28]
 8009aee:	8bbb      	ldrh	r3, [r7, #28]
 8009af0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009af4:	83bb      	strh	r3, [r7, #28]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	441a      	add	r2, r3
 8009b00:	8bbb      	ldrh	r3, [r7, #28]
 8009b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	8013      	strh	r3, [r2, #0]
 8009b16:	e1ea      	b.n	8009eee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b2e:	83fb      	strh	r3, [r7, #30]
 8009b30:	8bfb      	ldrh	r3, [r7, #30]
 8009b32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b36:	83fb      	strh	r3, [r7, #30]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	8bfb      	ldrh	r3, [r7, #30]
 8009b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	8013      	strh	r3, [r2, #0]
 8009b58:	e1c9      	b.n	8009eee <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d11e      	bne.n	8009ba0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b78:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	441a      	add	r2, r3
 8009b86:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b92:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	8013      	strh	r3, [r2, #0]
 8009b9e:	e01d      	b.n	8009bdc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bb6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	441a      	add	r2, r3
 8009bc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bec:	4413      	add	r3, r2
 8009bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	00da      	lsls	r2, r3, #3
 8009bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	891b      	ldrh	r3, [r3, #8]
 8009c04:	085b      	lsrs	r3, r3, #1
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c0e:	801a      	strh	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c20:	4413      	add	r3, r2
 8009c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	00da      	lsls	r2, r3, #3
 8009c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	895b      	ldrh	r3, [r3, #10]
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c42:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f040 8093 	bne.w	8009d74 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009c5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d01b      	beq.n	8009ca2 <USB_ActivateEndpoint+0x52a>
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	441a      	add	r2, r3
 8009c8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009cb0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01b      	beq.n	8009cf2 <USB_ActivateEndpoint+0x57a>
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	441a      	add	r2, r3
 8009cdc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d08:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d10:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d12:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d18:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	441a      	add	r2, r3
 8009d24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d50:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	441a      	add	r2, r3
 8009d5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	8013      	strh	r3, [r2, #0]
 8009d72:	e0bc      	b.n	8009eee <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009d84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01d      	beq.n	8009dcc <USB_ActivateEndpoint+0x654>
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009da6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	441a      	add	r2, r3
 8009db4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009ddc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01d      	beq.n	8009e24 <USB_ActivateEndpoint+0x6ac>
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dfe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	441a      	add	r2, r3
 8009e0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	78db      	ldrb	r3, [r3, #3]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d024      	beq.n	8009e76 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e4a:	f083 0320 	eor.w	r3, r3, #32
 8009e4e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	441a      	add	r2, r3
 8009e5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	8013      	strh	r3, [r2, #0]
 8009e74:	e01d      	b.n	8009eb2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	441a      	add	r2, r3
 8009e9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	441a      	add	r2, r3
 8009ed6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009eee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3774      	adds	r7, #116	@ 0x74
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop

08009f00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b08d      	sub	sp, #52	@ 0x34
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	7b1b      	ldrb	r3, [r3, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f040 808e 	bne.w	800a030 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d044      	beq.n	8009fa6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	81bb      	strh	r3, [r7, #12]
 8009f2a:	89bb      	ldrh	r3, [r7, #12]
 8009f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01b      	beq.n	8009f6c <USB_DeactivateEndpoint+0x6c>
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f4a:	817b      	strh	r3, [r7, #10]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	441a      	add	r2, r3
 8009f56:	897b      	ldrh	r3, [r7, #10]
 8009f58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f82:	813b      	strh	r3, [r7, #8]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	441a      	add	r2, r3
 8009f8e:	893b      	ldrh	r3, [r7, #8]
 8009f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	8013      	strh	r3, [r2, #0]
 8009fa4:	e192      	b.n	800a2cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	827b      	strh	r3, [r7, #18]
 8009fb4:	8a7b      	ldrh	r3, [r7, #18]
 8009fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d01b      	beq.n	8009ff6 <USB_DeactivateEndpoint+0xf6>
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fd4:	823b      	strh	r3, [r7, #16]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	441a      	add	r2, r3
 8009fe0:	8a3b      	ldrh	r3, [r7, #16]
 8009fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	b29b      	uxth	r3, r3
 800a004:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a00c:	81fb      	strh	r3, [r7, #14]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	441a      	add	r2, r3
 800a018:	89fb      	ldrh	r3, [r7, #14]
 800a01a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a01e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	8013      	strh	r3, [r2, #0]
 800a02e:	e14d      	b.n	800a2cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	785b      	ldrb	r3, [r3, #1]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f040 80a5 	bne.w	800a184 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	843b      	strh	r3, [r7, #32]
 800a048:	8c3b      	ldrh	r3, [r7, #32]
 800a04a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d01b      	beq.n	800a08a <USB_DeactivateEndpoint+0x18a>
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a068:	83fb      	strh	r3, [r7, #30]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	441a      	add	r2, r3
 800a074:	8bfb      	ldrh	r3, [r7, #30]
 800a076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a07a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a07e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a086:	b29b      	uxth	r3, r3
 800a088:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	83bb      	strh	r3, [r7, #28]
 800a098:	8bbb      	ldrh	r3, [r7, #28]
 800a09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d01b      	beq.n	800a0da <USB_DeactivateEndpoint+0x1da>
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0b8:	837b      	strh	r3, [r7, #26]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	441a      	add	r2, r3
 800a0c4:	8b7b      	ldrh	r3, [r7, #26]
 800a0c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0f0:	833b      	strh	r3, [r7, #24]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	441a      	add	r2, r3
 800a0fc:	8b3b      	ldrh	r3, [r7, #24]
 800a0fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a10a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a10e:	b29b      	uxth	r3, r3
 800a110:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a128:	82fb      	strh	r3, [r7, #22]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	441a      	add	r2, r3
 800a134:	8afb      	ldrh	r3, [r7, #22]
 800a136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a13a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a13e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a146:	b29b      	uxth	r3, r3
 800a148:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	b29b      	uxth	r3, r3
 800a158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a15c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a160:	82bb      	strh	r3, [r7, #20]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	441a      	add	r2, r3
 800a16c:	8abb      	ldrh	r3, [r7, #20]
 800a16e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a17e:	b29b      	uxth	r3, r3
 800a180:	8013      	strh	r3, [r2, #0]
 800a182:	e0a3      	b.n	800a2cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a192:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01b      	beq.n	800a1d4 <USB_DeactivateEndpoint+0x2d4>
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	441a      	add	r2, r3
 800a1be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a1c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a1e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d01b      	beq.n	800a224 <USB_DeactivateEndpoint+0x324>
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a202:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	441a      	add	r2, r3
 800a20e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a21c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a220:	b29b      	uxth	r3, r3
 800a222:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	441a      	add	r2, r3
 800a246:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a24c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a250:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a258:	b29b      	uxth	r3, r3
 800a25a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a26e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a272:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	441a      	add	r2, r3
 800a27e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a28c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a290:	b29b      	uxth	r3, r3
 800a292:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	441a      	add	r2, r3
 800a2b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3734      	adds	r7, #52	@ 0x34
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b0c2      	sub	sp, #264	@ 0x108
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2e8:	6018      	str	r0, [r3, #0]
 800a2ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	785b      	ldrb	r3, [r3, #1]
 800a300:	2b01      	cmp	r3, #1
 800a302:	f040 86b7 	bne.w	800b074 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a30a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	699a      	ldr	r2, [r3, #24]
 800a312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d908      	bls.n	800a334 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a332:	e007      	b.n	800a344 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	7b1b      	ldrb	r3, [r3, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d13a      	bne.n	800a3ca <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6959      	ldr	r1, [r3, #20]
 800a360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	88da      	ldrh	r2, [r3, #6]
 800a36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a370:	b29b      	uxth	r3, r3
 800a372:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a376:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	f001 fc98 	bl	800bcb0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	613b      	str	r3, [r7, #16]
 800a38c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	461a      	mov	r2, r3
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	613b      	str	r3, [r7, #16]
 800a3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	00da      	lsls	r2, r3, #3
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	801a      	strh	r2, [r3, #0]
 800a3c6:	f000 be1f 	b.w	800b008 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	78db      	ldrb	r3, [r3, #3]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	f040 8462 	bne.w	800aca0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6a1a      	ldr	r2, [r3, #32]
 800a3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	f240 83df 	bls.w	800abb8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a41c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a420:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	441a      	add	r2, r3
 800a43e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a44a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a452:	b29b      	uxth	r3, r3
 800a454:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a45a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6a1a      	ldr	r2, [r3, #32]
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a466:	1ad2      	subs	r2, r2, r3
 800a468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a46c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	b29b      	uxth	r3, r3
 800a492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 81c7 	beq.w	800a82a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	785b      	ldrb	r3, [r3, #1]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d177      	bne.n	800a5a8 <USB_EPStartXfer+0x2ce>
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d8:	4413      	add	r3, r2
 800a4da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	00da      	lsls	r2, r3, #3
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	801a      	strh	r2, [r3, #0]
 800a504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a508:	2b3e      	cmp	r3, #62	@ 0x3e
 800a50a:	d921      	bls.n	800a550 <USB_EPStartXfer+0x276>
 800a50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a510:	095b      	lsrs	r3, r3, #5
 800a512:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a51a:	f003 031f 	and.w	r3, r3, #31
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d104      	bne.n	800a52c <USB_EPStartXfer+0x252>
 800a522:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a526:	3b01      	subs	r3, #1
 800a528:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	b29a      	uxth	r2, r3
 800a532:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a536:	b29b      	uxth	r3, r3
 800a538:	029b      	lsls	r3, r3, #10
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	4313      	orrs	r3, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a548:	b29a      	uxth	r2, r3
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	801a      	strh	r2, [r3, #0]
 800a54e:	e050      	b.n	800a5f2 <USB_EPStartXfer+0x318>
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10a      	bne.n	800a56e <USB_EPStartXfer+0x294>
 800a558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55a:	881b      	ldrh	r3, [r3, #0]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a566:	b29a      	uxth	r2, r3
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	801a      	strh	r2, [r3, #0]
 800a56c:	e041      	b.n	800a5f2 <USB_EPStartXfer+0x318>
 800a56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a572:	085b      	lsrs	r3, r3, #1
 800a574:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <USB_EPStartXfer+0x2b4>
 800a584:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a588:	3301      	adds	r3, #1
 800a58a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	b29a      	uxth	r2, r3
 800a594:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a598:	b29b      	uxth	r3, r3
 800a59a:	029b      	lsls	r3, r3, #10
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	e024      	b.n	800a5f2 <USB_EPStartXfer+0x318>
 800a5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d11c      	bne.n	800a5f2 <USB_EPStartXfer+0x318>
 800a5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	4413      	add	r3, r2
 800a5ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	00da      	lsls	r2, r3, #3
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	895b      	ldrh	r3, [r3, #10]
 800a5fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6959      	ldr	r1, [r3, #20]
 800a60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a612:	b29b      	uxth	r3, r3
 800a614:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a618:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a61c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a620:	6800      	ldr	r0, [r0, #0]
 800a622:	f001 fb45 	bl	800bcb0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a62a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	695a      	ldr	r2, [r3, #20]
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a636:	441a      	add	r2, r3
 800a638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6a1a      	ldr	r2, [r3, #32]
 800a650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d90f      	bls.n	800a680 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6a1a      	ldr	r2, [r3, #32]
 800a66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a670:	1ad2      	subs	r2, r2, r3
 800a672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	621a      	str	r2, [r3, #32]
 800a67e:	e00e      	b.n	800a69e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2200      	movs	r2, #0
 800a69c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	785b      	ldrb	r3, [r3, #1]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d177      	bne.n	800a79e <USB_EPStartXfer+0x4c4>
 800a6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	61bb      	str	r3, [r7, #24]
 800a6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	00da      	lsls	r2, r3, #3
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	801a      	strh	r2, [r3, #0]
 800a6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800a700:	d921      	bls.n	800a746 <USB_EPStartXfer+0x46c>
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a706:	095b      	lsrs	r3, r3, #5
 800a708:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a710:	f003 031f 	and.w	r3, r3, #31
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <USB_EPStartXfer+0x448>
 800a718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a71c:	3b01      	subs	r3, #1
 800a71e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	b29a      	uxth	r2, r3
 800a728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	029b      	lsls	r3, r3, #10
 800a730:	b29b      	uxth	r3, r3
 800a732:	4313      	orrs	r3, r2
 800a734:	b29b      	uxth	r3, r3
 800a736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a73a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a73e:	b29a      	uxth	r2, r3
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	801a      	strh	r2, [r3, #0]
 800a744:	e056      	b.n	800a7f4 <USB_EPStartXfer+0x51a>
 800a746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10a      	bne.n	800a764 <USB_EPStartXfer+0x48a>
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	801a      	strh	r2, [r3, #0]
 800a762:	e047      	b.n	800a7f4 <USB_EPStartXfer+0x51a>
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a768:	085b      	lsrs	r3, r3, #1
 800a76a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <USB_EPStartXfer+0x4aa>
 800a77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a77e:	3301      	adds	r3, #1
 800a780:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29a      	uxth	r2, r3
 800a78a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a78e:	b29b      	uxth	r3, r3
 800a790:	029b      	lsls	r3, r3, #10
 800a792:	b29b      	uxth	r3, r3
 800a794:	4313      	orrs	r3, r2
 800a796:	b29a      	uxth	r2, r3
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	801a      	strh	r2, [r3, #0]
 800a79c:	e02a      	b.n	800a7f4 <USB_EPStartXfer+0x51a>
 800a79e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	785b      	ldrb	r3, [r3, #1]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d122      	bne.n	800a7f4 <USB_EPStartXfer+0x51a>
 800a7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	623b      	str	r3, [r7, #32]
 800a7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	623b      	str	r3, [r7, #32]
 800a7d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	00da      	lsls	r2, r3, #3
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7e8:	61fb      	str	r3, [r7, #28]
 800a7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	891b      	ldrh	r3, [r3, #8]
 800a800:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6959      	ldr	r1, [r3, #20]
 800a810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a814:	b29b      	uxth	r3, r3
 800a816:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a81a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a81e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a822:	6800      	ldr	r0, [r0, #0]
 800a824:	f001 fa44 	bl	800bcb0 <USB_WritePMA>
 800a828:	e3ee      	b.n	800b008 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a82a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d177      	bne.n	800a92a <USB_EPStartXfer+0x650>
 800a83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a84a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a854:	b29b      	uxth	r3, r3
 800a856:	461a      	mov	r2, r3
 800a858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a85a:	4413      	add	r3, r2
 800a85c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	00da      	lsls	r2, r3, #3
 800a86c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a86e:	4413      	add	r3, r2
 800a870:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a874:	647b      	str	r3, [r7, #68]	@ 0x44
 800a876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a880:	b29a      	uxth	r2, r3
 800a882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a884:	801a      	strh	r2, [r3, #0]
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a88c:	d921      	bls.n	800a8d2 <USB_EPStartXfer+0x5f8>
 800a88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a892:	095b      	lsrs	r3, r3, #5
 800a894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89c:	f003 031f 	and.w	r3, r3, #31
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d104      	bne.n	800a8ae <USB_EPStartXfer+0x5d4>
 800a8a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	029b      	lsls	r3, r3, #10
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ce:	801a      	strh	r2, [r3, #0]
 800a8d0:	e056      	b.n	800a980 <USB_EPStartXfer+0x6a6>
 800a8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <USB_EPStartXfer+0x616>
 800a8da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	e047      	b.n	800a980 <USB_EPStartXfer+0x6a6>
 800a8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f4:	085b      	lsrs	r3, r3, #1
 800a8f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d004      	beq.n	800a910 <USB_EPStartXfer+0x636>
 800a906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a90a:	3301      	adds	r3, #1
 800a90c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	b29a      	uxth	r2, r3
 800a916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	029b      	lsls	r3, r3, #10
 800a91e:	b29b      	uxth	r3, r3
 800a920:	4313      	orrs	r3, r2
 800a922:	b29a      	uxth	r2, r3
 800a924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a926:	801a      	strh	r2, [r3, #0]
 800a928:	e02a      	b.n	800a980 <USB_EPStartXfer+0x6a6>
 800a92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d122      	bne.n	800a980 <USB_EPStartXfer+0x6a6>
 800a93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a93e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	653b      	str	r3, [r7, #80]	@ 0x50
 800a946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a94a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a954:	b29b      	uxth	r3, r3
 800a956:	461a      	mov	r2, r3
 800a958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a95a:	4413      	add	r3, r2
 800a95c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a95e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	00da      	lsls	r2, r3, #3
 800a96c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a96e:	4413      	add	r3, r2
 800a970:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a97e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	891b      	ldrh	r3, [r3, #8]
 800a98c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	6959      	ldr	r1, [r3, #20]
 800a99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a9a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a9aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a9ae:	6800      	ldr	r0, [r0, #0]
 800a9b0:	f001 f97e 	bl	800bcb0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	695a      	ldr	r2, [r3, #20]
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c4:	441a      	add	r2, r3
 800a9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a9d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6a1a      	ldr	r2, [r3, #32]
 800a9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d90f      	bls.n	800aa0e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6a1a      	ldr	r2, [r3, #32]
 800a9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	621a      	str	r2, [r3, #32]
 800aa0c:	e00e      	b.n	800aa2c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800aa1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	785b      	ldrb	r3, [r3, #1]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d177      	bne.n	800ab38 <USB_EPStartXfer+0x85e>
 800aa48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa68:	4413      	add	r3, r2
 800aa6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	00da      	lsls	r2, r3, #3
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa82:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa92:	801a      	strh	r2, [r3, #0]
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa98:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa9a:	d921      	bls.n	800aae0 <USB_EPStartXfer+0x806>
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaaa:	f003 031f 	and.w	r3, r3, #31
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d104      	bne.n	800aabc <USB_EPStartXfer+0x7e2>
 800aab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aab6:	3b01      	subs	r3, #1
 800aab8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	029b      	lsls	r3, r3, #10
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	4313      	orrs	r3, r2
 800aace:	b29b      	uxth	r3, r3
 800aad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aad8:	b29a      	uxth	r2, r3
 800aada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	e050      	b.n	800ab82 <USB_EPStartXfer+0x8a8>
 800aae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <USB_EPStartXfer+0x824>
 800aae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	801a      	strh	r2, [r3, #0]
 800aafc:	e041      	b.n	800ab82 <USB_EPStartXfer+0x8a8>
 800aafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d004      	beq.n	800ab1e <USB_EPStartXfer+0x844>
 800ab14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab18:	3301      	adds	r3, #1
 800ab1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	029b      	lsls	r3, r3, #10
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab34:	801a      	strh	r2, [r3, #0]
 800ab36:	e024      	b.n	800ab82 <USB_EPStartXfer+0x8a8>
 800ab38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	785b      	ldrb	r3, [r3, #1]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d11c      	bne.n	800ab82 <USB_EPStartXfer+0x8a8>
 800ab48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	461a      	mov	r2, r3
 800ab5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5c:	4413      	add	r3, r2
 800ab5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	00da      	lsls	r2, r3, #3
 800ab6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab70:	4413      	add	r3, r2
 800ab72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	895b      	ldrh	r3, [r3, #10]
 800ab8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6959      	ldr	r1, [r3, #20]
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aba8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800abac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800abb0:	6800      	ldr	r0, [r0, #0]
 800abb2:	f001 f87d 	bl	800bcb0 <USB_WritePMA>
 800abb6:	e227      	b.n	800b008 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800abb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800abc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800abea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abee:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800abf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	441a      	add	r2, r3
 800ac0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ac10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ac24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac44:	4413      	add	r3, r2
 800ac46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	00da      	lsls	r2, r3, #3
 800ac56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac58:	4413      	add	r3, r2
 800ac5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	891b      	ldrh	r3, [r3, #8]
 800ac76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6959      	ldr	r1, [r3, #20]
 800ac86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ac94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ac98:	6800      	ldr	r0, [r0, #0]
 800ac9a:	f001 f809 	bl	800bcb0 <USB_WritePMA>
 800ac9e:	e1b3      	b.n	800b008 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6a1a      	ldr	r2, [r3, #32]
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb0:	1ad2      	subs	r2, r2, r3
 800acb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800accc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80c6 	beq.w	800ae72 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ace6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	673b      	str	r3, [r7, #112]	@ 0x70
 800acf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	785b      	ldrb	r3, [r3, #1]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d177      	bne.n	800adf2 <USB_EPStartXfer+0xb18>
 800ad02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad22:	4413      	add	r3, r2
 800ad24:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	00da      	lsls	r2, r3, #3
 800ad34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad36:	4413      	add	r3, r2
 800ad38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad3c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad4c:	801a      	strh	r2, [r3, #0]
 800ad4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad52:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad54:	d921      	bls.n	800ad9a <USB_EPStartXfer+0xac0>
 800ad56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <USB_EPStartXfer+0xa9c>
 800ad6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad70:	3b01      	subs	r3, #1
 800ad72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	029b      	lsls	r3, r3, #10
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4313      	orrs	r3, r2
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	e050      	b.n	800ae3c <USB_EPStartXfer+0xb62>
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <USB_EPStartXfer+0xade>
 800ada2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	e041      	b.n	800ae3c <USB_EPStartXfer+0xb62>
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adbc:	085b      	lsrs	r3, r3, #1
 800adbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d004      	beq.n	800add8 <USB_EPStartXfer+0xafe>
 800adce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800add2:	3301      	adds	r3, #1
 800add4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800add8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29a      	uxth	r2, r3
 800adde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	029b      	lsls	r3, r3, #10
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	b29a      	uxth	r2, r3
 800adec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	e024      	b.n	800ae3c <USB_EPStartXfer+0xb62>
 800adf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	785b      	ldrb	r3, [r3, #1]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d11c      	bne.n	800ae3c <USB_EPStartXfer+0xb62>
 800ae02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae16:	4413      	add	r3, r2
 800ae18:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	00da      	lsls	r2, r3, #3
 800ae28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ae3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	895b      	ldrh	r3, [r3, #10]
 800ae48:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6959      	ldr	r1, [r3, #20]
 800ae58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae62:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ae66:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	f000 ff20 	bl	800bcb0 <USB_WritePMA>
 800ae70:	e0ca      	b.n	800b008 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d177      	bne.n	800af72 <USB_EPStartXfer+0xc98>
 800ae82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aea2:	4413      	add	r3, r2
 800aea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	00da      	lsls	r2, r3, #3
 800aeb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aecc:	801a      	strh	r2, [r3, #0]
 800aece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed2:	2b3e      	cmp	r3, #62	@ 0x3e
 800aed4:	d921      	bls.n	800af1a <USB_EPStartXfer+0xc40>
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeda:	095b      	lsrs	r3, r3, #5
 800aedc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee4:	f003 031f 	and.w	r3, r3, #31
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d104      	bne.n	800aef6 <USB_EPStartXfer+0xc1c>
 800aeec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aef0:	3b01      	subs	r3, #1
 800aef2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af00:	b29b      	uxth	r3, r3
 800af02:	029b      	lsls	r3, r3, #10
 800af04:	b29b      	uxth	r3, r3
 800af06:	4313      	orrs	r3, r2
 800af08:	b29b      	uxth	r3, r3
 800af0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af12:	b29a      	uxth	r2, r3
 800af14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af16:	801a      	strh	r2, [r3, #0]
 800af18:	e05c      	b.n	800afd4 <USB_EPStartXfer+0xcfa>
 800af1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <USB_EPStartXfer+0xc5e>
 800af22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	b29b      	uxth	r3, r3
 800af28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af30:	b29a      	uxth	r2, r3
 800af32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af34:	801a      	strh	r2, [r3, #0]
 800af36:	e04d      	b.n	800afd4 <USB_EPStartXfer+0xcfa>
 800af38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3c:	085b      	lsrs	r3, r3, #1
 800af3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d004      	beq.n	800af58 <USB_EPStartXfer+0xc7e>
 800af4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af52:	3301      	adds	r3, #1
 800af54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af62:	b29b      	uxth	r3, r3
 800af64:	029b      	lsls	r3, r3, #10
 800af66:	b29b      	uxth	r3, r3
 800af68:	4313      	orrs	r3, r2
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af6e:	801a      	strh	r2, [r3, #0]
 800af70:	e030      	b.n	800afd4 <USB_EPStartXfer+0xcfa>
 800af72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	785b      	ldrb	r3, [r3, #1]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d128      	bne.n	800afd4 <USB_EPStartXfer+0xcfa>
 800af82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	461a      	mov	r2, r3
 800afa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afa6:	4413      	add	r3, r2
 800afa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	00da      	lsls	r2, r3, #3
 800afba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afbe:	4413      	add	r3, r2
 800afc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800afc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afcc:	b29a      	uxth	r2, r3
 800afce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800afd2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800afd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	891b      	ldrh	r3, [r3, #8]
 800afe0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	6959      	ldr	r1, [r3, #20]
 800aff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800affa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800affe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b002:	6800      	ldr	r0, [r0, #0]
 800b004:	f000 fe54 	bl	800bcb0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	b29b      	uxth	r3, r3
 800b026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b02a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b02e:	817b      	strh	r3, [r7, #10]
 800b030:	897b      	ldrh	r3, [r7, #10]
 800b032:	f083 0310 	eor.w	r3, r3, #16
 800b036:	817b      	strh	r3, [r7, #10]
 800b038:	897b      	ldrh	r3, [r7, #10]
 800b03a:	f083 0320 	eor.w	r3, r3, #32
 800b03e:	817b      	strh	r3, [r7, #10]
 800b040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b044:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	441a      	add	r2, r3
 800b05a:	897b      	ldrh	r3, [r7, #10]
 800b05c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	8013      	strh	r3, [r2, #0]
 800b070:	f000 bcde 	b.w	800ba30 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	7b1b      	ldrb	r3, [r3, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f040 80bb 	bne.w	800b1fc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b08a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	699a      	ldr	r2, [r3, #24]
 800b092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d917      	bls.n	800b0d2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	699a      	ldr	r2, [r3, #24]
 800b0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c2:	1ad2      	subs	r2, r2, r3
 800b0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	619a      	str	r2, [r3, #24]
 800b0d0:	e00e      	b.n	800b0f0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b0d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b0e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	461a      	mov	r2, r3
 800b110:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b114:	4413      	add	r3, r2
 800b116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	00da      	lsls	r2, r3, #3
 800b128:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b12c:	4413      	add	r3, r2
 800b12e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b142:	b29a      	uxth	r2, r3
 800b144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b14e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b150:	d924      	bls.n	800b19c <USB_EPStartXfer+0xec2>
 800b152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b156:	095b      	lsrs	r3, r3, #5
 800b158:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b160:	f003 031f 	and.w	r3, r3, #31
 800b164:	2b00      	cmp	r3, #0
 800b166:	d104      	bne.n	800b172 <USB_EPStartXfer+0xe98>
 800b168:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b16c:	3b01      	subs	r3, #1
 800b16e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	b29a      	uxth	r2, r3
 800b17a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b17e:	b29b      	uxth	r3, r3
 800b180:	029b      	lsls	r3, r3, #10
 800b182:	b29b      	uxth	r3, r3
 800b184:	4313      	orrs	r3, r2
 800b186:	b29b      	uxth	r3, r3
 800b188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b18c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b190:	b29a      	uxth	r2, r3
 800b192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	f000 bc10 	b.w	800b9bc <USB_EPStartXfer+0x16e2>
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10c      	bne.n	800b1be <USB_EPStartXfer+0xee4>
 800b1a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1ba:	801a      	strh	r2, [r3, #0]
 800b1bc:	e3fe      	b.n	800b9bc <USB_EPStartXfer+0x16e2>
 800b1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c2:	085b      	lsrs	r3, r3, #1
 800b1c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d004      	beq.n	800b1de <USB_EPStartXfer+0xf04>
 800b1d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1d8:	3301      	adds	r3, #1
 800b1da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	029b      	lsls	r3, r3, #10
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1f8:	801a      	strh	r2, [r3, #0]
 800b1fa:	e3df      	b.n	800b9bc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b1fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	78db      	ldrb	r3, [r3, #3]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	f040 8218 	bne.w	800b63e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b20e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	785b      	ldrb	r3, [r3, #1]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 809d 	bne.w	800b35a <USB_EPStartXfer+0x1080>
 800b220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	461a      	mov	r2, r3
 800b240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b244:	4413      	add	r3, r2
 800b246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b24a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b24e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	00da      	lsls	r2, r3, #3
 800b258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b25c:	4413      	add	r3, r2
 800b25e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b262:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b272:	b29a      	uxth	r2, r3
 800b274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b278:	801a      	strh	r2, [r3, #0]
 800b27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b27e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	2b3e      	cmp	r3, #62	@ 0x3e
 800b288:	d92b      	bls.n	800b2e2 <USB_EPStartXfer+0x1008>
 800b28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b28e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	095b      	lsrs	r3, r3, #5
 800b298:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b29c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	f003 031f 	and.w	r3, r3, #31
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d104      	bne.n	800b2ba <USB_EPStartXfer+0xfe0>
 800b2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	029b      	lsls	r3, r3, #10
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2de:	801a      	strh	r2, [r3, #0]
 800b2e0:	e070      	b.n	800b3c4 <USB_EPStartXfer+0x10ea>
 800b2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10c      	bne.n	800b30c <USB_EPStartXfer+0x1032>
 800b2f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b302:	b29a      	uxth	r2, r3
 800b304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b308:	801a      	strh	r2, [r3, #0]
 800b30a:	e05b      	b.n	800b3c4 <USB_EPStartXfer+0x10ea>
 800b30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	085b      	lsrs	r3, r3, #1
 800b31a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <USB_EPStartXfer+0x1062>
 800b332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b336:	3301      	adds	r3, #1
 800b338:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b33c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	b29a      	uxth	r2, r3
 800b344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b348:	b29b      	uxth	r3, r3
 800b34a:	029b      	lsls	r3, r3, #10
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	4313      	orrs	r3, r2
 800b350:	b29a      	uxth	r2, r3
 800b352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b356:	801a      	strh	r2, [r3, #0]
 800b358:	e034      	b.n	800b3c4 <USB_EPStartXfer+0x10ea>
 800b35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b35e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	785b      	ldrb	r3, [r3, #1]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d12c      	bne.n	800b3c4 <USB_EPStartXfer+0x10ea>
 800b36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b36e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b37c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b386:	b29b      	uxth	r3, r3
 800b388:	461a      	mov	r2, r3
 800b38a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b38e:	4413      	add	r3, r2
 800b390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	00da      	lsls	r2, r3, #3
 800b3a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3c2:	801a      	strh	r2, [r3, #0]
 800b3c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f040 809d 	bne.w	800b51e <USB_EPStartXfer+0x1244>
 800b3e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b400:	b29b      	uxth	r3, r3
 800b402:	461a      	mov	r2, r3
 800b404:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b408:	4413      	add	r3, r2
 800b40a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	00da      	lsls	r2, r3, #3
 800b41c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b420:	4413      	add	r3, r2
 800b422:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b426:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b42a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	b29b      	uxth	r3, r3
 800b432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b436:	b29a      	uxth	r2, r3
 800b438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b44c:	d92b      	bls.n	800b4a6 <USB_EPStartXfer+0x11cc>
 800b44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	f003 031f 	and.w	r3, r3, #31
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <USB_EPStartXfer+0x11a4>
 800b474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b478:	3b01      	subs	r3, #1
 800b47a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b47e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	b29a      	uxth	r2, r3
 800b486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	029b      	lsls	r3, r3, #10
 800b48e:	b29b      	uxth	r3, r3
 800b490:	4313      	orrs	r3, r2
 800b492:	b29b      	uxth	r3, r3
 800b494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4a2:	801a      	strh	r2, [r3, #0]
 800b4a4:	e069      	b.n	800b57a <USB_EPStartXfer+0x12a0>
 800b4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10c      	bne.n	800b4d0 <USB_EPStartXfer+0x11f6>
 800b4b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4cc:	801a      	strh	r2, [r3, #0]
 800b4ce:	e054      	b.n	800b57a <USB_EPStartXfer+0x12a0>
 800b4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	085b      	lsrs	r3, r3, #1
 800b4de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d004      	beq.n	800b500 <USB_EPStartXfer+0x1226>
 800b4f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	b29a      	uxth	r2, r3
 800b508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	029b      	lsls	r3, r3, #10
 800b510:	b29b      	uxth	r3, r3
 800b512:	4313      	orrs	r3, r2
 800b514:	b29a      	uxth	r2, r3
 800b516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b51a:	801a      	strh	r2, [r3, #0]
 800b51c:	e02d      	b.n	800b57a <USB_EPStartXfer+0x12a0>
 800b51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	785b      	ldrb	r3, [r3, #1]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d125      	bne.n	800b57a <USB_EPStartXfer+0x12a0>
 800b52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	461a      	mov	r2, r3
 800b540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b544:	4413      	add	r3, r2
 800b546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b54a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b54e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	00da      	lsls	r2, r3, #3
 800b558:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b55c:	4413      	add	r3, r2
 800b55e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b56a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	b29a      	uxth	r2, r3
 800b574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b578:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b57a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 8218 	beq.w	800b9bc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <USB_EPStartXfer+0x12ea>
 800b5b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10d      	bne.n	800b5e0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b5c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 81f5 	bne.w	800b9bc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b5d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f040 81ee 	bne.w	800b9bc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b606:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b60e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	441a      	add	r2, r3
 800b624:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b62c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b634:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b638:	b29b      	uxth	r3, r3
 800b63a:	8013      	strh	r3, [r2, #0]
 800b63c:	e1be      	b.n	800b9bc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b63e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	78db      	ldrb	r3, [r3, #3]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	f040 81b4 	bne.w	800b9b8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	699a      	ldr	r2, [r3, #24]
 800b65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d917      	bls.n	800b69c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	699a      	ldr	r2, [r3, #24]
 800b688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b68c:	1ad2      	subs	r2, r2, r3
 800b68e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	619a      	str	r2, [r3, #24]
 800b69a:	e00e      	b.n	800b6ba <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b69c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	785b      	ldrb	r3, [r3, #1]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f040 8085 	bne.w	800b7d6 <USB_EPStartXfer+0x14fc>
 800b6cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	00da      	lsls	r2, r3, #3
 800b704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b708:	4413      	add	r3, r2
 800b70a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b70e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b71e:	b29a      	uxth	r2, r3
 800b720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b724:	801a      	strh	r2, [r3, #0]
 800b726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b72a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b72c:	d923      	bls.n	800b776 <USB_EPStartXfer+0x149c>
 800b72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b732:	095b      	lsrs	r3, r3, #5
 800b734:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b73c:	f003 031f 	and.w	r3, r3, #31
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <USB_EPStartXfer+0x1474>
 800b744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b748:	3b01      	subs	r3, #1
 800b74a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b74e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	b29a      	uxth	r2, r3
 800b756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	029b      	lsls	r3, r3, #10
 800b75e:	b29b      	uxth	r3, r3
 800b760:	4313      	orrs	r3, r2
 800b762:	b29b      	uxth	r3, r3
 800b764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b772:	801a      	strh	r2, [r3, #0]
 800b774:	e060      	b.n	800b838 <USB_EPStartXfer+0x155e>
 800b776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10c      	bne.n	800b798 <USB_EPStartXfer+0x14be>
 800b77e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	b29b      	uxth	r3, r3
 800b786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b78a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b78e:	b29a      	uxth	r2, r3
 800b790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b794:	801a      	strh	r2, [r3, #0]
 800b796:	e04f      	b.n	800b838 <USB_EPStartXfer+0x155e>
 800b798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b79c:	085b      	lsrs	r3, r3, #1
 800b79e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <USB_EPStartXfer+0x14de>
 800b7ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	029b      	lsls	r3, r3, #10
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7d2:	801a      	strh	r2, [r3, #0]
 800b7d4:	e030      	b.n	800b838 <USB_EPStartXfer+0x155e>
 800b7d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	785b      	ldrb	r3, [r3, #1]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d128      	bne.n	800b838 <USB_EPStartXfer+0x155e>
 800b7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b7f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b802:	b29b      	uxth	r3, r3
 800b804:	461a      	mov	r2, r3
 800b806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b80a:	4413      	add	r3, r2
 800b80c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	00da      	lsls	r2, r3, #3
 800b81e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b822:	4413      	add	r3, r2
 800b824:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b830:	b29a      	uxth	r2, r3
 800b832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b836:	801a      	strh	r2, [r3, #0]
 800b838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b83c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b84a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	785b      	ldrb	r3, [r3, #1]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f040 8085 	bne.w	800b962 <USB_EPStartXfer+0x1688>
 800b858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b85c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b86a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b874:	b29b      	uxth	r3, r3
 800b876:	461a      	mov	r2, r3
 800b878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b87c:	4413      	add	r3, r2
 800b87e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	00da      	lsls	r2, r3, #3
 800b890:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b894:	4413      	add	r3, r2
 800b896:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b89a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b89e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8b0:	801a      	strh	r2, [r3, #0]
 800b8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8b8:	d923      	bls.n	800b902 <USB_EPStartXfer+0x1628>
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8be:	095b      	lsrs	r3, r3, #5
 800b8c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c8:	f003 031f 	and.w	r3, r3, #31
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d104      	bne.n	800b8da <USB_EPStartXfer+0x1600>
 800b8d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	029b      	lsls	r3, r3, #10
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8fe:	801a      	strh	r2, [r3, #0]
 800b900:	e05c      	b.n	800b9bc <USB_EPStartXfer+0x16e2>
 800b902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10c      	bne.n	800b924 <USB_EPStartXfer+0x164a>
 800b90a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	b29b      	uxth	r3, r3
 800b912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b920:	801a      	strh	r2, [r3, #0]
 800b922:	e04b      	b.n	800b9bc <USB_EPStartXfer+0x16e2>
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b928:	085b      	lsrs	r3, r3, #1
 800b92a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	2b00      	cmp	r3, #0
 800b938:	d004      	beq.n	800b944 <USB_EPStartXfer+0x166a>
 800b93a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b93e:	3301      	adds	r3, #1
 800b940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b944:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b950:	b29b      	uxth	r3, r3
 800b952:	029b      	lsls	r3, r3, #10
 800b954:	b29b      	uxth	r3, r3
 800b956:	4313      	orrs	r3, r2
 800b958:	b29a      	uxth	r2, r3
 800b95a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b95e:	801a      	strh	r2, [r3, #0]
 800b960:	e02c      	b.n	800b9bc <USB_EPStartXfer+0x16e2>
 800b962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d124      	bne.n	800b9bc <USB_EPStartXfer+0x16e2>
 800b972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b980:	b29b      	uxth	r3, r3
 800b982:	461a      	mov	r2, r3
 800b984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b988:	4413      	add	r3, r2
 800b98a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	00da      	lsls	r2, r3, #3
 800b99c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b9b4:	801a      	strh	r2, [r3, #0]
 800b9b6:	e001      	b.n	800b9bc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e03a      	b.n	800ba32 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b9de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b9ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	441a      	add	r2, r3
 800ba18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d020      	beq.n	800ba90 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba64:	81bb      	strh	r3, [r7, #12]
 800ba66:	89bb      	ldrh	r3, [r7, #12]
 800ba68:	f083 0310 	eor.w	r3, r3, #16
 800ba6c:	81bb      	strh	r3, [r7, #12]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	441a      	add	r2, r3
 800ba78:	89bb      	ldrh	r3, [r7, #12]
 800ba7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	8013      	strh	r3, [r2, #0]
 800ba8e:	e01f      	b.n	800bad0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800baa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baa6:	81fb      	strh	r3, [r7, #14]
 800baa8:	89fb      	ldrh	r3, [r7, #14]
 800baaa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800baae:	81fb      	strh	r3, [r7, #14]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	441a      	add	r2, r3
 800baba:	89fb      	ldrh	r3, [r7, #14]
 800babc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bacc:	b29b      	uxth	r3, r3
 800bace:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bade:	b480      	push	{r7}
 800bae0:	b087      	sub	sp, #28
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	7b1b      	ldrb	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f040 809d 	bne.w	800bc2c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	785b      	ldrb	r3, [r3, #1]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d04c      	beq.n	800bb94 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	823b      	strh	r3, [r7, #16]
 800bb08:	8a3b      	ldrh	r3, [r7, #16]
 800bb0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d01b      	beq.n	800bb4a <USB_EPClearStall+0x6c>
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb28:	81fb      	strh	r3, [r7, #14]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	441a      	add	r2, r3
 800bb34:	89fb      	ldrh	r3, [r7, #14]
 800bb36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	78db      	ldrb	r3, [r3, #3]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d06c      	beq.n	800bc2c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb68:	81bb      	strh	r3, [r7, #12]
 800bb6a:	89bb      	ldrh	r3, [r7, #12]
 800bb6c:	f083 0320 	eor.w	r3, r3, #32
 800bb70:	81bb      	strh	r3, [r7, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	441a      	add	r2, r3
 800bb7c:	89bb      	ldrh	r3, [r7, #12]
 800bb7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	8013      	strh	r3, [r2, #0]
 800bb92:	e04b      	b.n	800bc2c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	881b      	ldrh	r3, [r3, #0]
 800bba0:	82fb      	strh	r3, [r7, #22]
 800bba2:	8afb      	ldrh	r3, [r7, #22]
 800bba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d01b      	beq.n	800bbe4 <USB_EPClearStall+0x106>
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbc2:	82bb      	strh	r3, [r7, #20]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	441a      	add	r2, r3
 800bbce:	8abb      	ldrh	r3, [r7, #20]
 800bbd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bbdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbfa:	827b      	strh	r3, [r7, #18]
 800bbfc:	8a7b      	ldrh	r3, [r7, #18]
 800bbfe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bc02:	827b      	strh	r3, [r7, #18]
 800bc04:	8a7b      	ldrh	r3, [r7, #18]
 800bc06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bc0a:	827b      	strh	r3, [r7, #18]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	441a      	add	r2, r3
 800bc16:	8a7b      	ldrh	r3, [r7, #18]
 800bc18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bc46:	78fb      	ldrb	r3, [r7, #3]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2280      	movs	r2, #128	@ 0x80
 800bc50:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bca2:	68fb      	ldr	r3, [r7, #12]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b08b      	sub	sp, #44	@ 0x2c
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	4611      	mov	r1, r2
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	80fb      	strh	r3, [r7, #6]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bcc6:	88bb      	ldrh	r3, [r7, #4]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	085b      	lsrs	r3, r3, #1
 800bccc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcd6:	88fa      	ldrh	r2, [r7, #6]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bce0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bce6:	e01b      	b.n	800bd20 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	b21a      	sxth	r2, r3
 800bcf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	b21b      	sxth	r3, r3
 800bd00:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bd02:	6a3b      	ldr	r3, [r7, #32]
 800bd04:	8a7a      	ldrh	r2, [r7, #18]
 800bd06:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	3302      	adds	r3, #2
 800bd0c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	3301      	adds	r3, #1
 800bd12:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	3301      	adds	r3, #1
 800bd18:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1e0      	bne.n	800bce8 <USB_WritePMA+0x38>
  }
}
 800bd26:	bf00      	nop
 800bd28:	bf00      	nop
 800bd2a:	372c      	adds	r7, #44	@ 0x2c
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b08b      	sub	sp, #44	@ 0x2c
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	4611      	mov	r1, r2
 800bd40:	461a      	mov	r2, r3
 800bd42:	460b      	mov	r3, r1
 800bd44:	80fb      	strh	r3, [r7, #6]
 800bd46:	4613      	mov	r3, r2
 800bd48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bd4a:	88bb      	ldrh	r3, [r7, #4]
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd5a:	88fa      	ldrh	r2, [r7, #6]
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd64:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd6a:	e018      	b.n	800bd9e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	3302      	adds	r3, #2
 800bd78:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	3301      	adds	r3, #1
 800bd86:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	3301      	adds	r3, #1
 800bd96:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e3      	bne.n	800bd6c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bda4:	88bb      	ldrh	r3, [r7, #4]
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d007      	beq.n	800bdc0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	701a      	strb	r2, [r3, #0]
  }
}
 800bdc0:	bf00      	nop
 800bdc2:	372c      	adds	r7, #44	@ 0x2c
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bdd8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bddc:	f005 fe44 	bl	8011a68 <USBD_static_malloc>
 800bde0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d105      	bne.n	800bdf4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e066      	b.n	800bec2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7c1b      	ldrb	r3, [r3, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d119      	bne.n	800be38 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be08:	2202      	movs	r2, #2
 800be0a:	2181      	movs	r1, #129	@ 0x81
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f005 fcd2 	bl	80117b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be1c:	2202      	movs	r2, #2
 800be1e:	2101      	movs	r1, #1
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f005 fcc8 	bl	80117b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2201      	movs	r2, #1
 800be2a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2210      	movs	r2, #16
 800be32:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800be36:	e016      	b.n	800be66 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be38:	2340      	movs	r3, #64	@ 0x40
 800be3a:	2202      	movs	r2, #2
 800be3c:	2181      	movs	r1, #129	@ 0x81
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f005 fcb9 	bl	80117b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2201      	movs	r2, #1
 800be48:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be4a:	2340      	movs	r3, #64	@ 0x40
 800be4c:	2202      	movs	r2, #2
 800be4e:	2101      	movs	r1, #1
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f005 fcb0 	bl	80117b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2201      	movs	r2, #1
 800be5a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2210      	movs	r2, #16
 800be62:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be66:	2308      	movs	r3, #8
 800be68:	2203      	movs	r2, #3
 800be6a:	2182      	movs	r1, #130	@ 0x82
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f005 fca2 	bl	80117b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7c1b      	ldrb	r3, [r3, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d109      	bne.n	800beb0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bea6:	2101      	movs	r1, #1
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f005 fd73 	bl	8011994 <USBD_LL_PrepareReceive>
 800beae:	e007      	b.n	800bec0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800beb6:	2340      	movs	r3, #64	@ 0x40
 800beb8:	2101      	movs	r1, #1
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f005 fd6a 	bl	8011994 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b082      	sub	sp, #8
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	460b      	mov	r3, r1
 800bed4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bed6:	2181      	movs	r1, #129	@ 0x81
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f005 fc92 	bl	8011802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bee4:	2101      	movs	r1, #1
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f005 fc8b 	bl	8011802 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bef4:	2182      	movs	r1, #130	@ 0x82
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f005 fc83 	bl	8011802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00e      	beq.n	800bf34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bf26:	4618      	mov	r0, r3
 800bf28:	f005 fdac 	bl	8011a84 <USBD_static_free>
    pdev->pClassData = NULL;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
	...

0800bf40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bf50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf56:	2300      	movs	r3, #0
 800bf58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e0af      	b.n	800c0c8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d03f      	beq.n	800bff4 <USBD_CDC_Setup+0xb4>
 800bf74:	2b20      	cmp	r3, #32
 800bf76:	f040 809f 	bne.w	800c0b8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	88db      	ldrh	r3, [r3, #6]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d02e      	beq.n	800bfe0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b25b      	sxtb	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	da16      	bge.n	800bfba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bf98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	88d2      	ldrh	r2, [r2, #6]
 800bf9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	88db      	ldrh	r3, [r3, #6]
 800bfa4:	2b07      	cmp	r3, #7
 800bfa6:	bf28      	it	cs
 800bfa8:	2307      	movcs	r3, #7
 800bfaa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	89fa      	ldrh	r2, [r7, #14]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f001 facd 	bl	800d552 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bfb8:	e085      	b.n	800c0c6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	785a      	ldrb	r2, [r3, #1]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	88db      	ldrh	r3, [r3, #6]
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bfd0:	6939      	ldr	r1, [r7, #16]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	88db      	ldrh	r3, [r3, #6]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 fae6 	bl	800d5aa <USBD_CtlPrepareRx>
      break;
 800bfde:	e072      	b.n	800c0c6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	7850      	ldrb	r0, [r2, #1]
 800bfec:	2200      	movs	r2, #0
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	4798      	blx	r3
      break;
 800bff2:	e068      	b.n	800c0c6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	785b      	ldrb	r3, [r3, #1]
 800bff8:	2b0b      	cmp	r3, #11
 800bffa:	d852      	bhi.n	800c0a2 <USBD_CDC_Setup+0x162>
 800bffc:	a201      	add	r2, pc, #4	@ (adr r2, 800c004 <USBD_CDC_Setup+0xc4>)
 800bffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c002:	bf00      	nop
 800c004:	0800c035 	.word	0x0800c035
 800c008:	0800c0b1 	.word	0x0800c0b1
 800c00c:	0800c0a3 	.word	0x0800c0a3
 800c010:	0800c0a3 	.word	0x0800c0a3
 800c014:	0800c0a3 	.word	0x0800c0a3
 800c018:	0800c0a3 	.word	0x0800c0a3
 800c01c:	0800c0a3 	.word	0x0800c0a3
 800c020:	0800c0a3 	.word	0x0800c0a3
 800c024:	0800c0a3 	.word	0x0800c0a3
 800c028:	0800c0a3 	.word	0x0800c0a3
 800c02c:	0800c05f 	.word	0x0800c05f
 800c030:	0800c089 	.word	0x0800c089
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	d107      	bne.n	800c050 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c040:	f107 030a 	add.w	r3, r7, #10
 800c044:	2202      	movs	r2, #2
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 fa82 	bl	800d552 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c04e:	e032      	b.n	800c0b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f001 fa0c 	bl	800d470 <USBD_CtlError>
            ret = USBD_FAIL;
 800c058:	2303      	movs	r3, #3
 800c05a:	75fb      	strb	r3, [r7, #23]
          break;
 800c05c:	e02b      	b.n	800c0b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b03      	cmp	r3, #3
 800c068:	d107      	bne.n	800c07a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c06a:	f107 030d 	add.w	r3, r7, #13
 800c06e:	2201      	movs	r2, #1
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 fa6d 	bl	800d552 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c078:	e01d      	b.n	800c0b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 f9f7 	bl	800d470 <USBD_CtlError>
            ret = USBD_FAIL;
 800c082:	2303      	movs	r3, #3
 800c084:	75fb      	strb	r3, [r7, #23]
          break;
 800c086:	e016      	b.n	800c0b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b03      	cmp	r3, #3
 800c092:	d00f      	beq.n	800c0b4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f001 f9ea 	bl	800d470 <USBD_CtlError>
            ret = USBD_FAIL;
 800c09c:	2303      	movs	r3, #3
 800c09e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c0a0:	e008      	b.n	800c0b4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 f9e3 	bl	800d470 <USBD_CtlError>
          ret = USBD_FAIL;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800c0ae:	e002      	b.n	800c0b6 <USBD_CDC_Setup+0x176>
          break;
 800c0b0:	bf00      	nop
 800c0b2:	e008      	b.n	800c0c6 <USBD_CDC_Setup+0x186>
          break;
 800c0b4:	bf00      	nop
      }
      break;
 800c0b6:	e006      	b.n	800c0c6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f001 f9d8 	bl	800d470 <USBD_CtlError>
      ret = USBD_FAIL;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c0e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e04f      	b.n	800c192 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c0f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c0fa:	78fa      	ldrb	r2, [r7, #3]
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	440b      	add	r3, r1
 800c108:	3318      	adds	r3, #24
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d029      	beq.n	800c164 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c110:	78fa      	ldrb	r2, [r7, #3]
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	440b      	add	r3, r1
 800c11e:	3318      	adds	r3, #24
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	78f9      	ldrb	r1, [r7, #3]
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	460b      	mov	r3, r1
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	440b      	add	r3, r1
 800c12c:	00db      	lsls	r3, r3, #3
 800c12e:	4403      	add	r3, r0
 800c130:	3320      	adds	r3, #32
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	fbb2 f1f3 	udiv	r1, r2, r3
 800c138:	fb01 f303 	mul.w	r3, r1, r3
 800c13c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d110      	bne.n	800c164 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c142:	78fa      	ldrb	r2, [r7, #3]
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	4613      	mov	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	440b      	add	r3, r1
 800c150:	3318      	adds	r3, #24
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c156:	78f9      	ldrb	r1, [r7, #3]
 800c158:	2300      	movs	r3, #0
 800c15a:	2200      	movs	r2, #0
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f005 fbf8 	bl	8011952 <USBD_LL_Transmit>
 800c162:	e015      	b.n	800c190 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	2200      	movs	r2, #0
 800c168:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00b      	beq.n	800c190 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c18c:	78fa      	ldrb	r2, [r7, #3]
 800c18e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c1ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e015      	b.n	800c1e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c1bc:	78fb      	ldrb	r3, [r7, #3]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f005 fc08 	bl	80119d6 <USBD_LL_GetRxDataSize>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c1fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d101      	bne.n	800c20a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c206:	2303      	movs	r3, #3
 800c208:	e01a      	b.n	800c240 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d014      	beq.n	800c23e <USBD_CDC_EP0_RxReady+0x4e>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c21a:	2bff      	cmp	r3, #255	@ 0xff
 800c21c:	d00f      	beq.n	800c23e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800c22c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c234:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	22ff      	movs	r2, #255	@ 0xff
 800c23a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2243      	movs	r2, #67	@ 0x43
 800c254:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c256:	4b03      	ldr	r3, [pc, #12]	@ (800c264 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c258:	4618      	mov	r0, r3
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	20000094 	.word	0x20000094

0800c268 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2243      	movs	r2, #67	@ 0x43
 800c274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c276:	4b03      	ldr	r3, [pc, #12]	@ (800c284 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c278:	4618      	mov	r0, r3
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	20000050 	.word	0x20000050

0800c288 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2243      	movs	r2, #67	@ 0x43
 800c294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c296:	4b03      	ldr	r3, [pc, #12]	@ (800c2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c298:	4618      	mov	r0, r3
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr
 800c2a4:	200000d8 	.word	0x200000d8

0800c2a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	220a      	movs	r2, #10
 800c2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c2b6:	4b03      	ldr	r3, [pc, #12]	@ (800c2c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	2000000c 	.word	0x2000000c

0800c2c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e004      	b.n	800c2e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b087      	sub	sp, #28
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c304:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e008      	b.n	800c322 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c32e:	b480      	push	{r7}
 800c330:	b085      	sub	sp, #20
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c33e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c346:	2303      	movs	r3, #3
 800c348:	e004      	b.n	800c354 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c36e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c370:	2301      	movs	r3, #1
 800c372:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c37e:	2303      	movs	r3, #3
 800c380:	e01a      	b.n	800c3b8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d114      	bne.n	800c3b6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2201      	movs	r2, #1
 800c390:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c3aa:	2181      	movs	r1, #129	@ 0x81
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f005 fad0 	bl	8011952 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c3ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e016      	b.n	800c40c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7c1b      	ldrb	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d109      	bne.n	800c3fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c3ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f005 face 	bl	8011994 <USBD_LL_PrepareReceive>
 800c3f8:	e007      	b.n	800c40a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c400:	2340      	movs	r3, #64	@ 0x40
 800c402:	2101      	movs	r1, #1
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f005 fac5 	bl	8011994 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	4613      	mov	r3, r2
 800c420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c428:	2303      	movs	r3, #3
 800c42a:	e01f      	b.n	800c46c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2201      	movs	r2, #1
 800c456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	79fa      	ldrb	r2, [r7, #7]
 800c45e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f005 f92d 	bl	80116c0 <USBD_LL_Init>
 800c466:	4603      	mov	r3, r0
 800c468:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3718      	adds	r7, #24
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c488:	2303      	movs	r3, #3
 800c48a:	e016      	b.n	800c4ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a8:	f107 020e 	add.w	r2, r7, #14
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4798      	blx	r3
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f005 f958 	bl	8011780 <USBD_LL_Start>
 800c4d0:	4603      	mov	r3, r0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c4da:	b480      	push	{r7}
 800c4dc:	b083      	sub	sp, #12
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c506:	2b00      	cmp	r3, #0
 800c508:	d009      	beq.n	800c51e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	78fa      	ldrb	r2, [r7, #3]
 800c514:	4611      	mov	r1, r2
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	4798      	blx	r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d007      	beq.n	800c54e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	78fa      	ldrb	r2, [r7, #3]
 800c548:	4611      	mov	r1, r2
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	4798      	blx	r3
  }

  return USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 ff46 	bl	800d3fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c57e:	461a      	mov	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c58c:	f003 031f 	and.w	r3, r3, #31
 800c590:	2b02      	cmp	r3, #2
 800c592:	d01a      	beq.n	800c5ca <USBD_LL_SetupStage+0x72>
 800c594:	2b02      	cmp	r3, #2
 800c596:	d822      	bhi.n	800c5de <USBD_LL_SetupStage+0x86>
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <USBD_LL_SetupStage+0x4a>
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d00a      	beq.n	800c5b6 <USBD_LL_SetupStage+0x5e>
 800c5a0:	e01d      	b.n	800c5de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f9ee 	bl	800c98c <USBD_StdDevReq>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5b4:	e020      	b.n	800c5f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fa52 	bl	800ca68 <USBD_StdItfReq>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5c8:	e016      	b.n	800c5f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fa91 	bl	800cafa <USBD_StdEPReq>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	73fb      	strb	r3, [r7, #15]
      break;
 800c5dc:	e00c      	b.n	800c5f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c5e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f005 f927 	bl	8011840 <USBD_LL_StallEP>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f6:	bf00      	nop
  }

  return ret;
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b086      	sub	sp, #24
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	460b      	mov	r3, r1
 800c60c:	607a      	str	r2, [r7, #4]
 800c60e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c610:	7afb      	ldrb	r3, [r7, #11]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d138      	bne.n	800c688 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c61c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c624:	2b03      	cmp	r3, #3
 800c626:	d14a      	bne.n	800c6be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	429a      	cmp	r2, r3
 800c632:	d913      	bls.n	800c65c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	689a      	ldr	r2, [r3, #8]
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	1ad2      	subs	r2, r2, r3
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	68da      	ldr	r2, [r3, #12]
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	4293      	cmp	r3, r2
 800c64c:	bf28      	it	cs
 800c64e:	4613      	movcs	r3, r2
 800c650:	461a      	mov	r2, r3
 800c652:	6879      	ldr	r1, [r7, #4]
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f000 ffc5 	bl	800d5e4 <USBD_CtlContinueRx>
 800c65a:	e030      	b.n	800c6be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b03      	cmp	r3, #3
 800c666:	d10b      	bne.n	800c680 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d005      	beq.n	800c680 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 ffc0 	bl	800d606 <USBD_CtlSendStatus>
 800c686:	e01a      	b.n	800c6be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b03      	cmp	r3, #3
 800c692:	d114      	bne.n	800c6be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00e      	beq.n	800c6be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	7afa      	ldrb	r2, [r7, #11]
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	4798      	blx	r3
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	e000      	b.n	800c6c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	607a      	str	r2, [r7, #4]
 800c6d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c6d6:	7afb      	ldrb	r3, [r7, #11]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d16b      	bne.n	800c7b4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3314      	adds	r3, #20
 800c6e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d156      	bne.n	800c79a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d914      	bls.n	800c722 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	689a      	ldr	r2, [r3, #8]
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	1ad2      	subs	r2, r2, r3
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	461a      	mov	r2, r3
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f000 ff3a 	bl	800d588 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c714:	2300      	movs	r3, #0
 800c716:	2200      	movs	r2, #0
 800c718:	2100      	movs	r1, #0
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f005 f93a 	bl	8011994 <USBD_LL_PrepareReceive>
 800c720:	e03b      	b.n	800c79a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	68da      	ldr	r2, [r3, #12]
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d11c      	bne.n	800c768 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c736:	429a      	cmp	r2, r3
 800c738:	d316      	bcc.n	800c768 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	685a      	ldr	r2, [r3, #4]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c744:	429a      	cmp	r2, r3
 800c746:	d20f      	bcs.n	800c768 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c748:	2200      	movs	r2, #0
 800c74a:	2100      	movs	r1, #0
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f000 ff1b 	bl	800d588 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c75a:	2300      	movs	r3, #0
 800c75c:	2200      	movs	r2, #0
 800c75e:	2100      	movs	r1, #0
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f005 f917 	bl	8011994 <USBD_LL_PrepareReceive>
 800c766:	e018      	b.n	800c79a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b03      	cmp	r3, #3
 800c772:	d10b      	bne.n	800c78c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c78c:	2180      	movs	r1, #128	@ 0x80
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f005 f856 	bl	8011840 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 ff49 	bl	800d62c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d122      	bne.n	800c7ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fe98 	bl	800c4da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c7b2:	e01a      	b.n	800c7ea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b03      	cmp	r3, #3
 800c7be:	d114      	bne.n	800c7ea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7c6:	695b      	ldr	r3, [r3, #20]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00e      	beq.n	800c7ea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	7afa      	ldrb	r2, [r7, #11]
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	4798      	blx	r3
 800c7dc:	4603      	mov	r3, r0
 800c7de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
 800c7e8:	e000      	b.n	800c7ec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3718      	adds	r7, #24
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c824:	2303      	movs	r3, #3
 800c826:	e02f      	b.n	800c888 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00f      	beq.n	800c852 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d009      	beq.n	800c852 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	6852      	ldr	r2, [r2, #4]
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	4611      	mov	r1, r2
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c852:	2340      	movs	r3, #64	@ 0x40
 800c854:	2200      	movs	r2, #0
 800c856:	2100      	movs	r1, #0
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f004 ffac 	bl	80117b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2240      	movs	r2, #64	@ 0x40
 800c86a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c86e:	2340      	movs	r3, #64	@ 0x40
 800c870:	2200      	movs	r2, #0
 800c872:	2180      	movs	r1, #128	@ 0x80
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f004 ff9e 	bl	80117b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2240      	movs	r2, #64	@ 0x40
 800c884:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	78fa      	ldrb	r2, [r7, #3]
 800c8a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2204      	movs	r2, #4
 800c8ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b04      	cmp	r3, #4
 800c8ee:	d106      	bne.n	800c8fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c91e:	2303      	movs	r3, #3
 800c920:	e012      	b.n	800c948 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d10b      	bne.n	800c946 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	3301      	adds	r3, #1
 800c966:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c96e:	8a3b      	ldrh	r3, [r7, #16]
 800c970:	021b      	lsls	r3, r3, #8
 800c972:	b21a      	sxth	r2, r3
 800c974:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c978:	4313      	orrs	r3, r2
 800c97a:	b21b      	sxth	r3, r3
 800c97c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c97e:	89fb      	ldrh	r3, [r7, #14]
}
 800c980:	4618      	mov	r0, r3
 800c982:	371c      	adds	r7, #28
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9a2:	2b40      	cmp	r3, #64	@ 0x40
 800c9a4:	d005      	beq.n	800c9b2 <USBD_StdDevReq+0x26>
 800c9a6:	2b40      	cmp	r3, #64	@ 0x40
 800c9a8:	d853      	bhi.n	800ca52 <USBD_StdDevReq+0xc6>
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00b      	beq.n	800c9c6 <USBD_StdDevReq+0x3a>
 800c9ae:	2b20      	cmp	r3, #32
 800c9b0:	d14f      	bne.n	800ca52 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	4798      	blx	r3
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9c4:	e04a      	b.n	800ca5c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	785b      	ldrb	r3, [r3, #1]
 800c9ca:	2b09      	cmp	r3, #9
 800c9cc:	d83b      	bhi.n	800ca46 <USBD_StdDevReq+0xba>
 800c9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d4 <USBD_StdDevReq+0x48>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800ca29 	.word	0x0800ca29
 800c9d8:	0800ca3d 	.word	0x0800ca3d
 800c9dc:	0800ca47 	.word	0x0800ca47
 800c9e0:	0800ca33 	.word	0x0800ca33
 800c9e4:	0800ca47 	.word	0x0800ca47
 800c9e8:	0800ca07 	.word	0x0800ca07
 800c9ec:	0800c9fd 	.word	0x0800c9fd
 800c9f0:	0800ca47 	.word	0x0800ca47
 800c9f4:	0800ca1f 	.word	0x0800ca1f
 800c9f8:	0800ca11 	.word	0x0800ca11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f9de 	bl	800cdc0 <USBD_GetDescriptor>
          break;
 800ca04:	e024      	b.n	800ca50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fb6d 	bl	800d0e8 <USBD_SetAddress>
          break;
 800ca0e:	e01f      	b.n	800ca50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fbac 	bl	800d170 <USBD_SetConfig>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	73fb      	strb	r3, [r7, #15]
          break;
 800ca1c:	e018      	b.n	800ca50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fc4b 	bl	800d2bc <USBD_GetConfig>
          break;
 800ca26:	e013      	b.n	800ca50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca28:	6839      	ldr	r1, [r7, #0]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 fc7c 	bl	800d328 <USBD_GetStatus>
          break;
 800ca30:	e00e      	b.n	800ca50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fcab 	bl	800d390 <USBD_SetFeature>
          break;
 800ca3a:	e009      	b.n	800ca50 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fcba 	bl	800d3b8 <USBD_ClrFeature>
          break;
 800ca44:	e004      	b.n	800ca50 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fd11 	bl	800d470 <USBD_CtlError>
          break;
 800ca4e:	bf00      	nop
      }
      break;
 800ca50:	e004      	b.n	800ca5c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 fd0b 	bl	800d470 <USBD_CtlError>
      break;
 800ca5a:	bf00      	nop
  }

  return ret;
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop

0800ca68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca7e:	2b40      	cmp	r3, #64	@ 0x40
 800ca80:	d005      	beq.n	800ca8e <USBD_StdItfReq+0x26>
 800ca82:	2b40      	cmp	r3, #64	@ 0x40
 800ca84:	d82f      	bhi.n	800cae6 <USBD_StdItfReq+0x7e>
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <USBD_StdItfReq+0x26>
 800ca8a:	2b20      	cmp	r3, #32
 800ca8c:	d12b      	bne.n	800cae6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	3b01      	subs	r3, #1
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d81d      	bhi.n	800cad8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	889b      	ldrh	r3, [r3, #4]
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d813      	bhi.n	800cace <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	4798      	blx	r3
 800cab4:	4603      	mov	r3, r0
 800cab6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	88db      	ldrh	r3, [r3, #6]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d110      	bne.n	800cae2 <USBD_StdItfReq+0x7a>
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10d      	bne.n	800cae2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fd9d 	bl	800d606 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cacc:	e009      	b.n	800cae2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fccd 	bl	800d470 <USBD_CtlError>
          break;
 800cad6:	e004      	b.n	800cae2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 fcc8 	bl	800d470 <USBD_CtlError>
          break;
 800cae0:	e000      	b.n	800cae4 <USBD_StdItfReq+0x7c>
          break;
 800cae2:	bf00      	nop
      }
      break;
 800cae4:	e004      	b.n	800caf0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fcc1 	bl	800d470 <USBD_CtlError>
      break;
 800caee:	bf00      	nop
  }

  return ret;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	889b      	ldrh	r3, [r3, #4]
 800cb0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb16:	2b40      	cmp	r3, #64	@ 0x40
 800cb18:	d007      	beq.n	800cb2a <USBD_StdEPReq+0x30>
 800cb1a:	2b40      	cmp	r3, #64	@ 0x40
 800cb1c:	f200 8145 	bhi.w	800cdaa <USBD_StdEPReq+0x2b0>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00c      	beq.n	800cb3e <USBD_StdEPReq+0x44>
 800cb24:	2b20      	cmp	r3, #32
 800cb26:	f040 8140 	bne.w	800cdaa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	4798      	blx	r3
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb3c:	e13a      	b.n	800cdb4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	785b      	ldrb	r3, [r3, #1]
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d007      	beq.n	800cb56 <USBD_StdEPReq+0x5c>
 800cb46:	2b03      	cmp	r3, #3
 800cb48:	f300 8129 	bgt.w	800cd9e <USBD_StdEPReq+0x2a4>
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d07f      	beq.n	800cc50 <USBD_StdEPReq+0x156>
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d03c      	beq.n	800cbce <USBD_StdEPReq+0xd4>
 800cb54:	e123      	b.n	800cd9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d002      	beq.n	800cb68 <USBD_StdEPReq+0x6e>
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	d016      	beq.n	800cb94 <USBD_StdEPReq+0x9a>
 800cb66:	e02c      	b.n	800cbc2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb68:	7bbb      	ldrb	r3, [r7, #14]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00d      	beq.n	800cb8a <USBD_StdEPReq+0x90>
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	2b80      	cmp	r3, #128	@ 0x80
 800cb72:	d00a      	beq.n	800cb8a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f004 fe61 	bl	8011840 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb7e:	2180      	movs	r1, #128	@ 0x80
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f004 fe5d 	bl	8011840 <USBD_LL_StallEP>
 800cb86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb88:	e020      	b.n	800cbcc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fc6f 	bl	800d470 <USBD_CtlError>
              break;
 800cb92:	e01b      	b.n	800cbcc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	885b      	ldrh	r3, [r3, #2]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10e      	bne.n	800cbba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb9c:	7bbb      	ldrb	r3, [r7, #14]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00b      	beq.n	800cbba <USBD_StdEPReq+0xc0>
 800cba2:	7bbb      	ldrb	r3, [r7, #14]
 800cba4:	2b80      	cmp	r3, #128	@ 0x80
 800cba6:	d008      	beq.n	800cbba <USBD_StdEPReq+0xc0>
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	88db      	ldrh	r3, [r3, #6]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d104      	bne.n	800cbba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbb0:	7bbb      	ldrb	r3, [r7, #14]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f004 fe43 	bl	8011840 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fd23 	bl	800d606 <USBD_CtlSendStatus>

              break;
 800cbc0:	e004      	b.n	800cbcc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fc53 	bl	800d470 <USBD_CtlError>
              break;
 800cbca:	bf00      	nop
          }
          break;
 800cbcc:	e0ec      	b.n	800cda8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d002      	beq.n	800cbe0 <USBD_StdEPReq+0xe6>
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d016      	beq.n	800cc0c <USBD_StdEPReq+0x112>
 800cbde:	e030      	b.n	800cc42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00d      	beq.n	800cc02 <USBD_StdEPReq+0x108>
 800cbe6:	7bbb      	ldrb	r3, [r7, #14]
 800cbe8:	2b80      	cmp	r3, #128	@ 0x80
 800cbea:	d00a      	beq.n	800cc02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbec:	7bbb      	ldrb	r3, [r7, #14]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f004 fe25 	bl	8011840 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbf6:	2180      	movs	r1, #128	@ 0x80
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f004 fe21 	bl	8011840 <USBD_LL_StallEP>
 800cbfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc00:	e025      	b.n	800cc4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc02:	6839      	ldr	r1, [r7, #0]
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fc33 	bl	800d470 <USBD_CtlError>
              break;
 800cc0a:	e020      	b.n	800cc4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	885b      	ldrh	r3, [r3, #2]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d11b      	bne.n	800cc4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
 800cc16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d004      	beq.n	800cc28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f004 fe2b 	bl	801187e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fcec 	bl	800d606 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	4798      	blx	r3
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cc40:	e004      	b.n	800cc4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fc13 	bl	800d470 <USBD_CtlError>
              break;
 800cc4a:	e000      	b.n	800cc4e <USBD_StdEPReq+0x154>
              break;
 800cc4c:	bf00      	nop
          }
          break;
 800cc4e:	e0ab      	b.n	800cda8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d002      	beq.n	800cc62 <USBD_StdEPReq+0x168>
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d032      	beq.n	800ccc6 <USBD_StdEPReq+0x1cc>
 800cc60:	e097      	b.n	800cd92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d007      	beq.n	800cc78 <USBD_StdEPReq+0x17e>
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	2b80      	cmp	r3, #128	@ 0x80
 800cc6c:	d004      	beq.n	800cc78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fbfd 	bl	800d470 <USBD_CtlError>
                break;
 800cc76:	e091      	b.n	800cd9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	da0b      	bge.n	800cc98 <USBD_StdEPReq+0x19e>
 800cc80:	7bbb      	ldrb	r3, [r7, #14]
 800cc82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc86:	4613      	mov	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	3310      	adds	r3, #16
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	4413      	add	r3, r2
 800cc94:	3304      	adds	r3, #4
 800cc96:	e00b      	b.n	800ccb0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc98:	7bbb      	ldrb	r3, [r7, #14]
 800cc9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc9e:	4613      	mov	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4413      	add	r3, r2
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	4413      	add	r3, r2
 800ccae:	3304      	adds	r3, #4
 800ccb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2202      	movs	r2, #2
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fc47 	bl	800d552 <USBD_CtlSendData>
              break;
 800ccc4:	e06a      	b.n	800cd9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ccc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	da11      	bge.n	800ccf2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
 800ccd0:	f003 020f 	and.w	r2, r3, #15
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	440b      	add	r3, r1
 800cce0:	3324      	adds	r3, #36	@ 0x24
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d117      	bne.n	800cd18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fbc0 	bl	800d470 <USBD_CtlError>
                  break;
 800ccf0:	e054      	b.n	800cd9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ccf2:	7bbb      	ldrb	r3, [r7, #14]
 800ccf4:	f003 020f 	and.w	r2, r3, #15
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	440b      	add	r3, r1
 800cd04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d104      	bne.n	800cd18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd0e:	6839      	ldr	r1, [r7, #0]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 fbad 	bl	800d470 <USBD_CtlError>
                  break;
 800cd16:	e041      	b.n	800cd9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	da0b      	bge.n	800cd38 <USBD_StdEPReq+0x23e>
 800cd20:	7bbb      	ldrb	r3, [r7, #14]
 800cd22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd26:	4613      	mov	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	3310      	adds	r3, #16
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	4413      	add	r3, r2
 800cd34:	3304      	adds	r3, #4
 800cd36:	e00b      	b.n	800cd50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
 800cd3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd3e:	4613      	mov	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	3304      	adds	r3, #4
 800cd50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd52:	7bbb      	ldrb	r3, [r7, #14]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <USBD_StdEPReq+0x264>
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	2b80      	cmp	r3, #128	@ 0x80
 800cd5c:	d103      	bne.n	800cd66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2200      	movs	r2, #0
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	e00e      	b.n	800cd84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd66:	7bbb      	ldrb	r3, [r7, #14]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f004 fda6 	bl	80118bc <USBD_LL_IsStallEP>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	e002      	b.n	800cd84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2202      	movs	r2, #2
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fbe1 	bl	800d552 <USBD_CtlSendData>
              break;
 800cd90:	e004      	b.n	800cd9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fb6b 	bl	800d470 <USBD_CtlError>
              break;
 800cd9a:	bf00      	nop
          }
          break;
 800cd9c:	e004      	b.n	800cda8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fb65 	bl	800d470 <USBD_CtlError>
          break;
 800cda6:	bf00      	nop
      }
      break;
 800cda8:	e004      	b.n	800cdb4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fb5f 	bl	800d470 <USBD_CtlError>
      break;
 800cdb2:	bf00      	nop
  }

  return ret;
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
	...

0800cdc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	885b      	ldrh	r3, [r3, #2]
 800cdda:	0a1b      	lsrs	r3, r3, #8
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	3b01      	subs	r3, #1
 800cde0:	2b0e      	cmp	r3, #14
 800cde2:	f200 8152 	bhi.w	800d08a <USBD_GetDescriptor+0x2ca>
 800cde6:	a201      	add	r2, pc, #4	@ (adr r2, 800cdec <USBD_GetDescriptor+0x2c>)
 800cde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdec:	0800ce5d 	.word	0x0800ce5d
 800cdf0:	0800ce75 	.word	0x0800ce75
 800cdf4:	0800ceb5 	.word	0x0800ceb5
 800cdf8:	0800d08b 	.word	0x0800d08b
 800cdfc:	0800d08b 	.word	0x0800d08b
 800ce00:	0800d02b 	.word	0x0800d02b
 800ce04:	0800d057 	.word	0x0800d057
 800ce08:	0800d08b 	.word	0x0800d08b
 800ce0c:	0800d08b 	.word	0x0800d08b
 800ce10:	0800d08b 	.word	0x0800d08b
 800ce14:	0800d08b 	.word	0x0800d08b
 800ce18:	0800d08b 	.word	0x0800d08b
 800ce1c:	0800d08b 	.word	0x0800d08b
 800ce20:	0800d08b 	.word	0x0800d08b
 800ce24:	0800ce29 	.word	0x0800ce29
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce2e:	69db      	ldr	r3, [r3, #28]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00b      	beq.n	800ce4c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	7c12      	ldrb	r2, [r2, #16]
 800ce40:	f107 0108 	add.w	r1, r7, #8
 800ce44:	4610      	mov	r0, r2
 800ce46:	4798      	blx	r3
 800ce48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce4a:	e126      	b.n	800d09a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fb0e 	bl	800d470 <USBD_CtlError>
        err++;
 800ce54:	7afb      	ldrb	r3, [r7, #11]
 800ce56:	3301      	adds	r3, #1
 800ce58:	72fb      	strb	r3, [r7, #11]
      break;
 800ce5a:	e11e      	b.n	800d09a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	7c12      	ldrb	r2, [r2, #16]
 800ce68:	f107 0108 	add.w	r1, r7, #8
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	4798      	blx	r3
 800ce70:	60f8      	str	r0, [r7, #12]
      break;
 800ce72:	e112      	b.n	800d09a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	7c1b      	ldrb	r3, [r3, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10d      	bne.n	800ce98 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce84:	f107 0208 	add.w	r2, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3301      	adds	r3, #1
 800ce92:	2202      	movs	r2, #2
 800ce94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce96:	e100      	b.n	800d09a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea0:	f107 0208 	add.w	r2, r7, #8
 800cea4:	4610      	mov	r0, r2
 800cea6:	4798      	blx	r3
 800cea8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3301      	adds	r3, #1
 800ceae:	2202      	movs	r2, #2
 800ceb0:	701a      	strb	r2, [r3, #0]
      break;
 800ceb2:	e0f2      	b.n	800d09a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	885b      	ldrh	r3, [r3, #2]
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b05      	cmp	r3, #5
 800cebc:	f200 80ac 	bhi.w	800d018 <USBD_GetDescriptor+0x258>
 800cec0:	a201      	add	r2, pc, #4	@ (adr r2, 800cec8 <USBD_GetDescriptor+0x108>)
 800cec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec6:	bf00      	nop
 800cec8:	0800cee1 	.word	0x0800cee1
 800cecc:	0800cf15 	.word	0x0800cf15
 800ced0:	0800cf49 	.word	0x0800cf49
 800ced4:	0800cf7d 	.word	0x0800cf7d
 800ced8:	0800cfb1 	.word	0x0800cfb1
 800cedc:	0800cfe5 	.word	0x0800cfe5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00b      	beq.n	800cf04 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	7c12      	ldrb	r2, [r2, #16]
 800cef8:	f107 0108 	add.w	r1, r7, #8
 800cefc:	4610      	mov	r0, r2
 800cefe:	4798      	blx	r3
 800cf00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf02:	e091      	b.n	800d028 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fab2 	bl	800d470 <USBD_CtlError>
            err++;
 800cf0c:	7afb      	ldrb	r3, [r7, #11]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	72fb      	strb	r3, [r7, #11]
          break;
 800cf12:	e089      	b.n	800d028 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	7c12      	ldrb	r2, [r2, #16]
 800cf2c:	f107 0108 	add.w	r1, r7, #8
 800cf30:	4610      	mov	r0, r2
 800cf32:	4798      	blx	r3
 800cf34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf36:	e077      	b.n	800d028 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fa98 	bl	800d470 <USBD_CtlError>
            err++;
 800cf40:	7afb      	ldrb	r3, [r7, #11]
 800cf42:	3301      	adds	r3, #1
 800cf44:	72fb      	strb	r3, [r7, #11]
          break;
 800cf46:	e06f      	b.n	800d028 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00b      	beq.n	800cf6c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	7c12      	ldrb	r2, [r2, #16]
 800cf60:	f107 0108 	add.w	r1, r7, #8
 800cf64:	4610      	mov	r0, r2
 800cf66:	4798      	blx	r3
 800cf68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf6a:	e05d      	b.n	800d028 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fa7e 	bl	800d470 <USBD_CtlError>
            err++;
 800cf74:	7afb      	ldrb	r3, [r7, #11]
 800cf76:	3301      	adds	r3, #1
 800cf78:	72fb      	strb	r3, [r7, #11]
          break;
 800cf7a:	e055      	b.n	800d028 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d00b      	beq.n	800cfa0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	7c12      	ldrb	r2, [r2, #16]
 800cf94:	f107 0108 	add.w	r1, r7, #8
 800cf98:	4610      	mov	r0, r2
 800cf9a:	4798      	blx	r3
 800cf9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf9e:	e043      	b.n	800d028 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fa64 	bl	800d470 <USBD_CtlError>
            err++;
 800cfa8:	7afb      	ldrb	r3, [r7, #11]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	72fb      	strb	r3, [r7, #11]
          break;
 800cfae:	e03b      	b.n	800d028 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00b      	beq.n	800cfd4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfc2:	695b      	ldr	r3, [r3, #20]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	7c12      	ldrb	r2, [r2, #16]
 800cfc8:	f107 0108 	add.w	r1, r7, #8
 800cfcc:	4610      	mov	r0, r2
 800cfce:	4798      	blx	r3
 800cfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfd2:	e029      	b.n	800d028 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fa4a 	bl	800d470 <USBD_CtlError>
            err++;
 800cfdc:	7afb      	ldrb	r3, [r7, #11]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfe2:	e021      	b.n	800d028 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00b      	beq.n	800d008 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	7c12      	ldrb	r2, [r2, #16]
 800cffc:	f107 0108 	add.w	r1, r7, #8
 800d000:	4610      	mov	r0, r2
 800d002:	4798      	blx	r3
 800d004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d006:	e00f      	b.n	800d028 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fa30 	bl	800d470 <USBD_CtlError>
            err++;
 800d010:	7afb      	ldrb	r3, [r7, #11]
 800d012:	3301      	adds	r3, #1
 800d014:	72fb      	strb	r3, [r7, #11]
          break;
 800d016:	e007      	b.n	800d028 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa28 	bl	800d470 <USBD_CtlError>
          err++;
 800d020:	7afb      	ldrb	r3, [r7, #11]
 800d022:	3301      	adds	r3, #1
 800d024:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d026:	bf00      	nop
      }
      break;
 800d028:	e037      	b.n	800d09a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7c1b      	ldrb	r3, [r3, #16]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d109      	bne.n	800d046 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03a:	f107 0208 	add.w	r2, r7, #8
 800d03e:	4610      	mov	r0, r2
 800d040:	4798      	blx	r3
 800d042:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d044:	e029      	b.n	800d09a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d046:	6839      	ldr	r1, [r7, #0]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fa11 	bl	800d470 <USBD_CtlError>
        err++;
 800d04e:	7afb      	ldrb	r3, [r7, #11]
 800d050:	3301      	adds	r3, #1
 800d052:	72fb      	strb	r3, [r7, #11]
      break;
 800d054:	e021      	b.n	800d09a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	7c1b      	ldrb	r3, [r3, #16]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10d      	bne.n	800d07a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d066:	f107 0208 	add.w	r2, r7, #8
 800d06a:	4610      	mov	r0, r2
 800d06c:	4798      	blx	r3
 800d06e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3301      	adds	r3, #1
 800d074:	2207      	movs	r2, #7
 800d076:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d078:	e00f      	b.n	800d09a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f9f7 	bl	800d470 <USBD_CtlError>
        err++;
 800d082:	7afb      	ldrb	r3, [r7, #11]
 800d084:	3301      	adds	r3, #1
 800d086:	72fb      	strb	r3, [r7, #11]
      break;
 800d088:	e007      	b.n	800d09a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f9ef 	bl	800d470 <USBD_CtlError>
      err++;
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	3301      	adds	r3, #1
 800d096:	72fb      	strb	r3, [r7, #11]
      break;
 800d098:	bf00      	nop
  }

  if (err != 0U)
 800d09a:	7afb      	ldrb	r3, [r7, #11]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d11e      	bne.n	800d0de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	88db      	ldrh	r3, [r3, #6]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d016      	beq.n	800d0d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d0a8:	893b      	ldrh	r3, [r7, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00e      	beq.n	800d0cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	88da      	ldrh	r2, [r3, #6]
 800d0b2:	893b      	ldrh	r3, [r7, #8]
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	bf28      	it	cs
 800d0b8:	4613      	movcs	r3, r2
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0be:	893b      	ldrh	r3, [r7, #8]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	68f9      	ldr	r1, [r7, #12]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 fa44 	bl	800d552 <USBD_CtlSendData>
 800d0ca:	e009      	b.n	800d0e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f9ce 	bl	800d470 <USBD_CtlError>
 800d0d4:	e004      	b.n	800d0e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fa95 	bl	800d606 <USBD_CtlSendStatus>
 800d0dc:	e000      	b.n	800d0e0 <USBD_GetDescriptor+0x320>
    return;
 800d0de:	bf00      	nop
  }
}
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop

0800d0e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	889b      	ldrh	r3, [r3, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d131      	bne.n	800d15e <USBD_SetAddress+0x76>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	88db      	ldrh	r3, [r3, #6]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d12d      	bne.n	800d15e <USBD_SetAddress+0x76>
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	885b      	ldrh	r3, [r3, #2]
 800d106:	2b7f      	cmp	r3, #127	@ 0x7f
 800d108:	d829      	bhi.n	800d15e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	885b      	ldrh	r3, [r3, #2]
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d114:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b03      	cmp	r3, #3
 800d120:	d104      	bne.n	800d12c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f9a3 	bl	800d470 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d12a:	e01d      	b.n	800d168 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	7bfa      	ldrb	r2, [r7, #15]
 800d130:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	4619      	mov	r1, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f004 fbeb 	bl	8011914 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fa61 	bl	800d606 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d004      	beq.n	800d154 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2202      	movs	r2, #2
 800d14e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d152:	e009      	b.n	800d168 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d15c:	e004      	b.n	800d168 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 f985 	bl	800d470 <USBD_CtlError>
  }
}
 800d166:	bf00      	nop
 800d168:	bf00      	nop
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	885b      	ldrh	r3, [r3, #2]
 800d182:	b2da      	uxtb	r2, r3
 800d184:	4b4c      	ldr	r3, [pc, #304]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d186:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d188:	4b4b      	ldr	r3, [pc, #300]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d905      	bls.n	800d19c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d190:	6839      	ldr	r1, [r7, #0]
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f96c 	bl	800d470 <USBD_CtlError>
    return USBD_FAIL;
 800d198:	2303      	movs	r3, #3
 800d19a:	e088      	b.n	800d2ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d002      	beq.n	800d1ae <USBD_SetConfig+0x3e>
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	d025      	beq.n	800d1f8 <USBD_SetConfig+0x88>
 800d1ac:	e071      	b.n	800d292 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1ae:	4b42      	ldr	r3, [pc, #264]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d01c      	beq.n	800d1f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d1b6:	4b40      	ldr	r3, [pc, #256]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1c0:	4b3d      	ldr	r3, [pc, #244]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff f992 	bl	800c4f0 <USBD_SetClassConfig>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d004      	beq.n	800d1e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f949 	bl	800d470 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d1de:	e065      	b.n	800d2ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fa10 	bl	800d606 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2203      	movs	r2, #3
 800d1ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d1ee:	e05d      	b.n	800d2ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fa08 	bl	800d606 <USBD_CtlSendStatus>
      break;
 800d1f6:	e059      	b.n	800d2ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d1f8:	4b2f      	ldr	r3, [pc, #188]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d112      	bne.n	800d226 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2202      	movs	r2, #2
 800d204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d208:	4b2b      	ldr	r3, [pc, #172]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	461a      	mov	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d212:	4b29      	ldr	r3, [pc, #164]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7ff f985 	bl	800c528 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f9f1 	bl	800d606 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d224:	e042      	b.n	800d2ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d226:	4b24      	ldr	r3, [pc, #144]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	461a      	mov	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	429a      	cmp	r2, r3
 800d232:	d02a      	beq.n	800d28a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	4619      	mov	r1, r3
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff f973 	bl	800c528 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d242:	4b1d      	ldr	r3, [pc, #116]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	461a      	mov	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d24c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	4619      	mov	r1, r3
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff f94c 	bl	800c4f0 <USBD_SetClassConfig>
 800d258:	4603      	mov	r3, r0
 800d25a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00f      	beq.n	800d282 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f903 	bl	800d470 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff f958 	bl	800c528 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2202      	movs	r2, #2
 800d27c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d280:	e014      	b.n	800d2ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f9bf 	bl	800d606 <USBD_CtlSendStatus>
      break;
 800d288:	e010      	b.n	800d2ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f9bb 	bl	800d606 <USBD_CtlSendStatus>
      break;
 800d290:	e00c      	b.n	800d2ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f8eb 	bl	800d470 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d29a:	4b07      	ldr	r3, [pc, #28]	@ (800d2b8 <USBD_SetConfig+0x148>)
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7ff f941 	bl	800c528 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2aa:	bf00      	nop
  }

  return ret;
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20002d04 	.word	0x20002d04

0800d2bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	88db      	ldrh	r3, [r3, #6]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d004      	beq.n	800d2d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f8cd 	bl	800d470 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2d6:	e023      	b.n	800d320 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	dc02      	bgt.n	800d2ea <USBD_GetConfig+0x2e>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	dc03      	bgt.n	800d2f0 <USBD_GetConfig+0x34>
 800d2e8:	e015      	b.n	800d316 <USBD_GetConfig+0x5a>
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d00b      	beq.n	800d306 <USBD_GetConfig+0x4a>
 800d2ee:	e012      	b.n	800d316 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	3308      	adds	r3, #8
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f927 	bl	800d552 <USBD_CtlSendData>
        break;
 800d304:	e00c      	b.n	800d320 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3304      	adds	r3, #4
 800d30a:	2201      	movs	r2, #1
 800d30c:	4619      	mov	r1, r3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f91f 	bl	800d552 <USBD_CtlSendData>
        break;
 800d314:	e004      	b.n	800d320 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f8a9 	bl	800d470 <USBD_CtlError>
        break;
 800d31e:	bf00      	nop
}
 800d320:	bf00      	nop
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	3b01      	subs	r3, #1
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d81e      	bhi.n	800d37e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	88db      	ldrh	r3, [r3, #6]
 800d344:	2b02      	cmp	r3, #2
 800d346:	d004      	beq.n	800d352 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f890 	bl	800d470 <USBD_CtlError>
        break;
 800d350:	e01a      	b.n	800d388 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2201      	movs	r2, #1
 800d356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d005      	beq.n	800d36e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	f043 0202 	orr.w	r2, r3, #2
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	330c      	adds	r3, #12
 800d372:	2202      	movs	r2, #2
 800d374:	4619      	mov	r1, r3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f8eb 	bl	800d552 <USBD_CtlSendData>
      break;
 800d37c:	e004      	b.n	800d388 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f875 	bl	800d470 <USBD_CtlError>
      break;
 800d386:	bf00      	nop
  }
}
 800d388:	bf00      	nop
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	885b      	ldrh	r3, [r3, #2]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d106      	bne.n	800d3b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f92b 	bl	800d606 <USBD_CtlSendStatus>
  }
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d80b      	bhi.n	800d3e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	885b      	ldrh	r3, [r3, #2]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d10c      	bne.n	800d3f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f910 	bl	800d606 <USBD_CtlSendStatus>
      }
      break;
 800d3e6:	e004      	b.n	800d3f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f840 	bl	800d470 <USBD_CtlError>
      break;
 800d3f0:	e000      	b.n	800d3f4 <USBD_ClrFeature+0x3c>
      break;
 800d3f2:	bf00      	nop
  }
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	781a      	ldrb	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3301      	adds	r3, #1
 800d416:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	781a      	ldrb	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3301      	adds	r3, #1
 800d424:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff fa92 	bl	800c950 <SWAPBYTE>
 800d42c:	4603      	mov	r3, r0
 800d42e:	461a      	mov	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	3301      	adds	r3, #1
 800d438:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3301      	adds	r3, #1
 800d43e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7ff fa85 	bl	800c950 <SWAPBYTE>
 800d446:	4603      	mov	r3, r0
 800d448:	461a      	mov	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3301      	adds	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	3301      	adds	r3, #1
 800d458:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7ff fa78 	bl	800c950 <SWAPBYTE>
 800d460:	4603      	mov	r3, r0
 800d462:	461a      	mov	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	80da      	strh	r2, [r3, #6]
}
 800d468:	bf00      	nop
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d47a:	2180      	movs	r1, #128	@ 0x80
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f004 f9df 	bl	8011840 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d482:	2100      	movs	r1, #0
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f004 f9db 	bl	8011840 <USBD_LL_StallEP>
}
 800d48a:	bf00      	nop
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b086      	sub	sp, #24
 800d496:	af00      	add	r7, sp, #0
 800d498:	60f8      	str	r0, [r7, #12]
 800d49a:	60b9      	str	r1, [r7, #8]
 800d49c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d036      	beq.n	800d516 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d4ac:	6938      	ldr	r0, [r7, #16]
 800d4ae:	f000 f836 	bl	800d51e <USBD_GetLen>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	7812      	ldrb	r2, [r2, #0]
 800d4ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d4d2:	7dfb      	ldrb	r3, [r7, #23]
 800d4d4:	68ba      	ldr	r2, [r7, #8]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	2203      	movs	r2, #3
 800d4da:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d4e2:	e013      	b.n	800d50c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d4e4:	7dfb      	ldrb	r3, [r7, #23]
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	693a      	ldr	r2, [r7, #16]
 800d4ec:	7812      	ldrb	r2, [r2, #0]
 800d4ee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	613b      	str	r3, [r7, #16]
    idx++;
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	4413      	add	r3, r2
 800d502:	2200      	movs	r2, #0
 800d504:	701a      	strb	r2, [r3, #0]
    idx++;
 800d506:	7dfb      	ldrb	r3, [r7, #23]
 800d508:	3301      	adds	r3, #1
 800d50a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e7      	bne.n	800d4e4 <USBD_GetString+0x52>
 800d514:	e000      	b.n	800d518 <USBD_GetString+0x86>
    return;
 800d516:	bf00      	nop
  }
}
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d51e:	b480      	push	{r7}
 800d520:	b085      	sub	sp, #20
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d526:	2300      	movs	r3, #0
 800d528:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d52e:	e005      	b.n	800d53c <USBD_GetLen+0x1e>
  {
    len++;
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	3301      	adds	r3, #1
 800d534:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	3301      	adds	r3, #1
 800d53a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1f5      	bne.n	800d530 <USBD_GetLen+0x12>
  }

  return len;
 800d544:	7bfb      	ldrb	r3, [r7, #15]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b084      	sub	sp, #16
 800d556:	af00      	add	r7, sp, #0
 800d558:	60f8      	str	r0, [r7, #12]
 800d55a:	60b9      	str	r1, [r7, #8]
 800d55c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2202      	movs	r2, #2
 800d562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	2100      	movs	r1, #0
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f004 f9ea 	bl	8011952 <USBD_LL_Transmit>

  return USBD_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	2100      	movs	r1, #0
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f004 f9d9 	bl	8011952 <USBD_LL_Transmit>

  return USBD_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	60f8      	str	r0, [r7, #12]
 800d5b2:	60b9      	str	r1, [r7, #8]
 800d5b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2203      	movs	r2, #3
 800d5ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f004 f9dd 	bl	8011994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f004 f9cc 	bl	8011994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b082      	sub	sp, #8
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2204      	movs	r2, #4
 800d612:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d616:	2300      	movs	r3, #0
 800d618:	2200      	movs	r2, #0
 800d61a:	2100      	movs	r1, #0
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f004 f998 	bl	8011952 <USBD_LL_Transmit>

  return USBD_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2205      	movs	r2, #5
 800d638:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d63c:	2300      	movs	r3, #0
 800d63e:	2200      	movs	r2, #0
 800d640:	2100      	movs	r1, #0
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f004 f9a6 	bl	8011994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <__NVIC_SetPriority>:
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4603      	mov	r3, r0
 800d65c:	6039      	str	r1, [r7, #0]
 800d65e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d664:	2b00      	cmp	r3, #0
 800d666:	db0a      	blt.n	800d67e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	490c      	ldr	r1, [pc, #48]	@ (800d6a0 <__NVIC_SetPriority+0x4c>)
 800d66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d672:	0112      	lsls	r2, r2, #4
 800d674:	b2d2      	uxtb	r2, r2
 800d676:	440b      	add	r3, r1
 800d678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d67c:	e00a      	b.n	800d694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	b2da      	uxtb	r2, r3
 800d682:	4908      	ldr	r1, [pc, #32]	@ (800d6a4 <__NVIC_SetPriority+0x50>)
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	f003 030f 	and.w	r3, r3, #15
 800d68a:	3b04      	subs	r3, #4
 800d68c:	0112      	lsls	r2, r2, #4
 800d68e:	b2d2      	uxtb	r2, r2
 800d690:	440b      	add	r3, r1
 800d692:	761a      	strb	r2, [r3, #24]
}
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	e000e100 	.word	0xe000e100
 800d6a4:	e000ed00 	.word	0xe000ed00

0800d6a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d6ac:	4b05      	ldr	r3, [pc, #20]	@ (800d6c4 <SysTick_Handler+0x1c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d6b0:	f002 fb9e 	bl	800fdf0 <xTaskGetSchedulerState>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d001      	beq.n	800d6be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d6ba:	f003 fa95 	bl	8010be8 <xPortSysTickHandler>
  }
}
 800d6be:	bf00      	nop
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	e000e010 	.word	0xe000e010

0800d6c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	f06f 0004 	mvn.w	r0, #4
 800d6d2:	f7ff ffbf 	bl	800d654 <__NVIC_SetPriority>
#endif
}
 800d6d6:	bf00      	nop
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6e2:	f3ef 8305 	mrs	r3, IPSR
 800d6e6:	603b      	str	r3, [r7, #0]
  return(result);
 800d6e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d6ee:	f06f 0305 	mvn.w	r3, #5
 800d6f2:	607b      	str	r3, [r7, #4]
 800d6f4:	e00c      	b.n	800d710 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d720 <osKernelInitialize+0x44>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d105      	bne.n	800d70a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d6fe:	4b08      	ldr	r3, [pc, #32]	@ (800d720 <osKernelInitialize+0x44>)
 800d700:	2201      	movs	r2, #1
 800d702:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d704:	2300      	movs	r3, #0
 800d706:	607b      	str	r3, [r7, #4]
 800d708:	e002      	b.n	800d710 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d70a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d70e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d710:	687b      	ldr	r3, [r7, #4]
}
 800d712:	4618      	mov	r0, r3
 800d714:	370c      	adds	r7, #12
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	20002d08 	.word	0x20002d08

0800d724 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d72a:	f3ef 8305 	mrs	r3, IPSR
 800d72e:	603b      	str	r3, [r7, #0]
  return(result);
 800d730:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d736:	f06f 0305 	mvn.w	r3, #5
 800d73a:	607b      	str	r3, [r7, #4]
 800d73c:	e010      	b.n	800d760 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d73e:	4b0b      	ldr	r3, [pc, #44]	@ (800d76c <osKernelStart+0x48>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d109      	bne.n	800d75a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d746:	f7ff ffbf 	bl	800d6c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d74a:	4b08      	ldr	r3, [pc, #32]	@ (800d76c <osKernelStart+0x48>)
 800d74c:	2202      	movs	r2, #2
 800d74e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d750:	f001 fec8 	bl	800f4e4 <vTaskStartScheduler>
      stat = osOK;
 800d754:	2300      	movs	r3, #0
 800d756:	607b      	str	r3, [r7, #4]
 800d758:	e002      	b.n	800d760 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d75a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d75e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d760:	687b      	ldr	r3, [r7, #4]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20002d08 	.word	0x20002d08

0800d770 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d776:	f3ef 8305 	mrs	r3, IPSR
 800d77a:	603b      	str	r3, [r7, #0]
  return(result);
 800d77c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d782:	f001 ffdb 	bl	800f73c <xTaskGetTickCountFromISR>
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	e002      	b.n	800d790 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d78a:	f001 ffc7 	bl	800f71c <xTaskGetTickCount>
 800d78e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d790:	687b      	ldr	r3, [r7, #4]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800d79a:	b480      	push	{r7}
 800d79c:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800d79e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08e      	sub	sp, #56	@ 0x38
 800d7b0:	af04      	add	r7, sp, #16
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7bc:	f3ef 8305 	mrs	r3, IPSR
 800d7c0:	617b      	str	r3, [r7, #20]
  return(result);
 800d7c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d17f      	bne.n	800d8c8 <osThreadNew+0x11c>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d07c      	beq.n	800d8c8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d7ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d7d2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d7d4:	2318      	movs	r3, #24
 800d7d6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d7dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d7e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d045      	beq.n	800d874 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d002      	beq.n	800d7f6 <osThreadNew+0x4a>
        name = attr->name;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d008      	beq.n	800d81c <osThreadNew+0x70>
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	2b38      	cmp	r3, #56	@ 0x38
 800d80e:	d805      	bhi.n	800d81c <osThreadNew+0x70>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	f003 0301 	and.w	r3, r3, #1
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <osThreadNew+0x74>
        return (NULL);
 800d81c:	2300      	movs	r3, #0
 800d81e:	e054      	b.n	800d8ca <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	089b      	lsrs	r3, r3, #2
 800d82e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00e      	beq.n	800d856 <osThreadNew+0xaa>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	2bab      	cmp	r3, #171	@ 0xab
 800d83e:	d90a      	bls.n	800d856 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d844:	2b00      	cmp	r3, #0
 800d846:	d006      	beq.n	800d856 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <osThreadNew+0xaa>
        mem = 1;
 800d850:	2301      	movs	r3, #1
 800d852:	61bb      	str	r3, [r7, #24]
 800d854:	e010      	b.n	800d878 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10c      	bne.n	800d878 <osThreadNew+0xcc>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d108      	bne.n	800d878 <osThreadNew+0xcc>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d104      	bne.n	800d878 <osThreadNew+0xcc>
          mem = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	61bb      	str	r3, [r7, #24]
 800d872:	e001      	b.n	800d878 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d874:	2300      	movs	r3, #0
 800d876:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d110      	bne.n	800d8a0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d886:	9202      	str	r2, [sp, #8]
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6a3a      	ldr	r2, [r7, #32]
 800d892:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f001 fc31 	bl	800f0fc <xTaskCreateStatic>
 800d89a:	4603      	mov	r3, r0
 800d89c:	613b      	str	r3, [r7, #16]
 800d89e:	e013      	b.n	800d8c8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d110      	bne.n	800d8c8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	f107 0310 	add.w	r3, r7, #16
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f001 fc7f 	bl	800f1bc <xTaskCreate>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d001      	beq.n	800d8c8 <osThreadNew+0x11c>
            hTask = NULL;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d8c8:	693b      	ldr	r3, [r7, #16]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3728      	adds	r7, #40	@ 0x28
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8da:	f3ef 8305 	mrs	r3, IPSR
 800d8de:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d003      	beq.n	800d8ee <osDelay+0x1c>
    stat = osErrorISR;
 800d8e6:	f06f 0305 	mvn.w	r3, #5
 800d8ea:	60fb      	str	r3, [r7, #12]
 800d8ec:	e007      	b.n	800d8fe <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <osDelay+0x2c>
      vTaskDelay(ticks);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f001 fdbd 	bl	800f478 <vTaskDelay>
    }
  }

  return (stat);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d908:	b580      	push	{r7, lr}
 800d90a:	b088      	sub	sp, #32
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d910:	2300      	movs	r3, #0
 800d912:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d914:	f3ef 8305 	mrs	r3, IPSR
 800d918:	60bb      	str	r3, [r7, #8]
  return(result);
 800d91a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d174      	bne.n	800da0a <osMutexNew+0x102>
    if (attr != NULL) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <osMutexNew+0x26>
      type = attr->attr_bits;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	61bb      	str	r3, [r7, #24]
 800d92c:	e001      	b.n	800d932 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d92e:	2300      	movs	r3, #0
 800d930:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	f003 0301 	and.w	r3, r3, #1
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <osMutexNew+0x3a>
      rmtx = 1U;
 800d93c:	2301      	movs	r3, #1
 800d93e:	617b      	str	r3, [r7, #20]
 800d940:	e001      	b.n	800d946 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d942:	2300      	movs	r3, #0
 800d944:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	f003 0308 	and.w	r3, r3, #8
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d15c      	bne.n	800da0a <osMutexNew+0x102>
      mem = -1;
 800d950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d954:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d015      	beq.n	800d988 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d006      	beq.n	800d972 <osMutexNew+0x6a>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	2b4f      	cmp	r3, #79	@ 0x4f
 800d96a:	d902      	bls.n	800d972 <osMutexNew+0x6a>
          mem = 1;
 800d96c:	2301      	movs	r3, #1
 800d96e:	613b      	str	r3, [r7, #16]
 800d970:	e00c      	b.n	800d98c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d108      	bne.n	800d98c <osMutexNew+0x84>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d104      	bne.n	800d98c <osMutexNew+0x84>
            mem = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	613b      	str	r3, [r7, #16]
 800d986:	e001      	b.n	800d98c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d988:	2300      	movs	r3, #0
 800d98a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d112      	bne.n	800d9b8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d007      	beq.n	800d9a8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	4619      	mov	r1, r3
 800d99e:	2004      	movs	r0, #4
 800d9a0:	f000 fc3f 	bl	800e222 <xQueueCreateMutexStatic>
 800d9a4:	61f8      	str	r0, [r7, #28]
 800d9a6:	e016      	b.n	800d9d6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	2001      	movs	r0, #1
 800d9b0:	f000 fc37 	bl	800e222 <xQueueCreateMutexStatic>
 800d9b4:	61f8      	str	r0, [r7, #28]
 800d9b6:	e00e      	b.n	800d9d6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10b      	bne.n	800d9d6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d004      	beq.n	800d9ce <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d9c4:	2004      	movs	r0, #4
 800d9c6:	f000 fc14 	bl	800e1f2 <xQueueCreateMutex>
 800d9ca:	61f8      	str	r0, [r7, #28]
 800d9cc:	e003      	b.n	800d9d6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d9ce:	2001      	movs	r0, #1
 800d9d0:	f000 fc0f 	bl	800e1f2 <xQueueCreateMutex>
 800d9d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00c      	beq.n	800d9f6 <osMutexNew+0xee>
        if (attr != NULL) {
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <osMutexNew+0xe2>
          name = attr->name;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	e001      	b.n	800d9ee <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d9ee:	68f9      	ldr	r1, [r7, #12]
 800d9f0:	69f8      	ldr	r0, [r7, #28]
 800d9f2:	f001 fafb 	bl	800efec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d006      	beq.n	800da0a <osMutexNew+0x102>
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	f043 0301 	orr.w	r3, r3, #1
 800da08:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800da0a:	69fb      	ldr	r3, [r7, #28]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f023 0301 	bic.w	r3, r3, #1
 800da24:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800da2e:	2300      	movs	r3, #0
 800da30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da32:	f3ef 8305 	mrs	r3, IPSR
 800da36:	60bb      	str	r3, [r7, #8]
  return(result);
 800da38:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800da3e:	f06f 0305 	mvn.w	r3, #5
 800da42:	617b      	str	r3, [r7, #20]
 800da44:	e02c      	b.n	800daa0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d103      	bne.n	800da54 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800da4c:	f06f 0303 	mvn.w	r3, #3
 800da50:	617b      	str	r3, [r7, #20]
 800da52:	e025      	b.n	800daa0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d011      	beq.n	800da7e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6938      	ldr	r0, [r7, #16]
 800da5e:	f000 fc30 	bl	800e2c2 <xQueueTakeMutexRecursive>
 800da62:	4603      	mov	r3, r0
 800da64:	2b01      	cmp	r3, #1
 800da66:	d01b      	beq.n	800daa0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800da6e:	f06f 0301 	mvn.w	r3, #1
 800da72:	617b      	str	r3, [r7, #20]
 800da74:	e014      	b.n	800daa0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800da76:	f06f 0302 	mvn.w	r3, #2
 800da7a:	617b      	str	r3, [r7, #20]
 800da7c:	e010      	b.n	800daa0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6938      	ldr	r0, [r7, #16]
 800da82:	f000 ffd5 	bl	800ea30 <xQueueSemaphoreTake>
 800da86:	4603      	mov	r3, r0
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d009      	beq.n	800daa0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800da92:	f06f 0301 	mvn.w	r3, #1
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	e002      	b.n	800daa0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800da9a:	f06f 0302 	mvn.w	r3, #2
 800da9e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800daa0:	697b      	ldr	r3, [r7, #20]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800daaa:	b580      	push	{r7, lr}
 800daac:	b086      	sub	sp, #24
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f023 0301 	bic.w	r3, r3, #1
 800dab8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f003 0301 	and.w	r3, r3, #1
 800dac0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac6:	f3ef 8305 	mrs	r3, IPSR
 800daca:	60bb      	str	r3, [r7, #8]
  return(result);
 800dacc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <osMutexRelease+0x30>
    stat = osErrorISR;
 800dad2:	f06f 0305 	mvn.w	r3, #5
 800dad6:	617b      	str	r3, [r7, #20]
 800dad8:	e01f      	b.n	800db1a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d103      	bne.n	800dae8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800dae0:	f06f 0303 	mvn.w	r3, #3
 800dae4:	617b      	str	r3, [r7, #20]
 800dae6:	e018      	b.n	800db1a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d009      	beq.n	800db02 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800daee:	6938      	ldr	r0, [r7, #16]
 800daf0:	f000 fbb2 	bl	800e258 <xQueueGiveMutexRecursive>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d00f      	beq.n	800db1a <osMutexRelease+0x70>
        stat = osErrorResource;
 800dafa:	f06f 0302 	mvn.w	r3, #2
 800dafe:	617b      	str	r3, [r7, #20]
 800db00:	e00b      	b.n	800db1a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800db02:	2300      	movs	r3, #0
 800db04:	2200      	movs	r2, #0
 800db06:	2100      	movs	r1, #0
 800db08:	6938      	ldr	r0, [r7, #16]
 800db0a:	f000 fc7f 	bl	800e40c <xQueueGenericSend>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b01      	cmp	r3, #1
 800db12:	d002      	beq.n	800db1a <osMutexRelease+0x70>
        stat = osErrorResource;
 800db14:	f06f 0302 	mvn.w	r3, #2
 800db18:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800db1a:	697b      	ldr	r3, [r7, #20]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3718      	adds	r7, #24
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800db24:	b580      	push	{r7, lr}
 800db26:	b08a      	sub	sp, #40	@ 0x28
 800db28:	af02      	add	r7, sp, #8
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800db30:	2300      	movs	r3, #0
 800db32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db34:	f3ef 8305 	mrs	r3, IPSR
 800db38:	613b      	str	r3, [r7, #16]
  return(result);
 800db3a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d175      	bne.n	800dc2c <osSemaphoreNew+0x108>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d072      	beq.n	800dc2c <osSemaphoreNew+0x108>
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d86e      	bhi.n	800dc2c <osSemaphoreNew+0x108>
    mem = -1;
 800db4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d015      	beq.n	800db86 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d006      	beq.n	800db70 <osSemaphoreNew+0x4c>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	2b4f      	cmp	r3, #79	@ 0x4f
 800db68:	d902      	bls.n	800db70 <osSemaphoreNew+0x4c>
        mem = 1;
 800db6a:	2301      	movs	r3, #1
 800db6c:	61bb      	str	r3, [r7, #24]
 800db6e:	e00c      	b.n	800db8a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <osSemaphoreNew+0x66>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d104      	bne.n	800db8a <osSemaphoreNew+0x66>
          mem = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	61bb      	str	r3, [r7, #24]
 800db84:	e001      	b.n	800db8a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db90:	d04c      	beq.n	800dc2c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d128      	bne.n	800dbea <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d10a      	bne.n	800dbb4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	2203      	movs	r2, #3
 800dba4:	9200      	str	r2, [sp, #0]
 800dba6:	2200      	movs	r2, #0
 800dba8:	2100      	movs	r1, #0
 800dbaa:	2001      	movs	r0, #1
 800dbac:	f000 fa2c 	bl	800e008 <xQueueGenericCreateStatic>
 800dbb0:	61f8      	str	r0, [r7, #28]
 800dbb2:	e005      	b.n	800dbc0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800dbb4:	2203      	movs	r2, #3
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	2001      	movs	r0, #1
 800dbba:	f000 faa2 	bl	800e102 <xQueueGenericCreate>
 800dbbe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d022      	beq.n	800dc0c <osSemaphoreNew+0xe8>
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d01f      	beq.n	800dc0c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dbcc:	2300      	movs	r3, #0
 800dbce:	2200      	movs	r2, #0
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	69f8      	ldr	r0, [r7, #28]
 800dbd4:	f000 fc1a 	bl	800e40c <xQueueGenericSend>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d016      	beq.n	800dc0c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dbde:	69f8      	ldr	r0, [r7, #28]
 800dbe0:	f001 f8b8 	bl	800ed54 <vQueueDelete>
            hSemaphore = NULL;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	61fb      	str	r3, [r7, #28]
 800dbe8:	e010      	b.n	800dc0c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d108      	bne.n	800dc02 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	68b9      	ldr	r1, [r7, #8]
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 fb99 	bl	800e330 <xQueueCreateCountingSemaphoreStatic>
 800dbfe:	61f8      	str	r0, [r7, #28]
 800dc00:	e004      	b.n	800dc0c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 fbcc 	bl	800e3a2 <xQueueCreateCountingSemaphore>
 800dc0a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00c      	beq.n	800dc2c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d003      	beq.n	800dc20 <osSemaphoreNew+0xfc>
          name = attr->name;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	617b      	str	r3, [r7, #20]
 800dc1e:	e001      	b.n	800dc24 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800dc20:	2300      	movs	r3, #0
 800dc22:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dc24:	6979      	ldr	r1, [r7, #20]
 800dc26:	69f8      	ldr	r0, [r7, #28]
 800dc28:	f001 f9e0 	bl	800efec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3720      	adds	r7, #32
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
	...

0800dc38 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d103      	bne.n	800dc58 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dc50:	f06f 0303 	mvn.w	r3, #3
 800dc54:	617b      	str	r3, [r7, #20]
 800dc56:	e039      	b.n	800dccc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc58:	f3ef 8305 	mrs	r3, IPSR
 800dc5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d022      	beq.n	800dcaa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800dc6a:	f06f 0303 	mvn.w	r3, #3
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	e02c      	b.n	800dccc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800dc72:	2300      	movs	r3, #0
 800dc74:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dc76:	f107 0308 	add.w	r3, r7, #8
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	6938      	ldr	r0, [r7, #16]
 800dc80:	f000 ffe6 	bl	800ec50 <xQueueReceiveFromISR>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d003      	beq.n	800dc92 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800dc8a:	f06f 0302 	mvn.w	r3, #2
 800dc8e:	617b      	str	r3, [r7, #20]
 800dc90:	e01c      	b.n	800dccc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d019      	beq.n	800dccc <osSemaphoreAcquire+0x94>
 800dc98:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd8 <osSemaphoreAcquire+0xa0>)
 800dc9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	e010      	b.n	800dccc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6938      	ldr	r0, [r7, #16]
 800dcae:	f000 febf 	bl	800ea30 <xQueueSemaphoreTake>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d009      	beq.n	800dccc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d003      	beq.n	800dcc6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800dcbe:	f06f 0301 	mvn.w	r3, #1
 800dcc2:	617b      	str	r3, [r7, #20]
 800dcc4:	e002      	b.n	800dccc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800dcc6:	f06f 0302 	mvn.w	r3, #2
 800dcca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dccc:	697b      	ldr	r3, [r7, #20]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	e000ed04 	.word	0xe000ed04

0800dcdc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d103      	bne.n	800dcfa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800dcf2:	f06f 0303 	mvn.w	r3, #3
 800dcf6:	617b      	str	r3, [r7, #20]
 800dcf8:	e02c      	b.n	800dd54 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcfa:	f3ef 8305 	mrs	r3, IPSR
 800dcfe:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd00:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d01a      	beq.n	800dd3c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dd0a:	f107 0308 	add.w	r3, r7, #8
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6938      	ldr	r0, [r7, #16]
 800dd12:	f000 fd1b 	bl	800e74c <xQueueGiveFromISR>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d003      	beq.n	800dd24 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800dd1c:	f06f 0302 	mvn.w	r3, #2
 800dd20:	617b      	str	r3, [r7, #20]
 800dd22:	e017      	b.n	800dd54 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d014      	beq.n	800dd54 <osSemaphoreRelease+0x78>
 800dd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd60 <osSemaphoreRelease+0x84>)
 800dd2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd30:	601a      	str	r2, [r3, #0]
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	e00b      	b.n	800dd54 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	2200      	movs	r2, #0
 800dd40:	2100      	movs	r1, #0
 800dd42:	6938      	ldr	r0, [r7, #16]
 800dd44:	f000 fb62 	bl	800e40c <xQueueGenericSend>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d002      	beq.n	800dd54 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800dd4e:	f06f 0302 	mvn.w	r3, #2
 800dd52:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dd54:	697b      	ldr	r3, [r7, #20]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	e000ed04 	.word	0xe000ed04

0800dd64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	4a07      	ldr	r2, [pc, #28]	@ (800dd90 <vApplicationGetIdleTaskMemory+0x2c>)
 800dd74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	4a06      	ldr	r2, [pc, #24]	@ (800dd94 <vApplicationGetIdleTaskMemory+0x30>)
 800dd7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dd82:	601a      	str	r2, [r3, #0]
}
 800dd84:	bf00      	nop
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	20002d0c 	.word	0x20002d0c
 800dd94:	20002db8 	.word	0x20002db8

0800dd98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	4a07      	ldr	r2, [pc, #28]	@ (800ddc4 <vApplicationGetTimerTaskMemory+0x2c>)
 800dda8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	4a06      	ldr	r2, [pc, #24]	@ (800ddc8 <vApplicationGetTimerTaskMemory+0x30>)
 800ddae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddb6:	601a      	str	r2, [r3, #0]
}
 800ddb8:	bf00      	nop
 800ddba:	3714      	adds	r7, #20
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr
 800ddc4:	200031b8 	.word	0x200031b8
 800ddc8:	20003264 	.word	0x20003264

0800ddcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f103 0208 	add.w	r2, r3, #8
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dde4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f103 0208 	add.w	r2, r3, #8
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f103 0208 	add.w	r2, r3, #8
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de26:	b480      	push	{r7}
 800de28:	b085      	sub	sp, #20
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	689a      	ldr	r2, [r3, #8]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	1c5a      	adds	r2, r3, #1
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	601a      	str	r2, [r3, #0]
}
 800de62:	bf00      	nop
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de6e:	b480      	push	{r7}
 800de70:	b085      	sub	sp, #20
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
 800de76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de84:	d103      	bne.n	800de8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	60fb      	str	r3, [r7, #12]
 800de8c:	e00c      	b.n	800dea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	3308      	adds	r3, #8
 800de92:	60fb      	str	r3, [r7, #12]
 800de94:	e002      	b.n	800de9c <vListInsert+0x2e>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	60fb      	str	r3, [r7, #12]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d2f6      	bcs.n	800de96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	685a      	ldr	r2, [r3, #4]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	1c5a      	adds	r2, r3, #1
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	601a      	str	r2, [r3, #0]
}
 800ded4:	bf00      	nop
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	6892      	ldr	r2, [r2, #8]
 800def6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	6852      	ldr	r2, [r2, #4]
 800df00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d103      	bne.n	800df14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	689a      	ldr	r2, [r3, #8]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	1e5a      	subs	r2, r3, #1
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10b      	bne.n	800df60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
 800df5e:	e7fd      	b.n	800df5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800df60:	f002 fdb2 	bl	8010ac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df6c:	68f9      	ldr	r1, [r7, #12]
 800df6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df70:	fb01 f303 	mul.w	r3, r1, r3
 800df74:	441a      	add	r2, r3
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df90:	3b01      	subs	r3, #1
 800df92:	68f9      	ldr	r1, [r7, #12]
 800df94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df96:	fb01 f303 	mul.w	r3, r1, r3
 800df9a:	441a      	add	r2, r3
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	22ff      	movs	r2, #255	@ 0xff
 800dfa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	22ff      	movs	r2, #255	@ 0xff
 800dfac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d114      	bne.n	800dfe0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d01a      	beq.n	800dff4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3310      	adds	r3, #16
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f001 fd3e 	bl	800fa44 <xTaskRemoveFromEventList>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d012      	beq.n	800dff4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dfce:	4b0d      	ldr	r3, [pc, #52]	@ (800e004 <xQueueGenericReset+0xd0>)
 800dfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	f3bf 8f4f 	dsb	sy
 800dfda:	f3bf 8f6f 	isb	sy
 800dfde:	e009      	b.n	800dff4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3310      	adds	r3, #16
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7ff fef1 	bl	800ddcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	3324      	adds	r3, #36	@ 0x24
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff feec 	bl	800ddcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dff4:	f002 fd9a 	bl	8010b2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dff8:	2301      	movs	r3, #1
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	e000ed04 	.word	0xe000ed04

0800e008 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08e      	sub	sp, #56	@ 0x38
 800e00c:	af02      	add	r7, sp, #8
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10b      	bne.n	800e034 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e02e:	bf00      	nop
 800e030:	bf00      	nop
 800e032:	e7fd      	b.n	800e030 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10b      	bne.n	800e052 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03e:	f383 8811 	msr	BASEPRI, r3
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e04c:	bf00      	nop
 800e04e:	bf00      	nop
 800e050:	e7fd      	b.n	800e04e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <xQueueGenericCreateStatic+0x56>
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <xQueueGenericCreateStatic+0x5a>
 800e05e:	2301      	movs	r3, #1
 800e060:	e000      	b.n	800e064 <xQueueGenericCreateStatic+0x5c>
 800e062:	2300      	movs	r3, #0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d10b      	bne.n	800e080 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e06c:	f383 8811 	msr	BASEPRI, r3
 800e070:	f3bf 8f6f 	isb	sy
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	623b      	str	r3, [r7, #32]
}
 800e07a:	bf00      	nop
 800e07c:	bf00      	nop
 800e07e:	e7fd      	b.n	800e07c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d102      	bne.n	800e08c <xQueueGenericCreateStatic+0x84>
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d101      	bne.n	800e090 <xQueueGenericCreateStatic+0x88>
 800e08c:	2301      	movs	r3, #1
 800e08e:	e000      	b.n	800e092 <xQueueGenericCreateStatic+0x8a>
 800e090:	2300      	movs	r3, #0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10b      	bne.n	800e0ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	61fb      	str	r3, [r7, #28]
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	e7fd      	b.n	800e0aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e0ae:	2350      	movs	r3, #80	@ 0x50
 800e0b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b50      	cmp	r3, #80	@ 0x50
 800e0b6:	d00b      	beq.n	800e0d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	61bb      	str	r3, [r7, #24]
}
 800e0ca:	bf00      	nop
 800e0cc:	bf00      	nop
 800e0ce:	e7fd      	b.n	800e0cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e0d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00d      	beq.n	800e0f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	68b9      	ldr	r1, [r7, #8]
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f000 f840 	bl	800e178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3730      	adds	r7, #48	@ 0x30
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e102:	b580      	push	{r7, lr}
 800e104:	b08a      	sub	sp, #40	@ 0x28
 800e106:	af02      	add	r7, sp, #8
 800e108:	60f8      	str	r0, [r7, #12]
 800e10a:	60b9      	str	r1, [r7, #8]
 800e10c:	4613      	mov	r3, r2
 800e10e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d10b      	bne.n	800e12e <xQueueGenericCreate+0x2c>
	__asm volatile
 800e116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	613b      	str	r3, [r7, #16]
}
 800e128:	bf00      	nop
 800e12a:	bf00      	nop
 800e12c:	e7fd      	b.n	800e12a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	fb02 f303 	mul.w	r3, r2, r3
 800e136:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	3350      	adds	r3, #80	@ 0x50
 800e13c:	4618      	mov	r0, r3
 800e13e:	f002 fde5 	bl	8010d0c <pvPortMalloc>
 800e142:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d011      	beq.n	800e16e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	3350      	adds	r3, #80	@ 0x50
 800e152:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e15c:	79fa      	ldrb	r2, [r7, #7]
 800e15e:	69bb      	ldr	r3, [r7, #24]
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	4613      	mov	r3, r2
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	68b9      	ldr	r1, [r7, #8]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f000 f805 	bl	800e178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e16e:	69bb      	ldr	r3, [r7, #24]
	}
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d103      	bne.n	800e194 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	69ba      	ldr	r2, [r7, #24]
 800e190:	601a      	str	r2, [r3, #0]
 800e192:	e002      	b.n	800e19a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e1a6:	2101      	movs	r1, #1
 800e1a8:	69b8      	ldr	r0, [r7, #24]
 800e1aa:	f7ff fec3 	bl	800df34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	78fa      	ldrb	r2, [r7, #3]
 800e1b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e1b6:	bf00      	nop
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00e      	beq.n	800e1ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e1de:	2300      	movs	r3, #0
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 f911 	bl	800e40c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e1ea:	bf00      	nop
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b086      	sub	sp, #24
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	617b      	str	r3, [r7, #20]
 800e200:	2300      	movs	r3, #0
 800e202:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e204:	79fb      	ldrb	r3, [r7, #7]
 800e206:	461a      	mov	r2, r3
 800e208:	6939      	ldr	r1, [r7, #16]
 800e20a:	6978      	ldr	r0, [r7, #20]
 800e20c:	f7ff ff79 	bl	800e102 <xQueueGenericCreate>
 800e210:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f7ff ffd3 	bl	800e1be <prvInitialiseMutex>

		return xNewQueue;
 800e218:	68fb      	ldr	r3, [r7, #12]
	}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3718      	adds	r7, #24
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e222:	b580      	push	{r7, lr}
 800e224:	b088      	sub	sp, #32
 800e226:	af02      	add	r7, sp, #8
 800e228:	4603      	mov	r3, r0
 800e22a:	6039      	str	r1, [r7, #0]
 800e22c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e22e:	2301      	movs	r3, #1
 800e230:	617b      	str	r3, [r7, #20]
 800e232:	2300      	movs	r3, #0
 800e234:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	2200      	movs	r2, #0
 800e23e:	6939      	ldr	r1, [r7, #16]
 800e240:	6978      	ldr	r0, [r7, #20]
 800e242:	f7ff fee1 	bl	800e008 <xQueueGenericCreateStatic>
 800e246:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f7ff ffb8 	bl	800e1be <prvInitialiseMutex>

		return xNewQueue;
 800e24e:	68fb      	ldr	r3, [r7, #12]
	}
 800e250:	4618      	mov	r0, r3
 800e252:	3718      	adds	r7, #24
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e258:	b590      	push	{r4, r7, lr}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10b      	bne.n	800e282 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	60fb      	str	r3, [r7, #12]
}
 800e27c:	bf00      	nop
 800e27e:	bf00      	nop
 800e280:	e7fd      	b.n	800e27e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	689c      	ldr	r4, [r3, #8]
 800e286:	f001 fda3 	bl	800fdd0 <xTaskGetCurrentTaskHandle>
 800e28a:	4603      	mov	r3, r0
 800e28c:	429c      	cmp	r4, r3
 800e28e:	d111      	bne.n	800e2b4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	1e5a      	subs	r2, r3, #1
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d105      	bne.n	800e2ae <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	6938      	ldr	r0, [r7, #16]
 800e2aa:	f000 f8af 	bl	800e40c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	617b      	str	r3, [r7, #20]
 800e2b2:	e001      	b.n	800e2b8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e2b8:	697b      	ldr	r3, [r7, #20]
	}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	371c      	adds	r7, #28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd90      	pop	{r4, r7, pc}

0800e2c2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e2c2:	b590      	push	{r4, r7, lr}
 800e2c4:	b087      	sub	sp, #28
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10b      	bne.n	800e2ee <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	60fb      	str	r3, [r7, #12]
}
 800e2e8:	bf00      	nop
 800e2ea:	bf00      	nop
 800e2ec:	e7fd      	b.n	800e2ea <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	689c      	ldr	r4, [r3, #8]
 800e2f2:	f001 fd6d 	bl	800fdd0 <xTaskGetCurrentTaskHandle>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	429c      	cmp	r4, r3
 800e2fa:	d107      	bne.n	800e30c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e306:	2301      	movs	r3, #1
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	e00c      	b.n	800e326 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6938      	ldr	r0, [r7, #16]
 800e310:	f000 fb8e 	bl	800ea30 <xQueueSemaphoreTake>
 800e314:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d004      	beq.n	800e326 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e326:	697b      	ldr	r3, [r7, #20]
	}
 800e328:	4618      	mov	r0, r3
 800e32a:	371c      	adds	r7, #28
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd90      	pop	{r4, r7, pc}

0800e330 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e330:	b580      	push	{r7, lr}
 800e332:	b08a      	sub	sp, #40	@ 0x28
 800e334:	af02      	add	r7, sp, #8
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10b      	bne.n	800e35a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800e342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e346:	f383 8811 	msr	BASEPRI, r3
 800e34a:	f3bf 8f6f 	isb	sy
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	61bb      	str	r3, [r7, #24]
}
 800e354:	bf00      	nop
 800e356:	bf00      	nop
 800e358:	e7fd      	b.n	800e356 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d90b      	bls.n	800e37a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	617b      	str	r3, [r7, #20]
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop
 800e378:	e7fd      	b.n	800e376 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e37a:	2302      	movs	r3, #2
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	2100      	movs	r1, #0
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f7ff fe3f 	bl	800e008 <xQueueGenericCreateStatic>
 800e38a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d002      	beq.n	800e398 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e398:	69fb      	ldr	r3, [r7, #28]
	}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3720      	adds	r7, #32
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b086      	sub	sp, #24
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10b      	bne.n	800e3ca <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800e3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	613b      	str	r3, [r7, #16]
}
 800e3c4:	bf00      	nop
 800e3c6:	bf00      	nop
 800e3c8:	e7fd      	b.n	800e3c6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d90b      	bls.n	800e3ea <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800e3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	60fb      	str	r3, [r7, #12]
}
 800e3e4:	bf00      	nop
 800e3e6:	bf00      	nop
 800e3e8:	e7fd      	b.n	800e3e6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff fe87 	bl	800e102 <xQueueGenericCreate>
 800e3f4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e402:	697b      	ldr	r3, [r7, #20]
	}
 800e404:	4618      	mov	r0, r3
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b08e      	sub	sp, #56	@ 0x38
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e41a:	2300      	movs	r3, #0
 800e41c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10b      	bne.n	800e440 <xQueueGenericSend+0x34>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	e7fd      	b.n	800e43c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d103      	bne.n	800e44e <xQueueGenericSend+0x42>
 800e446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <xQueueGenericSend+0x46>
 800e44e:	2301      	movs	r3, #1
 800e450:	e000      	b.n	800e454 <xQueueGenericSend+0x48>
 800e452:	2300      	movs	r3, #0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10b      	bne.n	800e470 <xQueueGenericSend+0x64>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e46a:	bf00      	nop
 800e46c:	bf00      	nop
 800e46e:	e7fd      	b.n	800e46c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	2b02      	cmp	r3, #2
 800e474:	d103      	bne.n	800e47e <xQueueGenericSend+0x72>
 800e476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d101      	bne.n	800e482 <xQueueGenericSend+0x76>
 800e47e:	2301      	movs	r3, #1
 800e480:	e000      	b.n	800e484 <xQueueGenericSend+0x78>
 800e482:	2300      	movs	r3, #0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10b      	bne.n	800e4a0 <xQueueGenericSend+0x94>
	__asm volatile
 800e488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	623b      	str	r3, [r7, #32]
}
 800e49a:	bf00      	nop
 800e49c:	bf00      	nop
 800e49e:	e7fd      	b.n	800e49c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4a0:	f001 fca6 	bl	800fdf0 <xTaskGetSchedulerState>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d102      	bne.n	800e4b0 <xQueueGenericSend+0xa4>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <xQueueGenericSend+0xa8>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	e000      	b.n	800e4b6 <xQueueGenericSend+0xaa>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10b      	bne.n	800e4d2 <xQueueGenericSend+0xc6>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	61fb      	str	r3, [r7, #28]
}
 800e4cc:	bf00      	nop
 800e4ce:	bf00      	nop
 800e4d0:	e7fd      	b.n	800e4ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4d2:	f002 faf9 	bl	8010ac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d302      	bcc.n	800e4e8 <xQueueGenericSend+0xdc>
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d129      	bne.n	800e53c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4e8:	683a      	ldr	r2, [r7, #0]
 800e4ea:	68b9      	ldr	r1, [r7, #8]
 800e4ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4ee:	f000 fc6d 	bl	800edcc <prvCopyDataToQueue>
 800e4f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d010      	beq.n	800e51e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4fe:	3324      	adds	r3, #36	@ 0x24
 800e500:	4618      	mov	r0, r3
 800e502:	f001 fa9f 	bl	800fa44 <xTaskRemoveFromEventList>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d013      	beq.n	800e534 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e50c:	4b3f      	ldr	r3, [pc, #252]	@ (800e60c <xQueueGenericSend+0x200>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	e00a      	b.n	800e534 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e520:	2b00      	cmp	r3, #0
 800e522:	d007      	beq.n	800e534 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e524:	4b39      	ldr	r3, [pc, #228]	@ (800e60c <xQueueGenericSend+0x200>)
 800e526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e534:	f002 fafa 	bl	8010b2c <vPortExitCritical>
				return pdPASS;
 800e538:	2301      	movs	r3, #1
 800e53a:	e063      	b.n	800e604 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d103      	bne.n	800e54a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e542:	f002 faf3 	bl	8010b2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e546:	2300      	movs	r3, #0
 800e548:	e05c      	b.n	800e604 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d106      	bne.n	800e55e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e550:	f107 0314 	add.w	r3, r7, #20
 800e554:	4618      	mov	r0, r3
 800e556:	f001 fad9 	bl	800fb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e55a:	2301      	movs	r3, #1
 800e55c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e55e:	f002 fae5 	bl	8010b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e562:	f001 f82f 	bl	800f5c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e566:	f002 faaf 	bl	8010ac8 <vPortEnterCritical>
 800e56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e570:	b25b      	sxtb	r3, r3
 800e572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e576:	d103      	bne.n	800e580 <xQueueGenericSend+0x174>
 800e578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e582:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e586:	b25b      	sxtb	r3, r3
 800e588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e58c:	d103      	bne.n	800e596 <xQueueGenericSend+0x18a>
 800e58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e596:	f002 fac9 	bl	8010b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e59a:	1d3a      	adds	r2, r7, #4
 800e59c:	f107 0314 	add.w	r3, r7, #20
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f001 fac8 	bl	800fb38 <xTaskCheckForTimeOut>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d124      	bne.n	800e5f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e5ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5b0:	f000 fd04 	bl	800efbc <prvIsQueueFull>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d018      	beq.n	800e5ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5bc:	3310      	adds	r3, #16
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f001 f9ec 	bl	800f9a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ca:	f000 fc8f 	bl	800eeec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e5ce:	f001 f807 	bl	800f5e0 <xTaskResumeAll>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f47f af7c 	bne.w	800e4d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e5da:	4b0c      	ldr	r3, [pc, #48]	@ (800e60c <xQueueGenericSend+0x200>)
 800e5dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	e772      	b.n	800e4d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ee:	f000 fc7d 	bl	800eeec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5f2:	f000 fff5 	bl	800f5e0 <xTaskResumeAll>
 800e5f6:	e76c      	b.n	800e4d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5fa:	f000 fc77 	bl	800eeec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5fe:	f000 ffef 	bl	800f5e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e602:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e604:	4618      	mov	r0, r3
 800e606:	3738      	adds	r7, #56	@ 0x38
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	e000ed04 	.word	0xe000ed04

0800e610 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b090      	sub	sp, #64	@ 0x40
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10b      	bne.n	800e640 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e63a:	bf00      	nop
 800e63c:	bf00      	nop
 800e63e:	e7fd      	b.n	800e63c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d103      	bne.n	800e64e <xQueueGenericSendFromISR+0x3e>
 800e646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <xQueueGenericSendFromISR+0x42>
 800e64e:	2301      	movs	r3, #1
 800e650:	e000      	b.n	800e654 <xQueueGenericSendFromISR+0x44>
 800e652:	2300      	movs	r3, #0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d10b      	bne.n	800e670 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e65c:	f383 8811 	msr	BASEPRI, r3
 800e660:	f3bf 8f6f 	isb	sy
 800e664:	f3bf 8f4f 	dsb	sy
 800e668:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e66a:	bf00      	nop
 800e66c:	bf00      	nop
 800e66e:	e7fd      	b.n	800e66c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b02      	cmp	r3, #2
 800e674:	d103      	bne.n	800e67e <xQueueGenericSendFromISR+0x6e>
 800e676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d101      	bne.n	800e682 <xQueueGenericSendFromISR+0x72>
 800e67e:	2301      	movs	r3, #1
 800e680:	e000      	b.n	800e684 <xQueueGenericSendFromISR+0x74>
 800e682:	2300      	movs	r3, #0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10b      	bne.n	800e6a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68c:	f383 8811 	msr	BASEPRI, r3
 800e690:	f3bf 8f6f 	isb	sy
 800e694:	f3bf 8f4f 	dsb	sy
 800e698:	623b      	str	r3, [r7, #32]
}
 800e69a:	bf00      	nop
 800e69c:	bf00      	nop
 800e69e:	e7fd      	b.n	800e69c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6a0:	f002 faf2 	bl	8010c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e6a4:	f3ef 8211 	mrs	r2, BASEPRI
 800e6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ac:	f383 8811 	msr	BASEPRI, r3
 800e6b0:	f3bf 8f6f 	isb	sy
 800e6b4:	f3bf 8f4f 	dsb	sy
 800e6b8:	61fa      	str	r2, [r7, #28]
 800e6ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d302      	bcc.n	800e6d2 <xQueueGenericSendFromISR+0xc2>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b02      	cmp	r3, #2
 800e6d0:	d12f      	bne.n	800e732 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6e2:	683a      	ldr	r2, [r7, #0]
 800e6e4:	68b9      	ldr	r1, [r7, #8]
 800e6e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e6e8:	f000 fb70 	bl	800edcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6f4:	d112      	bne.n	800e71c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d016      	beq.n	800e72c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e700:	3324      	adds	r3, #36	@ 0x24
 800e702:	4618      	mov	r0, r3
 800e704:	f001 f99e 	bl	800fa44 <xTaskRemoveFromEventList>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00e      	beq.n	800e72c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00b      	beq.n	800e72c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	e007      	b.n	800e72c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e71c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e720:	3301      	adds	r3, #1
 800e722:	b2db      	uxtb	r3, r3
 800e724:	b25a      	sxtb	r2, r3
 800e726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e72c:	2301      	movs	r3, #1
 800e72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e730:	e001      	b.n	800e736 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e732:	2300      	movs	r3, #0
 800e734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e738:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e740:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e744:	4618      	mov	r0, r3
 800e746:	3740      	adds	r7, #64	@ 0x40
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08e      	sub	sp, #56	@ 0x38
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10b      	bne.n	800e778 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	623b      	str	r3, [r7, #32]
}
 800e772:	bf00      	nop
 800e774:	bf00      	nop
 800e776:	e7fd      	b.n	800e774 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00b      	beq.n	800e798 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	61fb      	str	r3, [r7, #28]
}
 800e792:	bf00      	nop
 800e794:	bf00      	nop
 800e796:	e7fd      	b.n	800e794 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d103      	bne.n	800e7a8 <xQueueGiveFromISR+0x5c>
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <xQueueGiveFromISR+0x60>
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e000      	b.n	800e7ae <xQueueGiveFromISR+0x62>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10b      	bne.n	800e7ca <xQueueGiveFromISR+0x7e>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	61bb      	str	r3, [r7, #24]
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop
 800e7c8:	e7fd      	b.n	800e7c6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ca:	f002 fa5d 	bl	8010c88 <vPortValidateInterruptPriority>
	__asm volatile
 800e7ce:	f3ef 8211 	mrs	r2, BASEPRI
 800e7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d6:	f383 8811 	msr	BASEPRI, r3
 800e7da:	f3bf 8f6f 	isb	sy
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	617a      	str	r2, [r7, #20]
 800e7e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e7e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d22b      	bcs.n	800e852 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e80c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e810:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e814:	d112      	bne.n	800e83c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d016      	beq.n	800e84c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e820:	3324      	adds	r3, #36	@ 0x24
 800e822:	4618      	mov	r0, r3
 800e824:	f001 f90e 	bl	800fa44 <xTaskRemoveFromEventList>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00e      	beq.n	800e84c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00b      	beq.n	800e84c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	2201      	movs	r2, #1
 800e838:	601a      	str	r2, [r3, #0]
 800e83a:	e007      	b.n	800e84c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e83c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e840:	3301      	adds	r3, #1
 800e842:	b2db      	uxtb	r3, r3
 800e844:	b25a      	sxtb	r2, r3
 800e846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e84c:	2301      	movs	r3, #1
 800e84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e850:	e001      	b.n	800e856 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e852:	2300      	movs	r3, #0
 800e854:	637b      	str	r3, [r7, #52]	@ 0x34
 800e856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e858:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f383 8811 	msr	BASEPRI, r3
}
 800e860:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e864:	4618      	mov	r0, r3
 800e866:	3738      	adds	r7, #56	@ 0x38
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08c      	sub	sp, #48	@ 0x30
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e878:	2300      	movs	r3, #0
 800e87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10b      	bne.n	800e89e <xQueueReceive+0x32>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	623b      	str	r3, [r7, #32]
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	e7fd      	b.n	800e89a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d103      	bne.n	800e8ac <xQueueReceive+0x40>
 800e8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <xQueueReceive+0x44>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e000      	b.n	800e8b2 <xQueueReceive+0x46>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10b      	bne.n	800e8ce <xQueueReceive+0x62>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	61fb      	str	r3, [r7, #28]
}
 800e8c8:	bf00      	nop
 800e8ca:	bf00      	nop
 800e8cc:	e7fd      	b.n	800e8ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8ce:	f001 fa8f 	bl	800fdf0 <xTaskGetSchedulerState>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d102      	bne.n	800e8de <xQueueReceive+0x72>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <xQueueReceive+0x76>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e000      	b.n	800e8e4 <xQueueReceive+0x78>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10b      	bne.n	800e900 <xQueueReceive+0x94>
	__asm volatile
 800e8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ec:	f383 8811 	msr	BASEPRI, r3
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	61bb      	str	r3, [r7, #24]
}
 800e8fa:	bf00      	nop
 800e8fc:	bf00      	nop
 800e8fe:	e7fd      	b.n	800e8fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e900:	f002 f8e2 	bl	8010ac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e908:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01f      	beq.n	800e950 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e910:	68b9      	ldr	r1, [r7, #8]
 800e912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e914:	f000 fac4 	bl	800eea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91a:	1e5a      	subs	r2, r3, #1
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00f      	beq.n	800e948 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92a:	3310      	adds	r3, #16
 800e92c:	4618      	mov	r0, r3
 800e92e:	f001 f889 	bl	800fa44 <xTaskRemoveFromEventList>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d007      	beq.n	800e948 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e938:	4b3c      	ldr	r3, [pc, #240]	@ (800ea2c <xQueueReceive+0x1c0>)
 800e93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e93e:	601a      	str	r2, [r3, #0]
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e948:	f002 f8f0 	bl	8010b2c <vPortExitCritical>
				return pdPASS;
 800e94c:	2301      	movs	r3, #1
 800e94e:	e069      	b.n	800ea24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d103      	bne.n	800e95e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e956:	f002 f8e9 	bl	8010b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e95a:	2300      	movs	r3, #0
 800e95c:	e062      	b.n	800ea24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e964:	f107 0310 	add.w	r3, r7, #16
 800e968:	4618      	mov	r0, r3
 800e96a:	f001 f8cf 	bl	800fb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e96e:	2301      	movs	r3, #1
 800e970:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e972:	f002 f8db 	bl	8010b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e976:	f000 fe25 	bl	800f5c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e97a:	f002 f8a5 	bl	8010ac8 <vPortEnterCritical>
 800e97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e984:	b25b      	sxtb	r3, r3
 800e986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e98a:	d103      	bne.n	800e994 <xQueueReceive+0x128>
 800e98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e99a:	b25b      	sxtb	r3, r3
 800e99c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9a0:	d103      	bne.n	800e9aa <xQueueReceive+0x13e>
 800e9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9aa:	f002 f8bf 	bl	8010b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9ae:	1d3a      	adds	r2, r7, #4
 800e9b0:	f107 0310 	add.w	r3, r7, #16
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f001 f8be 	bl	800fb38 <xTaskCheckForTimeOut>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d123      	bne.n	800ea0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9c4:	f000 fae4 	bl	800ef90 <prvIsQueueEmpty>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d017      	beq.n	800e9fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d0:	3324      	adds	r3, #36	@ 0x24
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 ffe2 	bl	800f9a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9de:	f000 fa85 	bl	800eeec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9e2:	f000 fdfd 	bl	800f5e0 <xTaskResumeAll>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d189      	bne.n	800e900 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800ea2c <xQueueReceive+0x1c0>)
 800e9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9f2:	601a      	str	r2, [r3, #0]
 800e9f4:	f3bf 8f4f 	dsb	sy
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	e780      	b.n	800e900 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea00:	f000 fa74 	bl	800eeec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea04:	f000 fdec 	bl	800f5e0 <xTaskResumeAll>
 800ea08:	e77a      	b.n	800e900 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea0c:	f000 fa6e 	bl	800eeec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea10:	f000 fde6 	bl	800f5e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea16:	f000 fabb 	bl	800ef90 <prvIsQueueEmpty>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f43f af6f 	beq.w	800e900 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3730      	adds	r7, #48	@ 0x30
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	e000ed04 	.word	0xe000ed04

0800ea30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b08e      	sub	sp, #56	@ 0x38
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea42:	2300      	movs	r3, #0
 800ea44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10b      	bne.n	800ea64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	623b      	str	r3, [r7, #32]
}
 800ea5e:	bf00      	nop
 800ea60:	bf00      	nop
 800ea62:	e7fd      	b.n	800ea60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00b      	beq.n	800ea84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	61fb      	str	r3, [r7, #28]
}
 800ea7e:	bf00      	nop
 800ea80:	bf00      	nop
 800ea82:	e7fd      	b.n	800ea80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea84:	f001 f9b4 	bl	800fdf0 <xTaskGetSchedulerState>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d102      	bne.n	800ea94 <xQueueSemaphoreTake+0x64>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d101      	bne.n	800ea98 <xQueueSemaphoreTake+0x68>
 800ea94:	2301      	movs	r3, #1
 800ea96:	e000      	b.n	800ea9a <xQueueSemaphoreTake+0x6a>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10b      	bne.n	800eab6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	61bb      	str	r3, [r7, #24]
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	e7fd      	b.n	800eab2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eab6:	f002 f807 	bl	8010ac8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eabe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d024      	beq.n	800eb10 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac8:	1e5a      	subs	r2, r3, #1
 800eaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eacc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d104      	bne.n	800eae0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ead6:	f001 fb05 	bl	80100e4 <pvTaskIncrementMutexHeldCount>
 800eada:	4602      	mov	r2, r0
 800eadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eade:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00f      	beq.n	800eb08 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaea:	3310      	adds	r3, #16
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 ffa9 	bl	800fa44 <xTaskRemoveFromEventList>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d007      	beq.n	800eb08 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eaf8:	4b54      	ldr	r3, [pc, #336]	@ (800ec4c <xQueueSemaphoreTake+0x21c>)
 800eafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb08:	f002 f810 	bl	8010b2c <vPortExitCritical>
				return pdPASS;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	e098      	b.n	800ec42 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d112      	bne.n	800eb3c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00b      	beq.n	800eb34 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	617b      	str	r3, [r7, #20]
}
 800eb2e:	bf00      	nop
 800eb30:	bf00      	nop
 800eb32:	e7fd      	b.n	800eb30 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb34:	f001 fffa 	bl	8010b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	e082      	b.n	800ec42 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb42:	f107 030c 	add.w	r3, r7, #12
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 ffe0 	bl	800fb0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb50:	f001 ffec 	bl	8010b2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb54:	f000 fd36 	bl	800f5c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb58:	f001 ffb6 	bl	8010ac8 <vPortEnterCritical>
 800eb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb62:	b25b      	sxtb	r3, r3
 800eb64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb68:	d103      	bne.n	800eb72 <xQueueSemaphoreTake+0x142>
 800eb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb78:	b25b      	sxtb	r3, r3
 800eb7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb7e:	d103      	bne.n	800eb88 <xQueueSemaphoreTake+0x158>
 800eb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb88:	f001 ffd0 	bl	8010b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb8c:	463a      	mov	r2, r7
 800eb8e:	f107 030c 	add.w	r3, r7, #12
 800eb92:	4611      	mov	r1, r2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 ffcf 	bl	800fb38 <xTaskCheckForTimeOut>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d132      	bne.n	800ec06 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eba0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eba2:	f000 f9f5 	bl	800ef90 <prvIsQueueEmpty>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d026      	beq.n	800ebfa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d109      	bne.n	800ebc8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ebb4:	f001 ff88 	bl	8010ac8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f001 f935 	bl	800fe2c <xTaskPriorityInherit>
 800ebc2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ebc4:	f001 ffb2 	bl	8010b2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebca:	3324      	adds	r3, #36	@ 0x24
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	4611      	mov	r1, r2
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 fee5 	bl	800f9a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebd8:	f000 f988 	bl	800eeec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebdc:	f000 fd00 	bl	800f5e0 <xTaskResumeAll>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f47f af67 	bne.w	800eab6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ebe8:	4b18      	ldr	r3, [pc, #96]	@ (800ec4c <xQueueSemaphoreTake+0x21c>)
 800ebea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	e75d      	b.n	800eab6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ebfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebfc:	f000 f976 	bl	800eeec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec00:	f000 fcee 	bl	800f5e0 <xTaskResumeAll>
 800ec04:	e757      	b.n	800eab6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec08:	f000 f970 	bl	800eeec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec0c:	f000 fce8 	bl	800f5e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec12:	f000 f9bd 	bl	800ef90 <prvIsQueueEmpty>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f43f af4c 	beq.w	800eab6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00d      	beq.n	800ec40 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ec24:	f001 ff50 	bl	8010ac8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec2a:	f000 f8b7 	bl	800ed9c <prvGetDisinheritPriorityAfterTimeout>
 800ec2e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec36:	4618      	mov	r0, r3
 800ec38:	f001 f9d0 	bl	800ffdc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec3c:	f001 ff76 	bl	8010b2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3738      	adds	r7, #56	@ 0x38
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	e000ed04 	.word	0xe000ed04

0800ec50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08e      	sub	sp, #56	@ 0x38
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d10b      	bne.n	800ec7e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ec66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec6a:	f383 8811 	msr	BASEPRI, r3
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	623b      	str	r3, [r7, #32]
}
 800ec78:	bf00      	nop
 800ec7a:	bf00      	nop
 800ec7c:	e7fd      	b.n	800ec7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d103      	bne.n	800ec8c <xQueueReceiveFromISR+0x3c>
 800ec84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <xQueueReceiveFromISR+0x40>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e000      	b.n	800ec92 <xQueueReceiveFromISR+0x42>
 800ec90:	2300      	movs	r3, #0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d10b      	bne.n	800ecae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	61fb      	str	r3, [r7, #28]
}
 800eca8:	bf00      	nop
 800ecaa:	bf00      	nop
 800ecac:	e7fd      	b.n	800ecaa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecae:	f001 ffeb 	bl	8010c88 <vPortValidateInterruptPriority>
	__asm volatile
 800ecb2:	f3ef 8211 	mrs	r2, BASEPRI
 800ecb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	61ba      	str	r2, [r7, #24]
 800ecc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ecca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d02f      	beq.n	800ed3a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ecda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ece0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ece4:	68b9      	ldr	r1, [r7, #8]
 800ece6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ece8:	f000 f8da 	bl	800eea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ecec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecee:	1e5a      	subs	r2, r3, #1
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ecf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ecf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ecfc:	d112      	bne.n	800ed24 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d016      	beq.n	800ed34 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed08:	3310      	adds	r3, #16
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f000 fe9a 	bl	800fa44 <xTaskRemoveFromEventList>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00e      	beq.n	800ed34 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00b      	beq.n	800ed34 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	e007      	b.n	800ed34 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed28:	3301      	adds	r3, #1
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	b25a      	sxtb	r2, r3
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ed34:	2301      	movs	r3, #1
 800ed36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed38:	e001      	b.n	800ed3e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	f383 8811 	msr	BASEPRI, r3
}
 800ed48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3738      	adds	r7, #56	@ 0x38
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10b      	bne.n	800ed7e <vQueueDelete+0x2a>
	__asm volatile
 800ed66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	60bb      	str	r3, [r7, #8]
}
 800ed78:	bf00      	nop
 800ed7a:	bf00      	nop
 800ed7c:	e7fd      	b.n	800ed7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f000 f95e 	bl	800f040 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f002 f88a 	bl	8010ea8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ed94:	bf00      	nop
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d006      	beq.n	800edba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800edb6:	60fb      	str	r3, [r7, #12]
 800edb8:	e001      	b.n	800edbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800edba:	2300      	movs	r3, #0
 800edbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800edbe:	68fb      	ldr	r3, [r7, #12]
	}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800edd8:	2300      	movs	r3, #0
 800edda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10d      	bne.n	800ee06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d14d      	bne.n	800ee8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f001 f880 	bl	800fefc <xTaskPriorityDisinherit>
 800edfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	609a      	str	r2, [r3, #8]
 800ee04:	e043      	b.n	800ee8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d119      	bne.n	800ee40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6858      	ldr	r0, [r3, #4]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee14:	461a      	mov	r2, r3
 800ee16:	68b9      	ldr	r1, [r7, #8]
 800ee18:	f003 fcd7 	bl	80127ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee24:	441a      	add	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d32b      	bcc.n	800ee8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	605a      	str	r2, [r3, #4]
 800ee3e:	e026      	b.n	800ee8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	68d8      	ldr	r0, [r3, #12]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee48:	461a      	mov	r2, r3
 800ee4a:	68b9      	ldr	r1, [r7, #8]
 800ee4c:	f003 fcbd 	bl	80127ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	68da      	ldr	r2, [r3, #12]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee58:	425b      	negs	r3, r3
 800ee5a:	441a      	add	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68da      	ldr	r2, [r3, #12]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d207      	bcs.n	800ee7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	689a      	ldr	r2, [r3, #8]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee74:	425b      	negs	r3, r3
 800ee76:	441a      	add	r2, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d105      	bne.n	800ee8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	1c5a      	adds	r2, r3, #1
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ee96:	697b      	ldr	r3, [r7, #20]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3718      	adds	r7, #24
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d018      	beq.n	800eee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68da      	ldr	r2, [r3, #12]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeba:	441a      	add	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68da      	ldr	r2, [r3, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d303      	bcc.n	800eed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68d9      	ldr	r1, [r3, #12]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eedc:	461a      	mov	r2, r3
 800eede:	6838      	ldr	r0, [r7, #0]
 800eee0:	f003 fc73 	bl	80127ca <memcpy>
	}
}
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eef4:	f001 fde8 	bl	8010ac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eefe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef00:	e011      	b.n	800ef26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d012      	beq.n	800ef30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3324      	adds	r3, #36	@ 0x24
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 fd98 	bl	800fa44 <xTaskRemoveFromEventList>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef1a:	f000 fe71 	bl	800fc00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
 800ef20:	3b01      	subs	r3, #1
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dce9      	bgt.n	800ef02 <prvUnlockQueue+0x16>
 800ef2e:	e000      	b.n	800ef32 <prvUnlockQueue+0x46>
					break;
 800ef30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	22ff      	movs	r2, #255	@ 0xff
 800ef36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ef3a:	f001 fdf7 	bl	8010b2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef3e:	f001 fdc3 	bl	8010ac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef4a:	e011      	b.n	800ef70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	691b      	ldr	r3, [r3, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d012      	beq.n	800ef7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	3310      	adds	r3, #16
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f000 fd73 	bl	800fa44 <xTaskRemoveFromEventList>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d001      	beq.n	800ef68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ef64:	f000 fe4c 	bl	800fc00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dce9      	bgt.n	800ef4c <prvUnlockQueue+0x60>
 800ef78:	e000      	b.n	800ef7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ef7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	22ff      	movs	r2, #255	@ 0xff
 800ef80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ef84:	f001 fdd2 	bl	8010b2c <vPortExitCritical>
}
 800ef88:	bf00      	nop
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef98:	f001 fd96 	bl	8010ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d102      	bne.n	800efaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800efa4:	2301      	movs	r3, #1
 800efa6:	60fb      	str	r3, [r7, #12]
 800efa8:	e001      	b.n	800efae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800efaa:	2300      	movs	r3, #0
 800efac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800efae:	f001 fdbd 	bl	8010b2c <vPortExitCritical>

	return xReturn;
 800efb2:	68fb      	ldr	r3, [r7, #12]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efc4:	f001 fd80 	bl	8010ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d102      	bne.n	800efda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800efd4:	2301      	movs	r3, #1
 800efd6:	60fb      	str	r3, [r7, #12]
 800efd8:	e001      	b.n	800efde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800efda:	2300      	movs	r3, #0
 800efdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800efde:	f001 fda5 	bl	8010b2c <vPortExitCritical>

	return xReturn;
 800efe2:	68fb      	ldr	r3, [r7, #12]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3710      	adds	r7, #16
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eff6:	2300      	movs	r3, #0
 800eff8:	60fb      	str	r3, [r7, #12]
 800effa:	e014      	b.n	800f026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800effc:	4a0f      	ldr	r2, [pc, #60]	@ (800f03c <vQueueAddToRegistry+0x50>)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10b      	bne.n	800f020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f008:	490c      	ldr	r1, [pc, #48]	@ (800f03c <vQueueAddToRegistry+0x50>)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	683a      	ldr	r2, [r7, #0]
 800f00e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f012:	4a0a      	ldr	r2, [pc, #40]	@ (800f03c <vQueueAddToRegistry+0x50>)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	00db      	lsls	r3, r3, #3
 800f018:	4413      	add	r3, r2
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f01e:	e006      	b.n	800f02e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	3301      	adds	r3, #1
 800f024:	60fb      	str	r3, [r7, #12]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2b07      	cmp	r3, #7
 800f02a:	d9e7      	bls.n	800effc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f02c:	bf00      	nop
 800f02e:	bf00      	nop
 800f030:	3714      	adds	r7, #20
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	20003a64 	.word	0x20003a64

0800f040 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f040:	b480      	push	{r7}
 800f042:	b085      	sub	sp, #20
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f048:	2300      	movs	r3, #0
 800f04a:	60fb      	str	r3, [r7, #12]
 800f04c:	e016      	b.n	800f07c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f04e:	4a10      	ldr	r2, [pc, #64]	@ (800f090 <vQueueUnregisterQueue+0x50>)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	00db      	lsls	r3, r3, #3
 800f054:	4413      	add	r3, r2
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d10b      	bne.n	800f076 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f05e:	4a0c      	ldr	r2, [pc, #48]	@ (800f090 <vQueueUnregisterQueue+0x50>)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2100      	movs	r1, #0
 800f064:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f068:	4a09      	ldr	r2, [pc, #36]	@ (800f090 <vQueueUnregisterQueue+0x50>)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	00db      	lsls	r3, r3, #3
 800f06e:	4413      	add	r3, r2
 800f070:	2200      	movs	r2, #0
 800f072:	605a      	str	r2, [r3, #4]
				break;
 800f074:	e006      	b.n	800f084 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	3301      	adds	r3, #1
 800f07a:	60fb      	str	r3, [r7, #12]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b07      	cmp	r3, #7
 800f080:	d9e5      	bls.n	800f04e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f082:	bf00      	nop
 800f084:	bf00      	nop
 800f086:	3714      	adds	r7, #20
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr
 800f090:	20003a64 	.word	0x20003a64

0800f094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f0a4:	f001 fd10 	bl	8010ac8 <vPortEnterCritical>
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0ae:	b25b      	sxtb	r3, r3
 800f0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0b4:	d103      	bne.n	800f0be <vQueueWaitForMessageRestricted+0x2a>
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f0c4:	b25b      	sxtb	r3, r3
 800f0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0ca:	d103      	bne.n	800f0d4 <vQueueWaitForMessageRestricted+0x40>
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f0d4:	f001 fd2a 	bl	8010b2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d106      	bne.n	800f0ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	3324      	adds	r3, #36	@ 0x24
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	68b9      	ldr	r1, [r7, #8]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 fc7f 	bl	800f9ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f0ee:	6978      	ldr	r0, [r7, #20]
 800f0f0:	f7ff fefc 	bl	800eeec <prvUnlockQueue>
	}
 800f0f4:	bf00      	nop
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08e      	sub	sp, #56	@ 0x38
 800f100:	af04      	add	r7, sp, #16
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10b      	bne.n	800f128 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f114:	f383 8811 	msr	BASEPRI, r3
 800f118:	f3bf 8f6f 	isb	sy
 800f11c:	f3bf 8f4f 	dsb	sy
 800f120:	623b      	str	r3, [r7, #32]
}
 800f122:	bf00      	nop
 800f124:	bf00      	nop
 800f126:	e7fd      	b.n	800f124 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d10b      	bne.n	800f146 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f132:	f383 8811 	msr	BASEPRI, r3
 800f136:	f3bf 8f6f 	isb	sy
 800f13a:	f3bf 8f4f 	dsb	sy
 800f13e:	61fb      	str	r3, [r7, #28]
}
 800f140:	bf00      	nop
 800f142:	bf00      	nop
 800f144:	e7fd      	b.n	800f142 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f146:	23ac      	movs	r3, #172	@ 0xac
 800f148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	2bac      	cmp	r3, #172	@ 0xac
 800f14e:	d00b      	beq.n	800f168 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f154:	f383 8811 	msr	BASEPRI, r3
 800f158:	f3bf 8f6f 	isb	sy
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	61bb      	str	r3, [r7, #24]
}
 800f162:	bf00      	nop
 800f164:	bf00      	nop
 800f166:	e7fd      	b.n	800f164 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f168:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d01e      	beq.n	800f1ae <xTaskCreateStatic+0xb2>
 800f170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f172:	2b00      	cmp	r3, #0
 800f174:	d01b      	beq.n	800f1ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f178:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f17e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f182:	2202      	movs	r2, #2
 800f184:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f188:	2300      	movs	r3, #0
 800f18a:	9303      	str	r3, [sp, #12]
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	9302      	str	r3, [sp, #8]
 800f190:	f107 0314 	add.w	r3, r7, #20
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	68b9      	ldr	r1, [r7, #8]
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f000 f851 	bl	800f248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f1a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1a8:	f000 f8f6 	bl	800f398 <prvAddNewTaskToReadyList>
 800f1ac:	e001      	b.n	800f1b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f1b2:	697b      	ldr	r3, [r7, #20]
	}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3728      	adds	r7, #40	@ 0x28
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08c      	sub	sp, #48	@ 0x30
 800f1c0:	af04      	add	r7, sp, #16
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	603b      	str	r3, [r7, #0]
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f1cc:	88fb      	ldrh	r3, [r7, #6]
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f001 fd9b 	bl	8010d0c <pvPortMalloc>
 800f1d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00e      	beq.n	800f1fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f1de:	20ac      	movs	r0, #172	@ 0xac
 800f1e0:	f001 fd94 	bl	8010d0c <pvPortMalloc>
 800f1e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d003      	beq.n	800f1f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800f1f2:	e005      	b.n	800f200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f1f4:	6978      	ldr	r0, [r7, #20]
 800f1f6:	f001 fe57 	bl	8010ea8 <vPortFree>
 800f1fa:	e001      	b.n	800f200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d017      	beq.n	800f236 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	2200      	movs	r2, #0
 800f20a:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f20e:	88fa      	ldrh	r2, [r7, #6]
 800f210:	2300      	movs	r3, #0
 800f212:	9303      	str	r3, [sp, #12]
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	9302      	str	r3, [sp, #8]
 800f218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f21a:	9301      	str	r3, [sp, #4]
 800f21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f000 f80f 	bl	800f248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f22a:	69f8      	ldr	r0, [r7, #28]
 800f22c:	f000 f8b4 	bl	800f398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f230:	2301      	movs	r3, #1
 800f232:	61bb      	str	r3, [r7, #24]
 800f234:	e002      	b.n	800f23c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f23a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f23c:	69bb      	ldr	r3, [r7, #24]
	}
 800f23e:	4618      	mov	r0, r3
 800f240:	3720      	adds	r7, #32
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
	...

0800f248 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b088      	sub	sp, #32
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]
 800f254:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f258:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	461a      	mov	r2, r3
 800f260:	21a5      	movs	r1, #165	@ 0xa5
 800f262:	f003 f9dc 	bl	801261e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f270:	3b01      	subs	r3, #1
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4413      	add	r3, r2
 800f276:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	f023 0307 	bic.w	r3, r3, #7
 800f27e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	f003 0307 	and.w	r3, r3, #7
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00b      	beq.n	800f2a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28e:	f383 8811 	msr	BASEPRI, r3
 800f292:	f3bf 8f6f 	isb	sy
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	617b      	str	r3, [r7, #20]
}
 800f29c:	bf00      	nop
 800f29e:	bf00      	nop
 800f2a0:	e7fd      	b.n	800f29e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d01f      	beq.n	800f2e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	61fb      	str	r3, [r7, #28]
 800f2ac:	e012      	b.n	800f2d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	7819      	ldrb	r1, [r3, #0]
 800f2b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	3334      	adds	r3, #52	@ 0x34
 800f2be:	460a      	mov	r2, r1
 800f2c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d006      	beq.n	800f2dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	61fb      	str	r3, [r7, #28]
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	2b13      	cmp	r3, #19
 800f2d8:	d9e9      	bls.n	800f2ae <prvInitialiseNewTask+0x66>
 800f2da:	e000      	b.n	800f2de <prvInitialiseNewTask+0x96>
			{
				break;
 800f2dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800f2e6:	e003      	b.n	800f2f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f2:	2b37      	cmp	r3, #55	@ 0x37
 800f2f4:	d901      	bls.n	800f2fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f2f6:	2337      	movs	r3, #55	@ 0x37
 800f2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f304:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800f306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f308:	2200      	movs	r2, #0
 800f30a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30e:	3304      	adds	r3, #4
 800f310:	4618      	mov	r0, r3
 800f312:	f7fe fd7b 	bl	800de0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f318:	3318      	adds	r3, #24
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fe fd76 	bl	800de0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f324:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f328:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f32e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f334:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f338:	2200      	movs	r2, #0
 800f33a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f340:	2200      	movs	r2, #0
 800f342:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f348:	3358      	adds	r3, #88	@ 0x58
 800f34a:	224c      	movs	r2, #76	@ 0x4c
 800f34c:	2100      	movs	r1, #0
 800f34e:	4618      	mov	r0, r3
 800f350:	f003 f965 	bl	801261e <memset>
 800f354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f356:	4a0d      	ldr	r2, [pc, #52]	@ (800f38c <prvInitialiseNewTask+0x144>)
 800f358:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f35c:	4a0c      	ldr	r2, [pc, #48]	@ (800f390 <prvInitialiseNewTask+0x148>)
 800f35e:	661a      	str	r2, [r3, #96]	@ 0x60
 800f360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f362:	4a0c      	ldr	r2, [pc, #48]	@ (800f394 <prvInitialiseNewTask+0x14c>)
 800f364:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f366:	683a      	ldr	r2, [r7, #0]
 800f368:	68f9      	ldr	r1, [r7, #12]
 800f36a:	69b8      	ldr	r0, [r7, #24]
 800f36c:	f001 fa7c 	bl	8010868 <pxPortInitialiseStack>
 800f370:	4602      	mov	r2, r0
 800f372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f374:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d002      	beq.n	800f382 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f37e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f382:	bf00      	nop
 800f384:	3720      	adds	r7, #32
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20005ec4 	.word	0x20005ec4
 800f390:	20005f2c 	.word	0x20005f2c
 800f394:	20005f94 	.word	0x20005f94

0800f398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f3a0:	f001 fb92 	bl	8010ac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f3a4:	4b2d      	ldr	r3, [pc, #180]	@ (800f45c <prvAddNewTaskToReadyList+0xc4>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	4a2c      	ldr	r2, [pc, #176]	@ (800f45c <prvAddNewTaskToReadyList+0xc4>)
 800f3ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f3ae:	4b2c      	ldr	r3, [pc, #176]	@ (800f460 <prvAddNewTaskToReadyList+0xc8>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d109      	bne.n	800f3ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f3b6:	4a2a      	ldr	r2, [pc, #168]	@ (800f460 <prvAddNewTaskToReadyList+0xc8>)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f3bc:	4b27      	ldr	r3, [pc, #156]	@ (800f45c <prvAddNewTaskToReadyList+0xc4>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d110      	bne.n	800f3e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f3c4:	f000 fc40 	bl	800fc48 <prvInitialiseTaskLists>
 800f3c8:	e00d      	b.n	800f3e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f3ca:	4b26      	ldr	r3, [pc, #152]	@ (800f464 <prvAddNewTaskToReadyList+0xcc>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d109      	bne.n	800f3e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f3d2:	4b23      	ldr	r3, [pc, #140]	@ (800f460 <prvAddNewTaskToReadyList+0xc8>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d802      	bhi.n	800f3e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f3e0:	4a1f      	ldr	r2, [pc, #124]	@ (800f460 <prvAddNewTaskToReadyList+0xc8>)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f3e6:	4b20      	ldr	r3, [pc, #128]	@ (800f468 <prvAddNewTaskToReadyList+0xd0>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	4a1e      	ldr	r2, [pc, #120]	@ (800f468 <prvAddNewTaskToReadyList+0xd0>)
 800f3ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f3f0:	4b1d      	ldr	r3, [pc, #116]	@ (800f468 <prvAddNewTaskToReadyList+0xd0>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3fc:	4b1b      	ldr	r3, [pc, #108]	@ (800f46c <prvAddNewTaskToReadyList+0xd4>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	429a      	cmp	r2, r3
 800f402:	d903      	bls.n	800f40c <prvAddNewTaskToReadyList+0x74>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f408:	4a18      	ldr	r2, [pc, #96]	@ (800f46c <prvAddNewTaskToReadyList+0xd4>)
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f410:	4613      	mov	r3, r2
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	4413      	add	r3, r2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4a15      	ldr	r2, [pc, #84]	@ (800f470 <prvAddNewTaskToReadyList+0xd8>)
 800f41a:	441a      	add	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	3304      	adds	r3, #4
 800f420:	4619      	mov	r1, r3
 800f422:	4610      	mov	r0, r2
 800f424:	f7fe fcff 	bl	800de26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f428:	f001 fb80 	bl	8010b2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f42c:	4b0d      	ldr	r3, [pc, #52]	@ (800f464 <prvAddNewTaskToReadyList+0xcc>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00e      	beq.n	800f452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f434:	4b0a      	ldr	r3, [pc, #40]	@ (800f460 <prvAddNewTaskToReadyList+0xc8>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f43e:	429a      	cmp	r2, r3
 800f440:	d207      	bcs.n	800f452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f442:	4b0c      	ldr	r3, [pc, #48]	@ (800f474 <prvAddNewTaskToReadyList+0xdc>)
 800f444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20003f78 	.word	0x20003f78
 800f460:	20003aa4 	.word	0x20003aa4
 800f464:	20003f84 	.word	0x20003f84
 800f468:	20003f94 	.word	0x20003f94
 800f46c:	20003f80 	.word	0x20003f80
 800f470:	20003aa8 	.word	0x20003aa8
 800f474:	e000ed04 	.word	0xe000ed04

0800f478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f480:	2300      	movs	r3, #0
 800f482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d018      	beq.n	800f4bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f48a:	4b14      	ldr	r3, [pc, #80]	@ (800f4dc <vTaskDelay+0x64>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00b      	beq.n	800f4aa <vTaskDelay+0x32>
	__asm volatile
 800f492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	60bb      	str	r3, [r7, #8]
}
 800f4a4:	bf00      	nop
 800f4a6:	bf00      	nop
 800f4a8:	e7fd      	b.n	800f4a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f4aa:	f000 f88b 	bl	800f5c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 fe2b 	bl	801010c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f4b6:	f000 f893 	bl	800f5e0 <xTaskResumeAll>
 800f4ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d107      	bne.n	800f4d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f4c2:	4b07      	ldr	r3, [pc, #28]	@ (800f4e0 <vTaskDelay+0x68>)
 800f4c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4c8:	601a      	str	r2, [r3, #0]
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4d2:	bf00      	nop
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	20003fa0 	.word	0x20003fa0
 800f4e0:	e000ed04 	.word	0xe000ed04

0800f4e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b08a      	sub	sp, #40	@ 0x28
 800f4e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f4f2:	463a      	mov	r2, r7
 800f4f4:	1d39      	adds	r1, r7, #4
 800f4f6:	f107 0308 	add.w	r3, r7, #8
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fe fc32 	bl	800dd64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f500:	6839      	ldr	r1, [r7, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	9202      	str	r2, [sp, #8]
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	2300      	movs	r3, #0
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	2300      	movs	r3, #0
 800f510:	460a      	mov	r2, r1
 800f512:	4924      	ldr	r1, [pc, #144]	@ (800f5a4 <vTaskStartScheduler+0xc0>)
 800f514:	4824      	ldr	r0, [pc, #144]	@ (800f5a8 <vTaskStartScheduler+0xc4>)
 800f516:	f7ff fdf1 	bl	800f0fc <xTaskCreateStatic>
 800f51a:	4603      	mov	r3, r0
 800f51c:	4a23      	ldr	r2, [pc, #140]	@ (800f5ac <vTaskStartScheduler+0xc8>)
 800f51e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f520:	4b22      	ldr	r3, [pc, #136]	@ (800f5ac <vTaskStartScheduler+0xc8>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d002      	beq.n	800f52e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f528:	2301      	movs	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]
 800f52c:	e001      	b.n	800f532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f52e:	2300      	movs	r3, #0
 800f530:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d102      	bne.n	800f53e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f538:	f000 fe3c 	bl	80101b4 <xTimerCreateTimerTask>
 800f53c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d11b      	bne.n	800f57c <vTaskStartScheduler+0x98>
	__asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	613b      	str	r3, [r7, #16]
}
 800f556:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f558:	4b15      	ldr	r3, [pc, #84]	@ (800f5b0 <vTaskStartScheduler+0xcc>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	3358      	adds	r3, #88	@ 0x58
 800f55e:	4a15      	ldr	r2, [pc, #84]	@ (800f5b4 <vTaskStartScheduler+0xd0>)
 800f560:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f562:	4b15      	ldr	r3, [pc, #84]	@ (800f5b8 <vTaskStartScheduler+0xd4>)
 800f564:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f568:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f56a:	4b14      	ldr	r3, [pc, #80]	@ (800f5bc <vTaskStartScheduler+0xd8>)
 800f56c:	2201      	movs	r2, #1
 800f56e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f570:	4b13      	ldr	r3, [pc, #76]	@ (800f5c0 <vTaskStartScheduler+0xdc>)
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f576:	f001 fa03 	bl	8010980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f57a:	e00f      	b.n	800f59c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f582:	d10b      	bne.n	800f59c <vTaskStartScheduler+0xb8>
	__asm volatile
 800f584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	60fb      	str	r3, [r7, #12]
}
 800f596:	bf00      	nop
 800f598:	bf00      	nop
 800f59a:	e7fd      	b.n	800f598 <vTaskStartScheduler+0xb4>
}
 800f59c:	bf00      	nop
 800f59e:	3718      	adds	r7, #24
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	080158c0 	.word	0x080158c0
 800f5a8:	0800fc19 	.word	0x0800fc19
 800f5ac:	20003f9c 	.word	0x20003f9c
 800f5b0:	20003aa4 	.word	0x20003aa4
 800f5b4:	20000194 	.word	0x20000194
 800f5b8:	20003f98 	.word	0x20003f98
 800f5bc:	20003f84 	.word	0x20003f84
 800f5c0:	20003f7c 	.word	0x20003f7c

0800f5c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f5c8:	4b04      	ldr	r3, [pc, #16]	@ (800f5dc <vTaskSuspendAll+0x18>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	4a03      	ldr	r2, [pc, #12]	@ (800f5dc <vTaskSuspendAll+0x18>)
 800f5d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f5d2:	bf00      	nop
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr
 800f5dc:	20003fa0 	.word	0x20003fa0

0800f5e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f5ee:	4b42      	ldr	r3, [pc, #264]	@ (800f6f8 <xTaskResumeAll+0x118>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d10b      	bne.n	800f60e <xTaskResumeAll+0x2e>
	__asm volatile
 800f5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5fa:	f383 8811 	msr	BASEPRI, r3
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	603b      	str	r3, [r7, #0]
}
 800f608:	bf00      	nop
 800f60a:	bf00      	nop
 800f60c:	e7fd      	b.n	800f60a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f60e:	f001 fa5b 	bl	8010ac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f612:	4b39      	ldr	r3, [pc, #228]	@ (800f6f8 <xTaskResumeAll+0x118>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	3b01      	subs	r3, #1
 800f618:	4a37      	ldr	r2, [pc, #220]	@ (800f6f8 <xTaskResumeAll+0x118>)
 800f61a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f61c:	4b36      	ldr	r3, [pc, #216]	@ (800f6f8 <xTaskResumeAll+0x118>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d162      	bne.n	800f6ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f624:	4b35      	ldr	r3, [pc, #212]	@ (800f6fc <xTaskResumeAll+0x11c>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d05e      	beq.n	800f6ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f62c:	e02f      	b.n	800f68e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f62e:	4b34      	ldr	r3, [pc, #208]	@ (800f700 <xTaskResumeAll+0x120>)
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	3318      	adds	r3, #24
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe fc50 	bl	800dee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	3304      	adds	r3, #4
 800f644:	4618      	mov	r0, r3
 800f646:	f7fe fc4b 	bl	800dee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f64e:	4b2d      	ldr	r3, [pc, #180]	@ (800f704 <xTaskResumeAll+0x124>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	429a      	cmp	r2, r3
 800f654:	d903      	bls.n	800f65e <xTaskResumeAll+0x7e>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f65a:	4a2a      	ldr	r2, [pc, #168]	@ (800f704 <xTaskResumeAll+0x124>)
 800f65c:	6013      	str	r3, [r2, #0]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f662:	4613      	mov	r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	4413      	add	r3, r2
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	4a27      	ldr	r2, [pc, #156]	@ (800f708 <xTaskResumeAll+0x128>)
 800f66c:	441a      	add	r2, r3
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3304      	adds	r3, #4
 800f672:	4619      	mov	r1, r3
 800f674:	4610      	mov	r0, r2
 800f676:	f7fe fbd6 	bl	800de26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f67e:	4b23      	ldr	r3, [pc, #140]	@ (800f70c <xTaskResumeAll+0x12c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f684:	429a      	cmp	r2, r3
 800f686:	d302      	bcc.n	800f68e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f688:	4b21      	ldr	r3, [pc, #132]	@ (800f710 <xTaskResumeAll+0x130>)
 800f68a:	2201      	movs	r2, #1
 800f68c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f68e:	4b1c      	ldr	r3, [pc, #112]	@ (800f700 <xTaskResumeAll+0x120>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1cb      	bne.n	800f62e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f69c:	f000 fb78 	bl	800fd90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f6a0:	4b1c      	ldr	r3, [pc, #112]	@ (800f714 <xTaskResumeAll+0x134>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d010      	beq.n	800f6ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f6ac:	f000 f858 	bl	800f760 <xTaskIncrementTick>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d002      	beq.n	800f6bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f6b6:	4b16      	ldr	r3, [pc, #88]	@ (800f710 <xTaskResumeAll+0x130>)
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1f1      	bne.n	800f6ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f6c8:	4b12      	ldr	r3, [pc, #72]	@ (800f714 <xTaskResumeAll+0x134>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f6ce:	4b10      	ldr	r3, [pc, #64]	@ (800f710 <xTaskResumeAll+0x130>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d009      	beq.n	800f6ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f6da:	4b0f      	ldr	r3, [pc, #60]	@ (800f718 <xTaskResumeAll+0x138>)
 800f6dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6ea:	f001 fa1f 	bl	8010b2c <vPortExitCritical>

	return xAlreadyYielded;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	20003fa0 	.word	0x20003fa0
 800f6fc:	20003f78 	.word	0x20003f78
 800f700:	20003f38 	.word	0x20003f38
 800f704:	20003f80 	.word	0x20003f80
 800f708:	20003aa8 	.word	0x20003aa8
 800f70c:	20003aa4 	.word	0x20003aa4
 800f710:	20003f8c 	.word	0x20003f8c
 800f714:	20003f88 	.word	0x20003f88
 800f718:	e000ed04 	.word	0xe000ed04

0800f71c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f722:	4b05      	ldr	r3, [pc, #20]	@ (800f738 <xTaskGetTickCount+0x1c>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f728:	687b      	ldr	r3, [r7, #4]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	370c      	adds	r7, #12
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	20003f7c 	.word	0x20003f7c

0800f73c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f742:	f001 faa1 	bl	8010c88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f746:	2300      	movs	r3, #0
 800f748:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f74a:	4b04      	ldr	r3, [pc, #16]	@ (800f75c <xTaskGetTickCountFromISR+0x20>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f750:	683b      	ldr	r3, [r7, #0]
}
 800f752:	4618      	mov	r0, r3
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	20003f7c 	.word	0x20003f7c

0800f760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f766:	2300      	movs	r3, #0
 800f768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f76a:	4b4f      	ldr	r3, [pc, #316]	@ (800f8a8 <xTaskIncrementTick+0x148>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f040 8090 	bne.w	800f894 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f774:	4b4d      	ldr	r3, [pc, #308]	@ (800f8ac <xTaskIncrementTick+0x14c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3301      	adds	r3, #1
 800f77a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f77c:	4a4b      	ldr	r2, [pc, #300]	@ (800f8ac <xTaskIncrementTick+0x14c>)
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d121      	bne.n	800f7cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f788:	4b49      	ldr	r3, [pc, #292]	@ (800f8b0 <xTaskIncrementTick+0x150>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00b      	beq.n	800f7aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800f792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	603b      	str	r3, [r7, #0]
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop
 800f7a8:	e7fd      	b.n	800f7a6 <xTaskIncrementTick+0x46>
 800f7aa:	4b41      	ldr	r3, [pc, #260]	@ (800f8b0 <xTaskIncrementTick+0x150>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	4b40      	ldr	r3, [pc, #256]	@ (800f8b4 <xTaskIncrementTick+0x154>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a3e      	ldr	r2, [pc, #248]	@ (800f8b0 <xTaskIncrementTick+0x150>)
 800f7b6:	6013      	str	r3, [r2, #0]
 800f7b8:	4a3e      	ldr	r2, [pc, #248]	@ (800f8b4 <xTaskIncrementTick+0x154>)
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	4b3e      	ldr	r3, [pc, #248]	@ (800f8b8 <xTaskIncrementTick+0x158>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	4a3c      	ldr	r2, [pc, #240]	@ (800f8b8 <xTaskIncrementTick+0x158>)
 800f7c6:	6013      	str	r3, [r2, #0]
 800f7c8:	f000 fae2 	bl	800fd90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f7cc:	4b3b      	ldr	r3, [pc, #236]	@ (800f8bc <xTaskIncrementTick+0x15c>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d349      	bcc.n	800f86a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7d6:	4b36      	ldr	r3, [pc, #216]	@ (800f8b0 <xTaskIncrementTick+0x150>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d104      	bne.n	800f7ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7e0:	4b36      	ldr	r3, [pc, #216]	@ (800f8bc <xTaskIncrementTick+0x15c>)
 800f7e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f7e6:	601a      	str	r2, [r3, #0]
					break;
 800f7e8:	e03f      	b.n	800f86a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ea:	4b31      	ldr	r3, [pc, #196]	@ (800f8b0 <xTaskIncrementTick+0x150>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7fa:	693a      	ldr	r2, [r7, #16]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d203      	bcs.n	800f80a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f802:	4a2e      	ldr	r2, [pc, #184]	@ (800f8bc <xTaskIncrementTick+0x15c>)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f808:	e02f      	b.n	800f86a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	3304      	adds	r3, #4
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fe fb66 	bl	800dee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d004      	beq.n	800f826 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	3318      	adds	r3, #24
 800f820:	4618      	mov	r0, r3
 800f822:	f7fe fb5d 	bl	800dee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f82a:	4b25      	ldr	r3, [pc, #148]	@ (800f8c0 <xTaskIncrementTick+0x160>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d903      	bls.n	800f83a <xTaskIncrementTick+0xda>
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f836:	4a22      	ldr	r2, [pc, #136]	@ (800f8c0 <xTaskIncrementTick+0x160>)
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f83e:	4613      	mov	r3, r2
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	4413      	add	r3, r2
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4a1f      	ldr	r2, [pc, #124]	@ (800f8c4 <xTaskIncrementTick+0x164>)
 800f848:	441a      	add	r2, r3
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	3304      	adds	r3, #4
 800f84e:	4619      	mov	r1, r3
 800f850:	4610      	mov	r0, r2
 800f852:	f7fe fae8 	bl	800de26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f85a:	4b1b      	ldr	r3, [pc, #108]	@ (800f8c8 <xTaskIncrementTick+0x168>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f860:	429a      	cmp	r2, r3
 800f862:	d3b8      	bcc.n	800f7d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f864:	2301      	movs	r3, #1
 800f866:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f868:	e7b5      	b.n	800f7d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f86a:	4b17      	ldr	r3, [pc, #92]	@ (800f8c8 <xTaskIncrementTick+0x168>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f870:	4914      	ldr	r1, [pc, #80]	@ (800f8c4 <xTaskIncrementTick+0x164>)
 800f872:	4613      	mov	r3, r2
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	4413      	add	r3, r2
 800f878:	009b      	lsls	r3, r3, #2
 800f87a:	440b      	add	r3, r1
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d901      	bls.n	800f886 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f882:	2301      	movs	r3, #1
 800f884:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f886:	4b11      	ldr	r3, [pc, #68]	@ (800f8cc <xTaskIncrementTick+0x16c>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d007      	beq.n	800f89e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f88e:	2301      	movs	r3, #1
 800f890:	617b      	str	r3, [r7, #20]
 800f892:	e004      	b.n	800f89e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f894:	4b0e      	ldr	r3, [pc, #56]	@ (800f8d0 <xTaskIncrementTick+0x170>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	3301      	adds	r3, #1
 800f89a:	4a0d      	ldr	r2, [pc, #52]	@ (800f8d0 <xTaskIncrementTick+0x170>)
 800f89c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f89e:	697b      	ldr	r3, [r7, #20]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3718      	adds	r7, #24
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	20003fa0 	.word	0x20003fa0
 800f8ac:	20003f7c 	.word	0x20003f7c
 800f8b0:	20003f30 	.word	0x20003f30
 800f8b4:	20003f34 	.word	0x20003f34
 800f8b8:	20003f90 	.word	0x20003f90
 800f8bc:	20003f98 	.word	0x20003f98
 800f8c0:	20003f80 	.word	0x20003f80
 800f8c4:	20003aa8 	.word	0x20003aa8
 800f8c8:	20003aa4 	.word	0x20003aa4
 800f8cc:	20003f8c 	.word	0x20003f8c
 800f8d0:	20003f88 	.word	0x20003f88

0800f8d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f8da:	4b2b      	ldr	r3, [pc, #172]	@ (800f988 <vTaskSwitchContext+0xb4>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d003      	beq.n	800f8ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f8e2:	4b2a      	ldr	r3, [pc, #168]	@ (800f98c <vTaskSwitchContext+0xb8>)
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8e8:	e047      	b.n	800f97a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f8ea:	4b28      	ldr	r3, [pc, #160]	@ (800f98c <vTaskSwitchContext+0xb8>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8f0:	4b27      	ldr	r3, [pc, #156]	@ (800f990 <vTaskSwitchContext+0xbc>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	60fb      	str	r3, [r7, #12]
 800f8f6:	e011      	b.n	800f91c <vTaskSwitchContext+0x48>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d10b      	bne.n	800f916 <vTaskSwitchContext+0x42>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	607b      	str	r3, [r7, #4]
}
 800f910:	bf00      	nop
 800f912:	bf00      	nop
 800f914:	e7fd      	b.n	800f912 <vTaskSwitchContext+0x3e>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	3b01      	subs	r3, #1
 800f91a:	60fb      	str	r3, [r7, #12]
 800f91c:	491d      	ldr	r1, [pc, #116]	@ (800f994 <vTaskSwitchContext+0xc0>)
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	4613      	mov	r3, r2
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	4413      	add	r3, r2
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	440b      	add	r3, r1
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d0e3      	beq.n	800f8f8 <vTaskSwitchContext+0x24>
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	4613      	mov	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	4a16      	ldr	r2, [pc, #88]	@ (800f994 <vTaskSwitchContext+0xc0>)
 800f93c:	4413      	add	r3, r2
 800f93e:	60bb      	str	r3, [r7, #8]
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	685a      	ldr	r2, [r3, #4]
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	605a      	str	r2, [r3, #4]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	685a      	ldr	r2, [r3, #4]
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	3308      	adds	r3, #8
 800f952:	429a      	cmp	r2, r3
 800f954:	d104      	bne.n	800f960 <vTaskSwitchContext+0x8c>
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	685a      	ldr	r2, [r3, #4]
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	605a      	str	r2, [r3, #4]
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	4a0c      	ldr	r2, [pc, #48]	@ (800f998 <vTaskSwitchContext+0xc4>)
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	4a09      	ldr	r2, [pc, #36]	@ (800f990 <vTaskSwitchContext+0xbc>)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f970:	4b09      	ldr	r3, [pc, #36]	@ (800f998 <vTaskSwitchContext+0xc4>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	3358      	adds	r3, #88	@ 0x58
 800f976:	4a09      	ldr	r2, [pc, #36]	@ (800f99c <vTaskSwitchContext+0xc8>)
 800f978:	6013      	str	r3, [r2, #0]
}
 800f97a:	bf00      	nop
 800f97c:	3714      	adds	r7, #20
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	20003fa0 	.word	0x20003fa0
 800f98c:	20003f8c 	.word	0x20003f8c
 800f990:	20003f80 	.word	0x20003f80
 800f994:	20003aa8 	.word	0x20003aa8
 800f998:	20003aa4 	.word	0x20003aa4
 800f99c:	20000194 	.word	0x20000194

0800f9a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10b      	bne.n	800f9c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	60fb      	str	r3, [r7, #12]
}
 800f9c2:	bf00      	nop
 800f9c4:	bf00      	nop
 800f9c6:	e7fd      	b.n	800f9c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9c8:	4b07      	ldr	r3, [pc, #28]	@ (800f9e8 <vTaskPlaceOnEventList+0x48>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3318      	adds	r3, #24
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7fe fa4c 	bl	800de6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f9d6:	2101      	movs	r1, #1
 800f9d8:	6838      	ldr	r0, [r7, #0]
 800f9da:	f000 fb97 	bl	801010c <prvAddCurrentTaskToDelayedList>
}
 800f9de:	bf00      	nop
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	20003aa4 	.word	0x20003aa4

0800f9ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b086      	sub	sp, #24
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10b      	bne.n	800fa16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	617b      	str	r3, [r7, #20]
}
 800fa10:	bf00      	nop
 800fa12:	bf00      	nop
 800fa14:	e7fd      	b.n	800fa12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa16:	4b0a      	ldr	r3, [pc, #40]	@ (800fa40 <vTaskPlaceOnEventListRestricted+0x54>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	3318      	adds	r3, #24
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	68f8      	ldr	r0, [r7, #12]
 800fa20:	f7fe fa01 	bl	800de26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d002      	beq.n	800fa30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800fa2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa30:	6879      	ldr	r1, [r7, #4]
 800fa32:	68b8      	ldr	r0, [r7, #8]
 800fa34:	f000 fb6a 	bl	801010c <prvAddCurrentTaskToDelayedList>
	}
 800fa38:	bf00      	nop
 800fa3a:	3718      	adds	r7, #24
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	20003aa4 	.word	0x20003aa4

0800fa44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b086      	sub	sp, #24
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d10b      	bne.n	800fa72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fa5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	60fb      	str	r3, [r7, #12]
}
 800fa6c:	bf00      	nop
 800fa6e:	bf00      	nop
 800fa70:	e7fd      	b.n	800fa6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	3318      	adds	r3, #24
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fe fa32 	bl	800dee0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa7c:	4b1d      	ldr	r3, [pc, #116]	@ (800faf4 <xTaskRemoveFromEventList+0xb0>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d11d      	bne.n	800fac0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	3304      	adds	r3, #4
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe fa29 	bl	800dee0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa92:	4b19      	ldr	r3, [pc, #100]	@ (800faf8 <xTaskRemoveFromEventList+0xb4>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d903      	bls.n	800faa2 <xTaskRemoveFromEventList+0x5e>
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa9e:	4a16      	ldr	r2, [pc, #88]	@ (800faf8 <xTaskRemoveFromEventList+0xb4>)
 800faa0:	6013      	str	r3, [r2, #0]
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faa6:	4613      	mov	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4a13      	ldr	r2, [pc, #76]	@ (800fafc <xTaskRemoveFromEventList+0xb8>)
 800fab0:	441a      	add	r2, r3
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	3304      	adds	r3, #4
 800fab6:	4619      	mov	r1, r3
 800fab8:	4610      	mov	r0, r2
 800faba:	f7fe f9b4 	bl	800de26 <vListInsertEnd>
 800fabe:	e005      	b.n	800facc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	3318      	adds	r3, #24
 800fac4:	4619      	mov	r1, r3
 800fac6:	480e      	ldr	r0, [pc, #56]	@ (800fb00 <xTaskRemoveFromEventList+0xbc>)
 800fac8:	f7fe f9ad 	bl	800de26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fad0:	4b0c      	ldr	r3, [pc, #48]	@ (800fb04 <xTaskRemoveFromEventList+0xc0>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d905      	bls.n	800fae6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fada:	2301      	movs	r3, #1
 800fadc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fade:	4b0a      	ldr	r3, [pc, #40]	@ (800fb08 <xTaskRemoveFromEventList+0xc4>)
 800fae0:	2201      	movs	r2, #1
 800fae2:	601a      	str	r2, [r3, #0]
 800fae4:	e001      	b.n	800faea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fae6:	2300      	movs	r3, #0
 800fae8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800faea:	697b      	ldr	r3, [r7, #20]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3718      	adds	r7, #24
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	20003fa0 	.word	0x20003fa0
 800faf8:	20003f80 	.word	0x20003f80
 800fafc:	20003aa8 	.word	0x20003aa8
 800fb00:	20003f38 	.word	0x20003f38
 800fb04:	20003aa4 	.word	0x20003aa4
 800fb08:	20003f8c 	.word	0x20003f8c

0800fb0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb14:	4b06      	ldr	r3, [pc, #24]	@ (800fb30 <vTaskInternalSetTimeOutState+0x24>)
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb1c:	4b05      	ldr	r3, [pc, #20]	@ (800fb34 <vTaskInternalSetTimeOutState+0x28>)
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	605a      	str	r2, [r3, #4]
}
 800fb24:	bf00      	nop
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	20003f90 	.word	0x20003f90
 800fb34:	20003f7c 	.word	0x20003f7c

0800fb38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b088      	sub	sp, #32
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10b      	bne.n	800fb60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb4c:	f383 8811 	msr	BASEPRI, r3
 800fb50:	f3bf 8f6f 	isb	sy
 800fb54:	f3bf 8f4f 	dsb	sy
 800fb58:	613b      	str	r3, [r7, #16]
}
 800fb5a:	bf00      	nop
 800fb5c:	bf00      	nop
 800fb5e:	e7fd      	b.n	800fb5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d10b      	bne.n	800fb7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800fb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	60fb      	str	r3, [r7, #12]
}
 800fb78:	bf00      	nop
 800fb7a:	bf00      	nop
 800fb7c:	e7fd      	b.n	800fb7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fb7e:	f000 ffa3 	bl	8010ac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fb82:	4b1d      	ldr	r3, [pc, #116]	@ (800fbf8 <xTaskCheckForTimeOut+0xc0>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	69ba      	ldr	r2, [r7, #24]
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb9a:	d102      	bne.n	800fba2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	61fb      	str	r3, [r7, #28]
 800fba0:	e023      	b.n	800fbea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	4b15      	ldr	r3, [pc, #84]	@ (800fbfc <xTaskCheckForTimeOut+0xc4>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d007      	beq.n	800fbbe <xTaskCheckForTimeOut+0x86>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	69ba      	ldr	r2, [r7, #24]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d302      	bcc.n	800fbbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	61fb      	str	r3, [r7, #28]
 800fbbc:	e015      	b.n	800fbea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d20b      	bcs.n	800fbe0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	1ad2      	subs	r2, r2, r3
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7ff ff99 	bl	800fb0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	61fb      	str	r3, [r7, #28]
 800fbde:	e004      	b.n	800fbea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fbea:	f000 ff9f 	bl	8010b2c <vPortExitCritical>

	return xReturn;
 800fbee:	69fb      	ldr	r3, [r7, #28]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3720      	adds	r7, #32
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	20003f7c 	.word	0x20003f7c
 800fbfc:	20003f90 	.word	0x20003f90

0800fc00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc00:	b480      	push	{r7}
 800fc02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc04:	4b03      	ldr	r3, [pc, #12]	@ (800fc14 <vTaskMissedYield+0x14>)
 800fc06:	2201      	movs	r2, #1
 800fc08:	601a      	str	r2, [r3, #0]
}
 800fc0a:	bf00      	nop
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr
 800fc14:	20003f8c 	.word	0x20003f8c

0800fc18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc20:	f000 f852 	bl	800fcc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc24:	4b06      	ldr	r3, [pc, #24]	@ (800fc40 <prvIdleTask+0x28>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d9f9      	bls.n	800fc20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc2c:	4b05      	ldr	r3, [pc, #20]	@ (800fc44 <prvIdleTask+0x2c>)
 800fc2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fc3c:	e7f0      	b.n	800fc20 <prvIdleTask+0x8>
 800fc3e:	bf00      	nop
 800fc40:	20003aa8 	.word	0x20003aa8
 800fc44:	e000ed04 	.word	0xe000ed04

0800fc48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc4e:	2300      	movs	r3, #0
 800fc50:	607b      	str	r3, [r7, #4]
 800fc52:	e00c      	b.n	800fc6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	4613      	mov	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	4413      	add	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	4a12      	ldr	r2, [pc, #72]	@ (800fca8 <prvInitialiseTaskLists+0x60>)
 800fc60:	4413      	add	r3, r2
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe f8b2 	bl	800ddcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	607b      	str	r3, [r7, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2b37      	cmp	r3, #55	@ 0x37
 800fc72:	d9ef      	bls.n	800fc54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc74:	480d      	ldr	r0, [pc, #52]	@ (800fcac <prvInitialiseTaskLists+0x64>)
 800fc76:	f7fe f8a9 	bl	800ddcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc7a:	480d      	ldr	r0, [pc, #52]	@ (800fcb0 <prvInitialiseTaskLists+0x68>)
 800fc7c:	f7fe f8a6 	bl	800ddcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc80:	480c      	ldr	r0, [pc, #48]	@ (800fcb4 <prvInitialiseTaskLists+0x6c>)
 800fc82:	f7fe f8a3 	bl	800ddcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc86:	480c      	ldr	r0, [pc, #48]	@ (800fcb8 <prvInitialiseTaskLists+0x70>)
 800fc88:	f7fe f8a0 	bl	800ddcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc8c:	480b      	ldr	r0, [pc, #44]	@ (800fcbc <prvInitialiseTaskLists+0x74>)
 800fc8e:	f7fe f89d 	bl	800ddcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc92:	4b0b      	ldr	r3, [pc, #44]	@ (800fcc0 <prvInitialiseTaskLists+0x78>)
 800fc94:	4a05      	ldr	r2, [pc, #20]	@ (800fcac <prvInitialiseTaskLists+0x64>)
 800fc96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc98:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc4 <prvInitialiseTaskLists+0x7c>)
 800fc9a:	4a05      	ldr	r2, [pc, #20]	@ (800fcb0 <prvInitialiseTaskLists+0x68>)
 800fc9c:	601a      	str	r2, [r3, #0]
}
 800fc9e:	bf00      	nop
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	20003aa8 	.word	0x20003aa8
 800fcac:	20003f08 	.word	0x20003f08
 800fcb0:	20003f1c 	.word	0x20003f1c
 800fcb4:	20003f38 	.word	0x20003f38
 800fcb8:	20003f4c 	.word	0x20003f4c
 800fcbc:	20003f64 	.word	0x20003f64
 800fcc0:	20003f30 	.word	0x20003f30
 800fcc4:	20003f34 	.word	0x20003f34

0800fcc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcce:	e019      	b.n	800fd04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fcd0:	f000 fefa 	bl	8010ac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcd4:	4b10      	ldr	r3, [pc, #64]	@ (800fd18 <prvCheckTasksWaitingTermination+0x50>)
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	3304      	adds	r3, #4
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fe f8fd 	bl	800dee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fce6:	4b0d      	ldr	r3, [pc, #52]	@ (800fd1c <prvCheckTasksWaitingTermination+0x54>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	3b01      	subs	r3, #1
 800fcec:	4a0b      	ldr	r2, [pc, #44]	@ (800fd1c <prvCheckTasksWaitingTermination+0x54>)
 800fcee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fcf0:	4b0b      	ldr	r3, [pc, #44]	@ (800fd20 <prvCheckTasksWaitingTermination+0x58>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	4a0a      	ldr	r2, [pc, #40]	@ (800fd20 <prvCheckTasksWaitingTermination+0x58>)
 800fcf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fcfa:	f000 ff17 	bl	8010b2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f810 	bl	800fd24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd04:	4b06      	ldr	r3, [pc, #24]	@ (800fd20 <prvCheckTasksWaitingTermination+0x58>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1e1      	bne.n	800fcd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd0c:	bf00      	nop
 800fd0e:	bf00      	nop
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	20003f4c 	.word	0x20003f4c
 800fd1c:	20003f78 	.word	0x20003f78
 800fd20:	20003f60 	.word	0x20003f60

0800fd24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	3358      	adds	r3, #88	@ 0x58
 800fd30:	4618      	mov	r0, r3
 800fd32:	f002 fc91 	bl	8012658 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d108      	bne.n	800fd52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd44:	4618      	mov	r0, r3
 800fd46:	f001 f8af 	bl	8010ea8 <vPortFree>
				vPortFree( pxTCB );
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f001 f8ac 	bl	8010ea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd50:	e019      	b.n	800fd86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d103      	bne.n	800fd64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f001 f8a3 	bl	8010ea8 <vPortFree>
	}
 800fd62:	e010      	b.n	800fd86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	d00b      	beq.n	800fd86 <prvDeleteTCB+0x62>
	__asm volatile
 800fd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd72:	f383 8811 	msr	BASEPRI, r3
 800fd76:	f3bf 8f6f 	isb	sy
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	60fb      	str	r3, [r7, #12]
}
 800fd80:	bf00      	nop
 800fd82:	bf00      	nop
 800fd84:	e7fd      	b.n	800fd82 <prvDeleteTCB+0x5e>
	}
 800fd86:	bf00      	nop
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
	...

0800fd90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd96:	4b0c      	ldr	r3, [pc, #48]	@ (800fdc8 <prvResetNextTaskUnblockTime+0x38>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d104      	bne.n	800fdaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fda0:	4b0a      	ldr	r3, [pc, #40]	@ (800fdcc <prvResetNextTaskUnblockTime+0x3c>)
 800fda2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fda6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fda8:	e008      	b.n	800fdbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdaa:	4b07      	ldr	r3, [pc, #28]	@ (800fdc8 <prvResetNextTaskUnblockTime+0x38>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	4a04      	ldr	r2, [pc, #16]	@ (800fdcc <prvResetNextTaskUnblockTime+0x3c>)
 800fdba:	6013      	str	r3, [r2, #0]
}
 800fdbc:	bf00      	nop
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr
 800fdc8:	20003f30 	.word	0x20003f30
 800fdcc:	20003f98 	.word	0x20003f98

0800fdd0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fdd6:	4b05      	ldr	r3, [pc, #20]	@ (800fdec <xTaskGetCurrentTaskHandle+0x1c>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fddc:	687b      	ldr	r3, [r7, #4]
	}
 800fdde:	4618      	mov	r0, r3
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	20003aa4 	.word	0x20003aa4

0800fdf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fdf6:	4b0b      	ldr	r3, [pc, #44]	@ (800fe24 <xTaskGetSchedulerState+0x34>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d102      	bne.n	800fe04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	607b      	str	r3, [r7, #4]
 800fe02:	e008      	b.n	800fe16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe04:	4b08      	ldr	r3, [pc, #32]	@ (800fe28 <xTaskGetSchedulerState+0x38>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d102      	bne.n	800fe12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe0c:	2302      	movs	r3, #2
 800fe0e:	607b      	str	r3, [r7, #4]
 800fe10:	e001      	b.n	800fe16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe12:	2300      	movs	r3, #0
 800fe14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe16:	687b      	ldr	r3, [r7, #4]
	}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	20003f84 	.word	0x20003f84
 800fe28:	20003fa0 	.word	0x20003fa0

0800fe2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d051      	beq.n	800fee6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe46:	4b2a      	ldr	r3, [pc, #168]	@ (800fef0 <xTaskPriorityInherit+0xc4>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d241      	bcs.n	800fed4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	db06      	blt.n	800fe66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe58:	4b25      	ldr	r3, [pc, #148]	@ (800fef0 <xTaskPriorityInherit+0xc4>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	6959      	ldr	r1, [r3, #20]
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe6e:	4613      	mov	r3, r2
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	4413      	add	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4a1f      	ldr	r2, [pc, #124]	@ (800fef4 <xTaskPriorityInherit+0xc8>)
 800fe78:	4413      	add	r3, r2
 800fe7a:	4299      	cmp	r1, r3
 800fe7c:	d122      	bne.n	800fec4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	3304      	adds	r3, #4
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe f82c 	bl	800dee0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe88:	4b19      	ldr	r3, [pc, #100]	@ (800fef0 <xTaskPriorityInherit+0xc4>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe96:	4b18      	ldr	r3, [pc, #96]	@ (800fef8 <xTaskPriorityInherit+0xcc>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d903      	bls.n	800fea6 <xTaskPriorityInherit+0x7a>
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea2:	4a15      	ldr	r2, [pc, #84]	@ (800fef8 <xTaskPriorityInherit+0xcc>)
 800fea4:	6013      	str	r3, [r2, #0]
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feaa:	4613      	mov	r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	4413      	add	r3, r2
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	4a10      	ldr	r2, [pc, #64]	@ (800fef4 <xTaskPriorityInherit+0xc8>)
 800feb4:	441a      	add	r2, r3
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	3304      	adds	r3, #4
 800feba:	4619      	mov	r1, r3
 800febc:	4610      	mov	r0, r2
 800febe:	f7fd ffb2 	bl	800de26 <vListInsertEnd>
 800fec2:	e004      	b.n	800fece <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fec4:	4b0a      	ldr	r3, [pc, #40]	@ (800fef0 <xTaskPriorityInherit+0xc4>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fece:	2301      	movs	r3, #1
 800fed0:	60fb      	str	r3, [r7, #12]
 800fed2:	e008      	b.n	800fee6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fed8:	4b05      	ldr	r3, [pc, #20]	@ (800fef0 <xTaskPriorityInherit+0xc4>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fede:	429a      	cmp	r2, r3
 800fee0:	d201      	bcs.n	800fee6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fee2:	2301      	movs	r3, #1
 800fee4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fee6:	68fb      	ldr	r3, [r7, #12]
	}
 800fee8:	4618      	mov	r0, r3
 800feea:	3710      	adds	r7, #16
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	20003aa4 	.word	0x20003aa4
 800fef4:	20003aa8 	.word	0x20003aa8
 800fef8:	20003f80 	.word	0x20003f80

0800fefc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b086      	sub	sp, #24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d058      	beq.n	800ffc4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff12:	4b2f      	ldr	r3, [pc, #188]	@ (800ffd0 <xTaskPriorityDisinherit+0xd4>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	693a      	ldr	r2, [r7, #16]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d00b      	beq.n	800ff34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ff1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	60fb      	str	r3, [r7, #12]
}
 800ff2e:	bf00      	nop
 800ff30:	bf00      	nop
 800ff32:	e7fd      	b.n	800ff30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10b      	bne.n	800ff54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ff3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	60bb      	str	r3, [r7, #8]
}
 800ff4e:	bf00      	nop
 800ff50:	bf00      	nop
 800ff52:	e7fd      	b.n	800ff50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff58:	1e5a      	subs	r2, r3, #1
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d02c      	beq.n	800ffc4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d128      	bne.n	800ffc4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fd ffb2 	bl	800dee0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff94:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd4 <xTaskPriorityDisinherit+0xd8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d903      	bls.n	800ffa4 <xTaskPriorityDisinherit+0xa8>
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa0:	4a0c      	ldr	r2, [pc, #48]	@ (800ffd4 <xTaskPriorityDisinherit+0xd8>)
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4413      	add	r3, r2
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	4a09      	ldr	r2, [pc, #36]	@ (800ffd8 <xTaskPriorityDisinherit+0xdc>)
 800ffb2:	441a      	add	r2, r3
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	3304      	adds	r3, #4
 800ffb8:	4619      	mov	r1, r3
 800ffba:	4610      	mov	r0, r2
 800ffbc:	f7fd ff33 	bl	800de26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffc4:	697b      	ldr	r3, [r7, #20]
	}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3718      	adds	r7, #24
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	20003aa4 	.word	0x20003aa4
 800ffd4:	20003f80 	.word	0x20003f80
 800ffd8:	20003aa8 	.word	0x20003aa8

0800ffdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b088      	sub	sp, #32
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ffea:	2301      	movs	r3, #1
 800ffec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d06c      	beq.n	80100ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10b      	bne.n	8010014 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010000:	f383 8811 	msr	BASEPRI, r3
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	f3bf 8f4f 	dsb	sy
 801000c:	60fb      	str	r3, [r7, #12]
}
 801000e:	bf00      	nop
 8010010:	bf00      	nop
 8010012:	e7fd      	b.n	8010010 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	429a      	cmp	r2, r3
 801001c:	d902      	bls.n	8010024 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	61fb      	str	r3, [r7, #28]
 8010022:	e002      	b.n	801002a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010028:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801002e:	69fa      	ldr	r2, [r7, #28]
 8010030:	429a      	cmp	r2, r3
 8010032:	d04c      	beq.n	80100ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010038:	697a      	ldr	r2, [r7, #20]
 801003a:	429a      	cmp	r2, r3
 801003c:	d147      	bne.n	80100ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801003e:	4b26      	ldr	r3, [pc, #152]	@ (80100d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	429a      	cmp	r2, r3
 8010046:	d10b      	bne.n	8010060 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	60bb      	str	r3, [r7, #8]
}
 801005a:	bf00      	nop
 801005c:	bf00      	nop
 801005e:	e7fd      	b.n	801005c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010064:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	69fa      	ldr	r2, [r7, #28]
 801006a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	699b      	ldr	r3, [r3, #24]
 8010070:	2b00      	cmp	r3, #0
 8010072:	db04      	blt.n	801007e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	6959      	ldr	r1, [r3, #20]
 8010082:	693a      	ldr	r2, [r7, #16]
 8010084:	4613      	mov	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4413      	add	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4a13      	ldr	r2, [pc, #76]	@ (80100dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801008e:	4413      	add	r3, r2
 8010090:	4299      	cmp	r1, r3
 8010092:	d11c      	bne.n	80100ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	3304      	adds	r3, #4
 8010098:	4618      	mov	r0, r3
 801009a:	f7fd ff21 	bl	800dee0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100a2:	4b0f      	ldr	r3, [pc, #60]	@ (80100e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d903      	bls.n	80100b2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ae:	4a0c      	ldr	r2, [pc, #48]	@ (80100e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100b6:	4613      	mov	r3, r2
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	4413      	add	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4a07      	ldr	r2, [pc, #28]	@ (80100dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80100c0:	441a      	add	r2, r3
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	3304      	adds	r3, #4
 80100c6:	4619      	mov	r1, r3
 80100c8:	4610      	mov	r0, r2
 80100ca:	f7fd feac 	bl	800de26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100ce:	bf00      	nop
 80100d0:	3720      	adds	r7, #32
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	20003aa4 	.word	0x20003aa4
 80100dc:	20003aa8 	.word	0x20003aa8
 80100e0:	20003f80 	.word	0x20003f80

080100e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80100e4:	b480      	push	{r7}
 80100e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80100e8:	4b07      	ldr	r3, [pc, #28]	@ (8010108 <pvTaskIncrementMutexHeldCount+0x24>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d004      	beq.n	80100fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80100f0:	4b05      	ldr	r3, [pc, #20]	@ (8010108 <pvTaskIncrementMutexHeldCount+0x24>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80100f6:	3201      	adds	r2, #1
 80100f8:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80100fa:	4b03      	ldr	r3, [pc, #12]	@ (8010108 <pvTaskIncrementMutexHeldCount+0x24>)
 80100fc:	681b      	ldr	r3, [r3, #0]
	}
 80100fe:	4618      	mov	r0, r3
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr
 8010108:	20003aa4 	.word	0x20003aa4

0801010c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010116:	4b21      	ldr	r3, [pc, #132]	@ (801019c <prvAddCurrentTaskToDelayedList+0x90>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801011c:	4b20      	ldr	r3, [pc, #128]	@ (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3304      	adds	r3, #4
 8010122:	4618      	mov	r0, r3
 8010124:	f7fd fedc 	bl	800dee0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801012e:	d10a      	bne.n	8010146 <prvAddCurrentTaskToDelayedList+0x3a>
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d007      	beq.n	8010146 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010136:	4b1a      	ldr	r3, [pc, #104]	@ (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	3304      	adds	r3, #4
 801013c:	4619      	mov	r1, r3
 801013e:	4819      	ldr	r0, [pc, #100]	@ (80101a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010140:	f7fd fe71 	bl	800de26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010144:	e026      	b.n	8010194 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4413      	add	r3, r2
 801014c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801014e:	4b14      	ldr	r3, [pc, #80]	@ (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010156:	68ba      	ldr	r2, [r7, #8]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	429a      	cmp	r2, r3
 801015c:	d209      	bcs.n	8010172 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801015e:	4b12      	ldr	r3, [pc, #72]	@ (80101a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	4b0f      	ldr	r3, [pc, #60]	@ (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3304      	adds	r3, #4
 8010168:	4619      	mov	r1, r3
 801016a:	4610      	mov	r0, r2
 801016c:	f7fd fe7f 	bl	800de6e <vListInsert>
}
 8010170:	e010      	b.n	8010194 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010172:	4b0e      	ldr	r3, [pc, #56]	@ (80101ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	4b0a      	ldr	r3, [pc, #40]	@ (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3304      	adds	r3, #4
 801017c:	4619      	mov	r1, r3
 801017e:	4610      	mov	r0, r2
 8010180:	f7fd fe75 	bl	800de6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010184:	4b0a      	ldr	r3, [pc, #40]	@ (80101b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	429a      	cmp	r2, r3
 801018c:	d202      	bcs.n	8010194 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801018e:	4a08      	ldr	r2, [pc, #32]	@ (80101b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	6013      	str	r3, [r2, #0]
}
 8010194:	bf00      	nop
 8010196:	3710      	adds	r7, #16
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}
 801019c:	20003f7c 	.word	0x20003f7c
 80101a0:	20003aa4 	.word	0x20003aa4
 80101a4:	20003f64 	.word	0x20003f64
 80101a8:	20003f34 	.word	0x20003f34
 80101ac:	20003f30 	.word	0x20003f30
 80101b0:	20003f98 	.word	0x20003f98

080101b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b08a      	sub	sp, #40	@ 0x28
 80101b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80101ba:	2300      	movs	r3, #0
 80101bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80101be:	f000 fb13 	bl	80107e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80101c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010238 <xTimerCreateTimerTask+0x84>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d021      	beq.n	801020e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80101ca:	2300      	movs	r3, #0
 80101cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80101d2:	1d3a      	adds	r2, r7, #4
 80101d4:	f107 0108 	add.w	r1, r7, #8
 80101d8:	f107 030c 	add.w	r3, r7, #12
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fd fddb 	bl	800dd98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	68fa      	ldr	r2, [r7, #12]
 80101e8:	9202      	str	r2, [sp, #8]
 80101ea:	9301      	str	r3, [sp, #4]
 80101ec:	2302      	movs	r3, #2
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	2300      	movs	r3, #0
 80101f2:	460a      	mov	r2, r1
 80101f4:	4911      	ldr	r1, [pc, #68]	@ (801023c <xTimerCreateTimerTask+0x88>)
 80101f6:	4812      	ldr	r0, [pc, #72]	@ (8010240 <xTimerCreateTimerTask+0x8c>)
 80101f8:	f7fe ff80 	bl	800f0fc <xTaskCreateStatic>
 80101fc:	4603      	mov	r3, r0
 80101fe:	4a11      	ldr	r2, [pc, #68]	@ (8010244 <xTimerCreateTimerTask+0x90>)
 8010200:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010202:	4b10      	ldr	r3, [pc, #64]	@ (8010244 <xTimerCreateTimerTask+0x90>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d001      	beq.n	801020e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801020a:	2301      	movs	r3, #1
 801020c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10b      	bne.n	801022c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010218:	f383 8811 	msr	BASEPRI, r3
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	f3bf 8f4f 	dsb	sy
 8010224:	613b      	str	r3, [r7, #16]
}
 8010226:	bf00      	nop
 8010228:	bf00      	nop
 801022a:	e7fd      	b.n	8010228 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801022c:	697b      	ldr	r3, [r7, #20]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	20003fd4 	.word	0x20003fd4
 801023c:	080158c8 	.word	0x080158c8
 8010240:	08010381 	.word	0x08010381
 8010244:	20003fd8 	.word	0x20003fd8

08010248 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b08a      	sub	sp, #40	@ 0x28
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
 8010254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010256:	2300      	movs	r3, #0
 8010258:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10b      	bne.n	8010278 <xTimerGenericCommand+0x30>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010264:	f383 8811 	msr	BASEPRI, r3
 8010268:	f3bf 8f6f 	isb	sy
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	623b      	str	r3, [r7, #32]
}
 8010272:	bf00      	nop
 8010274:	bf00      	nop
 8010276:	e7fd      	b.n	8010274 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010278:	4b19      	ldr	r3, [pc, #100]	@ (80102e0 <xTimerGenericCommand+0x98>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d02a      	beq.n	80102d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	2b05      	cmp	r3, #5
 8010290:	dc18      	bgt.n	80102c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010292:	f7ff fdad 	bl	800fdf0 <xTaskGetSchedulerState>
 8010296:	4603      	mov	r3, r0
 8010298:	2b02      	cmp	r3, #2
 801029a:	d109      	bne.n	80102b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801029c:	4b10      	ldr	r3, [pc, #64]	@ (80102e0 <xTimerGenericCommand+0x98>)
 801029e:	6818      	ldr	r0, [r3, #0]
 80102a0:	f107 0110 	add.w	r1, r7, #16
 80102a4:	2300      	movs	r3, #0
 80102a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102a8:	f7fe f8b0 	bl	800e40c <xQueueGenericSend>
 80102ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80102ae:	e012      	b.n	80102d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80102b0:	4b0b      	ldr	r3, [pc, #44]	@ (80102e0 <xTimerGenericCommand+0x98>)
 80102b2:	6818      	ldr	r0, [r3, #0]
 80102b4:	f107 0110 	add.w	r1, r7, #16
 80102b8:	2300      	movs	r3, #0
 80102ba:	2200      	movs	r2, #0
 80102bc:	f7fe f8a6 	bl	800e40c <xQueueGenericSend>
 80102c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80102c2:	e008      	b.n	80102d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80102c4:	4b06      	ldr	r3, [pc, #24]	@ (80102e0 <xTimerGenericCommand+0x98>)
 80102c6:	6818      	ldr	r0, [r3, #0]
 80102c8:	f107 0110 	add.w	r1, r7, #16
 80102cc:	2300      	movs	r3, #0
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	f7fe f99e 	bl	800e610 <xQueueGenericSendFromISR>
 80102d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80102d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3728      	adds	r7, #40	@ 0x28
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	20003fd4 	.word	0x20003fd4

080102e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b088      	sub	sp, #32
 80102e8:	af02      	add	r7, sp, #8
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102ee:	4b23      	ldr	r3, [pc, #140]	@ (801037c <prvProcessExpiredTimer+0x98>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	3304      	adds	r3, #4
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fd fdef 	bl	800dee0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010308:	f003 0304 	and.w	r3, r3, #4
 801030c:	2b00      	cmp	r3, #0
 801030e:	d023      	beq.n	8010358 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	699a      	ldr	r2, [r3, #24]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	18d1      	adds	r1, r2, r3
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	683a      	ldr	r2, [r7, #0]
 801031c:	6978      	ldr	r0, [r7, #20]
 801031e:	f000 f8d5 	bl	80104cc <prvInsertTimerInActiveList>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d020      	beq.n	801036a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010328:	2300      	movs	r3, #0
 801032a:	9300      	str	r3, [sp, #0]
 801032c:	2300      	movs	r3, #0
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	6978      	ldr	r0, [r7, #20]
 8010334:	f7ff ff88 	bl	8010248 <xTimerGenericCommand>
 8010338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d114      	bne.n	801036a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010344:	f383 8811 	msr	BASEPRI, r3
 8010348:	f3bf 8f6f 	isb	sy
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	60fb      	str	r3, [r7, #12]
}
 8010352:	bf00      	nop
 8010354:	bf00      	nop
 8010356:	e7fd      	b.n	8010354 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801035e:	f023 0301 	bic.w	r3, r3, #1
 8010362:	b2da      	uxtb	r2, r3
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	6a1b      	ldr	r3, [r3, #32]
 801036e:	6978      	ldr	r0, [r7, #20]
 8010370:	4798      	blx	r3
}
 8010372:	bf00      	nop
 8010374:	3718      	adds	r7, #24
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	20003fcc 	.word	0x20003fcc

08010380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010388:	f107 0308 	add.w	r3, r7, #8
 801038c:	4618      	mov	r0, r3
 801038e:	f000 f859 	bl	8010444 <prvGetNextExpireTime>
 8010392:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	4619      	mov	r1, r3
 8010398:	68f8      	ldr	r0, [r7, #12]
 801039a:	f000 f805 	bl	80103a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801039e:	f000 f8d7 	bl	8010550 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103a2:	bf00      	nop
 80103a4:	e7f0      	b.n	8010388 <prvTimerTask+0x8>
	...

080103a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80103b2:	f7ff f907 	bl	800f5c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103b6:	f107 0308 	add.w	r3, r7, #8
 80103ba:	4618      	mov	r0, r3
 80103bc:	f000 f866 	bl	801048c <prvSampleTimeNow>
 80103c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d130      	bne.n	801042a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d10a      	bne.n	80103e4 <prvProcessTimerOrBlockTask+0x3c>
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d806      	bhi.n	80103e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80103d6:	f7ff f903 	bl	800f5e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80103da:	68f9      	ldr	r1, [r7, #12]
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f7ff ff81 	bl	80102e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80103e2:	e024      	b.n	801042e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d008      	beq.n	80103fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80103ea:	4b13      	ldr	r3, [pc, #76]	@ (8010438 <prvProcessTimerOrBlockTask+0x90>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d101      	bne.n	80103f8 <prvProcessTimerOrBlockTask+0x50>
 80103f4:	2301      	movs	r3, #1
 80103f6:	e000      	b.n	80103fa <prvProcessTimerOrBlockTask+0x52>
 80103f8:	2300      	movs	r3, #0
 80103fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80103fc:	4b0f      	ldr	r3, [pc, #60]	@ (801043c <prvProcessTimerOrBlockTask+0x94>)
 80103fe:	6818      	ldr	r0, [r3, #0]
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	683a      	ldr	r2, [r7, #0]
 8010408:	4619      	mov	r1, r3
 801040a:	f7fe fe43 	bl	800f094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801040e:	f7ff f8e7 	bl	800f5e0 <xTaskResumeAll>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d10a      	bne.n	801042e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010418:	4b09      	ldr	r3, [pc, #36]	@ (8010440 <prvProcessTimerOrBlockTask+0x98>)
 801041a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	f3bf 8f4f 	dsb	sy
 8010424:	f3bf 8f6f 	isb	sy
}
 8010428:	e001      	b.n	801042e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801042a:	f7ff f8d9 	bl	800f5e0 <xTaskResumeAll>
}
 801042e:	bf00      	nop
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	20003fd0 	.word	0x20003fd0
 801043c:	20003fd4 	.word	0x20003fd4
 8010440:	e000ed04 	.word	0xe000ed04

08010444 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801044c:	4b0e      	ldr	r3, [pc, #56]	@ (8010488 <prvGetNextExpireTime+0x44>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d101      	bne.n	801045a <prvGetNextExpireTime+0x16>
 8010456:	2201      	movs	r2, #1
 8010458:	e000      	b.n	801045c <prvGetNextExpireTime+0x18>
 801045a:	2200      	movs	r2, #0
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d105      	bne.n	8010474 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010468:	4b07      	ldr	r3, [pc, #28]	@ (8010488 <prvGetNextExpireTime+0x44>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	60fb      	str	r3, [r7, #12]
 8010472:	e001      	b.n	8010478 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010474:	2300      	movs	r3, #0
 8010476:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010478:	68fb      	ldr	r3, [r7, #12]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	20003fcc 	.word	0x20003fcc

0801048c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010494:	f7ff f942 	bl	800f71c <xTaskGetTickCount>
 8010498:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801049a:	4b0b      	ldr	r3, [pc, #44]	@ (80104c8 <prvSampleTimeNow+0x3c>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d205      	bcs.n	80104b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80104a4:	f000 f93a 	bl	801071c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2201      	movs	r2, #1
 80104ac:	601a      	str	r2, [r3, #0]
 80104ae:	e002      	b.n	80104b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80104b6:	4a04      	ldr	r2, [pc, #16]	@ (80104c8 <prvSampleTimeNow+0x3c>)
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80104bc:	68fb      	ldr	r3, [r7, #12]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	20003fdc 	.word	0x20003fdc

080104cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80104da:	2300      	movs	r3, #0
 80104dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	68ba      	ldr	r2, [r7, #8]
 80104e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	68fa      	ldr	r2, [r7, #12]
 80104e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80104ea:	68ba      	ldr	r2, [r7, #8]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d812      	bhi.n	8010518 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	1ad2      	subs	r2, r2, r3
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d302      	bcc.n	8010506 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010500:	2301      	movs	r3, #1
 8010502:	617b      	str	r3, [r7, #20]
 8010504:	e01b      	b.n	801053e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010506:	4b10      	ldr	r3, [pc, #64]	@ (8010548 <prvInsertTimerInActiveList+0x7c>)
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	3304      	adds	r3, #4
 801050e:	4619      	mov	r1, r3
 8010510:	4610      	mov	r0, r2
 8010512:	f7fd fcac 	bl	800de6e <vListInsert>
 8010516:	e012      	b.n	801053e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	429a      	cmp	r2, r3
 801051e:	d206      	bcs.n	801052e <prvInsertTimerInActiveList+0x62>
 8010520:	68ba      	ldr	r2, [r7, #8]
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	429a      	cmp	r2, r3
 8010526:	d302      	bcc.n	801052e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010528:	2301      	movs	r3, #1
 801052a:	617b      	str	r3, [r7, #20]
 801052c:	e007      	b.n	801053e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801052e:	4b07      	ldr	r3, [pc, #28]	@ (801054c <prvInsertTimerInActiveList+0x80>)
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	3304      	adds	r3, #4
 8010536:	4619      	mov	r1, r3
 8010538:	4610      	mov	r0, r2
 801053a:	f7fd fc98 	bl	800de6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801053e:	697b      	ldr	r3, [r7, #20]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3718      	adds	r7, #24
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	20003fd0 	.word	0x20003fd0
 801054c:	20003fcc 	.word	0x20003fcc

08010550 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b08e      	sub	sp, #56	@ 0x38
 8010554:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010556:	e0ce      	b.n	80106f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	da19      	bge.n	8010592 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801055e:	1d3b      	adds	r3, r7, #4
 8010560:	3304      	adds	r3, #4
 8010562:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010566:	2b00      	cmp	r3, #0
 8010568:	d10b      	bne.n	8010582 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	61fb      	str	r3, [r7, #28]
}
 801057c:	bf00      	nop
 801057e:	bf00      	nop
 8010580:	e7fd      	b.n	801057e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010588:	6850      	ldr	r0, [r2, #4]
 801058a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801058c:	6892      	ldr	r2, [r2, #8]
 801058e:	4611      	mov	r1, r2
 8010590:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	f2c0 80ae 	blt.w	80106f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801059e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a0:	695b      	ldr	r3, [r3, #20]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d004      	beq.n	80105b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a8:	3304      	adds	r3, #4
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fd fc98 	bl	800dee0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80105b0:	463b      	mov	r3, r7
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7ff ff6a 	bl	801048c <prvSampleTimeNow>
 80105b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b09      	cmp	r3, #9
 80105be:	f200 8097 	bhi.w	80106f0 <prvProcessReceivedCommands+0x1a0>
 80105c2:	a201      	add	r2, pc, #4	@ (adr r2, 80105c8 <prvProcessReceivedCommands+0x78>)
 80105c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105c8:	080105f1 	.word	0x080105f1
 80105cc:	080105f1 	.word	0x080105f1
 80105d0:	080105f1 	.word	0x080105f1
 80105d4:	08010667 	.word	0x08010667
 80105d8:	0801067b 	.word	0x0801067b
 80105dc:	080106c7 	.word	0x080106c7
 80105e0:	080105f1 	.word	0x080105f1
 80105e4:	080105f1 	.word	0x080105f1
 80105e8:	08010667 	.word	0x08010667
 80105ec:	0801067b 	.word	0x0801067b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105f6:	f043 0301 	orr.w	r3, r3, #1
 80105fa:	b2da      	uxtb	r2, r3
 80105fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010602:	68ba      	ldr	r2, [r7, #8]
 8010604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	18d1      	adds	r1, r2, r3
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801060e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010610:	f7ff ff5c 	bl	80104cc <prvInsertTimerInActiveList>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d06c      	beq.n	80106f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061c:	6a1b      	ldr	r3, [r3, #32]
 801061e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010620:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010628:	f003 0304 	and.w	r3, r3, #4
 801062c:	2b00      	cmp	r3, #0
 801062e:	d061      	beq.n	80106f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010630:	68ba      	ldr	r2, [r7, #8]
 8010632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	441a      	add	r2, r3
 8010638:	2300      	movs	r3, #0
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	2300      	movs	r3, #0
 801063e:	2100      	movs	r1, #0
 8010640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010642:	f7ff fe01 	bl	8010248 <xTimerGenericCommand>
 8010646:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010648:	6a3b      	ldr	r3, [r7, #32]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d152      	bne.n	80106f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801064e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	61bb      	str	r3, [r7, #24]
}
 8010660:	bf00      	nop
 8010662:	bf00      	nop
 8010664:	e7fd      	b.n	8010662 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801066c:	f023 0301 	bic.w	r3, r3, #1
 8010670:	b2da      	uxtb	r2, r3
 8010672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010674:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010678:	e03d      	b.n	80106f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801067a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801067c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010680:	f043 0301 	orr.w	r3, r3, #1
 8010684:	b2da      	uxtb	r2, r3
 8010686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010690:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010694:	699b      	ldr	r3, [r3, #24]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d10b      	bne.n	80106b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801069a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	617b      	str	r3, [r7, #20]
}
 80106ac:	bf00      	nop
 80106ae:	bf00      	nop
 80106b0:	e7fd      	b.n	80106ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80106b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b4:	699a      	ldr	r2, [r3, #24]
 80106b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b8:	18d1      	adds	r1, r2, r3
 80106ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106c0:	f7ff ff04 	bl	80104cc <prvInsertTimerInActiveList>
					break;
 80106c4:	e017      	b.n	80106f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80106c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106cc:	f003 0302 	and.w	r3, r3, #2
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d103      	bne.n	80106dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80106d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106d6:	f000 fbe7 	bl	8010ea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80106da:	e00c      	b.n	80106f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80106dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106e2:	f023 0301 	bic.w	r3, r3, #1
 80106e6:	b2da      	uxtb	r2, r3
 80106e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80106ee:	e002      	b.n	80106f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80106f0:	bf00      	nop
 80106f2:	e000      	b.n	80106f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80106f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106f6:	4b08      	ldr	r3, [pc, #32]	@ (8010718 <prvProcessReceivedCommands+0x1c8>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	1d39      	adds	r1, r7, #4
 80106fc:	2200      	movs	r2, #0
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fe f8b4 	bl	800e86c <xQueueReceive>
 8010704:	4603      	mov	r3, r0
 8010706:	2b00      	cmp	r3, #0
 8010708:	f47f af26 	bne.w	8010558 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801070c:	bf00      	nop
 801070e:	bf00      	nop
 8010710:	3730      	adds	r7, #48	@ 0x30
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	20003fd4 	.word	0x20003fd4

0801071c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b088      	sub	sp, #32
 8010720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010722:	e049      	b.n	80107b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010724:	4b2e      	ldr	r3, [pc, #184]	@ (80107e0 <prvSwitchTimerLists+0xc4>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801072e:	4b2c      	ldr	r3, [pc, #176]	@ (80107e0 <prvSwitchTimerLists+0xc4>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	3304      	adds	r3, #4
 801073c:	4618      	mov	r0, r3
 801073e:	f7fd fbcf 	bl	800dee0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6a1b      	ldr	r3, [r3, #32]
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010750:	f003 0304 	and.w	r3, r3, #4
 8010754:	2b00      	cmp	r3, #0
 8010756:	d02f      	beq.n	80107b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	699b      	ldr	r3, [r3, #24]
 801075c:	693a      	ldr	r2, [r7, #16]
 801075e:	4413      	add	r3, r2
 8010760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010762:	68ba      	ldr	r2, [r7, #8]
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	429a      	cmp	r2, r3
 8010768:	d90e      	bls.n	8010788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	68ba      	ldr	r2, [r7, #8]
 801076e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010776:	4b1a      	ldr	r3, [pc, #104]	@ (80107e0 <prvSwitchTimerLists+0xc4>)
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	3304      	adds	r3, #4
 801077e:	4619      	mov	r1, r3
 8010780:	4610      	mov	r0, r2
 8010782:	f7fd fb74 	bl	800de6e <vListInsert>
 8010786:	e017      	b.n	80107b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010788:	2300      	movs	r3, #0
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	2300      	movs	r3, #0
 801078e:	693a      	ldr	r2, [r7, #16]
 8010790:	2100      	movs	r1, #0
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	f7ff fd58 	bl	8010248 <xTimerGenericCommand>
 8010798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10b      	bne.n	80107b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	603b      	str	r3, [r7, #0]
}
 80107b2:	bf00      	nop
 80107b4:	bf00      	nop
 80107b6:	e7fd      	b.n	80107b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80107b8:	4b09      	ldr	r3, [pc, #36]	@ (80107e0 <prvSwitchTimerLists+0xc4>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1b0      	bne.n	8010724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80107c2:	4b07      	ldr	r3, [pc, #28]	@ (80107e0 <prvSwitchTimerLists+0xc4>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80107c8:	4b06      	ldr	r3, [pc, #24]	@ (80107e4 <prvSwitchTimerLists+0xc8>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4a04      	ldr	r2, [pc, #16]	@ (80107e0 <prvSwitchTimerLists+0xc4>)
 80107ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80107d0:	4a04      	ldr	r2, [pc, #16]	@ (80107e4 <prvSwitchTimerLists+0xc8>)
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	6013      	str	r3, [r2, #0]
}
 80107d6:	bf00      	nop
 80107d8:	3718      	adds	r7, #24
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	20003fcc 	.word	0x20003fcc
 80107e4:	20003fd0 	.word	0x20003fd0

080107e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80107ee:	f000 f96b 	bl	8010ac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80107f2:	4b15      	ldr	r3, [pc, #84]	@ (8010848 <prvCheckForValidListAndQueue+0x60>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d120      	bne.n	801083c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80107fa:	4814      	ldr	r0, [pc, #80]	@ (801084c <prvCheckForValidListAndQueue+0x64>)
 80107fc:	f7fd fae6 	bl	800ddcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010800:	4813      	ldr	r0, [pc, #76]	@ (8010850 <prvCheckForValidListAndQueue+0x68>)
 8010802:	f7fd fae3 	bl	800ddcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010806:	4b13      	ldr	r3, [pc, #76]	@ (8010854 <prvCheckForValidListAndQueue+0x6c>)
 8010808:	4a10      	ldr	r2, [pc, #64]	@ (801084c <prvCheckForValidListAndQueue+0x64>)
 801080a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801080c:	4b12      	ldr	r3, [pc, #72]	@ (8010858 <prvCheckForValidListAndQueue+0x70>)
 801080e:	4a10      	ldr	r2, [pc, #64]	@ (8010850 <prvCheckForValidListAndQueue+0x68>)
 8010810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010812:	2300      	movs	r3, #0
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	4b11      	ldr	r3, [pc, #68]	@ (801085c <prvCheckForValidListAndQueue+0x74>)
 8010818:	4a11      	ldr	r2, [pc, #68]	@ (8010860 <prvCheckForValidListAndQueue+0x78>)
 801081a:	2110      	movs	r1, #16
 801081c:	200a      	movs	r0, #10
 801081e:	f7fd fbf3 	bl	800e008 <xQueueGenericCreateStatic>
 8010822:	4603      	mov	r3, r0
 8010824:	4a08      	ldr	r2, [pc, #32]	@ (8010848 <prvCheckForValidListAndQueue+0x60>)
 8010826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010828:	4b07      	ldr	r3, [pc, #28]	@ (8010848 <prvCheckForValidListAndQueue+0x60>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d005      	beq.n	801083c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010830:	4b05      	ldr	r3, [pc, #20]	@ (8010848 <prvCheckForValidListAndQueue+0x60>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	490b      	ldr	r1, [pc, #44]	@ (8010864 <prvCheckForValidListAndQueue+0x7c>)
 8010836:	4618      	mov	r0, r3
 8010838:	f7fe fbd8 	bl	800efec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801083c:	f000 f976 	bl	8010b2c <vPortExitCritical>
}
 8010840:	bf00      	nop
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	20003fd4 	.word	0x20003fd4
 801084c:	20003fa4 	.word	0x20003fa4
 8010850:	20003fb8 	.word	0x20003fb8
 8010854:	20003fcc 	.word	0x20003fcc
 8010858:	20003fd0 	.word	0x20003fd0
 801085c:	20004080 	.word	0x20004080
 8010860:	20003fe0 	.word	0x20003fe0
 8010864:	080158d0 	.word	0x080158d0

08010868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	3b04      	subs	r3, #4
 8010878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	3b04      	subs	r3, #4
 8010886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	f023 0201 	bic.w	r2, r3, #1
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	3b04      	subs	r3, #4
 8010896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010898:	4a0c      	ldr	r2, [pc, #48]	@ (80108cc <pxPortInitialiseStack+0x64>)
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	3b14      	subs	r3, #20
 80108a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	3b04      	subs	r3, #4
 80108ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f06f 0202 	mvn.w	r2, #2
 80108b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3b20      	subs	r3, #32
 80108bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80108be:	68fb      	ldr	r3, [r7, #12]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3714      	adds	r7, #20
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	080108d1 	.word	0x080108d1

080108d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80108da:	4b13      	ldr	r3, [pc, #76]	@ (8010928 <prvTaskExitError+0x58>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80108e2:	d00b      	beq.n	80108fc <prvTaskExitError+0x2c>
	__asm volatile
 80108e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	60fb      	str	r3, [r7, #12]
}
 80108f6:	bf00      	nop
 80108f8:	bf00      	nop
 80108fa:	e7fd      	b.n	80108f8 <prvTaskExitError+0x28>
	__asm volatile
 80108fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	60bb      	str	r3, [r7, #8]
}
 801090e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010910:	bf00      	nop
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d0fc      	beq.n	8010912 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010918:	bf00      	nop
 801091a:	bf00      	nop
 801091c:	3714      	adds	r7, #20
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	2000011c 	.word	0x2000011c
 801092c:	00000000 	.word	0x00000000

08010930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010930:	4b07      	ldr	r3, [pc, #28]	@ (8010950 <pxCurrentTCBConst2>)
 8010932:	6819      	ldr	r1, [r3, #0]
 8010934:	6808      	ldr	r0, [r1, #0]
 8010936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801093a:	f380 8809 	msr	PSP, r0
 801093e:	f3bf 8f6f 	isb	sy
 8010942:	f04f 0000 	mov.w	r0, #0
 8010946:	f380 8811 	msr	BASEPRI, r0
 801094a:	4770      	bx	lr
 801094c:	f3af 8000 	nop.w

08010950 <pxCurrentTCBConst2>:
 8010950:	20003aa4 	.word	0x20003aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010954:	bf00      	nop
 8010956:	bf00      	nop

08010958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010958:	4808      	ldr	r0, [pc, #32]	@ (801097c <prvPortStartFirstTask+0x24>)
 801095a:	6800      	ldr	r0, [r0, #0]
 801095c:	6800      	ldr	r0, [r0, #0]
 801095e:	f380 8808 	msr	MSP, r0
 8010962:	f04f 0000 	mov.w	r0, #0
 8010966:	f380 8814 	msr	CONTROL, r0
 801096a:	b662      	cpsie	i
 801096c:	b661      	cpsie	f
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	df00      	svc	0
 8010978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801097a:	bf00      	nop
 801097c:	e000ed08 	.word	0xe000ed08

08010980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010986:	4b47      	ldr	r3, [pc, #284]	@ (8010aa4 <xPortStartScheduler+0x124>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4a47      	ldr	r2, [pc, #284]	@ (8010aa8 <xPortStartScheduler+0x128>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d10b      	bne.n	80109a8 <xPortStartScheduler+0x28>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	613b      	str	r3, [r7, #16]
}
 80109a2:	bf00      	nop
 80109a4:	bf00      	nop
 80109a6:	e7fd      	b.n	80109a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80109a8:	4b3e      	ldr	r3, [pc, #248]	@ (8010aa4 <xPortStartScheduler+0x124>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a3f      	ldr	r2, [pc, #252]	@ (8010aac <xPortStartScheduler+0x12c>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d10b      	bne.n	80109ca <xPortStartScheduler+0x4a>
	__asm volatile
 80109b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b6:	f383 8811 	msr	BASEPRI, r3
 80109ba:	f3bf 8f6f 	isb	sy
 80109be:	f3bf 8f4f 	dsb	sy
 80109c2:	60fb      	str	r3, [r7, #12]
}
 80109c4:	bf00      	nop
 80109c6:	bf00      	nop
 80109c8:	e7fd      	b.n	80109c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109ca:	4b39      	ldr	r3, [pc, #228]	@ (8010ab0 <xPortStartScheduler+0x130>)
 80109cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	b2db      	uxtb	r3, r3
 80109d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	22ff      	movs	r2, #255	@ 0xff
 80109da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109e4:	78fb      	ldrb	r3, [r7, #3]
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	4b31      	ldr	r3, [pc, #196]	@ (8010ab4 <xPortStartScheduler+0x134>)
 80109f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80109f2:	4b31      	ldr	r3, [pc, #196]	@ (8010ab8 <xPortStartScheduler+0x138>)
 80109f4:	2207      	movs	r2, #7
 80109f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109f8:	e009      	b.n	8010a0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80109fa:	4b2f      	ldr	r3, [pc, #188]	@ (8010ab8 <xPortStartScheduler+0x138>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	3b01      	subs	r3, #1
 8010a00:	4a2d      	ldr	r2, [pc, #180]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a04:	78fb      	ldrb	r3, [r7, #3]
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a0e:	78fb      	ldrb	r3, [r7, #3]
 8010a10:	b2db      	uxtb	r3, r3
 8010a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a16:	2b80      	cmp	r3, #128	@ 0x80
 8010a18:	d0ef      	beq.n	80109fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a1a:	4b27      	ldr	r3, [pc, #156]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f1c3 0307 	rsb	r3, r3, #7
 8010a22:	2b04      	cmp	r3, #4
 8010a24:	d00b      	beq.n	8010a3e <xPortStartScheduler+0xbe>
	__asm volatile
 8010a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a2a:	f383 8811 	msr	BASEPRI, r3
 8010a2e:	f3bf 8f6f 	isb	sy
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	60bb      	str	r3, [r7, #8]
}
 8010a38:	bf00      	nop
 8010a3a:	bf00      	nop
 8010a3c:	e7fd      	b.n	8010a3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	021b      	lsls	r3, r3, #8
 8010a44:	4a1c      	ldr	r2, [pc, #112]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a48:	4b1b      	ldr	r3, [pc, #108]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010a50:	4a19      	ldr	r2, [pc, #100]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	b2da      	uxtb	r2, r3
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a5c:	4b17      	ldr	r3, [pc, #92]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a16      	ldr	r2, [pc, #88]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010a66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a68:	4b14      	ldr	r3, [pc, #80]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a13      	ldr	r2, [pc, #76]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010a72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a74:	f000 f8da 	bl	8010c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a78:	4b11      	ldr	r3, [pc, #68]	@ (8010ac0 <xPortStartScheduler+0x140>)
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a7e:	f000 f8f9 	bl	8010c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a82:	4b10      	ldr	r3, [pc, #64]	@ (8010ac4 <xPortStartScheduler+0x144>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a0f      	ldr	r2, [pc, #60]	@ (8010ac4 <xPortStartScheduler+0x144>)
 8010a88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010a8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a8e:	f7ff ff63 	bl	8010958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a92:	f7fe ff1f 	bl	800f8d4 <vTaskSwitchContext>
	prvTaskExitError();
 8010a96:	f7ff ff1b 	bl	80108d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a9a:	2300      	movs	r3, #0
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3718      	adds	r7, #24
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	e000ed00 	.word	0xe000ed00
 8010aa8:	410fc271 	.word	0x410fc271
 8010aac:	410fc270 	.word	0x410fc270
 8010ab0:	e000e400 	.word	0xe000e400
 8010ab4:	200040d0 	.word	0x200040d0
 8010ab8:	200040d4 	.word	0x200040d4
 8010abc:	e000ed20 	.word	0xe000ed20
 8010ac0:	2000011c 	.word	0x2000011c
 8010ac4:	e000ef34 	.word	0xe000ef34

08010ac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
	__asm volatile
 8010ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	607b      	str	r3, [r7, #4]
}
 8010ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010ae2:	4b10      	ldr	r3, [pc, #64]	@ (8010b24 <vPortEnterCritical+0x5c>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8010b24 <vPortEnterCritical+0x5c>)
 8010aea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010aec:	4b0d      	ldr	r3, [pc, #52]	@ (8010b24 <vPortEnterCritical+0x5c>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d110      	bne.n	8010b16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010af4:	4b0c      	ldr	r3, [pc, #48]	@ (8010b28 <vPortEnterCritical+0x60>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00b      	beq.n	8010b16 <vPortEnterCritical+0x4e>
	__asm volatile
 8010afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b02:	f383 8811 	msr	BASEPRI, r3
 8010b06:	f3bf 8f6f 	isb	sy
 8010b0a:	f3bf 8f4f 	dsb	sy
 8010b0e:	603b      	str	r3, [r7, #0]
}
 8010b10:	bf00      	nop
 8010b12:	bf00      	nop
 8010b14:	e7fd      	b.n	8010b12 <vPortEnterCritical+0x4a>
	}
}
 8010b16:	bf00      	nop
 8010b18:	370c      	adds	r7, #12
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	2000011c 	.word	0x2000011c
 8010b28:	e000ed04 	.word	0xe000ed04

08010b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b32:	4b12      	ldr	r3, [pc, #72]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10b      	bne.n	8010b52 <vPortExitCritical+0x26>
	__asm volatile
 8010b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	607b      	str	r3, [r7, #4]
}
 8010b4c:	bf00      	nop
 8010b4e:	bf00      	nop
 8010b50:	e7fd      	b.n	8010b4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010b52:	4b0a      	ldr	r3, [pc, #40]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	3b01      	subs	r3, #1
 8010b58:	4a08      	ldr	r2, [pc, #32]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b5c:	4b07      	ldr	r3, [pc, #28]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d105      	bne.n	8010b70 <vPortExitCritical+0x44>
 8010b64:	2300      	movs	r3, #0
 8010b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	f383 8811 	msr	BASEPRI, r3
}
 8010b6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr
 8010b7c:	2000011c 	.word	0x2000011c

08010b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b80:	f3ef 8009 	mrs	r0, PSP
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	4b15      	ldr	r3, [pc, #84]	@ (8010be0 <pxCurrentTCBConst>)
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	f01e 0f10 	tst.w	lr, #16
 8010b90:	bf08      	it	eq
 8010b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9a:	6010      	str	r0, [r2, #0]
 8010b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010ba4:	f380 8811 	msr	BASEPRI, r0
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f7fe fe90 	bl	800f8d4 <vTaskSwitchContext>
 8010bb4:	f04f 0000 	mov.w	r0, #0
 8010bb8:	f380 8811 	msr	BASEPRI, r0
 8010bbc:	bc09      	pop	{r0, r3}
 8010bbe:	6819      	ldr	r1, [r3, #0]
 8010bc0:	6808      	ldr	r0, [r1, #0]
 8010bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc6:	f01e 0f10 	tst.w	lr, #16
 8010bca:	bf08      	it	eq
 8010bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010bd0:	f380 8809 	msr	PSP, r0
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	f3af 8000 	nop.w

08010be0 <pxCurrentTCBConst>:
 8010be0:	20003aa4 	.word	0x20003aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010be4:	bf00      	nop
 8010be6:	bf00      	nop

08010be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
	__asm volatile
 8010bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	607b      	str	r3, [r7, #4]
}
 8010c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c02:	f7fe fdad 	bl	800f760 <xTaskIncrementTick>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d003      	beq.n	8010c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c0c:	4b06      	ldr	r3, [pc, #24]	@ (8010c28 <xPortSysTickHandler+0x40>)
 8010c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c12:	601a      	str	r2, [r3, #0]
 8010c14:	2300      	movs	r3, #0
 8010c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	f383 8811 	msr	BASEPRI, r3
}
 8010c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c20:	bf00      	nop
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	e000ed04 	.word	0xe000ed04

08010c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c30:	4b0b      	ldr	r3, [pc, #44]	@ (8010c60 <vPortSetupTimerInterrupt+0x34>)
 8010c32:	2200      	movs	r2, #0
 8010c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c36:	4b0b      	ldr	r3, [pc, #44]	@ (8010c64 <vPortSetupTimerInterrupt+0x38>)
 8010c38:	2200      	movs	r2, #0
 8010c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010c68 <vPortSetupTimerInterrupt+0x3c>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4a0a      	ldr	r2, [pc, #40]	@ (8010c6c <vPortSetupTimerInterrupt+0x40>)
 8010c42:	fba2 2303 	umull	r2, r3, r2, r3
 8010c46:	099b      	lsrs	r3, r3, #6
 8010c48:	4a09      	ldr	r2, [pc, #36]	@ (8010c70 <vPortSetupTimerInterrupt+0x44>)
 8010c4a:	3b01      	subs	r3, #1
 8010c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c4e:	4b04      	ldr	r3, [pc, #16]	@ (8010c60 <vPortSetupTimerInterrupt+0x34>)
 8010c50:	2207      	movs	r2, #7
 8010c52:	601a      	str	r2, [r3, #0]
}
 8010c54:	bf00      	nop
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	e000e010 	.word	0xe000e010
 8010c64:	e000e018 	.word	0xe000e018
 8010c68:	20000000 	.word	0x20000000
 8010c6c:	10624dd3 	.word	0x10624dd3
 8010c70:	e000e014 	.word	0xe000e014

08010c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010c84 <vPortEnableVFP+0x10>
 8010c78:	6801      	ldr	r1, [r0, #0]
 8010c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010c7e:	6001      	str	r1, [r0, #0]
 8010c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c82:	bf00      	nop
 8010c84:	e000ed88 	.word	0xe000ed88

08010c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c88:	b480      	push	{r7}
 8010c8a:	b085      	sub	sp, #20
 8010c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c8e:	f3ef 8305 	mrs	r3, IPSR
 8010c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2b0f      	cmp	r3, #15
 8010c98:	d915      	bls.n	8010cc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c9a:	4a18      	ldr	r2, [pc, #96]	@ (8010cfc <vPortValidateInterruptPriority+0x74>)
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ca4:	4b16      	ldr	r3, [pc, #88]	@ (8010d00 <vPortValidateInterruptPriority+0x78>)
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	7afa      	ldrb	r2, [r7, #11]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d20b      	bcs.n	8010cc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	607b      	str	r3, [r7, #4]
}
 8010cc0:	bf00      	nop
 8010cc2:	bf00      	nop
 8010cc4:	e7fd      	b.n	8010cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8010d04 <vPortValidateInterruptPriority+0x7c>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010cce:	4b0e      	ldr	r3, [pc, #56]	@ (8010d08 <vPortValidateInterruptPriority+0x80>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d90b      	bls.n	8010cee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cda:	f383 8811 	msr	BASEPRI, r3
 8010cde:	f3bf 8f6f 	isb	sy
 8010ce2:	f3bf 8f4f 	dsb	sy
 8010ce6:	603b      	str	r3, [r7, #0]
}
 8010ce8:	bf00      	nop
 8010cea:	bf00      	nop
 8010cec:	e7fd      	b.n	8010cea <vPortValidateInterruptPriority+0x62>
	}
 8010cee:	bf00      	nop
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	e000e3f0 	.word	0xe000e3f0
 8010d00:	200040d0 	.word	0x200040d0
 8010d04:	e000ed0c 	.word	0xe000ed0c
 8010d08:	200040d4 	.word	0x200040d4

08010d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08a      	sub	sp, #40	@ 0x28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d14:	2300      	movs	r3, #0
 8010d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d18:	f7fe fc54 	bl	800f5c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e90 <pvPortMalloc+0x184>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d101      	bne.n	8010d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d24:	f000 f924 	bl	8010f70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d28:	4b5a      	ldr	r3, [pc, #360]	@ (8010e94 <pvPortMalloc+0x188>)
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4013      	ands	r3, r2
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f040 8095 	bne.w	8010e60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d01e      	beq.n	8010d7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010d3c:	2208      	movs	r2, #8
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4413      	add	r3, r2
 8010d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d015      	beq.n	8010d7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f023 0307 	bic.w	r3, r3, #7
 8010d54:	3308      	adds	r3, #8
 8010d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f003 0307 	and.w	r3, r3, #7
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00b      	beq.n	8010d7a <pvPortMalloc+0x6e>
	__asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d66:	f383 8811 	msr	BASEPRI, r3
 8010d6a:	f3bf 8f6f 	isb	sy
 8010d6e:	f3bf 8f4f 	dsb	sy
 8010d72:	617b      	str	r3, [r7, #20]
}
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
 8010d78:	e7fd      	b.n	8010d76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d06f      	beq.n	8010e60 <pvPortMalloc+0x154>
 8010d80:	4b45      	ldr	r3, [pc, #276]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d86a      	bhi.n	8010e60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d8a:	4b44      	ldr	r3, [pc, #272]	@ (8010e9c <pvPortMalloc+0x190>)
 8010d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d8e:	4b43      	ldr	r3, [pc, #268]	@ (8010e9c <pvPortMalloc+0x190>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d94:	e004      	b.n	8010da0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d903      	bls.n	8010db2 <pvPortMalloc+0xa6>
 8010daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1f1      	bne.n	8010d96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010db2:	4b37      	ldr	r3, [pc, #220]	@ (8010e90 <pvPortMalloc+0x184>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d051      	beq.n	8010e60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2208      	movs	r2, #8
 8010dc2:	4413      	add	r3, r2
 8010dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	6a3b      	ldr	r3, [r7, #32]
 8010dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd0:	685a      	ldr	r2, [r3, #4]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	1ad2      	subs	r2, r2, r3
 8010dd6:	2308      	movs	r3, #8
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d920      	bls.n	8010e20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4413      	add	r3, r2
 8010de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	f003 0307 	and.w	r3, r3, #7
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d00b      	beq.n	8010e08 <pvPortMalloc+0xfc>
	__asm volatile
 8010df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	613b      	str	r3, [r7, #16]
}
 8010e02:	bf00      	nop
 8010e04:	bf00      	nop
 8010e06:	e7fd      	b.n	8010e04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0a:	685a      	ldr	r2, [r3, #4]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	1ad2      	subs	r2, r2, r3
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e1a:	69b8      	ldr	r0, [r7, #24]
 8010e1c:	f000 f90a 	bl	8011034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e20:	4b1d      	ldr	r3, [pc, #116]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	4b1b      	ldr	r3, [pc, #108]	@ (8010ea0 <pvPortMalloc+0x194>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d203      	bcs.n	8010e42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e3a:	4b17      	ldr	r3, [pc, #92]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4a18      	ldr	r2, [pc, #96]	@ (8010ea0 <pvPortMalloc+0x194>)
 8010e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e44:	685a      	ldr	r2, [r3, #4]
 8010e46:	4b13      	ldr	r3, [pc, #76]	@ (8010e94 <pvPortMalloc+0x188>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	431a      	orrs	r2, r3
 8010e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e52:	2200      	movs	r2, #0
 8010e54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010e56:	4b13      	ldr	r3, [pc, #76]	@ (8010ea4 <pvPortMalloc+0x198>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	4a11      	ldr	r2, [pc, #68]	@ (8010ea4 <pvPortMalloc+0x198>)
 8010e5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e60:	f7fe fbbe 	bl	800f5e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	f003 0307 	and.w	r3, r3, #7
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d00b      	beq.n	8010e86 <pvPortMalloc+0x17a>
	__asm volatile
 8010e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e72:	f383 8811 	msr	BASEPRI, r3
 8010e76:	f3bf 8f6f 	isb	sy
 8010e7a:	f3bf 8f4f 	dsb	sy
 8010e7e:	60fb      	str	r3, [r7, #12]
}
 8010e80:	bf00      	nop
 8010e82:	bf00      	nop
 8010e84:	e7fd      	b.n	8010e82 <pvPortMalloc+0x176>
	return pvReturn;
 8010e86:	69fb      	ldr	r3, [r7, #28]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3728      	adds	r7, #40	@ 0x28
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	200044e0 	.word	0x200044e0
 8010e94:	200044f4 	.word	0x200044f4
 8010e98:	200044e4 	.word	0x200044e4
 8010e9c:	200044d8 	.word	0x200044d8
 8010ea0:	200044e8 	.word	0x200044e8
 8010ea4:	200044ec 	.word	0x200044ec

08010ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b086      	sub	sp, #24
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d04f      	beq.n	8010f5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eba:	2308      	movs	r3, #8
 8010ebc:	425b      	negs	r3, r3
 8010ebe:	697a      	ldr	r2, [r7, #20]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	685a      	ldr	r2, [r3, #4]
 8010ecc:	4b25      	ldr	r3, [pc, #148]	@ (8010f64 <vPortFree+0xbc>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4013      	ands	r3, r2
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d10b      	bne.n	8010eee <vPortFree+0x46>
	__asm volatile
 8010ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eda:	f383 8811 	msr	BASEPRI, r3
 8010ede:	f3bf 8f6f 	isb	sy
 8010ee2:	f3bf 8f4f 	dsb	sy
 8010ee6:	60fb      	str	r3, [r7, #12]
}
 8010ee8:	bf00      	nop
 8010eea:	bf00      	nop
 8010eec:	e7fd      	b.n	8010eea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00b      	beq.n	8010f0e <vPortFree+0x66>
	__asm volatile
 8010ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010efa:	f383 8811 	msr	BASEPRI, r3
 8010efe:	f3bf 8f6f 	isb	sy
 8010f02:	f3bf 8f4f 	dsb	sy
 8010f06:	60bb      	str	r3, [r7, #8]
}
 8010f08:	bf00      	nop
 8010f0a:	bf00      	nop
 8010f0c:	e7fd      	b.n	8010f0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	685a      	ldr	r2, [r3, #4]
 8010f12:	4b14      	ldr	r3, [pc, #80]	@ (8010f64 <vPortFree+0xbc>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4013      	ands	r3, r2
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d01e      	beq.n	8010f5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d11a      	bne.n	8010f5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	685a      	ldr	r2, [r3, #4]
 8010f28:	4b0e      	ldr	r3, [pc, #56]	@ (8010f64 <vPortFree+0xbc>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	43db      	mvns	r3, r3
 8010f2e:	401a      	ands	r2, r3
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f34:	f7fe fb46 	bl	800f5c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	685a      	ldr	r2, [r3, #4]
 8010f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f68 <vPortFree+0xc0>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4413      	add	r3, r2
 8010f42:	4a09      	ldr	r2, [pc, #36]	@ (8010f68 <vPortFree+0xc0>)
 8010f44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f46:	6938      	ldr	r0, [r7, #16]
 8010f48:	f000 f874 	bl	8011034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010f4c:	4b07      	ldr	r3, [pc, #28]	@ (8010f6c <vPortFree+0xc4>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	3301      	adds	r3, #1
 8010f52:	4a06      	ldr	r2, [pc, #24]	@ (8010f6c <vPortFree+0xc4>)
 8010f54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010f56:	f7fe fb43 	bl	800f5e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f5a:	bf00      	nop
 8010f5c:	3718      	adds	r7, #24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	200044f4 	.word	0x200044f4
 8010f68:	200044e4 	.word	0x200044e4
 8010f6c:	200044f0 	.word	0x200044f0

08010f70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f7c:	4b27      	ldr	r3, [pc, #156]	@ (801101c <prvHeapInit+0xac>)
 8010f7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f003 0307 	and.w	r3, r3, #7
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d00c      	beq.n	8010fa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	3307      	adds	r3, #7
 8010f8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f023 0307 	bic.w	r3, r3, #7
 8010f96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	1ad3      	subs	r3, r2, r3
 8010f9e:	4a1f      	ldr	r2, [pc, #124]	@ (801101c <prvHeapInit+0xac>)
 8010fa0:	4413      	add	r3, r2
 8010fa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8011020 <prvHeapInit+0xb0>)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fae:	4b1c      	ldr	r3, [pc, #112]	@ (8011020 <prvHeapInit+0xb0>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	4413      	add	r3, r2
 8010fba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fbc:	2208      	movs	r2, #8
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	1a9b      	subs	r3, r3, r2
 8010fc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f023 0307 	bic.w	r3, r3, #7
 8010fca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	4a15      	ldr	r2, [pc, #84]	@ (8011024 <prvHeapInit+0xb4>)
 8010fd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010fd2:	4b14      	ldr	r3, [pc, #80]	@ (8011024 <prvHeapInit+0xb4>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fda:	4b12      	ldr	r3, [pc, #72]	@ (8011024 <prvHeapInit+0xb4>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	1ad2      	subs	r2, r2, r3
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8011024 <prvHeapInit+0xb4>)
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8011028 <prvHeapInit+0xb8>)
 8010ffe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	4a09      	ldr	r2, [pc, #36]	@ (801102c <prvHeapInit+0xbc>)
 8011006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011008:	4b09      	ldr	r3, [pc, #36]	@ (8011030 <prvHeapInit+0xc0>)
 801100a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801100e:	601a      	str	r2, [r3, #0]
}
 8011010:	bf00      	nop
 8011012:	3714      	adds	r7, #20
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	200040d8 	.word	0x200040d8
 8011020:	200044d8 	.word	0x200044d8
 8011024:	200044e0 	.word	0x200044e0
 8011028:	200044e8 	.word	0x200044e8
 801102c:	200044e4 	.word	0x200044e4
 8011030:	200044f4 	.word	0x200044f4

08011034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801103c:	4b28      	ldr	r3, [pc, #160]	@ (80110e0 <prvInsertBlockIntoFreeList+0xac>)
 801103e:	60fb      	str	r3, [r7, #12]
 8011040:	e002      	b.n	8011048 <prvInsertBlockIntoFreeList+0x14>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	429a      	cmp	r2, r3
 8011050:	d8f7      	bhi.n	8011042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	4413      	add	r3, r2
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	429a      	cmp	r2, r3
 8011062:	d108      	bne.n	8011076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	685a      	ldr	r2, [r3, #4]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	441a      	add	r2, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	441a      	add	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	429a      	cmp	r2, r3
 8011088:	d118      	bne.n	80110bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	4b15      	ldr	r3, [pc, #84]	@ (80110e4 <prvInsertBlockIntoFreeList+0xb0>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	429a      	cmp	r2, r3
 8011094:	d00d      	beq.n	80110b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	441a      	add	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	e008      	b.n	80110c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110b2:	4b0c      	ldr	r3, [pc, #48]	@ (80110e4 <prvInsertBlockIntoFreeList+0xb0>)
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	e003      	b.n	80110c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d002      	beq.n	80110d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110d2:	bf00      	nop
 80110d4:	3714      	adds	r7, #20
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	200044d8 	.word	0x200044d8
 80110e4:	200044e0 	.word	0x200044e0

080110e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80110ec:	2200      	movs	r2, #0
 80110ee:	4912      	ldr	r1, [pc, #72]	@ (8011138 <MX_USB_Device_Init+0x50>)
 80110f0:	4812      	ldr	r0, [pc, #72]	@ (801113c <MX_USB_Device_Init+0x54>)
 80110f2:	f7fb f98f 	bl	800c414 <USBD_Init>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80110fc:	f7f2 f842 	bl	8003184 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011100:	490f      	ldr	r1, [pc, #60]	@ (8011140 <MX_USB_Device_Init+0x58>)
 8011102:	480e      	ldr	r0, [pc, #56]	@ (801113c <MX_USB_Device_Init+0x54>)
 8011104:	f7fb f9b6 	bl	800c474 <USBD_RegisterClass>
 8011108:	4603      	mov	r3, r0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801110e:	f7f2 f839 	bl	8003184 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011112:	490c      	ldr	r1, [pc, #48]	@ (8011144 <MX_USB_Device_Init+0x5c>)
 8011114:	4809      	ldr	r0, [pc, #36]	@ (801113c <MX_USB_Device_Init+0x54>)
 8011116:	f7fb f8d7 	bl	800c2c8 <USBD_CDC_RegisterInterface>
 801111a:	4603      	mov	r3, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d001      	beq.n	8011124 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011120:	f7f2 f830 	bl	8003184 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011124:	4805      	ldr	r0, [pc, #20]	@ (801113c <MX_USB_Device_Init+0x54>)
 8011126:	f7fb f9cc 	bl	800c4c2 <USBD_Start>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011130:	f7f2 f828 	bl	8003184 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011134:	bf00      	nop
 8011136:	bd80      	pop	{r7, pc}
 8011138:	20000134 	.word	0x20000134
 801113c:	200044f8 	.word	0x200044f8
 8011140:	20000018 	.word	0x20000018
 8011144:	20000120 	.word	0x20000120

08011148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801114c:	2200      	movs	r2, #0
 801114e:	4905      	ldr	r1, [pc, #20]	@ (8011164 <CDC_Init_FS+0x1c>)
 8011150:	4805      	ldr	r0, [pc, #20]	@ (8011168 <CDC_Init_FS+0x20>)
 8011152:	f7fb f8ce 	bl	800c2f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011156:	4905      	ldr	r1, [pc, #20]	@ (801116c <CDC_Init_FS+0x24>)
 8011158:	4803      	ldr	r0, [pc, #12]	@ (8011168 <CDC_Init_FS+0x20>)
 801115a:	f7fb f8e8 	bl	800c32e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801115e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011160:	4618      	mov	r0, r3
 8011162:	bd80      	pop	{r7, pc}
 8011164:	20004fc8 	.word	0x20004fc8
 8011168:	200044f8 	.word	0x200044f8
 801116c:	200047c8 	.word	0x200047c8

08011170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011170:	b480      	push	{r7}
 8011172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011176:	4618      	mov	r0, r3
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	4603      	mov	r3, r0
 8011188:	6039      	str	r1, [r7, #0]
 801118a:	71fb      	strb	r3, [r7, #7]
 801118c:	4613      	mov	r3, r2
 801118e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011190:	79fb      	ldrb	r3, [r7, #7]
 8011192:	2b23      	cmp	r3, #35	@ 0x23
 8011194:	d84a      	bhi.n	801122c <CDC_Control_FS+0xac>
 8011196:	a201      	add	r2, pc, #4	@ (adr r2, 801119c <CDC_Control_FS+0x1c>)
 8011198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801119c:	0801122d 	.word	0x0801122d
 80111a0:	0801122d 	.word	0x0801122d
 80111a4:	0801122d 	.word	0x0801122d
 80111a8:	0801122d 	.word	0x0801122d
 80111ac:	0801122d 	.word	0x0801122d
 80111b0:	0801122d 	.word	0x0801122d
 80111b4:	0801122d 	.word	0x0801122d
 80111b8:	0801122d 	.word	0x0801122d
 80111bc:	0801122d 	.word	0x0801122d
 80111c0:	0801122d 	.word	0x0801122d
 80111c4:	0801122d 	.word	0x0801122d
 80111c8:	0801122d 	.word	0x0801122d
 80111cc:	0801122d 	.word	0x0801122d
 80111d0:	0801122d 	.word	0x0801122d
 80111d4:	0801122d 	.word	0x0801122d
 80111d8:	0801122d 	.word	0x0801122d
 80111dc:	0801122d 	.word	0x0801122d
 80111e0:	0801122d 	.word	0x0801122d
 80111e4:	0801122d 	.word	0x0801122d
 80111e8:	0801122d 	.word	0x0801122d
 80111ec:	0801122d 	.word	0x0801122d
 80111f0:	0801122d 	.word	0x0801122d
 80111f4:	0801122d 	.word	0x0801122d
 80111f8:	0801122d 	.word	0x0801122d
 80111fc:	0801122d 	.word	0x0801122d
 8011200:	0801122d 	.word	0x0801122d
 8011204:	0801122d 	.word	0x0801122d
 8011208:	0801122d 	.word	0x0801122d
 801120c:	0801122d 	.word	0x0801122d
 8011210:	0801122d 	.word	0x0801122d
 8011214:	0801122d 	.word	0x0801122d
 8011218:	0801122d 	.word	0x0801122d
 801121c:	0801122d 	.word	0x0801122d
 8011220:	0801122d 	.word	0x0801122d
 8011224:	0801122d 	.word	0x0801122d
 8011228:	0801122d 	.word	0x0801122d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801122c:	bf00      	nop
  }

  return (USBD_OK);
 801122e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011230:	4618      	mov	r0, r3
 8011232:	370c      	adds	r7, #12
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011246:	6879      	ldr	r1, [r7, #4]
 8011248:	4805      	ldr	r0, [pc, #20]	@ (8011260 <CDC_Receive_FS+0x24>)
 801124a:	f7fb f870 	bl	800c32e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801124e:	4804      	ldr	r0, [pc, #16]	@ (8011260 <CDC_Receive_FS+0x24>)
 8011250:	f7fb f8b6 	bl	800c3c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011254:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	200044f8 	.word	0x200044f8

08011264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	460b      	mov	r3, r1
 801126e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011274:	4b0d      	ldr	r3, [pc, #52]	@ (80112ac <CDC_Transmit_FS+0x48>)
 8011276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801127a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011282:	2b00      	cmp	r3, #0
 8011284:	d001      	beq.n	801128a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011286:	2301      	movs	r3, #1
 8011288:	e00b      	b.n	80112a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801128a:	887b      	ldrh	r3, [r7, #2]
 801128c:	461a      	mov	r2, r3
 801128e:	6879      	ldr	r1, [r7, #4]
 8011290:	4806      	ldr	r0, [pc, #24]	@ (80112ac <CDC_Transmit_FS+0x48>)
 8011292:	f7fb f82e 	bl	800c2f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011296:	4805      	ldr	r0, [pc, #20]	@ (80112ac <CDC_Transmit_FS+0x48>)
 8011298:	f7fb f862 	bl	800c360 <USBD_CDC_TransmitPacket>
 801129c:	4603      	mov	r3, r0
 801129e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80112a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3710      	adds	r7, #16
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	200044f8 	.word	0x200044f8

080112b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b087      	sub	sp, #28
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	4613      	mov	r3, r2
 80112bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80112be:	2300      	movs	r3, #0
 80112c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80112c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	371c      	adds	r7, #28
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
	...

080112d4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	4603      	mov	r3, r0
 80112dc:	6039      	str	r1, [r7, #0]
 80112de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2212      	movs	r2, #18
 80112e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80112e6:	4b03      	ldr	r3, [pc, #12]	@ (80112f4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	370c      	adds	r7, #12
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr
 80112f4:	20000154 	.word	0x20000154

080112f8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	4603      	mov	r3, r0
 8011300:	6039      	str	r1, [r7, #0]
 8011302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	2204      	movs	r2, #4
 8011308:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801130a:	4b03      	ldr	r3, [pc, #12]	@ (8011318 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801130c:	4618      	mov	r0, r3
 801130e:	370c      	adds	r7, #12
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr
 8011318:	20000168 	.word	0x20000168

0801131c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	4603      	mov	r3, r0
 8011324:	6039      	str	r1, [r7, #0]
 8011326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011328:	79fb      	ldrb	r3, [r7, #7]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d105      	bne.n	801133a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801132e:	683a      	ldr	r2, [r7, #0]
 8011330:	4907      	ldr	r1, [pc, #28]	@ (8011350 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011332:	4808      	ldr	r0, [pc, #32]	@ (8011354 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011334:	f7fc f8ad 	bl	800d492 <USBD_GetString>
 8011338:	e004      	b.n	8011344 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801133a:	683a      	ldr	r2, [r7, #0]
 801133c:	4904      	ldr	r1, [pc, #16]	@ (8011350 <USBD_CDC_ProductStrDescriptor+0x34>)
 801133e:	4805      	ldr	r0, [pc, #20]	@ (8011354 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011340:	f7fc f8a7 	bl	800d492 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011344:	4b02      	ldr	r3, [pc, #8]	@ (8011350 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011346:	4618      	mov	r0, r3
 8011348:	3708      	adds	r7, #8
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	200057c8 	.word	0x200057c8
 8011354:	080158d8 	.word	0x080158d8

08011358 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	4603      	mov	r3, r0
 8011360:	6039      	str	r1, [r7, #0]
 8011362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	4904      	ldr	r1, [pc, #16]	@ (8011378 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011368:	4804      	ldr	r0, [pc, #16]	@ (801137c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801136a:	f7fc f892 	bl	800d492 <USBD_GetString>
  return USBD_StrDesc;
 801136e:	4b02      	ldr	r3, [pc, #8]	@ (8011378 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011370:	4618      	mov	r0, r3
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	200057c8 	.word	0x200057c8
 801137c:	080158f4 	.word	0x080158f4

08011380 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	4603      	mov	r3, r0
 8011388:	6039      	str	r1, [r7, #0]
 801138a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	221a      	movs	r2, #26
 8011390:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011392:	f000 f843 	bl	801141c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011396:	4b02      	ldr	r3, [pc, #8]	@ (80113a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011398:	4618      	mov	r0, r3
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	2000016c 	.word	0x2000016c

080113a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	4603      	mov	r3, r0
 80113ac:	6039      	str	r1, [r7, #0]
 80113ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80113b0:	79fb      	ldrb	r3, [r7, #7]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d105      	bne.n	80113c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80113b6:	683a      	ldr	r2, [r7, #0]
 80113b8:	4907      	ldr	r1, [pc, #28]	@ (80113d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80113ba:	4808      	ldr	r0, [pc, #32]	@ (80113dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80113bc:	f7fc f869 	bl	800d492 <USBD_GetString>
 80113c0:	e004      	b.n	80113cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80113c2:	683a      	ldr	r2, [r7, #0]
 80113c4:	4904      	ldr	r1, [pc, #16]	@ (80113d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80113c6:	4805      	ldr	r0, [pc, #20]	@ (80113dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80113c8:	f7fc f863 	bl	800d492 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113cc:	4b02      	ldr	r3, [pc, #8]	@ (80113d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3708      	adds	r7, #8
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	200057c8 	.word	0x200057c8
 80113dc:	08015908 	.word	0x08015908

080113e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	6039      	str	r1, [r7, #0]
 80113ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113ec:	79fb      	ldrb	r3, [r7, #7]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d105      	bne.n	80113fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	4907      	ldr	r1, [pc, #28]	@ (8011414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80113f6:	4808      	ldr	r0, [pc, #32]	@ (8011418 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80113f8:	f7fc f84b 	bl	800d492 <USBD_GetString>
 80113fc:	e004      	b.n	8011408 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80113fe:	683a      	ldr	r2, [r7, #0]
 8011400:	4904      	ldr	r1, [pc, #16]	@ (8011414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011402:	4805      	ldr	r0, [pc, #20]	@ (8011418 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011404:	f7fc f845 	bl	800d492 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011408:	4b02      	ldr	r3, [pc, #8]	@ (8011414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801140a:	4618      	mov	r0, r3
 801140c:	3708      	adds	r7, #8
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	200057c8 	.word	0x200057c8
 8011418:	08015914 	.word	0x08015914

0801141c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011422:	4b0f      	ldr	r3, [pc, #60]	@ (8011460 <Get_SerialNum+0x44>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011428:	4b0e      	ldr	r3, [pc, #56]	@ (8011464 <Get_SerialNum+0x48>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801142e:	4b0e      	ldr	r3, [pc, #56]	@ (8011468 <Get_SerialNum+0x4c>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011434:	68fa      	ldr	r2, [r7, #12]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	4413      	add	r3, r2
 801143a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d009      	beq.n	8011456 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011442:	2208      	movs	r2, #8
 8011444:	4909      	ldr	r1, [pc, #36]	@ (801146c <Get_SerialNum+0x50>)
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f000 f814 	bl	8011474 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801144c:	2204      	movs	r2, #4
 801144e:	4908      	ldr	r1, [pc, #32]	@ (8011470 <Get_SerialNum+0x54>)
 8011450:	68b8      	ldr	r0, [r7, #8]
 8011452:	f000 f80f 	bl	8011474 <IntToUnicode>
  }
}
 8011456:	bf00      	nop
 8011458:	3710      	adds	r7, #16
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	1fff7590 	.word	0x1fff7590
 8011464:	1fff7594 	.word	0x1fff7594
 8011468:	1fff7598 	.word	0x1fff7598
 801146c:	2000016e 	.word	0x2000016e
 8011470:	2000017e 	.word	0x2000017e

08011474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011474:	b480      	push	{r7}
 8011476:	b087      	sub	sp, #28
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	4613      	mov	r3, r2
 8011480:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011482:	2300      	movs	r3, #0
 8011484:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011486:	2300      	movs	r3, #0
 8011488:	75fb      	strb	r3, [r7, #23]
 801148a:	e027      	b.n	80114dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	0f1b      	lsrs	r3, r3, #28
 8011490:	2b09      	cmp	r3, #9
 8011492:	d80b      	bhi.n	80114ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	0f1b      	lsrs	r3, r3, #28
 8011498:	b2da      	uxtb	r2, r3
 801149a:	7dfb      	ldrb	r3, [r7, #23]
 801149c:	005b      	lsls	r3, r3, #1
 801149e:	4619      	mov	r1, r3
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	440b      	add	r3, r1
 80114a4:	3230      	adds	r2, #48	@ 0x30
 80114a6:	b2d2      	uxtb	r2, r2
 80114a8:	701a      	strb	r2, [r3, #0]
 80114aa:	e00a      	b.n	80114c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	0f1b      	lsrs	r3, r3, #28
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	7dfb      	ldrb	r3, [r7, #23]
 80114b4:	005b      	lsls	r3, r3, #1
 80114b6:	4619      	mov	r1, r3
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	440b      	add	r3, r1
 80114bc:	3237      	adds	r2, #55	@ 0x37
 80114be:	b2d2      	uxtb	r2, r2
 80114c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	011b      	lsls	r3, r3, #4
 80114c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80114c8:	7dfb      	ldrb	r3, [r7, #23]
 80114ca:	005b      	lsls	r3, r3, #1
 80114cc:	3301      	adds	r3, #1
 80114ce:	68ba      	ldr	r2, [r7, #8]
 80114d0:	4413      	add	r3, r2
 80114d2:	2200      	movs	r2, #0
 80114d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80114d6:	7dfb      	ldrb	r3, [r7, #23]
 80114d8:	3301      	adds	r3, #1
 80114da:	75fb      	strb	r3, [r7, #23]
 80114dc:	7dfa      	ldrb	r2, [r7, #23]
 80114de:	79fb      	ldrb	r3, [r7, #7]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d3d3      	bcc.n	801148c <IntToUnicode+0x18>
  }
}
 80114e4:	bf00      	nop
 80114e6:	bf00      	nop
 80114e8:	371c      	adds	r7, #28
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
	...

080114f4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b098      	sub	sp, #96	@ 0x60
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80114fc:	f107 030c 	add.w	r3, r7, #12
 8011500:	2254      	movs	r2, #84	@ 0x54
 8011502:	2100      	movs	r1, #0
 8011504:	4618      	mov	r0, r3
 8011506:	f001 f88a 	bl	801261e <memset>
  if(pcdHandle->Instance==USB)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	4a15      	ldr	r2, [pc, #84]	@ (8011564 <HAL_PCD_MspInit+0x70>)
 8011510:	4293      	cmp	r3, r2
 8011512:	d122      	bne.n	801155a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011518:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801151a:	2300      	movs	r3, #0
 801151c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801151e:	f107 030c 	add.w	r3, r7, #12
 8011522:	4618      	mov	r0, r3
 8011524:	f7f5 ff2a 	bl	800737c <HAL_RCCEx_PeriphCLKConfig>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d001      	beq.n	8011532 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801152e:	f7f1 fe29 	bl	8003184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011532:	4b0d      	ldr	r3, [pc, #52]	@ (8011568 <HAL_PCD_MspInit+0x74>)
 8011534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011536:	4a0c      	ldr	r2, [pc, #48]	@ (8011568 <HAL_PCD_MspInit+0x74>)
 8011538:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801153c:	6593      	str	r3, [r2, #88]	@ 0x58
 801153e:	4b0a      	ldr	r3, [pc, #40]	@ (8011568 <HAL_PCD_MspInit+0x74>)
 8011540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011546:	60bb      	str	r3, [r7, #8]
 8011548:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801154a:	2200      	movs	r2, #0
 801154c:	2105      	movs	r1, #5
 801154e:	2014      	movs	r0, #20
 8011550:	f7f2 fa0e 	bl	8003970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011554:	2014      	movs	r0, #20
 8011556:	f7f2 fa25 	bl	80039a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801155a:	bf00      	nop
 801155c:	3760      	adds	r7, #96	@ 0x60
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	40005c00 	.word	0x40005c00
 8011568:	40021000 	.word	0x40021000

0801156c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011580:	4619      	mov	r1, r3
 8011582:	4610      	mov	r0, r2
 8011584:	f7fa ffe8 	bl	800c558 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011588:	bf00      	nop
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	460b      	mov	r3, r1
 801159a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80115a2:	78fa      	ldrb	r2, [r7, #3]
 80115a4:	6879      	ldr	r1, [r7, #4]
 80115a6:	4613      	mov	r3, r2
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	4413      	add	r3, r2
 80115ac:	00db      	lsls	r3, r3, #3
 80115ae:	440b      	add	r3, r1
 80115b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	78fb      	ldrb	r3, [r7, #3]
 80115b8:	4619      	mov	r1, r3
 80115ba:	f7fb f822 	bl	800c602 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80115be:	bf00      	nop
 80115c0:	3708      	adds	r7, #8
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b082      	sub	sp, #8
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	460b      	mov	r3, r1
 80115d0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80115d8:	78fa      	ldrb	r2, [r7, #3]
 80115da:	6879      	ldr	r1, [r7, #4]
 80115dc:	4613      	mov	r3, r2
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	4413      	add	r3, r2
 80115e2:	00db      	lsls	r3, r3, #3
 80115e4:	440b      	add	r3, r1
 80115e6:	3324      	adds	r3, #36	@ 0x24
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	78fb      	ldrb	r3, [r7, #3]
 80115ec:	4619      	mov	r1, r3
 80115ee:	f7fb f86b 	bl	800c6c8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80115f2:	bf00      	nop
 80115f4:	3708      	adds	r7, #8
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b082      	sub	sp, #8
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011608:	4618      	mov	r0, r3
 801160a:	f7fb f97f 	bl	800c90c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801160e:	bf00      	nop
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b084      	sub	sp, #16
 801161a:	af00      	add	r7, sp, #0
 801161c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801161e:	2301      	movs	r3, #1
 8011620:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	795b      	ldrb	r3, [r3, #5]
 8011626:	2b02      	cmp	r3, #2
 8011628:	d001      	beq.n	801162e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801162a:	f7f1 fdab 	bl	8003184 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011634:	7bfa      	ldrb	r2, [r7, #15]
 8011636:	4611      	mov	r1, r2
 8011638:	4618      	mov	r0, r3
 801163a:	f7fb f929 	bl	800c890 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011644:	4618      	mov	r0, r3
 8011646:	f7fb f8d5 	bl	800c7f4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801164a:	bf00      	nop
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
	...

08011654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011662:	4618      	mov	r0, r3
 8011664:	f7fb f924 	bl	800c8b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	7a5b      	ldrb	r3, [r3, #9]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d005      	beq.n	801167c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011670:	4b04      	ldr	r3, [pc, #16]	@ (8011684 <HAL_PCD_SuspendCallback+0x30>)
 8011672:	691b      	ldr	r3, [r3, #16]
 8011674:	4a03      	ldr	r2, [pc, #12]	@ (8011684 <HAL_PCD_SuspendCallback+0x30>)
 8011676:	f043 0306 	orr.w	r3, r3, #6
 801167a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801167c:	bf00      	nop
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	e000ed00 	.word	0xe000ed00

08011688 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	7a5b      	ldrb	r3, [r3, #9]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d007      	beq.n	80116a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011698:	4b08      	ldr	r3, [pc, #32]	@ (80116bc <HAL_PCD_ResumeCallback+0x34>)
 801169a:	691b      	ldr	r3, [r3, #16]
 801169c:	4a07      	ldr	r2, [pc, #28]	@ (80116bc <HAL_PCD_ResumeCallback+0x34>)
 801169e:	f023 0306 	bic.w	r3, r3, #6
 80116a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80116a4:	f000 f9f8 	bl	8011a98 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7fb f914 	bl	800c8dc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80116b4:	bf00      	nop
 80116b6:	3708      	adds	r7, #8
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	e000ed00 	.word	0xe000ed00

080116c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80116c8:	4a2b      	ldr	r2, [pc, #172]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	4a29      	ldr	r2, [pc, #164]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116d4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80116d8:	4b27      	ldr	r3, [pc, #156]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116da:	4a28      	ldr	r2, [pc, #160]	@ (801177c <USBD_LL_Init+0xbc>)
 80116dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80116de:	4b26      	ldr	r3, [pc, #152]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116e0:	2208      	movs	r2, #8
 80116e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80116e4:	4b24      	ldr	r3, [pc, #144]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116e6:	2202      	movs	r2, #2
 80116e8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80116ea:	4b23      	ldr	r3, [pc, #140]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116ec:	2202      	movs	r2, #2
 80116ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80116f0:	4b21      	ldr	r3, [pc, #132]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116f2:	2200      	movs	r2, #0
 80116f4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80116f6:	4b20      	ldr	r3, [pc, #128]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80116fc:	4b1e      	ldr	r3, [pc, #120]	@ (8011778 <USBD_LL_Init+0xb8>)
 80116fe:	2200      	movs	r2, #0
 8011700:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011702:	4b1d      	ldr	r3, [pc, #116]	@ (8011778 <USBD_LL_Init+0xb8>)
 8011704:	2200      	movs	r2, #0
 8011706:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011708:	481b      	ldr	r0, [pc, #108]	@ (8011778 <USBD_LL_Init+0xb8>)
 801170a:	f7f3 faf4 	bl	8004cf6 <HAL_PCD_Init>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d001      	beq.n	8011718 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011714:	f7f1 fd36 	bl	8003184 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801171e:	2318      	movs	r3, #24
 8011720:	2200      	movs	r2, #0
 8011722:	2100      	movs	r1, #0
 8011724:	f7f4 ffad 	bl	8006682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801172e:	2358      	movs	r3, #88	@ 0x58
 8011730:	2200      	movs	r2, #0
 8011732:	2180      	movs	r1, #128	@ 0x80
 8011734:	f7f4 ffa5 	bl	8006682 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801173e:	23c0      	movs	r3, #192	@ 0xc0
 8011740:	2200      	movs	r2, #0
 8011742:	2181      	movs	r1, #129	@ 0x81
 8011744:	f7f4 ff9d 	bl	8006682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801174e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8011752:	2200      	movs	r2, #0
 8011754:	2101      	movs	r1, #1
 8011756:	f7f4 ff94 	bl	8006682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011764:	2200      	movs	r2, #0
 8011766:	2182      	movs	r1, #130	@ 0x82
 8011768:	f7f4 ff8b 	bl	8006682 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801176c:	2300      	movs	r3, #0
}
 801176e:	4618      	mov	r0, r3
 8011770:	3708      	adds	r7, #8
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	200059c8 	.word	0x200059c8
 801177c:	40005c00 	.word	0x40005c00

08011780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011788:	2300      	movs	r3, #0
 801178a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011796:	4618      	mov	r0, r3
 8011798:	f7f3 fb7b 	bl	8004e92 <HAL_PCD_Start>
 801179c:	4603      	mov	r3, r0
 801179e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117a0:	7bfb      	ldrb	r3, [r7, #15]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 f97e 	bl	8011aa4 <USBD_Get_USB_Status>
 80117a8:	4603      	mov	r3, r0
 80117aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3710      	adds	r7, #16
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b084      	sub	sp, #16
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	4608      	mov	r0, r1
 80117c0:	4611      	mov	r1, r2
 80117c2:	461a      	mov	r2, r3
 80117c4:	4603      	mov	r3, r0
 80117c6:	70fb      	strb	r3, [r7, #3]
 80117c8:	460b      	mov	r3, r1
 80117ca:	70bb      	strb	r3, [r7, #2]
 80117cc:	4613      	mov	r3, r2
 80117ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117d0:	2300      	movs	r3, #0
 80117d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117d4:	2300      	movs	r3, #0
 80117d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80117de:	78bb      	ldrb	r3, [r7, #2]
 80117e0:	883a      	ldrh	r2, [r7, #0]
 80117e2:	78f9      	ldrb	r1, [r7, #3]
 80117e4:	f7f3 fcc2 	bl	800516c <HAL_PCD_EP_Open>
 80117e8:	4603      	mov	r3, r0
 80117ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ec:	7bfb      	ldrb	r3, [r7, #15]
 80117ee:	4618      	mov	r0, r3
 80117f0:	f000 f958 	bl	8011aa4 <USBD_Get_USB_Status>
 80117f4:	4603      	mov	r3, r0
 80117f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b084      	sub	sp, #16
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	460b      	mov	r3, r1
 801180c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801180e:	2300      	movs	r3, #0
 8011810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011812:	2300      	movs	r3, #0
 8011814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801181c:	78fa      	ldrb	r2, [r7, #3]
 801181e:	4611      	mov	r1, r2
 8011820:	4618      	mov	r0, r3
 8011822:	f7f3 fd00 	bl	8005226 <HAL_PCD_EP_Close>
 8011826:	4603      	mov	r3, r0
 8011828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801182a:	7bfb      	ldrb	r3, [r7, #15]
 801182c:	4618      	mov	r0, r3
 801182e:	f000 f939 	bl	8011aa4 <USBD_Get_USB_Status>
 8011832:	4603      	mov	r3, r0
 8011834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011836:	7bbb      	ldrb	r3, [r7, #14]
}
 8011838:	4618      	mov	r0, r3
 801183a:	3710      	adds	r7, #16
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b084      	sub	sp, #16
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	460b      	mov	r3, r1
 801184a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801184c:	2300      	movs	r3, #0
 801184e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011850:	2300      	movs	r3, #0
 8011852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801185a:	78fa      	ldrb	r2, [r7, #3]
 801185c:	4611      	mov	r1, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f7f3 fda9 	bl	80053b6 <HAL_PCD_EP_SetStall>
 8011864:	4603      	mov	r3, r0
 8011866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011868:	7bfb      	ldrb	r3, [r7, #15]
 801186a:	4618      	mov	r0, r3
 801186c:	f000 f91a 	bl	8011aa4 <USBD_Get_USB_Status>
 8011870:	4603      	mov	r3, r0
 8011872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011874:	7bbb      	ldrb	r3, [r7, #14]
}
 8011876:	4618      	mov	r0, r3
 8011878:	3710      	adds	r7, #16
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b084      	sub	sp, #16
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
 8011886:	460b      	mov	r3, r1
 8011888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801188a:	2300      	movs	r3, #0
 801188c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801188e:	2300      	movs	r3, #0
 8011890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011898:	78fa      	ldrb	r2, [r7, #3]
 801189a:	4611      	mov	r1, r2
 801189c:	4618      	mov	r0, r3
 801189e:	f7f3 fddc 	bl	800545a <HAL_PCD_EP_ClrStall>
 80118a2:	4603      	mov	r3, r0
 80118a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118a6:	7bfb      	ldrb	r3, [r7, #15]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f000 f8fb 	bl	8011aa4 <USBD_Get_USB_Status>
 80118ae:	4603      	mov	r3, r0
 80118b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80118ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80118d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	da0b      	bge.n	80118f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80118d8:	78fb      	ldrb	r3, [r7, #3]
 80118da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118de:	68f9      	ldr	r1, [r7, #12]
 80118e0:	4613      	mov	r3, r2
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	4413      	add	r3, r2
 80118e6:	00db      	lsls	r3, r3, #3
 80118e8:	440b      	add	r3, r1
 80118ea:	3312      	adds	r3, #18
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	e00b      	b.n	8011908 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80118f0:	78fb      	ldrb	r3, [r7, #3]
 80118f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118f6:	68f9      	ldr	r1, [r7, #12]
 80118f8:	4613      	mov	r3, r2
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	4413      	add	r3, r2
 80118fe:	00db      	lsls	r3, r3, #3
 8011900:	440b      	add	r3, r1
 8011902:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011906:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011908:	4618      	mov	r0, r3
 801190a:	3714      	adds	r7, #20
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011920:	2300      	movs	r3, #0
 8011922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011924:	2300      	movs	r3, #0
 8011926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801192e:	78fa      	ldrb	r2, [r7, #3]
 8011930:	4611      	mov	r1, r2
 8011932:	4618      	mov	r0, r3
 8011934:	f7f3 fbf6 	bl	8005124 <HAL_PCD_SetAddress>
 8011938:	4603      	mov	r3, r0
 801193a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801193c:	7bfb      	ldrb	r3, [r7, #15]
 801193e:	4618      	mov	r0, r3
 8011940:	f000 f8b0 	bl	8011aa4 <USBD_Get_USB_Status>
 8011944:	4603      	mov	r3, r0
 8011946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011948:	7bbb      	ldrb	r3, [r7, #14]
}
 801194a:	4618      	mov	r0, r3
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b086      	sub	sp, #24
 8011956:	af00      	add	r7, sp, #0
 8011958:	60f8      	str	r0, [r7, #12]
 801195a:	607a      	str	r2, [r7, #4]
 801195c:	603b      	str	r3, [r7, #0]
 801195e:	460b      	mov	r3, r1
 8011960:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011962:	2300      	movs	r3, #0
 8011964:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011966:	2300      	movs	r3, #0
 8011968:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011970:	7af9      	ldrb	r1, [r7, #11]
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	f7f3 fce7 	bl	8005348 <HAL_PCD_EP_Transmit>
 801197a:	4603      	mov	r3, r0
 801197c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801197e:	7dfb      	ldrb	r3, [r7, #23]
 8011980:	4618      	mov	r0, r3
 8011982:	f000 f88f 	bl	8011aa4 <USBD_Get_USB_Status>
 8011986:	4603      	mov	r3, r0
 8011988:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801198a:	7dbb      	ldrb	r3, [r7, #22]
}
 801198c:	4618      	mov	r0, r3
 801198e:	3718      	adds	r7, #24
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b086      	sub	sp, #24
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	607a      	str	r2, [r7, #4]
 801199e:	603b      	str	r3, [r7, #0]
 80119a0:	460b      	mov	r3, r1
 80119a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119a4:	2300      	movs	r3, #0
 80119a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80119b2:	7af9      	ldrb	r1, [r7, #11]
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	687a      	ldr	r2, [r7, #4]
 80119b8:	f7f3 fc7d 	bl	80052b6 <HAL_PCD_EP_Receive>
 80119bc:	4603      	mov	r3, r0
 80119be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119c0:	7dfb      	ldrb	r3, [r7, #23]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f000 f86e 	bl	8011aa4 <USBD_Get_USB_Status>
 80119c8:	4603      	mov	r3, r0
 80119ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80119cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3718      	adds	r7, #24
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b082      	sub	sp, #8
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
 80119de:	460b      	mov	r3, r1
 80119e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80119e8:	78fa      	ldrb	r2, [r7, #3]
 80119ea:	4611      	mov	r1, r2
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7f3 fc93 	bl	8005318 <HAL_PCD_EP_GetRxCount>
 80119f2:	4603      	mov	r3, r0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3708      	adds	r7, #8
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	460b      	mov	r3, r1
 8011a06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011a08:	78fb      	ldrb	r3, [r7, #3]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d002      	beq.n	8011a14 <HAL_PCDEx_LPM_Callback+0x18>
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d013      	beq.n	8011a3a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011a12:	e023      	b.n	8011a5c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	7a5b      	ldrb	r3, [r3, #9]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d007      	beq.n	8011a2c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011a1c:	f000 f83c 	bl	8011a98 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a20:	4b10      	ldr	r3, [pc, #64]	@ (8011a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	4a0f      	ldr	r2, [pc, #60]	@ (8011a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8011a26:	f023 0306 	bic.w	r3, r3, #6
 8011a2a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7fa ff52 	bl	800c8dc <USBD_LL_Resume>
    break;
 8011a38:	e010      	b.n	8011a5c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fa ff35 	bl	800c8b0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	7a5b      	ldrb	r3, [r3, #9]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d005      	beq.n	8011a5a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a4e:	4b05      	ldr	r3, [pc, #20]	@ (8011a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	4a04      	ldr	r2, [pc, #16]	@ (8011a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8011a54:	f043 0306 	orr.w	r3, r3, #6
 8011a58:	6113      	str	r3, [r2, #16]
    break;
 8011a5a:	bf00      	nop
}
 8011a5c:	bf00      	nop
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	e000ed00 	.word	0xe000ed00

08011a68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011a70:	4b03      	ldr	r3, [pc, #12]	@ (8011a80 <USBD_static_malloc+0x18>)
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	370c      	adds	r7, #12
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	20005ca4 	.word	0x20005ca4

08011a84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]

}
 8011a8c:	bf00      	nop
 8011a8e:	370c      	adds	r7, #12
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr

08011a98 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011a9c:	f7f1 fb14 	bl	80030c8 <SystemClock_Config>
}
 8011aa0:	bf00      	nop
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b085      	sub	sp, #20
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	4603      	mov	r3, r0
 8011aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ab2:	79fb      	ldrb	r3, [r7, #7]
 8011ab4:	2b03      	cmp	r3, #3
 8011ab6:	d817      	bhi.n	8011ae8 <USBD_Get_USB_Status+0x44>
 8011ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8011ac0 <USBD_Get_USB_Status+0x1c>)
 8011aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011abe:	bf00      	nop
 8011ac0:	08011ad1 	.word	0x08011ad1
 8011ac4:	08011ad7 	.word	0x08011ad7
 8011ac8:	08011add 	.word	0x08011add
 8011acc:	08011ae3 	.word	0x08011ae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ad4:	e00b      	b.n	8011aee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011ad6:	2303      	movs	r3, #3
 8011ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8011ada:	e008      	b.n	8011aee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011adc:	2301      	movs	r3, #1
 8011ade:	73fb      	strb	r3, [r7, #15]
    break;
 8011ae0:	e005      	b.n	8011aee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ae2:	2303      	movs	r3, #3
 8011ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8011ae6:	e002      	b.n	8011aee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011ae8:	2303      	movs	r3, #3
 8011aea:	73fb      	strb	r3, [r7, #15]
    break;
 8011aec:	bf00      	nop
  }
  return usb_status;
 8011aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <__cvt>:
 8011afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b00:	ec57 6b10 	vmov	r6, r7, d0
 8011b04:	2f00      	cmp	r7, #0
 8011b06:	460c      	mov	r4, r1
 8011b08:	4619      	mov	r1, r3
 8011b0a:	463b      	mov	r3, r7
 8011b0c:	bfbb      	ittet	lt
 8011b0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011b12:	461f      	movlt	r7, r3
 8011b14:	2300      	movge	r3, #0
 8011b16:	232d      	movlt	r3, #45	@ 0x2d
 8011b18:	700b      	strb	r3, [r1, #0]
 8011b1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011b20:	4691      	mov	r9, r2
 8011b22:	f023 0820 	bic.w	r8, r3, #32
 8011b26:	bfbc      	itt	lt
 8011b28:	4632      	movlt	r2, r6
 8011b2a:	4616      	movlt	r6, r2
 8011b2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011b30:	d005      	beq.n	8011b3e <__cvt+0x42>
 8011b32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011b36:	d100      	bne.n	8011b3a <__cvt+0x3e>
 8011b38:	3401      	adds	r4, #1
 8011b3a:	2102      	movs	r1, #2
 8011b3c:	e000      	b.n	8011b40 <__cvt+0x44>
 8011b3e:	2103      	movs	r1, #3
 8011b40:	ab03      	add	r3, sp, #12
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	ab02      	add	r3, sp, #8
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	ec47 6b10 	vmov	d0, r6, r7
 8011b4c:	4653      	mov	r3, sl
 8011b4e:	4622      	mov	r2, r4
 8011b50:	f000 fed2 	bl	80128f8 <_dtoa_r>
 8011b54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011b58:	4605      	mov	r5, r0
 8011b5a:	d119      	bne.n	8011b90 <__cvt+0x94>
 8011b5c:	f019 0f01 	tst.w	r9, #1
 8011b60:	d00e      	beq.n	8011b80 <__cvt+0x84>
 8011b62:	eb00 0904 	add.w	r9, r0, r4
 8011b66:	2200      	movs	r2, #0
 8011b68:	2300      	movs	r3, #0
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	4639      	mov	r1, r7
 8011b6e:	f7ee ffd3 	bl	8000b18 <__aeabi_dcmpeq>
 8011b72:	b108      	cbz	r0, 8011b78 <__cvt+0x7c>
 8011b74:	f8cd 900c 	str.w	r9, [sp, #12]
 8011b78:	2230      	movs	r2, #48	@ 0x30
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	454b      	cmp	r3, r9
 8011b7e:	d31e      	bcc.n	8011bbe <__cvt+0xc2>
 8011b80:	9b03      	ldr	r3, [sp, #12]
 8011b82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b84:	1b5b      	subs	r3, r3, r5
 8011b86:	4628      	mov	r0, r5
 8011b88:	6013      	str	r3, [r2, #0]
 8011b8a:	b004      	add	sp, #16
 8011b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011b94:	eb00 0904 	add.w	r9, r0, r4
 8011b98:	d1e5      	bne.n	8011b66 <__cvt+0x6a>
 8011b9a:	7803      	ldrb	r3, [r0, #0]
 8011b9c:	2b30      	cmp	r3, #48	@ 0x30
 8011b9e:	d10a      	bne.n	8011bb6 <__cvt+0xba>
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	4639      	mov	r1, r7
 8011ba8:	f7ee ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 8011bac:	b918      	cbnz	r0, 8011bb6 <__cvt+0xba>
 8011bae:	f1c4 0401 	rsb	r4, r4, #1
 8011bb2:	f8ca 4000 	str.w	r4, [sl]
 8011bb6:	f8da 3000 	ldr.w	r3, [sl]
 8011bba:	4499      	add	r9, r3
 8011bbc:	e7d3      	b.n	8011b66 <__cvt+0x6a>
 8011bbe:	1c59      	adds	r1, r3, #1
 8011bc0:	9103      	str	r1, [sp, #12]
 8011bc2:	701a      	strb	r2, [r3, #0]
 8011bc4:	e7d9      	b.n	8011b7a <__cvt+0x7e>

08011bc6 <__exponent>:
 8011bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bc8:	2900      	cmp	r1, #0
 8011bca:	bfba      	itte	lt
 8011bcc:	4249      	neglt	r1, r1
 8011bce:	232d      	movlt	r3, #45	@ 0x2d
 8011bd0:	232b      	movge	r3, #43	@ 0x2b
 8011bd2:	2909      	cmp	r1, #9
 8011bd4:	7002      	strb	r2, [r0, #0]
 8011bd6:	7043      	strb	r3, [r0, #1]
 8011bd8:	dd29      	ble.n	8011c2e <__exponent+0x68>
 8011bda:	f10d 0307 	add.w	r3, sp, #7
 8011bde:	461d      	mov	r5, r3
 8011be0:	270a      	movs	r7, #10
 8011be2:	461a      	mov	r2, r3
 8011be4:	fbb1 f6f7 	udiv	r6, r1, r7
 8011be8:	fb07 1416 	mls	r4, r7, r6, r1
 8011bec:	3430      	adds	r4, #48	@ 0x30
 8011bee:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	2c63      	cmp	r4, #99	@ 0x63
 8011bf6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011bfa:	4631      	mov	r1, r6
 8011bfc:	dcf1      	bgt.n	8011be2 <__exponent+0x1c>
 8011bfe:	3130      	adds	r1, #48	@ 0x30
 8011c00:	1e94      	subs	r4, r2, #2
 8011c02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011c06:	1c41      	adds	r1, r0, #1
 8011c08:	4623      	mov	r3, r4
 8011c0a:	42ab      	cmp	r3, r5
 8011c0c:	d30a      	bcc.n	8011c24 <__exponent+0x5e>
 8011c0e:	f10d 0309 	add.w	r3, sp, #9
 8011c12:	1a9b      	subs	r3, r3, r2
 8011c14:	42ac      	cmp	r4, r5
 8011c16:	bf88      	it	hi
 8011c18:	2300      	movhi	r3, #0
 8011c1a:	3302      	adds	r3, #2
 8011c1c:	4403      	add	r3, r0
 8011c1e:	1a18      	subs	r0, r3, r0
 8011c20:	b003      	add	sp, #12
 8011c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c24:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011c28:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011c2c:	e7ed      	b.n	8011c0a <__exponent+0x44>
 8011c2e:	2330      	movs	r3, #48	@ 0x30
 8011c30:	3130      	adds	r1, #48	@ 0x30
 8011c32:	7083      	strb	r3, [r0, #2]
 8011c34:	70c1      	strb	r1, [r0, #3]
 8011c36:	1d03      	adds	r3, r0, #4
 8011c38:	e7f1      	b.n	8011c1e <__exponent+0x58>
	...

08011c3c <_printf_float>:
 8011c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c40:	b08d      	sub	sp, #52	@ 0x34
 8011c42:	460c      	mov	r4, r1
 8011c44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011c48:	4616      	mov	r6, r2
 8011c4a:	461f      	mov	r7, r3
 8011c4c:	4605      	mov	r5, r0
 8011c4e:	f000 fcef 	bl	8012630 <_localeconv_r>
 8011c52:	6803      	ldr	r3, [r0, #0]
 8011c54:	9304      	str	r3, [sp, #16]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ee fb32 	bl	80002c0 <strlen>
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c60:	f8d8 3000 	ldr.w	r3, [r8]
 8011c64:	9005      	str	r0, [sp, #20]
 8011c66:	3307      	adds	r3, #7
 8011c68:	f023 0307 	bic.w	r3, r3, #7
 8011c6c:	f103 0208 	add.w	r2, r3, #8
 8011c70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011c74:	f8d4 b000 	ldr.w	fp, [r4]
 8011c78:	f8c8 2000 	str.w	r2, [r8]
 8011c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011c84:	9307      	str	r3, [sp, #28]
 8011c86:	f8cd 8018 	str.w	r8, [sp, #24]
 8011c8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c92:	4b9c      	ldr	r3, [pc, #624]	@ (8011f04 <_printf_float+0x2c8>)
 8011c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c98:	f7ee ff70 	bl	8000b7c <__aeabi_dcmpun>
 8011c9c:	bb70      	cbnz	r0, 8011cfc <_printf_float+0xc0>
 8011c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ca2:	4b98      	ldr	r3, [pc, #608]	@ (8011f04 <_printf_float+0x2c8>)
 8011ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011ca8:	f7ee ff4a 	bl	8000b40 <__aeabi_dcmple>
 8011cac:	bb30      	cbnz	r0, 8011cfc <_printf_float+0xc0>
 8011cae:	2200      	movs	r2, #0
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	4640      	mov	r0, r8
 8011cb4:	4649      	mov	r1, r9
 8011cb6:	f7ee ff39 	bl	8000b2c <__aeabi_dcmplt>
 8011cba:	b110      	cbz	r0, 8011cc2 <_printf_float+0x86>
 8011cbc:	232d      	movs	r3, #45	@ 0x2d
 8011cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cc2:	4a91      	ldr	r2, [pc, #580]	@ (8011f08 <_printf_float+0x2cc>)
 8011cc4:	4b91      	ldr	r3, [pc, #580]	@ (8011f0c <_printf_float+0x2d0>)
 8011cc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011cca:	bf94      	ite	ls
 8011ccc:	4690      	movls	r8, r2
 8011cce:	4698      	movhi	r8, r3
 8011cd0:	2303      	movs	r3, #3
 8011cd2:	6123      	str	r3, [r4, #16]
 8011cd4:	f02b 0304 	bic.w	r3, fp, #4
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	f04f 0900 	mov.w	r9, #0
 8011cde:	9700      	str	r7, [sp, #0]
 8011ce0:	4633      	mov	r3, r6
 8011ce2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f000 f9d2 	bl	8012090 <_printf_common>
 8011cec:	3001      	adds	r0, #1
 8011cee:	f040 808d 	bne.w	8011e0c <_printf_float+0x1d0>
 8011cf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011cf6:	b00d      	add	sp, #52	@ 0x34
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfc:	4642      	mov	r2, r8
 8011cfe:	464b      	mov	r3, r9
 8011d00:	4640      	mov	r0, r8
 8011d02:	4649      	mov	r1, r9
 8011d04:	f7ee ff3a 	bl	8000b7c <__aeabi_dcmpun>
 8011d08:	b140      	cbz	r0, 8011d1c <_printf_float+0xe0>
 8011d0a:	464b      	mov	r3, r9
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	bfbc      	itt	lt
 8011d10:	232d      	movlt	r3, #45	@ 0x2d
 8011d12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011d16:	4a7e      	ldr	r2, [pc, #504]	@ (8011f10 <_printf_float+0x2d4>)
 8011d18:	4b7e      	ldr	r3, [pc, #504]	@ (8011f14 <_printf_float+0x2d8>)
 8011d1a:	e7d4      	b.n	8011cc6 <_printf_float+0x8a>
 8011d1c:	6863      	ldr	r3, [r4, #4]
 8011d1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011d22:	9206      	str	r2, [sp, #24]
 8011d24:	1c5a      	adds	r2, r3, #1
 8011d26:	d13b      	bne.n	8011da0 <_printf_float+0x164>
 8011d28:	2306      	movs	r3, #6
 8011d2a:	6063      	str	r3, [r4, #4]
 8011d2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011d30:	2300      	movs	r3, #0
 8011d32:	6022      	str	r2, [r4, #0]
 8011d34:	9303      	str	r3, [sp, #12]
 8011d36:	ab0a      	add	r3, sp, #40	@ 0x28
 8011d38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011d3c:	ab09      	add	r3, sp, #36	@ 0x24
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	6861      	ldr	r1, [r4, #4]
 8011d42:	ec49 8b10 	vmov	d0, r8, r9
 8011d46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	f7ff fed6 	bl	8011afc <__cvt>
 8011d50:	9b06      	ldr	r3, [sp, #24]
 8011d52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d54:	2b47      	cmp	r3, #71	@ 0x47
 8011d56:	4680      	mov	r8, r0
 8011d58:	d129      	bne.n	8011dae <_printf_float+0x172>
 8011d5a:	1cc8      	adds	r0, r1, #3
 8011d5c:	db02      	blt.n	8011d64 <_printf_float+0x128>
 8011d5e:	6863      	ldr	r3, [r4, #4]
 8011d60:	4299      	cmp	r1, r3
 8011d62:	dd41      	ble.n	8011de8 <_printf_float+0x1ac>
 8011d64:	f1aa 0a02 	sub.w	sl, sl, #2
 8011d68:	fa5f fa8a 	uxtb.w	sl, sl
 8011d6c:	3901      	subs	r1, #1
 8011d6e:	4652      	mov	r2, sl
 8011d70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011d74:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d76:	f7ff ff26 	bl	8011bc6 <__exponent>
 8011d7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d7c:	1813      	adds	r3, r2, r0
 8011d7e:	2a01      	cmp	r2, #1
 8011d80:	4681      	mov	r9, r0
 8011d82:	6123      	str	r3, [r4, #16]
 8011d84:	dc02      	bgt.n	8011d8c <_printf_float+0x150>
 8011d86:	6822      	ldr	r2, [r4, #0]
 8011d88:	07d2      	lsls	r2, r2, #31
 8011d8a:	d501      	bpl.n	8011d90 <_printf_float+0x154>
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	6123      	str	r3, [r4, #16]
 8011d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d0a2      	beq.n	8011cde <_printf_float+0xa2>
 8011d98:	232d      	movs	r3, #45	@ 0x2d
 8011d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d9e:	e79e      	b.n	8011cde <_printf_float+0xa2>
 8011da0:	9a06      	ldr	r2, [sp, #24]
 8011da2:	2a47      	cmp	r2, #71	@ 0x47
 8011da4:	d1c2      	bne.n	8011d2c <_printf_float+0xf0>
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1c0      	bne.n	8011d2c <_printf_float+0xf0>
 8011daa:	2301      	movs	r3, #1
 8011dac:	e7bd      	b.n	8011d2a <_printf_float+0xee>
 8011dae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011db2:	d9db      	bls.n	8011d6c <_printf_float+0x130>
 8011db4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011db8:	d118      	bne.n	8011dec <_printf_float+0x1b0>
 8011dba:	2900      	cmp	r1, #0
 8011dbc:	6863      	ldr	r3, [r4, #4]
 8011dbe:	dd0b      	ble.n	8011dd8 <_printf_float+0x19c>
 8011dc0:	6121      	str	r1, [r4, #16]
 8011dc2:	b913      	cbnz	r3, 8011dca <_printf_float+0x18e>
 8011dc4:	6822      	ldr	r2, [r4, #0]
 8011dc6:	07d0      	lsls	r0, r2, #31
 8011dc8:	d502      	bpl.n	8011dd0 <_printf_float+0x194>
 8011dca:	3301      	adds	r3, #1
 8011dcc:	440b      	add	r3, r1
 8011dce:	6123      	str	r3, [r4, #16]
 8011dd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011dd2:	f04f 0900 	mov.w	r9, #0
 8011dd6:	e7db      	b.n	8011d90 <_printf_float+0x154>
 8011dd8:	b913      	cbnz	r3, 8011de0 <_printf_float+0x1a4>
 8011dda:	6822      	ldr	r2, [r4, #0]
 8011ddc:	07d2      	lsls	r2, r2, #31
 8011dde:	d501      	bpl.n	8011de4 <_printf_float+0x1a8>
 8011de0:	3302      	adds	r3, #2
 8011de2:	e7f4      	b.n	8011dce <_printf_float+0x192>
 8011de4:	2301      	movs	r3, #1
 8011de6:	e7f2      	b.n	8011dce <_printf_float+0x192>
 8011de8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dee:	4299      	cmp	r1, r3
 8011df0:	db05      	blt.n	8011dfe <_printf_float+0x1c2>
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	6121      	str	r1, [r4, #16]
 8011df6:	07d8      	lsls	r0, r3, #31
 8011df8:	d5ea      	bpl.n	8011dd0 <_printf_float+0x194>
 8011dfa:	1c4b      	adds	r3, r1, #1
 8011dfc:	e7e7      	b.n	8011dce <_printf_float+0x192>
 8011dfe:	2900      	cmp	r1, #0
 8011e00:	bfd4      	ite	le
 8011e02:	f1c1 0202 	rsble	r2, r1, #2
 8011e06:	2201      	movgt	r2, #1
 8011e08:	4413      	add	r3, r2
 8011e0a:	e7e0      	b.n	8011dce <_printf_float+0x192>
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	055a      	lsls	r2, r3, #21
 8011e10:	d407      	bmi.n	8011e22 <_printf_float+0x1e6>
 8011e12:	6923      	ldr	r3, [r4, #16]
 8011e14:	4642      	mov	r2, r8
 8011e16:	4631      	mov	r1, r6
 8011e18:	4628      	mov	r0, r5
 8011e1a:	47b8      	blx	r7
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	d12b      	bne.n	8011e78 <_printf_float+0x23c>
 8011e20:	e767      	b.n	8011cf2 <_printf_float+0xb6>
 8011e22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011e26:	f240 80dd 	bls.w	8011fe4 <_printf_float+0x3a8>
 8011e2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011e2e:	2200      	movs	r2, #0
 8011e30:	2300      	movs	r3, #0
 8011e32:	f7ee fe71 	bl	8000b18 <__aeabi_dcmpeq>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d033      	beq.n	8011ea2 <_printf_float+0x266>
 8011e3a:	4a37      	ldr	r2, [pc, #220]	@ (8011f18 <_printf_float+0x2dc>)
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	4631      	mov	r1, r6
 8011e40:	4628      	mov	r0, r5
 8011e42:	47b8      	blx	r7
 8011e44:	3001      	adds	r0, #1
 8011e46:	f43f af54 	beq.w	8011cf2 <_printf_float+0xb6>
 8011e4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011e4e:	4543      	cmp	r3, r8
 8011e50:	db02      	blt.n	8011e58 <_printf_float+0x21c>
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	07d8      	lsls	r0, r3, #31
 8011e56:	d50f      	bpl.n	8011e78 <_printf_float+0x23c>
 8011e58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e5c:	4631      	mov	r1, r6
 8011e5e:	4628      	mov	r0, r5
 8011e60:	47b8      	blx	r7
 8011e62:	3001      	adds	r0, #1
 8011e64:	f43f af45 	beq.w	8011cf2 <_printf_float+0xb6>
 8011e68:	f04f 0900 	mov.w	r9, #0
 8011e6c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011e70:	f104 0a1a 	add.w	sl, r4, #26
 8011e74:	45c8      	cmp	r8, r9
 8011e76:	dc09      	bgt.n	8011e8c <_printf_float+0x250>
 8011e78:	6823      	ldr	r3, [r4, #0]
 8011e7a:	079b      	lsls	r3, r3, #30
 8011e7c:	f100 8103 	bmi.w	8012086 <_printf_float+0x44a>
 8011e80:	68e0      	ldr	r0, [r4, #12]
 8011e82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e84:	4298      	cmp	r0, r3
 8011e86:	bfb8      	it	lt
 8011e88:	4618      	movlt	r0, r3
 8011e8a:	e734      	b.n	8011cf6 <_printf_float+0xba>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	4652      	mov	r2, sl
 8011e90:	4631      	mov	r1, r6
 8011e92:	4628      	mov	r0, r5
 8011e94:	47b8      	blx	r7
 8011e96:	3001      	adds	r0, #1
 8011e98:	f43f af2b 	beq.w	8011cf2 <_printf_float+0xb6>
 8011e9c:	f109 0901 	add.w	r9, r9, #1
 8011ea0:	e7e8      	b.n	8011e74 <_printf_float+0x238>
 8011ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dc39      	bgt.n	8011f1c <_printf_float+0x2e0>
 8011ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8011f18 <_printf_float+0x2dc>)
 8011eaa:	2301      	movs	r3, #1
 8011eac:	4631      	mov	r1, r6
 8011eae:	4628      	mov	r0, r5
 8011eb0:	47b8      	blx	r7
 8011eb2:	3001      	adds	r0, #1
 8011eb4:	f43f af1d 	beq.w	8011cf2 <_printf_float+0xb6>
 8011eb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011ebc:	ea59 0303 	orrs.w	r3, r9, r3
 8011ec0:	d102      	bne.n	8011ec8 <_printf_float+0x28c>
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	07d9      	lsls	r1, r3, #31
 8011ec6:	d5d7      	bpl.n	8011e78 <_printf_float+0x23c>
 8011ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ecc:	4631      	mov	r1, r6
 8011ece:	4628      	mov	r0, r5
 8011ed0:	47b8      	blx	r7
 8011ed2:	3001      	adds	r0, #1
 8011ed4:	f43f af0d 	beq.w	8011cf2 <_printf_float+0xb6>
 8011ed8:	f04f 0a00 	mov.w	sl, #0
 8011edc:	f104 0b1a 	add.w	fp, r4, #26
 8011ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ee2:	425b      	negs	r3, r3
 8011ee4:	4553      	cmp	r3, sl
 8011ee6:	dc01      	bgt.n	8011eec <_printf_float+0x2b0>
 8011ee8:	464b      	mov	r3, r9
 8011eea:	e793      	b.n	8011e14 <_printf_float+0x1d8>
 8011eec:	2301      	movs	r3, #1
 8011eee:	465a      	mov	r2, fp
 8011ef0:	4631      	mov	r1, r6
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	47b8      	blx	r7
 8011ef6:	3001      	adds	r0, #1
 8011ef8:	f43f aefb 	beq.w	8011cf2 <_printf_float+0xb6>
 8011efc:	f10a 0a01 	add.w	sl, sl, #1
 8011f00:	e7ee      	b.n	8011ee0 <_printf_float+0x2a4>
 8011f02:	bf00      	nop
 8011f04:	7fefffff 	.word	0x7fefffff
 8011f08:	08015aac 	.word	0x08015aac
 8011f0c:	08015ab0 	.word	0x08015ab0
 8011f10:	08015ab4 	.word	0x08015ab4
 8011f14:	08015ab8 	.word	0x08015ab8
 8011f18:	08015abc 	.word	0x08015abc
 8011f1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011f1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011f22:	4553      	cmp	r3, sl
 8011f24:	bfa8      	it	ge
 8011f26:	4653      	movge	r3, sl
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	4699      	mov	r9, r3
 8011f2c:	dc36      	bgt.n	8011f9c <_printf_float+0x360>
 8011f2e:	f04f 0b00 	mov.w	fp, #0
 8011f32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f36:	f104 021a 	add.w	r2, r4, #26
 8011f3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011f3c:	9306      	str	r3, [sp, #24]
 8011f3e:	eba3 0309 	sub.w	r3, r3, r9
 8011f42:	455b      	cmp	r3, fp
 8011f44:	dc31      	bgt.n	8011faa <_printf_float+0x36e>
 8011f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f48:	459a      	cmp	sl, r3
 8011f4a:	dc3a      	bgt.n	8011fc2 <_printf_float+0x386>
 8011f4c:	6823      	ldr	r3, [r4, #0]
 8011f4e:	07da      	lsls	r2, r3, #31
 8011f50:	d437      	bmi.n	8011fc2 <_printf_float+0x386>
 8011f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f54:	ebaa 0903 	sub.w	r9, sl, r3
 8011f58:	9b06      	ldr	r3, [sp, #24]
 8011f5a:	ebaa 0303 	sub.w	r3, sl, r3
 8011f5e:	4599      	cmp	r9, r3
 8011f60:	bfa8      	it	ge
 8011f62:	4699      	movge	r9, r3
 8011f64:	f1b9 0f00 	cmp.w	r9, #0
 8011f68:	dc33      	bgt.n	8011fd2 <_printf_float+0x396>
 8011f6a:	f04f 0800 	mov.w	r8, #0
 8011f6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f72:	f104 0b1a 	add.w	fp, r4, #26
 8011f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f78:	ebaa 0303 	sub.w	r3, sl, r3
 8011f7c:	eba3 0309 	sub.w	r3, r3, r9
 8011f80:	4543      	cmp	r3, r8
 8011f82:	f77f af79 	ble.w	8011e78 <_printf_float+0x23c>
 8011f86:	2301      	movs	r3, #1
 8011f88:	465a      	mov	r2, fp
 8011f8a:	4631      	mov	r1, r6
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	47b8      	blx	r7
 8011f90:	3001      	adds	r0, #1
 8011f92:	f43f aeae 	beq.w	8011cf2 <_printf_float+0xb6>
 8011f96:	f108 0801 	add.w	r8, r8, #1
 8011f9a:	e7ec      	b.n	8011f76 <_printf_float+0x33a>
 8011f9c:	4642      	mov	r2, r8
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	47b8      	blx	r7
 8011fa4:	3001      	adds	r0, #1
 8011fa6:	d1c2      	bne.n	8011f2e <_printf_float+0x2f2>
 8011fa8:	e6a3      	b.n	8011cf2 <_printf_float+0xb6>
 8011faa:	2301      	movs	r3, #1
 8011fac:	4631      	mov	r1, r6
 8011fae:	4628      	mov	r0, r5
 8011fb0:	9206      	str	r2, [sp, #24]
 8011fb2:	47b8      	blx	r7
 8011fb4:	3001      	adds	r0, #1
 8011fb6:	f43f ae9c 	beq.w	8011cf2 <_printf_float+0xb6>
 8011fba:	9a06      	ldr	r2, [sp, #24]
 8011fbc:	f10b 0b01 	add.w	fp, fp, #1
 8011fc0:	e7bb      	b.n	8011f3a <_printf_float+0x2fe>
 8011fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fc6:	4631      	mov	r1, r6
 8011fc8:	4628      	mov	r0, r5
 8011fca:	47b8      	blx	r7
 8011fcc:	3001      	adds	r0, #1
 8011fce:	d1c0      	bne.n	8011f52 <_printf_float+0x316>
 8011fd0:	e68f      	b.n	8011cf2 <_printf_float+0xb6>
 8011fd2:	9a06      	ldr	r2, [sp, #24]
 8011fd4:	464b      	mov	r3, r9
 8011fd6:	4442      	add	r2, r8
 8011fd8:	4631      	mov	r1, r6
 8011fda:	4628      	mov	r0, r5
 8011fdc:	47b8      	blx	r7
 8011fde:	3001      	adds	r0, #1
 8011fe0:	d1c3      	bne.n	8011f6a <_printf_float+0x32e>
 8011fe2:	e686      	b.n	8011cf2 <_printf_float+0xb6>
 8011fe4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011fe8:	f1ba 0f01 	cmp.w	sl, #1
 8011fec:	dc01      	bgt.n	8011ff2 <_printf_float+0x3b6>
 8011fee:	07db      	lsls	r3, r3, #31
 8011ff0:	d536      	bpl.n	8012060 <_printf_float+0x424>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	4642      	mov	r2, r8
 8011ff6:	4631      	mov	r1, r6
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	47b8      	blx	r7
 8011ffc:	3001      	adds	r0, #1
 8011ffe:	f43f ae78 	beq.w	8011cf2 <_printf_float+0xb6>
 8012002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012006:	4631      	mov	r1, r6
 8012008:	4628      	mov	r0, r5
 801200a:	47b8      	blx	r7
 801200c:	3001      	adds	r0, #1
 801200e:	f43f ae70 	beq.w	8011cf2 <_printf_float+0xb6>
 8012012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012016:	2200      	movs	r2, #0
 8012018:	2300      	movs	r3, #0
 801201a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801201e:	f7ee fd7b 	bl	8000b18 <__aeabi_dcmpeq>
 8012022:	b9c0      	cbnz	r0, 8012056 <_printf_float+0x41a>
 8012024:	4653      	mov	r3, sl
 8012026:	f108 0201 	add.w	r2, r8, #1
 801202a:	4631      	mov	r1, r6
 801202c:	4628      	mov	r0, r5
 801202e:	47b8      	blx	r7
 8012030:	3001      	adds	r0, #1
 8012032:	d10c      	bne.n	801204e <_printf_float+0x412>
 8012034:	e65d      	b.n	8011cf2 <_printf_float+0xb6>
 8012036:	2301      	movs	r3, #1
 8012038:	465a      	mov	r2, fp
 801203a:	4631      	mov	r1, r6
 801203c:	4628      	mov	r0, r5
 801203e:	47b8      	blx	r7
 8012040:	3001      	adds	r0, #1
 8012042:	f43f ae56 	beq.w	8011cf2 <_printf_float+0xb6>
 8012046:	f108 0801 	add.w	r8, r8, #1
 801204a:	45d0      	cmp	r8, sl
 801204c:	dbf3      	blt.n	8012036 <_printf_float+0x3fa>
 801204e:	464b      	mov	r3, r9
 8012050:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012054:	e6df      	b.n	8011e16 <_printf_float+0x1da>
 8012056:	f04f 0800 	mov.w	r8, #0
 801205a:	f104 0b1a 	add.w	fp, r4, #26
 801205e:	e7f4      	b.n	801204a <_printf_float+0x40e>
 8012060:	2301      	movs	r3, #1
 8012062:	4642      	mov	r2, r8
 8012064:	e7e1      	b.n	801202a <_printf_float+0x3ee>
 8012066:	2301      	movs	r3, #1
 8012068:	464a      	mov	r2, r9
 801206a:	4631      	mov	r1, r6
 801206c:	4628      	mov	r0, r5
 801206e:	47b8      	blx	r7
 8012070:	3001      	adds	r0, #1
 8012072:	f43f ae3e 	beq.w	8011cf2 <_printf_float+0xb6>
 8012076:	f108 0801 	add.w	r8, r8, #1
 801207a:	68e3      	ldr	r3, [r4, #12]
 801207c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801207e:	1a5b      	subs	r3, r3, r1
 8012080:	4543      	cmp	r3, r8
 8012082:	dcf0      	bgt.n	8012066 <_printf_float+0x42a>
 8012084:	e6fc      	b.n	8011e80 <_printf_float+0x244>
 8012086:	f04f 0800 	mov.w	r8, #0
 801208a:	f104 0919 	add.w	r9, r4, #25
 801208e:	e7f4      	b.n	801207a <_printf_float+0x43e>

08012090 <_printf_common>:
 8012090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012094:	4616      	mov	r6, r2
 8012096:	4698      	mov	r8, r3
 8012098:	688a      	ldr	r2, [r1, #8]
 801209a:	690b      	ldr	r3, [r1, #16]
 801209c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80120a0:	4293      	cmp	r3, r2
 80120a2:	bfb8      	it	lt
 80120a4:	4613      	movlt	r3, r2
 80120a6:	6033      	str	r3, [r6, #0]
 80120a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80120ac:	4607      	mov	r7, r0
 80120ae:	460c      	mov	r4, r1
 80120b0:	b10a      	cbz	r2, 80120b6 <_printf_common+0x26>
 80120b2:	3301      	adds	r3, #1
 80120b4:	6033      	str	r3, [r6, #0]
 80120b6:	6823      	ldr	r3, [r4, #0]
 80120b8:	0699      	lsls	r1, r3, #26
 80120ba:	bf42      	ittt	mi
 80120bc:	6833      	ldrmi	r3, [r6, #0]
 80120be:	3302      	addmi	r3, #2
 80120c0:	6033      	strmi	r3, [r6, #0]
 80120c2:	6825      	ldr	r5, [r4, #0]
 80120c4:	f015 0506 	ands.w	r5, r5, #6
 80120c8:	d106      	bne.n	80120d8 <_printf_common+0x48>
 80120ca:	f104 0a19 	add.w	sl, r4, #25
 80120ce:	68e3      	ldr	r3, [r4, #12]
 80120d0:	6832      	ldr	r2, [r6, #0]
 80120d2:	1a9b      	subs	r3, r3, r2
 80120d4:	42ab      	cmp	r3, r5
 80120d6:	dc26      	bgt.n	8012126 <_printf_common+0x96>
 80120d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80120dc:	6822      	ldr	r2, [r4, #0]
 80120de:	3b00      	subs	r3, #0
 80120e0:	bf18      	it	ne
 80120e2:	2301      	movne	r3, #1
 80120e4:	0692      	lsls	r2, r2, #26
 80120e6:	d42b      	bmi.n	8012140 <_printf_common+0xb0>
 80120e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80120ec:	4641      	mov	r1, r8
 80120ee:	4638      	mov	r0, r7
 80120f0:	47c8      	blx	r9
 80120f2:	3001      	adds	r0, #1
 80120f4:	d01e      	beq.n	8012134 <_printf_common+0xa4>
 80120f6:	6823      	ldr	r3, [r4, #0]
 80120f8:	6922      	ldr	r2, [r4, #16]
 80120fa:	f003 0306 	and.w	r3, r3, #6
 80120fe:	2b04      	cmp	r3, #4
 8012100:	bf02      	ittt	eq
 8012102:	68e5      	ldreq	r5, [r4, #12]
 8012104:	6833      	ldreq	r3, [r6, #0]
 8012106:	1aed      	subeq	r5, r5, r3
 8012108:	68a3      	ldr	r3, [r4, #8]
 801210a:	bf0c      	ite	eq
 801210c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012110:	2500      	movne	r5, #0
 8012112:	4293      	cmp	r3, r2
 8012114:	bfc4      	itt	gt
 8012116:	1a9b      	subgt	r3, r3, r2
 8012118:	18ed      	addgt	r5, r5, r3
 801211a:	2600      	movs	r6, #0
 801211c:	341a      	adds	r4, #26
 801211e:	42b5      	cmp	r5, r6
 8012120:	d11a      	bne.n	8012158 <_printf_common+0xc8>
 8012122:	2000      	movs	r0, #0
 8012124:	e008      	b.n	8012138 <_printf_common+0xa8>
 8012126:	2301      	movs	r3, #1
 8012128:	4652      	mov	r2, sl
 801212a:	4641      	mov	r1, r8
 801212c:	4638      	mov	r0, r7
 801212e:	47c8      	blx	r9
 8012130:	3001      	adds	r0, #1
 8012132:	d103      	bne.n	801213c <_printf_common+0xac>
 8012134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801213c:	3501      	adds	r5, #1
 801213e:	e7c6      	b.n	80120ce <_printf_common+0x3e>
 8012140:	18e1      	adds	r1, r4, r3
 8012142:	1c5a      	adds	r2, r3, #1
 8012144:	2030      	movs	r0, #48	@ 0x30
 8012146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801214a:	4422      	add	r2, r4
 801214c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012154:	3302      	adds	r3, #2
 8012156:	e7c7      	b.n	80120e8 <_printf_common+0x58>
 8012158:	2301      	movs	r3, #1
 801215a:	4622      	mov	r2, r4
 801215c:	4641      	mov	r1, r8
 801215e:	4638      	mov	r0, r7
 8012160:	47c8      	blx	r9
 8012162:	3001      	adds	r0, #1
 8012164:	d0e6      	beq.n	8012134 <_printf_common+0xa4>
 8012166:	3601      	adds	r6, #1
 8012168:	e7d9      	b.n	801211e <_printf_common+0x8e>
	...

0801216c <_printf_i>:
 801216c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012170:	7e0f      	ldrb	r7, [r1, #24]
 8012172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012174:	2f78      	cmp	r7, #120	@ 0x78
 8012176:	4691      	mov	r9, r2
 8012178:	4680      	mov	r8, r0
 801217a:	460c      	mov	r4, r1
 801217c:	469a      	mov	sl, r3
 801217e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012182:	d807      	bhi.n	8012194 <_printf_i+0x28>
 8012184:	2f62      	cmp	r7, #98	@ 0x62
 8012186:	d80a      	bhi.n	801219e <_printf_i+0x32>
 8012188:	2f00      	cmp	r7, #0
 801218a:	f000 80d2 	beq.w	8012332 <_printf_i+0x1c6>
 801218e:	2f58      	cmp	r7, #88	@ 0x58
 8012190:	f000 80b9 	beq.w	8012306 <_printf_i+0x19a>
 8012194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801219c:	e03a      	b.n	8012214 <_printf_i+0xa8>
 801219e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80121a2:	2b15      	cmp	r3, #21
 80121a4:	d8f6      	bhi.n	8012194 <_printf_i+0x28>
 80121a6:	a101      	add	r1, pc, #4	@ (adr r1, 80121ac <_printf_i+0x40>)
 80121a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121ac:	08012205 	.word	0x08012205
 80121b0:	08012219 	.word	0x08012219
 80121b4:	08012195 	.word	0x08012195
 80121b8:	08012195 	.word	0x08012195
 80121bc:	08012195 	.word	0x08012195
 80121c0:	08012195 	.word	0x08012195
 80121c4:	08012219 	.word	0x08012219
 80121c8:	08012195 	.word	0x08012195
 80121cc:	08012195 	.word	0x08012195
 80121d0:	08012195 	.word	0x08012195
 80121d4:	08012195 	.word	0x08012195
 80121d8:	08012319 	.word	0x08012319
 80121dc:	08012243 	.word	0x08012243
 80121e0:	080122d3 	.word	0x080122d3
 80121e4:	08012195 	.word	0x08012195
 80121e8:	08012195 	.word	0x08012195
 80121ec:	0801233b 	.word	0x0801233b
 80121f0:	08012195 	.word	0x08012195
 80121f4:	08012243 	.word	0x08012243
 80121f8:	08012195 	.word	0x08012195
 80121fc:	08012195 	.word	0x08012195
 8012200:	080122db 	.word	0x080122db
 8012204:	6833      	ldr	r3, [r6, #0]
 8012206:	1d1a      	adds	r2, r3, #4
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	6032      	str	r2, [r6, #0]
 801220c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012214:	2301      	movs	r3, #1
 8012216:	e09d      	b.n	8012354 <_printf_i+0x1e8>
 8012218:	6833      	ldr	r3, [r6, #0]
 801221a:	6820      	ldr	r0, [r4, #0]
 801221c:	1d19      	adds	r1, r3, #4
 801221e:	6031      	str	r1, [r6, #0]
 8012220:	0606      	lsls	r6, r0, #24
 8012222:	d501      	bpl.n	8012228 <_printf_i+0xbc>
 8012224:	681d      	ldr	r5, [r3, #0]
 8012226:	e003      	b.n	8012230 <_printf_i+0xc4>
 8012228:	0645      	lsls	r5, r0, #25
 801222a:	d5fb      	bpl.n	8012224 <_printf_i+0xb8>
 801222c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012230:	2d00      	cmp	r5, #0
 8012232:	da03      	bge.n	801223c <_printf_i+0xd0>
 8012234:	232d      	movs	r3, #45	@ 0x2d
 8012236:	426d      	negs	r5, r5
 8012238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801223c:	4859      	ldr	r0, [pc, #356]	@ (80123a4 <_printf_i+0x238>)
 801223e:	230a      	movs	r3, #10
 8012240:	e011      	b.n	8012266 <_printf_i+0xfa>
 8012242:	6821      	ldr	r1, [r4, #0]
 8012244:	6833      	ldr	r3, [r6, #0]
 8012246:	0608      	lsls	r0, r1, #24
 8012248:	f853 5b04 	ldr.w	r5, [r3], #4
 801224c:	d402      	bmi.n	8012254 <_printf_i+0xe8>
 801224e:	0649      	lsls	r1, r1, #25
 8012250:	bf48      	it	mi
 8012252:	b2ad      	uxthmi	r5, r5
 8012254:	2f6f      	cmp	r7, #111	@ 0x6f
 8012256:	4853      	ldr	r0, [pc, #332]	@ (80123a4 <_printf_i+0x238>)
 8012258:	6033      	str	r3, [r6, #0]
 801225a:	bf14      	ite	ne
 801225c:	230a      	movne	r3, #10
 801225e:	2308      	moveq	r3, #8
 8012260:	2100      	movs	r1, #0
 8012262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012266:	6866      	ldr	r6, [r4, #4]
 8012268:	60a6      	str	r6, [r4, #8]
 801226a:	2e00      	cmp	r6, #0
 801226c:	bfa2      	ittt	ge
 801226e:	6821      	ldrge	r1, [r4, #0]
 8012270:	f021 0104 	bicge.w	r1, r1, #4
 8012274:	6021      	strge	r1, [r4, #0]
 8012276:	b90d      	cbnz	r5, 801227c <_printf_i+0x110>
 8012278:	2e00      	cmp	r6, #0
 801227a:	d04b      	beq.n	8012314 <_printf_i+0x1a8>
 801227c:	4616      	mov	r6, r2
 801227e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012282:	fb03 5711 	mls	r7, r3, r1, r5
 8012286:	5dc7      	ldrb	r7, [r0, r7]
 8012288:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801228c:	462f      	mov	r7, r5
 801228e:	42bb      	cmp	r3, r7
 8012290:	460d      	mov	r5, r1
 8012292:	d9f4      	bls.n	801227e <_printf_i+0x112>
 8012294:	2b08      	cmp	r3, #8
 8012296:	d10b      	bne.n	80122b0 <_printf_i+0x144>
 8012298:	6823      	ldr	r3, [r4, #0]
 801229a:	07df      	lsls	r7, r3, #31
 801229c:	d508      	bpl.n	80122b0 <_printf_i+0x144>
 801229e:	6923      	ldr	r3, [r4, #16]
 80122a0:	6861      	ldr	r1, [r4, #4]
 80122a2:	4299      	cmp	r1, r3
 80122a4:	bfde      	ittt	le
 80122a6:	2330      	movle	r3, #48	@ 0x30
 80122a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80122ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80122b0:	1b92      	subs	r2, r2, r6
 80122b2:	6122      	str	r2, [r4, #16]
 80122b4:	f8cd a000 	str.w	sl, [sp]
 80122b8:	464b      	mov	r3, r9
 80122ba:	aa03      	add	r2, sp, #12
 80122bc:	4621      	mov	r1, r4
 80122be:	4640      	mov	r0, r8
 80122c0:	f7ff fee6 	bl	8012090 <_printf_common>
 80122c4:	3001      	adds	r0, #1
 80122c6:	d14a      	bne.n	801235e <_printf_i+0x1f2>
 80122c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122cc:	b004      	add	sp, #16
 80122ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122d2:	6823      	ldr	r3, [r4, #0]
 80122d4:	f043 0320 	orr.w	r3, r3, #32
 80122d8:	6023      	str	r3, [r4, #0]
 80122da:	4833      	ldr	r0, [pc, #204]	@ (80123a8 <_printf_i+0x23c>)
 80122dc:	2778      	movs	r7, #120	@ 0x78
 80122de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	6831      	ldr	r1, [r6, #0]
 80122e6:	061f      	lsls	r7, r3, #24
 80122e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80122ec:	d402      	bmi.n	80122f4 <_printf_i+0x188>
 80122ee:	065f      	lsls	r7, r3, #25
 80122f0:	bf48      	it	mi
 80122f2:	b2ad      	uxthmi	r5, r5
 80122f4:	6031      	str	r1, [r6, #0]
 80122f6:	07d9      	lsls	r1, r3, #31
 80122f8:	bf44      	itt	mi
 80122fa:	f043 0320 	orrmi.w	r3, r3, #32
 80122fe:	6023      	strmi	r3, [r4, #0]
 8012300:	b11d      	cbz	r5, 801230a <_printf_i+0x19e>
 8012302:	2310      	movs	r3, #16
 8012304:	e7ac      	b.n	8012260 <_printf_i+0xf4>
 8012306:	4827      	ldr	r0, [pc, #156]	@ (80123a4 <_printf_i+0x238>)
 8012308:	e7e9      	b.n	80122de <_printf_i+0x172>
 801230a:	6823      	ldr	r3, [r4, #0]
 801230c:	f023 0320 	bic.w	r3, r3, #32
 8012310:	6023      	str	r3, [r4, #0]
 8012312:	e7f6      	b.n	8012302 <_printf_i+0x196>
 8012314:	4616      	mov	r6, r2
 8012316:	e7bd      	b.n	8012294 <_printf_i+0x128>
 8012318:	6833      	ldr	r3, [r6, #0]
 801231a:	6825      	ldr	r5, [r4, #0]
 801231c:	6961      	ldr	r1, [r4, #20]
 801231e:	1d18      	adds	r0, r3, #4
 8012320:	6030      	str	r0, [r6, #0]
 8012322:	062e      	lsls	r6, r5, #24
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	d501      	bpl.n	801232c <_printf_i+0x1c0>
 8012328:	6019      	str	r1, [r3, #0]
 801232a:	e002      	b.n	8012332 <_printf_i+0x1c6>
 801232c:	0668      	lsls	r0, r5, #25
 801232e:	d5fb      	bpl.n	8012328 <_printf_i+0x1bc>
 8012330:	8019      	strh	r1, [r3, #0]
 8012332:	2300      	movs	r3, #0
 8012334:	6123      	str	r3, [r4, #16]
 8012336:	4616      	mov	r6, r2
 8012338:	e7bc      	b.n	80122b4 <_printf_i+0x148>
 801233a:	6833      	ldr	r3, [r6, #0]
 801233c:	1d1a      	adds	r2, r3, #4
 801233e:	6032      	str	r2, [r6, #0]
 8012340:	681e      	ldr	r6, [r3, #0]
 8012342:	6862      	ldr	r2, [r4, #4]
 8012344:	2100      	movs	r1, #0
 8012346:	4630      	mov	r0, r6
 8012348:	f7ed ff6a 	bl	8000220 <memchr>
 801234c:	b108      	cbz	r0, 8012352 <_printf_i+0x1e6>
 801234e:	1b80      	subs	r0, r0, r6
 8012350:	6060      	str	r0, [r4, #4]
 8012352:	6863      	ldr	r3, [r4, #4]
 8012354:	6123      	str	r3, [r4, #16]
 8012356:	2300      	movs	r3, #0
 8012358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801235c:	e7aa      	b.n	80122b4 <_printf_i+0x148>
 801235e:	6923      	ldr	r3, [r4, #16]
 8012360:	4632      	mov	r2, r6
 8012362:	4649      	mov	r1, r9
 8012364:	4640      	mov	r0, r8
 8012366:	47d0      	blx	sl
 8012368:	3001      	adds	r0, #1
 801236a:	d0ad      	beq.n	80122c8 <_printf_i+0x15c>
 801236c:	6823      	ldr	r3, [r4, #0]
 801236e:	079b      	lsls	r3, r3, #30
 8012370:	d413      	bmi.n	801239a <_printf_i+0x22e>
 8012372:	68e0      	ldr	r0, [r4, #12]
 8012374:	9b03      	ldr	r3, [sp, #12]
 8012376:	4298      	cmp	r0, r3
 8012378:	bfb8      	it	lt
 801237a:	4618      	movlt	r0, r3
 801237c:	e7a6      	b.n	80122cc <_printf_i+0x160>
 801237e:	2301      	movs	r3, #1
 8012380:	4632      	mov	r2, r6
 8012382:	4649      	mov	r1, r9
 8012384:	4640      	mov	r0, r8
 8012386:	47d0      	blx	sl
 8012388:	3001      	adds	r0, #1
 801238a:	d09d      	beq.n	80122c8 <_printf_i+0x15c>
 801238c:	3501      	adds	r5, #1
 801238e:	68e3      	ldr	r3, [r4, #12]
 8012390:	9903      	ldr	r1, [sp, #12]
 8012392:	1a5b      	subs	r3, r3, r1
 8012394:	42ab      	cmp	r3, r5
 8012396:	dcf2      	bgt.n	801237e <_printf_i+0x212>
 8012398:	e7eb      	b.n	8012372 <_printf_i+0x206>
 801239a:	2500      	movs	r5, #0
 801239c:	f104 0619 	add.w	r6, r4, #25
 80123a0:	e7f5      	b.n	801238e <_printf_i+0x222>
 80123a2:	bf00      	nop
 80123a4:	08015abe 	.word	0x08015abe
 80123a8:	08015acf 	.word	0x08015acf

080123ac <std>:
 80123ac:	2300      	movs	r3, #0
 80123ae:	b510      	push	{r4, lr}
 80123b0:	4604      	mov	r4, r0
 80123b2:	e9c0 3300 	strd	r3, r3, [r0]
 80123b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80123ba:	6083      	str	r3, [r0, #8]
 80123bc:	8181      	strh	r1, [r0, #12]
 80123be:	6643      	str	r3, [r0, #100]	@ 0x64
 80123c0:	81c2      	strh	r2, [r0, #14]
 80123c2:	6183      	str	r3, [r0, #24]
 80123c4:	4619      	mov	r1, r3
 80123c6:	2208      	movs	r2, #8
 80123c8:	305c      	adds	r0, #92	@ 0x5c
 80123ca:	f000 f928 	bl	801261e <memset>
 80123ce:	4b0d      	ldr	r3, [pc, #52]	@ (8012404 <std+0x58>)
 80123d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80123d2:	4b0d      	ldr	r3, [pc, #52]	@ (8012408 <std+0x5c>)
 80123d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80123d6:	4b0d      	ldr	r3, [pc, #52]	@ (801240c <std+0x60>)
 80123d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80123da:	4b0d      	ldr	r3, [pc, #52]	@ (8012410 <std+0x64>)
 80123dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80123de:	4b0d      	ldr	r3, [pc, #52]	@ (8012414 <std+0x68>)
 80123e0:	6224      	str	r4, [r4, #32]
 80123e2:	429c      	cmp	r4, r3
 80123e4:	d006      	beq.n	80123f4 <std+0x48>
 80123e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80123ea:	4294      	cmp	r4, r2
 80123ec:	d002      	beq.n	80123f4 <std+0x48>
 80123ee:	33d0      	adds	r3, #208	@ 0xd0
 80123f0:	429c      	cmp	r4, r3
 80123f2:	d105      	bne.n	8012400 <std+0x54>
 80123f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80123f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123fc:	f000 b9e2 	b.w	80127c4 <__retarget_lock_init_recursive>
 8012400:	bd10      	pop	{r4, pc}
 8012402:	bf00      	nop
 8012404:	08012599 	.word	0x08012599
 8012408:	080125bb 	.word	0x080125bb
 801240c:	080125f3 	.word	0x080125f3
 8012410:	08012617 	.word	0x08012617
 8012414:	20005ec4 	.word	0x20005ec4

08012418 <stdio_exit_handler>:
 8012418:	4a02      	ldr	r2, [pc, #8]	@ (8012424 <stdio_exit_handler+0xc>)
 801241a:	4903      	ldr	r1, [pc, #12]	@ (8012428 <stdio_exit_handler+0x10>)
 801241c:	4803      	ldr	r0, [pc, #12]	@ (801242c <stdio_exit_handler+0x14>)
 801241e:	f000 b869 	b.w	80124f4 <_fwalk_sglue>
 8012422:	bf00      	nop
 8012424:	20000188 	.word	0x20000188
 8012428:	0801413d 	.word	0x0801413d
 801242c:	20000198 	.word	0x20000198

08012430 <cleanup_stdio>:
 8012430:	6841      	ldr	r1, [r0, #4]
 8012432:	4b0c      	ldr	r3, [pc, #48]	@ (8012464 <cleanup_stdio+0x34>)
 8012434:	4299      	cmp	r1, r3
 8012436:	b510      	push	{r4, lr}
 8012438:	4604      	mov	r4, r0
 801243a:	d001      	beq.n	8012440 <cleanup_stdio+0x10>
 801243c:	f001 fe7e 	bl	801413c <_fflush_r>
 8012440:	68a1      	ldr	r1, [r4, #8]
 8012442:	4b09      	ldr	r3, [pc, #36]	@ (8012468 <cleanup_stdio+0x38>)
 8012444:	4299      	cmp	r1, r3
 8012446:	d002      	beq.n	801244e <cleanup_stdio+0x1e>
 8012448:	4620      	mov	r0, r4
 801244a:	f001 fe77 	bl	801413c <_fflush_r>
 801244e:	68e1      	ldr	r1, [r4, #12]
 8012450:	4b06      	ldr	r3, [pc, #24]	@ (801246c <cleanup_stdio+0x3c>)
 8012452:	4299      	cmp	r1, r3
 8012454:	d004      	beq.n	8012460 <cleanup_stdio+0x30>
 8012456:	4620      	mov	r0, r4
 8012458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801245c:	f001 be6e 	b.w	801413c <_fflush_r>
 8012460:	bd10      	pop	{r4, pc}
 8012462:	bf00      	nop
 8012464:	20005ec4 	.word	0x20005ec4
 8012468:	20005f2c 	.word	0x20005f2c
 801246c:	20005f94 	.word	0x20005f94

08012470 <global_stdio_init.part.0>:
 8012470:	b510      	push	{r4, lr}
 8012472:	4b0b      	ldr	r3, [pc, #44]	@ (80124a0 <global_stdio_init.part.0+0x30>)
 8012474:	4c0b      	ldr	r4, [pc, #44]	@ (80124a4 <global_stdio_init.part.0+0x34>)
 8012476:	4a0c      	ldr	r2, [pc, #48]	@ (80124a8 <global_stdio_init.part.0+0x38>)
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	4620      	mov	r0, r4
 801247c:	2200      	movs	r2, #0
 801247e:	2104      	movs	r1, #4
 8012480:	f7ff ff94 	bl	80123ac <std>
 8012484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012488:	2201      	movs	r2, #1
 801248a:	2109      	movs	r1, #9
 801248c:	f7ff ff8e 	bl	80123ac <std>
 8012490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012494:	2202      	movs	r2, #2
 8012496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801249a:	2112      	movs	r1, #18
 801249c:	f7ff bf86 	b.w	80123ac <std>
 80124a0:	20005ffc 	.word	0x20005ffc
 80124a4:	20005ec4 	.word	0x20005ec4
 80124a8:	08012419 	.word	0x08012419

080124ac <__sfp_lock_acquire>:
 80124ac:	4801      	ldr	r0, [pc, #4]	@ (80124b4 <__sfp_lock_acquire+0x8>)
 80124ae:	f000 b98a 	b.w	80127c6 <__retarget_lock_acquire_recursive>
 80124b2:	bf00      	nop
 80124b4:	20006005 	.word	0x20006005

080124b8 <__sfp_lock_release>:
 80124b8:	4801      	ldr	r0, [pc, #4]	@ (80124c0 <__sfp_lock_release+0x8>)
 80124ba:	f000 b985 	b.w	80127c8 <__retarget_lock_release_recursive>
 80124be:	bf00      	nop
 80124c0:	20006005 	.word	0x20006005

080124c4 <__sinit>:
 80124c4:	b510      	push	{r4, lr}
 80124c6:	4604      	mov	r4, r0
 80124c8:	f7ff fff0 	bl	80124ac <__sfp_lock_acquire>
 80124cc:	6a23      	ldr	r3, [r4, #32]
 80124ce:	b11b      	cbz	r3, 80124d8 <__sinit+0x14>
 80124d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124d4:	f7ff bff0 	b.w	80124b8 <__sfp_lock_release>
 80124d8:	4b04      	ldr	r3, [pc, #16]	@ (80124ec <__sinit+0x28>)
 80124da:	6223      	str	r3, [r4, #32]
 80124dc:	4b04      	ldr	r3, [pc, #16]	@ (80124f0 <__sinit+0x2c>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d1f5      	bne.n	80124d0 <__sinit+0xc>
 80124e4:	f7ff ffc4 	bl	8012470 <global_stdio_init.part.0>
 80124e8:	e7f2      	b.n	80124d0 <__sinit+0xc>
 80124ea:	bf00      	nop
 80124ec:	08012431 	.word	0x08012431
 80124f0:	20005ffc 	.word	0x20005ffc

080124f4 <_fwalk_sglue>:
 80124f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124f8:	4607      	mov	r7, r0
 80124fa:	4688      	mov	r8, r1
 80124fc:	4614      	mov	r4, r2
 80124fe:	2600      	movs	r6, #0
 8012500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012504:	f1b9 0901 	subs.w	r9, r9, #1
 8012508:	d505      	bpl.n	8012516 <_fwalk_sglue+0x22>
 801250a:	6824      	ldr	r4, [r4, #0]
 801250c:	2c00      	cmp	r4, #0
 801250e:	d1f7      	bne.n	8012500 <_fwalk_sglue+0xc>
 8012510:	4630      	mov	r0, r6
 8012512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012516:	89ab      	ldrh	r3, [r5, #12]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d907      	bls.n	801252c <_fwalk_sglue+0x38>
 801251c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012520:	3301      	adds	r3, #1
 8012522:	d003      	beq.n	801252c <_fwalk_sglue+0x38>
 8012524:	4629      	mov	r1, r5
 8012526:	4638      	mov	r0, r7
 8012528:	47c0      	blx	r8
 801252a:	4306      	orrs	r6, r0
 801252c:	3568      	adds	r5, #104	@ 0x68
 801252e:	e7e9      	b.n	8012504 <_fwalk_sglue+0x10>

08012530 <sniprintf>:
 8012530:	b40c      	push	{r2, r3}
 8012532:	b530      	push	{r4, r5, lr}
 8012534:	4b17      	ldr	r3, [pc, #92]	@ (8012594 <sniprintf+0x64>)
 8012536:	1e0c      	subs	r4, r1, #0
 8012538:	681d      	ldr	r5, [r3, #0]
 801253a:	b09d      	sub	sp, #116	@ 0x74
 801253c:	da08      	bge.n	8012550 <sniprintf+0x20>
 801253e:	238b      	movs	r3, #139	@ 0x8b
 8012540:	602b      	str	r3, [r5, #0]
 8012542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012546:	b01d      	add	sp, #116	@ 0x74
 8012548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801254c:	b002      	add	sp, #8
 801254e:	4770      	bx	lr
 8012550:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012554:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012558:	bf14      	ite	ne
 801255a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801255e:	4623      	moveq	r3, r4
 8012560:	9304      	str	r3, [sp, #16]
 8012562:	9307      	str	r3, [sp, #28]
 8012564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012568:	9002      	str	r0, [sp, #8]
 801256a:	9006      	str	r0, [sp, #24]
 801256c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012570:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012572:	ab21      	add	r3, sp, #132	@ 0x84
 8012574:	a902      	add	r1, sp, #8
 8012576:	4628      	mov	r0, r5
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	f001 fc5f 	bl	8013e3c <_svfiprintf_r>
 801257e:	1c43      	adds	r3, r0, #1
 8012580:	bfbc      	itt	lt
 8012582:	238b      	movlt	r3, #139	@ 0x8b
 8012584:	602b      	strlt	r3, [r5, #0]
 8012586:	2c00      	cmp	r4, #0
 8012588:	d0dd      	beq.n	8012546 <sniprintf+0x16>
 801258a:	9b02      	ldr	r3, [sp, #8]
 801258c:	2200      	movs	r2, #0
 801258e:	701a      	strb	r2, [r3, #0]
 8012590:	e7d9      	b.n	8012546 <sniprintf+0x16>
 8012592:	bf00      	nop
 8012594:	20000194 	.word	0x20000194

08012598 <__sread>:
 8012598:	b510      	push	{r4, lr}
 801259a:	460c      	mov	r4, r1
 801259c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125a0:	f000 f8c2 	bl	8012728 <_read_r>
 80125a4:	2800      	cmp	r0, #0
 80125a6:	bfab      	itete	ge
 80125a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80125aa:	89a3      	ldrhlt	r3, [r4, #12]
 80125ac:	181b      	addge	r3, r3, r0
 80125ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80125b2:	bfac      	ite	ge
 80125b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80125b6:	81a3      	strhlt	r3, [r4, #12]
 80125b8:	bd10      	pop	{r4, pc}

080125ba <__swrite>:
 80125ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125be:	461f      	mov	r7, r3
 80125c0:	898b      	ldrh	r3, [r1, #12]
 80125c2:	05db      	lsls	r3, r3, #23
 80125c4:	4605      	mov	r5, r0
 80125c6:	460c      	mov	r4, r1
 80125c8:	4616      	mov	r6, r2
 80125ca:	d505      	bpl.n	80125d8 <__swrite+0x1e>
 80125cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d0:	2302      	movs	r3, #2
 80125d2:	2200      	movs	r2, #0
 80125d4:	f000 f896 	bl	8012704 <_lseek_r>
 80125d8:	89a3      	ldrh	r3, [r4, #12]
 80125da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80125e2:	81a3      	strh	r3, [r4, #12]
 80125e4:	4632      	mov	r2, r6
 80125e6:	463b      	mov	r3, r7
 80125e8:	4628      	mov	r0, r5
 80125ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125ee:	f000 b8ad 	b.w	801274c <_write_r>

080125f2 <__sseek>:
 80125f2:	b510      	push	{r4, lr}
 80125f4:	460c      	mov	r4, r1
 80125f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125fa:	f000 f883 	bl	8012704 <_lseek_r>
 80125fe:	1c43      	adds	r3, r0, #1
 8012600:	89a3      	ldrh	r3, [r4, #12]
 8012602:	bf15      	itete	ne
 8012604:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012606:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801260a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801260e:	81a3      	strheq	r3, [r4, #12]
 8012610:	bf18      	it	ne
 8012612:	81a3      	strhne	r3, [r4, #12]
 8012614:	bd10      	pop	{r4, pc}

08012616 <__sclose>:
 8012616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801261a:	f000 b80d 	b.w	8012638 <_close_r>

0801261e <memset>:
 801261e:	4402      	add	r2, r0
 8012620:	4603      	mov	r3, r0
 8012622:	4293      	cmp	r3, r2
 8012624:	d100      	bne.n	8012628 <memset+0xa>
 8012626:	4770      	bx	lr
 8012628:	f803 1b01 	strb.w	r1, [r3], #1
 801262c:	e7f9      	b.n	8012622 <memset+0x4>
	...

08012630 <_localeconv_r>:
 8012630:	4800      	ldr	r0, [pc, #0]	@ (8012634 <_localeconv_r+0x4>)
 8012632:	4770      	bx	lr
 8012634:	200002d4 	.word	0x200002d4

08012638 <_close_r>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	4d06      	ldr	r5, [pc, #24]	@ (8012654 <_close_r+0x1c>)
 801263c:	2300      	movs	r3, #0
 801263e:	4604      	mov	r4, r0
 8012640:	4608      	mov	r0, r1
 8012642:	602b      	str	r3, [r5, #0]
 8012644:	f7f0 ff5c 	bl	8003500 <_close>
 8012648:	1c43      	adds	r3, r0, #1
 801264a:	d102      	bne.n	8012652 <_close_r+0x1a>
 801264c:	682b      	ldr	r3, [r5, #0]
 801264e:	b103      	cbz	r3, 8012652 <_close_r+0x1a>
 8012650:	6023      	str	r3, [r4, #0]
 8012652:	bd38      	pop	{r3, r4, r5, pc}
 8012654:	20006000 	.word	0x20006000

08012658 <_reclaim_reent>:
 8012658:	4b29      	ldr	r3, [pc, #164]	@ (8012700 <_reclaim_reent+0xa8>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	4283      	cmp	r3, r0
 801265e:	b570      	push	{r4, r5, r6, lr}
 8012660:	4604      	mov	r4, r0
 8012662:	d04b      	beq.n	80126fc <_reclaim_reent+0xa4>
 8012664:	69c3      	ldr	r3, [r0, #28]
 8012666:	b1ab      	cbz	r3, 8012694 <_reclaim_reent+0x3c>
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	b16b      	cbz	r3, 8012688 <_reclaim_reent+0x30>
 801266c:	2500      	movs	r5, #0
 801266e:	69e3      	ldr	r3, [r4, #28]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	5959      	ldr	r1, [r3, r5]
 8012674:	2900      	cmp	r1, #0
 8012676:	d13b      	bne.n	80126f0 <_reclaim_reent+0x98>
 8012678:	3504      	adds	r5, #4
 801267a:	2d80      	cmp	r5, #128	@ 0x80
 801267c:	d1f7      	bne.n	801266e <_reclaim_reent+0x16>
 801267e:	69e3      	ldr	r3, [r4, #28]
 8012680:	4620      	mov	r0, r4
 8012682:	68d9      	ldr	r1, [r3, #12]
 8012684:	f000 fefc 	bl	8013480 <_free_r>
 8012688:	69e3      	ldr	r3, [r4, #28]
 801268a:	6819      	ldr	r1, [r3, #0]
 801268c:	b111      	cbz	r1, 8012694 <_reclaim_reent+0x3c>
 801268e:	4620      	mov	r0, r4
 8012690:	f000 fef6 	bl	8013480 <_free_r>
 8012694:	6961      	ldr	r1, [r4, #20]
 8012696:	b111      	cbz	r1, 801269e <_reclaim_reent+0x46>
 8012698:	4620      	mov	r0, r4
 801269a:	f000 fef1 	bl	8013480 <_free_r>
 801269e:	69e1      	ldr	r1, [r4, #28]
 80126a0:	b111      	cbz	r1, 80126a8 <_reclaim_reent+0x50>
 80126a2:	4620      	mov	r0, r4
 80126a4:	f000 feec 	bl	8013480 <_free_r>
 80126a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80126aa:	b111      	cbz	r1, 80126b2 <_reclaim_reent+0x5a>
 80126ac:	4620      	mov	r0, r4
 80126ae:	f000 fee7 	bl	8013480 <_free_r>
 80126b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126b4:	b111      	cbz	r1, 80126bc <_reclaim_reent+0x64>
 80126b6:	4620      	mov	r0, r4
 80126b8:	f000 fee2 	bl	8013480 <_free_r>
 80126bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80126be:	b111      	cbz	r1, 80126c6 <_reclaim_reent+0x6e>
 80126c0:	4620      	mov	r0, r4
 80126c2:	f000 fedd 	bl	8013480 <_free_r>
 80126c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80126c8:	b111      	cbz	r1, 80126d0 <_reclaim_reent+0x78>
 80126ca:	4620      	mov	r0, r4
 80126cc:	f000 fed8 	bl	8013480 <_free_r>
 80126d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80126d2:	b111      	cbz	r1, 80126da <_reclaim_reent+0x82>
 80126d4:	4620      	mov	r0, r4
 80126d6:	f000 fed3 	bl	8013480 <_free_r>
 80126da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80126dc:	b111      	cbz	r1, 80126e4 <_reclaim_reent+0x8c>
 80126de:	4620      	mov	r0, r4
 80126e0:	f000 fece 	bl	8013480 <_free_r>
 80126e4:	6a23      	ldr	r3, [r4, #32]
 80126e6:	b14b      	cbz	r3, 80126fc <_reclaim_reent+0xa4>
 80126e8:	4620      	mov	r0, r4
 80126ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126ee:	4718      	bx	r3
 80126f0:	680e      	ldr	r6, [r1, #0]
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 fec4 	bl	8013480 <_free_r>
 80126f8:	4631      	mov	r1, r6
 80126fa:	e7bb      	b.n	8012674 <_reclaim_reent+0x1c>
 80126fc:	bd70      	pop	{r4, r5, r6, pc}
 80126fe:	bf00      	nop
 8012700:	20000194 	.word	0x20000194

08012704 <_lseek_r>:
 8012704:	b538      	push	{r3, r4, r5, lr}
 8012706:	4d07      	ldr	r5, [pc, #28]	@ (8012724 <_lseek_r+0x20>)
 8012708:	4604      	mov	r4, r0
 801270a:	4608      	mov	r0, r1
 801270c:	4611      	mov	r1, r2
 801270e:	2200      	movs	r2, #0
 8012710:	602a      	str	r2, [r5, #0]
 8012712:	461a      	mov	r2, r3
 8012714:	f7f0 ff1b 	bl	800354e <_lseek>
 8012718:	1c43      	adds	r3, r0, #1
 801271a:	d102      	bne.n	8012722 <_lseek_r+0x1e>
 801271c:	682b      	ldr	r3, [r5, #0]
 801271e:	b103      	cbz	r3, 8012722 <_lseek_r+0x1e>
 8012720:	6023      	str	r3, [r4, #0]
 8012722:	bd38      	pop	{r3, r4, r5, pc}
 8012724:	20006000 	.word	0x20006000

08012728 <_read_r>:
 8012728:	b538      	push	{r3, r4, r5, lr}
 801272a:	4d07      	ldr	r5, [pc, #28]	@ (8012748 <_read_r+0x20>)
 801272c:	4604      	mov	r4, r0
 801272e:	4608      	mov	r0, r1
 8012730:	4611      	mov	r1, r2
 8012732:	2200      	movs	r2, #0
 8012734:	602a      	str	r2, [r5, #0]
 8012736:	461a      	mov	r2, r3
 8012738:	f7f0 fea9 	bl	800348e <_read>
 801273c:	1c43      	adds	r3, r0, #1
 801273e:	d102      	bne.n	8012746 <_read_r+0x1e>
 8012740:	682b      	ldr	r3, [r5, #0]
 8012742:	b103      	cbz	r3, 8012746 <_read_r+0x1e>
 8012744:	6023      	str	r3, [r4, #0]
 8012746:	bd38      	pop	{r3, r4, r5, pc}
 8012748:	20006000 	.word	0x20006000

0801274c <_write_r>:
 801274c:	b538      	push	{r3, r4, r5, lr}
 801274e:	4d07      	ldr	r5, [pc, #28]	@ (801276c <_write_r+0x20>)
 8012750:	4604      	mov	r4, r0
 8012752:	4608      	mov	r0, r1
 8012754:	4611      	mov	r1, r2
 8012756:	2200      	movs	r2, #0
 8012758:	602a      	str	r2, [r5, #0]
 801275a:	461a      	mov	r2, r3
 801275c:	f7f0 feb4 	bl	80034c8 <_write>
 8012760:	1c43      	adds	r3, r0, #1
 8012762:	d102      	bne.n	801276a <_write_r+0x1e>
 8012764:	682b      	ldr	r3, [r5, #0]
 8012766:	b103      	cbz	r3, 801276a <_write_r+0x1e>
 8012768:	6023      	str	r3, [r4, #0]
 801276a:	bd38      	pop	{r3, r4, r5, pc}
 801276c:	20006000 	.word	0x20006000

08012770 <__errno>:
 8012770:	4b01      	ldr	r3, [pc, #4]	@ (8012778 <__errno+0x8>)
 8012772:	6818      	ldr	r0, [r3, #0]
 8012774:	4770      	bx	lr
 8012776:	bf00      	nop
 8012778:	20000194 	.word	0x20000194

0801277c <__libc_init_array>:
 801277c:	b570      	push	{r4, r5, r6, lr}
 801277e:	4d0d      	ldr	r5, [pc, #52]	@ (80127b4 <__libc_init_array+0x38>)
 8012780:	4c0d      	ldr	r4, [pc, #52]	@ (80127b8 <__libc_init_array+0x3c>)
 8012782:	1b64      	subs	r4, r4, r5
 8012784:	10a4      	asrs	r4, r4, #2
 8012786:	2600      	movs	r6, #0
 8012788:	42a6      	cmp	r6, r4
 801278a:	d109      	bne.n	80127a0 <__libc_init_array+0x24>
 801278c:	4d0b      	ldr	r5, [pc, #44]	@ (80127bc <__libc_init_array+0x40>)
 801278e:	4c0c      	ldr	r4, [pc, #48]	@ (80127c0 <__libc_init_array+0x44>)
 8012790:	f002 fda4 	bl	80152dc <_init>
 8012794:	1b64      	subs	r4, r4, r5
 8012796:	10a4      	asrs	r4, r4, #2
 8012798:	2600      	movs	r6, #0
 801279a:	42a6      	cmp	r6, r4
 801279c:	d105      	bne.n	80127aa <__libc_init_array+0x2e>
 801279e:	bd70      	pop	{r4, r5, r6, pc}
 80127a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80127a4:	4798      	blx	r3
 80127a6:	3601      	adds	r6, #1
 80127a8:	e7ee      	b.n	8012788 <__libc_init_array+0xc>
 80127aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80127ae:	4798      	blx	r3
 80127b0:	3601      	adds	r6, #1
 80127b2:	e7f2      	b.n	801279a <__libc_init_array+0x1e>
 80127b4:	08015e78 	.word	0x08015e78
 80127b8:	08015e78 	.word	0x08015e78
 80127bc:	08015e78 	.word	0x08015e78
 80127c0:	08015e7c 	.word	0x08015e7c

080127c4 <__retarget_lock_init_recursive>:
 80127c4:	4770      	bx	lr

080127c6 <__retarget_lock_acquire_recursive>:
 80127c6:	4770      	bx	lr

080127c8 <__retarget_lock_release_recursive>:
 80127c8:	4770      	bx	lr

080127ca <memcpy>:
 80127ca:	440a      	add	r2, r1
 80127cc:	4291      	cmp	r1, r2
 80127ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80127d2:	d100      	bne.n	80127d6 <memcpy+0xc>
 80127d4:	4770      	bx	lr
 80127d6:	b510      	push	{r4, lr}
 80127d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127e0:	4291      	cmp	r1, r2
 80127e2:	d1f9      	bne.n	80127d8 <memcpy+0xe>
 80127e4:	bd10      	pop	{r4, pc}

080127e6 <quorem>:
 80127e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ea:	6903      	ldr	r3, [r0, #16]
 80127ec:	690c      	ldr	r4, [r1, #16]
 80127ee:	42a3      	cmp	r3, r4
 80127f0:	4607      	mov	r7, r0
 80127f2:	db7e      	blt.n	80128f2 <quorem+0x10c>
 80127f4:	3c01      	subs	r4, #1
 80127f6:	f101 0814 	add.w	r8, r1, #20
 80127fa:	00a3      	lsls	r3, r4, #2
 80127fc:	f100 0514 	add.w	r5, r0, #20
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012806:	9301      	str	r3, [sp, #4]
 8012808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801280c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012810:	3301      	adds	r3, #1
 8012812:	429a      	cmp	r2, r3
 8012814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012818:	fbb2 f6f3 	udiv	r6, r2, r3
 801281c:	d32e      	bcc.n	801287c <quorem+0x96>
 801281e:	f04f 0a00 	mov.w	sl, #0
 8012822:	46c4      	mov	ip, r8
 8012824:	46ae      	mov	lr, r5
 8012826:	46d3      	mov	fp, sl
 8012828:	f85c 3b04 	ldr.w	r3, [ip], #4
 801282c:	b298      	uxth	r0, r3
 801282e:	fb06 a000 	mla	r0, r6, r0, sl
 8012832:	0c02      	lsrs	r2, r0, #16
 8012834:	0c1b      	lsrs	r3, r3, #16
 8012836:	fb06 2303 	mla	r3, r6, r3, r2
 801283a:	f8de 2000 	ldr.w	r2, [lr]
 801283e:	b280      	uxth	r0, r0
 8012840:	b292      	uxth	r2, r2
 8012842:	1a12      	subs	r2, r2, r0
 8012844:	445a      	add	r2, fp
 8012846:	f8de 0000 	ldr.w	r0, [lr]
 801284a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801284e:	b29b      	uxth	r3, r3
 8012850:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012854:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012858:	b292      	uxth	r2, r2
 801285a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801285e:	45e1      	cmp	r9, ip
 8012860:	f84e 2b04 	str.w	r2, [lr], #4
 8012864:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012868:	d2de      	bcs.n	8012828 <quorem+0x42>
 801286a:	9b00      	ldr	r3, [sp, #0]
 801286c:	58eb      	ldr	r3, [r5, r3]
 801286e:	b92b      	cbnz	r3, 801287c <quorem+0x96>
 8012870:	9b01      	ldr	r3, [sp, #4]
 8012872:	3b04      	subs	r3, #4
 8012874:	429d      	cmp	r5, r3
 8012876:	461a      	mov	r2, r3
 8012878:	d32f      	bcc.n	80128da <quorem+0xf4>
 801287a:	613c      	str	r4, [r7, #16]
 801287c:	4638      	mov	r0, r7
 801287e:	f001 f979 	bl	8013b74 <__mcmp>
 8012882:	2800      	cmp	r0, #0
 8012884:	db25      	blt.n	80128d2 <quorem+0xec>
 8012886:	4629      	mov	r1, r5
 8012888:	2000      	movs	r0, #0
 801288a:	f858 2b04 	ldr.w	r2, [r8], #4
 801288e:	f8d1 c000 	ldr.w	ip, [r1]
 8012892:	fa1f fe82 	uxth.w	lr, r2
 8012896:	fa1f f38c 	uxth.w	r3, ip
 801289a:	eba3 030e 	sub.w	r3, r3, lr
 801289e:	4403      	add	r3, r0
 80128a0:	0c12      	lsrs	r2, r2, #16
 80128a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80128a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128b0:	45c1      	cmp	r9, r8
 80128b2:	f841 3b04 	str.w	r3, [r1], #4
 80128b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80128ba:	d2e6      	bcs.n	801288a <quorem+0xa4>
 80128bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80128c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128c4:	b922      	cbnz	r2, 80128d0 <quorem+0xea>
 80128c6:	3b04      	subs	r3, #4
 80128c8:	429d      	cmp	r5, r3
 80128ca:	461a      	mov	r2, r3
 80128cc:	d30b      	bcc.n	80128e6 <quorem+0x100>
 80128ce:	613c      	str	r4, [r7, #16]
 80128d0:	3601      	adds	r6, #1
 80128d2:	4630      	mov	r0, r6
 80128d4:	b003      	add	sp, #12
 80128d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128da:	6812      	ldr	r2, [r2, #0]
 80128dc:	3b04      	subs	r3, #4
 80128de:	2a00      	cmp	r2, #0
 80128e0:	d1cb      	bne.n	801287a <quorem+0x94>
 80128e2:	3c01      	subs	r4, #1
 80128e4:	e7c6      	b.n	8012874 <quorem+0x8e>
 80128e6:	6812      	ldr	r2, [r2, #0]
 80128e8:	3b04      	subs	r3, #4
 80128ea:	2a00      	cmp	r2, #0
 80128ec:	d1ef      	bne.n	80128ce <quorem+0xe8>
 80128ee:	3c01      	subs	r4, #1
 80128f0:	e7ea      	b.n	80128c8 <quorem+0xe2>
 80128f2:	2000      	movs	r0, #0
 80128f4:	e7ee      	b.n	80128d4 <quorem+0xee>
	...

080128f8 <_dtoa_r>:
 80128f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128fc:	69c7      	ldr	r7, [r0, #28]
 80128fe:	b099      	sub	sp, #100	@ 0x64
 8012900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012904:	ec55 4b10 	vmov	r4, r5, d0
 8012908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801290a:	9109      	str	r1, [sp, #36]	@ 0x24
 801290c:	4683      	mov	fp, r0
 801290e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012912:	b97f      	cbnz	r7, 8012934 <_dtoa_r+0x3c>
 8012914:	2010      	movs	r0, #16
 8012916:	f000 fdfd 	bl	8013514 <malloc>
 801291a:	4602      	mov	r2, r0
 801291c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012920:	b920      	cbnz	r0, 801292c <_dtoa_r+0x34>
 8012922:	4ba7      	ldr	r3, [pc, #668]	@ (8012bc0 <_dtoa_r+0x2c8>)
 8012924:	21ef      	movs	r1, #239	@ 0xef
 8012926:	48a7      	ldr	r0, [pc, #668]	@ (8012bc4 <_dtoa_r+0x2cc>)
 8012928:	f001 fc5a 	bl	80141e0 <__assert_func>
 801292c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012930:	6007      	str	r7, [r0, #0]
 8012932:	60c7      	str	r7, [r0, #12]
 8012934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012938:	6819      	ldr	r1, [r3, #0]
 801293a:	b159      	cbz	r1, 8012954 <_dtoa_r+0x5c>
 801293c:	685a      	ldr	r2, [r3, #4]
 801293e:	604a      	str	r2, [r1, #4]
 8012940:	2301      	movs	r3, #1
 8012942:	4093      	lsls	r3, r2
 8012944:	608b      	str	r3, [r1, #8]
 8012946:	4658      	mov	r0, fp
 8012948:	f000 feda 	bl	8013700 <_Bfree>
 801294c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012950:	2200      	movs	r2, #0
 8012952:	601a      	str	r2, [r3, #0]
 8012954:	1e2b      	subs	r3, r5, #0
 8012956:	bfb9      	ittee	lt
 8012958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801295c:	9303      	strlt	r3, [sp, #12]
 801295e:	2300      	movge	r3, #0
 8012960:	6033      	strge	r3, [r6, #0]
 8012962:	9f03      	ldr	r7, [sp, #12]
 8012964:	4b98      	ldr	r3, [pc, #608]	@ (8012bc8 <_dtoa_r+0x2d0>)
 8012966:	bfbc      	itt	lt
 8012968:	2201      	movlt	r2, #1
 801296a:	6032      	strlt	r2, [r6, #0]
 801296c:	43bb      	bics	r3, r7
 801296e:	d112      	bne.n	8012996 <_dtoa_r+0x9e>
 8012970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012976:	6013      	str	r3, [r2, #0]
 8012978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801297c:	4323      	orrs	r3, r4
 801297e:	f000 854d 	beq.w	801341c <_dtoa_r+0xb24>
 8012982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012bdc <_dtoa_r+0x2e4>
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 854f 	beq.w	801342c <_dtoa_r+0xb34>
 801298e:	f10a 0303 	add.w	r3, sl, #3
 8012992:	f000 bd49 	b.w	8013428 <_dtoa_r+0xb30>
 8012996:	ed9d 7b02 	vldr	d7, [sp, #8]
 801299a:	2200      	movs	r2, #0
 801299c:	ec51 0b17 	vmov	r0, r1, d7
 80129a0:	2300      	movs	r3, #0
 80129a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80129a6:	f7ee f8b7 	bl	8000b18 <__aeabi_dcmpeq>
 80129aa:	4680      	mov	r8, r0
 80129ac:	b158      	cbz	r0, 80129c6 <_dtoa_r+0xce>
 80129ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80129b0:	2301      	movs	r3, #1
 80129b2:	6013      	str	r3, [r2, #0]
 80129b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80129b6:	b113      	cbz	r3, 80129be <_dtoa_r+0xc6>
 80129b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80129ba:	4b84      	ldr	r3, [pc, #528]	@ (8012bcc <_dtoa_r+0x2d4>)
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012be0 <_dtoa_r+0x2e8>
 80129c2:	f000 bd33 	b.w	801342c <_dtoa_r+0xb34>
 80129c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80129ca:	aa16      	add	r2, sp, #88	@ 0x58
 80129cc:	a917      	add	r1, sp, #92	@ 0x5c
 80129ce:	4658      	mov	r0, fp
 80129d0:	f001 f980 	bl	8013cd4 <__d2b>
 80129d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80129d8:	4681      	mov	r9, r0
 80129da:	2e00      	cmp	r6, #0
 80129dc:	d077      	beq.n	8012ace <_dtoa_r+0x1d6>
 80129de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80129e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80129e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80129ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80129f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80129f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80129f8:	4619      	mov	r1, r3
 80129fa:	2200      	movs	r2, #0
 80129fc:	4b74      	ldr	r3, [pc, #464]	@ (8012bd0 <_dtoa_r+0x2d8>)
 80129fe:	f7ed fc6b 	bl	80002d8 <__aeabi_dsub>
 8012a02:	a369      	add	r3, pc, #420	@ (adr r3, 8012ba8 <_dtoa_r+0x2b0>)
 8012a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a08:	f7ed fe1e 	bl	8000648 <__aeabi_dmul>
 8012a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8012bb0 <_dtoa_r+0x2b8>)
 8012a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a12:	f7ed fc63 	bl	80002dc <__adddf3>
 8012a16:	4604      	mov	r4, r0
 8012a18:	4630      	mov	r0, r6
 8012a1a:	460d      	mov	r5, r1
 8012a1c:	f7ed fdaa 	bl	8000574 <__aeabi_i2d>
 8012a20:	a365      	add	r3, pc, #404	@ (adr r3, 8012bb8 <_dtoa_r+0x2c0>)
 8012a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a26:	f7ed fe0f 	bl	8000648 <__aeabi_dmul>
 8012a2a:	4602      	mov	r2, r0
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	4620      	mov	r0, r4
 8012a30:	4629      	mov	r1, r5
 8012a32:	f7ed fc53 	bl	80002dc <__adddf3>
 8012a36:	4604      	mov	r4, r0
 8012a38:	460d      	mov	r5, r1
 8012a3a:	f7ee f8b5 	bl	8000ba8 <__aeabi_d2iz>
 8012a3e:	2200      	movs	r2, #0
 8012a40:	4607      	mov	r7, r0
 8012a42:	2300      	movs	r3, #0
 8012a44:	4620      	mov	r0, r4
 8012a46:	4629      	mov	r1, r5
 8012a48:	f7ee f870 	bl	8000b2c <__aeabi_dcmplt>
 8012a4c:	b140      	cbz	r0, 8012a60 <_dtoa_r+0x168>
 8012a4e:	4638      	mov	r0, r7
 8012a50:	f7ed fd90 	bl	8000574 <__aeabi_i2d>
 8012a54:	4622      	mov	r2, r4
 8012a56:	462b      	mov	r3, r5
 8012a58:	f7ee f85e 	bl	8000b18 <__aeabi_dcmpeq>
 8012a5c:	b900      	cbnz	r0, 8012a60 <_dtoa_r+0x168>
 8012a5e:	3f01      	subs	r7, #1
 8012a60:	2f16      	cmp	r7, #22
 8012a62:	d851      	bhi.n	8012b08 <_dtoa_r+0x210>
 8012a64:	4b5b      	ldr	r3, [pc, #364]	@ (8012bd4 <_dtoa_r+0x2dc>)
 8012a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a72:	f7ee f85b 	bl	8000b2c <__aeabi_dcmplt>
 8012a76:	2800      	cmp	r0, #0
 8012a78:	d048      	beq.n	8012b0c <_dtoa_r+0x214>
 8012a7a:	3f01      	subs	r7, #1
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012a82:	1b9b      	subs	r3, r3, r6
 8012a84:	1e5a      	subs	r2, r3, #1
 8012a86:	bf44      	itt	mi
 8012a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8012a8c:	2300      	movmi	r3, #0
 8012a8e:	9208      	str	r2, [sp, #32]
 8012a90:	bf54      	ite	pl
 8012a92:	f04f 0800 	movpl.w	r8, #0
 8012a96:	9308      	strmi	r3, [sp, #32]
 8012a98:	2f00      	cmp	r7, #0
 8012a9a:	db39      	blt.n	8012b10 <_dtoa_r+0x218>
 8012a9c:	9b08      	ldr	r3, [sp, #32]
 8012a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012aa0:	443b      	add	r3, r7
 8012aa2:	9308      	str	r3, [sp, #32]
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012aaa:	2b09      	cmp	r3, #9
 8012aac:	d864      	bhi.n	8012b78 <_dtoa_r+0x280>
 8012aae:	2b05      	cmp	r3, #5
 8012ab0:	bfc4      	itt	gt
 8012ab2:	3b04      	subgt	r3, #4
 8012ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8012abc:	bfcc      	ite	gt
 8012abe:	2400      	movgt	r4, #0
 8012ac0:	2401      	movle	r4, #1
 8012ac2:	2b03      	cmp	r3, #3
 8012ac4:	d863      	bhi.n	8012b8e <_dtoa_r+0x296>
 8012ac6:	e8df f003 	tbb	[pc, r3]
 8012aca:	372a      	.short	0x372a
 8012acc:	5535      	.short	0x5535
 8012ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012ad2:	441e      	add	r6, r3
 8012ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012ad8:	2b20      	cmp	r3, #32
 8012ada:	bfc1      	itttt	gt
 8012adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012ae0:	409f      	lslgt	r7, r3
 8012ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012aea:	bfd6      	itet	le
 8012aec:	f1c3 0320 	rsble	r3, r3, #32
 8012af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8012af4:	fa04 f003 	lslle.w	r0, r4, r3
 8012af8:	f7ed fd2c 	bl	8000554 <__aeabi_ui2d>
 8012afc:	2201      	movs	r2, #1
 8012afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012b02:	3e01      	subs	r6, #1
 8012b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8012b06:	e777      	b.n	80129f8 <_dtoa_r+0x100>
 8012b08:	2301      	movs	r3, #1
 8012b0a:	e7b8      	b.n	8012a7e <_dtoa_r+0x186>
 8012b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012b0e:	e7b7      	b.n	8012a80 <_dtoa_r+0x188>
 8012b10:	427b      	negs	r3, r7
 8012b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b14:	2300      	movs	r3, #0
 8012b16:	eba8 0807 	sub.w	r8, r8, r7
 8012b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012b1c:	e7c4      	b.n	8012aa8 <_dtoa_r+0x1b0>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	dc35      	bgt.n	8012b94 <_dtoa_r+0x29c>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	9307      	str	r3, [sp, #28]
 8012b2e:	461a      	mov	r2, r3
 8012b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b32:	e00b      	b.n	8012b4c <_dtoa_r+0x254>
 8012b34:	2301      	movs	r3, #1
 8012b36:	e7f3      	b.n	8012b20 <_dtoa_r+0x228>
 8012b38:	2300      	movs	r3, #0
 8012b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b3e:	18fb      	adds	r3, r7, r3
 8012b40:	9300      	str	r3, [sp, #0]
 8012b42:	3301      	adds	r3, #1
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	9307      	str	r3, [sp, #28]
 8012b48:	bfb8      	it	lt
 8012b4a:	2301      	movlt	r3, #1
 8012b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012b50:	2100      	movs	r1, #0
 8012b52:	2204      	movs	r2, #4
 8012b54:	f102 0514 	add.w	r5, r2, #20
 8012b58:	429d      	cmp	r5, r3
 8012b5a:	d91f      	bls.n	8012b9c <_dtoa_r+0x2a4>
 8012b5c:	6041      	str	r1, [r0, #4]
 8012b5e:	4658      	mov	r0, fp
 8012b60:	f000 fd8e 	bl	8013680 <_Balloc>
 8012b64:	4682      	mov	sl, r0
 8012b66:	2800      	cmp	r0, #0
 8012b68:	d13c      	bne.n	8012be4 <_dtoa_r+0x2ec>
 8012b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8012bd8 <_dtoa_r+0x2e0>)
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012b72:	e6d8      	b.n	8012926 <_dtoa_r+0x2e>
 8012b74:	2301      	movs	r3, #1
 8012b76:	e7e0      	b.n	8012b3a <_dtoa_r+0x242>
 8012b78:	2401      	movs	r4, #1
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	9307      	str	r3, [sp, #28]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	2312      	movs	r3, #18
 8012b8c:	e7d0      	b.n	8012b30 <_dtoa_r+0x238>
 8012b8e:	2301      	movs	r3, #1
 8012b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b92:	e7f5      	b.n	8012b80 <_dtoa_r+0x288>
 8012b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	9307      	str	r3, [sp, #28]
 8012b9a:	e7d7      	b.n	8012b4c <_dtoa_r+0x254>
 8012b9c:	3101      	adds	r1, #1
 8012b9e:	0052      	lsls	r2, r2, #1
 8012ba0:	e7d8      	b.n	8012b54 <_dtoa_r+0x25c>
 8012ba2:	bf00      	nop
 8012ba4:	f3af 8000 	nop.w
 8012ba8:	636f4361 	.word	0x636f4361
 8012bac:	3fd287a7 	.word	0x3fd287a7
 8012bb0:	8b60c8b3 	.word	0x8b60c8b3
 8012bb4:	3fc68a28 	.word	0x3fc68a28
 8012bb8:	509f79fb 	.word	0x509f79fb
 8012bbc:	3fd34413 	.word	0x3fd34413
 8012bc0:	08015aed 	.word	0x08015aed
 8012bc4:	08015b04 	.word	0x08015b04
 8012bc8:	7ff00000 	.word	0x7ff00000
 8012bcc:	08015abd 	.word	0x08015abd
 8012bd0:	3ff80000 	.word	0x3ff80000
 8012bd4:	08015c00 	.word	0x08015c00
 8012bd8:	08015b5c 	.word	0x08015b5c
 8012bdc:	08015ae9 	.word	0x08015ae9
 8012be0:	08015abc 	.word	0x08015abc
 8012be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012be8:	6018      	str	r0, [r3, #0]
 8012bea:	9b07      	ldr	r3, [sp, #28]
 8012bec:	2b0e      	cmp	r3, #14
 8012bee:	f200 80a4 	bhi.w	8012d3a <_dtoa_r+0x442>
 8012bf2:	2c00      	cmp	r4, #0
 8012bf4:	f000 80a1 	beq.w	8012d3a <_dtoa_r+0x442>
 8012bf8:	2f00      	cmp	r7, #0
 8012bfa:	dd33      	ble.n	8012c64 <_dtoa_r+0x36c>
 8012bfc:	4bad      	ldr	r3, [pc, #692]	@ (8012eb4 <_dtoa_r+0x5bc>)
 8012bfe:	f007 020f 	and.w	r2, r7, #15
 8012c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c06:	ed93 7b00 	vldr	d7, [r3]
 8012c0a:	05f8      	lsls	r0, r7, #23
 8012c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012c14:	d516      	bpl.n	8012c44 <_dtoa_r+0x34c>
 8012c16:	4ba8      	ldr	r3, [pc, #672]	@ (8012eb8 <_dtoa_r+0x5c0>)
 8012c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c20:	f7ed fe3c 	bl	800089c <__aeabi_ddiv>
 8012c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c28:	f004 040f 	and.w	r4, r4, #15
 8012c2c:	2603      	movs	r6, #3
 8012c2e:	4da2      	ldr	r5, [pc, #648]	@ (8012eb8 <_dtoa_r+0x5c0>)
 8012c30:	b954      	cbnz	r4, 8012c48 <_dtoa_r+0x350>
 8012c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c3a:	f7ed fe2f 	bl	800089c <__aeabi_ddiv>
 8012c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c42:	e028      	b.n	8012c96 <_dtoa_r+0x39e>
 8012c44:	2602      	movs	r6, #2
 8012c46:	e7f2      	b.n	8012c2e <_dtoa_r+0x336>
 8012c48:	07e1      	lsls	r1, r4, #31
 8012c4a:	d508      	bpl.n	8012c5e <_dtoa_r+0x366>
 8012c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c54:	f7ed fcf8 	bl	8000648 <__aeabi_dmul>
 8012c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c5c:	3601      	adds	r6, #1
 8012c5e:	1064      	asrs	r4, r4, #1
 8012c60:	3508      	adds	r5, #8
 8012c62:	e7e5      	b.n	8012c30 <_dtoa_r+0x338>
 8012c64:	f000 80d2 	beq.w	8012e0c <_dtoa_r+0x514>
 8012c68:	427c      	negs	r4, r7
 8012c6a:	4b92      	ldr	r3, [pc, #584]	@ (8012eb4 <_dtoa_r+0x5bc>)
 8012c6c:	4d92      	ldr	r5, [pc, #584]	@ (8012eb8 <_dtoa_r+0x5c0>)
 8012c6e:	f004 020f 	and.w	r2, r4, #15
 8012c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c7e:	f7ed fce3 	bl	8000648 <__aeabi_dmul>
 8012c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c86:	1124      	asrs	r4, r4, #4
 8012c88:	2300      	movs	r3, #0
 8012c8a:	2602      	movs	r6, #2
 8012c8c:	2c00      	cmp	r4, #0
 8012c8e:	f040 80b2 	bne.w	8012df6 <_dtoa_r+0x4fe>
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d1d3      	bne.n	8012c3e <_dtoa_r+0x346>
 8012c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	f000 80b7 	beq.w	8012e10 <_dtoa_r+0x518>
 8012ca2:	4b86      	ldr	r3, [pc, #536]	@ (8012ebc <_dtoa_r+0x5c4>)
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	4629      	mov	r1, r5
 8012caa:	f7ed ff3f 	bl	8000b2c <__aeabi_dcmplt>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	f000 80ae 	beq.w	8012e10 <_dtoa_r+0x518>
 8012cb4:	9b07      	ldr	r3, [sp, #28]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f000 80aa 	beq.w	8012e10 <_dtoa_r+0x518>
 8012cbc:	9b00      	ldr	r3, [sp, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	dd37      	ble.n	8012d32 <_dtoa_r+0x43a>
 8012cc2:	1e7b      	subs	r3, r7, #1
 8012cc4:	9304      	str	r3, [sp, #16]
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8012ec0 <_dtoa_r+0x5c8>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	4629      	mov	r1, r5
 8012cce:	f7ed fcbb 	bl	8000648 <__aeabi_dmul>
 8012cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cd6:	9c00      	ldr	r4, [sp, #0]
 8012cd8:	3601      	adds	r6, #1
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f7ed fc4a 	bl	8000574 <__aeabi_i2d>
 8012ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ce4:	f7ed fcb0 	bl	8000648 <__aeabi_dmul>
 8012ce8:	4b76      	ldr	r3, [pc, #472]	@ (8012ec4 <_dtoa_r+0x5cc>)
 8012cea:	2200      	movs	r2, #0
 8012cec:	f7ed faf6 	bl	80002dc <__adddf3>
 8012cf0:	4605      	mov	r5, r0
 8012cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012cf6:	2c00      	cmp	r4, #0
 8012cf8:	f040 808d 	bne.w	8012e16 <_dtoa_r+0x51e>
 8012cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d00:	4b71      	ldr	r3, [pc, #452]	@ (8012ec8 <_dtoa_r+0x5d0>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	f7ed fae8 	bl	80002d8 <__aeabi_dsub>
 8012d08:	4602      	mov	r2, r0
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d10:	462a      	mov	r2, r5
 8012d12:	4633      	mov	r3, r6
 8012d14:	f7ed ff28 	bl	8000b68 <__aeabi_dcmpgt>
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	f040 828b 	bne.w	8013234 <_dtoa_r+0x93c>
 8012d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d22:	462a      	mov	r2, r5
 8012d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012d28:	f7ed ff00 	bl	8000b2c <__aeabi_dcmplt>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	f040 8128 	bne.w	8012f82 <_dtoa_r+0x68a>
 8012d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	f2c0 815a 	blt.w	8012ff6 <_dtoa_r+0x6fe>
 8012d42:	2f0e      	cmp	r7, #14
 8012d44:	f300 8157 	bgt.w	8012ff6 <_dtoa_r+0x6fe>
 8012d48:	4b5a      	ldr	r3, [pc, #360]	@ (8012eb4 <_dtoa_r+0x5bc>)
 8012d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012d4e:	ed93 7b00 	vldr	d7, [r3]
 8012d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	ed8d 7b00 	vstr	d7, [sp]
 8012d5a:	da03      	bge.n	8012d64 <_dtoa_r+0x46c>
 8012d5c:	9b07      	ldr	r3, [sp, #28]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f340 8101 	ble.w	8012f66 <_dtoa_r+0x66e>
 8012d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012d68:	4656      	mov	r6, sl
 8012d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d6e:	4620      	mov	r0, r4
 8012d70:	4629      	mov	r1, r5
 8012d72:	f7ed fd93 	bl	800089c <__aeabi_ddiv>
 8012d76:	f7ed ff17 	bl	8000ba8 <__aeabi_d2iz>
 8012d7a:	4680      	mov	r8, r0
 8012d7c:	f7ed fbfa 	bl	8000574 <__aeabi_i2d>
 8012d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d84:	f7ed fc60 	bl	8000648 <__aeabi_dmul>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	4629      	mov	r1, r5
 8012d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012d94:	f7ed faa0 	bl	80002d8 <__aeabi_dsub>
 8012d98:	f806 4b01 	strb.w	r4, [r6], #1
 8012d9c:	9d07      	ldr	r5, [sp, #28]
 8012d9e:	eba6 040a 	sub.w	r4, r6, sl
 8012da2:	42a5      	cmp	r5, r4
 8012da4:	4602      	mov	r2, r0
 8012da6:	460b      	mov	r3, r1
 8012da8:	f040 8117 	bne.w	8012fda <_dtoa_r+0x6e2>
 8012dac:	f7ed fa96 	bl	80002dc <__adddf3>
 8012db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012db4:	4604      	mov	r4, r0
 8012db6:	460d      	mov	r5, r1
 8012db8:	f7ed fed6 	bl	8000b68 <__aeabi_dcmpgt>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	f040 80f9 	bne.w	8012fb4 <_dtoa_r+0x6bc>
 8012dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	4629      	mov	r1, r5
 8012dca:	f7ed fea5 	bl	8000b18 <__aeabi_dcmpeq>
 8012dce:	b118      	cbz	r0, 8012dd8 <_dtoa_r+0x4e0>
 8012dd0:	f018 0f01 	tst.w	r8, #1
 8012dd4:	f040 80ee 	bne.w	8012fb4 <_dtoa_r+0x6bc>
 8012dd8:	4649      	mov	r1, r9
 8012dda:	4658      	mov	r0, fp
 8012ddc:	f000 fc90 	bl	8013700 <_Bfree>
 8012de0:	2300      	movs	r3, #0
 8012de2:	7033      	strb	r3, [r6, #0]
 8012de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012de6:	3701      	adds	r7, #1
 8012de8:	601f      	str	r7, [r3, #0]
 8012dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f000 831d 	beq.w	801342c <_dtoa_r+0xb34>
 8012df2:	601e      	str	r6, [r3, #0]
 8012df4:	e31a      	b.n	801342c <_dtoa_r+0xb34>
 8012df6:	07e2      	lsls	r2, r4, #31
 8012df8:	d505      	bpl.n	8012e06 <_dtoa_r+0x50e>
 8012dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012dfe:	f7ed fc23 	bl	8000648 <__aeabi_dmul>
 8012e02:	3601      	adds	r6, #1
 8012e04:	2301      	movs	r3, #1
 8012e06:	1064      	asrs	r4, r4, #1
 8012e08:	3508      	adds	r5, #8
 8012e0a:	e73f      	b.n	8012c8c <_dtoa_r+0x394>
 8012e0c:	2602      	movs	r6, #2
 8012e0e:	e742      	b.n	8012c96 <_dtoa_r+0x39e>
 8012e10:	9c07      	ldr	r4, [sp, #28]
 8012e12:	9704      	str	r7, [sp, #16]
 8012e14:	e761      	b.n	8012cda <_dtoa_r+0x3e2>
 8012e16:	4b27      	ldr	r3, [pc, #156]	@ (8012eb4 <_dtoa_r+0x5bc>)
 8012e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012e22:	4454      	add	r4, sl
 8012e24:	2900      	cmp	r1, #0
 8012e26:	d053      	beq.n	8012ed0 <_dtoa_r+0x5d8>
 8012e28:	4928      	ldr	r1, [pc, #160]	@ (8012ecc <_dtoa_r+0x5d4>)
 8012e2a:	2000      	movs	r0, #0
 8012e2c:	f7ed fd36 	bl	800089c <__aeabi_ddiv>
 8012e30:	4633      	mov	r3, r6
 8012e32:	462a      	mov	r2, r5
 8012e34:	f7ed fa50 	bl	80002d8 <__aeabi_dsub>
 8012e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012e3c:	4656      	mov	r6, sl
 8012e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e42:	f7ed feb1 	bl	8000ba8 <__aeabi_d2iz>
 8012e46:	4605      	mov	r5, r0
 8012e48:	f7ed fb94 	bl	8000574 <__aeabi_i2d>
 8012e4c:	4602      	mov	r2, r0
 8012e4e:	460b      	mov	r3, r1
 8012e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e54:	f7ed fa40 	bl	80002d8 <__aeabi_dsub>
 8012e58:	3530      	adds	r5, #48	@ 0x30
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e62:	f806 5b01 	strb.w	r5, [r6], #1
 8012e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012e6a:	f7ed fe5f 	bl	8000b2c <__aeabi_dcmplt>
 8012e6e:	2800      	cmp	r0, #0
 8012e70:	d171      	bne.n	8012f56 <_dtoa_r+0x65e>
 8012e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e76:	4911      	ldr	r1, [pc, #68]	@ (8012ebc <_dtoa_r+0x5c4>)
 8012e78:	2000      	movs	r0, #0
 8012e7a:	f7ed fa2d 	bl	80002d8 <__aeabi_dsub>
 8012e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012e82:	f7ed fe53 	bl	8000b2c <__aeabi_dcmplt>
 8012e86:	2800      	cmp	r0, #0
 8012e88:	f040 8095 	bne.w	8012fb6 <_dtoa_r+0x6be>
 8012e8c:	42a6      	cmp	r6, r4
 8012e8e:	f43f af50 	beq.w	8012d32 <_dtoa_r+0x43a>
 8012e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012e96:	4b0a      	ldr	r3, [pc, #40]	@ (8012ec0 <_dtoa_r+0x5c8>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f7ed fbd5 	bl	8000648 <__aeabi_dmul>
 8012e9e:	4b08      	ldr	r3, [pc, #32]	@ (8012ec0 <_dtoa_r+0x5c8>)
 8012ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eaa:	f7ed fbcd 	bl	8000648 <__aeabi_dmul>
 8012eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eb2:	e7c4      	b.n	8012e3e <_dtoa_r+0x546>
 8012eb4:	08015c00 	.word	0x08015c00
 8012eb8:	08015bd8 	.word	0x08015bd8
 8012ebc:	3ff00000 	.word	0x3ff00000
 8012ec0:	40240000 	.word	0x40240000
 8012ec4:	401c0000 	.word	0x401c0000
 8012ec8:	40140000 	.word	0x40140000
 8012ecc:	3fe00000 	.word	0x3fe00000
 8012ed0:	4631      	mov	r1, r6
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	f7ed fbb8 	bl	8000648 <__aeabi_dmul>
 8012ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8012ede:	4656      	mov	r6, sl
 8012ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ee4:	f7ed fe60 	bl	8000ba8 <__aeabi_d2iz>
 8012ee8:	4605      	mov	r5, r0
 8012eea:	f7ed fb43 	bl	8000574 <__aeabi_i2d>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	460b      	mov	r3, r1
 8012ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ef6:	f7ed f9ef 	bl	80002d8 <__aeabi_dsub>
 8012efa:	3530      	adds	r5, #48	@ 0x30
 8012efc:	f806 5b01 	strb.w	r5, [r6], #1
 8012f00:	4602      	mov	r2, r0
 8012f02:	460b      	mov	r3, r1
 8012f04:	42a6      	cmp	r6, r4
 8012f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f0a:	f04f 0200 	mov.w	r2, #0
 8012f0e:	d124      	bne.n	8012f5a <_dtoa_r+0x662>
 8012f10:	4bac      	ldr	r3, [pc, #688]	@ (80131c4 <_dtoa_r+0x8cc>)
 8012f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012f16:	f7ed f9e1 	bl	80002dc <__adddf3>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f22:	f7ed fe21 	bl	8000b68 <__aeabi_dcmpgt>
 8012f26:	2800      	cmp	r0, #0
 8012f28:	d145      	bne.n	8012fb6 <_dtoa_r+0x6be>
 8012f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012f2e:	49a5      	ldr	r1, [pc, #660]	@ (80131c4 <_dtoa_r+0x8cc>)
 8012f30:	2000      	movs	r0, #0
 8012f32:	f7ed f9d1 	bl	80002d8 <__aeabi_dsub>
 8012f36:	4602      	mov	r2, r0
 8012f38:	460b      	mov	r3, r1
 8012f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f3e:	f7ed fdf5 	bl	8000b2c <__aeabi_dcmplt>
 8012f42:	2800      	cmp	r0, #0
 8012f44:	f43f aef5 	beq.w	8012d32 <_dtoa_r+0x43a>
 8012f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012f4a:	1e73      	subs	r3, r6, #1
 8012f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8012f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f52:	2b30      	cmp	r3, #48	@ 0x30
 8012f54:	d0f8      	beq.n	8012f48 <_dtoa_r+0x650>
 8012f56:	9f04      	ldr	r7, [sp, #16]
 8012f58:	e73e      	b.n	8012dd8 <_dtoa_r+0x4e0>
 8012f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80131c8 <_dtoa_r+0x8d0>)
 8012f5c:	f7ed fb74 	bl	8000648 <__aeabi_dmul>
 8012f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f64:	e7bc      	b.n	8012ee0 <_dtoa_r+0x5e8>
 8012f66:	d10c      	bne.n	8012f82 <_dtoa_r+0x68a>
 8012f68:	4b98      	ldr	r3, [pc, #608]	@ (80131cc <_dtoa_r+0x8d4>)
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f70:	f7ed fb6a 	bl	8000648 <__aeabi_dmul>
 8012f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f78:	f7ed fdec 	bl	8000b54 <__aeabi_dcmpge>
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	f000 8157 	beq.w	8013230 <_dtoa_r+0x938>
 8012f82:	2400      	movs	r4, #0
 8012f84:	4625      	mov	r5, r4
 8012f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f88:	43db      	mvns	r3, r3
 8012f8a:	9304      	str	r3, [sp, #16]
 8012f8c:	4656      	mov	r6, sl
 8012f8e:	2700      	movs	r7, #0
 8012f90:	4621      	mov	r1, r4
 8012f92:	4658      	mov	r0, fp
 8012f94:	f000 fbb4 	bl	8013700 <_Bfree>
 8012f98:	2d00      	cmp	r5, #0
 8012f9a:	d0dc      	beq.n	8012f56 <_dtoa_r+0x65e>
 8012f9c:	b12f      	cbz	r7, 8012faa <_dtoa_r+0x6b2>
 8012f9e:	42af      	cmp	r7, r5
 8012fa0:	d003      	beq.n	8012faa <_dtoa_r+0x6b2>
 8012fa2:	4639      	mov	r1, r7
 8012fa4:	4658      	mov	r0, fp
 8012fa6:	f000 fbab 	bl	8013700 <_Bfree>
 8012faa:	4629      	mov	r1, r5
 8012fac:	4658      	mov	r0, fp
 8012fae:	f000 fba7 	bl	8013700 <_Bfree>
 8012fb2:	e7d0      	b.n	8012f56 <_dtoa_r+0x65e>
 8012fb4:	9704      	str	r7, [sp, #16]
 8012fb6:	4633      	mov	r3, r6
 8012fb8:	461e      	mov	r6, r3
 8012fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fbe:	2a39      	cmp	r2, #57	@ 0x39
 8012fc0:	d107      	bne.n	8012fd2 <_dtoa_r+0x6da>
 8012fc2:	459a      	cmp	sl, r3
 8012fc4:	d1f8      	bne.n	8012fb8 <_dtoa_r+0x6c0>
 8012fc6:	9a04      	ldr	r2, [sp, #16]
 8012fc8:	3201      	adds	r2, #1
 8012fca:	9204      	str	r2, [sp, #16]
 8012fcc:	2230      	movs	r2, #48	@ 0x30
 8012fce:	f88a 2000 	strb.w	r2, [sl]
 8012fd2:	781a      	ldrb	r2, [r3, #0]
 8012fd4:	3201      	adds	r2, #1
 8012fd6:	701a      	strb	r2, [r3, #0]
 8012fd8:	e7bd      	b.n	8012f56 <_dtoa_r+0x65e>
 8012fda:	4b7b      	ldr	r3, [pc, #492]	@ (80131c8 <_dtoa_r+0x8d0>)
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f7ed fb33 	bl	8000648 <__aeabi_dmul>
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	460d      	mov	r5, r1
 8012fea:	f7ed fd95 	bl	8000b18 <__aeabi_dcmpeq>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	f43f aebb 	beq.w	8012d6a <_dtoa_r+0x472>
 8012ff4:	e6f0      	b.n	8012dd8 <_dtoa_r+0x4e0>
 8012ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ff8:	2a00      	cmp	r2, #0
 8012ffa:	f000 80db 	beq.w	80131b4 <_dtoa_r+0x8bc>
 8012ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013000:	2a01      	cmp	r2, #1
 8013002:	f300 80bf 	bgt.w	8013184 <_dtoa_r+0x88c>
 8013006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013008:	2a00      	cmp	r2, #0
 801300a:	f000 80b7 	beq.w	801317c <_dtoa_r+0x884>
 801300e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013014:	4646      	mov	r6, r8
 8013016:	9a08      	ldr	r2, [sp, #32]
 8013018:	2101      	movs	r1, #1
 801301a:	441a      	add	r2, r3
 801301c:	4658      	mov	r0, fp
 801301e:	4498      	add	r8, r3
 8013020:	9208      	str	r2, [sp, #32]
 8013022:	f000 fc21 	bl	8013868 <__i2b>
 8013026:	4605      	mov	r5, r0
 8013028:	b15e      	cbz	r6, 8013042 <_dtoa_r+0x74a>
 801302a:	9b08      	ldr	r3, [sp, #32]
 801302c:	2b00      	cmp	r3, #0
 801302e:	dd08      	ble.n	8013042 <_dtoa_r+0x74a>
 8013030:	42b3      	cmp	r3, r6
 8013032:	9a08      	ldr	r2, [sp, #32]
 8013034:	bfa8      	it	ge
 8013036:	4633      	movge	r3, r6
 8013038:	eba8 0803 	sub.w	r8, r8, r3
 801303c:	1af6      	subs	r6, r6, r3
 801303e:	1ad3      	subs	r3, r2, r3
 8013040:	9308      	str	r3, [sp, #32]
 8013042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013044:	b1f3      	cbz	r3, 8013084 <_dtoa_r+0x78c>
 8013046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013048:	2b00      	cmp	r3, #0
 801304a:	f000 80b7 	beq.w	80131bc <_dtoa_r+0x8c4>
 801304e:	b18c      	cbz	r4, 8013074 <_dtoa_r+0x77c>
 8013050:	4629      	mov	r1, r5
 8013052:	4622      	mov	r2, r4
 8013054:	4658      	mov	r0, fp
 8013056:	f000 fcc7 	bl	80139e8 <__pow5mult>
 801305a:	464a      	mov	r2, r9
 801305c:	4601      	mov	r1, r0
 801305e:	4605      	mov	r5, r0
 8013060:	4658      	mov	r0, fp
 8013062:	f000 fc17 	bl	8013894 <__multiply>
 8013066:	4649      	mov	r1, r9
 8013068:	9004      	str	r0, [sp, #16]
 801306a:	4658      	mov	r0, fp
 801306c:	f000 fb48 	bl	8013700 <_Bfree>
 8013070:	9b04      	ldr	r3, [sp, #16]
 8013072:	4699      	mov	r9, r3
 8013074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013076:	1b1a      	subs	r2, r3, r4
 8013078:	d004      	beq.n	8013084 <_dtoa_r+0x78c>
 801307a:	4649      	mov	r1, r9
 801307c:	4658      	mov	r0, fp
 801307e:	f000 fcb3 	bl	80139e8 <__pow5mult>
 8013082:	4681      	mov	r9, r0
 8013084:	2101      	movs	r1, #1
 8013086:	4658      	mov	r0, fp
 8013088:	f000 fbee 	bl	8013868 <__i2b>
 801308c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801308e:	4604      	mov	r4, r0
 8013090:	2b00      	cmp	r3, #0
 8013092:	f000 81cf 	beq.w	8013434 <_dtoa_r+0xb3c>
 8013096:	461a      	mov	r2, r3
 8013098:	4601      	mov	r1, r0
 801309a:	4658      	mov	r0, fp
 801309c:	f000 fca4 	bl	80139e8 <__pow5mult>
 80130a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	4604      	mov	r4, r0
 80130a6:	f300 8095 	bgt.w	80131d4 <_dtoa_r+0x8dc>
 80130aa:	9b02      	ldr	r3, [sp, #8]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f040 8087 	bne.w	80131c0 <_dtoa_r+0x8c8>
 80130b2:	9b03      	ldr	r3, [sp, #12]
 80130b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f040 8089 	bne.w	80131d0 <_dtoa_r+0x8d8>
 80130be:	9b03      	ldr	r3, [sp, #12]
 80130c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80130c4:	0d1b      	lsrs	r3, r3, #20
 80130c6:	051b      	lsls	r3, r3, #20
 80130c8:	b12b      	cbz	r3, 80130d6 <_dtoa_r+0x7de>
 80130ca:	9b08      	ldr	r3, [sp, #32]
 80130cc:	3301      	adds	r3, #1
 80130ce:	9308      	str	r3, [sp, #32]
 80130d0:	f108 0801 	add.w	r8, r8, #1
 80130d4:	2301      	movs	r3, #1
 80130d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80130d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130da:	2b00      	cmp	r3, #0
 80130dc:	f000 81b0 	beq.w	8013440 <_dtoa_r+0xb48>
 80130e0:	6923      	ldr	r3, [r4, #16]
 80130e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80130e6:	6918      	ldr	r0, [r3, #16]
 80130e8:	f000 fb72 	bl	80137d0 <__hi0bits>
 80130ec:	f1c0 0020 	rsb	r0, r0, #32
 80130f0:	9b08      	ldr	r3, [sp, #32]
 80130f2:	4418      	add	r0, r3
 80130f4:	f010 001f 	ands.w	r0, r0, #31
 80130f8:	d077      	beq.n	80131ea <_dtoa_r+0x8f2>
 80130fa:	f1c0 0320 	rsb	r3, r0, #32
 80130fe:	2b04      	cmp	r3, #4
 8013100:	dd6b      	ble.n	80131da <_dtoa_r+0x8e2>
 8013102:	9b08      	ldr	r3, [sp, #32]
 8013104:	f1c0 001c 	rsb	r0, r0, #28
 8013108:	4403      	add	r3, r0
 801310a:	4480      	add	r8, r0
 801310c:	4406      	add	r6, r0
 801310e:	9308      	str	r3, [sp, #32]
 8013110:	f1b8 0f00 	cmp.w	r8, #0
 8013114:	dd05      	ble.n	8013122 <_dtoa_r+0x82a>
 8013116:	4649      	mov	r1, r9
 8013118:	4642      	mov	r2, r8
 801311a:	4658      	mov	r0, fp
 801311c:	f000 fcbe 	bl	8013a9c <__lshift>
 8013120:	4681      	mov	r9, r0
 8013122:	9b08      	ldr	r3, [sp, #32]
 8013124:	2b00      	cmp	r3, #0
 8013126:	dd05      	ble.n	8013134 <_dtoa_r+0x83c>
 8013128:	4621      	mov	r1, r4
 801312a:	461a      	mov	r2, r3
 801312c:	4658      	mov	r0, fp
 801312e:	f000 fcb5 	bl	8013a9c <__lshift>
 8013132:	4604      	mov	r4, r0
 8013134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013136:	2b00      	cmp	r3, #0
 8013138:	d059      	beq.n	80131ee <_dtoa_r+0x8f6>
 801313a:	4621      	mov	r1, r4
 801313c:	4648      	mov	r0, r9
 801313e:	f000 fd19 	bl	8013b74 <__mcmp>
 8013142:	2800      	cmp	r0, #0
 8013144:	da53      	bge.n	80131ee <_dtoa_r+0x8f6>
 8013146:	1e7b      	subs	r3, r7, #1
 8013148:	9304      	str	r3, [sp, #16]
 801314a:	4649      	mov	r1, r9
 801314c:	2300      	movs	r3, #0
 801314e:	220a      	movs	r2, #10
 8013150:	4658      	mov	r0, fp
 8013152:	f000 faf7 	bl	8013744 <__multadd>
 8013156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013158:	4681      	mov	r9, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	f000 8172 	beq.w	8013444 <_dtoa_r+0xb4c>
 8013160:	2300      	movs	r3, #0
 8013162:	4629      	mov	r1, r5
 8013164:	220a      	movs	r2, #10
 8013166:	4658      	mov	r0, fp
 8013168:	f000 faec 	bl	8013744 <__multadd>
 801316c:	9b00      	ldr	r3, [sp, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	4605      	mov	r5, r0
 8013172:	dc67      	bgt.n	8013244 <_dtoa_r+0x94c>
 8013174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013176:	2b02      	cmp	r3, #2
 8013178:	dc41      	bgt.n	80131fe <_dtoa_r+0x906>
 801317a:	e063      	b.n	8013244 <_dtoa_r+0x94c>
 801317c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801317e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013182:	e746      	b.n	8013012 <_dtoa_r+0x71a>
 8013184:	9b07      	ldr	r3, [sp, #28]
 8013186:	1e5c      	subs	r4, r3, #1
 8013188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801318a:	42a3      	cmp	r3, r4
 801318c:	bfbf      	itttt	lt
 801318e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013194:	1ae3      	sublt	r3, r4, r3
 8013196:	bfb4      	ite	lt
 8013198:	18d2      	addlt	r2, r2, r3
 801319a:	1b1c      	subge	r4, r3, r4
 801319c:	9b07      	ldr	r3, [sp, #28]
 801319e:	bfbc      	itt	lt
 80131a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80131a2:	2400      	movlt	r4, #0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	bfb5      	itete	lt
 80131a8:	eba8 0603 	sublt.w	r6, r8, r3
 80131ac:	9b07      	ldrge	r3, [sp, #28]
 80131ae:	2300      	movlt	r3, #0
 80131b0:	4646      	movge	r6, r8
 80131b2:	e730      	b.n	8013016 <_dtoa_r+0x71e>
 80131b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80131b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80131b8:	4646      	mov	r6, r8
 80131ba:	e735      	b.n	8013028 <_dtoa_r+0x730>
 80131bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80131be:	e75c      	b.n	801307a <_dtoa_r+0x782>
 80131c0:	2300      	movs	r3, #0
 80131c2:	e788      	b.n	80130d6 <_dtoa_r+0x7de>
 80131c4:	3fe00000 	.word	0x3fe00000
 80131c8:	40240000 	.word	0x40240000
 80131cc:	40140000 	.word	0x40140000
 80131d0:	9b02      	ldr	r3, [sp, #8]
 80131d2:	e780      	b.n	80130d6 <_dtoa_r+0x7de>
 80131d4:	2300      	movs	r3, #0
 80131d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80131d8:	e782      	b.n	80130e0 <_dtoa_r+0x7e8>
 80131da:	d099      	beq.n	8013110 <_dtoa_r+0x818>
 80131dc:	9a08      	ldr	r2, [sp, #32]
 80131de:	331c      	adds	r3, #28
 80131e0:	441a      	add	r2, r3
 80131e2:	4498      	add	r8, r3
 80131e4:	441e      	add	r6, r3
 80131e6:	9208      	str	r2, [sp, #32]
 80131e8:	e792      	b.n	8013110 <_dtoa_r+0x818>
 80131ea:	4603      	mov	r3, r0
 80131ec:	e7f6      	b.n	80131dc <_dtoa_r+0x8e4>
 80131ee:	9b07      	ldr	r3, [sp, #28]
 80131f0:	9704      	str	r7, [sp, #16]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	dc20      	bgt.n	8013238 <_dtoa_r+0x940>
 80131f6:	9300      	str	r3, [sp, #0]
 80131f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131fa:	2b02      	cmp	r3, #2
 80131fc:	dd1e      	ble.n	801323c <_dtoa_r+0x944>
 80131fe:	9b00      	ldr	r3, [sp, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	f47f aec0 	bne.w	8012f86 <_dtoa_r+0x68e>
 8013206:	4621      	mov	r1, r4
 8013208:	2205      	movs	r2, #5
 801320a:	4658      	mov	r0, fp
 801320c:	f000 fa9a 	bl	8013744 <__multadd>
 8013210:	4601      	mov	r1, r0
 8013212:	4604      	mov	r4, r0
 8013214:	4648      	mov	r0, r9
 8013216:	f000 fcad 	bl	8013b74 <__mcmp>
 801321a:	2800      	cmp	r0, #0
 801321c:	f77f aeb3 	ble.w	8012f86 <_dtoa_r+0x68e>
 8013220:	4656      	mov	r6, sl
 8013222:	2331      	movs	r3, #49	@ 0x31
 8013224:	f806 3b01 	strb.w	r3, [r6], #1
 8013228:	9b04      	ldr	r3, [sp, #16]
 801322a:	3301      	adds	r3, #1
 801322c:	9304      	str	r3, [sp, #16]
 801322e:	e6ae      	b.n	8012f8e <_dtoa_r+0x696>
 8013230:	9c07      	ldr	r4, [sp, #28]
 8013232:	9704      	str	r7, [sp, #16]
 8013234:	4625      	mov	r5, r4
 8013236:	e7f3      	b.n	8013220 <_dtoa_r+0x928>
 8013238:	9b07      	ldr	r3, [sp, #28]
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801323e:	2b00      	cmp	r3, #0
 8013240:	f000 8104 	beq.w	801344c <_dtoa_r+0xb54>
 8013244:	2e00      	cmp	r6, #0
 8013246:	dd05      	ble.n	8013254 <_dtoa_r+0x95c>
 8013248:	4629      	mov	r1, r5
 801324a:	4632      	mov	r2, r6
 801324c:	4658      	mov	r0, fp
 801324e:	f000 fc25 	bl	8013a9c <__lshift>
 8013252:	4605      	mov	r5, r0
 8013254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013256:	2b00      	cmp	r3, #0
 8013258:	d05a      	beq.n	8013310 <_dtoa_r+0xa18>
 801325a:	6869      	ldr	r1, [r5, #4]
 801325c:	4658      	mov	r0, fp
 801325e:	f000 fa0f 	bl	8013680 <_Balloc>
 8013262:	4606      	mov	r6, r0
 8013264:	b928      	cbnz	r0, 8013272 <_dtoa_r+0x97a>
 8013266:	4b84      	ldr	r3, [pc, #528]	@ (8013478 <_dtoa_r+0xb80>)
 8013268:	4602      	mov	r2, r0
 801326a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801326e:	f7ff bb5a 	b.w	8012926 <_dtoa_r+0x2e>
 8013272:	692a      	ldr	r2, [r5, #16]
 8013274:	3202      	adds	r2, #2
 8013276:	0092      	lsls	r2, r2, #2
 8013278:	f105 010c 	add.w	r1, r5, #12
 801327c:	300c      	adds	r0, #12
 801327e:	f7ff faa4 	bl	80127ca <memcpy>
 8013282:	2201      	movs	r2, #1
 8013284:	4631      	mov	r1, r6
 8013286:	4658      	mov	r0, fp
 8013288:	f000 fc08 	bl	8013a9c <__lshift>
 801328c:	f10a 0301 	add.w	r3, sl, #1
 8013290:	9307      	str	r3, [sp, #28]
 8013292:	9b00      	ldr	r3, [sp, #0]
 8013294:	4453      	add	r3, sl
 8013296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013298:	9b02      	ldr	r3, [sp, #8]
 801329a:	f003 0301 	and.w	r3, r3, #1
 801329e:	462f      	mov	r7, r5
 80132a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80132a2:	4605      	mov	r5, r0
 80132a4:	9b07      	ldr	r3, [sp, #28]
 80132a6:	4621      	mov	r1, r4
 80132a8:	3b01      	subs	r3, #1
 80132aa:	4648      	mov	r0, r9
 80132ac:	9300      	str	r3, [sp, #0]
 80132ae:	f7ff fa9a 	bl	80127e6 <quorem>
 80132b2:	4639      	mov	r1, r7
 80132b4:	9002      	str	r0, [sp, #8]
 80132b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80132ba:	4648      	mov	r0, r9
 80132bc:	f000 fc5a 	bl	8013b74 <__mcmp>
 80132c0:	462a      	mov	r2, r5
 80132c2:	9008      	str	r0, [sp, #32]
 80132c4:	4621      	mov	r1, r4
 80132c6:	4658      	mov	r0, fp
 80132c8:	f000 fc70 	bl	8013bac <__mdiff>
 80132cc:	68c2      	ldr	r2, [r0, #12]
 80132ce:	4606      	mov	r6, r0
 80132d0:	bb02      	cbnz	r2, 8013314 <_dtoa_r+0xa1c>
 80132d2:	4601      	mov	r1, r0
 80132d4:	4648      	mov	r0, r9
 80132d6:	f000 fc4d 	bl	8013b74 <__mcmp>
 80132da:	4602      	mov	r2, r0
 80132dc:	4631      	mov	r1, r6
 80132de:	4658      	mov	r0, fp
 80132e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80132e2:	f000 fa0d 	bl	8013700 <_Bfree>
 80132e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132ea:	9e07      	ldr	r6, [sp, #28]
 80132ec:	ea43 0102 	orr.w	r1, r3, r2
 80132f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132f2:	4319      	orrs	r1, r3
 80132f4:	d110      	bne.n	8013318 <_dtoa_r+0xa20>
 80132f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80132fa:	d029      	beq.n	8013350 <_dtoa_r+0xa58>
 80132fc:	9b08      	ldr	r3, [sp, #32]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	dd02      	ble.n	8013308 <_dtoa_r+0xa10>
 8013302:	9b02      	ldr	r3, [sp, #8]
 8013304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013308:	9b00      	ldr	r3, [sp, #0]
 801330a:	f883 8000 	strb.w	r8, [r3]
 801330e:	e63f      	b.n	8012f90 <_dtoa_r+0x698>
 8013310:	4628      	mov	r0, r5
 8013312:	e7bb      	b.n	801328c <_dtoa_r+0x994>
 8013314:	2201      	movs	r2, #1
 8013316:	e7e1      	b.n	80132dc <_dtoa_r+0x9e4>
 8013318:	9b08      	ldr	r3, [sp, #32]
 801331a:	2b00      	cmp	r3, #0
 801331c:	db04      	blt.n	8013328 <_dtoa_r+0xa30>
 801331e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013320:	430b      	orrs	r3, r1
 8013322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013324:	430b      	orrs	r3, r1
 8013326:	d120      	bne.n	801336a <_dtoa_r+0xa72>
 8013328:	2a00      	cmp	r2, #0
 801332a:	dded      	ble.n	8013308 <_dtoa_r+0xa10>
 801332c:	4649      	mov	r1, r9
 801332e:	2201      	movs	r2, #1
 8013330:	4658      	mov	r0, fp
 8013332:	f000 fbb3 	bl	8013a9c <__lshift>
 8013336:	4621      	mov	r1, r4
 8013338:	4681      	mov	r9, r0
 801333a:	f000 fc1b 	bl	8013b74 <__mcmp>
 801333e:	2800      	cmp	r0, #0
 8013340:	dc03      	bgt.n	801334a <_dtoa_r+0xa52>
 8013342:	d1e1      	bne.n	8013308 <_dtoa_r+0xa10>
 8013344:	f018 0f01 	tst.w	r8, #1
 8013348:	d0de      	beq.n	8013308 <_dtoa_r+0xa10>
 801334a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801334e:	d1d8      	bne.n	8013302 <_dtoa_r+0xa0a>
 8013350:	9a00      	ldr	r2, [sp, #0]
 8013352:	2339      	movs	r3, #57	@ 0x39
 8013354:	7013      	strb	r3, [r2, #0]
 8013356:	4633      	mov	r3, r6
 8013358:	461e      	mov	r6, r3
 801335a:	3b01      	subs	r3, #1
 801335c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013360:	2a39      	cmp	r2, #57	@ 0x39
 8013362:	d052      	beq.n	801340a <_dtoa_r+0xb12>
 8013364:	3201      	adds	r2, #1
 8013366:	701a      	strb	r2, [r3, #0]
 8013368:	e612      	b.n	8012f90 <_dtoa_r+0x698>
 801336a:	2a00      	cmp	r2, #0
 801336c:	dd07      	ble.n	801337e <_dtoa_r+0xa86>
 801336e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013372:	d0ed      	beq.n	8013350 <_dtoa_r+0xa58>
 8013374:	9a00      	ldr	r2, [sp, #0]
 8013376:	f108 0301 	add.w	r3, r8, #1
 801337a:	7013      	strb	r3, [r2, #0]
 801337c:	e608      	b.n	8012f90 <_dtoa_r+0x698>
 801337e:	9b07      	ldr	r3, [sp, #28]
 8013380:	9a07      	ldr	r2, [sp, #28]
 8013382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013388:	4293      	cmp	r3, r2
 801338a:	d028      	beq.n	80133de <_dtoa_r+0xae6>
 801338c:	4649      	mov	r1, r9
 801338e:	2300      	movs	r3, #0
 8013390:	220a      	movs	r2, #10
 8013392:	4658      	mov	r0, fp
 8013394:	f000 f9d6 	bl	8013744 <__multadd>
 8013398:	42af      	cmp	r7, r5
 801339a:	4681      	mov	r9, r0
 801339c:	f04f 0300 	mov.w	r3, #0
 80133a0:	f04f 020a 	mov.w	r2, #10
 80133a4:	4639      	mov	r1, r7
 80133a6:	4658      	mov	r0, fp
 80133a8:	d107      	bne.n	80133ba <_dtoa_r+0xac2>
 80133aa:	f000 f9cb 	bl	8013744 <__multadd>
 80133ae:	4607      	mov	r7, r0
 80133b0:	4605      	mov	r5, r0
 80133b2:	9b07      	ldr	r3, [sp, #28]
 80133b4:	3301      	adds	r3, #1
 80133b6:	9307      	str	r3, [sp, #28]
 80133b8:	e774      	b.n	80132a4 <_dtoa_r+0x9ac>
 80133ba:	f000 f9c3 	bl	8013744 <__multadd>
 80133be:	4629      	mov	r1, r5
 80133c0:	4607      	mov	r7, r0
 80133c2:	2300      	movs	r3, #0
 80133c4:	220a      	movs	r2, #10
 80133c6:	4658      	mov	r0, fp
 80133c8:	f000 f9bc 	bl	8013744 <__multadd>
 80133cc:	4605      	mov	r5, r0
 80133ce:	e7f0      	b.n	80133b2 <_dtoa_r+0xaba>
 80133d0:	9b00      	ldr	r3, [sp, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	bfcc      	ite	gt
 80133d6:	461e      	movgt	r6, r3
 80133d8:	2601      	movle	r6, #1
 80133da:	4456      	add	r6, sl
 80133dc:	2700      	movs	r7, #0
 80133de:	4649      	mov	r1, r9
 80133e0:	2201      	movs	r2, #1
 80133e2:	4658      	mov	r0, fp
 80133e4:	f000 fb5a 	bl	8013a9c <__lshift>
 80133e8:	4621      	mov	r1, r4
 80133ea:	4681      	mov	r9, r0
 80133ec:	f000 fbc2 	bl	8013b74 <__mcmp>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	dcb0      	bgt.n	8013356 <_dtoa_r+0xa5e>
 80133f4:	d102      	bne.n	80133fc <_dtoa_r+0xb04>
 80133f6:	f018 0f01 	tst.w	r8, #1
 80133fa:	d1ac      	bne.n	8013356 <_dtoa_r+0xa5e>
 80133fc:	4633      	mov	r3, r6
 80133fe:	461e      	mov	r6, r3
 8013400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013404:	2a30      	cmp	r2, #48	@ 0x30
 8013406:	d0fa      	beq.n	80133fe <_dtoa_r+0xb06>
 8013408:	e5c2      	b.n	8012f90 <_dtoa_r+0x698>
 801340a:	459a      	cmp	sl, r3
 801340c:	d1a4      	bne.n	8013358 <_dtoa_r+0xa60>
 801340e:	9b04      	ldr	r3, [sp, #16]
 8013410:	3301      	adds	r3, #1
 8013412:	9304      	str	r3, [sp, #16]
 8013414:	2331      	movs	r3, #49	@ 0x31
 8013416:	f88a 3000 	strb.w	r3, [sl]
 801341a:	e5b9      	b.n	8012f90 <_dtoa_r+0x698>
 801341c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801341e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801347c <_dtoa_r+0xb84>
 8013422:	b11b      	cbz	r3, 801342c <_dtoa_r+0xb34>
 8013424:	f10a 0308 	add.w	r3, sl, #8
 8013428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801342a:	6013      	str	r3, [r2, #0]
 801342c:	4650      	mov	r0, sl
 801342e:	b019      	add	sp, #100	@ 0x64
 8013430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013436:	2b01      	cmp	r3, #1
 8013438:	f77f ae37 	ble.w	80130aa <_dtoa_r+0x7b2>
 801343c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801343e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013440:	2001      	movs	r0, #1
 8013442:	e655      	b.n	80130f0 <_dtoa_r+0x7f8>
 8013444:	9b00      	ldr	r3, [sp, #0]
 8013446:	2b00      	cmp	r3, #0
 8013448:	f77f aed6 	ble.w	80131f8 <_dtoa_r+0x900>
 801344c:	4656      	mov	r6, sl
 801344e:	4621      	mov	r1, r4
 8013450:	4648      	mov	r0, r9
 8013452:	f7ff f9c8 	bl	80127e6 <quorem>
 8013456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801345a:	f806 8b01 	strb.w	r8, [r6], #1
 801345e:	9b00      	ldr	r3, [sp, #0]
 8013460:	eba6 020a 	sub.w	r2, r6, sl
 8013464:	4293      	cmp	r3, r2
 8013466:	ddb3      	ble.n	80133d0 <_dtoa_r+0xad8>
 8013468:	4649      	mov	r1, r9
 801346a:	2300      	movs	r3, #0
 801346c:	220a      	movs	r2, #10
 801346e:	4658      	mov	r0, fp
 8013470:	f000 f968 	bl	8013744 <__multadd>
 8013474:	4681      	mov	r9, r0
 8013476:	e7ea      	b.n	801344e <_dtoa_r+0xb56>
 8013478:	08015b5c 	.word	0x08015b5c
 801347c:	08015ae0 	.word	0x08015ae0

08013480 <_free_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	4605      	mov	r5, r0
 8013484:	2900      	cmp	r1, #0
 8013486:	d041      	beq.n	801350c <_free_r+0x8c>
 8013488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801348c:	1f0c      	subs	r4, r1, #4
 801348e:	2b00      	cmp	r3, #0
 8013490:	bfb8      	it	lt
 8013492:	18e4      	addlt	r4, r4, r3
 8013494:	f000 f8e8 	bl	8013668 <__malloc_lock>
 8013498:	4a1d      	ldr	r2, [pc, #116]	@ (8013510 <_free_r+0x90>)
 801349a:	6813      	ldr	r3, [r2, #0]
 801349c:	b933      	cbnz	r3, 80134ac <_free_r+0x2c>
 801349e:	6063      	str	r3, [r4, #4]
 80134a0:	6014      	str	r4, [r2, #0]
 80134a2:	4628      	mov	r0, r5
 80134a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134a8:	f000 b8e4 	b.w	8013674 <__malloc_unlock>
 80134ac:	42a3      	cmp	r3, r4
 80134ae:	d908      	bls.n	80134c2 <_free_r+0x42>
 80134b0:	6820      	ldr	r0, [r4, #0]
 80134b2:	1821      	adds	r1, r4, r0
 80134b4:	428b      	cmp	r3, r1
 80134b6:	bf01      	itttt	eq
 80134b8:	6819      	ldreq	r1, [r3, #0]
 80134ba:	685b      	ldreq	r3, [r3, #4]
 80134bc:	1809      	addeq	r1, r1, r0
 80134be:	6021      	streq	r1, [r4, #0]
 80134c0:	e7ed      	b.n	801349e <_free_r+0x1e>
 80134c2:	461a      	mov	r2, r3
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	b10b      	cbz	r3, 80134cc <_free_r+0x4c>
 80134c8:	42a3      	cmp	r3, r4
 80134ca:	d9fa      	bls.n	80134c2 <_free_r+0x42>
 80134cc:	6811      	ldr	r1, [r2, #0]
 80134ce:	1850      	adds	r0, r2, r1
 80134d0:	42a0      	cmp	r0, r4
 80134d2:	d10b      	bne.n	80134ec <_free_r+0x6c>
 80134d4:	6820      	ldr	r0, [r4, #0]
 80134d6:	4401      	add	r1, r0
 80134d8:	1850      	adds	r0, r2, r1
 80134da:	4283      	cmp	r3, r0
 80134dc:	6011      	str	r1, [r2, #0]
 80134de:	d1e0      	bne.n	80134a2 <_free_r+0x22>
 80134e0:	6818      	ldr	r0, [r3, #0]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	6053      	str	r3, [r2, #4]
 80134e6:	4408      	add	r0, r1
 80134e8:	6010      	str	r0, [r2, #0]
 80134ea:	e7da      	b.n	80134a2 <_free_r+0x22>
 80134ec:	d902      	bls.n	80134f4 <_free_r+0x74>
 80134ee:	230c      	movs	r3, #12
 80134f0:	602b      	str	r3, [r5, #0]
 80134f2:	e7d6      	b.n	80134a2 <_free_r+0x22>
 80134f4:	6820      	ldr	r0, [r4, #0]
 80134f6:	1821      	adds	r1, r4, r0
 80134f8:	428b      	cmp	r3, r1
 80134fa:	bf04      	itt	eq
 80134fc:	6819      	ldreq	r1, [r3, #0]
 80134fe:	685b      	ldreq	r3, [r3, #4]
 8013500:	6063      	str	r3, [r4, #4]
 8013502:	bf04      	itt	eq
 8013504:	1809      	addeq	r1, r1, r0
 8013506:	6021      	streq	r1, [r4, #0]
 8013508:	6054      	str	r4, [r2, #4]
 801350a:	e7ca      	b.n	80134a2 <_free_r+0x22>
 801350c:	bd38      	pop	{r3, r4, r5, pc}
 801350e:	bf00      	nop
 8013510:	2000600c 	.word	0x2000600c

08013514 <malloc>:
 8013514:	4b02      	ldr	r3, [pc, #8]	@ (8013520 <malloc+0xc>)
 8013516:	4601      	mov	r1, r0
 8013518:	6818      	ldr	r0, [r3, #0]
 801351a:	f000 b825 	b.w	8013568 <_malloc_r>
 801351e:	bf00      	nop
 8013520:	20000194 	.word	0x20000194

08013524 <sbrk_aligned>:
 8013524:	b570      	push	{r4, r5, r6, lr}
 8013526:	4e0f      	ldr	r6, [pc, #60]	@ (8013564 <sbrk_aligned+0x40>)
 8013528:	460c      	mov	r4, r1
 801352a:	6831      	ldr	r1, [r6, #0]
 801352c:	4605      	mov	r5, r0
 801352e:	b911      	cbnz	r1, 8013536 <sbrk_aligned+0x12>
 8013530:	f000 fe46 	bl	80141c0 <_sbrk_r>
 8013534:	6030      	str	r0, [r6, #0]
 8013536:	4621      	mov	r1, r4
 8013538:	4628      	mov	r0, r5
 801353a:	f000 fe41 	bl	80141c0 <_sbrk_r>
 801353e:	1c43      	adds	r3, r0, #1
 8013540:	d103      	bne.n	801354a <sbrk_aligned+0x26>
 8013542:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013546:	4620      	mov	r0, r4
 8013548:	bd70      	pop	{r4, r5, r6, pc}
 801354a:	1cc4      	adds	r4, r0, #3
 801354c:	f024 0403 	bic.w	r4, r4, #3
 8013550:	42a0      	cmp	r0, r4
 8013552:	d0f8      	beq.n	8013546 <sbrk_aligned+0x22>
 8013554:	1a21      	subs	r1, r4, r0
 8013556:	4628      	mov	r0, r5
 8013558:	f000 fe32 	bl	80141c0 <_sbrk_r>
 801355c:	3001      	adds	r0, #1
 801355e:	d1f2      	bne.n	8013546 <sbrk_aligned+0x22>
 8013560:	e7ef      	b.n	8013542 <sbrk_aligned+0x1e>
 8013562:	bf00      	nop
 8013564:	20006008 	.word	0x20006008

08013568 <_malloc_r>:
 8013568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801356c:	1ccd      	adds	r5, r1, #3
 801356e:	f025 0503 	bic.w	r5, r5, #3
 8013572:	3508      	adds	r5, #8
 8013574:	2d0c      	cmp	r5, #12
 8013576:	bf38      	it	cc
 8013578:	250c      	movcc	r5, #12
 801357a:	2d00      	cmp	r5, #0
 801357c:	4606      	mov	r6, r0
 801357e:	db01      	blt.n	8013584 <_malloc_r+0x1c>
 8013580:	42a9      	cmp	r1, r5
 8013582:	d904      	bls.n	801358e <_malloc_r+0x26>
 8013584:	230c      	movs	r3, #12
 8013586:	6033      	str	r3, [r6, #0]
 8013588:	2000      	movs	r0, #0
 801358a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801358e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013664 <_malloc_r+0xfc>
 8013592:	f000 f869 	bl	8013668 <__malloc_lock>
 8013596:	f8d8 3000 	ldr.w	r3, [r8]
 801359a:	461c      	mov	r4, r3
 801359c:	bb44      	cbnz	r4, 80135f0 <_malloc_r+0x88>
 801359e:	4629      	mov	r1, r5
 80135a0:	4630      	mov	r0, r6
 80135a2:	f7ff ffbf 	bl	8013524 <sbrk_aligned>
 80135a6:	1c43      	adds	r3, r0, #1
 80135a8:	4604      	mov	r4, r0
 80135aa:	d158      	bne.n	801365e <_malloc_r+0xf6>
 80135ac:	f8d8 4000 	ldr.w	r4, [r8]
 80135b0:	4627      	mov	r7, r4
 80135b2:	2f00      	cmp	r7, #0
 80135b4:	d143      	bne.n	801363e <_malloc_r+0xd6>
 80135b6:	2c00      	cmp	r4, #0
 80135b8:	d04b      	beq.n	8013652 <_malloc_r+0xea>
 80135ba:	6823      	ldr	r3, [r4, #0]
 80135bc:	4639      	mov	r1, r7
 80135be:	4630      	mov	r0, r6
 80135c0:	eb04 0903 	add.w	r9, r4, r3
 80135c4:	f000 fdfc 	bl	80141c0 <_sbrk_r>
 80135c8:	4581      	cmp	r9, r0
 80135ca:	d142      	bne.n	8013652 <_malloc_r+0xea>
 80135cc:	6821      	ldr	r1, [r4, #0]
 80135ce:	1a6d      	subs	r5, r5, r1
 80135d0:	4629      	mov	r1, r5
 80135d2:	4630      	mov	r0, r6
 80135d4:	f7ff ffa6 	bl	8013524 <sbrk_aligned>
 80135d8:	3001      	adds	r0, #1
 80135da:	d03a      	beq.n	8013652 <_malloc_r+0xea>
 80135dc:	6823      	ldr	r3, [r4, #0]
 80135de:	442b      	add	r3, r5
 80135e0:	6023      	str	r3, [r4, #0]
 80135e2:	f8d8 3000 	ldr.w	r3, [r8]
 80135e6:	685a      	ldr	r2, [r3, #4]
 80135e8:	bb62      	cbnz	r2, 8013644 <_malloc_r+0xdc>
 80135ea:	f8c8 7000 	str.w	r7, [r8]
 80135ee:	e00f      	b.n	8013610 <_malloc_r+0xa8>
 80135f0:	6822      	ldr	r2, [r4, #0]
 80135f2:	1b52      	subs	r2, r2, r5
 80135f4:	d420      	bmi.n	8013638 <_malloc_r+0xd0>
 80135f6:	2a0b      	cmp	r2, #11
 80135f8:	d917      	bls.n	801362a <_malloc_r+0xc2>
 80135fa:	1961      	adds	r1, r4, r5
 80135fc:	42a3      	cmp	r3, r4
 80135fe:	6025      	str	r5, [r4, #0]
 8013600:	bf18      	it	ne
 8013602:	6059      	strne	r1, [r3, #4]
 8013604:	6863      	ldr	r3, [r4, #4]
 8013606:	bf08      	it	eq
 8013608:	f8c8 1000 	streq.w	r1, [r8]
 801360c:	5162      	str	r2, [r4, r5]
 801360e:	604b      	str	r3, [r1, #4]
 8013610:	4630      	mov	r0, r6
 8013612:	f000 f82f 	bl	8013674 <__malloc_unlock>
 8013616:	f104 000b 	add.w	r0, r4, #11
 801361a:	1d23      	adds	r3, r4, #4
 801361c:	f020 0007 	bic.w	r0, r0, #7
 8013620:	1ac2      	subs	r2, r0, r3
 8013622:	bf1c      	itt	ne
 8013624:	1a1b      	subne	r3, r3, r0
 8013626:	50a3      	strne	r3, [r4, r2]
 8013628:	e7af      	b.n	801358a <_malloc_r+0x22>
 801362a:	6862      	ldr	r2, [r4, #4]
 801362c:	42a3      	cmp	r3, r4
 801362e:	bf0c      	ite	eq
 8013630:	f8c8 2000 	streq.w	r2, [r8]
 8013634:	605a      	strne	r2, [r3, #4]
 8013636:	e7eb      	b.n	8013610 <_malloc_r+0xa8>
 8013638:	4623      	mov	r3, r4
 801363a:	6864      	ldr	r4, [r4, #4]
 801363c:	e7ae      	b.n	801359c <_malloc_r+0x34>
 801363e:	463c      	mov	r4, r7
 8013640:	687f      	ldr	r7, [r7, #4]
 8013642:	e7b6      	b.n	80135b2 <_malloc_r+0x4a>
 8013644:	461a      	mov	r2, r3
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	42a3      	cmp	r3, r4
 801364a:	d1fb      	bne.n	8013644 <_malloc_r+0xdc>
 801364c:	2300      	movs	r3, #0
 801364e:	6053      	str	r3, [r2, #4]
 8013650:	e7de      	b.n	8013610 <_malloc_r+0xa8>
 8013652:	230c      	movs	r3, #12
 8013654:	6033      	str	r3, [r6, #0]
 8013656:	4630      	mov	r0, r6
 8013658:	f000 f80c 	bl	8013674 <__malloc_unlock>
 801365c:	e794      	b.n	8013588 <_malloc_r+0x20>
 801365e:	6005      	str	r5, [r0, #0]
 8013660:	e7d6      	b.n	8013610 <_malloc_r+0xa8>
 8013662:	bf00      	nop
 8013664:	2000600c 	.word	0x2000600c

08013668 <__malloc_lock>:
 8013668:	4801      	ldr	r0, [pc, #4]	@ (8013670 <__malloc_lock+0x8>)
 801366a:	f7ff b8ac 	b.w	80127c6 <__retarget_lock_acquire_recursive>
 801366e:	bf00      	nop
 8013670:	20006004 	.word	0x20006004

08013674 <__malloc_unlock>:
 8013674:	4801      	ldr	r0, [pc, #4]	@ (801367c <__malloc_unlock+0x8>)
 8013676:	f7ff b8a7 	b.w	80127c8 <__retarget_lock_release_recursive>
 801367a:	bf00      	nop
 801367c:	20006004 	.word	0x20006004

08013680 <_Balloc>:
 8013680:	b570      	push	{r4, r5, r6, lr}
 8013682:	69c6      	ldr	r6, [r0, #28]
 8013684:	4604      	mov	r4, r0
 8013686:	460d      	mov	r5, r1
 8013688:	b976      	cbnz	r6, 80136a8 <_Balloc+0x28>
 801368a:	2010      	movs	r0, #16
 801368c:	f7ff ff42 	bl	8013514 <malloc>
 8013690:	4602      	mov	r2, r0
 8013692:	61e0      	str	r0, [r4, #28]
 8013694:	b920      	cbnz	r0, 80136a0 <_Balloc+0x20>
 8013696:	4b18      	ldr	r3, [pc, #96]	@ (80136f8 <_Balloc+0x78>)
 8013698:	4818      	ldr	r0, [pc, #96]	@ (80136fc <_Balloc+0x7c>)
 801369a:	216b      	movs	r1, #107	@ 0x6b
 801369c:	f000 fda0 	bl	80141e0 <__assert_func>
 80136a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136a4:	6006      	str	r6, [r0, #0]
 80136a6:	60c6      	str	r6, [r0, #12]
 80136a8:	69e6      	ldr	r6, [r4, #28]
 80136aa:	68f3      	ldr	r3, [r6, #12]
 80136ac:	b183      	cbz	r3, 80136d0 <_Balloc+0x50>
 80136ae:	69e3      	ldr	r3, [r4, #28]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80136b6:	b9b8      	cbnz	r0, 80136e8 <_Balloc+0x68>
 80136b8:	2101      	movs	r1, #1
 80136ba:	fa01 f605 	lsl.w	r6, r1, r5
 80136be:	1d72      	adds	r2, r6, #5
 80136c0:	0092      	lsls	r2, r2, #2
 80136c2:	4620      	mov	r0, r4
 80136c4:	f000 fdaa 	bl	801421c <_calloc_r>
 80136c8:	b160      	cbz	r0, 80136e4 <_Balloc+0x64>
 80136ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80136ce:	e00e      	b.n	80136ee <_Balloc+0x6e>
 80136d0:	2221      	movs	r2, #33	@ 0x21
 80136d2:	2104      	movs	r1, #4
 80136d4:	4620      	mov	r0, r4
 80136d6:	f000 fda1 	bl	801421c <_calloc_r>
 80136da:	69e3      	ldr	r3, [r4, #28]
 80136dc:	60f0      	str	r0, [r6, #12]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d1e4      	bne.n	80136ae <_Balloc+0x2e>
 80136e4:	2000      	movs	r0, #0
 80136e6:	bd70      	pop	{r4, r5, r6, pc}
 80136e8:	6802      	ldr	r2, [r0, #0]
 80136ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136ee:	2300      	movs	r3, #0
 80136f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80136f4:	e7f7      	b.n	80136e6 <_Balloc+0x66>
 80136f6:	bf00      	nop
 80136f8:	08015aed 	.word	0x08015aed
 80136fc:	08015b6d 	.word	0x08015b6d

08013700 <_Bfree>:
 8013700:	b570      	push	{r4, r5, r6, lr}
 8013702:	69c6      	ldr	r6, [r0, #28]
 8013704:	4605      	mov	r5, r0
 8013706:	460c      	mov	r4, r1
 8013708:	b976      	cbnz	r6, 8013728 <_Bfree+0x28>
 801370a:	2010      	movs	r0, #16
 801370c:	f7ff ff02 	bl	8013514 <malloc>
 8013710:	4602      	mov	r2, r0
 8013712:	61e8      	str	r0, [r5, #28]
 8013714:	b920      	cbnz	r0, 8013720 <_Bfree+0x20>
 8013716:	4b09      	ldr	r3, [pc, #36]	@ (801373c <_Bfree+0x3c>)
 8013718:	4809      	ldr	r0, [pc, #36]	@ (8013740 <_Bfree+0x40>)
 801371a:	218f      	movs	r1, #143	@ 0x8f
 801371c:	f000 fd60 	bl	80141e0 <__assert_func>
 8013720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013724:	6006      	str	r6, [r0, #0]
 8013726:	60c6      	str	r6, [r0, #12]
 8013728:	b13c      	cbz	r4, 801373a <_Bfree+0x3a>
 801372a:	69eb      	ldr	r3, [r5, #28]
 801372c:	6862      	ldr	r2, [r4, #4]
 801372e:	68db      	ldr	r3, [r3, #12]
 8013730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013734:	6021      	str	r1, [r4, #0]
 8013736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801373a:	bd70      	pop	{r4, r5, r6, pc}
 801373c:	08015aed 	.word	0x08015aed
 8013740:	08015b6d 	.word	0x08015b6d

08013744 <__multadd>:
 8013744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013748:	690d      	ldr	r5, [r1, #16]
 801374a:	4607      	mov	r7, r0
 801374c:	460c      	mov	r4, r1
 801374e:	461e      	mov	r6, r3
 8013750:	f101 0c14 	add.w	ip, r1, #20
 8013754:	2000      	movs	r0, #0
 8013756:	f8dc 3000 	ldr.w	r3, [ip]
 801375a:	b299      	uxth	r1, r3
 801375c:	fb02 6101 	mla	r1, r2, r1, r6
 8013760:	0c1e      	lsrs	r6, r3, #16
 8013762:	0c0b      	lsrs	r3, r1, #16
 8013764:	fb02 3306 	mla	r3, r2, r6, r3
 8013768:	b289      	uxth	r1, r1
 801376a:	3001      	adds	r0, #1
 801376c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013770:	4285      	cmp	r5, r0
 8013772:	f84c 1b04 	str.w	r1, [ip], #4
 8013776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801377a:	dcec      	bgt.n	8013756 <__multadd+0x12>
 801377c:	b30e      	cbz	r6, 80137c2 <__multadd+0x7e>
 801377e:	68a3      	ldr	r3, [r4, #8]
 8013780:	42ab      	cmp	r3, r5
 8013782:	dc19      	bgt.n	80137b8 <__multadd+0x74>
 8013784:	6861      	ldr	r1, [r4, #4]
 8013786:	4638      	mov	r0, r7
 8013788:	3101      	adds	r1, #1
 801378a:	f7ff ff79 	bl	8013680 <_Balloc>
 801378e:	4680      	mov	r8, r0
 8013790:	b928      	cbnz	r0, 801379e <__multadd+0x5a>
 8013792:	4602      	mov	r2, r0
 8013794:	4b0c      	ldr	r3, [pc, #48]	@ (80137c8 <__multadd+0x84>)
 8013796:	480d      	ldr	r0, [pc, #52]	@ (80137cc <__multadd+0x88>)
 8013798:	21ba      	movs	r1, #186	@ 0xba
 801379a:	f000 fd21 	bl	80141e0 <__assert_func>
 801379e:	6922      	ldr	r2, [r4, #16]
 80137a0:	3202      	adds	r2, #2
 80137a2:	f104 010c 	add.w	r1, r4, #12
 80137a6:	0092      	lsls	r2, r2, #2
 80137a8:	300c      	adds	r0, #12
 80137aa:	f7ff f80e 	bl	80127ca <memcpy>
 80137ae:	4621      	mov	r1, r4
 80137b0:	4638      	mov	r0, r7
 80137b2:	f7ff ffa5 	bl	8013700 <_Bfree>
 80137b6:	4644      	mov	r4, r8
 80137b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80137bc:	3501      	adds	r5, #1
 80137be:	615e      	str	r6, [r3, #20]
 80137c0:	6125      	str	r5, [r4, #16]
 80137c2:	4620      	mov	r0, r4
 80137c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137c8:	08015b5c 	.word	0x08015b5c
 80137cc:	08015b6d 	.word	0x08015b6d

080137d0 <__hi0bits>:
 80137d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80137d4:	4603      	mov	r3, r0
 80137d6:	bf36      	itet	cc
 80137d8:	0403      	lslcc	r3, r0, #16
 80137da:	2000      	movcs	r0, #0
 80137dc:	2010      	movcc	r0, #16
 80137de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80137e2:	bf3c      	itt	cc
 80137e4:	021b      	lslcc	r3, r3, #8
 80137e6:	3008      	addcc	r0, #8
 80137e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80137ec:	bf3c      	itt	cc
 80137ee:	011b      	lslcc	r3, r3, #4
 80137f0:	3004      	addcc	r0, #4
 80137f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80137f6:	bf3c      	itt	cc
 80137f8:	009b      	lslcc	r3, r3, #2
 80137fa:	3002      	addcc	r0, #2
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	db05      	blt.n	801380c <__hi0bits+0x3c>
 8013800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013804:	f100 0001 	add.w	r0, r0, #1
 8013808:	bf08      	it	eq
 801380a:	2020      	moveq	r0, #32
 801380c:	4770      	bx	lr

0801380e <__lo0bits>:
 801380e:	6803      	ldr	r3, [r0, #0]
 8013810:	4602      	mov	r2, r0
 8013812:	f013 0007 	ands.w	r0, r3, #7
 8013816:	d00b      	beq.n	8013830 <__lo0bits+0x22>
 8013818:	07d9      	lsls	r1, r3, #31
 801381a:	d421      	bmi.n	8013860 <__lo0bits+0x52>
 801381c:	0798      	lsls	r0, r3, #30
 801381e:	bf49      	itett	mi
 8013820:	085b      	lsrmi	r3, r3, #1
 8013822:	089b      	lsrpl	r3, r3, #2
 8013824:	2001      	movmi	r0, #1
 8013826:	6013      	strmi	r3, [r2, #0]
 8013828:	bf5c      	itt	pl
 801382a:	6013      	strpl	r3, [r2, #0]
 801382c:	2002      	movpl	r0, #2
 801382e:	4770      	bx	lr
 8013830:	b299      	uxth	r1, r3
 8013832:	b909      	cbnz	r1, 8013838 <__lo0bits+0x2a>
 8013834:	0c1b      	lsrs	r3, r3, #16
 8013836:	2010      	movs	r0, #16
 8013838:	b2d9      	uxtb	r1, r3
 801383a:	b909      	cbnz	r1, 8013840 <__lo0bits+0x32>
 801383c:	3008      	adds	r0, #8
 801383e:	0a1b      	lsrs	r3, r3, #8
 8013840:	0719      	lsls	r1, r3, #28
 8013842:	bf04      	itt	eq
 8013844:	091b      	lsreq	r3, r3, #4
 8013846:	3004      	addeq	r0, #4
 8013848:	0799      	lsls	r1, r3, #30
 801384a:	bf04      	itt	eq
 801384c:	089b      	lsreq	r3, r3, #2
 801384e:	3002      	addeq	r0, #2
 8013850:	07d9      	lsls	r1, r3, #31
 8013852:	d403      	bmi.n	801385c <__lo0bits+0x4e>
 8013854:	085b      	lsrs	r3, r3, #1
 8013856:	f100 0001 	add.w	r0, r0, #1
 801385a:	d003      	beq.n	8013864 <__lo0bits+0x56>
 801385c:	6013      	str	r3, [r2, #0]
 801385e:	4770      	bx	lr
 8013860:	2000      	movs	r0, #0
 8013862:	4770      	bx	lr
 8013864:	2020      	movs	r0, #32
 8013866:	4770      	bx	lr

08013868 <__i2b>:
 8013868:	b510      	push	{r4, lr}
 801386a:	460c      	mov	r4, r1
 801386c:	2101      	movs	r1, #1
 801386e:	f7ff ff07 	bl	8013680 <_Balloc>
 8013872:	4602      	mov	r2, r0
 8013874:	b928      	cbnz	r0, 8013882 <__i2b+0x1a>
 8013876:	4b05      	ldr	r3, [pc, #20]	@ (801388c <__i2b+0x24>)
 8013878:	4805      	ldr	r0, [pc, #20]	@ (8013890 <__i2b+0x28>)
 801387a:	f240 1145 	movw	r1, #325	@ 0x145
 801387e:	f000 fcaf 	bl	80141e0 <__assert_func>
 8013882:	2301      	movs	r3, #1
 8013884:	6144      	str	r4, [r0, #20]
 8013886:	6103      	str	r3, [r0, #16]
 8013888:	bd10      	pop	{r4, pc}
 801388a:	bf00      	nop
 801388c:	08015b5c 	.word	0x08015b5c
 8013890:	08015b6d 	.word	0x08015b6d

08013894 <__multiply>:
 8013894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013898:	4614      	mov	r4, r2
 801389a:	690a      	ldr	r2, [r1, #16]
 801389c:	6923      	ldr	r3, [r4, #16]
 801389e:	429a      	cmp	r2, r3
 80138a0:	bfa8      	it	ge
 80138a2:	4623      	movge	r3, r4
 80138a4:	460f      	mov	r7, r1
 80138a6:	bfa4      	itt	ge
 80138a8:	460c      	movge	r4, r1
 80138aa:	461f      	movge	r7, r3
 80138ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80138b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80138b4:	68a3      	ldr	r3, [r4, #8]
 80138b6:	6861      	ldr	r1, [r4, #4]
 80138b8:	eb0a 0609 	add.w	r6, sl, r9
 80138bc:	42b3      	cmp	r3, r6
 80138be:	b085      	sub	sp, #20
 80138c0:	bfb8      	it	lt
 80138c2:	3101      	addlt	r1, #1
 80138c4:	f7ff fedc 	bl	8013680 <_Balloc>
 80138c8:	b930      	cbnz	r0, 80138d8 <__multiply+0x44>
 80138ca:	4602      	mov	r2, r0
 80138cc:	4b44      	ldr	r3, [pc, #272]	@ (80139e0 <__multiply+0x14c>)
 80138ce:	4845      	ldr	r0, [pc, #276]	@ (80139e4 <__multiply+0x150>)
 80138d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80138d4:	f000 fc84 	bl	80141e0 <__assert_func>
 80138d8:	f100 0514 	add.w	r5, r0, #20
 80138dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80138e0:	462b      	mov	r3, r5
 80138e2:	2200      	movs	r2, #0
 80138e4:	4543      	cmp	r3, r8
 80138e6:	d321      	bcc.n	801392c <__multiply+0x98>
 80138e8:	f107 0114 	add.w	r1, r7, #20
 80138ec:	f104 0214 	add.w	r2, r4, #20
 80138f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80138f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80138f8:	9302      	str	r3, [sp, #8]
 80138fa:	1b13      	subs	r3, r2, r4
 80138fc:	3b15      	subs	r3, #21
 80138fe:	f023 0303 	bic.w	r3, r3, #3
 8013902:	3304      	adds	r3, #4
 8013904:	f104 0715 	add.w	r7, r4, #21
 8013908:	42ba      	cmp	r2, r7
 801390a:	bf38      	it	cc
 801390c:	2304      	movcc	r3, #4
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	9b02      	ldr	r3, [sp, #8]
 8013912:	9103      	str	r1, [sp, #12]
 8013914:	428b      	cmp	r3, r1
 8013916:	d80c      	bhi.n	8013932 <__multiply+0x9e>
 8013918:	2e00      	cmp	r6, #0
 801391a:	dd03      	ble.n	8013924 <__multiply+0x90>
 801391c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013920:	2b00      	cmp	r3, #0
 8013922:	d05b      	beq.n	80139dc <__multiply+0x148>
 8013924:	6106      	str	r6, [r0, #16]
 8013926:	b005      	add	sp, #20
 8013928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801392c:	f843 2b04 	str.w	r2, [r3], #4
 8013930:	e7d8      	b.n	80138e4 <__multiply+0x50>
 8013932:	f8b1 a000 	ldrh.w	sl, [r1]
 8013936:	f1ba 0f00 	cmp.w	sl, #0
 801393a:	d024      	beq.n	8013986 <__multiply+0xf2>
 801393c:	f104 0e14 	add.w	lr, r4, #20
 8013940:	46a9      	mov	r9, r5
 8013942:	f04f 0c00 	mov.w	ip, #0
 8013946:	f85e 7b04 	ldr.w	r7, [lr], #4
 801394a:	f8d9 3000 	ldr.w	r3, [r9]
 801394e:	fa1f fb87 	uxth.w	fp, r7
 8013952:	b29b      	uxth	r3, r3
 8013954:	fb0a 330b 	mla	r3, sl, fp, r3
 8013958:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801395c:	f8d9 7000 	ldr.w	r7, [r9]
 8013960:	4463      	add	r3, ip
 8013962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013966:	fb0a c70b 	mla	r7, sl, fp, ip
 801396a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801396e:	b29b      	uxth	r3, r3
 8013970:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013974:	4572      	cmp	r2, lr
 8013976:	f849 3b04 	str.w	r3, [r9], #4
 801397a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801397e:	d8e2      	bhi.n	8013946 <__multiply+0xb2>
 8013980:	9b01      	ldr	r3, [sp, #4]
 8013982:	f845 c003 	str.w	ip, [r5, r3]
 8013986:	9b03      	ldr	r3, [sp, #12]
 8013988:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801398c:	3104      	adds	r1, #4
 801398e:	f1b9 0f00 	cmp.w	r9, #0
 8013992:	d021      	beq.n	80139d8 <__multiply+0x144>
 8013994:	682b      	ldr	r3, [r5, #0]
 8013996:	f104 0c14 	add.w	ip, r4, #20
 801399a:	46ae      	mov	lr, r5
 801399c:	f04f 0a00 	mov.w	sl, #0
 80139a0:	f8bc b000 	ldrh.w	fp, [ip]
 80139a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80139a8:	fb09 770b 	mla	r7, r9, fp, r7
 80139ac:	4457      	add	r7, sl
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80139b4:	f84e 3b04 	str.w	r3, [lr], #4
 80139b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80139bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139c0:	f8be 3000 	ldrh.w	r3, [lr]
 80139c4:	fb09 330a 	mla	r3, r9, sl, r3
 80139c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80139cc:	4562      	cmp	r2, ip
 80139ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139d2:	d8e5      	bhi.n	80139a0 <__multiply+0x10c>
 80139d4:	9f01      	ldr	r7, [sp, #4]
 80139d6:	51eb      	str	r3, [r5, r7]
 80139d8:	3504      	adds	r5, #4
 80139da:	e799      	b.n	8013910 <__multiply+0x7c>
 80139dc:	3e01      	subs	r6, #1
 80139de:	e79b      	b.n	8013918 <__multiply+0x84>
 80139e0:	08015b5c 	.word	0x08015b5c
 80139e4:	08015b6d 	.word	0x08015b6d

080139e8 <__pow5mult>:
 80139e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139ec:	4615      	mov	r5, r2
 80139ee:	f012 0203 	ands.w	r2, r2, #3
 80139f2:	4607      	mov	r7, r0
 80139f4:	460e      	mov	r6, r1
 80139f6:	d007      	beq.n	8013a08 <__pow5mult+0x20>
 80139f8:	4c25      	ldr	r4, [pc, #148]	@ (8013a90 <__pow5mult+0xa8>)
 80139fa:	3a01      	subs	r2, #1
 80139fc:	2300      	movs	r3, #0
 80139fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a02:	f7ff fe9f 	bl	8013744 <__multadd>
 8013a06:	4606      	mov	r6, r0
 8013a08:	10ad      	asrs	r5, r5, #2
 8013a0a:	d03d      	beq.n	8013a88 <__pow5mult+0xa0>
 8013a0c:	69fc      	ldr	r4, [r7, #28]
 8013a0e:	b97c      	cbnz	r4, 8013a30 <__pow5mult+0x48>
 8013a10:	2010      	movs	r0, #16
 8013a12:	f7ff fd7f 	bl	8013514 <malloc>
 8013a16:	4602      	mov	r2, r0
 8013a18:	61f8      	str	r0, [r7, #28]
 8013a1a:	b928      	cbnz	r0, 8013a28 <__pow5mult+0x40>
 8013a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8013a94 <__pow5mult+0xac>)
 8013a1e:	481e      	ldr	r0, [pc, #120]	@ (8013a98 <__pow5mult+0xb0>)
 8013a20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013a24:	f000 fbdc 	bl	80141e0 <__assert_func>
 8013a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a2c:	6004      	str	r4, [r0, #0]
 8013a2e:	60c4      	str	r4, [r0, #12]
 8013a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a38:	b94c      	cbnz	r4, 8013a4e <__pow5mult+0x66>
 8013a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8013a3e:	4638      	mov	r0, r7
 8013a40:	f7ff ff12 	bl	8013868 <__i2b>
 8013a44:	2300      	movs	r3, #0
 8013a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	6003      	str	r3, [r0, #0]
 8013a4e:	f04f 0900 	mov.w	r9, #0
 8013a52:	07eb      	lsls	r3, r5, #31
 8013a54:	d50a      	bpl.n	8013a6c <__pow5mult+0x84>
 8013a56:	4631      	mov	r1, r6
 8013a58:	4622      	mov	r2, r4
 8013a5a:	4638      	mov	r0, r7
 8013a5c:	f7ff ff1a 	bl	8013894 <__multiply>
 8013a60:	4631      	mov	r1, r6
 8013a62:	4680      	mov	r8, r0
 8013a64:	4638      	mov	r0, r7
 8013a66:	f7ff fe4b 	bl	8013700 <_Bfree>
 8013a6a:	4646      	mov	r6, r8
 8013a6c:	106d      	asrs	r5, r5, #1
 8013a6e:	d00b      	beq.n	8013a88 <__pow5mult+0xa0>
 8013a70:	6820      	ldr	r0, [r4, #0]
 8013a72:	b938      	cbnz	r0, 8013a84 <__pow5mult+0x9c>
 8013a74:	4622      	mov	r2, r4
 8013a76:	4621      	mov	r1, r4
 8013a78:	4638      	mov	r0, r7
 8013a7a:	f7ff ff0b 	bl	8013894 <__multiply>
 8013a7e:	6020      	str	r0, [r4, #0]
 8013a80:	f8c0 9000 	str.w	r9, [r0]
 8013a84:	4604      	mov	r4, r0
 8013a86:	e7e4      	b.n	8013a52 <__pow5mult+0x6a>
 8013a88:	4630      	mov	r0, r6
 8013a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a8e:	bf00      	nop
 8013a90:	08015bc8 	.word	0x08015bc8
 8013a94:	08015aed 	.word	0x08015aed
 8013a98:	08015b6d 	.word	0x08015b6d

08013a9c <__lshift>:
 8013a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa0:	460c      	mov	r4, r1
 8013aa2:	6849      	ldr	r1, [r1, #4]
 8013aa4:	6923      	ldr	r3, [r4, #16]
 8013aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013aaa:	68a3      	ldr	r3, [r4, #8]
 8013aac:	4607      	mov	r7, r0
 8013aae:	4691      	mov	r9, r2
 8013ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ab4:	f108 0601 	add.w	r6, r8, #1
 8013ab8:	42b3      	cmp	r3, r6
 8013aba:	db0b      	blt.n	8013ad4 <__lshift+0x38>
 8013abc:	4638      	mov	r0, r7
 8013abe:	f7ff fddf 	bl	8013680 <_Balloc>
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	b948      	cbnz	r0, 8013ada <__lshift+0x3e>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	4b28      	ldr	r3, [pc, #160]	@ (8013b6c <__lshift+0xd0>)
 8013aca:	4829      	ldr	r0, [pc, #164]	@ (8013b70 <__lshift+0xd4>)
 8013acc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013ad0:	f000 fb86 	bl	80141e0 <__assert_func>
 8013ad4:	3101      	adds	r1, #1
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	e7ee      	b.n	8013ab8 <__lshift+0x1c>
 8013ada:	2300      	movs	r3, #0
 8013adc:	f100 0114 	add.w	r1, r0, #20
 8013ae0:	f100 0210 	add.w	r2, r0, #16
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	4553      	cmp	r3, sl
 8013ae8:	db33      	blt.n	8013b52 <__lshift+0xb6>
 8013aea:	6920      	ldr	r0, [r4, #16]
 8013aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013af0:	f104 0314 	add.w	r3, r4, #20
 8013af4:	f019 091f 	ands.w	r9, r9, #31
 8013af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b00:	d02b      	beq.n	8013b5a <__lshift+0xbe>
 8013b02:	f1c9 0e20 	rsb	lr, r9, #32
 8013b06:	468a      	mov	sl, r1
 8013b08:	2200      	movs	r2, #0
 8013b0a:	6818      	ldr	r0, [r3, #0]
 8013b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8013b10:	4310      	orrs	r0, r2
 8013b12:	f84a 0b04 	str.w	r0, [sl], #4
 8013b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b1a:	459c      	cmp	ip, r3
 8013b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b20:	d8f3      	bhi.n	8013b0a <__lshift+0x6e>
 8013b22:	ebac 0304 	sub.w	r3, ip, r4
 8013b26:	3b15      	subs	r3, #21
 8013b28:	f023 0303 	bic.w	r3, r3, #3
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	f104 0015 	add.w	r0, r4, #21
 8013b32:	4584      	cmp	ip, r0
 8013b34:	bf38      	it	cc
 8013b36:	2304      	movcc	r3, #4
 8013b38:	50ca      	str	r2, [r1, r3]
 8013b3a:	b10a      	cbz	r2, 8013b40 <__lshift+0xa4>
 8013b3c:	f108 0602 	add.w	r6, r8, #2
 8013b40:	3e01      	subs	r6, #1
 8013b42:	4638      	mov	r0, r7
 8013b44:	612e      	str	r6, [r5, #16]
 8013b46:	4621      	mov	r1, r4
 8013b48:	f7ff fdda 	bl	8013700 <_Bfree>
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b56:	3301      	adds	r3, #1
 8013b58:	e7c5      	b.n	8013ae6 <__lshift+0x4a>
 8013b5a:	3904      	subs	r1, #4
 8013b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b60:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b64:	459c      	cmp	ip, r3
 8013b66:	d8f9      	bhi.n	8013b5c <__lshift+0xc0>
 8013b68:	e7ea      	b.n	8013b40 <__lshift+0xa4>
 8013b6a:	bf00      	nop
 8013b6c:	08015b5c 	.word	0x08015b5c
 8013b70:	08015b6d 	.word	0x08015b6d

08013b74 <__mcmp>:
 8013b74:	690a      	ldr	r2, [r1, #16]
 8013b76:	4603      	mov	r3, r0
 8013b78:	6900      	ldr	r0, [r0, #16]
 8013b7a:	1a80      	subs	r0, r0, r2
 8013b7c:	b530      	push	{r4, r5, lr}
 8013b7e:	d10e      	bne.n	8013b9e <__mcmp+0x2a>
 8013b80:	3314      	adds	r3, #20
 8013b82:	3114      	adds	r1, #20
 8013b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013b94:	4295      	cmp	r5, r2
 8013b96:	d003      	beq.n	8013ba0 <__mcmp+0x2c>
 8013b98:	d205      	bcs.n	8013ba6 <__mcmp+0x32>
 8013b9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b9e:	bd30      	pop	{r4, r5, pc}
 8013ba0:	42a3      	cmp	r3, r4
 8013ba2:	d3f3      	bcc.n	8013b8c <__mcmp+0x18>
 8013ba4:	e7fb      	b.n	8013b9e <__mcmp+0x2a>
 8013ba6:	2001      	movs	r0, #1
 8013ba8:	e7f9      	b.n	8013b9e <__mcmp+0x2a>
	...

08013bac <__mdiff>:
 8013bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	4689      	mov	r9, r1
 8013bb2:	4606      	mov	r6, r0
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4648      	mov	r0, r9
 8013bb8:	4614      	mov	r4, r2
 8013bba:	f7ff ffdb 	bl	8013b74 <__mcmp>
 8013bbe:	1e05      	subs	r5, r0, #0
 8013bc0:	d112      	bne.n	8013be8 <__mdiff+0x3c>
 8013bc2:	4629      	mov	r1, r5
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	f7ff fd5b 	bl	8013680 <_Balloc>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	b928      	cbnz	r0, 8013bda <__mdiff+0x2e>
 8013bce:	4b3f      	ldr	r3, [pc, #252]	@ (8013ccc <__mdiff+0x120>)
 8013bd0:	f240 2137 	movw	r1, #567	@ 0x237
 8013bd4:	483e      	ldr	r0, [pc, #248]	@ (8013cd0 <__mdiff+0x124>)
 8013bd6:	f000 fb03 	bl	80141e0 <__assert_func>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013be0:	4610      	mov	r0, r2
 8013be2:	b003      	add	sp, #12
 8013be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be8:	bfbc      	itt	lt
 8013bea:	464b      	movlt	r3, r9
 8013bec:	46a1      	movlt	r9, r4
 8013bee:	4630      	mov	r0, r6
 8013bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013bf4:	bfba      	itte	lt
 8013bf6:	461c      	movlt	r4, r3
 8013bf8:	2501      	movlt	r5, #1
 8013bfa:	2500      	movge	r5, #0
 8013bfc:	f7ff fd40 	bl	8013680 <_Balloc>
 8013c00:	4602      	mov	r2, r0
 8013c02:	b918      	cbnz	r0, 8013c0c <__mdiff+0x60>
 8013c04:	4b31      	ldr	r3, [pc, #196]	@ (8013ccc <__mdiff+0x120>)
 8013c06:	f240 2145 	movw	r1, #581	@ 0x245
 8013c0a:	e7e3      	b.n	8013bd4 <__mdiff+0x28>
 8013c0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013c10:	6926      	ldr	r6, [r4, #16]
 8013c12:	60c5      	str	r5, [r0, #12]
 8013c14:	f109 0310 	add.w	r3, r9, #16
 8013c18:	f109 0514 	add.w	r5, r9, #20
 8013c1c:	f104 0e14 	add.w	lr, r4, #20
 8013c20:	f100 0b14 	add.w	fp, r0, #20
 8013c24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013c28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013c2c:	9301      	str	r3, [sp, #4]
 8013c2e:	46d9      	mov	r9, fp
 8013c30:	f04f 0c00 	mov.w	ip, #0
 8013c34:	9b01      	ldr	r3, [sp, #4]
 8013c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013c3e:	9301      	str	r3, [sp, #4]
 8013c40:	fa1f f38a 	uxth.w	r3, sl
 8013c44:	4619      	mov	r1, r3
 8013c46:	b283      	uxth	r3, r0
 8013c48:	1acb      	subs	r3, r1, r3
 8013c4a:	0c00      	lsrs	r0, r0, #16
 8013c4c:	4463      	add	r3, ip
 8013c4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013c52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013c5c:	4576      	cmp	r6, lr
 8013c5e:	f849 3b04 	str.w	r3, [r9], #4
 8013c62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013c66:	d8e5      	bhi.n	8013c34 <__mdiff+0x88>
 8013c68:	1b33      	subs	r3, r6, r4
 8013c6a:	3b15      	subs	r3, #21
 8013c6c:	f023 0303 	bic.w	r3, r3, #3
 8013c70:	3415      	adds	r4, #21
 8013c72:	3304      	adds	r3, #4
 8013c74:	42a6      	cmp	r6, r4
 8013c76:	bf38      	it	cc
 8013c78:	2304      	movcc	r3, #4
 8013c7a:	441d      	add	r5, r3
 8013c7c:	445b      	add	r3, fp
 8013c7e:	461e      	mov	r6, r3
 8013c80:	462c      	mov	r4, r5
 8013c82:	4544      	cmp	r4, r8
 8013c84:	d30e      	bcc.n	8013ca4 <__mdiff+0xf8>
 8013c86:	f108 0103 	add.w	r1, r8, #3
 8013c8a:	1b49      	subs	r1, r1, r5
 8013c8c:	f021 0103 	bic.w	r1, r1, #3
 8013c90:	3d03      	subs	r5, #3
 8013c92:	45a8      	cmp	r8, r5
 8013c94:	bf38      	it	cc
 8013c96:	2100      	movcc	r1, #0
 8013c98:	440b      	add	r3, r1
 8013c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c9e:	b191      	cbz	r1, 8013cc6 <__mdiff+0x11a>
 8013ca0:	6117      	str	r7, [r2, #16]
 8013ca2:	e79d      	b.n	8013be0 <__mdiff+0x34>
 8013ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8013ca8:	46e6      	mov	lr, ip
 8013caa:	0c08      	lsrs	r0, r1, #16
 8013cac:	fa1c fc81 	uxtah	ip, ip, r1
 8013cb0:	4471      	add	r1, lr
 8013cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013cb6:	b289      	uxth	r1, r1
 8013cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013cbc:	f846 1b04 	str.w	r1, [r6], #4
 8013cc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013cc4:	e7dd      	b.n	8013c82 <__mdiff+0xd6>
 8013cc6:	3f01      	subs	r7, #1
 8013cc8:	e7e7      	b.n	8013c9a <__mdiff+0xee>
 8013cca:	bf00      	nop
 8013ccc:	08015b5c 	.word	0x08015b5c
 8013cd0:	08015b6d 	.word	0x08015b6d

08013cd4 <__d2b>:
 8013cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cd8:	460f      	mov	r7, r1
 8013cda:	2101      	movs	r1, #1
 8013cdc:	ec59 8b10 	vmov	r8, r9, d0
 8013ce0:	4616      	mov	r6, r2
 8013ce2:	f7ff fccd 	bl	8013680 <_Balloc>
 8013ce6:	4604      	mov	r4, r0
 8013ce8:	b930      	cbnz	r0, 8013cf8 <__d2b+0x24>
 8013cea:	4602      	mov	r2, r0
 8013cec:	4b23      	ldr	r3, [pc, #140]	@ (8013d7c <__d2b+0xa8>)
 8013cee:	4824      	ldr	r0, [pc, #144]	@ (8013d80 <__d2b+0xac>)
 8013cf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8013cf4:	f000 fa74 	bl	80141e0 <__assert_func>
 8013cf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d00:	b10d      	cbz	r5, 8013d06 <__d2b+0x32>
 8013d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013d06:	9301      	str	r3, [sp, #4]
 8013d08:	f1b8 0300 	subs.w	r3, r8, #0
 8013d0c:	d023      	beq.n	8013d56 <__d2b+0x82>
 8013d0e:	4668      	mov	r0, sp
 8013d10:	9300      	str	r3, [sp, #0]
 8013d12:	f7ff fd7c 	bl	801380e <__lo0bits>
 8013d16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013d1a:	b1d0      	cbz	r0, 8013d52 <__d2b+0x7e>
 8013d1c:	f1c0 0320 	rsb	r3, r0, #32
 8013d20:	fa02 f303 	lsl.w	r3, r2, r3
 8013d24:	430b      	orrs	r3, r1
 8013d26:	40c2      	lsrs	r2, r0
 8013d28:	6163      	str	r3, [r4, #20]
 8013d2a:	9201      	str	r2, [sp, #4]
 8013d2c:	9b01      	ldr	r3, [sp, #4]
 8013d2e:	61a3      	str	r3, [r4, #24]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	bf0c      	ite	eq
 8013d34:	2201      	moveq	r2, #1
 8013d36:	2202      	movne	r2, #2
 8013d38:	6122      	str	r2, [r4, #16]
 8013d3a:	b1a5      	cbz	r5, 8013d66 <__d2b+0x92>
 8013d3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013d40:	4405      	add	r5, r0
 8013d42:	603d      	str	r5, [r7, #0]
 8013d44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013d48:	6030      	str	r0, [r6, #0]
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	b003      	add	sp, #12
 8013d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d52:	6161      	str	r1, [r4, #20]
 8013d54:	e7ea      	b.n	8013d2c <__d2b+0x58>
 8013d56:	a801      	add	r0, sp, #4
 8013d58:	f7ff fd59 	bl	801380e <__lo0bits>
 8013d5c:	9b01      	ldr	r3, [sp, #4]
 8013d5e:	6163      	str	r3, [r4, #20]
 8013d60:	3020      	adds	r0, #32
 8013d62:	2201      	movs	r2, #1
 8013d64:	e7e8      	b.n	8013d38 <__d2b+0x64>
 8013d66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013d6e:	6038      	str	r0, [r7, #0]
 8013d70:	6918      	ldr	r0, [r3, #16]
 8013d72:	f7ff fd2d 	bl	80137d0 <__hi0bits>
 8013d76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d7a:	e7e5      	b.n	8013d48 <__d2b+0x74>
 8013d7c:	08015b5c 	.word	0x08015b5c
 8013d80:	08015b6d 	.word	0x08015b6d

08013d84 <__ssputs_r>:
 8013d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d88:	688e      	ldr	r6, [r1, #8]
 8013d8a:	461f      	mov	r7, r3
 8013d8c:	42be      	cmp	r6, r7
 8013d8e:	680b      	ldr	r3, [r1, #0]
 8013d90:	4682      	mov	sl, r0
 8013d92:	460c      	mov	r4, r1
 8013d94:	4690      	mov	r8, r2
 8013d96:	d82d      	bhi.n	8013df4 <__ssputs_r+0x70>
 8013d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013da0:	d026      	beq.n	8013df0 <__ssputs_r+0x6c>
 8013da2:	6965      	ldr	r5, [r4, #20]
 8013da4:	6909      	ldr	r1, [r1, #16]
 8013da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013daa:	eba3 0901 	sub.w	r9, r3, r1
 8013dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013db2:	1c7b      	adds	r3, r7, #1
 8013db4:	444b      	add	r3, r9
 8013db6:	106d      	asrs	r5, r5, #1
 8013db8:	429d      	cmp	r5, r3
 8013dba:	bf38      	it	cc
 8013dbc:	461d      	movcc	r5, r3
 8013dbe:	0553      	lsls	r3, r2, #21
 8013dc0:	d527      	bpl.n	8013e12 <__ssputs_r+0x8e>
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	f7ff fbd0 	bl	8013568 <_malloc_r>
 8013dc8:	4606      	mov	r6, r0
 8013dca:	b360      	cbz	r0, 8013e26 <__ssputs_r+0xa2>
 8013dcc:	6921      	ldr	r1, [r4, #16]
 8013dce:	464a      	mov	r2, r9
 8013dd0:	f7fe fcfb 	bl	80127ca <memcpy>
 8013dd4:	89a3      	ldrh	r3, [r4, #12]
 8013dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013dde:	81a3      	strh	r3, [r4, #12]
 8013de0:	6126      	str	r6, [r4, #16]
 8013de2:	6165      	str	r5, [r4, #20]
 8013de4:	444e      	add	r6, r9
 8013de6:	eba5 0509 	sub.w	r5, r5, r9
 8013dea:	6026      	str	r6, [r4, #0]
 8013dec:	60a5      	str	r5, [r4, #8]
 8013dee:	463e      	mov	r6, r7
 8013df0:	42be      	cmp	r6, r7
 8013df2:	d900      	bls.n	8013df6 <__ssputs_r+0x72>
 8013df4:	463e      	mov	r6, r7
 8013df6:	6820      	ldr	r0, [r4, #0]
 8013df8:	4632      	mov	r2, r6
 8013dfa:	4641      	mov	r1, r8
 8013dfc:	f000 f9c6 	bl	801418c <memmove>
 8013e00:	68a3      	ldr	r3, [r4, #8]
 8013e02:	1b9b      	subs	r3, r3, r6
 8013e04:	60a3      	str	r3, [r4, #8]
 8013e06:	6823      	ldr	r3, [r4, #0]
 8013e08:	4433      	add	r3, r6
 8013e0a:	6023      	str	r3, [r4, #0]
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e12:	462a      	mov	r2, r5
 8013e14:	f000 fa28 	bl	8014268 <_realloc_r>
 8013e18:	4606      	mov	r6, r0
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	d1e0      	bne.n	8013de0 <__ssputs_r+0x5c>
 8013e1e:	6921      	ldr	r1, [r4, #16]
 8013e20:	4650      	mov	r0, sl
 8013e22:	f7ff fb2d 	bl	8013480 <_free_r>
 8013e26:	230c      	movs	r3, #12
 8013e28:	f8ca 3000 	str.w	r3, [sl]
 8013e2c:	89a3      	ldrh	r3, [r4, #12]
 8013e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e32:	81a3      	strh	r3, [r4, #12]
 8013e34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e38:	e7e9      	b.n	8013e0e <__ssputs_r+0x8a>
	...

08013e3c <_svfiprintf_r>:
 8013e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e40:	4698      	mov	r8, r3
 8013e42:	898b      	ldrh	r3, [r1, #12]
 8013e44:	061b      	lsls	r3, r3, #24
 8013e46:	b09d      	sub	sp, #116	@ 0x74
 8013e48:	4607      	mov	r7, r0
 8013e4a:	460d      	mov	r5, r1
 8013e4c:	4614      	mov	r4, r2
 8013e4e:	d510      	bpl.n	8013e72 <_svfiprintf_r+0x36>
 8013e50:	690b      	ldr	r3, [r1, #16]
 8013e52:	b973      	cbnz	r3, 8013e72 <_svfiprintf_r+0x36>
 8013e54:	2140      	movs	r1, #64	@ 0x40
 8013e56:	f7ff fb87 	bl	8013568 <_malloc_r>
 8013e5a:	6028      	str	r0, [r5, #0]
 8013e5c:	6128      	str	r0, [r5, #16]
 8013e5e:	b930      	cbnz	r0, 8013e6e <_svfiprintf_r+0x32>
 8013e60:	230c      	movs	r3, #12
 8013e62:	603b      	str	r3, [r7, #0]
 8013e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e68:	b01d      	add	sp, #116	@ 0x74
 8013e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6e:	2340      	movs	r3, #64	@ 0x40
 8013e70:	616b      	str	r3, [r5, #20]
 8013e72:	2300      	movs	r3, #0
 8013e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e76:	2320      	movs	r3, #32
 8013e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e80:	2330      	movs	r3, #48	@ 0x30
 8013e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014020 <_svfiprintf_r+0x1e4>
 8013e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e8a:	f04f 0901 	mov.w	r9, #1
 8013e8e:	4623      	mov	r3, r4
 8013e90:	469a      	mov	sl, r3
 8013e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e96:	b10a      	cbz	r2, 8013e9c <_svfiprintf_r+0x60>
 8013e98:	2a25      	cmp	r2, #37	@ 0x25
 8013e9a:	d1f9      	bne.n	8013e90 <_svfiprintf_r+0x54>
 8013e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8013ea0:	d00b      	beq.n	8013eba <_svfiprintf_r+0x7e>
 8013ea2:	465b      	mov	r3, fp
 8013ea4:	4622      	mov	r2, r4
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	f7ff ff6b 	bl	8013d84 <__ssputs_r>
 8013eae:	3001      	adds	r0, #1
 8013eb0:	f000 80a7 	beq.w	8014002 <_svfiprintf_r+0x1c6>
 8013eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013eb6:	445a      	add	r2, fp
 8013eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013eba:	f89a 3000 	ldrb.w	r3, [sl]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	f000 809f 	beq.w	8014002 <_svfiprintf_r+0x1c6>
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ece:	f10a 0a01 	add.w	sl, sl, #1
 8013ed2:	9304      	str	r3, [sp, #16]
 8013ed4:	9307      	str	r3, [sp, #28]
 8013ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8013edc:	4654      	mov	r4, sl
 8013ede:	2205      	movs	r2, #5
 8013ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ee4:	484e      	ldr	r0, [pc, #312]	@ (8014020 <_svfiprintf_r+0x1e4>)
 8013ee6:	f7ec f99b 	bl	8000220 <memchr>
 8013eea:	9a04      	ldr	r2, [sp, #16]
 8013eec:	b9d8      	cbnz	r0, 8013f26 <_svfiprintf_r+0xea>
 8013eee:	06d0      	lsls	r0, r2, #27
 8013ef0:	bf44      	itt	mi
 8013ef2:	2320      	movmi	r3, #32
 8013ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ef8:	0711      	lsls	r1, r2, #28
 8013efa:	bf44      	itt	mi
 8013efc:	232b      	movmi	r3, #43	@ 0x2b
 8013efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f02:	f89a 3000 	ldrb.w	r3, [sl]
 8013f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f08:	d015      	beq.n	8013f36 <_svfiprintf_r+0xfa>
 8013f0a:	9a07      	ldr	r2, [sp, #28]
 8013f0c:	4654      	mov	r4, sl
 8013f0e:	2000      	movs	r0, #0
 8013f10:	f04f 0c0a 	mov.w	ip, #10
 8013f14:	4621      	mov	r1, r4
 8013f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f1a:	3b30      	subs	r3, #48	@ 0x30
 8013f1c:	2b09      	cmp	r3, #9
 8013f1e:	d94b      	bls.n	8013fb8 <_svfiprintf_r+0x17c>
 8013f20:	b1b0      	cbz	r0, 8013f50 <_svfiprintf_r+0x114>
 8013f22:	9207      	str	r2, [sp, #28]
 8013f24:	e014      	b.n	8013f50 <_svfiprintf_r+0x114>
 8013f26:	eba0 0308 	sub.w	r3, r0, r8
 8013f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8013f2e:	4313      	orrs	r3, r2
 8013f30:	9304      	str	r3, [sp, #16]
 8013f32:	46a2      	mov	sl, r4
 8013f34:	e7d2      	b.n	8013edc <_svfiprintf_r+0xa0>
 8013f36:	9b03      	ldr	r3, [sp, #12]
 8013f38:	1d19      	adds	r1, r3, #4
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	9103      	str	r1, [sp, #12]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	bfbb      	ittet	lt
 8013f42:	425b      	neglt	r3, r3
 8013f44:	f042 0202 	orrlt.w	r2, r2, #2
 8013f48:	9307      	strge	r3, [sp, #28]
 8013f4a:	9307      	strlt	r3, [sp, #28]
 8013f4c:	bfb8      	it	lt
 8013f4e:	9204      	strlt	r2, [sp, #16]
 8013f50:	7823      	ldrb	r3, [r4, #0]
 8013f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f54:	d10a      	bne.n	8013f6c <_svfiprintf_r+0x130>
 8013f56:	7863      	ldrb	r3, [r4, #1]
 8013f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f5a:	d132      	bne.n	8013fc2 <_svfiprintf_r+0x186>
 8013f5c:	9b03      	ldr	r3, [sp, #12]
 8013f5e:	1d1a      	adds	r2, r3, #4
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	9203      	str	r2, [sp, #12]
 8013f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f68:	3402      	adds	r4, #2
 8013f6a:	9305      	str	r3, [sp, #20]
 8013f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014030 <_svfiprintf_r+0x1f4>
 8013f70:	7821      	ldrb	r1, [r4, #0]
 8013f72:	2203      	movs	r2, #3
 8013f74:	4650      	mov	r0, sl
 8013f76:	f7ec f953 	bl	8000220 <memchr>
 8013f7a:	b138      	cbz	r0, 8013f8c <_svfiprintf_r+0x150>
 8013f7c:	9b04      	ldr	r3, [sp, #16]
 8013f7e:	eba0 000a 	sub.w	r0, r0, sl
 8013f82:	2240      	movs	r2, #64	@ 0x40
 8013f84:	4082      	lsls	r2, r0
 8013f86:	4313      	orrs	r3, r2
 8013f88:	3401      	adds	r4, #1
 8013f8a:	9304      	str	r3, [sp, #16]
 8013f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f90:	4824      	ldr	r0, [pc, #144]	@ (8014024 <_svfiprintf_r+0x1e8>)
 8013f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f96:	2206      	movs	r2, #6
 8013f98:	f7ec f942 	bl	8000220 <memchr>
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	d036      	beq.n	801400e <_svfiprintf_r+0x1d2>
 8013fa0:	4b21      	ldr	r3, [pc, #132]	@ (8014028 <_svfiprintf_r+0x1ec>)
 8013fa2:	bb1b      	cbnz	r3, 8013fec <_svfiprintf_r+0x1b0>
 8013fa4:	9b03      	ldr	r3, [sp, #12]
 8013fa6:	3307      	adds	r3, #7
 8013fa8:	f023 0307 	bic.w	r3, r3, #7
 8013fac:	3308      	adds	r3, #8
 8013fae:	9303      	str	r3, [sp, #12]
 8013fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb2:	4433      	add	r3, r6
 8013fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fb6:	e76a      	b.n	8013e8e <_svfiprintf_r+0x52>
 8013fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fbc:	460c      	mov	r4, r1
 8013fbe:	2001      	movs	r0, #1
 8013fc0:	e7a8      	b.n	8013f14 <_svfiprintf_r+0xd8>
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	3401      	adds	r4, #1
 8013fc6:	9305      	str	r3, [sp, #20]
 8013fc8:	4619      	mov	r1, r3
 8013fca:	f04f 0c0a 	mov.w	ip, #10
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fd4:	3a30      	subs	r2, #48	@ 0x30
 8013fd6:	2a09      	cmp	r2, #9
 8013fd8:	d903      	bls.n	8013fe2 <_svfiprintf_r+0x1a6>
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d0c6      	beq.n	8013f6c <_svfiprintf_r+0x130>
 8013fde:	9105      	str	r1, [sp, #20]
 8013fe0:	e7c4      	b.n	8013f6c <_svfiprintf_r+0x130>
 8013fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	2301      	movs	r3, #1
 8013fea:	e7f0      	b.n	8013fce <_svfiprintf_r+0x192>
 8013fec:	ab03      	add	r3, sp, #12
 8013fee:	9300      	str	r3, [sp, #0]
 8013ff0:	462a      	mov	r2, r5
 8013ff2:	4b0e      	ldr	r3, [pc, #56]	@ (801402c <_svfiprintf_r+0x1f0>)
 8013ff4:	a904      	add	r1, sp, #16
 8013ff6:	4638      	mov	r0, r7
 8013ff8:	f7fd fe20 	bl	8011c3c <_printf_float>
 8013ffc:	1c42      	adds	r2, r0, #1
 8013ffe:	4606      	mov	r6, r0
 8014000:	d1d6      	bne.n	8013fb0 <_svfiprintf_r+0x174>
 8014002:	89ab      	ldrh	r3, [r5, #12]
 8014004:	065b      	lsls	r3, r3, #25
 8014006:	f53f af2d 	bmi.w	8013e64 <_svfiprintf_r+0x28>
 801400a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801400c:	e72c      	b.n	8013e68 <_svfiprintf_r+0x2c>
 801400e:	ab03      	add	r3, sp, #12
 8014010:	9300      	str	r3, [sp, #0]
 8014012:	462a      	mov	r2, r5
 8014014:	4b05      	ldr	r3, [pc, #20]	@ (801402c <_svfiprintf_r+0x1f0>)
 8014016:	a904      	add	r1, sp, #16
 8014018:	4638      	mov	r0, r7
 801401a:	f7fe f8a7 	bl	801216c <_printf_i>
 801401e:	e7ed      	b.n	8013ffc <_svfiprintf_r+0x1c0>
 8014020:	08015cc8 	.word	0x08015cc8
 8014024:	08015cd2 	.word	0x08015cd2
 8014028:	08011c3d 	.word	0x08011c3d
 801402c:	08013d85 	.word	0x08013d85
 8014030:	08015cce 	.word	0x08015cce

08014034 <__sflush_r>:
 8014034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801403c:	0716      	lsls	r6, r2, #28
 801403e:	4605      	mov	r5, r0
 8014040:	460c      	mov	r4, r1
 8014042:	d454      	bmi.n	80140ee <__sflush_r+0xba>
 8014044:	684b      	ldr	r3, [r1, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	dc02      	bgt.n	8014050 <__sflush_r+0x1c>
 801404a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801404c:	2b00      	cmp	r3, #0
 801404e:	dd48      	ble.n	80140e2 <__sflush_r+0xae>
 8014050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014052:	2e00      	cmp	r6, #0
 8014054:	d045      	beq.n	80140e2 <__sflush_r+0xae>
 8014056:	2300      	movs	r3, #0
 8014058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801405c:	682f      	ldr	r7, [r5, #0]
 801405e:	6a21      	ldr	r1, [r4, #32]
 8014060:	602b      	str	r3, [r5, #0]
 8014062:	d030      	beq.n	80140c6 <__sflush_r+0x92>
 8014064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014066:	89a3      	ldrh	r3, [r4, #12]
 8014068:	0759      	lsls	r1, r3, #29
 801406a:	d505      	bpl.n	8014078 <__sflush_r+0x44>
 801406c:	6863      	ldr	r3, [r4, #4]
 801406e:	1ad2      	subs	r2, r2, r3
 8014070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014072:	b10b      	cbz	r3, 8014078 <__sflush_r+0x44>
 8014074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014076:	1ad2      	subs	r2, r2, r3
 8014078:	2300      	movs	r3, #0
 801407a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801407c:	6a21      	ldr	r1, [r4, #32]
 801407e:	4628      	mov	r0, r5
 8014080:	47b0      	blx	r6
 8014082:	1c43      	adds	r3, r0, #1
 8014084:	89a3      	ldrh	r3, [r4, #12]
 8014086:	d106      	bne.n	8014096 <__sflush_r+0x62>
 8014088:	6829      	ldr	r1, [r5, #0]
 801408a:	291d      	cmp	r1, #29
 801408c:	d82b      	bhi.n	80140e6 <__sflush_r+0xb2>
 801408e:	4a2a      	ldr	r2, [pc, #168]	@ (8014138 <__sflush_r+0x104>)
 8014090:	410a      	asrs	r2, r1
 8014092:	07d6      	lsls	r6, r2, #31
 8014094:	d427      	bmi.n	80140e6 <__sflush_r+0xb2>
 8014096:	2200      	movs	r2, #0
 8014098:	6062      	str	r2, [r4, #4]
 801409a:	04d9      	lsls	r1, r3, #19
 801409c:	6922      	ldr	r2, [r4, #16]
 801409e:	6022      	str	r2, [r4, #0]
 80140a0:	d504      	bpl.n	80140ac <__sflush_r+0x78>
 80140a2:	1c42      	adds	r2, r0, #1
 80140a4:	d101      	bne.n	80140aa <__sflush_r+0x76>
 80140a6:	682b      	ldr	r3, [r5, #0]
 80140a8:	b903      	cbnz	r3, 80140ac <__sflush_r+0x78>
 80140aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80140ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140ae:	602f      	str	r7, [r5, #0]
 80140b0:	b1b9      	cbz	r1, 80140e2 <__sflush_r+0xae>
 80140b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140b6:	4299      	cmp	r1, r3
 80140b8:	d002      	beq.n	80140c0 <__sflush_r+0x8c>
 80140ba:	4628      	mov	r0, r5
 80140bc:	f7ff f9e0 	bl	8013480 <_free_r>
 80140c0:	2300      	movs	r3, #0
 80140c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80140c4:	e00d      	b.n	80140e2 <__sflush_r+0xae>
 80140c6:	2301      	movs	r3, #1
 80140c8:	4628      	mov	r0, r5
 80140ca:	47b0      	blx	r6
 80140cc:	4602      	mov	r2, r0
 80140ce:	1c50      	adds	r0, r2, #1
 80140d0:	d1c9      	bne.n	8014066 <__sflush_r+0x32>
 80140d2:	682b      	ldr	r3, [r5, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d0c6      	beq.n	8014066 <__sflush_r+0x32>
 80140d8:	2b1d      	cmp	r3, #29
 80140da:	d001      	beq.n	80140e0 <__sflush_r+0xac>
 80140dc:	2b16      	cmp	r3, #22
 80140de:	d11e      	bne.n	801411e <__sflush_r+0xea>
 80140e0:	602f      	str	r7, [r5, #0]
 80140e2:	2000      	movs	r0, #0
 80140e4:	e022      	b.n	801412c <__sflush_r+0xf8>
 80140e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140ea:	b21b      	sxth	r3, r3
 80140ec:	e01b      	b.n	8014126 <__sflush_r+0xf2>
 80140ee:	690f      	ldr	r7, [r1, #16]
 80140f0:	2f00      	cmp	r7, #0
 80140f2:	d0f6      	beq.n	80140e2 <__sflush_r+0xae>
 80140f4:	0793      	lsls	r3, r2, #30
 80140f6:	680e      	ldr	r6, [r1, #0]
 80140f8:	bf08      	it	eq
 80140fa:	694b      	ldreq	r3, [r1, #20]
 80140fc:	600f      	str	r7, [r1, #0]
 80140fe:	bf18      	it	ne
 8014100:	2300      	movne	r3, #0
 8014102:	eba6 0807 	sub.w	r8, r6, r7
 8014106:	608b      	str	r3, [r1, #8]
 8014108:	f1b8 0f00 	cmp.w	r8, #0
 801410c:	dde9      	ble.n	80140e2 <__sflush_r+0xae>
 801410e:	6a21      	ldr	r1, [r4, #32]
 8014110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014112:	4643      	mov	r3, r8
 8014114:	463a      	mov	r2, r7
 8014116:	4628      	mov	r0, r5
 8014118:	47b0      	blx	r6
 801411a:	2800      	cmp	r0, #0
 801411c:	dc08      	bgt.n	8014130 <__sflush_r+0xfc>
 801411e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014126:	81a3      	strh	r3, [r4, #12]
 8014128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801412c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014130:	4407      	add	r7, r0
 8014132:	eba8 0800 	sub.w	r8, r8, r0
 8014136:	e7e7      	b.n	8014108 <__sflush_r+0xd4>
 8014138:	dfbffffe 	.word	0xdfbffffe

0801413c <_fflush_r>:
 801413c:	b538      	push	{r3, r4, r5, lr}
 801413e:	690b      	ldr	r3, [r1, #16]
 8014140:	4605      	mov	r5, r0
 8014142:	460c      	mov	r4, r1
 8014144:	b913      	cbnz	r3, 801414c <_fflush_r+0x10>
 8014146:	2500      	movs	r5, #0
 8014148:	4628      	mov	r0, r5
 801414a:	bd38      	pop	{r3, r4, r5, pc}
 801414c:	b118      	cbz	r0, 8014156 <_fflush_r+0x1a>
 801414e:	6a03      	ldr	r3, [r0, #32]
 8014150:	b90b      	cbnz	r3, 8014156 <_fflush_r+0x1a>
 8014152:	f7fe f9b7 	bl	80124c4 <__sinit>
 8014156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d0f3      	beq.n	8014146 <_fflush_r+0xa>
 801415e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014160:	07d0      	lsls	r0, r2, #31
 8014162:	d404      	bmi.n	801416e <_fflush_r+0x32>
 8014164:	0599      	lsls	r1, r3, #22
 8014166:	d402      	bmi.n	801416e <_fflush_r+0x32>
 8014168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801416a:	f7fe fb2c 	bl	80127c6 <__retarget_lock_acquire_recursive>
 801416e:	4628      	mov	r0, r5
 8014170:	4621      	mov	r1, r4
 8014172:	f7ff ff5f 	bl	8014034 <__sflush_r>
 8014176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014178:	07da      	lsls	r2, r3, #31
 801417a:	4605      	mov	r5, r0
 801417c:	d4e4      	bmi.n	8014148 <_fflush_r+0xc>
 801417e:	89a3      	ldrh	r3, [r4, #12]
 8014180:	059b      	lsls	r3, r3, #22
 8014182:	d4e1      	bmi.n	8014148 <_fflush_r+0xc>
 8014184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014186:	f7fe fb1f 	bl	80127c8 <__retarget_lock_release_recursive>
 801418a:	e7dd      	b.n	8014148 <_fflush_r+0xc>

0801418c <memmove>:
 801418c:	4288      	cmp	r0, r1
 801418e:	b510      	push	{r4, lr}
 8014190:	eb01 0402 	add.w	r4, r1, r2
 8014194:	d902      	bls.n	801419c <memmove+0x10>
 8014196:	4284      	cmp	r4, r0
 8014198:	4623      	mov	r3, r4
 801419a:	d807      	bhi.n	80141ac <memmove+0x20>
 801419c:	1e43      	subs	r3, r0, #1
 801419e:	42a1      	cmp	r1, r4
 80141a0:	d008      	beq.n	80141b4 <memmove+0x28>
 80141a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80141aa:	e7f8      	b.n	801419e <memmove+0x12>
 80141ac:	4402      	add	r2, r0
 80141ae:	4601      	mov	r1, r0
 80141b0:	428a      	cmp	r2, r1
 80141b2:	d100      	bne.n	80141b6 <memmove+0x2a>
 80141b4:	bd10      	pop	{r4, pc}
 80141b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141be:	e7f7      	b.n	80141b0 <memmove+0x24>

080141c0 <_sbrk_r>:
 80141c0:	b538      	push	{r3, r4, r5, lr}
 80141c2:	4d06      	ldr	r5, [pc, #24]	@ (80141dc <_sbrk_r+0x1c>)
 80141c4:	2300      	movs	r3, #0
 80141c6:	4604      	mov	r4, r0
 80141c8:	4608      	mov	r0, r1
 80141ca:	602b      	str	r3, [r5, #0]
 80141cc:	f7ef f9cc 	bl	8003568 <_sbrk>
 80141d0:	1c43      	adds	r3, r0, #1
 80141d2:	d102      	bne.n	80141da <_sbrk_r+0x1a>
 80141d4:	682b      	ldr	r3, [r5, #0]
 80141d6:	b103      	cbz	r3, 80141da <_sbrk_r+0x1a>
 80141d8:	6023      	str	r3, [r4, #0]
 80141da:	bd38      	pop	{r3, r4, r5, pc}
 80141dc:	20006000 	.word	0x20006000

080141e0 <__assert_func>:
 80141e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141e2:	4614      	mov	r4, r2
 80141e4:	461a      	mov	r2, r3
 80141e6:	4b09      	ldr	r3, [pc, #36]	@ (801420c <__assert_func+0x2c>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4605      	mov	r5, r0
 80141ec:	68d8      	ldr	r0, [r3, #12]
 80141ee:	b954      	cbnz	r4, 8014206 <__assert_func+0x26>
 80141f0:	4b07      	ldr	r3, [pc, #28]	@ (8014210 <__assert_func+0x30>)
 80141f2:	461c      	mov	r4, r3
 80141f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141f8:	9100      	str	r1, [sp, #0]
 80141fa:	462b      	mov	r3, r5
 80141fc:	4905      	ldr	r1, [pc, #20]	@ (8014214 <__assert_func+0x34>)
 80141fe:	f000 f86f 	bl	80142e0 <fiprintf>
 8014202:	f000 f87f 	bl	8014304 <abort>
 8014206:	4b04      	ldr	r3, [pc, #16]	@ (8014218 <__assert_func+0x38>)
 8014208:	e7f4      	b.n	80141f4 <__assert_func+0x14>
 801420a:	bf00      	nop
 801420c:	20000194 	.word	0x20000194
 8014210:	08015d1e 	.word	0x08015d1e
 8014214:	08015cf0 	.word	0x08015cf0
 8014218:	08015ce3 	.word	0x08015ce3

0801421c <_calloc_r>:
 801421c:	b570      	push	{r4, r5, r6, lr}
 801421e:	fba1 5402 	umull	r5, r4, r1, r2
 8014222:	b93c      	cbnz	r4, 8014234 <_calloc_r+0x18>
 8014224:	4629      	mov	r1, r5
 8014226:	f7ff f99f 	bl	8013568 <_malloc_r>
 801422a:	4606      	mov	r6, r0
 801422c:	b928      	cbnz	r0, 801423a <_calloc_r+0x1e>
 801422e:	2600      	movs	r6, #0
 8014230:	4630      	mov	r0, r6
 8014232:	bd70      	pop	{r4, r5, r6, pc}
 8014234:	220c      	movs	r2, #12
 8014236:	6002      	str	r2, [r0, #0]
 8014238:	e7f9      	b.n	801422e <_calloc_r+0x12>
 801423a:	462a      	mov	r2, r5
 801423c:	4621      	mov	r1, r4
 801423e:	f7fe f9ee 	bl	801261e <memset>
 8014242:	e7f5      	b.n	8014230 <_calloc_r+0x14>

08014244 <__ascii_mbtowc>:
 8014244:	b082      	sub	sp, #8
 8014246:	b901      	cbnz	r1, 801424a <__ascii_mbtowc+0x6>
 8014248:	a901      	add	r1, sp, #4
 801424a:	b142      	cbz	r2, 801425e <__ascii_mbtowc+0x1a>
 801424c:	b14b      	cbz	r3, 8014262 <__ascii_mbtowc+0x1e>
 801424e:	7813      	ldrb	r3, [r2, #0]
 8014250:	600b      	str	r3, [r1, #0]
 8014252:	7812      	ldrb	r2, [r2, #0]
 8014254:	1e10      	subs	r0, r2, #0
 8014256:	bf18      	it	ne
 8014258:	2001      	movne	r0, #1
 801425a:	b002      	add	sp, #8
 801425c:	4770      	bx	lr
 801425e:	4610      	mov	r0, r2
 8014260:	e7fb      	b.n	801425a <__ascii_mbtowc+0x16>
 8014262:	f06f 0001 	mvn.w	r0, #1
 8014266:	e7f8      	b.n	801425a <__ascii_mbtowc+0x16>

08014268 <_realloc_r>:
 8014268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801426c:	4680      	mov	r8, r0
 801426e:	4615      	mov	r5, r2
 8014270:	460c      	mov	r4, r1
 8014272:	b921      	cbnz	r1, 801427e <_realloc_r+0x16>
 8014274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014278:	4611      	mov	r1, r2
 801427a:	f7ff b975 	b.w	8013568 <_malloc_r>
 801427e:	b92a      	cbnz	r2, 801428c <_realloc_r+0x24>
 8014280:	f7ff f8fe 	bl	8013480 <_free_r>
 8014284:	2400      	movs	r4, #0
 8014286:	4620      	mov	r0, r4
 8014288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801428c:	f000 f841 	bl	8014312 <_malloc_usable_size_r>
 8014290:	4285      	cmp	r5, r0
 8014292:	4606      	mov	r6, r0
 8014294:	d802      	bhi.n	801429c <_realloc_r+0x34>
 8014296:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801429a:	d8f4      	bhi.n	8014286 <_realloc_r+0x1e>
 801429c:	4629      	mov	r1, r5
 801429e:	4640      	mov	r0, r8
 80142a0:	f7ff f962 	bl	8013568 <_malloc_r>
 80142a4:	4607      	mov	r7, r0
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d0ec      	beq.n	8014284 <_realloc_r+0x1c>
 80142aa:	42b5      	cmp	r5, r6
 80142ac:	462a      	mov	r2, r5
 80142ae:	4621      	mov	r1, r4
 80142b0:	bf28      	it	cs
 80142b2:	4632      	movcs	r2, r6
 80142b4:	f7fe fa89 	bl	80127ca <memcpy>
 80142b8:	4621      	mov	r1, r4
 80142ba:	4640      	mov	r0, r8
 80142bc:	f7ff f8e0 	bl	8013480 <_free_r>
 80142c0:	463c      	mov	r4, r7
 80142c2:	e7e0      	b.n	8014286 <_realloc_r+0x1e>

080142c4 <__ascii_wctomb>:
 80142c4:	4603      	mov	r3, r0
 80142c6:	4608      	mov	r0, r1
 80142c8:	b141      	cbz	r1, 80142dc <__ascii_wctomb+0x18>
 80142ca:	2aff      	cmp	r2, #255	@ 0xff
 80142cc:	d904      	bls.n	80142d8 <__ascii_wctomb+0x14>
 80142ce:	228a      	movs	r2, #138	@ 0x8a
 80142d0:	601a      	str	r2, [r3, #0]
 80142d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142d6:	4770      	bx	lr
 80142d8:	700a      	strb	r2, [r1, #0]
 80142da:	2001      	movs	r0, #1
 80142dc:	4770      	bx	lr
	...

080142e0 <fiprintf>:
 80142e0:	b40e      	push	{r1, r2, r3}
 80142e2:	b503      	push	{r0, r1, lr}
 80142e4:	4601      	mov	r1, r0
 80142e6:	ab03      	add	r3, sp, #12
 80142e8:	4805      	ldr	r0, [pc, #20]	@ (8014300 <fiprintf+0x20>)
 80142ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80142ee:	6800      	ldr	r0, [r0, #0]
 80142f0:	9301      	str	r3, [sp, #4]
 80142f2:	f000 f83f 	bl	8014374 <_vfiprintf_r>
 80142f6:	b002      	add	sp, #8
 80142f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142fc:	b003      	add	sp, #12
 80142fe:	4770      	bx	lr
 8014300:	20000194 	.word	0x20000194

08014304 <abort>:
 8014304:	b508      	push	{r3, lr}
 8014306:	2006      	movs	r0, #6
 8014308:	f000 fa08 	bl	801471c <raise>
 801430c:	2001      	movs	r0, #1
 801430e:	f7ef f8b3 	bl	8003478 <_exit>

08014312 <_malloc_usable_size_r>:
 8014312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014316:	1f18      	subs	r0, r3, #4
 8014318:	2b00      	cmp	r3, #0
 801431a:	bfbc      	itt	lt
 801431c:	580b      	ldrlt	r3, [r1, r0]
 801431e:	18c0      	addlt	r0, r0, r3
 8014320:	4770      	bx	lr

08014322 <__sfputc_r>:
 8014322:	6893      	ldr	r3, [r2, #8]
 8014324:	3b01      	subs	r3, #1
 8014326:	2b00      	cmp	r3, #0
 8014328:	b410      	push	{r4}
 801432a:	6093      	str	r3, [r2, #8]
 801432c:	da08      	bge.n	8014340 <__sfputc_r+0x1e>
 801432e:	6994      	ldr	r4, [r2, #24]
 8014330:	42a3      	cmp	r3, r4
 8014332:	db01      	blt.n	8014338 <__sfputc_r+0x16>
 8014334:	290a      	cmp	r1, #10
 8014336:	d103      	bne.n	8014340 <__sfputc_r+0x1e>
 8014338:	f85d 4b04 	ldr.w	r4, [sp], #4
 801433c:	f000 b932 	b.w	80145a4 <__swbuf_r>
 8014340:	6813      	ldr	r3, [r2, #0]
 8014342:	1c58      	adds	r0, r3, #1
 8014344:	6010      	str	r0, [r2, #0]
 8014346:	7019      	strb	r1, [r3, #0]
 8014348:	4608      	mov	r0, r1
 801434a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801434e:	4770      	bx	lr

08014350 <__sfputs_r>:
 8014350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014352:	4606      	mov	r6, r0
 8014354:	460f      	mov	r7, r1
 8014356:	4614      	mov	r4, r2
 8014358:	18d5      	adds	r5, r2, r3
 801435a:	42ac      	cmp	r4, r5
 801435c:	d101      	bne.n	8014362 <__sfputs_r+0x12>
 801435e:	2000      	movs	r0, #0
 8014360:	e007      	b.n	8014372 <__sfputs_r+0x22>
 8014362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014366:	463a      	mov	r2, r7
 8014368:	4630      	mov	r0, r6
 801436a:	f7ff ffda 	bl	8014322 <__sfputc_r>
 801436e:	1c43      	adds	r3, r0, #1
 8014370:	d1f3      	bne.n	801435a <__sfputs_r+0xa>
 8014372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014374 <_vfiprintf_r>:
 8014374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014378:	460d      	mov	r5, r1
 801437a:	b09d      	sub	sp, #116	@ 0x74
 801437c:	4614      	mov	r4, r2
 801437e:	4698      	mov	r8, r3
 8014380:	4606      	mov	r6, r0
 8014382:	b118      	cbz	r0, 801438c <_vfiprintf_r+0x18>
 8014384:	6a03      	ldr	r3, [r0, #32]
 8014386:	b90b      	cbnz	r3, 801438c <_vfiprintf_r+0x18>
 8014388:	f7fe f89c 	bl	80124c4 <__sinit>
 801438c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801438e:	07d9      	lsls	r1, r3, #31
 8014390:	d405      	bmi.n	801439e <_vfiprintf_r+0x2a>
 8014392:	89ab      	ldrh	r3, [r5, #12]
 8014394:	059a      	lsls	r2, r3, #22
 8014396:	d402      	bmi.n	801439e <_vfiprintf_r+0x2a>
 8014398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801439a:	f7fe fa14 	bl	80127c6 <__retarget_lock_acquire_recursive>
 801439e:	89ab      	ldrh	r3, [r5, #12]
 80143a0:	071b      	lsls	r3, r3, #28
 80143a2:	d501      	bpl.n	80143a8 <_vfiprintf_r+0x34>
 80143a4:	692b      	ldr	r3, [r5, #16]
 80143a6:	b99b      	cbnz	r3, 80143d0 <_vfiprintf_r+0x5c>
 80143a8:	4629      	mov	r1, r5
 80143aa:	4630      	mov	r0, r6
 80143ac:	f000 f938 	bl	8014620 <__swsetup_r>
 80143b0:	b170      	cbz	r0, 80143d0 <_vfiprintf_r+0x5c>
 80143b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143b4:	07dc      	lsls	r4, r3, #31
 80143b6:	d504      	bpl.n	80143c2 <_vfiprintf_r+0x4e>
 80143b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143bc:	b01d      	add	sp, #116	@ 0x74
 80143be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c2:	89ab      	ldrh	r3, [r5, #12]
 80143c4:	0598      	lsls	r0, r3, #22
 80143c6:	d4f7      	bmi.n	80143b8 <_vfiprintf_r+0x44>
 80143c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143ca:	f7fe f9fd 	bl	80127c8 <__retarget_lock_release_recursive>
 80143ce:	e7f3      	b.n	80143b8 <_vfiprintf_r+0x44>
 80143d0:	2300      	movs	r3, #0
 80143d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80143d4:	2320      	movs	r3, #32
 80143d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80143da:	f8cd 800c 	str.w	r8, [sp, #12]
 80143de:	2330      	movs	r3, #48	@ 0x30
 80143e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014590 <_vfiprintf_r+0x21c>
 80143e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80143e8:	f04f 0901 	mov.w	r9, #1
 80143ec:	4623      	mov	r3, r4
 80143ee:	469a      	mov	sl, r3
 80143f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143f4:	b10a      	cbz	r2, 80143fa <_vfiprintf_r+0x86>
 80143f6:	2a25      	cmp	r2, #37	@ 0x25
 80143f8:	d1f9      	bne.n	80143ee <_vfiprintf_r+0x7a>
 80143fa:	ebba 0b04 	subs.w	fp, sl, r4
 80143fe:	d00b      	beq.n	8014418 <_vfiprintf_r+0xa4>
 8014400:	465b      	mov	r3, fp
 8014402:	4622      	mov	r2, r4
 8014404:	4629      	mov	r1, r5
 8014406:	4630      	mov	r0, r6
 8014408:	f7ff ffa2 	bl	8014350 <__sfputs_r>
 801440c:	3001      	adds	r0, #1
 801440e:	f000 80a7 	beq.w	8014560 <_vfiprintf_r+0x1ec>
 8014412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014414:	445a      	add	r2, fp
 8014416:	9209      	str	r2, [sp, #36]	@ 0x24
 8014418:	f89a 3000 	ldrb.w	r3, [sl]
 801441c:	2b00      	cmp	r3, #0
 801441e:	f000 809f 	beq.w	8014560 <_vfiprintf_r+0x1ec>
 8014422:	2300      	movs	r3, #0
 8014424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801442c:	f10a 0a01 	add.w	sl, sl, #1
 8014430:	9304      	str	r3, [sp, #16]
 8014432:	9307      	str	r3, [sp, #28]
 8014434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014438:	931a      	str	r3, [sp, #104]	@ 0x68
 801443a:	4654      	mov	r4, sl
 801443c:	2205      	movs	r2, #5
 801443e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014442:	4853      	ldr	r0, [pc, #332]	@ (8014590 <_vfiprintf_r+0x21c>)
 8014444:	f7eb feec 	bl	8000220 <memchr>
 8014448:	9a04      	ldr	r2, [sp, #16]
 801444a:	b9d8      	cbnz	r0, 8014484 <_vfiprintf_r+0x110>
 801444c:	06d1      	lsls	r1, r2, #27
 801444e:	bf44      	itt	mi
 8014450:	2320      	movmi	r3, #32
 8014452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014456:	0713      	lsls	r3, r2, #28
 8014458:	bf44      	itt	mi
 801445a:	232b      	movmi	r3, #43	@ 0x2b
 801445c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014460:	f89a 3000 	ldrb.w	r3, [sl]
 8014464:	2b2a      	cmp	r3, #42	@ 0x2a
 8014466:	d015      	beq.n	8014494 <_vfiprintf_r+0x120>
 8014468:	9a07      	ldr	r2, [sp, #28]
 801446a:	4654      	mov	r4, sl
 801446c:	2000      	movs	r0, #0
 801446e:	f04f 0c0a 	mov.w	ip, #10
 8014472:	4621      	mov	r1, r4
 8014474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014478:	3b30      	subs	r3, #48	@ 0x30
 801447a:	2b09      	cmp	r3, #9
 801447c:	d94b      	bls.n	8014516 <_vfiprintf_r+0x1a2>
 801447e:	b1b0      	cbz	r0, 80144ae <_vfiprintf_r+0x13a>
 8014480:	9207      	str	r2, [sp, #28]
 8014482:	e014      	b.n	80144ae <_vfiprintf_r+0x13a>
 8014484:	eba0 0308 	sub.w	r3, r0, r8
 8014488:	fa09 f303 	lsl.w	r3, r9, r3
 801448c:	4313      	orrs	r3, r2
 801448e:	9304      	str	r3, [sp, #16]
 8014490:	46a2      	mov	sl, r4
 8014492:	e7d2      	b.n	801443a <_vfiprintf_r+0xc6>
 8014494:	9b03      	ldr	r3, [sp, #12]
 8014496:	1d19      	adds	r1, r3, #4
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	9103      	str	r1, [sp, #12]
 801449c:	2b00      	cmp	r3, #0
 801449e:	bfbb      	ittet	lt
 80144a0:	425b      	neglt	r3, r3
 80144a2:	f042 0202 	orrlt.w	r2, r2, #2
 80144a6:	9307      	strge	r3, [sp, #28]
 80144a8:	9307      	strlt	r3, [sp, #28]
 80144aa:	bfb8      	it	lt
 80144ac:	9204      	strlt	r2, [sp, #16]
 80144ae:	7823      	ldrb	r3, [r4, #0]
 80144b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80144b2:	d10a      	bne.n	80144ca <_vfiprintf_r+0x156>
 80144b4:	7863      	ldrb	r3, [r4, #1]
 80144b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80144b8:	d132      	bne.n	8014520 <_vfiprintf_r+0x1ac>
 80144ba:	9b03      	ldr	r3, [sp, #12]
 80144bc:	1d1a      	adds	r2, r3, #4
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	9203      	str	r2, [sp, #12]
 80144c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80144c6:	3402      	adds	r4, #2
 80144c8:	9305      	str	r3, [sp, #20]
 80144ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80145a0 <_vfiprintf_r+0x22c>
 80144ce:	7821      	ldrb	r1, [r4, #0]
 80144d0:	2203      	movs	r2, #3
 80144d2:	4650      	mov	r0, sl
 80144d4:	f7eb fea4 	bl	8000220 <memchr>
 80144d8:	b138      	cbz	r0, 80144ea <_vfiprintf_r+0x176>
 80144da:	9b04      	ldr	r3, [sp, #16]
 80144dc:	eba0 000a 	sub.w	r0, r0, sl
 80144e0:	2240      	movs	r2, #64	@ 0x40
 80144e2:	4082      	lsls	r2, r0
 80144e4:	4313      	orrs	r3, r2
 80144e6:	3401      	adds	r4, #1
 80144e8:	9304      	str	r3, [sp, #16]
 80144ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ee:	4829      	ldr	r0, [pc, #164]	@ (8014594 <_vfiprintf_r+0x220>)
 80144f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80144f4:	2206      	movs	r2, #6
 80144f6:	f7eb fe93 	bl	8000220 <memchr>
 80144fa:	2800      	cmp	r0, #0
 80144fc:	d03f      	beq.n	801457e <_vfiprintf_r+0x20a>
 80144fe:	4b26      	ldr	r3, [pc, #152]	@ (8014598 <_vfiprintf_r+0x224>)
 8014500:	bb1b      	cbnz	r3, 801454a <_vfiprintf_r+0x1d6>
 8014502:	9b03      	ldr	r3, [sp, #12]
 8014504:	3307      	adds	r3, #7
 8014506:	f023 0307 	bic.w	r3, r3, #7
 801450a:	3308      	adds	r3, #8
 801450c:	9303      	str	r3, [sp, #12]
 801450e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014510:	443b      	add	r3, r7
 8014512:	9309      	str	r3, [sp, #36]	@ 0x24
 8014514:	e76a      	b.n	80143ec <_vfiprintf_r+0x78>
 8014516:	fb0c 3202 	mla	r2, ip, r2, r3
 801451a:	460c      	mov	r4, r1
 801451c:	2001      	movs	r0, #1
 801451e:	e7a8      	b.n	8014472 <_vfiprintf_r+0xfe>
 8014520:	2300      	movs	r3, #0
 8014522:	3401      	adds	r4, #1
 8014524:	9305      	str	r3, [sp, #20]
 8014526:	4619      	mov	r1, r3
 8014528:	f04f 0c0a 	mov.w	ip, #10
 801452c:	4620      	mov	r0, r4
 801452e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014532:	3a30      	subs	r2, #48	@ 0x30
 8014534:	2a09      	cmp	r2, #9
 8014536:	d903      	bls.n	8014540 <_vfiprintf_r+0x1cc>
 8014538:	2b00      	cmp	r3, #0
 801453a:	d0c6      	beq.n	80144ca <_vfiprintf_r+0x156>
 801453c:	9105      	str	r1, [sp, #20]
 801453e:	e7c4      	b.n	80144ca <_vfiprintf_r+0x156>
 8014540:	fb0c 2101 	mla	r1, ip, r1, r2
 8014544:	4604      	mov	r4, r0
 8014546:	2301      	movs	r3, #1
 8014548:	e7f0      	b.n	801452c <_vfiprintf_r+0x1b8>
 801454a:	ab03      	add	r3, sp, #12
 801454c:	9300      	str	r3, [sp, #0]
 801454e:	462a      	mov	r2, r5
 8014550:	4b12      	ldr	r3, [pc, #72]	@ (801459c <_vfiprintf_r+0x228>)
 8014552:	a904      	add	r1, sp, #16
 8014554:	4630      	mov	r0, r6
 8014556:	f7fd fb71 	bl	8011c3c <_printf_float>
 801455a:	4607      	mov	r7, r0
 801455c:	1c78      	adds	r0, r7, #1
 801455e:	d1d6      	bne.n	801450e <_vfiprintf_r+0x19a>
 8014560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014562:	07d9      	lsls	r1, r3, #31
 8014564:	d405      	bmi.n	8014572 <_vfiprintf_r+0x1fe>
 8014566:	89ab      	ldrh	r3, [r5, #12]
 8014568:	059a      	lsls	r2, r3, #22
 801456a:	d402      	bmi.n	8014572 <_vfiprintf_r+0x1fe>
 801456c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801456e:	f7fe f92b 	bl	80127c8 <__retarget_lock_release_recursive>
 8014572:	89ab      	ldrh	r3, [r5, #12]
 8014574:	065b      	lsls	r3, r3, #25
 8014576:	f53f af1f 	bmi.w	80143b8 <_vfiprintf_r+0x44>
 801457a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801457c:	e71e      	b.n	80143bc <_vfiprintf_r+0x48>
 801457e:	ab03      	add	r3, sp, #12
 8014580:	9300      	str	r3, [sp, #0]
 8014582:	462a      	mov	r2, r5
 8014584:	4b05      	ldr	r3, [pc, #20]	@ (801459c <_vfiprintf_r+0x228>)
 8014586:	a904      	add	r1, sp, #16
 8014588:	4630      	mov	r0, r6
 801458a:	f7fd fdef 	bl	801216c <_printf_i>
 801458e:	e7e4      	b.n	801455a <_vfiprintf_r+0x1e6>
 8014590:	08015cc8 	.word	0x08015cc8
 8014594:	08015cd2 	.word	0x08015cd2
 8014598:	08011c3d 	.word	0x08011c3d
 801459c:	08014351 	.word	0x08014351
 80145a0:	08015cce 	.word	0x08015cce

080145a4 <__swbuf_r>:
 80145a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a6:	460e      	mov	r6, r1
 80145a8:	4614      	mov	r4, r2
 80145aa:	4605      	mov	r5, r0
 80145ac:	b118      	cbz	r0, 80145b6 <__swbuf_r+0x12>
 80145ae:	6a03      	ldr	r3, [r0, #32]
 80145b0:	b90b      	cbnz	r3, 80145b6 <__swbuf_r+0x12>
 80145b2:	f7fd ff87 	bl	80124c4 <__sinit>
 80145b6:	69a3      	ldr	r3, [r4, #24]
 80145b8:	60a3      	str	r3, [r4, #8]
 80145ba:	89a3      	ldrh	r3, [r4, #12]
 80145bc:	071a      	lsls	r2, r3, #28
 80145be:	d501      	bpl.n	80145c4 <__swbuf_r+0x20>
 80145c0:	6923      	ldr	r3, [r4, #16]
 80145c2:	b943      	cbnz	r3, 80145d6 <__swbuf_r+0x32>
 80145c4:	4621      	mov	r1, r4
 80145c6:	4628      	mov	r0, r5
 80145c8:	f000 f82a 	bl	8014620 <__swsetup_r>
 80145cc:	b118      	cbz	r0, 80145d6 <__swbuf_r+0x32>
 80145ce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80145d2:	4638      	mov	r0, r7
 80145d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d6:	6823      	ldr	r3, [r4, #0]
 80145d8:	6922      	ldr	r2, [r4, #16]
 80145da:	1a98      	subs	r0, r3, r2
 80145dc:	6963      	ldr	r3, [r4, #20]
 80145de:	b2f6      	uxtb	r6, r6
 80145e0:	4283      	cmp	r3, r0
 80145e2:	4637      	mov	r7, r6
 80145e4:	dc05      	bgt.n	80145f2 <__swbuf_r+0x4e>
 80145e6:	4621      	mov	r1, r4
 80145e8:	4628      	mov	r0, r5
 80145ea:	f7ff fda7 	bl	801413c <_fflush_r>
 80145ee:	2800      	cmp	r0, #0
 80145f0:	d1ed      	bne.n	80145ce <__swbuf_r+0x2a>
 80145f2:	68a3      	ldr	r3, [r4, #8]
 80145f4:	3b01      	subs	r3, #1
 80145f6:	60a3      	str	r3, [r4, #8]
 80145f8:	6823      	ldr	r3, [r4, #0]
 80145fa:	1c5a      	adds	r2, r3, #1
 80145fc:	6022      	str	r2, [r4, #0]
 80145fe:	701e      	strb	r6, [r3, #0]
 8014600:	6962      	ldr	r2, [r4, #20]
 8014602:	1c43      	adds	r3, r0, #1
 8014604:	429a      	cmp	r2, r3
 8014606:	d004      	beq.n	8014612 <__swbuf_r+0x6e>
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	07db      	lsls	r3, r3, #31
 801460c:	d5e1      	bpl.n	80145d2 <__swbuf_r+0x2e>
 801460e:	2e0a      	cmp	r6, #10
 8014610:	d1df      	bne.n	80145d2 <__swbuf_r+0x2e>
 8014612:	4621      	mov	r1, r4
 8014614:	4628      	mov	r0, r5
 8014616:	f7ff fd91 	bl	801413c <_fflush_r>
 801461a:	2800      	cmp	r0, #0
 801461c:	d0d9      	beq.n	80145d2 <__swbuf_r+0x2e>
 801461e:	e7d6      	b.n	80145ce <__swbuf_r+0x2a>

08014620 <__swsetup_r>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	4b29      	ldr	r3, [pc, #164]	@ (80146c8 <__swsetup_r+0xa8>)
 8014624:	4605      	mov	r5, r0
 8014626:	6818      	ldr	r0, [r3, #0]
 8014628:	460c      	mov	r4, r1
 801462a:	b118      	cbz	r0, 8014634 <__swsetup_r+0x14>
 801462c:	6a03      	ldr	r3, [r0, #32]
 801462e:	b90b      	cbnz	r3, 8014634 <__swsetup_r+0x14>
 8014630:	f7fd ff48 	bl	80124c4 <__sinit>
 8014634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014638:	0719      	lsls	r1, r3, #28
 801463a:	d422      	bmi.n	8014682 <__swsetup_r+0x62>
 801463c:	06da      	lsls	r2, r3, #27
 801463e:	d407      	bmi.n	8014650 <__swsetup_r+0x30>
 8014640:	2209      	movs	r2, #9
 8014642:	602a      	str	r2, [r5, #0]
 8014644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014648:	81a3      	strh	r3, [r4, #12]
 801464a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801464e:	e033      	b.n	80146b8 <__swsetup_r+0x98>
 8014650:	0758      	lsls	r0, r3, #29
 8014652:	d512      	bpl.n	801467a <__swsetup_r+0x5a>
 8014654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014656:	b141      	cbz	r1, 801466a <__swsetup_r+0x4a>
 8014658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801465c:	4299      	cmp	r1, r3
 801465e:	d002      	beq.n	8014666 <__swsetup_r+0x46>
 8014660:	4628      	mov	r0, r5
 8014662:	f7fe ff0d 	bl	8013480 <_free_r>
 8014666:	2300      	movs	r3, #0
 8014668:	6363      	str	r3, [r4, #52]	@ 0x34
 801466a:	89a3      	ldrh	r3, [r4, #12]
 801466c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014670:	81a3      	strh	r3, [r4, #12]
 8014672:	2300      	movs	r3, #0
 8014674:	6063      	str	r3, [r4, #4]
 8014676:	6923      	ldr	r3, [r4, #16]
 8014678:	6023      	str	r3, [r4, #0]
 801467a:	89a3      	ldrh	r3, [r4, #12]
 801467c:	f043 0308 	orr.w	r3, r3, #8
 8014680:	81a3      	strh	r3, [r4, #12]
 8014682:	6923      	ldr	r3, [r4, #16]
 8014684:	b94b      	cbnz	r3, 801469a <__swsetup_r+0x7a>
 8014686:	89a3      	ldrh	r3, [r4, #12]
 8014688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801468c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014690:	d003      	beq.n	801469a <__swsetup_r+0x7a>
 8014692:	4621      	mov	r1, r4
 8014694:	4628      	mov	r0, r5
 8014696:	f000 f883 	bl	80147a0 <__smakebuf_r>
 801469a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801469e:	f013 0201 	ands.w	r2, r3, #1
 80146a2:	d00a      	beq.n	80146ba <__swsetup_r+0x9a>
 80146a4:	2200      	movs	r2, #0
 80146a6:	60a2      	str	r2, [r4, #8]
 80146a8:	6962      	ldr	r2, [r4, #20]
 80146aa:	4252      	negs	r2, r2
 80146ac:	61a2      	str	r2, [r4, #24]
 80146ae:	6922      	ldr	r2, [r4, #16]
 80146b0:	b942      	cbnz	r2, 80146c4 <__swsetup_r+0xa4>
 80146b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80146b6:	d1c5      	bne.n	8014644 <__swsetup_r+0x24>
 80146b8:	bd38      	pop	{r3, r4, r5, pc}
 80146ba:	0799      	lsls	r1, r3, #30
 80146bc:	bf58      	it	pl
 80146be:	6962      	ldrpl	r2, [r4, #20]
 80146c0:	60a2      	str	r2, [r4, #8]
 80146c2:	e7f4      	b.n	80146ae <__swsetup_r+0x8e>
 80146c4:	2000      	movs	r0, #0
 80146c6:	e7f7      	b.n	80146b8 <__swsetup_r+0x98>
 80146c8:	20000194 	.word	0x20000194

080146cc <_raise_r>:
 80146cc:	291f      	cmp	r1, #31
 80146ce:	b538      	push	{r3, r4, r5, lr}
 80146d0:	4605      	mov	r5, r0
 80146d2:	460c      	mov	r4, r1
 80146d4:	d904      	bls.n	80146e0 <_raise_r+0x14>
 80146d6:	2316      	movs	r3, #22
 80146d8:	6003      	str	r3, [r0, #0]
 80146da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146de:	bd38      	pop	{r3, r4, r5, pc}
 80146e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80146e2:	b112      	cbz	r2, 80146ea <_raise_r+0x1e>
 80146e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146e8:	b94b      	cbnz	r3, 80146fe <_raise_r+0x32>
 80146ea:	4628      	mov	r0, r5
 80146ec:	f000 f830 	bl	8014750 <_getpid_r>
 80146f0:	4622      	mov	r2, r4
 80146f2:	4601      	mov	r1, r0
 80146f4:	4628      	mov	r0, r5
 80146f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146fa:	f000 b817 	b.w	801472c <_kill_r>
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d00a      	beq.n	8014718 <_raise_r+0x4c>
 8014702:	1c59      	adds	r1, r3, #1
 8014704:	d103      	bne.n	801470e <_raise_r+0x42>
 8014706:	2316      	movs	r3, #22
 8014708:	6003      	str	r3, [r0, #0]
 801470a:	2001      	movs	r0, #1
 801470c:	e7e7      	b.n	80146de <_raise_r+0x12>
 801470e:	2100      	movs	r1, #0
 8014710:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014714:	4620      	mov	r0, r4
 8014716:	4798      	blx	r3
 8014718:	2000      	movs	r0, #0
 801471a:	e7e0      	b.n	80146de <_raise_r+0x12>

0801471c <raise>:
 801471c:	4b02      	ldr	r3, [pc, #8]	@ (8014728 <raise+0xc>)
 801471e:	4601      	mov	r1, r0
 8014720:	6818      	ldr	r0, [r3, #0]
 8014722:	f7ff bfd3 	b.w	80146cc <_raise_r>
 8014726:	bf00      	nop
 8014728:	20000194 	.word	0x20000194

0801472c <_kill_r>:
 801472c:	b538      	push	{r3, r4, r5, lr}
 801472e:	4d07      	ldr	r5, [pc, #28]	@ (801474c <_kill_r+0x20>)
 8014730:	2300      	movs	r3, #0
 8014732:	4604      	mov	r4, r0
 8014734:	4608      	mov	r0, r1
 8014736:	4611      	mov	r1, r2
 8014738:	602b      	str	r3, [r5, #0]
 801473a:	f7ee fe8d 	bl	8003458 <_kill>
 801473e:	1c43      	adds	r3, r0, #1
 8014740:	d102      	bne.n	8014748 <_kill_r+0x1c>
 8014742:	682b      	ldr	r3, [r5, #0]
 8014744:	b103      	cbz	r3, 8014748 <_kill_r+0x1c>
 8014746:	6023      	str	r3, [r4, #0]
 8014748:	bd38      	pop	{r3, r4, r5, pc}
 801474a:	bf00      	nop
 801474c:	20006000 	.word	0x20006000

08014750 <_getpid_r>:
 8014750:	f7ee be7a 	b.w	8003448 <_getpid>

08014754 <__swhatbuf_r>:
 8014754:	b570      	push	{r4, r5, r6, lr}
 8014756:	460c      	mov	r4, r1
 8014758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475c:	2900      	cmp	r1, #0
 801475e:	b096      	sub	sp, #88	@ 0x58
 8014760:	4615      	mov	r5, r2
 8014762:	461e      	mov	r6, r3
 8014764:	da0d      	bge.n	8014782 <__swhatbuf_r+0x2e>
 8014766:	89a3      	ldrh	r3, [r4, #12]
 8014768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801476c:	f04f 0100 	mov.w	r1, #0
 8014770:	bf14      	ite	ne
 8014772:	2340      	movne	r3, #64	@ 0x40
 8014774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014778:	2000      	movs	r0, #0
 801477a:	6031      	str	r1, [r6, #0]
 801477c:	602b      	str	r3, [r5, #0]
 801477e:	b016      	add	sp, #88	@ 0x58
 8014780:	bd70      	pop	{r4, r5, r6, pc}
 8014782:	466a      	mov	r2, sp
 8014784:	f000 f848 	bl	8014818 <_fstat_r>
 8014788:	2800      	cmp	r0, #0
 801478a:	dbec      	blt.n	8014766 <__swhatbuf_r+0x12>
 801478c:	9901      	ldr	r1, [sp, #4]
 801478e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014796:	4259      	negs	r1, r3
 8014798:	4159      	adcs	r1, r3
 801479a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801479e:	e7eb      	b.n	8014778 <__swhatbuf_r+0x24>

080147a0 <__smakebuf_r>:
 80147a0:	898b      	ldrh	r3, [r1, #12]
 80147a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147a4:	079d      	lsls	r5, r3, #30
 80147a6:	4606      	mov	r6, r0
 80147a8:	460c      	mov	r4, r1
 80147aa:	d507      	bpl.n	80147bc <__smakebuf_r+0x1c>
 80147ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	6123      	str	r3, [r4, #16]
 80147b4:	2301      	movs	r3, #1
 80147b6:	6163      	str	r3, [r4, #20]
 80147b8:	b003      	add	sp, #12
 80147ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147bc:	ab01      	add	r3, sp, #4
 80147be:	466a      	mov	r2, sp
 80147c0:	f7ff ffc8 	bl	8014754 <__swhatbuf_r>
 80147c4:	9f00      	ldr	r7, [sp, #0]
 80147c6:	4605      	mov	r5, r0
 80147c8:	4639      	mov	r1, r7
 80147ca:	4630      	mov	r0, r6
 80147cc:	f7fe fecc 	bl	8013568 <_malloc_r>
 80147d0:	b948      	cbnz	r0, 80147e6 <__smakebuf_r+0x46>
 80147d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147d6:	059a      	lsls	r2, r3, #22
 80147d8:	d4ee      	bmi.n	80147b8 <__smakebuf_r+0x18>
 80147da:	f023 0303 	bic.w	r3, r3, #3
 80147de:	f043 0302 	orr.w	r3, r3, #2
 80147e2:	81a3      	strh	r3, [r4, #12]
 80147e4:	e7e2      	b.n	80147ac <__smakebuf_r+0xc>
 80147e6:	89a3      	ldrh	r3, [r4, #12]
 80147e8:	6020      	str	r0, [r4, #0]
 80147ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147ee:	81a3      	strh	r3, [r4, #12]
 80147f0:	9b01      	ldr	r3, [sp, #4]
 80147f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80147f6:	b15b      	cbz	r3, 8014810 <__smakebuf_r+0x70>
 80147f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147fc:	4630      	mov	r0, r6
 80147fe:	f000 f81d 	bl	801483c <_isatty_r>
 8014802:	b128      	cbz	r0, 8014810 <__smakebuf_r+0x70>
 8014804:	89a3      	ldrh	r3, [r4, #12]
 8014806:	f023 0303 	bic.w	r3, r3, #3
 801480a:	f043 0301 	orr.w	r3, r3, #1
 801480e:	81a3      	strh	r3, [r4, #12]
 8014810:	89a3      	ldrh	r3, [r4, #12]
 8014812:	431d      	orrs	r5, r3
 8014814:	81a5      	strh	r5, [r4, #12]
 8014816:	e7cf      	b.n	80147b8 <__smakebuf_r+0x18>

08014818 <_fstat_r>:
 8014818:	b538      	push	{r3, r4, r5, lr}
 801481a:	4d07      	ldr	r5, [pc, #28]	@ (8014838 <_fstat_r+0x20>)
 801481c:	2300      	movs	r3, #0
 801481e:	4604      	mov	r4, r0
 8014820:	4608      	mov	r0, r1
 8014822:	4611      	mov	r1, r2
 8014824:	602b      	str	r3, [r5, #0]
 8014826:	f7ee fe77 	bl	8003518 <_fstat>
 801482a:	1c43      	adds	r3, r0, #1
 801482c:	d102      	bne.n	8014834 <_fstat_r+0x1c>
 801482e:	682b      	ldr	r3, [r5, #0]
 8014830:	b103      	cbz	r3, 8014834 <_fstat_r+0x1c>
 8014832:	6023      	str	r3, [r4, #0]
 8014834:	bd38      	pop	{r3, r4, r5, pc}
 8014836:	bf00      	nop
 8014838:	20006000 	.word	0x20006000

0801483c <_isatty_r>:
 801483c:	b538      	push	{r3, r4, r5, lr}
 801483e:	4d06      	ldr	r5, [pc, #24]	@ (8014858 <_isatty_r+0x1c>)
 8014840:	2300      	movs	r3, #0
 8014842:	4604      	mov	r4, r0
 8014844:	4608      	mov	r0, r1
 8014846:	602b      	str	r3, [r5, #0]
 8014848:	f7ee fe76 	bl	8003538 <_isatty>
 801484c:	1c43      	adds	r3, r0, #1
 801484e:	d102      	bne.n	8014856 <_isatty_r+0x1a>
 8014850:	682b      	ldr	r3, [r5, #0]
 8014852:	b103      	cbz	r3, 8014856 <_isatty_r+0x1a>
 8014854:	6023      	str	r3, [r4, #0]
 8014856:	bd38      	pop	{r3, r4, r5, pc}
 8014858:	20006000 	.word	0x20006000

0801485c <atan2f>:
 801485c:	f000 b862 	b.w	8014924 <__ieee754_atan2f>

08014860 <powf>:
 8014860:	b508      	push	{r3, lr}
 8014862:	ed2d 8b04 	vpush	{d8-d9}
 8014866:	eeb0 8a60 	vmov.f32	s16, s1
 801486a:	eeb0 9a40 	vmov.f32	s18, s0
 801486e:	f000 f8f9 	bl	8014a64 <__ieee754_powf>
 8014872:	eeb4 8a48 	vcmp.f32	s16, s16
 8014876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801487a:	eef0 8a40 	vmov.f32	s17, s0
 801487e:	d63e      	bvs.n	80148fe <powf+0x9e>
 8014880:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014888:	d112      	bne.n	80148b0 <powf+0x50>
 801488a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014892:	d039      	beq.n	8014908 <powf+0xa8>
 8014894:	eeb0 0a48 	vmov.f32	s0, s16
 8014898:	f000 f839 	bl	801490e <finitef>
 801489c:	b378      	cbz	r0, 80148fe <powf+0x9e>
 801489e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80148a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a6:	d52a      	bpl.n	80148fe <powf+0x9e>
 80148a8:	f7fd ff62 	bl	8012770 <__errno>
 80148ac:	2322      	movs	r3, #34	@ 0x22
 80148ae:	e014      	b.n	80148da <powf+0x7a>
 80148b0:	f000 f82d 	bl	801490e <finitef>
 80148b4:	b998      	cbnz	r0, 80148de <powf+0x7e>
 80148b6:	eeb0 0a49 	vmov.f32	s0, s18
 80148ba:	f000 f828 	bl	801490e <finitef>
 80148be:	b170      	cbz	r0, 80148de <powf+0x7e>
 80148c0:	eeb0 0a48 	vmov.f32	s0, s16
 80148c4:	f000 f823 	bl	801490e <finitef>
 80148c8:	b148      	cbz	r0, 80148de <powf+0x7e>
 80148ca:	eef4 8a68 	vcmp.f32	s17, s17
 80148ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d2:	d7e9      	bvc.n	80148a8 <powf+0x48>
 80148d4:	f7fd ff4c 	bl	8012770 <__errno>
 80148d8:	2321      	movs	r3, #33	@ 0x21
 80148da:	6003      	str	r3, [r0, #0]
 80148dc:	e00f      	b.n	80148fe <powf+0x9e>
 80148de:	eef5 8a40 	vcmp.f32	s17, #0.0
 80148e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e6:	d10a      	bne.n	80148fe <powf+0x9e>
 80148e8:	eeb0 0a49 	vmov.f32	s0, s18
 80148ec:	f000 f80f 	bl	801490e <finitef>
 80148f0:	b128      	cbz	r0, 80148fe <powf+0x9e>
 80148f2:	eeb0 0a48 	vmov.f32	s0, s16
 80148f6:	f000 f80a 	bl	801490e <finitef>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d1d4      	bne.n	80148a8 <powf+0x48>
 80148fe:	eeb0 0a68 	vmov.f32	s0, s17
 8014902:	ecbd 8b04 	vpop	{d8-d9}
 8014906:	bd08      	pop	{r3, pc}
 8014908:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801490c:	e7f7      	b.n	80148fe <powf+0x9e>

0801490e <finitef>:
 801490e:	ee10 3a10 	vmov	r3, s0
 8014912:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8014916:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801491a:	bfac      	ite	ge
 801491c:	2000      	movge	r0, #0
 801491e:	2001      	movlt	r0, #1
 8014920:	4770      	bx	lr
	...

08014924 <__ieee754_atan2f>:
 8014924:	ee10 2a90 	vmov	r2, s1
 8014928:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801492c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014930:	b510      	push	{r4, lr}
 8014932:	eef0 7a40 	vmov.f32	s15, s0
 8014936:	d806      	bhi.n	8014946 <__ieee754_atan2f+0x22>
 8014938:	ee10 0a10 	vmov	r0, s0
 801493c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8014940:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014944:	d904      	bls.n	8014950 <__ieee754_atan2f+0x2c>
 8014946:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801494a:	eeb0 0a67 	vmov.f32	s0, s15
 801494e:	bd10      	pop	{r4, pc}
 8014950:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8014954:	d103      	bne.n	801495e <__ieee754_atan2f+0x3a>
 8014956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801495a:	f000 bb53 	b.w	8015004 <atanf>
 801495e:	1794      	asrs	r4, r2, #30
 8014960:	f004 0402 	and.w	r4, r4, #2
 8014964:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014968:	b943      	cbnz	r3, 801497c <__ieee754_atan2f+0x58>
 801496a:	2c02      	cmp	r4, #2
 801496c:	d05e      	beq.n	8014a2c <__ieee754_atan2f+0x108>
 801496e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8014a40 <__ieee754_atan2f+0x11c>
 8014972:	2c03      	cmp	r4, #3
 8014974:	bf08      	it	eq
 8014976:	eef0 7a47 	vmoveq.f32	s15, s14
 801497a:	e7e6      	b.n	801494a <__ieee754_atan2f+0x26>
 801497c:	b941      	cbnz	r1, 8014990 <__ieee754_atan2f+0x6c>
 801497e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8014a44 <__ieee754_atan2f+0x120>
 8014982:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8014a48 <__ieee754_atan2f+0x124>
 8014986:	2800      	cmp	r0, #0
 8014988:	bfb8      	it	lt
 801498a:	eef0 7a47 	vmovlt.f32	s15, s14
 801498e:	e7dc      	b.n	801494a <__ieee754_atan2f+0x26>
 8014990:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014994:	d110      	bne.n	80149b8 <__ieee754_atan2f+0x94>
 8014996:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801499a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801499e:	d107      	bne.n	80149b0 <__ieee754_atan2f+0x8c>
 80149a0:	2c02      	cmp	r4, #2
 80149a2:	d846      	bhi.n	8014a32 <__ieee754_atan2f+0x10e>
 80149a4:	4b29      	ldr	r3, [pc, #164]	@ (8014a4c <__ieee754_atan2f+0x128>)
 80149a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80149aa:	edd3 7a00 	vldr	s15, [r3]
 80149ae:	e7cc      	b.n	801494a <__ieee754_atan2f+0x26>
 80149b0:	2c02      	cmp	r4, #2
 80149b2:	d841      	bhi.n	8014a38 <__ieee754_atan2f+0x114>
 80149b4:	4b26      	ldr	r3, [pc, #152]	@ (8014a50 <__ieee754_atan2f+0x12c>)
 80149b6:	e7f6      	b.n	80149a6 <__ieee754_atan2f+0x82>
 80149b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80149bc:	d0df      	beq.n	801497e <__ieee754_atan2f+0x5a>
 80149be:	1a5b      	subs	r3, r3, r1
 80149c0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80149c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80149c8:	da1a      	bge.n	8014a00 <__ieee754_atan2f+0xdc>
 80149ca:	2a00      	cmp	r2, #0
 80149cc:	da01      	bge.n	80149d2 <__ieee754_atan2f+0xae>
 80149ce:	313c      	adds	r1, #60	@ 0x3c
 80149d0:	db19      	blt.n	8014a06 <__ieee754_atan2f+0xe2>
 80149d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80149d6:	f000 fbe9 	bl	80151ac <fabsf>
 80149da:	f000 fb13 	bl	8015004 <atanf>
 80149de:	eef0 7a40 	vmov.f32	s15, s0
 80149e2:	2c01      	cmp	r4, #1
 80149e4:	d012      	beq.n	8014a0c <__ieee754_atan2f+0xe8>
 80149e6:	2c02      	cmp	r4, #2
 80149e8:	d017      	beq.n	8014a1a <__ieee754_atan2f+0xf6>
 80149ea:	2c00      	cmp	r4, #0
 80149ec:	d0ad      	beq.n	801494a <__ieee754_atan2f+0x26>
 80149ee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8014a54 <__ieee754_atan2f+0x130>
 80149f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8014a58 <__ieee754_atan2f+0x134>
 80149fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80149fe:	e7a4      	b.n	801494a <__ieee754_atan2f+0x26>
 8014a00:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8014a44 <__ieee754_atan2f+0x120>
 8014a04:	e7ed      	b.n	80149e2 <__ieee754_atan2f+0xbe>
 8014a06:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8014a5c <__ieee754_atan2f+0x138>
 8014a0a:	e7ea      	b.n	80149e2 <__ieee754_atan2f+0xbe>
 8014a0c:	ee17 3a90 	vmov	r3, s15
 8014a10:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8014a14:	ee07 3a90 	vmov	s15, r3
 8014a18:	e797      	b.n	801494a <__ieee754_atan2f+0x26>
 8014a1a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8014a54 <__ieee754_atan2f+0x130>
 8014a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a22:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8014a58 <__ieee754_atan2f+0x134>
 8014a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a2a:	e78e      	b.n	801494a <__ieee754_atan2f+0x26>
 8014a2c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8014a58 <__ieee754_atan2f+0x134>
 8014a30:	e78b      	b.n	801494a <__ieee754_atan2f+0x26>
 8014a32:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8014a60 <__ieee754_atan2f+0x13c>
 8014a36:	e788      	b.n	801494a <__ieee754_atan2f+0x26>
 8014a38:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8014a5c <__ieee754_atan2f+0x138>
 8014a3c:	e785      	b.n	801494a <__ieee754_atan2f+0x26>
 8014a3e:	bf00      	nop
 8014a40:	c0490fdb 	.word	0xc0490fdb
 8014a44:	3fc90fdb 	.word	0x3fc90fdb
 8014a48:	bfc90fdb 	.word	0xbfc90fdb
 8014a4c:	08015e2c 	.word	0x08015e2c
 8014a50:	08015e20 	.word	0x08015e20
 8014a54:	33bbbd2e 	.word	0x33bbbd2e
 8014a58:	40490fdb 	.word	0x40490fdb
 8014a5c:	00000000 	.word	0x00000000
 8014a60:	3f490fdb 	.word	0x3f490fdb

08014a64 <__ieee754_powf>:
 8014a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a68:	ee10 4a90 	vmov	r4, s1
 8014a6c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8014a70:	ed2d 8b02 	vpush	{d8}
 8014a74:	ee10 6a10 	vmov	r6, s0
 8014a78:	eeb0 8a40 	vmov.f32	s16, s0
 8014a7c:	eef0 8a60 	vmov.f32	s17, s1
 8014a80:	d10c      	bne.n	8014a9c <__ieee754_powf+0x38>
 8014a82:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8014a86:	0076      	lsls	r6, r6, #1
 8014a88:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8014a8c:	f240 829c 	bls.w	8014fc8 <__ieee754_powf+0x564>
 8014a90:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014a94:	ecbd 8b02 	vpop	{d8}
 8014a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a9c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8014aa0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8014aa4:	d802      	bhi.n	8014aac <__ieee754_powf+0x48>
 8014aa6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8014aaa:	d908      	bls.n	8014abe <__ieee754_powf+0x5a>
 8014aac:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8014ab0:	d1ee      	bne.n	8014a90 <__ieee754_powf+0x2c>
 8014ab2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8014ab6:	0064      	lsls	r4, r4, #1
 8014ab8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8014abc:	e7e6      	b.n	8014a8c <__ieee754_powf+0x28>
 8014abe:	2e00      	cmp	r6, #0
 8014ac0:	da1e      	bge.n	8014b00 <__ieee754_powf+0x9c>
 8014ac2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8014ac6:	d22b      	bcs.n	8014b20 <__ieee754_powf+0xbc>
 8014ac8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8014acc:	d332      	bcc.n	8014b34 <__ieee754_powf+0xd0>
 8014ace:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8014ad2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8014ad6:	fa49 f503 	asr.w	r5, r9, r3
 8014ada:	fa05 f303 	lsl.w	r3, r5, r3
 8014ade:	454b      	cmp	r3, r9
 8014ae0:	d126      	bne.n	8014b30 <__ieee754_powf+0xcc>
 8014ae2:	f005 0501 	and.w	r5, r5, #1
 8014ae6:	f1c5 0502 	rsb	r5, r5, #2
 8014aea:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8014aee:	d122      	bne.n	8014b36 <__ieee754_powf+0xd2>
 8014af0:	2c00      	cmp	r4, #0
 8014af2:	f280 826f 	bge.w	8014fd4 <__ieee754_powf+0x570>
 8014af6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014afa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014afe:	e7c9      	b.n	8014a94 <__ieee754_powf+0x30>
 8014b00:	2500      	movs	r5, #0
 8014b02:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8014b06:	d1f0      	bne.n	8014aea <__ieee754_powf+0x86>
 8014b08:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8014b0c:	f000 825c 	beq.w	8014fc8 <__ieee754_powf+0x564>
 8014b10:	d908      	bls.n	8014b24 <__ieee754_powf+0xc0>
 8014b12:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8014e74 <__ieee754_powf+0x410>
 8014b16:	2c00      	cmp	r4, #0
 8014b18:	bfa8      	it	ge
 8014b1a:	eeb0 0a68 	vmovge.f32	s0, s17
 8014b1e:	e7b9      	b.n	8014a94 <__ieee754_powf+0x30>
 8014b20:	2502      	movs	r5, #2
 8014b22:	e7ee      	b.n	8014b02 <__ieee754_powf+0x9e>
 8014b24:	2c00      	cmp	r4, #0
 8014b26:	f280 8252 	bge.w	8014fce <__ieee754_powf+0x56a>
 8014b2a:	eeb1 0a68 	vneg.f32	s0, s17
 8014b2e:	e7b1      	b.n	8014a94 <__ieee754_powf+0x30>
 8014b30:	2500      	movs	r5, #0
 8014b32:	e7da      	b.n	8014aea <__ieee754_powf+0x86>
 8014b34:	2500      	movs	r5, #0
 8014b36:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014b3a:	d102      	bne.n	8014b42 <__ieee754_powf+0xde>
 8014b3c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014b40:	e7a8      	b.n	8014a94 <__ieee754_powf+0x30>
 8014b42:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8014b46:	d109      	bne.n	8014b5c <__ieee754_powf+0xf8>
 8014b48:	2e00      	cmp	r6, #0
 8014b4a:	db07      	blt.n	8014b5c <__ieee754_powf+0xf8>
 8014b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8014b50:	ecbd 8b02 	vpop	{d8}
 8014b54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b58:	f000 bbbc 	b.w	80152d4 <__ieee754_sqrtf>
 8014b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8014b60:	f000 fb24 	bl	80151ac <fabsf>
 8014b64:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8014b68:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8014b6c:	4647      	mov	r7, r8
 8014b6e:	d002      	beq.n	8014b76 <__ieee754_powf+0x112>
 8014b70:	f1b8 0f00 	cmp.w	r8, #0
 8014b74:	d117      	bne.n	8014ba6 <__ieee754_powf+0x142>
 8014b76:	2c00      	cmp	r4, #0
 8014b78:	bfbc      	itt	lt
 8014b7a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8014b7e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014b82:	2e00      	cmp	r6, #0
 8014b84:	da86      	bge.n	8014a94 <__ieee754_powf+0x30>
 8014b86:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8014b8a:	ea58 0805 	orrs.w	r8, r8, r5
 8014b8e:	d104      	bne.n	8014b9a <__ieee754_powf+0x136>
 8014b90:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014b94:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014b98:	e77c      	b.n	8014a94 <__ieee754_powf+0x30>
 8014b9a:	2d01      	cmp	r5, #1
 8014b9c:	f47f af7a 	bne.w	8014a94 <__ieee754_powf+0x30>
 8014ba0:	eeb1 0a40 	vneg.f32	s0, s0
 8014ba4:	e776      	b.n	8014a94 <__ieee754_powf+0x30>
 8014ba6:	0ff0      	lsrs	r0, r6, #31
 8014ba8:	3801      	subs	r0, #1
 8014baa:	ea55 0300 	orrs.w	r3, r5, r0
 8014bae:	d104      	bne.n	8014bba <__ieee754_powf+0x156>
 8014bb0:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014bb4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014bb8:	e76c      	b.n	8014a94 <__ieee754_powf+0x30>
 8014bba:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8014bbe:	d973      	bls.n	8014ca8 <__ieee754_powf+0x244>
 8014bc0:	4bad      	ldr	r3, [pc, #692]	@ (8014e78 <__ieee754_powf+0x414>)
 8014bc2:	4598      	cmp	r8, r3
 8014bc4:	d808      	bhi.n	8014bd8 <__ieee754_powf+0x174>
 8014bc6:	2c00      	cmp	r4, #0
 8014bc8:	da0b      	bge.n	8014be2 <__ieee754_powf+0x17e>
 8014bca:	2000      	movs	r0, #0
 8014bcc:	ecbd 8b02 	vpop	{d8}
 8014bd0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bd4:	f000 bb78 	b.w	80152c8 <__math_oflowf>
 8014bd8:	4ba8      	ldr	r3, [pc, #672]	@ (8014e7c <__ieee754_powf+0x418>)
 8014bda:	4598      	cmp	r8, r3
 8014bdc:	d908      	bls.n	8014bf0 <__ieee754_powf+0x18c>
 8014bde:	2c00      	cmp	r4, #0
 8014be0:	dcf3      	bgt.n	8014bca <__ieee754_powf+0x166>
 8014be2:	2000      	movs	r0, #0
 8014be4:	ecbd 8b02 	vpop	{d8}
 8014be8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bec:	f000 bb66 	b.w	80152bc <__math_uflowf>
 8014bf0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014bf4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014bf8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8014e80 <__ieee754_powf+0x41c>
 8014bfc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8014c00:	eee0 6a67 	vfms.f32	s13, s0, s15
 8014c04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014c08:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8014c0c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014c14:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8014e84 <__ieee754_powf+0x420>
 8014c18:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8014c1c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8014e88 <__ieee754_powf+0x424>
 8014c20:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014c24:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8014e8c <__ieee754_powf+0x428>
 8014c28:	eef0 6a67 	vmov.f32	s13, s15
 8014c2c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8014c30:	ee16 3a90 	vmov	r3, s13
 8014c34:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8014c38:	f023 030f 	bic.w	r3, r3, #15
 8014c3c:	ee06 3a90 	vmov	s13, r3
 8014c40:	eee0 6a47 	vfms.f32	s13, s0, s14
 8014c44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014c48:	3d01      	subs	r5, #1
 8014c4a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8014c4e:	4305      	orrs	r5, r0
 8014c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014c54:	f024 040f 	bic.w	r4, r4, #15
 8014c58:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8014c5c:	bf18      	it	ne
 8014c5e:	eeb0 8a47 	vmovne.f32	s16, s14
 8014c62:	ee07 4a10 	vmov	s14, r4
 8014c66:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8014c6a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014c6e:	ee07 3a90 	vmov	s15, r3
 8014c72:	eee7 0a27 	vfma.f32	s1, s14, s15
 8014c76:	ee07 4a10 	vmov	s14, r4
 8014c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c7e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014c82:	ee17 1a10 	vmov	r1, s14
 8014c86:	2900      	cmp	r1, #0
 8014c88:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014c8c:	f340 80dd 	ble.w	8014e4a <__ieee754_powf+0x3e6>
 8014c90:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8014c94:	f240 80ca 	bls.w	8014e2c <__ieee754_powf+0x3c8>
 8014c98:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca0:	bf4c      	ite	mi
 8014ca2:	2001      	movmi	r0, #1
 8014ca4:	2000      	movpl	r0, #0
 8014ca6:	e791      	b.n	8014bcc <__ieee754_powf+0x168>
 8014ca8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8014cac:	bf01      	itttt	eq
 8014cae:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8014e90 <__ieee754_powf+0x42c>
 8014cb2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014cb6:	f06f 0317 	mvneq.w	r3, #23
 8014cba:	ee17 7a90 	vmoveq	r7, s15
 8014cbe:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8014cc2:	bf18      	it	ne
 8014cc4:	2300      	movne	r3, #0
 8014cc6:	3a7f      	subs	r2, #127	@ 0x7f
 8014cc8:	441a      	add	r2, r3
 8014cca:	4b72      	ldr	r3, [pc, #456]	@ (8014e94 <__ieee754_powf+0x430>)
 8014ccc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8014cd0:	429f      	cmp	r7, r3
 8014cd2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8014cd6:	dd06      	ble.n	8014ce6 <__ieee754_powf+0x282>
 8014cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8014e98 <__ieee754_powf+0x434>)
 8014cda:	429f      	cmp	r7, r3
 8014cdc:	f340 80a4 	ble.w	8014e28 <__ieee754_powf+0x3c4>
 8014ce0:	3201      	adds	r2, #1
 8014ce2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8014ce6:	2600      	movs	r6, #0
 8014ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8014e9c <__ieee754_powf+0x438>)
 8014cea:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8014cee:	ee07 1a10 	vmov	s14, r1
 8014cf2:	edd3 5a00 	vldr	s11, [r3]
 8014cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8014ea0 <__ieee754_powf+0x43c>)
 8014cf8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8014cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014d00:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8014d04:	1049      	asrs	r1, r1, #1
 8014d06:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8014d0a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8014d0e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8014d12:	ee37 6a65 	vsub.f32	s12, s14, s11
 8014d16:	ee07 1a90 	vmov	s15, r1
 8014d1a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8014d1e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8014d22:	ee15 7a10 	vmov	r7, s10
 8014d26:	401f      	ands	r7, r3
 8014d28:	ee06 7a90 	vmov	s13, r7
 8014d2c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8014d30:	ee37 7a65 	vsub.f32	s14, s14, s11
 8014d34:	ee65 7a05 	vmul.f32	s15, s10, s10
 8014d38:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8014d3c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8014ea4 <__ieee754_powf+0x440>
 8014d40:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8014ea8 <__ieee754_powf+0x444>
 8014d44:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014d48:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8014eac <__ieee754_powf+0x448>
 8014d4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014d50:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8014e80 <__ieee754_powf+0x41c>
 8014d54:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014d58:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8014eb0 <__ieee754_powf+0x44c>
 8014d5c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014d60:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8014eb4 <__ieee754_powf+0x450>
 8014d64:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014d68:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014d6c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8014d70:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8014d74:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014d78:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8014d7c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8014d80:	eef0 5a67 	vmov.f32	s11, s15
 8014d84:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8014d88:	ee75 5a87 	vadd.f32	s11, s11, s14
 8014d8c:	ee15 1a90 	vmov	r1, s11
 8014d90:	4019      	ands	r1, r3
 8014d92:	ee05 1a90 	vmov	s11, r1
 8014d96:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8014d9a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8014d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014da2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014da6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014daa:	eeb0 6a67 	vmov.f32	s12, s15
 8014dae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014db2:	ee16 1a10 	vmov	r1, s12
 8014db6:	4019      	ands	r1, r3
 8014db8:	ee06 1a10 	vmov	s12, r1
 8014dbc:	eeb0 7a46 	vmov.f32	s14, s12
 8014dc0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8014dc4:	493c      	ldr	r1, [pc, #240]	@ (8014eb8 <__ieee754_powf+0x454>)
 8014dc6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8014dca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014dce:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8014ebc <__ieee754_powf+0x458>
 8014dd2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8014ec0 <__ieee754_powf+0x45c>
 8014dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014dda:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8014ec4 <__ieee754_powf+0x460>
 8014dde:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014de2:	ed91 7a00 	vldr	s14, [r1]
 8014de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dea:	ee07 2a10 	vmov	s14, r2
 8014dee:	eef0 6a67 	vmov.f32	s13, s15
 8014df2:	4a35      	ldr	r2, [pc, #212]	@ (8014ec8 <__ieee754_powf+0x464>)
 8014df4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014df8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8014dfc:	ed92 5a00 	vldr	s10, [r2]
 8014e00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e04:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014e08:	ee76 6a87 	vadd.f32	s13, s13, s14
 8014e0c:	ee16 2a90 	vmov	r2, s13
 8014e10:	4013      	ands	r3, r2
 8014e12:	ee06 3a90 	vmov	s13, r3
 8014e16:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014e1a:	ee37 7a45 	vsub.f32	s14, s14, s10
 8014e1e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8014e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e26:	e70f      	b.n	8014c48 <__ieee754_powf+0x1e4>
 8014e28:	2601      	movs	r6, #1
 8014e2a:	e75d      	b.n	8014ce8 <__ieee754_powf+0x284>
 8014e2c:	d152      	bne.n	8014ed4 <__ieee754_powf+0x470>
 8014e2e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8014ecc <__ieee754_powf+0x468>
 8014e32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014e36:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014e3a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e42:	f73f af29 	bgt.w	8014c98 <__ieee754_powf+0x234>
 8014e46:	2386      	movs	r3, #134	@ 0x86
 8014e48:	e048      	b.n	8014edc <__ieee754_powf+0x478>
 8014e4a:	4a21      	ldr	r2, [pc, #132]	@ (8014ed0 <__ieee754_powf+0x46c>)
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	d907      	bls.n	8014e60 <__ieee754_powf+0x3fc>
 8014e50:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e58:	bf4c      	ite	mi
 8014e5a:	2001      	movmi	r0, #1
 8014e5c:	2000      	movpl	r0, #0
 8014e5e:	e6c1      	b.n	8014be4 <__ieee754_powf+0x180>
 8014e60:	d138      	bne.n	8014ed4 <__ieee754_powf+0x470>
 8014e62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014e66:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e6e:	dbea      	blt.n	8014e46 <__ieee754_powf+0x3e2>
 8014e70:	e7ee      	b.n	8014e50 <__ieee754_powf+0x3ec>
 8014e72:	bf00      	nop
 8014e74:	00000000 	.word	0x00000000
 8014e78:	3f7ffff3 	.word	0x3f7ffff3
 8014e7c:	3f800007 	.word	0x3f800007
 8014e80:	3eaaaaab 	.word	0x3eaaaaab
 8014e84:	3fb8aa3b 	.word	0x3fb8aa3b
 8014e88:	36eca570 	.word	0x36eca570
 8014e8c:	3fb8aa00 	.word	0x3fb8aa00
 8014e90:	4b800000 	.word	0x4b800000
 8014e94:	001cc471 	.word	0x001cc471
 8014e98:	005db3d6 	.word	0x005db3d6
 8014e9c:	08015e48 	.word	0x08015e48
 8014ea0:	fffff000 	.word	0xfffff000
 8014ea4:	3e6c3255 	.word	0x3e6c3255
 8014ea8:	3e53f142 	.word	0x3e53f142
 8014eac:	3e8ba305 	.word	0x3e8ba305
 8014eb0:	3edb6db7 	.word	0x3edb6db7
 8014eb4:	3f19999a 	.word	0x3f19999a
 8014eb8:	08015e38 	.word	0x08015e38
 8014ebc:	3f76384f 	.word	0x3f76384f
 8014ec0:	3f763800 	.word	0x3f763800
 8014ec4:	369dc3a0 	.word	0x369dc3a0
 8014ec8:	08015e40 	.word	0x08015e40
 8014ecc:	3338aa3c 	.word	0x3338aa3c
 8014ed0:	43160000 	.word	0x43160000
 8014ed4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8014ed8:	d971      	bls.n	8014fbe <__ieee754_powf+0x55a>
 8014eda:	15db      	asrs	r3, r3, #23
 8014edc:	3b7e      	subs	r3, #126	@ 0x7e
 8014ede:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8014ee2:	4118      	asrs	r0, r3
 8014ee4:	4408      	add	r0, r1
 8014ee6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014eea:	4a3c      	ldr	r2, [pc, #240]	@ (8014fdc <__ieee754_powf+0x578>)
 8014eec:	3b7f      	subs	r3, #127	@ 0x7f
 8014eee:	411a      	asrs	r2, r3
 8014ef0:	4002      	ands	r2, r0
 8014ef2:	ee07 2a10 	vmov	s14, r2
 8014ef6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8014efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8014efe:	f1c3 0317 	rsb	r3, r3, #23
 8014f02:	4118      	asrs	r0, r3
 8014f04:	2900      	cmp	r1, #0
 8014f06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f0a:	bfb8      	it	lt
 8014f0c:	4240      	neglt	r0, r0
 8014f0e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014f12:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8014fe0 <__ieee754_powf+0x57c>
 8014f16:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8014fe4 <__ieee754_powf+0x580>
 8014f1a:	ee17 3a10 	vmov	r3, s14
 8014f1e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8014f22:	f023 030f 	bic.w	r3, r3, #15
 8014f26:	ee07 3a10 	vmov	s14, r3
 8014f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f2e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f32:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014f36:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8014fe8 <__ieee754_powf+0x584>
 8014f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f3e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8014f42:	eef0 6a67 	vmov.f32	s13, s15
 8014f46:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014f4a:	eef0 5a66 	vmov.f32	s11, s13
 8014f4e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8014f52:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014f56:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014f5a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8014fec <__ieee754_powf+0x588>
 8014f5e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8014ff0 <__ieee754_powf+0x58c>
 8014f62:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014f66:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8014ff4 <__ieee754_powf+0x590>
 8014f6a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014f6e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8014ff8 <__ieee754_powf+0x594>
 8014f72:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014f76:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8014ffc <__ieee754_powf+0x598>
 8014f7a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014f7e:	eeb0 6a66 	vmov.f32	s12, s13
 8014f82:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8014f86:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8014f8a:	ee66 5a86 	vmul.f32	s11, s13, s12
 8014f8e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014f92:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8014f96:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8014f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014fa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014fa6:	ee10 3a10 	vmov	r3, s0
 8014faa:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014fb2:	da06      	bge.n	8014fc2 <__ieee754_powf+0x55e>
 8014fb4:	f000 f902 	bl	80151bc <scalbnf>
 8014fb8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014fbc:	e56a      	b.n	8014a94 <__ieee754_powf+0x30>
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	e7a5      	b.n	8014f0e <__ieee754_powf+0x4aa>
 8014fc2:	ee00 3a10 	vmov	s0, r3
 8014fc6:	e7f7      	b.n	8014fb8 <__ieee754_powf+0x554>
 8014fc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014fcc:	e562      	b.n	8014a94 <__ieee754_powf+0x30>
 8014fce:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8015000 <__ieee754_powf+0x59c>
 8014fd2:	e55f      	b.n	8014a94 <__ieee754_powf+0x30>
 8014fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8014fd8:	e55c      	b.n	8014a94 <__ieee754_powf+0x30>
 8014fda:	bf00      	nop
 8014fdc:	ff800000 	.word	0xff800000
 8014fe0:	3f317218 	.word	0x3f317218
 8014fe4:	3f317200 	.word	0x3f317200
 8014fe8:	35bfbe8c 	.word	0x35bfbe8c
 8014fec:	b5ddea0e 	.word	0xb5ddea0e
 8014ff0:	3331bb4c 	.word	0x3331bb4c
 8014ff4:	388ab355 	.word	0x388ab355
 8014ff8:	bb360b61 	.word	0xbb360b61
 8014ffc:	3e2aaaab 	.word	0x3e2aaaab
 8015000:	00000000 	.word	0x00000000

08015004 <atanf>:
 8015004:	b538      	push	{r3, r4, r5, lr}
 8015006:	ee10 5a10 	vmov	r5, s0
 801500a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801500e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8015012:	eef0 7a40 	vmov.f32	s15, s0
 8015016:	d310      	bcc.n	801503a <atanf+0x36>
 8015018:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801501c:	d904      	bls.n	8015028 <atanf+0x24>
 801501e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015022:	eeb0 0a67 	vmov.f32	s0, s15
 8015026:	bd38      	pop	{r3, r4, r5, pc}
 8015028:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8015160 <atanf+0x15c>
 801502c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8015164 <atanf+0x160>
 8015030:	2d00      	cmp	r5, #0
 8015032:	bfc8      	it	gt
 8015034:	eef0 7a47 	vmovgt.f32	s15, s14
 8015038:	e7f3      	b.n	8015022 <atanf+0x1e>
 801503a:	4b4b      	ldr	r3, [pc, #300]	@ (8015168 <atanf+0x164>)
 801503c:	429c      	cmp	r4, r3
 801503e:	d810      	bhi.n	8015062 <atanf+0x5e>
 8015040:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8015044:	d20a      	bcs.n	801505c <atanf+0x58>
 8015046:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801516c <atanf+0x168>
 801504a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801504e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015052:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801505a:	dce2      	bgt.n	8015022 <atanf+0x1e>
 801505c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015060:	e013      	b.n	801508a <atanf+0x86>
 8015062:	f000 f8a3 	bl	80151ac <fabsf>
 8015066:	4b42      	ldr	r3, [pc, #264]	@ (8015170 <atanf+0x16c>)
 8015068:	429c      	cmp	r4, r3
 801506a:	d84f      	bhi.n	801510c <atanf+0x108>
 801506c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8015070:	429c      	cmp	r4, r3
 8015072:	d841      	bhi.n	80150f8 <atanf+0xf4>
 8015074:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8015078:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801507c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015080:	2300      	movs	r3, #0
 8015082:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015086:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801508a:	1c5a      	adds	r2, r3, #1
 801508c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015090:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8015174 <atanf+0x170>
 8015094:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8015178 <atanf+0x174>
 8015098:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801517c <atanf+0x178>
 801509c:	ee66 6a06 	vmul.f32	s13, s12, s12
 80150a0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80150a4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8015180 <atanf+0x17c>
 80150a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150ac:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8015184 <atanf+0x180>
 80150b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150b4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8015188 <atanf+0x184>
 80150b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801518c <atanf+0x188>
 80150c0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150c4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8015190 <atanf+0x18c>
 80150c8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80150cc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8015194 <atanf+0x190>
 80150d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80150d4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8015198 <atanf+0x194>
 80150d8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80150dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801519c <atanf+0x198>
 80150e0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80150e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80150e8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80150ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80150f0:	d121      	bne.n	8015136 <atanf+0x132>
 80150f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80150f6:	e794      	b.n	8015022 <atanf+0x1e>
 80150f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80150fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015100:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015104:	2301      	movs	r3, #1
 8015106:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801510a:	e7be      	b.n	801508a <atanf+0x86>
 801510c:	4b24      	ldr	r3, [pc, #144]	@ (80151a0 <atanf+0x19c>)
 801510e:	429c      	cmp	r4, r3
 8015110:	d80b      	bhi.n	801512a <atanf+0x126>
 8015112:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8015116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801511a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801511e:	2302      	movs	r3, #2
 8015120:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015128:	e7af      	b.n	801508a <atanf+0x86>
 801512a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801512e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015132:	2303      	movs	r3, #3
 8015134:	e7a9      	b.n	801508a <atanf+0x86>
 8015136:	4a1b      	ldr	r2, [pc, #108]	@ (80151a4 <atanf+0x1a0>)
 8015138:	491b      	ldr	r1, [pc, #108]	@ (80151a8 <atanf+0x1a4>)
 801513a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801513e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015142:	edd3 6a00 	vldr	s13, [r3]
 8015146:	ee37 7a66 	vsub.f32	s14, s14, s13
 801514a:	2d00      	cmp	r5, #0
 801514c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015150:	edd2 7a00 	vldr	s15, [r2]
 8015154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015158:	bfb8      	it	lt
 801515a:	eef1 7a67 	vneglt.f32	s15, s15
 801515e:	e760      	b.n	8015022 <atanf+0x1e>
 8015160:	bfc90fdb 	.word	0xbfc90fdb
 8015164:	3fc90fdb 	.word	0x3fc90fdb
 8015168:	3edfffff 	.word	0x3edfffff
 801516c:	7149f2ca 	.word	0x7149f2ca
 8015170:	3f97ffff 	.word	0x3f97ffff
 8015174:	3c8569d7 	.word	0x3c8569d7
 8015178:	3d4bda59 	.word	0x3d4bda59
 801517c:	bd6ef16b 	.word	0xbd6ef16b
 8015180:	3d886b35 	.word	0x3d886b35
 8015184:	3dba2e6e 	.word	0x3dba2e6e
 8015188:	3e124925 	.word	0x3e124925
 801518c:	3eaaaaab 	.word	0x3eaaaaab
 8015190:	bd15a221 	.word	0xbd15a221
 8015194:	bd9d8795 	.word	0xbd9d8795
 8015198:	bde38e38 	.word	0xbde38e38
 801519c:	be4ccccd 	.word	0xbe4ccccd
 80151a0:	401bffff 	.word	0x401bffff
 80151a4:	08015e60 	.word	0x08015e60
 80151a8:	08015e50 	.word	0x08015e50

080151ac <fabsf>:
 80151ac:	ee10 3a10 	vmov	r3, s0
 80151b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80151b4:	ee00 3a10 	vmov	s0, r3
 80151b8:	4770      	bx	lr
	...

080151bc <scalbnf>:
 80151bc:	ee10 3a10 	vmov	r3, s0
 80151c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80151c4:	d02b      	beq.n	801521e <scalbnf+0x62>
 80151c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80151ca:	d302      	bcc.n	80151d2 <scalbnf+0x16>
 80151cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80151d0:	4770      	bx	lr
 80151d2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80151d6:	d123      	bne.n	8015220 <scalbnf+0x64>
 80151d8:	4b24      	ldr	r3, [pc, #144]	@ (801526c <scalbnf+0xb0>)
 80151da:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8015270 <scalbnf+0xb4>
 80151de:	4298      	cmp	r0, r3
 80151e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80151e4:	db17      	blt.n	8015216 <scalbnf+0x5a>
 80151e6:	ee10 3a10 	vmov	r3, s0
 80151ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80151ee:	3a19      	subs	r2, #25
 80151f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80151f4:	4288      	cmp	r0, r1
 80151f6:	dd15      	ble.n	8015224 <scalbnf+0x68>
 80151f8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8015274 <scalbnf+0xb8>
 80151fc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8015278 <scalbnf+0xbc>
 8015200:	ee10 3a10 	vmov	r3, s0
 8015204:	eeb0 7a67 	vmov.f32	s14, s15
 8015208:	2b00      	cmp	r3, #0
 801520a:	bfb8      	it	lt
 801520c:	eef0 7a66 	vmovlt.f32	s15, s13
 8015210:	ee27 0a87 	vmul.f32	s0, s15, s14
 8015214:	4770      	bx	lr
 8015216:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801527c <scalbnf+0xc0>
 801521a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801521e:	4770      	bx	lr
 8015220:	0dd2      	lsrs	r2, r2, #23
 8015222:	e7e5      	b.n	80151f0 <scalbnf+0x34>
 8015224:	4410      	add	r0, r2
 8015226:	28fe      	cmp	r0, #254	@ 0xfe
 8015228:	dce6      	bgt.n	80151f8 <scalbnf+0x3c>
 801522a:	2800      	cmp	r0, #0
 801522c:	dd06      	ble.n	801523c <scalbnf+0x80>
 801522e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015232:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015236:	ee00 3a10 	vmov	s0, r3
 801523a:	4770      	bx	lr
 801523c:	f110 0f16 	cmn.w	r0, #22
 8015240:	da09      	bge.n	8015256 <scalbnf+0x9a>
 8015242:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801527c <scalbnf+0xc0>
 8015246:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8015280 <scalbnf+0xc4>
 801524a:	ee10 3a10 	vmov	r3, s0
 801524e:	eeb0 7a67 	vmov.f32	s14, s15
 8015252:	2b00      	cmp	r3, #0
 8015254:	e7d9      	b.n	801520a <scalbnf+0x4e>
 8015256:	3019      	adds	r0, #25
 8015258:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801525c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015260:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8015284 <scalbnf+0xc8>
 8015264:	ee07 3a90 	vmov	s15, r3
 8015268:	e7d7      	b.n	801521a <scalbnf+0x5e>
 801526a:	bf00      	nop
 801526c:	ffff3cb0 	.word	0xffff3cb0
 8015270:	4c000000 	.word	0x4c000000
 8015274:	7149f2ca 	.word	0x7149f2ca
 8015278:	f149f2ca 	.word	0xf149f2ca
 801527c:	0da24260 	.word	0x0da24260
 8015280:	8da24260 	.word	0x8da24260
 8015284:	33000000 	.word	0x33000000

08015288 <with_errnof>:
 8015288:	b510      	push	{r4, lr}
 801528a:	ed2d 8b02 	vpush	{d8}
 801528e:	eeb0 8a40 	vmov.f32	s16, s0
 8015292:	4604      	mov	r4, r0
 8015294:	f7fd fa6c 	bl	8012770 <__errno>
 8015298:	eeb0 0a48 	vmov.f32	s0, s16
 801529c:	ecbd 8b02 	vpop	{d8}
 80152a0:	6004      	str	r4, [r0, #0]
 80152a2:	bd10      	pop	{r4, pc}

080152a4 <xflowf>:
 80152a4:	b130      	cbz	r0, 80152b4 <xflowf+0x10>
 80152a6:	eef1 7a40 	vneg.f32	s15, s0
 80152aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80152ae:	2022      	movs	r0, #34	@ 0x22
 80152b0:	f7ff bfea 	b.w	8015288 <with_errnof>
 80152b4:	eef0 7a40 	vmov.f32	s15, s0
 80152b8:	e7f7      	b.n	80152aa <xflowf+0x6>
	...

080152bc <__math_uflowf>:
 80152bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80152c4 <__math_uflowf+0x8>
 80152c0:	f7ff bff0 	b.w	80152a4 <xflowf>
 80152c4:	10000000 	.word	0x10000000

080152c8 <__math_oflowf>:
 80152c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80152d0 <__math_oflowf+0x8>
 80152cc:	f7ff bfea 	b.w	80152a4 <xflowf>
 80152d0:	70000000 	.word	0x70000000

080152d4 <__ieee754_sqrtf>:
 80152d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80152d8:	4770      	bx	lr
	...

080152dc <_init>:
 80152dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152de:	bf00      	nop
 80152e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152e2:	bc08      	pop	{r3}
 80152e4:	469e      	mov	lr, r3
 80152e6:	4770      	bx	lr

080152e8 <_fini>:
 80152e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ea:	bf00      	nop
 80152ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152ee:	bc08      	pop	{r3}
 80152f0:	469e      	mov	lr, r3
 80152f2:	4770      	bx	lr
